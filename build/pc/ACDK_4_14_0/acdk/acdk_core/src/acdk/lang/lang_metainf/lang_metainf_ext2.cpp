// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../lang.h"
#include "../ArithmeticException.h"
#include "../ArrayIndexOutOfBoundsException.h"
#include "../BasicArray.h"
#include "../BasicArrayInl.h"
#include "../Boolean.h"
#include "../Byte.h"
#include "../ByteBuffer.h"
#include "../Character.h"
#include "../Class.h"
#include "../ClassCastException.h"
#include "../ClassLoader.h"
#include "../ClassNotFoundException.h"
#include "../Cloneable.h"
#include "../CloneNotSupportedException.h"
#include "../CmdLineOption.h"
#include "../CmdLineParseException.h"
#include "../CmdLineParser.h"
#include "../Comparable.h"
#include "../DmiException.h"
#include "../DmiTypeConversionException.h"
#include "../Double.h"
#include "../Error.h"
#include "../Exception.h"
#include "../ExceptionDeclarations.h"
#include "../ExtObject.h"
#include "../Float.h"
#include "../IllegalAccessException.h"
#include "../IllegalArgumentException.h"
#include "../IllegalMonitorStateException.h"
#include "../IllegalStateException.h"
#include "../IllegalThreadStateException.h"
#include "../IndexOutOfBoundsException.h"
#include "../InOutPreDeclaration.h"
#include "../InstantiationException.h"
#include "../Integer.h"
#include "../InterfaceBase.h"
#include "../InterruptedException.h"
#include "../lang.h"
#include "../lang_all.h"
#include "../Long.h"
#include "../Math.h"
#include "../NoSuchDmiElementException.h"
#include "../NoSuchElementException.h"
#include "../NoSuchFieldException.h"
#include "../NoSuchMethodException.h"
#include "../NullPointerException.h"
#include "../Number.h"
#include "../NumberFormatException.h"
#include "../Object.h"
#include "../ObjectArrayBase.h"
#include "../ObjectArrayBaseInl.h"
#include "../ObjectArrayImpl.h"
#include "../ObjectBase.h"
#include "../ObjectDebug.h"
#include "../ObjectImpl.h"
#include "../ObjectInline.h"
#include "../OutOfMemoryError.h"
#include "../Package.h"
#include "../ParamsMismatchException.h"
#include "../Process.h"
#include "../Runnable.h"
#include "../Runtime.h"
#include "../RuntimeException.h"
#include "../SharedLibrary.h"
#include "../Short.h"
#include "../StackFrame.h"
#include "../StackOverflowError.h"
#include "../String.h"
#include "../StringBuffer.h"
#include "../StringConcenator.h"
#include "../StringIndexOutOfBoundsException.h"
#include "../StringInline.h"
#include "../StringUtf8Utils.h"
#include "../System.h"
#include "../SystemError.h"
#include "../SystemInline.h"
#include "../SystemIntern.h"
#include "../Thread.h"
#include "../ThreadDeath.h"
#include "../ThreadGroup.h"
#include "../ThreadImpl.h"
#include "../ThreadLocal.h"
#include "../ThreadLocalImpl.h"
#include "../Throwable.h"
#include "../UnicodeCharacter.h"
#include "../UnsupportedOperationException.h"
#include "../Void.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
Error_create_array(int length)
{
  return new ObjectArrayImpl<RError>(length);
}

//static
::acdk::lang::RObject
Error_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Error_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Error_method_Error__LRError__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Error();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Error_method_Error_INLRString_INLRThrowable__LRError__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Error(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RThrowable>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Error_method_Error_INLRString__LRError__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Error(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Error_method_Error_INLRThrowable__LRError__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Error(::acdk::lang::dmi::castTo< RThrowable>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Error_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Error::GetClass();
    return methinf;
  }
};


void ThrowException_Error(IN(::acdk::lang::RThrowable) ex)
{
  throw RError(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _Error_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Error_methods_Error__LRError__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Error_methods_Error__LRError__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Error_method_Error__LRError_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Error", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Error::clazzInfo(), // return type
  "_0_Error", // alternative name of method
  -1, // altlabelHashCode
  Error_methods_Error__LRError__args, // the arguments
  0, //arguments count
  Error_methods_Error__LRError__exceptions, // the declared exceptions
  Error_MetainfoWrapper::Error_method_Error__LRError__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Error_methods_Error_INLRString_INLRThrowable__LRError__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Error_methods_Error_INLRString_INLRThrowable__LRError__arg_cause = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "cause", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThrowable::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Error_methods_Error_INLRString_INLRThrowable__LRError__args[] = 
{
  &Error_methods_Error_INLRString_INLRThrowable__LRError__arg_what,
  &Error_methods_Error_INLRString_INLRThrowable__LRError__arg_cause,
  0
};

::acdk::lang::dmi::ClazzInfo* Error_methods_Error_INLRString_INLRThrowable__LRError__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Error_method_Error_INLRString_INLRThrowable__LRError_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Error", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Error::clazzInfo(), // return type
  "_1_Error", // alternative name of method
  -1, // altlabelHashCode
  Error_methods_Error_INLRString_INLRThrowable__LRError__args, // the arguments
  0, //arguments count
  Error_methods_Error_INLRString_INLRThrowable__LRError__exceptions, // the declared exceptions
  Error_MetainfoWrapper::Error_method_Error_INLRString_INLRThrowable__LRError__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Error_methods_Error_INLRString__LRError__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Error_methods_Error_INLRString__LRError__args[] = 
{
  &Error_methods_Error_INLRString__LRError__arg_what,
  0
};

::acdk::lang::dmi::ClazzInfo* Error_methods_Error_INLRString__LRError__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Error_method_Error_INLRString__LRError_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Error", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Error::clazzInfo(), // return type
  "_2_Error", // alternative name of method
  -1, // altlabelHashCode
  Error_methods_Error_INLRString__LRError__args, // the arguments
  0, //arguments count
  Error_methods_Error_INLRString__LRError__exceptions, // the declared exceptions
  Error_MetainfoWrapper::Error_method_Error_INLRString__LRError__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Error_methods_Error_INLRThrowable__LRError__arg_cause = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cause", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThrowable::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Error_methods_Error_INLRThrowable__LRError__args[] = 
{
  &Error_methods_Error_INLRThrowable__LRError__arg_cause,
  0
};

::acdk::lang::dmi::ClazzInfo* Error_methods_Error_INLRThrowable__LRError__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Error_method_Error_INLRThrowable__LRError_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Error", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Error::clazzInfo(), // return type
  "_3_Error", // alternative name of method
  -1, // altlabelHashCode
  Error_methods_Error_INLRThrowable__LRError__args, // the arguments
  0, //arguments count
  Error_methods_Error_INLRThrowable__LRError__exceptions, // the declared exceptions
  Error_MetainfoWrapper::Error_method_Error_INLRThrowable__LRError__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Error_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Error_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Error_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Error_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Error_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Error_MetainfoWrapper::Error_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Error_methods[] = 
{
  &Error_method_Error__LRError_,
  &Error_method_Error_INLRString_INLRThrowable__LRError_,
  &Error_method_Error_INLRString__LRError_,
  &Error_method_Error_INLRThrowable__LRError_,
  &Error_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct Error_MetaInfoInitializer
{  Error_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Error::clazzInfo();
    ci->fields =  _Error_fields;
    ci->methods =  _Error_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Error_MetaInfoInitializer Error_MetaInfoInitializer_staticinstance__;


struct Error_clazzInfo_ClazzAttributesResInitializer19
{
  Error_clazzInfo_ClazzAttributesResInitializer19()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)Error::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_Error));
  }
};

Error_clazzInfo_ClazzAttributesResInitializer19 Error_clazzInfo_ClazzAttributesResInitializer19_instance;



} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
Exception_create_array(int length)
{
  return new ObjectArrayImpl<RException>(length);
}

//static
::acdk::lang::RObject
Exception_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Exception_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Exception_method_Exception__LRException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Exception();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Exception_method_Exception_INLRString_INLRThrowable__LRException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Exception(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RThrowable>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Exception_method_Exception_INLRString__LRException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Exception(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Exception_method_Exception_INLRThrowable__LRException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Exception(::acdk::lang::dmi::castTo< RThrowable>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Exception_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Exception::GetClass();
    return methinf;
  }
};


void ThrowException_Exception(IN(::acdk::lang::RThrowable) ex)
{
  throw RException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _Exception_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Exception_methods_Exception__LRException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Exception_methods_Exception__LRException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Exception_method_Exception__LRException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Exception", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Exception::clazzInfo(), // return type
  "_0_Exception", // alternative name of method
  -1, // altlabelHashCode
  Exception_methods_Exception__LRException__args, // the arguments
  0, //arguments count
  Exception_methods_Exception__LRException__exceptions, // the declared exceptions
  Exception_MetainfoWrapper::Exception_method_Exception__LRException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Exception_methods_Exception_INLRString_INLRThrowable__LRException__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Exception_methods_Exception_INLRString_INLRThrowable__LRException__arg_cause = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "cause", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThrowable::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Exception_methods_Exception_INLRString_INLRThrowable__LRException__args[] = 
{
  &Exception_methods_Exception_INLRString_INLRThrowable__LRException__arg_what,
  &Exception_methods_Exception_INLRString_INLRThrowable__LRException__arg_cause,
  0
};

::acdk::lang::dmi::ClazzInfo* Exception_methods_Exception_INLRString_INLRThrowable__LRException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Exception_method_Exception_INLRString_INLRThrowable__LRException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Exception", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Exception::clazzInfo(), // return type
  "_1_Exception", // alternative name of method
  -1, // altlabelHashCode
  Exception_methods_Exception_INLRString_INLRThrowable__LRException__args, // the arguments
  0, //arguments count
  Exception_methods_Exception_INLRString_INLRThrowable__LRException__exceptions, // the declared exceptions
  Exception_MetainfoWrapper::Exception_method_Exception_INLRString_INLRThrowable__LRException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Exception_methods_Exception_INLRString__LRException__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Exception_methods_Exception_INLRString__LRException__args[] = 
{
  &Exception_methods_Exception_INLRString__LRException__arg_what,
  0
};

::acdk::lang::dmi::ClazzInfo* Exception_methods_Exception_INLRString__LRException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Exception_method_Exception_INLRString__LRException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Exception", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Exception::clazzInfo(), // return type
  "_2_Exception", // alternative name of method
  -1, // altlabelHashCode
  Exception_methods_Exception_INLRString__LRException__args, // the arguments
  0, //arguments count
  Exception_methods_Exception_INLRString__LRException__exceptions, // the declared exceptions
  Exception_MetainfoWrapper::Exception_method_Exception_INLRString__LRException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Exception_methods_Exception_INLRThrowable__LRException__arg_cause = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cause", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThrowable::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Exception_methods_Exception_INLRThrowable__LRException__args[] = 
{
  &Exception_methods_Exception_INLRThrowable__LRException__arg_cause,
  0
};

::acdk::lang::dmi::ClazzInfo* Exception_methods_Exception_INLRThrowable__LRException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Exception_method_Exception_INLRThrowable__LRException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Exception", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Exception::clazzInfo(), // return type
  "_3_Exception", // alternative name of method
  -1, // altlabelHashCode
  Exception_methods_Exception_INLRThrowable__LRException__args, // the arguments
  0, //arguments count
  Exception_methods_Exception_INLRThrowable__LRException__exceptions, // the declared exceptions
  Exception_MetainfoWrapper::Exception_method_Exception_INLRThrowable__LRException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Exception_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Exception_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Exception_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Exception_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Exception_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Exception_MetainfoWrapper::Exception_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Exception_methods[] = 
{
  &Exception_method_Exception__LRException_,
  &Exception_method_Exception_INLRString_INLRThrowable__LRException_,
  &Exception_method_Exception_INLRString__LRException_,
  &Exception_method_Exception_INLRThrowable__LRException_,
  &Exception_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct Exception_MetaInfoInitializer
{  Exception_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Exception::clazzInfo();
    ci->fields =  _Exception_fields;
    ci->methods =  _Exception_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Exception_MetaInfoInitializer Exception_MetaInfoInitializer_staticinstance__;


struct Exception_clazzInfo_ClazzAttributesResInitializer20
{
  Exception_clazzInfo_ClazzAttributesResInitializer20()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)Exception::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_Exception));
  }
};

Exception_clazzInfo_ClazzAttributesResInitializer20 Exception_clazzInfo_ClazzAttributesResInitializer20_instance;



} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
Float_create_array(int length)
{
  return new ObjectArrayImpl<RFloat>(length);
}

//static
::acdk::lang::RObject
Float_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Float_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Float_method_Float_F_LRFloat__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Float(::acdk::lang::dmi::castTo< float>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Float_method_Float_INLRString_INLacdk_util_RLocale__LRFloat__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Float(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< acdk::util::RLocale>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Float_method_Float__LRFloat__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Float();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Float_method_Float_INLRString__LRFloat__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Float(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Float_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Float::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Float_method_compareTo_INLRFloat__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Float* This = dmi_cast<Float>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Float::compareTo(::acdk::lang::dmi::castTo< RFloat>(args[0], dc));
    else
      ret = This->compareTo(::acdk::lang::dmi::castTo< RFloat>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Float_method_compareTo_F_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Float* This = dmi_cast<Float>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Float::compareTo(::acdk::lang::dmi::castTo< float>(args[0], dc));
    else
      ret = This->compareTo(::acdk::lang::dmi::castTo< float>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Float_method_create_instance__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Float::create_instance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Float_method_equals_INLRFloat__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Float* This = dmi_cast<Float>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Float::equals(::acdk::lang::dmi::castTo< RFloat>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< RFloat>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Float_method_equals_F_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Float* This = dmi_cast<Float>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Float::equals(::acdk::lang::dmi::castTo< float>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< float>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Float_method_getTYPE__LRClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Float::getTYPE();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Float_method_hashCode_F_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Float::hashCode(::acdk::lang::dmi::castTo< float>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Float_method_parseFloat_INLRString_INLacdk_util_RLocale__F_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Float::parseFloat(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< acdk::util::RLocale>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Float_method_parseFloat_INLRString__F_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Float::parseFloat(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Float_method_toString_FINLacdk_util_RLocale__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Float::toString(::acdk::lang::dmi::castTo< float>(args[0], dc), ::acdk::lang::dmi::castTo< acdk::util::RLocale>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Float_method_toString_F_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Float::toString(::acdk::lang::dmi::castTo< float>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Float_method_valueOf_INLRString__LRFloat__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Float::valueOf(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Float_fields_MAX_VALUE_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Float::MAX_VALUE, flags);
    else
      Float::MAX_VALUE = ::acdk::lang::dmi::castTo< float>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Float_fields_MIN_VALUE_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Float::MIN_VALUE, flags);
    else
      Float::MIN_VALUE = ::acdk::lang::dmi::castTo< float>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Float_fields_value_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Float* This = dmi_cast<Float>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->value, flags);
    else
      This->value = ::acdk::lang::dmi::castTo< float>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo Float_fields_MAX_VALUE = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "MAX_VALUE", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz(),
  Float_MetainfoWrapper::Float_fields_MAX_VALUE_accessor, // read/write access to this fields
  (void*)&Float::MAX_VALUE // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Float_fields_MIN_VALUE = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "MIN_VALUE", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz(),
  Float_MetainfoWrapper::Float_fields_MIN_VALUE_accessor, // read/write access to this fields
  (void*)&Float::MIN_VALUE // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Float_fields_value = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "value", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz(),
  Float_MetainfoWrapper::Float_fields_value_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _Float_fields[] = 
{
  &Float_fields_MAX_VALUE,
  &Float_fields_MIN_VALUE,
  &Float_fields_value,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo Float_methods_Float_F_LRFloat__arg_l = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "l", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Float_methods_Float_F_LRFloat__args[] = 
{
  &Float_methods_Float_F_LRFloat__arg_l,
  0
};

::acdk::lang::dmi::ClazzInfo* Float_methods_Float_F_LRFloat__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Float_method_Float_F_LRFloat_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Float", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Float::clazzInfo(), // return type
  "_2_Float", // alternative name of method
  -1, // altlabelHashCode
  Float_methods_Float_F_LRFloat__args, // the arguments
  0, //arguments count
  Float_methods_Float_F_LRFloat__exceptions, // the declared exceptions
  Float_MetainfoWrapper::Float_method_Float_F_LRFloat__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Float_methods_Float_INLRString_INLacdk_util_RLocale__LRFloat__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Float_methods_Float_INLRString_INLacdk_util_RLocale__LRFloat__arg_locale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "locale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RLocale::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Float_methods_Float_INLRString_INLacdk_util_RLocale__LRFloat__args[] = 
{
  &Float_methods_Float_INLRString_INLacdk_util_RLocale__LRFloat__arg_str,
  &Float_methods_Float_INLRString_INLacdk_util_RLocale__LRFloat__arg_locale,
  0
};

::acdk::lang::dmi::ClazzInfo* Float_methods_Float_INLRString_INLacdk_util_RLocale__LRFloat__exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Float_Float_INLRString_INLacdk_util_RLocale__LRFloat__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Float_method_Float_INLRString_INLacdk_util_RLocale__LRFloat_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Float", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Float::clazzInfo(), // return type
  "_3_Float", // alternative name of method
  -1, // altlabelHashCode
  Float_methods_Float_INLRString_INLacdk_util_RLocale__LRFloat__args, // the arguments
  0, //arguments count
  Float_methods_Float_INLRString_INLacdk_util_RLocale__LRFloat__exceptions, // the declared exceptions
  Float_MetainfoWrapper::Float_method_Float_INLRString_INLacdk_util_RLocale__LRFloat__dispatch, // invoke this method
  Float_Float_INLRString_INLacdk_util_RLocale__LRFloat__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Float_methods_Float__LRFloat__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Float_methods_Float__LRFloat__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Float_method_Float__LRFloat_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Float", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Float::clazzInfo(), // return type
  "_1_Float", // alternative name of method
  -1, // altlabelHashCode
  Float_methods_Float__LRFloat__args, // the arguments
  0, //arguments count
  Float_methods_Float__LRFloat__exceptions, // the declared exceptions
  Float_MetainfoWrapper::Float_method_Float__LRFloat__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Float_methods_Float_INLRString__LRFloat__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Float_methods_Float_INLRString__LRFloat__args[] = 
{
  &Float_methods_Float_INLRString__LRFloat__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* Float_methods_Float_INLRString__LRFloat__exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Float_Float_INLRString__LRFloat__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Float_method_Float_INLRString__LRFloat_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Float", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Float::clazzInfo(), // return type
  "_4_Float", // alternative name of method
  -1, // altlabelHashCode
  Float_methods_Float_INLRString__LRFloat__args, // the arguments
  0, //arguments count
  Float_methods_Float_INLRString__LRFloat__exceptions, // the declared exceptions
  Float_MetainfoWrapper::Float_method_Float_INLRString__LRFloat__dispatch, // invoke this method
  Float_Float_INLRString__LRFloat__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Float_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Float_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Float_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_g_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Float_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Float_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Float_MetainfoWrapper::Float_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Float_methods_compareTo_INLRFloat__I_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFloat::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Float_methods_compareTo_INLRFloat__I_args[] = 
{
  &Float_methods_compareTo_INLRFloat__I_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* Float_methods_compareTo_INLRFloat__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Float_method_compareTo_INLRFloat__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "compareTo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_compareTo", // alternative name of method
  -1, // altlabelHashCode
  Float_methods_compareTo_INLRFloat__I_args, // the arguments
  0, //arguments count
  Float_methods_compareTo_INLRFloat__I_exceptions, // the declared exceptions
  Float_MetainfoWrapper::Float_method_compareTo_INLRFloat__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Float_methods_compareTo_F_I_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Float_methods_compareTo_F_I_args[] = 
{
  &Float_methods_compareTo_F_I_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* Float_methods_compareTo_F_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Float_method_compareTo_F_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "compareTo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_compareTo", // alternative name of method
  -1, // altlabelHashCode
  Float_methods_compareTo_F_I_args, // the arguments
  0, //arguments count
  Float_methods_compareTo_F_I_exceptions, // the declared exceptions
  Float_MetainfoWrapper::Float_method_compareTo_F_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Float_methods_create_instance__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Float_methods_create_instance__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Float_method_create_instance__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create_instance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_0_create_instance", // alternative name of method
  -1, // altlabelHashCode
  Float_methods_create_instance__LRObject__args, // the arguments
  0, //arguments count
  Float_methods_create_instance__LRObject__exceptions, // the declared exceptions
  Float_MetainfoWrapper::Float_method_create_instance__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Float_methods_equals_INLRFloat__Z_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFloat::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Float_methods_equals_INLRFloat__Z_args[] = 
{
  &Float_methods_equals_INLRFloat__Z_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* Float_methods_equals_INLRFloat__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Float_method_equals_INLRFloat__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_equals", // alternative name of method
  -1, // altlabelHashCode
  Float_methods_equals_INLRFloat__Z_args, // the arguments
  0, //arguments count
  Float_methods_equals_INLRFloat__Z_exceptions, // the declared exceptions
  Float_MetainfoWrapper::Float_method_equals_INLRFloat__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Float_methods_equals_F_Z_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Float_methods_equals_F_Z_args[] = 
{
  &Float_methods_equals_F_Z_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* Float_methods_equals_F_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Float_method_equals_F_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_8_equals", // alternative name of method
  -1, // altlabelHashCode
  Float_methods_equals_F_Z_args, // the arguments
  0, //arguments count
  Float_methods_equals_F_Z_exceptions, // the declared exceptions
  Float_MetainfoWrapper::Float_method_equals_F_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Float_methods_getTYPE__LRClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Float_methods_getTYPE__LRClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Float_method_getTYPE__LRClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTYPE", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(), // return type
  "_f_getTYPE", // alternative name of method
  -1, // altlabelHashCode
  Float_methods_getTYPE__LRClass__args, // the arguments
  0, //arguments count
  Float_methods_getTYPE__LRClass__exceptions, // the declared exceptions
  Float_MetainfoWrapper::Float_method_getTYPE__LRClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Float_methods_hashCode_F_I_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Float_methods_hashCode_F_I_args[] = 
{
  &Float_methods_hashCode_F_I_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* Float_methods_hashCode_F_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Float_method_hashCode_F_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hashCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_b_hashCode", // alternative name of method
  -1, // altlabelHashCode
  Float_methods_hashCode_F_I_args, // the arguments
  0, //arguments count
  Float_methods_hashCode_F_I_exceptions, // the declared exceptions
  Float_MetainfoWrapper::Float_method_hashCode_F_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Float_methods_parseFloat_INLRString_INLacdk_util_RLocale__F_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Float_methods_parseFloat_INLRString_INLacdk_util_RLocale__F_arg_locale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "locale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RLocale::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Float_methods_parseFloat_INLRString_INLacdk_util_RLocale__F_args[] = 
{
  &Float_methods_parseFloat_INLRString_INLacdk_util_RLocale__F_arg_s,
  &Float_methods_parseFloat_INLRString_INLacdk_util_RLocale__F_arg_locale,
  0
};

::acdk::lang::dmi::ClazzInfo* Float_methods_parseFloat_INLRString_INLacdk_util_RLocale__F_exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Float_parseFloat_INLRString_INLacdk_util_RLocale__F_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Float_method_parseFloat_INLRString_INLacdk_util_RLocale__F = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parseFloat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz(), // return type
  "_9_parseFloat", // alternative name of method
  -1, // altlabelHashCode
  Float_methods_parseFloat_INLRString_INLacdk_util_RLocale__F_args, // the arguments
  0, //arguments count
  Float_methods_parseFloat_INLRString_INLacdk_util_RLocale__F_exceptions, // the declared exceptions
  Float_MetainfoWrapper::Float_method_parseFloat_INLRString_INLacdk_util_RLocale__F_dispatch, // invoke this method
  Float_parseFloat_INLRString_INLacdk_util_RLocale__F_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Float_methods_parseFloat_INLRString__F_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Float_methods_parseFloat_INLRString__F_args[] = 
{
  &Float_methods_parseFloat_INLRString__F_arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* Float_methods_parseFloat_INLRString__F_exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Float_parseFloat_INLRString__F_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Float_method_parseFloat_INLRString__F = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "parseFloat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz(), // return type
  "_a_parseFloat", // alternative name of method
  -1, // altlabelHashCode
  Float_methods_parseFloat_INLRString__F_args, // the arguments
  0, //arguments count
  Float_methods_parseFloat_INLRString__F_exceptions, // the declared exceptions
  Float_MetainfoWrapper::Float_method_parseFloat_INLRString__F_dispatch, // invoke this method
  Float_parseFloat_INLRString__F_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Float_methods_toString_FINLacdk_util_RLocale__LRString__arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Float_methods_toString_FINLacdk_util_RLocale__LRString__arg_locale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "locale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RLocale::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Float_methods_toString_FINLacdk_util_RLocale__LRString__args[] = 
{
  &Float_methods_toString_FINLacdk_util_RLocale__LRString__arg_i,
  &Float_methods_toString_FINLacdk_util_RLocale__LRString__arg_locale,
  0
};

::acdk::lang::dmi::ClazzInfo* Float_methods_toString_FINLacdk_util_RLocale__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Float_method_toString_FINLacdk_util_RLocale__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_c_toString", // alternative name of method
  -1, // altlabelHashCode
  Float_methods_toString_FINLacdk_util_RLocale__LRString__args, // the arguments
  0, //arguments count
  Float_methods_toString_FINLacdk_util_RLocale__LRString__exceptions, // the declared exceptions
  Float_MetainfoWrapper::Float_method_toString_FINLacdk_util_RLocale__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Float_methods_toString_F_LRString__arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Float_methods_toString_F_LRString__args[] = 
{
  &Float_methods_toString_F_LRString__arg_i,
  0
};

::acdk::lang::dmi::ClazzInfo* Float_methods_toString_F_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Float_method_toString_F_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_d_toString", // alternative name of method
  -1, // altlabelHashCode
  Float_methods_toString_F_LRString__args, // the arguments
  0, //arguments count
  Float_methods_toString_F_LRString__exceptions, // the declared exceptions
  Float_MetainfoWrapper::Float_method_toString_F_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Float_methods_valueOf_INLRString__LRFloat__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Float_methods_valueOf_INLRString__LRFloat__args[] = 
{
  &Float_methods_valueOf_INLRString__LRFloat__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* Float_methods_valueOf_INLRString__LRFloat__exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Float_valueOf_INLRString__LRFloat__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Float_method_valueOf_INLRString__LRFloat_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "valueOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFloat::clazzInfo(), // return type
  "_e_valueOf", // alternative name of method
  -1, // altlabelHashCode
  Float_methods_valueOf_INLRString__LRFloat__args, // the arguments
  0, //arguments count
  Float_methods_valueOf_INLRString__LRFloat__exceptions, // the declared exceptions
  Float_MetainfoWrapper::Float_method_valueOf_INLRString__LRFloat__dispatch, // invoke this method
  Float_valueOf_INLRString__LRFloat__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Float_methods[] = 
{
  &Float_method_Float_F_LRFloat_,
  &Float_method_Float_INLRString_INLacdk_util_RLocale__LRFloat_,
  &Float_method_Float__LRFloat_,
  &Float_method_Float_INLRString__LRFloat_,
  &Float_method_GetClass__L_acdk_lang_RClass_,
  &Float_method_compareTo_INLRFloat__I,
  &Float_method_compareTo_F_I,
  &Float_method_create_instance__LRObject_,
  &Float_method_equals_INLRFloat__Z,
  &Float_method_equals_F_Z,
  &Float_method_getTYPE__LRClass_,
  &Float_method_hashCode_F_I,
  &Float_method_parseFloat_INLRString_INLacdk_util_RLocale__F,
  &Float_method_parseFloat_INLRString__F,
  &Float_method_toString_FINLacdk_util_RLocale__LRString_,
  &Float_method_toString_F_LRString_,
  &Float_method_valueOf_INLRString__LRFloat_,
  0
};


struct Float_MetaInfoInitializer
{  Float_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Float::clazzInfo();
    ci->fields =  _Float_fields;
    ci->methods =  _Float_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Float_MetaInfoInitializer Float_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
IllegalAccessException_create_array(int length)
{
  return new ObjectArrayImpl<RIllegalAccessException>(length);
}

//static
::acdk::lang::RObject
IllegalAccessException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class IllegalAccessException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IllegalAccessException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)IllegalAccessException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IllegalAccessException_method_IllegalAccessException__LRIllegalAccessException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new IllegalAccessException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IllegalAccessException_method_IllegalAccessException_INLRString__LRIllegalAccessException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new IllegalAccessException(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
};


void ThrowException_IllegalAccessException(IN(::acdk::lang::RThrowable) ex)
{
  throw RIllegalAccessException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _IllegalAccessException_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* IllegalAccessException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IllegalAccessException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IllegalAccessException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  IllegalAccessException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  IllegalAccessException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  IllegalAccessException_MetainfoWrapper::IllegalAccessException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* IllegalAccessException_methods_IllegalAccessException__LRIllegalAccessException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IllegalAccessException_methods_IllegalAccessException__LRIllegalAccessException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IllegalAccessException_method_IllegalAccessException__LRIllegalAccessException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "IllegalAccessException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  IllegalAccessException::clazzInfo(), // return type
  "_0_IllegalAccessException", // alternative name of method
  -1, // altlabelHashCode
  IllegalAccessException_methods_IllegalAccessException__LRIllegalAccessException__args, // the arguments
  0, //arguments count
  IllegalAccessException_methods_IllegalAccessException__LRIllegalAccessException__exceptions, // the declared exceptions
  IllegalAccessException_MetainfoWrapper::IllegalAccessException_method_IllegalAccessException__LRIllegalAccessException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IllegalAccessException_methods_IllegalAccessException_INLRString__LRIllegalAccessException__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IllegalAccessException_methods_IllegalAccessException_INLRString__LRIllegalAccessException__args[] = 
{
  &IllegalAccessException_methods_IllegalAccessException_INLRString__LRIllegalAccessException__arg_what,
  0
};

::acdk::lang::dmi::ClazzInfo* IllegalAccessException_methods_IllegalAccessException_INLRString__LRIllegalAccessException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IllegalAccessException_method_IllegalAccessException_INLRString__LRIllegalAccessException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "IllegalAccessException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  IllegalAccessException::clazzInfo(), // return type
  "_1_IllegalAccessException", // alternative name of method
  -1, // altlabelHashCode
  IllegalAccessException_methods_IllegalAccessException_INLRString__LRIllegalAccessException__args, // the arguments
  0, //arguments count
  IllegalAccessException_methods_IllegalAccessException_INLRString__LRIllegalAccessException__exceptions, // the declared exceptions
  IllegalAccessException_MetainfoWrapper::IllegalAccessException_method_IllegalAccessException_INLRString__LRIllegalAccessException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _IllegalAccessException_methods[] = 
{
  &IllegalAccessException_method_GetClass__L_acdk_lang_RClass_,
  &IllegalAccessException_method_IllegalAccessException__LRIllegalAccessException_,
  &IllegalAccessException_method_IllegalAccessException_INLRString__LRIllegalAccessException_,
  0
};


struct IllegalAccessException_MetaInfoInitializer
{  IllegalAccessException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = IllegalAccessException::clazzInfo();
    ci->fields =  _IllegalAccessException_fields;
    ci->methods =  _IllegalAccessException_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
IllegalAccessException_MetaInfoInitializer IllegalAccessException_MetaInfoInitializer_staticinstance__;


struct IllegalAccessException_clazzInfo_ClazzAttributesResInitializer21
{
  IllegalAccessException_clazzInfo_ClazzAttributesResInitializer21()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)IllegalAccessException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_IllegalAccessException));
  }
};

IllegalAccessException_clazzInfo_ClazzAttributesResInitializer21 IllegalAccessException_clazzInfo_ClazzAttributesResInitializer21_instance;



} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
IllegalArgumentException_create_array(int length)
{
  return new ObjectArrayImpl<RIllegalArgumentException>(length);
}

//static
::acdk::lang::RObject
IllegalArgumentException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class IllegalArgumentException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IllegalArgumentException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)IllegalArgumentException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IllegalArgumentException_method_IllegalArgumentException__LRIllegalArgumentException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new IllegalArgumentException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IllegalArgumentException_method_IllegalArgumentException_INLRString__LRIllegalArgumentException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new IllegalArgumentException(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
};


void ThrowException_IllegalArgumentException(IN(::acdk::lang::RThrowable) ex)
{
  throw RIllegalArgumentException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _IllegalArgumentException_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* IllegalArgumentException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IllegalArgumentException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IllegalArgumentException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  IllegalArgumentException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  IllegalArgumentException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  IllegalArgumentException_MetainfoWrapper::IllegalArgumentException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* IllegalArgumentException_methods_IllegalArgumentException__LRIllegalArgumentException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IllegalArgumentException_methods_IllegalArgumentException__LRIllegalArgumentException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IllegalArgumentException_method_IllegalArgumentException__LRIllegalArgumentException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "IllegalArgumentException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  IllegalArgumentException::clazzInfo(), // return type
  "_0_IllegalArgumentException", // alternative name of method
  -1, // altlabelHashCode
  IllegalArgumentException_methods_IllegalArgumentException__LRIllegalArgumentException__args, // the arguments
  0, //arguments count
  IllegalArgumentException_methods_IllegalArgumentException__LRIllegalArgumentException__exceptions, // the declared exceptions
  IllegalArgumentException_MetainfoWrapper::IllegalArgumentException_method_IllegalArgumentException__LRIllegalArgumentException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IllegalArgumentException_methods_IllegalArgumentException_INLRString__LRIllegalArgumentException__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IllegalArgumentException_methods_IllegalArgumentException_INLRString__LRIllegalArgumentException__args[] = 
{
  &IllegalArgumentException_methods_IllegalArgumentException_INLRString__LRIllegalArgumentException__arg_what,
  0
};

::acdk::lang::dmi::ClazzInfo* IllegalArgumentException_methods_IllegalArgumentException_INLRString__LRIllegalArgumentException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IllegalArgumentException_method_IllegalArgumentException_INLRString__LRIllegalArgumentException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "IllegalArgumentException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  IllegalArgumentException::clazzInfo(), // return type
  "_1_IllegalArgumentException", // alternative name of method
  -1, // altlabelHashCode
  IllegalArgumentException_methods_IllegalArgumentException_INLRString__LRIllegalArgumentException__args, // the arguments
  0, //arguments count
  IllegalArgumentException_methods_IllegalArgumentException_INLRString__LRIllegalArgumentException__exceptions, // the declared exceptions
  IllegalArgumentException_MetainfoWrapper::IllegalArgumentException_method_IllegalArgumentException_INLRString__LRIllegalArgumentException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _IllegalArgumentException_methods[] = 
{
  &IllegalArgumentException_method_GetClass__L_acdk_lang_RClass_,
  &IllegalArgumentException_method_IllegalArgumentException__LRIllegalArgumentException_,
  &IllegalArgumentException_method_IllegalArgumentException_INLRString__LRIllegalArgumentException_,
  0
};


struct IllegalArgumentException_MetaInfoInitializer
{  IllegalArgumentException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = IllegalArgumentException::clazzInfo();
    ci->fields =  _IllegalArgumentException_fields;
    ci->methods =  _IllegalArgumentException_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
IllegalArgumentException_MetaInfoInitializer IllegalArgumentException_MetaInfoInitializer_staticinstance__;


struct IllegalArgumentException_clazzInfo_ClazzAttributesResInitializer22
{
  IllegalArgumentException_clazzInfo_ClazzAttributesResInitializer22()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)IllegalArgumentException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_IllegalArgumentException));
  }
};

IllegalArgumentException_clazzInfo_ClazzAttributesResInitializer22 IllegalArgumentException_clazzInfo_ClazzAttributesResInitializer22_instance;



} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
IllegalMonitorStateException_create_array(int length)
{
  return new ObjectArrayImpl<RIllegalMonitorStateException>(length);
}

//static
::acdk::lang::RObject
IllegalMonitorStateException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class IllegalMonitorStateException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IllegalMonitorStateException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)IllegalMonitorStateException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IllegalMonitorStateException_method_IllegalMonitorStateException__LRIllegalMonitorStateException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new IllegalMonitorStateException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IllegalMonitorStateException_method_IllegalMonitorStateException_INLRString__LRIllegalMonitorStateException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new IllegalMonitorStateException(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
};


void ThrowException_IllegalMonitorStateException(IN(::acdk::lang::RThrowable) ex)
{
  throw RIllegalMonitorStateException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _IllegalMonitorStateException_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* IllegalMonitorStateException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IllegalMonitorStateException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IllegalMonitorStateException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  IllegalMonitorStateException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  IllegalMonitorStateException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  IllegalMonitorStateException_MetainfoWrapper::IllegalMonitorStateException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* IllegalMonitorStateException_methods_IllegalMonitorStateException__LRIllegalMonitorStateException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IllegalMonitorStateException_methods_IllegalMonitorStateException__LRIllegalMonitorStateException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IllegalMonitorStateException_method_IllegalMonitorStateException__LRIllegalMonitorStateException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "IllegalMonitorStateException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  IllegalMonitorStateException::clazzInfo(), // return type
  "_0_IllegalMonitorStateException", // alternative name of method
  -1, // altlabelHashCode
  IllegalMonitorStateException_methods_IllegalMonitorStateException__LRIllegalMonitorStateException__args, // the arguments
  0, //arguments count
  IllegalMonitorStateException_methods_IllegalMonitorStateException__LRIllegalMonitorStateException__exceptions, // the declared exceptions
  IllegalMonitorStateException_MetainfoWrapper::IllegalMonitorStateException_method_IllegalMonitorStateException__LRIllegalMonitorStateException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IllegalMonitorStateException_methods_IllegalMonitorStateException_INLRString__LRIllegalMonitorStateException__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IllegalMonitorStateException_methods_IllegalMonitorStateException_INLRString__LRIllegalMonitorStateException__args[] = 
{
  &IllegalMonitorStateException_methods_IllegalMonitorStateException_INLRString__LRIllegalMonitorStateException__arg_what,
  0
};

::acdk::lang::dmi::ClazzInfo* IllegalMonitorStateException_methods_IllegalMonitorStateException_INLRString__LRIllegalMonitorStateException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IllegalMonitorStateException_method_IllegalMonitorStateException_INLRString__LRIllegalMonitorStateException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "IllegalMonitorStateException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  IllegalMonitorStateException::clazzInfo(), // return type
  "_1_IllegalMonitorStateException", // alternative name of method
  -1, // altlabelHashCode
  IllegalMonitorStateException_methods_IllegalMonitorStateException_INLRString__LRIllegalMonitorStateException__args, // the arguments
  0, //arguments count
  IllegalMonitorStateException_methods_IllegalMonitorStateException_INLRString__LRIllegalMonitorStateException__exceptions, // the declared exceptions
  IllegalMonitorStateException_MetainfoWrapper::IllegalMonitorStateException_method_IllegalMonitorStateException_INLRString__LRIllegalMonitorStateException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _IllegalMonitorStateException_methods[] = 
{
  &IllegalMonitorStateException_method_GetClass__L_acdk_lang_RClass_,
  &IllegalMonitorStateException_method_IllegalMonitorStateException__LRIllegalMonitorStateException_,
  &IllegalMonitorStateException_method_IllegalMonitorStateException_INLRString__LRIllegalMonitorStateException_,
  0
};


struct IllegalMonitorStateException_MetaInfoInitializer
{  IllegalMonitorStateException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = IllegalMonitorStateException::clazzInfo();
    ci->fields =  _IllegalMonitorStateException_fields;
    ci->methods =  _IllegalMonitorStateException_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
IllegalMonitorStateException_MetaInfoInitializer IllegalMonitorStateException_MetaInfoInitializer_staticinstance__;


struct IllegalMonitorStateException_clazzInfo_ClazzAttributesResInitializer23
{
  IllegalMonitorStateException_clazzInfo_ClazzAttributesResInitializer23()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)IllegalMonitorStateException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_IllegalMonitorStateException));
  }
};

IllegalMonitorStateException_clazzInfo_ClazzAttributesResInitializer23 IllegalMonitorStateException_clazzInfo_ClazzAttributesResInitializer23_instance;



} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
IllegalStateException_create_array(int length)
{
  return new ObjectArrayImpl<RIllegalStateException>(length);
}

//static
::acdk::lang::RObject
IllegalStateException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class IllegalStateException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IllegalStateException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)IllegalStateException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IllegalStateException_method_IllegalStateException__LRIllegalStateException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new IllegalStateException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IllegalStateException_method_IllegalStateException_INLRString__LRIllegalStateException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new IllegalStateException(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
};


void ThrowException_IllegalStateException(IN(::acdk::lang::RThrowable) ex)
{
  throw RIllegalStateException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _IllegalStateException_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* IllegalStateException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IllegalStateException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IllegalStateException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  IllegalStateException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  IllegalStateException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  IllegalStateException_MetainfoWrapper::IllegalStateException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* IllegalStateException_methods_IllegalStateException__LRIllegalStateException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IllegalStateException_methods_IllegalStateException__LRIllegalStateException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IllegalStateException_method_IllegalStateException__LRIllegalStateException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "IllegalStateException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  IllegalStateException::clazzInfo(), // return type
  "_0_IllegalStateException", // alternative name of method
  -1, // altlabelHashCode
  IllegalStateException_methods_IllegalStateException__LRIllegalStateException__args, // the arguments
  0, //arguments count
  IllegalStateException_methods_IllegalStateException__LRIllegalStateException__exceptions, // the declared exceptions
  IllegalStateException_MetainfoWrapper::IllegalStateException_method_IllegalStateException__LRIllegalStateException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IllegalStateException_methods_IllegalStateException_INLRString__LRIllegalStateException__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IllegalStateException_methods_IllegalStateException_INLRString__LRIllegalStateException__args[] = 
{
  &IllegalStateException_methods_IllegalStateException_INLRString__LRIllegalStateException__arg_what,
  0
};

::acdk::lang::dmi::ClazzInfo* IllegalStateException_methods_IllegalStateException_INLRString__LRIllegalStateException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IllegalStateException_method_IllegalStateException_INLRString__LRIllegalStateException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "IllegalStateException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  IllegalStateException::clazzInfo(), // return type
  "_1_IllegalStateException", // alternative name of method
  -1, // altlabelHashCode
  IllegalStateException_methods_IllegalStateException_INLRString__LRIllegalStateException__args, // the arguments
  0, //arguments count
  IllegalStateException_methods_IllegalStateException_INLRString__LRIllegalStateException__exceptions, // the declared exceptions
  IllegalStateException_MetainfoWrapper::IllegalStateException_method_IllegalStateException_INLRString__LRIllegalStateException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _IllegalStateException_methods[] = 
{
  &IllegalStateException_method_GetClass__L_acdk_lang_RClass_,
  &IllegalStateException_method_IllegalStateException__LRIllegalStateException_,
  &IllegalStateException_method_IllegalStateException_INLRString__LRIllegalStateException_,
  0
};


struct IllegalStateException_MetaInfoInitializer
{  IllegalStateException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = IllegalStateException::clazzInfo();
    ci->fields =  _IllegalStateException_fields;
    ci->methods =  _IllegalStateException_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
IllegalStateException_MetaInfoInitializer IllegalStateException_MetaInfoInitializer_staticinstance__;


struct IllegalStateException_clazzInfo_ClazzAttributesResInitializer24
{
  IllegalStateException_clazzInfo_ClazzAttributesResInitializer24()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)IllegalStateException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_IllegalStateException));
  }
};

IllegalStateException_clazzInfo_ClazzAttributesResInitializer24 IllegalStateException_clazzInfo_ClazzAttributesResInitializer24_instance;



} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
IllegalThreadStateException_create_array(int length)
{
  return new ObjectArrayImpl<RIllegalThreadStateException>(length);
}

//static
::acdk::lang::RObject
IllegalThreadStateException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class IllegalThreadStateException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IllegalThreadStateException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)IllegalThreadStateException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IllegalThreadStateException_method_IllegalThreadStateException__LRIllegalThreadStateException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new IllegalThreadStateException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IllegalThreadStateException_method_IllegalThreadStateException_INLRString__LRIllegalThreadStateException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new IllegalThreadStateException(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
};


void ThrowException_IllegalThreadStateException(IN(::acdk::lang::RThrowable) ex)
{
  throw RIllegalThreadStateException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _IllegalThreadStateException_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* IllegalThreadStateException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IllegalThreadStateException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IllegalThreadStateException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  IllegalThreadStateException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  IllegalThreadStateException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  IllegalThreadStateException_MetainfoWrapper::IllegalThreadStateException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* IllegalThreadStateException_methods_IllegalThreadStateException__LRIllegalThreadStateException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IllegalThreadStateException_methods_IllegalThreadStateException__LRIllegalThreadStateException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IllegalThreadStateException_method_IllegalThreadStateException__LRIllegalThreadStateException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "IllegalThreadStateException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  IllegalThreadStateException::clazzInfo(), // return type
  "_0_IllegalThreadStateException", // alternative name of method
  -1, // altlabelHashCode
  IllegalThreadStateException_methods_IllegalThreadStateException__LRIllegalThreadStateException__args, // the arguments
  0, //arguments count
  IllegalThreadStateException_methods_IllegalThreadStateException__LRIllegalThreadStateException__exceptions, // the declared exceptions
  IllegalThreadStateException_MetainfoWrapper::IllegalThreadStateException_method_IllegalThreadStateException__LRIllegalThreadStateException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IllegalThreadStateException_methods_IllegalThreadStateException_INLRString__LRIllegalThreadStateException__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IllegalThreadStateException_methods_IllegalThreadStateException_INLRString__LRIllegalThreadStateException__args[] = 
{
  &IllegalThreadStateException_methods_IllegalThreadStateException_INLRString__LRIllegalThreadStateException__arg_what,
  0
};

::acdk::lang::dmi::ClazzInfo* IllegalThreadStateException_methods_IllegalThreadStateException_INLRString__LRIllegalThreadStateException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IllegalThreadStateException_method_IllegalThreadStateException_INLRString__LRIllegalThreadStateException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "IllegalThreadStateException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  IllegalThreadStateException::clazzInfo(), // return type
  "_1_IllegalThreadStateException", // alternative name of method
  -1, // altlabelHashCode
  IllegalThreadStateException_methods_IllegalThreadStateException_INLRString__LRIllegalThreadStateException__args, // the arguments
  0, //arguments count
  IllegalThreadStateException_methods_IllegalThreadStateException_INLRString__LRIllegalThreadStateException__exceptions, // the declared exceptions
  IllegalThreadStateException_MetainfoWrapper::IllegalThreadStateException_method_IllegalThreadStateException_INLRString__LRIllegalThreadStateException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _IllegalThreadStateException_methods[] = 
{
  &IllegalThreadStateException_method_GetClass__L_acdk_lang_RClass_,
  &IllegalThreadStateException_method_IllegalThreadStateException__LRIllegalThreadStateException_,
  &IllegalThreadStateException_method_IllegalThreadStateException_INLRString__LRIllegalThreadStateException_,
  0
};


struct IllegalThreadStateException_MetaInfoInitializer
{  IllegalThreadStateException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = IllegalThreadStateException::clazzInfo();
    ci->fields =  _IllegalThreadStateException_fields;
    ci->methods =  _IllegalThreadStateException_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
IllegalThreadStateException_MetaInfoInitializer IllegalThreadStateException_MetaInfoInitializer_staticinstance__;


struct IllegalThreadStateException_clazzInfo_ClazzAttributesResInitializer25
{
  IllegalThreadStateException_clazzInfo_ClazzAttributesResInitializer25()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)IllegalThreadStateException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_IllegalThreadStateException));
  }
};

IllegalThreadStateException_clazzInfo_ClazzAttributesResInitializer25 IllegalThreadStateException_clazzInfo_ClazzAttributesResInitializer25_instance;



} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
IndexOutOfBoundsException_create_array(int length)
{
  return new ObjectArrayImpl<RIndexOutOfBoundsException>(length);
}

//static
::acdk::lang::RObject
IndexOutOfBoundsException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class IndexOutOfBoundsException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IndexOutOfBoundsException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)IndexOutOfBoundsException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IndexOutOfBoundsException_method_IndexOutOfBoundsException__LRIndexOutOfBoundsException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new IndexOutOfBoundsException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IndexOutOfBoundsException_method_IndexOutOfBoundsException_INLRString__LRIndexOutOfBoundsException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new IndexOutOfBoundsException(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IndexOutOfBoundsException_method_IndexOutOfBoundsException_INLRString_II_LRIndexOutOfBoundsException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new IndexOutOfBoundsException(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IndexOutOfBoundsException_method_accessIndex__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IndexOutOfBoundsException* This = dmi_cast<IndexOutOfBoundsException>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->IndexOutOfBoundsException::accessIndex();
    else
      ret = This->accessIndex();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IndexOutOfBoundsException_method_maxIndex__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IndexOutOfBoundsException* This = dmi_cast<IndexOutOfBoundsException>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->IndexOutOfBoundsException::maxIndex();
    else
      ret = This->maxIndex();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  IndexOutOfBoundsException_fields__accessIndex_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    IndexOutOfBoundsException* This = dmi_cast<IndexOutOfBoundsException>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_accessIndex, flags);
    else
      This->_accessIndex = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  IndexOutOfBoundsException_fields__length_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    IndexOutOfBoundsException* This = dmi_cast<IndexOutOfBoundsException>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_length, flags);
    else
      This->_length = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};


void ThrowException_IndexOutOfBoundsException(IN(::acdk::lang::RThrowable) ex)
{
  throw RIndexOutOfBoundsException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo IndexOutOfBoundsException_fields__accessIndex = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_accessIndex", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  IndexOutOfBoundsException_MetainfoWrapper::IndexOutOfBoundsException_fields__accessIndex_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo IndexOutOfBoundsException_fields__length = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_length", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  IndexOutOfBoundsException_MetainfoWrapper::IndexOutOfBoundsException_fields__length_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _IndexOutOfBoundsException_fields[] = 
{
  &IndexOutOfBoundsException_fields__accessIndex,
  &IndexOutOfBoundsException_fields__length,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* IndexOutOfBoundsException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IndexOutOfBoundsException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IndexOutOfBoundsException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  IndexOutOfBoundsException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  IndexOutOfBoundsException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  IndexOutOfBoundsException_MetainfoWrapper::IndexOutOfBoundsException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* IndexOutOfBoundsException_methods_IndexOutOfBoundsException__LRIndexOutOfBoundsException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IndexOutOfBoundsException_methods_IndexOutOfBoundsException__LRIndexOutOfBoundsException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IndexOutOfBoundsException_method_IndexOutOfBoundsException__LRIndexOutOfBoundsException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "IndexOutOfBoundsException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  IndexOutOfBoundsException::clazzInfo(), // return type
  "_0_IndexOutOfBoundsException", // alternative name of method
  -1, // altlabelHashCode
  IndexOutOfBoundsException_methods_IndexOutOfBoundsException__LRIndexOutOfBoundsException__args, // the arguments
  0, //arguments count
  IndexOutOfBoundsException_methods_IndexOutOfBoundsException__LRIndexOutOfBoundsException__exceptions, // the declared exceptions
  IndexOutOfBoundsException_MetainfoWrapper::IndexOutOfBoundsException_method_IndexOutOfBoundsException__LRIndexOutOfBoundsException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IndexOutOfBoundsException_methods_IndexOutOfBoundsException_INLRString__LRIndexOutOfBoundsException__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IndexOutOfBoundsException_methods_IndexOutOfBoundsException_INLRString__LRIndexOutOfBoundsException__args[] = 
{
  &IndexOutOfBoundsException_methods_IndexOutOfBoundsException_INLRString__LRIndexOutOfBoundsException__arg_what,
  0
};

::acdk::lang::dmi::ClazzInfo* IndexOutOfBoundsException_methods_IndexOutOfBoundsException_INLRString__LRIndexOutOfBoundsException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IndexOutOfBoundsException_method_IndexOutOfBoundsException_INLRString__LRIndexOutOfBoundsException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "IndexOutOfBoundsException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  IndexOutOfBoundsException::clazzInfo(), // return type
  "_1_IndexOutOfBoundsException", // alternative name of method
  -1, // altlabelHashCode
  IndexOutOfBoundsException_methods_IndexOutOfBoundsException_INLRString__LRIndexOutOfBoundsException__args, // the arguments
  0, //arguments count
  IndexOutOfBoundsException_methods_IndexOutOfBoundsException_INLRString__LRIndexOutOfBoundsException__exceptions, // the declared exceptions
  IndexOutOfBoundsException_MetainfoWrapper::IndexOutOfBoundsException_method_IndexOutOfBoundsException_INLRString__LRIndexOutOfBoundsException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IndexOutOfBoundsException_methods_IndexOutOfBoundsException_INLRString_II_LRIndexOutOfBoundsException__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo IndexOutOfBoundsException_methods_IndexOutOfBoundsException_INLRString_II_LRIndexOutOfBoundsException__arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo IndexOutOfBoundsException_methods_IndexOutOfBoundsException_INLRString_II_LRIndexOutOfBoundsException__arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IndexOutOfBoundsException_methods_IndexOutOfBoundsException_INLRString_II_LRIndexOutOfBoundsException__args[] = 
{
  &IndexOutOfBoundsException_methods_IndexOutOfBoundsException_INLRString_II_LRIndexOutOfBoundsException__arg_what,
  &IndexOutOfBoundsException_methods_IndexOutOfBoundsException_INLRString_II_LRIndexOutOfBoundsException__arg_idx,
  &IndexOutOfBoundsException_methods_IndexOutOfBoundsException_INLRString_II_LRIndexOutOfBoundsException__arg_length,
  0
};

::acdk::lang::dmi::ClazzInfo* IndexOutOfBoundsException_methods_IndexOutOfBoundsException_INLRString_II_LRIndexOutOfBoundsException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IndexOutOfBoundsException_method_IndexOutOfBoundsException_INLRString_II_LRIndexOutOfBoundsException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "IndexOutOfBoundsException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  IndexOutOfBoundsException::clazzInfo(), // return type
  "_2_IndexOutOfBoundsException", // alternative name of method
  -1, // altlabelHashCode
  IndexOutOfBoundsException_methods_IndexOutOfBoundsException_INLRString_II_LRIndexOutOfBoundsException__args, // the arguments
  0, //arguments count
  IndexOutOfBoundsException_methods_IndexOutOfBoundsException_INLRString_II_LRIndexOutOfBoundsException__exceptions, // the declared exceptions
  IndexOutOfBoundsException_MetainfoWrapper::IndexOutOfBoundsException_method_IndexOutOfBoundsException_INLRString_II_LRIndexOutOfBoundsException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* IndexOutOfBoundsException_methods_accessIndex__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IndexOutOfBoundsException_methods_accessIndex__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IndexOutOfBoundsException_method_accessIndex__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "accessIndex", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3_accessIndex", // alternative name of method
  -1, // altlabelHashCode
  IndexOutOfBoundsException_methods_accessIndex__I_args, // the arguments
  0, //arguments count
  IndexOutOfBoundsException_methods_accessIndex__I_exceptions, // the declared exceptions
  IndexOutOfBoundsException_MetainfoWrapper::IndexOutOfBoundsException_method_accessIndex__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* IndexOutOfBoundsException_methods_maxIndex__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IndexOutOfBoundsException_methods_maxIndex__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IndexOutOfBoundsException_method_maxIndex__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "maxIndex", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_4_maxIndex", // alternative name of method
  -1, // altlabelHashCode
  IndexOutOfBoundsException_methods_maxIndex__I_args, // the arguments
  0, //arguments count
  IndexOutOfBoundsException_methods_maxIndex__I_exceptions, // the declared exceptions
  IndexOutOfBoundsException_MetainfoWrapper::IndexOutOfBoundsException_method_maxIndex__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _IndexOutOfBoundsException_methods[] = 
{
  &IndexOutOfBoundsException_method_GetClass__L_acdk_lang_RClass_,
  &IndexOutOfBoundsException_method_IndexOutOfBoundsException__LRIndexOutOfBoundsException_,
  &IndexOutOfBoundsException_method_IndexOutOfBoundsException_INLRString__LRIndexOutOfBoundsException_,
  &IndexOutOfBoundsException_method_IndexOutOfBoundsException_INLRString_II_LRIndexOutOfBoundsException_,
  &IndexOutOfBoundsException_method_accessIndex__I,
  &IndexOutOfBoundsException_method_maxIndex__I,
  0
};


struct IndexOutOfBoundsException_MetaInfoInitializer
{  IndexOutOfBoundsException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = IndexOutOfBoundsException::clazzInfo();
    ci->fields =  _IndexOutOfBoundsException_fields;
    ci->methods =  _IndexOutOfBoundsException_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
IndexOutOfBoundsException_MetaInfoInitializer IndexOutOfBoundsException_MetaInfoInitializer_staticinstance__;


struct IndexOutOfBoundsException_clazzInfo_ClazzAttributesResInitializer26
{
  IndexOutOfBoundsException_clazzInfo_ClazzAttributesResInitializer26()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)IndexOutOfBoundsException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_IndexOutOfBoundsException));
  }
};

IndexOutOfBoundsException_clazzInfo_ClazzAttributesResInitializer26 IndexOutOfBoundsException_clazzInfo_ClazzAttributesResInitializer26_instance;



} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
InstantiationException_create_array(int length)
{
  return new ObjectArrayImpl<RInstantiationException>(length);
}

//static
::acdk::lang::RObject
InstantiationException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class InstantiationException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InstantiationException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)InstantiationException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InstantiationException_method_InstantiationException__LRInstantiationException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new InstantiationException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InstantiationException_method_InstantiationException_INLRString__LRInstantiationException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new InstantiationException(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
};


void ThrowException_InstantiationException(IN(::acdk::lang::RThrowable) ex)
{
  throw RInstantiationException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _InstantiationException_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* InstantiationException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InstantiationException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InstantiationException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  InstantiationException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  InstantiationException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  InstantiationException_MetainfoWrapper::InstantiationException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InstantiationException_methods_InstantiationException__LRInstantiationException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InstantiationException_methods_InstantiationException__LRInstantiationException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InstantiationException_method_InstantiationException__LRInstantiationException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "InstantiationException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  InstantiationException::clazzInfo(), // return type
  "_0_InstantiationException", // alternative name of method
  -1, // altlabelHashCode
  InstantiationException_methods_InstantiationException__LRInstantiationException__args, // the arguments
  0, //arguments count
  InstantiationException_methods_InstantiationException__LRInstantiationException__exceptions, // the declared exceptions
  InstantiationException_MetainfoWrapper::InstantiationException_method_InstantiationException__LRInstantiationException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo InstantiationException_methods_InstantiationException_INLRString__LRInstantiationException__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* InstantiationException_methods_InstantiationException_INLRString__LRInstantiationException__args[] = 
{
  &InstantiationException_methods_InstantiationException_INLRString__LRInstantiationException__arg_what,
  0
};

::acdk::lang::dmi::ClazzInfo* InstantiationException_methods_InstantiationException_INLRString__LRInstantiationException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InstantiationException_method_InstantiationException_INLRString__LRInstantiationException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "InstantiationException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  InstantiationException::clazzInfo(), // return type
  "_1_InstantiationException", // alternative name of method
  -1, // altlabelHashCode
  InstantiationException_methods_InstantiationException_INLRString__LRInstantiationException__args, // the arguments
  0, //arguments count
  InstantiationException_methods_InstantiationException_INLRString__LRInstantiationException__exceptions, // the declared exceptions
  InstantiationException_MetainfoWrapper::InstantiationException_method_InstantiationException_INLRString__LRInstantiationException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _InstantiationException_methods[] = 
{
  &InstantiationException_method_GetClass__L_acdk_lang_RClass_,
  &InstantiationException_method_InstantiationException__LRInstantiationException_,
  &InstantiationException_method_InstantiationException_INLRString__LRInstantiationException_,
  0
};


struct InstantiationException_MetaInfoInitializer
{  InstantiationException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = InstantiationException::clazzInfo();
    ci->fields =  _InstantiationException_fields;
    ci->methods =  _InstantiationException_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
InstantiationException_MetaInfoInitializer InstantiationException_MetaInfoInitializer_staticinstance__;


struct InstantiationException_clazzInfo_ClazzAttributesResInitializer27
{
  InstantiationException_clazzInfo_ClazzAttributesResInitializer27()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)InstantiationException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_InstantiationException));
  }
};

InstantiationException_clazzInfo_ClazzAttributesResInitializer27 InstantiationException_clazzInfo_ClazzAttributesResInitializer27_instance;



} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
Integer_create_array(int length)
{
  return new ObjectArrayImpl<RInteger>(length);
}

//static
::acdk::lang::RObject
Integer_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Integer_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Integer_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Integer::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Integer_method_Integer_I_LRInteger__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Integer(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Integer_method_Integer_INLRString__LRInteger__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Integer(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Integer_method_Integer__LRInteger__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Integer();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Integer_method_byteValue__B_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Integer* This = dmi_cast<Integer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Integer::byteValue();
    else
      ret = This->byteValue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Integer_method_clone__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Integer* This = dmi_cast<Integer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Integer::clone();
    else
        ret = (::acdk::lang::RObject)This->clone();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Integer_method_compareTo_INLRInteger__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Integer* This = dmi_cast<Integer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Integer::compareTo(::acdk::lang::dmi::castTo< RInteger>(args[0], dc));
    else
      ret = This->compareTo(::acdk::lang::dmi::castTo< RInteger>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Integer_method_compareTo_INLRObject__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Integer* This = dmi_cast<Integer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Integer::compareTo(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->compareTo(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Integer_method_compareTo_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Integer* This = dmi_cast<Integer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Integer::compareTo(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->compareTo(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Integer_method_create_instance__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Integer::create_instance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Integer_method_decode_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Integer::decode(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Integer_method_doubleValue__D_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Integer* This = dmi_cast<Integer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Integer::doubleValue();
    else
      ret = This->doubleValue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Integer_method_equals_INLRInteger__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Integer* This = dmi_cast<Integer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Integer::equals(::acdk::lang::dmi::castTo< RInteger>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< RInteger>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Integer_method_equals_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Integer* This = dmi_cast<Integer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Integer::equals(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Integer_method_equals_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Integer* This = dmi_cast<Integer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Integer::equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Integer_method_floatValue__F_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Integer* This = dmi_cast<Integer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Integer::floatValue();
    else
      ret = This->floatValue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Integer_method_getTYPE__LRClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Integer::getTYPE();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Integer_method_hashCode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Integer* This = dmi_cast<Integer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Integer::hashCode();
    else
      ret = This->hashCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Integer_method_intValue__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Integer* This = dmi_cast<Integer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Integer::intValue();
    else
      ret = This->intValue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Integer_method_longValue__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Integer* This = dmi_cast<Integer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Integer::longValue();
    else
      ret = This->longValue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Integer_method_parseInt_INLRString_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Integer::parseInt(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Integer_method_parseInt_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Integer::parseInt(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Integer_method_parseInt_INLRString_IZ_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Integer::parseInt(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< bool>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Integer_method_shortValue__S_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Integer* This = dmi_cast<Integer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Integer::shortValue();
    else
      ret = This->shortValue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Integer_method_toBinaryString_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Integer::toBinaryString(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Integer_method_toHexString_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Integer::toHexString(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Integer_method_toOctalString_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Integer::toOctalString(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Integer_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Integer* This = dmi_cast<Integer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Integer::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Integer_method_toString_II_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Integer::toString(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Integer_method_toString_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Integer::toString(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Integer_method_valueOf_INLRString__LRInteger__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Integer::valueOf(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Integer_method_valueOf_INLRString_I_LRInteger__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Integer::valueOf(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Integer_fields_MAX_VALUE_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Integer::MAX_VALUE, flags);
    else
      Integer::MAX_VALUE = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Integer_fields_MIN_VALUE_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Integer::MIN_VALUE, flags);
    else
      Integer::MIN_VALUE = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Integer_fields_serialVersionUID_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Integer::serialVersionUID, flags);
    else
      Integer::serialVersionUID = ::acdk::lang::dmi::castTo< jlong>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Integer_fields_value_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Integer* This = dmi_cast<Integer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->value, flags);
    else
      This->value = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo Integer_fields_MAX_VALUE = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "MAX_VALUE", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Integer_MetainfoWrapper::Integer_fields_MAX_VALUE_accessor, // read/write access to this fields
  (void*)&Integer::MAX_VALUE // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Integer_fields_MIN_VALUE = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "MIN_VALUE", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Integer_MetainfoWrapper::Integer_fields_MIN_VALUE_accessor, // read/write access to this fields
  (void*)&Integer::MIN_VALUE // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Integer_fields_serialVersionUID = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "serialVersionUID", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(),
  Integer_MetainfoWrapper::Integer_fields_serialVersionUID_accessor, // read/write access to this fields
  (void*)&Integer::serialVersionUID // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Integer_fields_value = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "value", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Integer_MetainfoWrapper::Integer_fields_value_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _Integer_fields[] = 
{
  &Integer_fields_MAX_VALUE,
  &Integer_fields_MIN_VALUE,
  &Integer_fields_serialVersionUID,
  &Integer_fields_value,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Integer_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Integer_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Integer_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_v_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Integer_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Integer_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Integer_MetainfoWrapper::Integer_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Integer_methods_Integer_I_LRInteger__arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Integer_methods_Integer_I_LRInteger__args[] = 
{
  &Integer_methods_Integer_I_LRInteger__arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* Integer_methods_Integer_I_LRInteger__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Integer_method_Integer_I_LRInteger_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Integer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Integer::clazzInfo(), // return type
  "_2_Integer", // alternative name of method
  -1, // altlabelHashCode
  Integer_methods_Integer_I_LRInteger__args, // the arguments
  0, //arguments count
  Integer_methods_Integer_I_LRInteger__exceptions, // the declared exceptions
  Integer_MetainfoWrapper::Integer_method_Integer_I_LRInteger__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Integer_methods_Integer_INLRString__LRInteger__arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Integer_methods_Integer_INLRString__LRInteger__args[] = 
{
  &Integer_methods_Integer_INLRString__LRInteger__arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* Integer_methods_Integer_INLRString__LRInteger__exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Integer_Integer_INLRString__LRInteger__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Integer_method_Integer_INLRString__LRInteger_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Integer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Integer::clazzInfo(), // return type
  "_3_Integer", // alternative name of method
  -1, // altlabelHashCode
  Integer_methods_Integer_INLRString__LRInteger__args, // the arguments
  0, //arguments count
  Integer_methods_Integer_INLRString__LRInteger__exceptions, // the declared exceptions
  Integer_MetainfoWrapper::Integer_method_Integer_INLRString__LRInteger__dispatch, // invoke this method
  Integer_Integer_INLRString__LRInteger__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Integer_methods_Integer__LRInteger__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Integer_methods_Integer__LRInteger__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Integer_method_Integer__LRInteger_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Integer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Integer::clazzInfo(), // return type
  "_1_Integer", // alternative name of method
  -1, // altlabelHashCode
  Integer_methods_Integer__LRInteger__args, // the arguments
  0, //arguments count
  Integer_methods_Integer__LRInteger__exceptions, // the declared exceptions
  Integer_MetainfoWrapper::Integer_method_Integer__LRInteger__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Integer_methods_byteValue__B_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Integer_methods_byteValue__B_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Integer_method_byteValue__B = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "byteValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz(), // return type
  "_a_byteValue", // alternative name of method
  -1, // altlabelHashCode
  Integer_methods_byteValue__B_args, // the arguments
  0, //arguments count
  Integer_methods_byteValue__B_exceptions, // the declared exceptions
  Integer_MetainfoWrapper::Integer_method_byteValue__B_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Integer_methods_clone__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Integer_methods_clone__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Integer_method_clone__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_4_clone", // alternative name of method
  -1, // altlabelHashCode
  Integer_methods_clone__LRObject__args, // the arguments
  0, //arguments count
  Integer_methods_clone__LRObject__exceptions, // the declared exceptions
  Integer_MetainfoWrapper::Integer_method_clone__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Integer_methods_compareTo_INLRInteger__I_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInteger::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Integer_methods_compareTo_INLRInteger__I_args[] = 
{
  &Integer_methods_compareTo_INLRInteger__I_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* Integer_methods_compareTo_INLRInteger__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Integer_method_compareTo_INLRInteger__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "compareTo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_g_compareTo", // alternative name of method
  -1, // altlabelHashCode
  Integer_methods_compareTo_INLRInteger__I_args, // the arguments
  0, //arguments count
  Integer_methods_compareTo_INLRInteger__I_exceptions, // the declared exceptions
  Integer_MetainfoWrapper::Integer_method_compareTo_INLRInteger__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Integer_methods_compareTo_INLRObject__I_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Integer_methods_compareTo_INLRObject__I_args[] = 
{
  &Integer_methods_compareTo_INLRObject__I_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* Integer_methods_compareTo_INLRObject__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Integer_method_compareTo_INLRObject__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "compareTo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_h_compareTo", // alternative name of method
  -1, // altlabelHashCode
  Integer_methods_compareTo_INLRObject__I_args, // the arguments
  0, //arguments count
  Integer_methods_compareTo_INLRObject__I_exceptions, // the declared exceptions
  Integer_MetainfoWrapper::Integer_method_compareTo_INLRObject__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Integer_methods_compareTo_I_I_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Integer_methods_compareTo_I_I_args[] = 
{
  &Integer_methods_compareTo_I_I_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* Integer_methods_compareTo_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Integer_method_compareTo_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "compareTo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_i_compareTo", // alternative name of method
  -1, // altlabelHashCode
  Integer_methods_compareTo_I_I_args, // the arguments
  0, //arguments count
  Integer_methods_compareTo_I_I_exceptions, // the declared exceptions
  Integer_MetainfoWrapper::Integer_method_compareTo_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Integer_methods_create_instance__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Integer_methods_create_instance__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Integer_method_create_instance__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create_instance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_0_create_instance", // alternative name of method
  -1, // altlabelHashCode
  Integer_methods_create_instance__LRObject__args, // the arguments
  0, //arguments count
  Integer_methods_create_instance__LRObject__exceptions, // the declared exceptions
  Integer_MetainfoWrapper::Integer_method_create_instance__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Integer_methods_decode_INLRString__I_arg_nm = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nm", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Integer_methods_decode_INLRString__I_args[] = 
{
  &Integer_methods_decode_INLRString__I_arg_nm,
  0
};

::acdk::lang::dmi::ClazzInfo* Integer_methods_decode_INLRString__I_exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Integer_decode_INLRString__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Integer_method_decode_INLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "decode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_m_decode", // alternative name of method
  -1, // altlabelHashCode
  Integer_methods_decode_INLRString__I_args, // the arguments
  0, //arguments count
  Integer_methods_decode_INLRString__I_exceptions, // the declared exceptions
  Integer_MetainfoWrapper::Integer_method_decode_INLRString__I_dispatch, // invoke this method
  Integer_decode_INLRString__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Integer_methods_doubleValue__D_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Integer_methods_doubleValue__D_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Integer_method_doubleValue__D = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "doubleValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(), // return type
  "_5_doubleValue", // alternative name of method
  -1, // altlabelHashCode
  Integer_methods_doubleValue__D_args, // the arguments
  0, //arguments count
  Integer_methods_doubleValue__D_exceptions, // the declared exceptions
  Integer_MetainfoWrapper::Integer_method_doubleValue__D_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Integer_methods_equals_INLRInteger__Z_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInteger::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Integer_methods_equals_INLRInteger__Z_args[] = 
{
  &Integer_methods_equals_INLRInteger__Z_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* Integer_methods_equals_INLRInteger__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Integer_method_equals_INLRInteger__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_e_equals", // alternative name of method
  -1, // altlabelHashCode
  Integer_methods_equals_INLRInteger__Z_args, // the arguments
  0, //arguments count
  Integer_methods_equals_INLRInteger__Z_exceptions, // the declared exceptions
  Integer_MetainfoWrapper::Integer_method_equals_INLRInteger__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Integer_methods_equals_I_Z_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Integer_methods_equals_I_Z_args[] = 
{
  &Integer_methods_equals_I_Z_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* Integer_methods_equals_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Integer_method_equals_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_f_equals", // alternative name of method
  -1, // altlabelHashCode
  Integer_methods_equals_I_Z_args, // the arguments
  0, //arguments count
  Integer_methods_equals_I_Z_exceptions, // the declared exceptions
  Integer_MetainfoWrapper::Integer_method_equals_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Integer_methods_equals_INLRObject__Z_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Integer_methods_equals_INLRObject__Z_args[] = 
{
  &Integer_methods_equals_INLRObject__Z_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* Integer_methods_equals_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Integer_method_equals_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_d_equals", // alternative name of method
  -1, // altlabelHashCode
  Integer_methods_equals_INLRObject__Z_args, // the arguments
  0, //arguments count
  Integer_methods_equals_INLRObject__Z_exceptions, // the declared exceptions
  Integer_MetainfoWrapper::Integer_method_equals_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Integer_methods_floatValue__F_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Integer_methods_floatValue__F_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Integer_method_floatValue__F = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "floatValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz(), // return type
  "_6_floatValue", // alternative name of method
  -1, // altlabelHashCode
  Integer_methods_floatValue__F_args, // the arguments
  0, //arguments count
  Integer_methods_floatValue__F_exceptions, // the declared exceptions
  Integer_MetainfoWrapper::Integer_method_floatValue__F_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Integer_methods_getTYPE__LRClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Integer_methods_getTYPE__LRClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Integer_method_getTYPE__LRClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTYPE", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(), // return type
  "_u_getTYPE", // alternative name of method
  -1, // altlabelHashCode
  Integer_methods_getTYPE__LRClass__args, // the arguments
  0, //arguments count
  Integer_methods_getTYPE__LRClass__exceptions, // the declared exceptions
  Integer_MetainfoWrapper::Integer_method_getTYPE__LRClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Integer_methods_hashCode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Integer_methods_hashCode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Integer_method_hashCode__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hashCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_b_hashCode", // alternative name of method
  -1, // altlabelHashCode
  Integer_methods_hashCode__I_args, // the arguments
  0, //arguments count
  Integer_methods_hashCode__I_exceptions, // the declared exceptions
  Integer_MetainfoWrapper::Integer_method_hashCode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Integer_methods_intValue__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Integer_methods_intValue__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Integer_method_intValue__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "intValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_8_intValue", // alternative name of method
  -1, // altlabelHashCode
  Integer_methods_intValue__I_args, // the arguments
  0, //arguments count
  Integer_methods_intValue__I_exceptions, // the declared exceptions
  Integer_MetainfoWrapper::Integer_method_intValue__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Integer_methods_longValue__J_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Integer_methods_longValue__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Integer_method_longValue__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "longValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_7_longValue", // alternative name of method
  -1, // altlabelHashCode
  Integer_methods_longValue__J_args, // the arguments
  0, //arguments count
  Integer_methods_longValue__J_exceptions, // the declared exceptions
  Integer_MetainfoWrapper::Integer_method_longValue__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Integer_methods_parseInt_INLRString_I_I_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Integer_methods_parseInt_INLRString_I_I_arg_radix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "radix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Integer_methods_parseInt_INLRString_I_I_args[] = 
{
  &Integer_methods_parseInt_INLRString_I_I_arg_s,
  &Integer_methods_parseInt_INLRString_I_I_arg_radix,
  0
};

::acdk::lang::dmi::ClazzInfo* Integer_methods_parseInt_INLRString_I_I_exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Integer_parseInt_INLRString_I_I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Integer_method_parseInt_INLRString_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parseInt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_j_parseInt", // alternative name of method
  -1, // altlabelHashCode
  Integer_methods_parseInt_INLRString_I_I_args, // the arguments
  0, //arguments count
  Integer_methods_parseInt_INLRString_I_I_exceptions, // the declared exceptions
  Integer_MetainfoWrapper::Integer_method_parseInt_INLRString_I_I_dispatch, // invoke this method
  Integer_parseInt_INLRString_I_I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Integer_methods_parseInt_INLRString__I_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Integer_methods_parseInt_INLRString__I_args[] = 
{
  &Integer_methods_parseInt_INLRString__I_arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* Integer_methods_parseInt_INLRString__I_exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Integer_parseInt_INLRString__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Integer_method_parseInt_INLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "parseInt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_k_parseInt", // alternative name of method
  -1, // altlabelHashCode
  Integer_methods_parseInt_INLRString__I_args, // the arguments
  0, //arguments count
  Integer_methods_parseInt_INLRString__I_exceptions, // the declared exceptions
  Integer_MetainfoWrapper::Integer_method_parseInt_INLRString__I_dispatch, // invoke this method
  Integer_parseInt_INLRString__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Integer_methods_parseInt_INLRString_IZ_I_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Integer_methods_parseInt_INLRString_IZ_I_arg_radix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "radix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Integer_methods_parseInt_INLRString_IZ_I_arg_decode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "decode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Integer_methods_parseInt_INLRString_IZ_I_args[] = 
{
  &Integer_methods_parseInt_INLRString_IZ_I_arg_s,
  &Integer_methods_parseInt_INLRString_IZ_I_arg_radix,
  &Integer_methods_parseInt_INLRString_IZ_I_arg_decode,
  0
};

::acdk::lang::dmi::ClazzInfo* Integer_methods_parseInt_INLRString_IZ_I_exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Integer_parseInt_INLRString_IZ_I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Integer_method_parseInt_INLRString_IZ_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parseInt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_l_parseInt", // alternative name of method
  -1, // altlabelHashCode
  Integer_methods_parseInt_INLRString_IZ_I_args, // the arguments
  0, //arguments count
  Integer_methods_parseInt_INLRString_IZ_I_exceptions, // the declared exceptions
  Integer_MetainfoWrapper::Integer_method_parseInt_INLRString_IZ_I_dispatch, // invoke this method
  Integer_parseInt_INLRString_IZ_I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Integer_methods_shortValue__S_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Integer_methods_shortValue__S_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Integer_method_shortValue__S = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "shortValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(), // return type
  "_9_shortValue", // alternative name of method
  -1, // altlabelHashCode
  Integer_methods_shortValue__S_args, // the arguments
  0, //arguments count
  Integer_methods_shortValue__S_exceptions, // the declared exceptions
  Integer_MetainfoWrapper::Integer_method_shortValue__S_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Integer_methods_toBinaryString_I_LRString__arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Integer_methods_toBinaryString_I_LRString__args[] = 
{
  &Integer_methods_toBinaryString_I_LRString__arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* Integer_methods_toBinaryString_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Integer_method_toBinaryString_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toBinaryString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_p_toBinaryString", // alternative name of method
  -1, // altlabelHashCode
  Integer_methods_toBinaryString_I_LRString__args, // the arguments
  0, //arguments count
  Integer_methods_toBinaryString_I_LRString__exceptions, // the declared exceptions
  Integer_MetainfoWrapper::Integer_method_toBinaryString_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Integer_methods_toHexString_I_LRString__arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Integer_methods_toHexString_I_LRString__args[] = 
{
  &Integer_methods_toHexString_I_LRString__arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* Integer_methods_toHexString_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Integer_method_toHexString_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toHexString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_q_toHexString", // alternative name of method
  -1, // altlabelHashCode
  Integer_methods_toHexString_I_LRString__args, // the arguments
  0, //arguments count
  Integer_methods_toHexString_I_LRString__exceptions, // the declared exceptions
  Integer_MetainfoWrapper::Integer_method_toHexString_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Integer_methods_toOctalString_I_LRString__arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Integer_methods_toOctalString_I_LRString__args[] = 
{
  &Integer_methods_toOctalString_I_LRString__arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* Integer_methods_toOctalString_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Integer_method_toOctalString_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toOctalString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_r_toOctalString", // alternative name of method
  -1, // altlabelHashCode
  Integer_methods_toOctalString_I_LRString__args, // the arguments
  0, //arguments count
  Integer_methods_toOctalString_I_LRString__exceptions, // the declared exceptions
  Integer_MetainfoWrapper::Integer_method_toOctalString_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Integer_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Integer_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Integer_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_c_toString", // alternative name of method
  -1, // altlabelHashCode
  Integer_methods_toString__LRString__args, // the arguments
  0, //arguments count
  Integer_methods_toString__LRString__exceptions, // the declared exceptions
  Integer_MetainfoWrapper::Integer_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Integer_methods_toString_II_LRString__arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Integer_methods_toString_II_LRString__arg_radix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "radix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Integer_methods_toString_II_LRString__args[] = 
{
  &Integer_methods_toString_II_LRString__arg_val,
  &Integer_methods_toString_II_LRString__arg_radix,
  0
};

::acdk::lang::dmi::ClazzInfo* Integer_methods_toString_II_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Integer_method_toString_II_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_n_toString", // alternative name of method
  -1, // altlabelHashCode
  Integer_methods_toString_II_LRString__args, // the arguments
  0, //arguments count
  Integer_methods_toString_II_LRString__exceptions, // the declared exceptions
  Integer_MetainfoWrapper::Integer_method_toString_II_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Integer_methods_toString_I_LRString__arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Integer_methods_toString_I_LRString__args[] = 
{
  &Integer_methods_toString_I_LRString__arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* Integer_methods_toString_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Integer_method_toString_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_o_toString", // alternative name of method
  -1, // altlabelHashCode
  Integer_methods_toString_I_LRString__args, // the arguments
  0, //arguments count
  Integer_methods_toString_I_LRString__exceptions, // the declared exceptions
  Integer_MetainfoWrapper::Integer_method_toString_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Integer_methods_valueOf_INLRString__LRInteger__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Integer_methods_valueOf_INLRString__LRInteger__args[] = 
{
  &Integer_methods_valueOf_INLRString__LRInteger__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* Integer_methods_valueOf_INLRString__LRInteger__exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Integer_valueOf_INLRString__LRInteger__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Integer_method_valueOf_INLRString__LRInteger_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "valueOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInteger::clazzInfo(), // return type
  "_s_valueOf", // alternative name of method
  -1, // altlabelHashCode
  Integer_methods_valueOf_INLRString__LRInteger__args, // the arguments
  0, //arguments count
  Integer_methods_valueOf_INLRString__LRInteger__exceptions, // the declared exceptions
  Integer_MetainfoWrapper::Integer_method_valueOf_INLRString__LRInteger__dispatch, // invoke this method
  Integer_valueOf_INLRString__LRInteger__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Integer_methods_valueOf_INLRString_I_LRInteger__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Integer_methods_valueOf_INLRString_I_LRInteger__arg_radix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "radix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Integer_methods_valueOf_INLRString_I_LRInteger__args[] = 
{
  &Integer_methods_valueOf_INLRString_I_LRInteger__arg_str,
  &Integer_methods_valueOf_INLRString_I_LRInteger__arg_radix,
  0
};

::acdk::lang::dmi::ClazzInfo* Integer_methods_valueOf_INLRString_I_LRInteger__exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Integer_valueOf_INLRString_I_LRInteger__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Integer_method_valueOf_INLRString_I_LRInteger_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "valueOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInteger::clazzInfo(), // return type
  "_t_valueOf", // alternative name of method
  -1, // altlabelHashCode
  Integer_methods_valueOf_INLRString_I_LRInteger__args, // the arguments
  0, //arguments count
  Integer_methods_valueOf_INLRString_I_LRInteger__exceptions, // the declared exceptions
  Integer_MetainfoWrapper::Integer_method_valueOf_INLRString_I_LRInteger__dispatch, // invoke this method
  Integer_valueOf_INLRString_I_LRInteger__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Integer_methods[] = 
{
  &Integer_method_GetClass__L_acdk_lang_RClass_,
  &Integer_method_Integer_I_LRInteger_,
  &Integer_method_Integer_INLRString__LRInteger_,
  &Integer_method_Integer__LRInteger_,
  &Integer_method_byteValue__B,
  &Integer_method_clone__LRObject_,
  &Integer_method_compareTo_INLRInteger__I,
  &Integer_method_compareTo_INLRObject__I,
  &Integer_method_compareTo_I_I,
  &Integer_method_create_instance__LRObject_,
  &Integer_method_decode_INLRString__I,
  &Integer_method_doubleValue__D,
  &Integer_method_equals_INLRInteger__Z,
  &Integer_method_equals_I_Z,
  &Integer_method_equals_INLRObject__Z,
  &Integer_method_floatValue__F,
  &Integer_method_getTYPE__LRClass_,
  &Integer_method_hashCode__I,
  &Integer_method_intValue__I,
  &Integer_method_longValue__J,
  &Integer_method_parseInt_INLRString_I_I,
  &Integer_method_parseInt_INLRString__I,
  &Integer_method_parseInt_INLRString_IZ_I,
  &Integer_method_shortValue__S,
  &Integer_method_toBinaryString_I_LRString_,
  &Integer_method_toHexString_I_LRString_,
  &Integer_method_toOctalString_I_LRString_,
  &Integer_method_toString__LRString_,
  &Integer_method_toString_II_LRString_,
  &Integer_method_toString_I_LRString_,
  &Integer_method_valueOf_INLRString__LRInteger_,
  &Integer_method_valueOf_INLRString_I_LRInteger_,
  0
};


struct Integer_MetaInfoInitializer
{  Integer_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Integer::clazzInfo();
    ci->fields =  _Integer_fields;
    ci->methods =  _Integer_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Integer_MetaInfoInitializer Integer_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
InterruptedException_create_array(int length)
{
  return new ObjectArrayImpl<RInterruptedException>(length);
}

//static
::acdk::lang::RObject
InterruptedException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class InterruptedException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InterruptedException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)InterruptedException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InterruptedException_method_InterruptedException__LRInterruptedException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new InterruptedException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InterruptedException_method_InterruptedException_INLRString__LRInterruptedException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new InterruptedException(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
};


void ThrowException_InterruptedException(IN(::acdk::lang::RThrowable) ex)
{
  throw RInterruptedException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _InterruptedException_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* InterruptedException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InterruptedException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InterruptedException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  InterruptedException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  InterruptedException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  InterruptedException_MetainfoWrapper::InterruptedException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InterruptedException_methods_InterruptedException__LRInterruptedException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InterruptedException_methods_InterruptedException__LRInterruptedException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InterruptedException_method_InterruptedException__LRInterruptedException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "InterruptedException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  InterruptedException::clazzInfo(), // return type
  "_0_InterruptedException", // alternative name of method
  -1, // altlabelHashCode
  InterruptedException_methods_InterruptedException__LRInterruptedException__args, // the arguments
  0, //arguments count
  InterruptedException_methods_InterruptedException__LRInterruptedException__exceptions, // the declared exceptions
  InterruptedException_MetainfoWrapper::InterruptedException_method_InterruptedException__LRInterruptedException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo InterruptedException_methods_InterruptedException_INLRString__LRInterruptedException__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* InterruptedException_methods_InterruptedException_INLRString__LRInterruptedException__args[] = 
{
  &InterruptedException_methods_InterruptedException_INLRString__LRInterruptedException__arg_what,
  0
};

::acdk::lang::dmi::ClazzInfo* InterruptedException_methods_InterruptedException_INLRString__LRInterruptedException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InterruptedException_method_InterruptedException_INLRString__LRInterruptedException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "InterruptedException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  InterruptedException::clazzInfo(), // return type
  "_1_InterruptedException", // alternative name of method
  -1, // altlabelHashCode
  InterruptedException_methods_InterruptedException_INLRString__LRInterruptedException__args, // the arguments
  0, //arguments count
  InterruptedException_methods_InterruptedException_INLRString__LRInterruptedException__exceptions, // the declared exceptions
  InterruptedException_MetainfoWrapper::InterruptedException_method_InterruptedException_INLRString__LRInterruptedException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _InterruptedException_methods[] = 
{
  &InterruptedException_method_GetClass__L_acdk_lang_RClass_,
  &InterruptedException_method_InterruptedException__LRInterruptedException_,
  &InterruptedException_method_InterruptedException_INLRString__LRInterruptedException_,
  0
};


struct InterruptedException_MetaInfoInitializer
{  InterruptedException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = InterruptedException::clazzInfo();
    ci->fields =  _InterruptedException_fields;
    ci->methods =  _InterruptedException_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
InterruptedException_MetaInfoInitializer InterruptedException_MetaInfoInitializer_staticinstance__;


struct InterruptedException_clazzInfo_ClazzAttributesResInitializer28
{
  InterruptedException_clazzInfo_ClazzAttributesResInitializer28()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)InterruptedException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_InterruptedException));
  }
};

InterruptedException_clazzInfo_ClazzAttributesResInitializer28 InterruptedException_clazzInfo_ClazzAttributesResInitializer28_instance;



} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
Long_create_array(int length)
{
  return new ObjectArrayImpl<RLong>(length);
}

//static
::acdk::lang::RObject
Long_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Long_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Long_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Long::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Long_method_Long_I_LRLong__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Long(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Long_method_Long_J_LRLong__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Long(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Long_method_Long__LRLong__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Long();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Long_method_Long_INLRString__LRLong__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Long(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Long_method_compareTo_INLRLong__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Long* This = dmi_cast<Long>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Long::compareTo(::acdk::lang::dmi::castTo< RLong>(args[0], dc));
    else
      ret = This->compareTo(::acdk::lang::dmi::castTo< RLong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Long_method_compareTo_J_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Long* This = dmi_cast<Long>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Long::compareTo(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
      ret = This->compareTo(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Long_method_create_instance__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Long::create_instance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Long_method_decode_INLRString__LRLong__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Long::decode(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Long_method_equals_INLRLong__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Long* This = dmi_cast<Long>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Long::equals(::acdk::lang::dmi::castTo< RLong>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< RLong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Long_method_equals_J_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Long* This = dmi_cast<Long>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Long::equals(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Long_method_getTYPE__LRClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Long::getTYPE();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Long_method_hashCode_J_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Long::hashCode(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Long_method_parseLong_INLRString__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Long::parseLong(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Long_method_parseLong_INLRString_I_J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Long::parseLong(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Long_method_toBinaryString_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Long::toBinaryString(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Long_method_toBinaryString_J_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Long::toBinaryString(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Long_method_toHexString_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Long::toHexString(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Long_method_toHexString_J_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Long::toHexString(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Long_method_toOctalString_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Long::toOctalString(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Long_method_toOctalString_J_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Long::toOctalString(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Long_method_toString_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Long::toString(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Long_method_toString_II_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Long::toString(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Long_method_toString_J_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Long::toString(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Long_method_toString_JI_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Long::toString(::acdk::lang::dmi::castTo< jlong>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Long_method_valueOf_INLRString__LRLong__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Long::valueOf(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Long_method_valueOf_INLRString_I_LRLong__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Long::valueOf(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Long_fields_MAX_VALUE_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Long::MAX_VALUE, flags);
    else
      Long::MAX_VALUE = ::acdk::lang::dmi::castTo< jlong>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Long_fields_MIN_VALUE_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Long::MIN_VALUE, flags);
    else
      Long::MIN_VALUE = ::acdk::lang::dmi::castTo< jlong>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Long_fields_value_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Long* This = dmi_cast<Long>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->value, flags);
    else
      This->value = ::acdk::lang::dmi::castTo< jlong>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo Long_fields_MAX_VALUE = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "MAX_VALUE", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(),
  Long_MetainfoWrapper::Long_fields_MAX_VALUE_accessor, // read/write access to this fields
  (void*)&Long::MAX_VALUE // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Long_fields_MIN_VALUE = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "MIN_VALUE", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(),
  Long_MetainfoWrapper::Long_fields_MIN_VALUE_accessor, // read/write access to this fields
  (void*)&Long::MIN_VALUE // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Long_fields_value = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "value", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(),
  Long_MetainfoWrapper::Long_fields_value_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _Long_fields[] = 
{
  &Long_fields_MAX_VALUE,
  &Long_fields_MIN_VALUE,
  &Long_fields_value,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Long_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Long_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Long_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_q_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Long_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Long_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Long_MetainfoWrapper::Long_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Long_methods_Long_I_LRLong__arg_l = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "l", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Long_methods_Long_I_LRLong__args[] = 
{
  &Long_methods_Long_I_LRLong__arg_l,
  0
};

::acdk::lang::dmi::ClazzInfo* Long_methods_Long_I_LRLong__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Long_method_Long_I_LRLong_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Long", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Long::clazzInfo(), // return type
  "_2_Long", // alternative name of method
  -1, // altlabelHashCode
  Long_methods_Long_I_LRLong__args, // the arguments
  0, //arguments count
  Long_methods_Long_I_LRLong__exceptions, // the declared exceptions
  Long_MetainfoWrapper::Long_method_Long_I_LRLong__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Long_methods_Long_J_LRLong__arg_l = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "l", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Long_methods_Long_J_LRLong__args[] = 
{
  &Long_methods_Long_J_LRLong__arg_l,
  0
};

::acdk::lang::dmi::ClazzInfo* Long_methods_Long_J_LRLong__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Long_method_Long_J_LRLong_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Long", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Long::clazzInfo(), // return type
  "_3_Long", // alternative name of method
  -1, // altlabelHashCode
  Long_methods_Long_J_LRLong__args, // the arguments
  0, //arguments count
  Long_methods_Long_J_LRLong__exceptions, // the declared exceptions
  Long_MetainfoWrapper::Long_method_Long_J_LRLong__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Long_methods_Long__LRLong__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Long_methods_Long__LRLong__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Long_method_Long__LRLong_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Long", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Long::clazzInfo(), // return type
  "_1_Long", // alternative name of method
  -1, // altlabelHashCode
  Long_methods_Long__LRLong__args, // the arguments
  0, //arguments count
  Long_methods_Long__LRLong__exceptions, // the declared exceptions
  Long_MetainfoWrapper::Long_method_Long__LRLong__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Long_methods_Long_INLRString__LRLong__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Long_methods_Long_INLRString__LRLong__args[] = 
{
  &Long_methods_Long_INLRString__LRLong__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* Long_methods_Long_INLRString__LRLong__exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Long_Long_INLRString__LRLong__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Long_method_Long_INLRString__LRLong_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Long", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Long::clazzInfo(), // return type
  "_4_Long", // alternative name of method
  -1, // altlabelHashCode
  Long_methods_Long_INLRString__LRLong__args, // the arguments
  0, //arguments count
  Long_methods_Long_INLRString__LRLong__exceptions, // the declared exceptions
  Long_MetainfoWrapper::Long_method_Long_INLRString__LRLong__dispatch, // invoke this method
  Long_Long_INLRString__LRLong__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Long_methods_compareTo_INLRLong__I_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLong::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Long_methods_compareTo_INLRLong__I_args[] = 
{
  &Long_methods_compareTo_INLRLong__I_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* Long_methods_compareTo_INLRLong__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Long_method_compareTo_INLRLong__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "compareTo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_compareTo", // alternative name of method
  -1, // altlabelHashCode
  Long_methods_compareTo_INLRLong__I_args, // the arguments
  0, //arguments count
  Long_methods_compareTo_INLRLong__I_exceptions, // the declared exceptions
  Long_MetainfoWrapper::Long_method_compareTo_INLRLong__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Long_methods_compareTo_J_I_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Long_methods_compareTo_J_I_args[] = 
{
  &Long_methods_compareTo_J_I_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* Long_methods_compareTo_J_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Long_method_compareTo_J_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "compareTo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_compareTo", // alternative name of method
  -1, // altlabelHashCode
  Long_methods_compareTo_J_I_args, // the arguments
  0, //arguments count
  Long_methods_compareTo_J_I_exceptions, // the declared exceptions
  Long_MetainfoWrapper::Long_method_compareTo_J_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Long_methods_create_instance__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Long_methods_create_instance__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Long_method_create_instance__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create_instance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_0_create_instance", // alternative name of method
  -1, // altlabelHashCode
  Long_methods_create_instance__LRObject__args, // the arguments
  0, //arguments count
  Long_methods_create_instance__LRObject__exceptions, // the declared exceptions
  Long_MetainfoWrapper::Long_method_create_instance__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Long_methods_decode_INLRString__LRLong__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Long_methods_decode_INLRString__LRLong__args[] = 
{
  &Long_methods_decode_INLRString__LRLong__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* Long_methods_decode_INLRString__LRLong__exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Long_decode_INLRString__LRLong__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Long_method_decode_INLRString__LRLong_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "decode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLong::clazzInfo(), // return type
  "_9_decode", // alternative name of method
  -1, // altlabelHashCode
  Long_methods_decode_INLRString__LRLong__args, // the arguments
  0, //arguments count
  Long_methods_decode_INLRString__LRLong__exceptions, // the declared exceptions
  Long_MetainfoWrapper::Long_method_decode_INLRString__LRLong__dispatch, // invoke this method
  Long_decode_INLRString__LRLong__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Long_methods_equals_INLRLong__Z_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLong::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Long_methods_equals_INLRLong__Z_args[] = 
{
  &Long_methods_equals_INLRLong__Z_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* Long_methods_equals_INLRLong__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Long_method_equals_INLRLong__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_equals", // alternative name of method
  -1, // altlabelHashCode
  Long_methods_equals_INLRLong__Z_args, // the arguments
  0, //arguments count
  Long_methods_equals_INLRLong__Z_exceptions, // the declared exceptions
  Long_MetainfoWrapper::Long_method_equals_INLRLong__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Long_methods_equals_J_Z_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Long_methods_equals_J_Z_args[] = 
{
  &Long_methods_equals_J_Z_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* Long_methods_equals_J_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Long_method_equals_J_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_8_equals", // alternative name of method
  -1, // altlabelHashCode
  Long_methods_equals_J_Z_args, // the arguments
  0, //arguments count
  Long_methods_equals_J_Z_exceptions, // the declared exceptions
  Long_MetainfoWrapper::Long_method_equals_J_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Long_methods_getTYPE__LRClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Long_methods_getTYPE__LRClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Long_method_getTYPE__LRClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTYPE", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(), // return type
  "_p_getTYPE", // alternative name of method
  -1, // altlabelHashCode
  Long_methods_getTYPE__LRClass__args, // the arguments
  0, //arguments count
  Long_methods_getTYPE__LRClass__exceptions, // the declared exceptions
  Long_MetainfoWrapper::Long_method_getTYPE__LRClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Long_methods_hashCode_J_I_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Long_methods_hashCode_J_I_args[] = 
{
  &Long_methods_hashCode_J_I_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* Long_methods_hashCode_J_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Long_method_hashCode_J_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hashCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_c_hashCode", // alternative name of method
  -1, // altlabelHashCode
  Long_methods_hashCode_J_I_args, // the arguments
  0, //arguments count
  Long_methods_hashCode_J_I_exceptions, // the declared exceptions
  Long_MetainfoWrapper::Long_method_hashCode_J_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Long_methods_parseLong_INLRString__J_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Long_methods_parseLong_INLRString__J_args[] = 
{
  &Long_methods_parseLong_INLRString__J_arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* Long_methods_parseLong_INLRString__J_exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Long_parseLong_INLRString__J_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Long_method_parseLong_INLRString__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parseLong", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_a_parseLong", // alternative name of method
  -1, // altlabelHashCode
  Long_methods_parseLong_INLRString__J_args, // the arguments
  0, //arguments count
  Long_methods_parseLong_INLRString__J_exceptions, // the declared exceptions
  Long_MetainfoWrapper::Long_method_parseLong_INLRString__J_dispatch, // invoke this method
  Long_parseLong_INLRString__J_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Long_methods_parseLong_INLRString_I_J_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Long_methods_parseLong_INLRString_I_J_arg_radix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "radix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Long_methods_parseLong_INLRString_I_J_args[] = 
{
  &Long_methods_parseLong_INLRString_I_J_arg_s,
  &Long_methods_parseLong_INLRString_I_J_arg_radix,
  0
};

::acdk::lang::dmi::ClazzInfo* Long_methods_parseLong_INLRString_I_J_exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Long_parseLong_INLRString_I_J_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Long_method_parseLong_INLRString_I_J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parseLong", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_b_parseLong", // alternative name of method
  -1, // altlabelHashCode
  Long_methods_parseLong_INLRString_I_J_args, // the arguments
  0, //arguments count
  Long_methods_parseLong_INLRString_I_J_exceptions, // the declared exceptions
  Long_MetainfoWrapper::Long_method_parseLong_INLRString_I_J_dispatch, // invoke this method
  Long_parseLong_INLRString_I_J_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Long_methods_toBinaryString_I_LRString__arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Long_methods_toBinaryString_I_LRString__args[] = 
{
  &Long_methods_toBinaryString_I_LRString__arg_i,
  0
};

::acdk::lang::dmi::ClazzInfo* Long_methods_toBinaryString_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Long_method_toBinaryString_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toBinaryString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_d_toBinaryString", // alternative name of method
  -1, // altlabelHashCode
  Long_methods_toBinaryString_I_LRString__args, // the arguments
  0, //arguments count
  Long_methods_toBinaryString_I_LRString__exceptions, // the declared exceptions
  Long_MetainfoWrapper::Long_method_toBinaryString_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Long_methods_toBinaryString_J_LRString__arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Long_methods_toBinaryString_J_LRString__args[] = 
{
  &Long_methods_toBinaryString_J_LRString__arg_i,
  0
};

::acdk::lang::dmi::ClazzInfo* Long_methods_toBinaryString_J_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Long_method_toBinaryString_J_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toBinaryString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_g_toBinaryString", // alternative name of method
  -1, // altlabelHashCode
  Long_methods_toBinaryString_J_LRString__args, // the arguments
  0, //arguments count
  Long_methods_toBinaryString_J_LRString__exceptions, // the declared exceptions
  Long_MetainfoWrapper::Long_method_toBinaryString_J_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Long_methods_toHexString_I_LRString__arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Long_methods_toHexString_I_LRString__args[] = 
{
  &Long_methods_toHexString_I_LRString__arg_i,
  0
};

::acdk::lang::dmi::ClazzInfo* Long_methods_toHexString_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Long_method_toHexString_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toHexString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_e_toHexString", // alternative name of method
  -1, // altlabelHashCode
  Long_methods_toHexString_I_LRString__args, // the arguments
  0, //arguments count
  Long_methods_toHexString_I_LRString__exceptions, // the declared exceptions
  Long_MetainfoWrapper::Long_method_toHexString_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Long_methods_toHexString_J_LRString__arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Long_methods_toHexString_J_LRString__args[] = 
{
  &Long_methods_toHexString_J_LRString__arg_i,
  0
};

::acdk::lang::dmi::ClazzInfo* Long_methods_toHexString_J_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Long_method_toHexString_J_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toHexString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_h_toHexString", // alternative name of method
  -1, // altlabelHashCode
  Long_methods_toHexString_J_LRString__args, // the arguments
  0, //arguments count
  Long_methods_toHexString_J_LRString__exceptions, // the declared exceptions
  Long_MetainfoWrapper::Long_method_toHexString_J_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Long_methods_toOctalString_I_LRString__arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Long_methods_toOctalString_I_LRString__args[] = 
{
  &Long_methods_toOctalString_I_LRString__arg_i,
  0
};

::acdk::lang::dmi::ClazzInfo* Long_methods_toOctalString_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Long_method_toOctalString_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toOctalString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_f_toOctalString", // alternative name of method
  -1, // altlabelHashCode
  Long_methods_toOctalString_I_LRString__args, // the arguments
  0, //arguments count
  Long_methods_toOctalString_I_LRString__exceptions, // the declared exceptions
  Long_MetainfoWrapper::Long_method_toOctalString_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Long_methods_toOctalString_J_LRString__arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Long_methods_toOctalString_J_LRString__args[] = 
{
  &Long_methods_toOctalString_J_LRString__arg_i,
  0
};

::acdk::lang::dmi::ClazzInfo* Long_methods_toOctalString_J_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Long_method_toOctalString_J_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toOctalString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_i_toOctalString", // alternative name of method
  -1, // altlabelHashCode
  Long_methods_toOctalString_J_LRString__args, // the arguments
  0, //arguments count
  Long_methods_toOctalString_J_LRString__exceptions, // the declared exceptions
  Long_MetainfoWrapper::Long_method_toOctalString_J_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Long_methods_toString_I_LRString__arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Long_methods_toString_I_LRString__args[] = 
{
  &Long_methods_toString_I_LRString__arg_i,
  0
};

::acdk::lang::dmi::ClazzInfo* Long_methods_toString_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Long_method_toString_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_j_toString", // alternative name of method
  -1, // altlabelHashCode
  Long_methods_toString_I_LRString__args, // the arguments
  0, //arguments count
  Long_methods_toString_I_LRString__exceptions, // the declared exceptions
  Long_MetainfoWrapper::Long_method_toString_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Long_methods_toString_II_LRString__arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Long_methods_toString_II_LRString__arg_radix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "radix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Long_methods_toString_II_LRString__args[] = 
{
  &Long_methods_toString_II_LRString__arg_i,
  &Long_methods_toString_II_LRString__arg_radix,
  0
};

::acdk::lang::dmi::ClazzInfo* Long_methods_toString_II_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Long_method_toString_II_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_k_toString", // alternative name of method
  -1, // altlabelHashCode
  Long_methods_toString_II_LRString__args, // the arguments
  0, //arguments count
  Long_methods_toString_II_LRString__exceptions, // the declared exceptions
  Long_MetainfoWrapper::Long_method_toString_II_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Long_methods_toString_J_LRString__arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Long_methods_toString_J_LRString__args[] = 
{
  &Long_methods_toString_J_LRString__arg_i,
  0
};

::acdk::lang::dmi::ClazzInfo* Long_methods_toString_J_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Long_method_toString_J_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_l_toString", // alternative name of method
  -1, // altlabelHashCode
  Long_methods_toString_J_LRString__args, // the arguments
  0, //arguments count
  Long_methods_toString_J_LRString__exceptions, // the declared exceptions
  Long_MetainfoWrapper::Long_method_toString_J_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Long_methods_toString_JI_LRString__arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Long_methods_toString_JI_LRString__arg_radix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "radix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Long_methods_toString_JI_LRString__args[] = 
{
  &Long_methods_toString_JI_LRString__arg_i,
  &Long_methods_toString_JI_LRString__arg_radix,
  0
};

::acdk::lang::dmi::ClazzInfo* Long_methods_toString_JI_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Long_method_toString_JI_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_m_toString", // alternative name of method
  -1, // altlabelHashCode
  Long_methods_toString_JI_LRString__args, // the arguments
  0, //arguments count
  Long_methods_toString_JI_LRString__exceptions, // the declared exceptions
  Long_MetainfoWrapper::Long_method_toString_JI_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Long_methods_valueOf_INLRString__LRLong__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Long_methods_valueOf_INLRString__LRLong__args[] = 
{
  &Long_methods_valueOf_INLRString__LRLong__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* Long_methods_valueOf_INLRString__LRLong__exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Long_valueOf_INLRString__LRLong__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Long_method_valueOf_INLRString__LRLong_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "valueOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLong::clazzInfo(), // return type
  "_n_valueOf", // alternative name of method
  -1, // altlabelHashCode
  Long_methods_valueOf_INLRString__LRLong__args, // the arguments
  0, //arguments count
  Long_methods_valueOf_INLRString__LRLong__exceptions, // the declared exceptions
  Long_MetainfoWrapper::Long_method_valueOf_INLRString__LRLong__dispatch, // invoke this method
  Long_valueOf_INLRString__LRLong__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Long_methods_valueOf_INLRString_I_LRLong__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Long_methods_valueOf_INLRString_I_LRLong__arg_radix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "radix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Long_methods_valueOf_INLRString_I_LRLong__args[] = 
{
  &Long_methods_valueOf_INLRString_I_LRLong__arg_str,
  &Long_methods_valueOf_INLRString_I_LRLong__arg_radix,
  0
};

::acdk::lang::dmi::ClazzInfo* Long_methods_valueOf_INLRString_I_LRLong__exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Long_valueOf_INLRString_I_LRLong__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Long_method_valueOf_INLRString_I_LRLong_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "valueOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLong::clazzInfo(), // return type
  "_o_valueOf", // alternative name of method
  -1, // altlabelHashCode
  Long_methods_valueOf_INLRString_I_LRLong__args, // the arguments
  0, //arguments count
  Long_methods_valueOf_INLRString_I_LRLong__exceptions, // the declared exceptions
  Long_MetainfoWrapper::Long_method_valueOf_INLRString_I_LRLong__dispatch, // invoke this method
  Long_valueOf_INLRString_I_LRLong__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Long_methods[] = 
{
  &Long_method_GetClass__L_acdk_lang_RClass_,
  &Long_method_Long_I_LRLong_,
  &Long_method_Long_J_LRLong_,
  &Long_method_Long__LRLong_,
  &Long_method_Long_INLRString__LRLong_,
  &Long_method_compareTo_INLRLong__I,
  &Long_method_compareTo_J_I,
  &Long_method_create_instance__LRObject_,
  &Long_method_decode_INLRString__LRLong_,
  &Long_method_equals_INLRLong__Z,
  &Long_method_equals_J_Z,
  &Long_method_getTYPE__LRClass_,
  &Long_method_hashCode_J_I,
  &Long_method_parseLong_INLRString__J,
  &Long_method_parseLong_INLRString_I_J,
  &Long_method_toBinaryString_I_LRString_,
  &Long_method_toBinaryString_J_LRString_,
  &Long_method_toHexString_I_LRString_,
  &Long_method_toHexString_J_LRString_,
  &Long_method_toOctalString_I_LRString_,
  &Long_method_toOctalString_J_LRString_,
  &Long_method_toString_I_LRString_,
  &Long_method_toString_II_LRString_,
  &Long_method_toString_J_LRString_,
  &Long_method_toString_JI_LRString_,
  &Long_method_valueOf_INLRString__LRLong_,
  &Long_method_valueOf_INLRString_I_LRLong_,
  0
};


struct Long_MetaInfoInitializer
{  Long_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Long::clazzInfo();
    ci->fields =  _Long_fields;
    ci->methods =  _Long_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Long_MetaInfoInitializer Long_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
NoSuchDmiElementException_create_array(int length)
{
  return new ObjectArrayImpl<RNoSuchDmiElementException>(length);
}

//static
::acdk::lang::RObject
NoSuchDmiElementException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class NoSuchDmiElementException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NoSuchDmiElementException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)NoSuchDmiElementException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NoSuchDmiElementException_method_NoSuchDmiElementException__LRNoSuchDmiElementException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NoSuchDmiElementException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NoSuchDmiElementException_method_NoSuchDmiElementException_INLRString__LRNoSuchDmiElementException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NoSuchDmiElementException(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
};


void ThrowException_NoSuchDmiElementException(IN(::acdk::lang::RThrowable) ex)
{
  throw RNoSuchDmiElementException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _NoSuchDmiElementException_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* NoSuchDmiElementException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NoSuchDmiElementException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NoSuchDmiElementException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  NoSuchDmiElementException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  NoSuchDmiElementException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  NoSuchDmiElementException_MetainfoWrapper::NoSuchDmiElementException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NoSuchDmiElementException_methods_NoSuchDmiElementException__LRNoSuchDmiElementException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NoSuchDmiElementException_methods_NoSuchDmiElementException__LRNoSuchDmiElementException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NoSuchDmiElementException_method_NoSuchDmiElementException__LRNoSuchDmiElementException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NoSuchDmiElementException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NoSuchDmiElementException::clazzInfo(), // return type
  "_0_NoSuchDmiElementException", // alternative name of method
  -1, // altlabelHashCode
  NoSuchDmiElementException_methods_NoSuchDmiElementException__LRNoSuchDmiElementException__args, // the arguments
  0, //arguments count
  NoSuchDmiElementException_methods_NoSuchDmiElementException__LRNoSuchDmiElementException__exceptions, // the declared exceptions
  NoSuchDmiElementException_MetainfoWrapper::NoSuchDmiElementException_method_NoSuchDmiElementException__LRNoSuchDmiElementException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NoSuchDmiElementException_methods_NoSuchDmiElementException_INLRString__LRNoSuchDmiElementException__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NoSuchDmiElementException_methods_NoSuchDmiElementException_INLRString__LRNoSuchDmiElementException__args[] = 
{
  &NoSuchDmiElementException_methods_NoSuchDmiElementException_INLRString__LRNoSuchDmiElementException__arg_what,
  0
};

::acdk::lang::dmi::ClazzInfo* NoSuchDmiElementException_methods_NoSuchDmiElementException_INLRString__LRNoSuchDmiElementException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NoSuchDmiElementException_method_NoSuchDmiElementException_INLRString__LRNoSuchDmiElementException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NoSuchDmiElementException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NoSuchDmiElementException::clazzInfo(), // return type
  "_1_NoSuchDmiElementException", // alternative name of method
  -1, // altlabelHashCode
  NoSuchDmiElementException_methods_NoSuchDmiElementException_INLRString__LRNoSuchDmiElementException__args, // the arguments
  0, //arguments count
  NoSuchDmiElementException_methods_NoSuchDmiElementException_INLRString__LRNoSuchDmiElementException__exceptions, // the declared exceptions
  NoSuchDmiElementException_MetainfoWrapper::NoSuchDmiElementException_method_NoSuchDmiElementException_INLRString__LRNoSuchDmiElementException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _NoSuchDmiElementException_methods[] = 
{
  &NoSuchDmiElementException_method_GetClass__L_acdk_lang_RClass_,
  &NoSuchDmiElementException_method_NoSuchDmiElementException__LRNoSuchDmiElementException_,
  &NoSuchDmiElementException_method_NoSuchDmiElementException_INLRString__LRNoSuchDmiElementException_,
  0
};


struct NoSuchDmiElementException_MetaInfoInitializer
{  NoSuchDmiElementException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = NoSuchDmiElementException::clazzInfo();
    ci->fields =  _NoSuchDmiElementException_fields;
    ci->methods =  _NoSuchDmiElementException_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
NoSuchDmiElementException_MetaInfoInitializer NoSuchDmiElementException_MetaInfoInitializer_staticinstance__;


struct NoSuchDmiElementException_clazzInfo_ClazzAttributesResInitializer29
{
  NoSuchDmiElementException_clazzInfo_ClazzAttributesResInitializer29()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)NoSuchDmiElementException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_NoSuchDmiElementException));
  }
};

NoSuchDmiElementException_clazzInfo_ClazzAttributesResInitializer29 NoSuchDmiElementException_clazzInfo_ClazzAttributesResInitializer29_instance;



} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
NoSuchElementException_create_array(int length)
{
  return new ObjectArrayImpl<RNoSuchElementException>(length);
}

//static
::acdk::lang::RObject
NoSuchElementException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class NoSuchElementException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NoSuchElementException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)NoSuchElementException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NoSuchElementException_method_NoSuchElementException__LRNoSuchElementException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NoSuchElementException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NoSuchElementException_method_NoSuchElementException_INLRString__LRNoSuchElementException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NoSuchElementException(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
};


void ThrowException_NoSuchElementException(IN(::acdk::lang::RThrowable) ex)
{
  throw RNoSuchElementException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _NoSuchElementException_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* NoSuchElementException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NoSuchElementException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NoSuchElementException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  NoSuchElementException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  NoSuchElementException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  NoSuchElementException_MetainfoWrapper::NoSuchElementException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NoSuchElementException_methods_NoSuchElementException__LRNoSuchElementException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NoSuchElementException_methods_NoSuchElementException__LRNoSuchElementException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NoSuchElementException_method_NoSuchElementException__LRNoSuchElementException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NoSuchElementException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NoSuchElementException::clazzInfo(), // return type
  "_0_NoSuchElementException", // alternative name of method
  -1, // altlabelHashCode
  NoSuchElementException_methods_NoSuchElementException__LRNoSuchElementException__args, // the arguments
  0, //arguments count
  NoSuchElementException_methods_NoSuchElementException__LRNoSuchElementException__exceptions, // the declared exceptions
  NoSuchElementException_MetainfoWrapper::NoSuchElementException_method_NoSuchElementException__LRNoSuchElementException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NoSuchElementException_methods_NoSuchElementException_INLRString__LRNoSuchElementException__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NoSuchElementException_methods_NoSuchElementException_INLRString__LRNoSuchElementException__args[] = 
{
  &NoSuchElementException_methods_NoSuchElementException_INLRString__LRNoSuchElementException__arg_what,
  0
};

::acdk::lang::dmi::ClazzInfo* NoSuchElementException_methods_NoSuchElementException_INLRString__LRNoSuchElementException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NoSuchElementException_method_NoSuchElementException_INLRString__LRNoSuchElementException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NoSuchElementException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NoSuchElementException::clazzInfo(), // return type
  "_1_NoSuchElementException", // alternative name of method
  -1, // altlabelHashCode
  NoSuchElementException_methods_NoSuchElementException_INLRString__LRNoSuchElementException__args, // the arguments
  0, //arguments count
  NoSuchElementException_methods_NoSuchElementException_INLRString__LRNoSuchElementException__exceptions, // the declared exceptions
  NoSuchElementException_MetainfoWrapper::NoSuchElementException_method_NoSuchElementException_INLRString__LRNoSuchElementException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _NoSuchElementException_methods[] = 
{
  &NoSuchElementException_method_GetClass__L_acdk_lang_RClass_,
  &NoSuchElementException_method_NoSuchElementException__LRNoSuchElementException_,
  &NoSuchElementException_method_NoSuchElementException_INLRString__LRNoSuchElementException_,
  0
};


struct NoSuchElementException_MetaInfoInitializer
{  NoSuchElementException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = NoSuchElementException::clazzInfo();
    ci->fields =  _NoSuchElementException_fields;
    ci->methods =  _NoSuchElementException_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
NoSuchElementException_MetaInfoInitializer NoSuchElementException_MetaInfoInitializer_staticinstance__;


struct NoSuchElementException_clazzInfo_ClazzAttributesResInitializer30
{
  NoSuchElementException_clazzInfo_ClazzAttributesResInitializer30()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)NoSuchElementException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_NoSuchElementException));
  }
};

NoSuchElementException_clazzInfo_ClazzAttributesResInitializer30 NoSuchElementException_clazzInfo_ClazzAttributesResInitializer30_instance;



} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
NoSuchFieldException_create_array(int length)
{
  return new ObjectArrayImpl<RNoSuchFieldException>(length);
}

//static
::acdk::lang::RObject
NoSuchFieldException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class NoSuchFieldException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NoSuchFieldException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)NoSuchFieldException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NoSuchFieldException_method_NoSuchFieldException__LRNoSuchFieldException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NoSuchFieldException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NoSuchFieldException_method_NoSuchFieldException_INLRString__LRNoSuchFieldException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NoSuchFieldException(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
};


void ThrowException_NoSuchFieldException(IN(::acdk::lang::RThrowable) ex)
{
  throw RNoSuchFieldException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _NoSuchFieldException_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* NoSuchFieldException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NoSuchFieldException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NoSuchFieldException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  NoSuchFieldException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  NoSuchFieldException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  NoSuchFieldException_MetainfoWrapper::NoSuchFieldException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NoSuchFieldException_methods_NoSuchFieldException__LRNoSuchFieldException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NoSuchFieldException_methods_NoSuchFieldException__LRNoSuchFieldException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NoSuchFieldException_method_NoSuchFieldException__LRNoSuchFieldException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NoSuchFieldException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NoSuchFieldException::clazzInfo(), // return type
  "_0_NoSuchFieldException", // alternative name of method
  -1, // altlabelHashCode
  NoSuchFieldException_methods_NoSuchFieldException__LRNoSuchFieldException__args, // the arguments
  0, //arguments count
  NoSuchFieldException_methods_NoSuchFieldException__LRNoSuchFieldException__exceptions, // the declared exceptions
  NoSuchFieldException_MetainfoWrapper::NoSuchFieldException_method_NoSuchFieldException__LRNoSuchFieldException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NoSuchFieldException_methods_NoSuchFieldException_INLRString__LRNoSuchFieldException__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NoSuchFieldException_methods_NoSuchFieldException_INLRString__LRNoSuchFieldException__args[] = 
{
  &NoSuchFieldException_methods_NoSuchFieldException_INLRString__LRNoSuchFieldException__arg_what,
  0
};

::acdk::lang::dmi::ClazzInfo* NoSuchFieldException_methods_NoSuchFieldException_INLRString__LRNoSuchFieldException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NoSuchFieldException_method_NoSuchFieldException_INLRString__LRNoSuchFieldException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NoSuchFieldException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NoSuchFieldException::clazzInfo(), // return type
  "_1_NoSuchFieldException", // alternative name of method
  -1, // altlabelHashCode
  NoSuchFieldException_methods_NoSuchFieldException_INLRString__LRNoSuchFieldException__args, // the arguments
  0, //arguments count
  NoSuchFieldException_methods_NoSuchFieldException_INLRString__LRNoSuchFieldException__exceptions, // the declared exceptions
  NoSuchFieldException_MetainfoWrapper::NoSuchFieldException_method_NoSuchFieldException_INLRString__LRNoSuchFieldException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _NoSuchFieldException_methods[] = 
{
  &NoSuchFieldException_method_GetClass__L_acdk_lang_RClass_,
  &NoSuchFieldException_method_NoSuchFieldException__LRNoSuchFieldException_,
  &NoSuchFieldException_method_NoSuchFieldException_INLRString__LRNoSuchFieldException_,
  0
};


struct NoSuchFieldException_MetaInfoInitializer
{  NoSuchFieldException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = NoSuchFieldException::clazzInfo();
    ci->fields =  _NoSuchFieldException_fields;
    ci->methods =  _NoSuchFieldException_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
NoSuchFieldException_MetaInfoInitializer NoSuchFieldException_MetaInfoInitializer_staticinstance__;


struct NoSuchFieldException_clazzInfo_ClazzAttributesResInitializer31
{
  NoSuchFieldException_clazzInfo_ClazzAttributesResInitializer31()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)NoSuchFieldException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_NoSuchFieldException));
  }
};

NoSuchFieldException_clazzInfo_ClazzAttributesResInitializer31 NoSuchFieldException_clazzInfo_ClazzAttributesResInitializer31_instance;



} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
NoSuchMethodException_create_array(int length)
{
  return new ObjectArrayImpl<RNoSuchMethodException>(length);
}

//static
::acdk::lang::RObject
NoSuchMethodException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class NoSuchMethodException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NoSuchMethodException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)NoSuchMethodException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NoSuchMethodException_method_NoSuchMethodException__LRNoSuchMethodException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NoSuchMethodException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NoSuchMethodException_method_NoSuchMethodException_INLRString__LRNoSuchMethodException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NoSuchMethodException(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
};


void ThrowException_NoSuchMethodException(IN(::acdk::lang::RThrowable) ex)
{
  throw RNoSuchMethodException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _NoSuchMethodException_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* NoSuchMethodException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NoSuchMethodException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NoSuchMethodException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  NoSuchMethodException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  NoSuchMethodException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  NoSuchMethodException_MetainfoWrapper::NoSuchMethodException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NoSuchMethodException_methods_NoSuchMethodException__LRNoSuchMethodException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NoSuchMethodException_methods_NoSuchMethodException__LRNoSuchMethodException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NoSuchMethodException_method_NoSuchMethodException__LRNoSuchMethodException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NoSuchMethodException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NoSuchMethodException::clazzInfo(), // return type
  "_0_NoSuchMethodException", // alternative name of method
  -1, // altlabelHashCode
  NoSuchMethodException_methods_NoSuchMethodException__LRNoSuchMethodException__args, // the arguments
  0, //arguments count
  NoSuchMethodException_methods_NoSuchMethodException__LRNoSuchMethodException__exceptions, // the declared exceptions
  NoSuchMethodException_MetainfoWrapper::NoSuchMethodException_method_NoSuchMethodException__LRNoSuchMethodException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NoSuchMethodException_methods_NoSuchMethodException_INLRString__LRNoSuchMethodException__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NoSuchMethodException_methods_NoSuchMethodException_INLRString__LRNoSuchMethodException__args[] = 
{
  &NoSuchMethodException_methods_NoSuchMethodException_INLRString__LRNoSuchMethodException__arg_what,
  0
};

::acdk::lang::dmi::ClazzInfo* NoSuchMethodException_methods_NoSuchMethodException_INLRString__LRNoSuchMethodException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NoSuchMethodException_method_NoSuchMethodException_INLRString__LRNoSuchMethodException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NoSuchMethodException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NoSuchMethodException::clazzInfo(), // return type
  "_1_NoSuchMethodException", // alternative name of method
  -1, // altlabelHashCode
  NoSuchMethodException_methods_NoSuchMethodException_INLRString__LRNoSuchMethodException__args, // the arguments
  0, //arguments count
  NoSuchMethodException_methods_NoSuchMethodException_INLRString__LRNoSuchMethodException__exceptions, // the declared exceptions
  NoSuchMethodException_MetainfoWrapper::NoSuchMethodException_method_NoSuchMethodException_INLRString__LRNoSuchMethodException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _NoSuchMethodException_methods[] = 
{
  &NoSuchMethodException_method_GetClass__L_acdk_lang_RClass_,
  &NoSuchMethodException_method_NoSuchMethodException__LRNoSuchMethodException_,
  &NoSuchMethodException_method_NoSuchMethodException_INLRString__LRNoSuchMethodException_,
  0
};


struct NoSuchMethodException_MetaInfoInitializer
{  NoSuchMethodException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = NoSuchMethodException::clazzInfo();
    ci->fields =  _NoSuchMethodException_fields;
    ci->methods =  _NoSuchMethodException_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
NoSuchMethodException_MetaInfoInitializer NoSuchMethodException_MetaInfoInitializer_staticinstance__;


struct NoSuchMethodException_clazzInfo_ClazzAttributesResInitializer32
{
  NoSuchMethodException_clazzInfo_ClazzAttributesResInitializer32()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)NoSuchMethodException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_NoSuchMethodException));
  }
};

NoSuchMethodException_clazzInfo_ClazzAttributesResInitializer32 NoSuchMethodException_clazzInfo_ClazzAttributesResInitializer32_instance;



} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
NullPointerException_create_array(int length)
{
  return new ObjectArrayImpl<RNullPointerException>(length);
}

//static
::acdk::lang::RObject
NullPointerException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class NullPointerException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NullPointerException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)NullPointerException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NullPointerException_method_NullPointerException__LRNullPointerException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NullPointerException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NullPointerException_method_NullPointerException_INLRString__LRNullPointerException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NullPointerException(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
};


void ThrowException_NullPointerException(IN(::acdk::lang::RThrowable) ex)
{
  throw RNullPointerException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _NullPointerException_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* NullPointerException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NullPointerException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NullPointerException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  NullPointerException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  NullPointerException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  NullPointerException_MetainfoWrapper::NullPointerException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NullPointerException_methods_NullPointerException__LRNullPointerException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NullPointerException_methods_NullPointerException__LRNullPointerException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NullPointerException_method_NullPointerException__LRNullPointerException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NullPointerException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NullPointerException::clazzInfo(), // return type
  "_0_NullPointerException", // alternative name of method
  -1, // altlabelHashCode
  NullPointerException_methods_NullPointerException__LRNullPointerException__args, // the arguments
  0, //arguments count
  NullPointerException_methods_NullPointerException__LRNullPointerException__exceptions, // the declared exceptions
  NullPointerException_MetainfoWrapper::NullPointerException_method_NullPointerException__LRNullPointerException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NullPointerException_methods_NullPointerException_INLRString__LRNullPointerException__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NullPointerException_methods_NullPointerException_INLRString__LRNullPointerException__args[] = 
{
  &NullPointerException_methods_NullPointerException_INLRString__LRNullPointerException__arg_what,
  0
};

::acdk::lang::dmi::ClazzInfo* NullPointerException_methods_NullPointerException_INLRString__LRNullPointerException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NullPointerException_method_NullPointerException_INLRString__LRNullPointerException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NullPointerException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NullPointerException::clazzInfo(), // return type
  "_1_NullPointerException", // alternative name of method
  -1, // altlabelHashCode
  NullPointerException_methods_NullPointerException_INLRString__LRNullPointerException__args, // the arguments
  0, //arguments count
  NullPointerException_methods_NullPointerException_INLRString__LRNullPointerException__exceptions, // the declared exceptions
  NullPointerException_MetainfoWrapper::NullPointerException_method_NullPointerException_INLRString__LRNullPointerException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _NullPointerException_methods[] = 
{
  &NullPointerException_method_GetClass__L_acdk_lang_RClass_,
  &NullPointerException_method_NullPointerException__LRNullPointerException_,
  &NullPointerException_method_NullPointerException_INLRString__LRNullPointerException_,
  0
};


struct NullPointerException_MetaInfoInitializer
{  NullPointerException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = NullPointerException::clazzInfo();
    ci->fields =  _NullPointerException_fields;
    ci->methods =  _NullPointerException_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
NullPointerException_MetaInfoInitializer NullPointerException_MetaInfoInitializer_staticinstance__;


struct NullPointerException_clazzInfo_ClazzAttributesResInitializer33
{
  NullPointerException_clazzInfo_ClazzAttributesResInitializer33()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)NullPointerException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_NullPointerException));
  }
};

NullPointerException_clazzInfo_ClazzAttributesResInitializer33 NullPointerException_clazzInfo_ClazzAttributesResInitializer33_instance;



} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
Number_create_array(int length)
{
  return new ObjectArrayImpl<RNumber>(length);
}

//static
::acdk::lang::RObject
Number_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Number_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Number_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Number::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Number_method_byteValue__B_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Number* This = dmi_cast<Number>(This_);
  ret = This->byteValue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Number_method_decodeIntegerNumber_INLRString_INOUTZINOUTCINOUTIZ_J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Number::decodeIntegerNumber(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castToBoolRef(args[1], dc), ::acdk::lang::dmi::castToCharRef(args[2], dc), ::acdk::lang::dmi::castToIntRef(args[3], dc), ::acdk::lang::dmi::castTo< bool>(args[4], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Number_method_decodeIntegerNumber_INLRString_INOUTZINOUTCINOUTI_J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Number::decodeIntegerNumber(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castToBoolRef(args[1], dc), ::acdk::lang::dmi::castToCharRef(args[2], dc), ::acdk::lang::dmi::castToIntRef(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Number_method_decodeToNumber_INLRString__LRNumber__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Number::decodeToNumber(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Number_method_decodeToNumber_INLRString_Z_LRNumber__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Number::decodeToNumber(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Number_method_decodeToNumber_INLRString_ZZINLacdk_util_RLocale__LRNumber__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Number::decodeToNumber(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc), ::acdk::lang::dmi::castTo< bool>(args[2], dc), ::acdk::lang::dmi::castTo< acdk::util::RLocale>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Number_method_decodeToNumber_INLRString_ZZ_LRNumber__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Number::decodeToNumber(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc), ::acdk::lang::dmi::castTo< bool>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Number_method_doubleValue__D_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Number* This = dmi_cast<Number>(This_);
  ret = This->doubleValue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Number_method_floatValue__F_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Number* This = dmi_cast<Number>(This_);
  ret = This->floatValue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Number_method_getFractionAndExponentSignFromLocale_INLacdk_util_RLocale_OUTUCOUTUC_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Number::getFractionAndExponentSignFromLocale(::acdk::lang::dmi::castTo< acdk::util::RLocale>(args[0], dc), ::acdk::lang::dmi::castToUcCharRef(args[1], dc), ::acdk::lang::dmi::castToUcCharRef(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Number_method_getNumber_D_LRNumber__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Number::getNumber(::acdk::lang::dmi::castTo< double>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Number_method_getNumber_J_LRNumber__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Number::getNumber(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Number_method_getNumber_DC_LRNumber__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Number::getNumber(::acdk::lang::dmi::castTo< double>(args[0], dc), ::acdk::lang::dmi::castTo< char>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Number_method_getNumber_JC_LRNumber__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Number::getNumber(::acdk::lang::dmi::castTo< jlong>(args[0], dc), ::acdk::lang::dmi::castTo< char>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Number_method_getSmallestTypeChar_J_C_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Number::getSmallestTypeChar(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Number_method_getSmallestTypeChar_D_C_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Number::getSmallestTypeChar(::acdk::lang::dmi::castTo< double>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Number_method_hashCode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Number* This = dmi_cast<Number>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Number::hashCode();
    else
      ret = This->hashCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Number_method_intValue__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Number* This = dmi_cast<Number>(This_);
  ret = This->intValue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Number_method_longValue__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Number* This = dmi_cast<Number>(This_);
  ret = This->longValue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Number_method_parseFloatNumber_INLRString_INOUTZINOUTCINOUTIZ_D_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Number::parseFloatNumber(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castToBoolRef(args[1], dc), ::acdk::lang::dmi::castToCharRef(args[2], dc), ::acdk::lang::dmi::castToIntRef(args[3], dc), ::acdk::lang::dmi::castTo< bool>(args[4], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Number_method_parseFloatNumber_INLRString_INOUTZINOUTCINOUTIZINLacdk_util_RLocale__D_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Number::parseFloatNumber(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castToBoolRef(args[1], dc), ::acdk::lang::dmi::castToCharRef(args[2], dc), ::acdk::lang::dmi::castToIntRef(args[3], dc), ::acdk::lang::dmi::castTo< bool>(args[4], dc), ::acdk::lang::dmi::castTo< acdk::util::RLocale>(args[5], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Number_method_parseFloatNumber_INLRString_INOUTZINOUTCINOUTI_D_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Number::parseFloatNumber(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castToBoolRef(args[1], dc), ::acdk::lang::dmi::castToCharRef(args[2], dc), ::acdk::lang::dmi::castToIntRef(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Number_method_parseIntegerNumber_INLRString_IINOUTZINOUTCINOUTIZ_J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Number::parseIntegerNumber(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castToBoolRef(args[2], dc), ::acdk::lang::dmi::castToCharRef(args[3], dc), ::acdk::lang::dmi::castToIntRef(args[4], dc), ::acdk::lang::dmi::castTo< bool>(args[5], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Number_method_parseIntegerNumber_INLRString_IINOUTZINOUTCINOUTI_J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Number::parseIntegerNumber(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castToBoolRef(args[2], dc), ::acdk::lang::dmi::castToCharRef(args[3], dc), ::acdk::lang::dmi::castToIntRef(args[4], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Number_method_parseToIntegerNumber_INLRString_IZZ_LRNumber__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Number::parseToIntegerNumber(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< bool>(args[2], dc), ::acdk::lang::dmi::castTo< bool>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Number_method_parseToIntegerNumber_INLRString_I_LRNumber__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Number::parseToIntegerNumber(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Number_method_parseToIntegerNumber_INLRString_IZ_LRNumber__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Number::parseToIntegerNumber(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< bool>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Number_method_shortValue__S_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Number* This = dmi_cast<Number>(This_);
  ret = This->shortValue();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Number_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Number_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Number_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Number_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_t_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Number_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Number_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Number_MetainfoWrapper::Number_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Number_methods_Number__LRNumber__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Number_methods_Number__LRNumber__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Number_method_Number__LRNumber_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Number", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Number::clazzInfo(), // return type
  "_0_Number", // alternative name of method
  -1, // altlabelHashCode
  Number_methods_Number__LRNumber__args, // the arguments
  0, //arguments count
  Number_methods_Number__LRNumber__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Number_methods_byteValue__B_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Number_methods_byteValue__B_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Number_method_byteValue__B = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "byteValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz(), // return type
  "_1_byteValue", // alternative name of method
  -1, // altlabelHashCode
  Number_methods_byteValue__B_args, // the arguments
  0, //arguments count
  Number_methods_byteValue__B_exceptions, // the declared exceptions
  Number_MetainfoWrapper::Number_method_byteValue__B_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_decodeIntegerNumber_INLRString_INOUTZINOUTCINOUTIZ_J_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_decodeIntegerNumber_INLRString_INOUTZINOUTCINOUTIZ_J_arg_tryOnly = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "tryOnly", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_decodeIntegerNumber_INLRString_INOUTZINOUTCINOUTIZ_J_arg_typeChar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "typeChar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_decodeIntegerNumber_INLRString_INOUTZINOUTCINOUTIZ_J_arg_ignoreaTrailing = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "ignoreaTrailing", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_decodeIntegerNumber_INLRString_INOUTZINOUTCINOUTIZ_J_arg_ignoreLeadingWs = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "ignoreLeadingWs", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Number_methods_decodeIntegerNumber_INLRString_INOUTZINOUTCINOUTIZ_J_args[] = 
{
  &Number_methods_decodeIntegerNumber_INLRString_INOUTZINOUTCINOUTIZ_J_arg_str,
  &Number_methods_decodeIntegerNumber_INLRString_INOUTZINOUTCINOUTIZ_J_arg_tryOnly,
  &Number_methods_decodeIntegerNumber_INLRString_INOUTZINOUTCINOUTIZ_J_arg_typeChar,
  &Number_methods_decodeIntegerNumber_INLRString_INOUTZINOUTCINOUTIZ_J_arg_ignoreaTrailing,
  &Number_methods_decodeIntegerNumber_INLRString_INOUTZINOUTCINOUTIZ_J_arg_ignoreLeadingWs,
  0
};

::acdk::lang::dmi::ClazzInfo* Number_methods_decodeIntegerNumber_INLRString_INOUTZINOUTCINOUTIZ_J_exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Number_decodeIntegerNumber_INLRString_INOUTZINOUTCINOUTIZ_J_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Number_method_decodeIntegerNumber_INLRString_INOUTZINOUTCINOUTIZ_J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "decodeIntegerNumber", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_8_decodeIntegerNumber", // alternative name of method
  -1, // altlabelHashCode
  Number_methods_decodeIntegerNumber_INLRString_INOUTZINOUTCINOUTIZ_J_args, // the arguments
  0, //arguments count
  Number_methods_decodeIntegerNumber_INLRString_INOUTZINOUTCINOUTIZ_J_exceptions, // the declared exceptions
  Number_MetainfoWrapper::Number_method_decodeIntegerNumber_INLRString_INOUTZINOUTCINOUTIZ_J_dispatch, // invoke this method
  Number_decodeIntegerNumber_INLRString_INOUTZINOUTCINOUTIZ_J_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_decodeIntegerNumber_INLRString_INOUTZINOUTCINOUTI_J_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_decodeIntegerNumber_INLRString_INOUTZINOUTCINOUTI_J_arg_tryOnly = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "tryOnly", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_decodeIntegerNumber_INLRString_INOUTZINOUTCINOUTI_J_arg_typeChar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "typeChar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_decodeIntegerNumber_INLRString_INOUTZINOUTCINOUTI_J_arg_ignoreaTrailing = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "ignoreaTrailing", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Number_methods_decodeIntegerNumber_INLRString_INOUTZINOUTCINOUTI_J_args[] = 
{
  &Number_methods_decodeIntegerNumber_INLRString_INOUTZINOUTCINOUTI_J_arg_str,
  &Number_methods_decodeIntegerNumber_INLRString_INOUTZINOUTCINOUTI_J_arg_tryOnly,
  &Number_methods_decodeIntegerNumber_INLRString_INOUTZINOUTCINOUTI_J_arg_typeChar,
  &Number_methods_decodeIntegerNumber_INLRString_INOUTZINOUTCINOUTI_J_arg_ignoreaTrailing,
  0
};

::acdk::lang::dmi::ClazzInfo* Number_methods_decodeIntegerNumber_INLRString_INOUTZINOUTCINOUTI_J_exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Number_decodeIntegerNumber_INLRString_INOUTZINOUTCINOUTI_J_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Number_method_decodeIntegerNumber_INLRString_INOUTZINOUTCINOUTI_J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "decodeIntegerNumber", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_9_decodeIntegerNumber", // alternative name of method
  -1, // altlabelHashCode
  Number_methods_decodeIntegerNumber_INLRString_INOUTZINOUTCINOUTI_J_args, // the arguments
  0, //arguments count
  Number_methods_decodeIntegerNumber_INLRString_INOUTZINOUTCINOUTI_J_exceptions, // the declared exceptions
  Number_MetainfoWrapper::Number_method_decodeIntegerNumber_INLRString_INOUTZINOUTCINOUTI_J_dispatch, // invoke this method
  Number_decodeIntegerNumber_INLRString_INOUTZINOUTCINOUTI_J_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_decodeToNumber_INLRString__LRNumber__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Number_methods_decodeToNumber_INLRString__LRNumber__args[] = 
{
  &Number_methods_decodeToNumber_INLRString__LRNumber__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* Number_methods_decodeToNumber_INLRString__LRNumber__exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Number_decodeToNumber_INLRString__LRNumber__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Number_method_decodeToNumber_INLRString__LRNumber_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "decodeToNumber", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNumber::clazzInfo(), // return type
  "_m_decodeToNumber", // alternative name of method
  -1, // altlabelHashCode
  Number_methods_decodeToNumber_INLRString__LRNumber__args, // the arguments
  0, //arguments count
  Number_methods_decodeToNumber_INLRString__LRNumber__exceptions, // the declared exceptions
  Number_MetainfoWrapper::Number_method_decodeToNumber_INLRString__LRNumber__dispatch, // invoke this method
  Number_decodeToNumber_INLRString__LRNumber__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_decodeToNumber_INLRString_Z_LRNumber__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_decodeToNumber_INLRString_Z_LRNumber__arg_tryOnly = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "tryOnly", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Number_methods_decodeToNumber_INLRString_Z_LRNumber__args[] = 
{
  &Number_methods_decodeToNumber_INLRString_Z_LRNumber__arg_str,
  &Number_methods_decodeToNumber_INLRString_Z_LRNumber__arg_tryOnly,
  0
};

::acdk::lang::dmi::ClazzInfo* Number_methods_decodeToNumber_INLRString_Z_LRNumber__exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Number_decodeToNumber_INLRString_Z_LRNumber__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Number_method_decodeToNumber_INLRString_Z_LRNumber_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "decodeToNumber", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNumber::clazzInfo(), // return type
  "_n_decodeToNumber", // alternative name of method
  -1, // altlabelHashCode
  Number_methods_decodeToNumber_INLRString_Z_LRNumber__args, // the arguments
  0, //arguments count
  Number_methods_decodeToNumber_INLRString_Z_LRNumber__exceptions, // the declared exceptions
  Number_MetainfoWrapper::Number_method_decodeToNumber_INLRString_Z_LRNumber__dispatch, // invoke this method
  Number_decodeToNumber_INLRString_Z_LRNumber__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_decodeToNumber_INLRString_ZZINLacdk_util_RLocale__LRNumber__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_decodeToNumber_INLRString_ZZINLacdk_util_RLocale__LRNumber__arg_tryOnly = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "tryOnly", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_decodeToNumber_INLRString_ZZINLacdk_util_RLocale__LRNumber__arg_ignoreLeadingWs = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "ignoreLeadingWs", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_decodeToNumber_INLRString_ZZINLacdk_util_RLocale__LRNumber__arg_locale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "locale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RLocale::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Number_methods_decodeToNumber_INLRString_ZZINLacdk_util_RLocale__LRNumber__args[] = 
{
  &Number_methods_decodeToNumber_INLRString_ZZINLacdk_util_RLocale__LRNumber__arg_str,
  &Number_methods_decodeToNumber_INLRString_ZZINLacdk_util_RLocale__LRNumber__arg_tryOnly,
  &Number_methods_decodeToNumber_INLRString_ZZINLacdk_util_RLocale__LRNumber__arg_ignoreLeadingWs,
  &Number_methods_decodeToNumber_INLRString_ZZINLacdk_util_RLocale__LRNumber__arg_locale,
  0
};

::acdk::lang::dmi::ClazzInfo* Number_methods_decodeToNumber_INLRString_ZZINLacdk_util_RLocale__LRNumber__exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Number_decodeToNumber_INLRString_ZZINLacdk_util_RLocale__LRNumber__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Number_method_decodeToNumber_INLRString_ZZINLacdk_util_RLocale__LRNumber_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "decodeToNumber", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNumber::clazzInfo(), // return type
  "_l_decodeToNumber", // alternative name of method
  -1, // altlabelHashCode
  Number_methods_decodeToNumber_INLRString_ZZINLacdk_util_RLocale__LRNumber__args, // the arguments
  0, //arguments count
  Number_methods_decodeToNumber_INLRString_ZZINLacdk_util_RLocale__LRNumber__exceptions, // the declared exceptions
  Number_MetainfoWrapper::Number_method_decodeToNumber_INLRString_ZZINLacdk_util_RLocale__LRNumber__dispatch, // invoke this method
  Number_decodeToNumber_INLRString_ZZINLacdk_util_RLocale__LRNumber__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_decodeToNumber_INLRString_ZZ_LRNumber__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_decodeToNumber_INLRString_ZZ_LRNumber__arg_tryOnly = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "tryOnly", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_decodeToNumber_INLRString_ZZ_LRNumber__arg_ignoreLeadingWs = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "ignoreLeadingWs", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Number_methods_decodeToNumber_INLRString_ZZ_LRNumber__args[] = 
{
  &Number_methods_decodeToNumber_INLRString_ZZ_LRNumber__arg_str,
  &Number_methods_decodeToNumber_INLRString_ZZ_LRNumber__arg_tryOnly,
  &Number_methods_decodeToNumber_INLRString_ZZ_LRNumber__arg_ignoreLeadingWs,
  0
};

::acdk::lang::dmi::ClazzInfo* Number_methods_decodeToNumber_INLRString_ZZ_LRNumber__exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Number_decodeToNumber_INLRString_ZZ_LRNumber__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Number_method_decodeToNumber_INLRString_ZZ_LRNumber_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "decodeToNumber", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNumber::clazzInfo(), // return type
  "_o_decodeToNumber", // alternative name of method
  -1, // altlabelHashCode
  Number_methods_decodeToNumber_INLRString_ZZ_LRNumber__args, // the arguments
  0, //arguments count
  Number_methods_decodeToNumber_INLRString_ZZ_LRNumber__exceptions, // the declared exceptions
  Number_MetainfoWrapper::Number_method_decodeToNumber_INLRString_ZZ_LRNumber__dispatch, // invoke this method
  Number_decodeToNumber_INLRString_ZZ_LRNumber__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Number_methods_doubleValue__D_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Number_methods_doubleValue__D_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Number_method_doubleValue__D = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "doubleValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(), // return type
  "_6_doubleValue", // alternative name of method
  -1, // altlabelHashCode
  Number_methods_doubleValue__D_args, // the arguments
  0, //arguments count
  Number_methods_doubleValue__D_exceptions, // the declared exceptions
  Number_MetainfoWrapper::Number_method_doubleValue__D_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Number_methods_floatValue__F_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Number_methods_floatValue__F_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Number_method_floatValue__F = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "floatValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz(), // return type
  "_5_floatValue", // alternative name of method
  -1, // altlabelHashCode
  Number_methods_floatValue__F_args, // the arguments
  0, //arguments count
  Number_methods_floatValue__F_exceptions, // the declared exceptions
  Number_MetainfoWrapper::Number_method_floatValue__F_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_getFractionAndExponentSignFromLocale_INLacdk_util_RLocale_OUTUCOUTUC_V_arg_locale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "locale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RLocale::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_getFractionAndExponentSignFromLocale_INLacdk_util_RLocale_OUTUCOUTUC_V_arg_fraction = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "fraction", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_getFractionAndExponentSignFromLocale_INLacdk_util_RLocale_OUTUCOUTUC_V_arg_exponent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "exponent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Number_methods_getFractionAndExponentSignFromLocale_INLacdk_util_RLocale_OUTUCOUTUC_V_args[] = 
{
  &Number_methods_getFractionAndExponentSignFromLocale_INLacdk_util_RLocale_OUTUCOUTUC_V_arg_locale,
  &Number_methods_getFractionAndExponentSignFromLocale_INLacdk_util_RLocale_OUTUCOUTUC_V_arg_fraction,
  &Number_methods_getFractionAndExponentSignFromLocale_INLacdk_util_RLocale_OUTUCOUTUC_V_arg_exponent,
  0
};

::acdk::lang::dmi::ClazzInfo* Number_methods_getFractionAndExponentSignFromLocale_INLacdk_util_RLocale_OUTUCOUTUC_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Number_method_getFractionAndExponentSignFromLocale_INLacdk_util_RLocale_OUTUCOUTUC_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFractionAndExponentSignFromLocale", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_s_getFractionAndExponentSignFromLocale", // alternative name of method
  -1, // altlabelHashCode
  Number_methods_getFractionAndExponentSignFromLocale_INLacdk_util_RLocale_OUTUCOUTUC_V_args, // the arguments
  0, //arguments count
  Number_methods_getFractionAndExponentSignFromLocale_INLacdk_util_RLocale_OUTUCOUTUC_V_exceptions, // the declared exceptions
  Number_MetainfoWrapper::Number_method_getFractionAndExponentSignFromLocale_INLacdk_util_RLocale_OUTUCOUTUC_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_getNumber_D_LRNumber__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Number_methods_getNumber_D_LRNumber__args[] = 
{
  &Number_methods_getNumber_D_LRNumber__arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* Number_methods_getNumber_D_LRNumber__exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Number_getNumber_D_LRNumber__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Number_method_getNumber_D_LRNumber_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getNumber", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNumber::clazzInfo(), // return type
  "_k_getNumber", // alternative name of method
  -1, // altlabelHashCode
  Number_methods_getNumber_D_LRNumber__args, // the arguments
  0, //arguments count
  Number_methods_getNumber_D_LRNumber__exceptions, // the declared exceptions
  Number_MetainfoWrapper::Number_method_getNumber_D_LRNumber__dispatch, // invoke this method
  Number_getNumber_D_LRNumber__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_getNumber_J_LRNumber__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Number_methods_getNumber_J_LRNumber__args[] = 
{
  &Number_methods_getNumber_J_LRNumber__arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* Number_methods_getNumber_J_LRNumber__exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Number_getNumber_J_LRNumber__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Number_method_getNumber_J_LRNumber_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getNumber", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNumber::clazzInfo(), // return type
  "_i_getNumber", // alternative name of method
  -1, // altlabelHashCode
  Number_methods_getNumber_J_LRNumber__args, // the arguments
  0, //arguments count
  Number_methods_getNumber_J_LRNumber__exceptions, // the declared exceptions
  Number_MetainfoWrapper::Number_method_getNumber_J_LRNumber__dispatch, // invoke this method
  Number_getNumber_J_LRNumber__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_getNumber_DC_LRNumber__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_getNumber_DC_LRNumber__arg_typeChar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "typeChar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Number_methods_getNumber_DC_LRNumber__args[] = 
{
  &Number_methods_getNumber_DC_LRNumber__arg_value,
  &Number_methods_getNumber_DC_LRNumber__arg_typeChar,
  0
};

::acdk::lang::dmi::ClazzInfo* Number_methods_getNumber_DC_LRNumber__exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Number_getNumber_DC_LRNumber__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Number_method_getNumber_DC_LRNumber_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNumber", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNumber::clazzInfo(), // return type
  "_j_getNumber", // alternative name of method
  -1, // altlabelHashCode
  Number_methods_getNumber_DC_LRNumber__args, // the arguments
  0, //arguments count
  Number_methods_getNumber_DC_LRNumber__exceptions, // the declared exceptions
  Number_MetainfoWrapper::Number_method_getNumber_DC_LRNumber__dispatch, // invoke this method
  Number_getNumber_DC_LRNumber__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_getNumber_JC_LRNumber__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_getNumber_JC_LRNumber__arg_typeChar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "typeChar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Number_methods_getNumber_JC_LRNumber__args[] = 
{
  &Number_methods_getNumber_JC_LRNumber__arg_value,
  &Number_methods_getNumber_JC_LRNumber__arg_typeChar,
  0
};

::acdk::lang::dmi::ClazzInfo* Number_methods_getNumber_JC_LRNumber__exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Number_getNumber_JC_LRNumber__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Number_method_getNumber_JC_LRNumber_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNumber", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNumber::clazzInfo(), // return type
  "_h_getNumber", // alternative name of method
  -1, // altlabelHashCode
  Number_methods_getNumber_JC_LRNumber__args, // the arguments
  0, //arguments count
  Number_methods_getNumber_JC_LRNumber__exceptions, // the declared exceptions
  Number_MetainfoWrapper::Number_method_getNumber_JC_LRNumber__dispatch, // invoke this method
  Number_getNumber_JC_LRNumber__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_getSmallestTypeChar_J_C_arg_number = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "number", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Number_methods_getSmallestTypeChar_J_C_args[] = 
{
  &Number_methods_getSmallestTypeChar_J_C_arg_number,
  0
};

::acdk::lang::dmi::ClazzInfo* Number_methods_getSmallestTypeChar_J_C_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Number_method_getSmallestTypeChar_J_C = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSmallestTypeChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz(), // return type
  "_f_getSmallestTypeChar", // alternative name of method
  -1, // altlabelHashCode
  Number_methods_getSmallestTypeChar_J_C_args, // the arguments
  0, //arguments count
  Number_methods_getSmallestTypeChar_J_C_exceptions, // the declared exceptions
  Number_MetainfoWrapper::Number_method_getSmallestTypeChar_J_C_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_getSmallestTypeChar_D_C_arg_number = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "number", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Number_methods_getSmallestTypeChar_D_C_args[] = 
{
  &Number_methods_getSmallestTypeChar_D_C_arg_number,
  0
};

::acdk::lang::dmi::ClazzInfo* Number_methods_getSmallestTypeChar_D_C_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Number_method_getSmallestTypeChar_D_C = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSmallestTypeChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz(), // return type
  "_g_getSmallestTypeChar", // alternative name of method
  -1, // altlabelHashCode
  Number_methods_getSmallestTypeChar_D_C_args, // the arguments
  0, //arguments count
  Number_methods_getSmallestTypeChar_D_C_exceptions, // the declared exceptions
  Number_MetainfoWrapper::Number_method_getSmallestTypeChar_D_C_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Number_methods_hashCode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Number_methods_hashCode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Number_method_hashCode__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hashCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_hashCode", // alternative name of method
  -1, // altlabelHashCode
  Number_methods_hashCode__I_args, // the arguments
  0, //arguments count
  Number_methods_hashCode__I_exceptions, // the declared exceptions
  Number_MetainfoWrapper::Number_method_hashCode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Number_methods_intValue__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Number_methods_intValue__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Number_method_intValue__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "intValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3_intValue", // alternative name of method
  -1, // altlabelHashCode
  Number_methods_intValue__I_args, // the arguments
  0, //arguments count
  Number_methods_intValue__I_exceptions, // the declared exceptions
  Number_MetainfoWrapper::Number_method_intValue__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Number_methods_longValue__J_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Number_methods_longValue__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Number_method_longValue__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "longValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_4_longValue", // alternative name of method
  -1, // altlabelHashCode
  Number_methods_longValue__J_args, // the arguments
  0, //arguments count
  Number_methods_longValue__J_exceptions, // the declared exceptions
  Number_MetainfoWrapper::Number_method_longValue__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_parseFloatNumber_INLRString_INOUTZINOUTCINOUTIZ_D_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_parseFloatNumber_INLRString_INOUTZINOUTCINOUTIZ_D_arg_tryOnly = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "tryOnly", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_parseFloatNumber_INLRString_INOUTZINOUTCINOUTIZ_D_arg_typeChar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "typeChar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_parseFloatNumber_INLRString_INOUTZINOUTCINOUTIZ_D_arg_ignoreTrailing = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "ignoreTrailing", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_parseFloatNumber_INLRString_INOUTZINOUTCINOUTIZ_D_arg_ignoreLeadingSpaces = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "ignoreLeadingSpaces", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Number_methods_parseFloatNumber_INLRString_INOUTZINOUTCINOUTIZ_D_args[] = 
{
  &Number_methods_parseFloatNumber_INLRString_INOUTZINOUTCINOUTIZ_D_arg_str,
  &Number_methods_parseFloatNumber_INLRString_INOUTZINOUTCINOUTIZ_D_arg_tryOnly,
  &Number_methods_parseFloatNumber_INLRString_INOUTZINOUTCINOUTIZ_D_arg_typeChar,
  &Number_methods_parseFloatNumber_INLRString_INOUTZINOUTCINOUTIZ_D_arg_ignoreTrailing,
  &Number_methods_parseFloatNumber_INLRString_INOUTZINOUTCINOUTIZ_D_arg_ignoreLeadingSpaces,
  0
};

::acdk::lang::dmi::ClazzInfo* Number_methods_parseFloatNumber_INLRString_INOUTZINOUTCINOUTIZ_D_exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Number_parseFloatNumber_INLRString_INOUTZINOUTCINOUTIZ_D_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Number_method_parseFloatNumber_INLRString_INOUTZINOUTCINOUTIZ_D = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "parseFloatNumber", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(), // return type
  "_e_parseFloatNumber", // alternative name of method
  -1, // altlabelHashCode
  Number_methods_parseFloatNumber_INLRString_INOUTZINOUTCINOUTIZ_D_args, // the arguments
  0, //arguments count
  Number_methods_parseFloatNumber_INLRString_INOUTZINOUTCINOUTIZ_D_exceptions, // the declared exceptions
  Number_MetainfoWrapper::Number_method_parseFloatNumber_INLRString_INOUTZINOUTCINOUTIZ_D_dispatch, // invoke this method
  Number_parseFloatNumber_INLRString_INOUTZINOUTCINOUTIZ_D_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_parseFloatNumber_INLRString_INOUTZINOUTCINOUTIZINLacdk_util_RLocale__D_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_parseFloatNumber_INLRString_INOUTZINOUTCINOUTIZINLacdk_util_RLocale__D_arg_tryOnly = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "tryOnly", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_parseFloatNumber_INLRString_INOUTZINOUTCINOUTIZINLacdk_util_RLocale__D_arg_typeChar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "typeChar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_parseFloatNumber_INLRString_INOUTZINOUTCINOUTIZINLacdk_util_RLocale__D_arg_ignoreTrailing = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "ignoreTrailing", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_parseFloatNumber_INLRString_INOUTZINOUTCINOUTIZINLacdk_util_RLocale__D_arg_ignoreLeadingSpaces = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "ignoreLeadingSpaces", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_parseFloatNumber_INLRString_INOUTZINOUTCINOUTIZINLacdk_util_RLocale__D_arg_locale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "locale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RLocale::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Number_methods_parseFloatNumber_INLRString_INOUTZINOUTCINOUTIZINLacdk_util_RLocale__D_args[] = 
{
  &Number_methods_parseFloatNumber_INLRString_INOUTZINOUTCINOUTIZINLacdk_util_RLocale__D_arg_str,
  &Number_methods_parseFloatNumber_INLRString_INOUTZINOUTCINOUTIZINLacdk_util_RLocale__D_arg_tryOnly,
  &Number_methods_parseFloatNumber_INLRString_INOUTZINOUTCINOUTIZINLacdk_util_RLocale__D_arg_typeChar,
  &Number_methods_parseFloatNumber_INLRString_INOUTZINOUTCINOUTIZINLacdk_util_RLocale__D_arg_ignoreTrailing,
  &Number_methods_parseFloatNumber_INLRString_INOUTZINOUTCINOUTIZINLacdk_util_RLocale__D_arg_ignoreLeadingSpaces,
  &Number_methods_parseFloatNumber_INLRString_INOUTZINOUTCINOUTIZINLacdk_util_RLocale__D_arg_locale,
  0
};

::acdk::lang::dmi::ClazzInfo* Number_methods_parseFloatNumber_INLRString_INOUTZINOUTCINOUTIZINLacdk_util_RLocale__D_exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Number_parseFloatNumber_INLRString_INOUTZINOUTCINOUTIZINLacdk_util_RLocale__D_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Number_method_parseFloatNumber_INLRString_INOUTZINOUTCINOUTIZINLacdk_util_RLocale__D = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parseFloatNumber", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(), // return type
  "_c_parseFloatNumber", // alternative name of method
  -1, // altlabelHashCode
  Number_methods_parseFloatNumber_INLRString_INOUTZINOUTCINOUTIZINLacdk_util_RLocale__D_args, // the arguments
  0, //arguments count
  Number_methods_parseFloatNumber_INLRString_INOUTZINOUTCINOUTIZINLacdk_util_RLocale__D_exceptions, // the declared exceptions
  Number_MetainfoWrapper::Number_method_parseFloatNumber_INLRString_INOUTZINOUTCINOUTIZINLacdk_util_RLocale__D_dispatch, // invoke this method
  Number_parseFloatNumber_INLRString_INOUTZINOUTCINOUTIZINLacdk_util_RLocale__D_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_parseFloatNumber_INLRString_INOUTZINOUTCINOUTI_D_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_parseFloatNumber_INLRString_INOUTZINOUTCINOUTI_D_arg_tryOnly = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "tryOnly", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_parseFloatNumber_INLRString_INOUTZINOUTCINOUTI_D_arg_typeChar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "typeChar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_parseFloatNumber_INLRString_INOUTZINOUTCINOUTI_D_arg_ignoreTrailing = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "ignoreTrailing", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Number_methods_parseFloatNumber_INLRString_INOUTZINOUTCINOUTI_D_args[] = 
{
  &Number_methods_parseFloatNumber_INLRString_INOUTZINOUTCINOUTI_D_arg_str,
  &Number_methods_parseFloatNumber_INLRString_INOUTZINOUTCINOUTI_D_arg_tryOnly,
  &Number_methods_parseFloatNumber_INLRString_INOUTZINOUTCINOUTI_D_arg_typeChar,
  &Number_methods_parseFloatNumber_INLRString_INOUTZINOUTCINOUTI_D_arg_ignoreTrailing,
  0
};

::acdk::lang::dmi::ClazzInfo* Number_methods_parseFloatNumber_INLRString_INOUTZINOUTCINOUTI_D_exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Number_parseFloatNumber_INLRString_INOUTZINOUTCINOUTI_D_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Number_method_parseFloatNumber_INLRString_INOUTZINOUTCINOUTI_D = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "parseFloatNumber", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(), // return type
  "_d_parseFloatNumber", // alternative name of method
  -1, // altlabelHashCode
  Number_methods_parseFloatNumber_INLRString_INOUTZINOUTCINOUTI_D_args, // the arguments
  0, //arguments count
  Number_methods_parseFloatNumber_INLRString_INOUTZINOUTCINOUTI_D_exceptions, // the declared exceptions
  Number_MetainfoWrapper::Number_method_parseFloatNumber_INLRString_INOUTZINOUTCINOUTI_D_dispatch, // invoke this method
  Number_parseFloatNumber_INLRString_INOUTZINOUTCINOUTI_D_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_parseIntegerNumber_INLRString_IINOUTZINOUTCINOUTIZ_J_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_parseIntegerNumber_INLRString_IINOUTZINOUTCINOUTIZ_J_arg_radix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "radix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_parseIntegerNumber_INLRString_IINOUTZINOUTCINOUTIZ_J_arg_tryOnly = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "tryOnly", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_parseIntegerNumber_INLRString_IINOUTZINOUTCINOUTIZ_J_arg_typeChar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "typeChar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_parseIntegerNumber_INLRString_IINOUTZINOUTCINOUTIZ_J_arg_ignoreTrailing = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "ignoreTrailing", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_parseIntegerNumber_INLRString_IINOUTZINOUTCINOUTIZ_J_arg_ignoreLeadingSpaces = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "ignoreLeadingSpaces", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Number_methods_parseIntegerNumber_INLRString_IINOUTZINOUTCINOUTIZ_J_args[] = 
{
  &Number_methods_parseIntegerNumber_INLRString_IINOUTZINOUTCINOUTIZ_J_arg_str,
  &Number_methods_parseIntegerNumber_INLRString_IINOUTZINOUTCINOUTIZ_J_arg_radix,
  &Number_methods_parseIntegerNumber_INLRString_IINOUTZINOUTCINOUTIZ_J_arg_tryOnly,
  &Number_methods_parseIntegerNumber_INLRString_IINOUTZINOUTCINOUTIZ_J_arg_typeChar,
  &Number_methods_parseIntegerNumber_INLRString_IINOUTZINOUTCINOUTIZ_J_arg_ignoreTrailing,
  &Number_methods_parseIntegerNumber_INLRString_IINOUTZINOUTCINOUTIZ_J_arg_ignoreLeadingSpaces,
  0
};

::acdk::lang::dmi::ClazzInfo* Number_methods_parseIntegerNumber_INLRString_IINOUTZINOUTCINOUTIZ_J_exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Number_parseIntegerNumber_INLRString_IINOUTZINOUTCINOUTIZ_J_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Number_method_parseIntegerNumber_INLRString_IINOUTZINOUTCINOUTIZ_J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parseIntegerNumber", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_a_parseIntegerNumber", // alternative name of method
  -1, // altlabelHashCode
  Number_methods_parseIntegerNumber_INLRString_IINOUTZINOUTCINOUTIZ_J_args, // the arguments
  0, //arguments count
  Number_methods_parseIntegerNumber_INLRString_IINOUTZINOUTCINOUTIZ_J_exceptions, // the declared exceptions
  Number_MetainfoWrapper::Number_method_parseIntegerNumber_INLRString_IINOUTZINOUTCINOUTIZ_J_dispatch, // invoke this method
  Number_parseIntegerNumber_INLRString_IINOUTZINOUTCINOUTIZ_J_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_parseIntegerNumber_INLRString_IINOUTZINOUTCINOUTI_J_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_parseIntegerNumber_INLRString_IINOUTZINOUTCINOUTI_J_arg_radix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "radix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_parseIntegerNumber_INLRString_IINOUTZINOUTCINOUTI_J_arg_tryOnly = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "tryOnly", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_parseIntegerNumber_INLRString_IINOUTZINOUTCINOUTI_J_arg_typeChar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "typeChar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_parseIntegerNumber_INLRString_IINOUTZINOUTCINOUTI_J_arg_ignoreTrailing = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "ignoreTrailing", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Number_methods_parseIntegerNumber_INLRString_IINOUTZINOUTCINOUTI_J_args[] = 
{
  &Number_methods_parseIntegerNumber_INLRString_IINOUTZINOUTCINOUTI_J_arg_str,
  &Number_methods_parseIntegerNumber_INLRString_IINOUTZINOUTCINOUTI_J_arg_radix,
  &Number_methods_parseIntegerNumber_INLRString_IINOUTZINOUTCINOUTI_J_arg_tryOnly,
  &Number_methods_parseIntegerNumber_INLRString_IINOUTZINOUTCINOUTI_J_arg_typeChar,
  &Number_methods_parseIntegerNumber_INLRString_IINOUTZINOUTCINOUTI_J_arg_ignoreTrailing,
  0
};

::acdk::lang::dmi::ClazzInfo* Number_methods_parseIntegerNumber_INLRString_IINOUTZINOUTCINOUTI_J_exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Number_parseIntegerNumber_INLRString_IINOUTZINOUTCINOUTI_J_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Number_method_parseIntegerNumber_INLRString_IINOUTZINOUTCINOUTI_J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "parseIntegerNumber", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_b_parseIntegerNumber", // alternative name of method
  -1, // altlabelHashCode
  Number_methods_parseIntegerNumber_INLRString_IINOUTZINOUTCINOUTI_J_args, // the arguments
  0, //arguments count
  Number_methods_parseIntegerNumber_INLRString_IINOUTZINOUTCINOUTI_J_exceptions, // the declared exceptions
  Number_MetainfoWrapper::Number_method_parseIntegerNumber_INLRString_IINOUTZINOUTCINOUTI_J_dispatch, // invoke this method
  Number_parseIntegerNumber_INLRString_IINOUTZINOUTCINOUTI_J_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_parseToIntegerNumber_INLRString_IZZ_LRNumber__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_parseToIntegerNumber_INLRString_IZZ_LRNumber__arg_radix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "radix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_parseToIntegerNumber_INLRString_IZZ_LRNumber__arg_tryOnly = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "tryOnly", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_parseToIntegerNumber_INLRString_IZZ_LRNumber__arg_ignoreLeadingSpaces = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "ignoreLeadingSpaces", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Number_methods_parseToIntegerNumber_INLRString_IZZ_LRNumber__args[] = 
{
  &Number_methods_parseToIntegerNumber_INLRString_IZZ_LRNumber__arg_str,
  &Number_methods_parseToIntegerNumber_INLRString_IZZ_LRNumber__arg_radix,
  &Number_methods_parseToIntegerNumber_INLRString_IZZ_LRNumber__arg_tryOnly,
  &Number_methods_parseToIntegerNumber_INLRString_IZZ_LRNumber__arg_ignoreLeadingSpaces,
  0
};

::acdk::lang::dmi::ClazzInfo* Number_methods_parseToIntegerNumber_INLRString_IZZ_LRNumber__exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Number_parseToIntegerNumber_INLRString_IZZ_LRNumber__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Number_method_parseToIntegerNumber_INLRString_IZZ_LRNumber_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parseToIntegerNumber", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNumber::clazzInfo(), // return type
  "_p_parseToIntegerNumber", // alternative name of method
  -1, // altlabelHashCode
  Number_methods_parseToIntegerNumber_INLRString_IZZ_LRNumber__args, // the arguments
  0, //arguments count
  Number_methods_parseToIntegerNumber_INLRString_IZZ_LRNumber__exceptions, // the declared exceptions
  Number_MetainfoWrapper::Number_method_parseToIntegerNumber_INLRString_IZZ_LRNumber__dispatch, // invoke this method
  Number_parseToIntegerNumber_INLRString_IZZ_LRNumber__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_parseToIntegerNumber_INLRString_I_LRNumber__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_parseToIntegerNumber_INLRString_I_LRNumber__arg_radix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "radix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Number_methods_parseToIntegerNumber_INLRString_I_LRNumber__args[] = 
{
  &Number_methods_parseToIntegerNumber_INLRString_I_LRNumber__arg_str,
  &Number_methods_parseToIntegerNumber_INLRString_I_LRNumber__arg_radix,
  0
};

::acdk::lang::dmi::ClazzInfo* Number_methods_parseToIntegerNumber_INLRString_I_LRNumber__exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Number_parseToIntegerNumber_INLRString_I_LRNumber__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Number_method_parseToIntegerNumber_INLRString_I_LRNumber_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "parseToIntegerNumber", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNumber::clazzInfo(), // return type
  "_q_parseToIntegerNumber", // alternative name of method
  -1, // altlabelHashCode
  Number_methods_parseToIntegerNumber_INLRString_I_LRNumber__args, // the arguments
  0, //arguments count
  Number_methods_parseToIntegerNumber_INLRString_I_LRNumber__exceptions, // the declared exceptions
  Number_MetainfoWrapper::Number_method_parseToIntegerNumber_INLRString_I_LRNumber__dispatch, // invoke this method
  Number_parseToIntegerNumber_INLRString_I_LRNumber__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_parseToIntegerNumber_INLRString_IZ_LRNumber__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_parseToIntegerNumber_INLRString_IZ_LRNumber__arg_radix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "radix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Number_methods_parseToIntegerNumber_INLRString_IZ_LRNumber__arg_tryOnly = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "tryOnly", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Number_methods_parseToIntegerNumber_INLRString_IZ_LRNumber__args[] = 
{
  &Number_methods_parseToIntegerNumber_INLRString_IZ_LRNumber__arg_str,
  &Number_methods_parseToIntegerNumber_INLRString_IZ_LRNumber__arg_radix,
  &Number_methods_parseToIntegerNumber_INLRString_IZ_LRNumber__arg_tryOnly,
  0
};

::acdk::lang::dmi::ClazzInfo* Number_methods_parseToIntegerNumber_INLRString_IZ_LRNumber__exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Number_parseToIntegerNumber_INLRString_IZ_LRNumber__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Number_method_parseToIntegerNumber_INLRString_IZ_LRNumber_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "parseToIntegerNumber", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNumber::clazzInfo(), // return type
  "_r_parseToIntegerNumber", // alternative name of method
  -1, // altlabelHashCode
  Number_methods_parseToIntegerNumber_INLRString_IZ_LRNumber__args, // the arguments
  0, //arguments count
  Number_methods_parseToIntegerNumber_INLRString_IZ_LRNumber__exceptions, // the declared exceptions
  Number_MetainfoWrapper::Number_method_parseToIntegerNumber_INLRString_IZ_LRNumber__dispatch, // invoke this method
  Number_parseToIntegerNumber_INLRString_IZ_LRNumber__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Number_methods_shortValue__S_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Number_methods_shortValue__S_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Number_method_shortValue__S = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "shortValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(), // return type
  "_2_shortValue", // alternative name of method
  -1, // altlabelHashCode
  Number_methods_shortValue__S_args, // the arguments
  0, //arguments count
  Number_methods_shortValue__S_exceptions, // the declared exceptions
  Number_MetainfoWrapper::Number_method_shortValue__S_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Number_methods[] = 
{
  &Number_method_GetClass__L_acdk_lang_RClass_,
  &Number_method_Number__LRNumber_,
  &Number_method_byteValue__B,
  &Number_method_decodeIntegerNumber_INLRString_INOUTZINOUTCINOUTIZ_J,
  &Number_method_decodeIntegerNumber_INLRString_INOUTZINOUTCINOUTI_J,
  &Number_method_decodeToNumber_INLRString__LRNumber_,
  &Number_method_decodeToNumber_INLRString_Z_LRNumber_,
  &Number_method_decodeToNumber_INLRString_ZZINLacdk_util_RLocale__LRNumber_,
  &Number_method_decodeToNumber_INLRString_ZZ_LRNumber_,
  &Number_method_doubleValue__D,
  &Number_method_floatValue__F,
  &Number_method_getFractionAndExponentSignFromLocale_INLacdk_util_RLocale_OUTUCOUTUC_V,
  &Number_method_getNumber_D_LRNumber_,
  &Number_method_getNumber_J_LRNumber_,
  &Number_method_getNumber_DC_LRNumber_,
  &Number_method_getNumber_JC_LRNumber_,
  &Number_method_getSmallestTypeChar_J_C,
  &Number_method_getSmallestTypeChar_D_C,
  &Number_method_hashCode__I,
  &Number_method_intValue__I,
  &Number_method_longValue__J,
  &Number_method_parseFloatNumber_INLRString_INOUTZINOUTCINOUTIZ_D,
  &Number_method_parseFloatNumber_INLRString_INOUTZINOUTCINOUTIZINLacdk_util_RLocale__D,
  &Number_method_parseFloatNumber_INLRString_INOUTZINOUTCINOUTI_D,
  &Number_method_parseIntegerNumber_INLRString_IINOUTZINOUTCINOUTIZ_J,
  &Number_method_parseIntegerNumber_INLRString_IINOUTZINOUTCINOUTI_J,
  &Number_method_parseToIntegerNumber_INLRString_IZZ_LRNumber_,
  &Number_method_parseToIntegerNumber_INLRString_I_LRNumber_,
  &Number_method_parseToIntegerNumber_INLRString_IZ_LRNumber_,
  &Number_method_shortValue__S,
  0
};


struct Number_MetaInfoInitializer
{  Number_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Number::clazzInfo();
    ci->fields =  _Number_fields;
    ci->methods =  _Number_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Number_MetaInfoInitializer Number_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
NumberFormatException_create_array(int length)
{
  return new ObjectArrayImpl<RNumberFormatException>(length);
}

//static
::acdk::lang::RObject
NumberFormatException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class NumberFormatException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NumberFormatException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)NumberFormatException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NumberFormatException_method_NumberFormatException__LRNumberFormatException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NumberFormatException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NumberFormatException_method_NumberFormatException_INLRString__LRNumberFormatException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NumberFormatException(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
};


void ThrowException_NumberFormatException(IN(::acdk::lang::RThrowable) ex)
{
  throw RNumberFormatException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _NumberFormatException_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* NumberFormatException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NumberFormatException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NumberFormatException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  NumberFormatException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  NumberFormatException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  NumberFormatException_MetainfoWrapper::NumberFormatException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NumberFormatException_methods_NumberFormatException__LRNumberFormatException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NumberFormatException_methods_NumberFormatException__LRNumberFormatException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NumberFormatException_method_NumberFormatException__LRNumberFormatException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NumberFormatException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NumberFormatException::clazzInfo(), // return type
  "_0_NumberFormatException", // alternative name of method
  -1, // altlabelHashCode
  NumberFormatException_methods_NumberFormatException__LRNumberFormatException__args, // the arguments
  0, //arguments count
  NumberFormatException_methods_NumberFormatException__LRNumberFormatException__exceptions, // the declared exceptions
  NumberFormatException_MetainfoWrapper::NumberFormatException_method_NumberFormatException__LRNumberFormatException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NumberFormatException_methods_NumberFormatException_INLRString__LRNumberFormatException__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NumberFormatException_methods_NumberFormatException_INLRString__LRNumberFormatException__args[] = 
{
  &NumberFormatException_methods_NumberFormatException_INLRString__LRNumberFormatException__arg_what,
  0
};

::acdk::lang::dmi::ClazzInfo* NumberFormatException_methods_NumberFormatException_INLRString__LRNumberFormatException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NumberFormatException_method_NumberFormatException_INLRString__LRNumberFormatException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NumberFormatException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NumberFormatException::clazzInfo(), // return type
  "_1_NumberFormatException", // alternative name of method
  -1, // altlabelHashCode
  NumberFormatException_methods_NumberFormatException_INLRString__LRNumberFormatException__args, // the arguments
  0, //arguments count
  NumberFormatException_methods_NumberFormatException_INLRString__LRNumberFormatException__exceptions, // the declared exceptions
  NumberFormatException_MetainfoWrapper::NumberFormatException_method_NumberFormatException_INLRString__LRNumberFormatException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _NumberFormatException_methods[] = 
{
  &NumberFormatException_method_GetClass__L_acdk_lang_RClass_,
  &NumberFormatException_method_NumberFormatException__LRNumberFormatException_,
  &NumberFormatException_method_NumberFormatException_INLRString__LRNumberFormatException_,
  0
};


struct NumberFormatException_MetaInfoInitializer
{  NumberFormatException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = NumberFormatException::clazzInfo();
    ci->fields =  _NumberFormatException_fields;
    ci->methods =  _NumberFormatException_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
NumberFormatException_MetaInfoInitializer NumberFormatException_MetaInfoInitializer_staticinstance__;


struct NumberFormatException_clazzInfo_ClazzAttributesResInitializer34
{
  NumberFormatException_clazzInfo_ClazzAttributesResInitializer34()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)NumberFormatException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_NumberFormatException));
  }
};

NumberFormatException_clazzInfo_ClazzAttributesResInitializer34 NumberFormatException_clazzInfo_ClazzAttributesResInitializer34_instance;



} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
Object_create_array(int length)
{
  return new ObjectArrayImpl<RObject>(length);
}

//static
::acdk::lang::RObject
Object_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Object_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Object_method_GetClass__LRClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Object::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Object_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Object::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Object_method_Object__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Object();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Object_method_clone__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Object* This = dmi_cast<Object>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Object::clone();
    else
        ret = (::acdk::lang::RObject)This->clone();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Object_method_compareTo_INLRObject__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Object* This = dmi_cast<Object>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Object::compareTo(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->compareTo(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Object_method_create_instance__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Object::create_instance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Object_method_equals_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Object* This = dmi_cast<Object>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Object::equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Object_method_finalize__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Object* This = dmi_cast<Object>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Object::finalize();
    else
        This->finalize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Object_method_getClass__LRClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Object* This = dmi_cast<Object>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Object::getClass();
    else
        ret = (::acdk::lang::RObject)This->getClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Object_method_hashCode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Object* This = dmi_cast<Object>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Object::hashCode();
    else
      ret = This->hashCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Object_method_notify__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Object* This = dmi_cast<Object>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Object::notify();
    else
        This->notify();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Object_method_notifyAll__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Object* This = dmi_cast<Object>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Object::notifyAll();
    else
        This->notifyAll();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Object_method_serialized_clone_ZZ_LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Object* This = dmi_cast<Object>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Object::serialized_clone(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->serialized_clone(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Object_method_serialized_clone_Z_LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Object* This = dmi_cast<Object>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Object::serialized_clone(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->serialized_clone(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Object_method_serialized_equals_INLRObject_Z_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Object* This = dmi_cast<Object>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Object::serialized_equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    else
      ret = This->serialized_equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Object_method_serialized_hashCode_Z_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Object* This = dmi_cast<Object>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Object::serialized_hashCode(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
      ret = This->serialized_hashCode(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Object_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Object* This = dmi_cast<Object>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Object::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Object_method_wait_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Object* This = dmi_cast<Object>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Object::wait(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->wait(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Object_method_wait_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Object* This = dmi_cast<Object>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Object::wait(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->wait(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Object_method_wait__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Object* This = dmi_cast<Object>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Object::wait();
    else
        This->wait();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Object_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Object_methods_GetClass__LRClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Object_methods_GetClass__LRClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Object_method_GetClass__LRClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Object_methods_GetClass__LRClass__args, // the arguments
  0, //arguments count
  Object_methods_GetClass__LRClass__exceptions, // the declared exceptions
  Object_MetainfoWrapper::Object_method_GetClass__LRClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Object_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Object_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Object_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_j_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Object_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Object_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Object_MetainfoWrapper::Object_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Object_methods_Object__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Object_methods_Object__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Object_method_Object__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Object", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Object::clazzInfo(), // return type
  "_3_Object", // alternative name of method
  -1, // altlabelHashCode
  Object_methods_Object__LRObject__args, // the arguments
  0, //arguments count
  Object_methods_Object__LRObject__exceptions, // the declared exceptions
  Object_MetainfoWrapper::Object_method_Object__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Object_methods_clone__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Object_methods_clone__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Object_method_clone__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_4_clone", // alternative name of method
  -1, // altlabelHashCode
  Object_methods_clone__LRObject__args, // the arguments
  0, //arguments count
  Object_methods_clone__LRObject__exceptions, // the declared exceptions
  Object_MetainfoWrapper::Object_method_clone__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Object_methods_compareTo_INLRObject__I_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Object_methods_compareTo_INLRObject__I_args[] = 
{
  &Object_methods_compareTo_INLRObject__I_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* Object_methods_compareTo_INLRObject__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Object_method_compareTo_INLRObject__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "compareTo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_c_compareTo", // alternative name of method
  -1, // altlabelHashCode
  Object_methods_compareTo_INLRObject__I_args, // the arguments
  0, //arguments count
  Object_methods_compareTo_INLRObject__I_exceptions, // the declared exceptions
  Object_MetainfoWrapper::Object_method_compareTo_INLRObject__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Object_methods_create_instance__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Object_methods_create_instance__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Object_method_create_instance__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create_instance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_0_create_instance", // alternative name of method
  -1, // altlabelHashCode
  Object_methods_create_instance__LRObject__args, // the arguments
  0, //arguments count
  Object_methods_create_instance__LRObject__exceptions, // the declared exceptions
  Object_MetainfoWrapper::Object_method_create_instance__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Object_methods_equals_INLRObject__Z_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Object_methods_equals_INLRObject__Z_args[] = 
{
  &Object_methods_equals_INLRObject__Z_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* Object_methods_equals_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Object_method_equals_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_equals", // alternative name of method
  -1, // altlabelHashCode
  Object_methods_equals_INLRObject__Z_args, // the arguments
  0, //arguments count
  Object_methods_equals_INLRObject__Z_exceptions, // the declared exceptions
  Object_MetainfoWrapper::Object_method_equals_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Object_methods_finalize__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Object_methods_finalize__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Object_method_finalize__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "finalize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_finalize", // alternative name of method
  -1, // altlabelHashCode
  Object_methods_finalize__V_args, // the arguments
  0, //arguments count
  Object_methods_finalize__V_exceptions, // the declared exceptions
  Object_MetainfoWrapper::Object_method_finalize__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Object_methods_getClass__LRClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Object_methods_getClass__LRClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Object_method_getClass__LRClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(), // return type
  "_1_getClass", // alternative name of method
  -1, // altlabelHashCode
  Object_methods_getClass__LRClass__args, // the arguments
  0, //arguments count
  Object_methods_getClass__LRClass__exceptions, // the declared exceptions
  Object_MetainfoWrapper::Object_method_getClass__LRClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Object_methods_hashCode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Object_methods_hashCode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Object_method_hashCode__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hashCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_hashCode", // alternative name of method
  -1, // altlabelHashCode
  Object_methods_hashCode__I_args, // the arguments
  0, //arguments count
  Object_methods_hashCode__I_exceptions, // the declared exceptions
  Object_MetainfoWrapper::Object_method_hashCode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Object_methods_notify__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Object_methods_notify__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Object_method_notify__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiNoDmiProxy | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "notify", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_notify", // alternative name of method
  -1, // altlabelHashCode
  Object_methods_notify__V_args, // the arguments
  0, //arguments count
  Object_methods_notify__V_exceptions, // the declared exceptions
  Object_MetainfoWrapper::Object_method_notify__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Object_methods_notifyAll__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Object_methods_notifyAll__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Object_method_notifyAll__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiNoDmiProxy | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "notifyAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_notifyAll", // alternative name of method
  -1, // altlabelHashCode
  Object_methods_notifyAll__V_args, // the arguments
  0, //arguments count
  Object_methods_notifyAll__V_exceptions, // the declared exceptions
  Object_MetainfoWrapper::Object_method_notifyAll__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Object_methods_serialized_clone_ZZ_LRObject__arg_deep = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "deep", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Object_methods_serialized_clone_ZZ_LRObject__arg_deepserialized = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "deepserialized", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Object_methods_serialized_clone_ZZ_LRObject__args[] = 
{
  &Object_methods_serialized_clone_ZZ_LRObject__arg_deep,
  &Object_methods_serialized_clone_ZZ_LRObject__arg_deepserialized,
  0
};

::acdk::lang::dmi::ClazzInfo* Object_methods_serialized_clone_ZZ_LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Object_method_serialized_clone_ZZ_LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "serialized_clone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_7_serialized_clone", // alternative name of method
  -1, // altlabelHashCode
  Object_methods_serialized_clone_ZZ_LRObject__args, // the arguments
  0, //arguments count
  Object_methods_serialized_clone_ZZ_LRObject__exceptions, // the declared exceptions
  Object_MetainfoWrapper::Object_method_serialized_clone_ZZ_LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Object_methods_serialized_clone_Z_LRObject__arg_deep = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "deep", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Object_methods_serialized_clone_Z_LRObject__args[] = 
{
  &Object_methods_serialized_clone_Z_LRObject__arg_deep,
  0
};

::acdk::lang::dmi::ClazzInfo* Object_methods_serialized_clone_Z_LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Object_method_serialized_clone_Z_LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "serialized_clone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_8_serialized_clone", // alternative name of method
  -1, // altlabelHashCode
  Object_methods_serialized_clone_Z_LRObject__args, // the arguments
  0, //arguments count
  Object_methods_serialized_clone_Z_LRObject__exceptions, // the declared exceptions
  Object_MetainfoWrapper::Object_method_serialized_clone_Z_LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Object_methods_serialized_equals_INLRObject_Z_Z_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Object_methods_serialized_equals_INLRObject_Z_Z_arg_recursive_serialized = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "recursive_serialized", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Object_methods_serialized_equals_INLRObject_Z_Z_args[] = 
{
  &Object_methods_serialized_equals_INLRObject_Z_Z_arg_o,
  &Object_methods_serialized_equals_INLRObject_Z_Z_arg_recursive_serialized,
  0
};

::acdk::lang::dmi::ClazzInfo* Object_methods_serialized_equals_INLRObject_Z_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Object_method_serialized_equals_INLRObject_Z_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "serialized_equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_9_serialized_equals", // alternative name of method
  -1, // altlabelHashCode
  Object_methods_serialized_equals_INLRObject_Z_Z_args, // the arguments
  0, //arguments count
  Object_methods_serialized_equals_INLRObject_Z_Z_exceptions, // the declared exceptions
  Object_MetainfoWrapper::Object_method_serialized_equals_INLRObject_Z_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Object_methods_serialized_hashCode_Z_I_arg_recursive_serialized = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "recursive_serialized", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Object_methods_serialized_hashCode_Z_I_args[] = 
{
  &Object_methods_serialized_hashCode_Z_I_arg_recursive_serialized,
  0
};

::acdk::lang::dmi::ClazzInfo* Object_methods_serialized_hashCode_Z_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Object_method_serialized_hashCode_Z_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "serialized_hashCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_a_serialized_hashCode", // alternative name of method
  -1, // altlabelHashCode
  Object_methods_serialized_hashCode_Z_I_args, // the arguments
  0, //arguments count
  Object_methods_serialized_hashCode_Z_I_exceptions, // the declared exceptions
  Object_MetainfoWrapper::Object_method_serialized_hashCode_Z_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Object_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Object_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Object_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_b_toString", // alternative name of method
  -1, // altlabelHashCode
  Object_methods_toString__LRString__args, // the arguments
  0, //arguments count
  Object_methods_toString__LRString__exceptions, // the declared exceptions
  Object_MetainfoWrapper::Object_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Object_methods_wait_I_V_arg_timeoutms = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "timeoutms", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Object_methods_wait_I_V_args[] = 
{
  &Object_methods_wait_I_V_arg_timeoutms,
  0
};

::acdk::lang::dmi::ClazzInfo* Object_methods_wait_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Object_method_wait_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiNoDmiProxy | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "wait", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_i_wait", // alternative name of method
  -1, // altlabelHashCode
  Object_methods_wait_I_V_args, // the arguments
  0, //arguments count
  Object_methods_wait_I_V_exceptions, // the declared exceptions
  Object_MetainfoWrapper::Object_method_wait_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Object_methods_wait_II_V_arg_timeoutms = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "timeoutms", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Object_methods_wait_II_V_arg_timeoutus = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "timeoutus", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Object_methods_wait_II_V_args[] = 
{
  &Object_methods_wait_II_V_arg_timeoutms,
  &Object_methods_wait_II_V_arg_timeoutus,
  0
};

::acdk::lang::dmi::ClazzInfo* Object_methods_wait_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Object_method_wait_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiNoDmiProxy | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "wait", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_wait", // alternative name of method
  -1, // altlabelHashCode
  Object_methods_wait_II_V_args, // the arguments
  0, //arguments count
  Object_methods_wait_II_V_exceptions, // the declared exceptions
  Object_MetainfoWrapper::Object_method_wait_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Object_methods_wait__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Object_methods_wait__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Object_method_wait__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiNoDmiProxy | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "wait", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_h_wait", // alternative name of method
  -1, // altlabelHashCode
  Object_methods_wait__V_args, // the arguments
  0, //arguments count
  Object_methods_wait__V_exceptions, // the declared exceptions
  Object_MetainfoWrapper::Object_method_wait__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Object_methods[] = 
{
  &Object_method_GetClass__LRClass_,
  &Object_method_GetClass__L_acdk_lang_RClass_,
  &Object_method_Object__LRObject_,
  &Object_method_clone__LRObject_,
  &Object_method_compareTo_INLRObject__I,
  &Object_method_create_instance__LRObject_,
  &Object_method_equals_INLRObject__Z,
  &Object_method_finalize__V,
  &Object_method_getClass__LRClass_,
  &Object_method_hashCode__I,
  &Object_method_notify__V,
  &Object_method_notifyAll__V,
  &Object_method_serialized_clone_ZZ_LRObject_,
  &Object_method_serialized_clone_Z_LRObject_,
  &Object_method_serialized_equals_INLRObject_Z_Z,
  &Object_method_serialized_hashCode_Z_I,
  &Object_method_toString__LRString_,
  &Object_method_wait_I_V,
  &Object_method_wait_II_V,
  &Object_method_wait__V,
  0
};


struct Object_MetaInfoInitializer
{  Object_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Object::clazzInfo();
    ci->fields =  _Object_fields;
    ci->methods =  _Object_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Object_MetaInfoInitializer Object_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
ObjectArrayBaseImpl_create_array(int length)
{
  return new ObjectArrayImpl<RObjectArrayBaseImpl>(length);
}

//static
::acdk::lang::RObject
ObjectArrayBaseImpl_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ObjectArrayBaseImpl_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectArrayBaseImpl_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ObjectArrayBaseImpl::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectArrayBaseImpl_method_ObjectArrayBaseImpl_I_LRObjectArrayBaseImpl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ObjectArrayBaseImpl(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectArrayBaseImpl_method_ObjectArrayBaseImpl__LRObjectArrayBaseImpl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ObjectArrayBaseImpl();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectArrayBaseImpl_method_append_INLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectArrayBaseImpl* This = dmi_cast<ObjectArrayBaseImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ObjectArrayBaseImpl::append(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        This->append(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectArrayBaseImpl_method_asContainer_Z_Lacdk_util_RList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectArrayBaseImpl* This = dmi_cast<ObjectArrayBaseImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ObjectArrayBaseImpl::asContainer(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->asContainer(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectArrayBaseImpl_method_asContainer__Lacdk_util_RList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectArrayBaseImpl* This = dmi_cast<ObjectArrayBaseImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ObjectArrayBaseImpl::asContainer();
    else
        ret = (::acdk::lang::RObject)This->asContainer();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectArrayBaseImpl_method_back_element__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectArrayBaseImpl* This = dmi_cast<ObjectArrayBaseImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ObjectArrayBaseImpl::back_element();
    else
        ret = (::acdk::lang::RObject)This->back_element();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectArrayBaseImpl_method_capacity__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectArrayBaseImpl* This = dmi_cast<ObjectArrayBaseImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ObjectArrayBaseImpl::capacity();
    else
      ret = This->capacity();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectArrayBaseImpl_method_clone__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectArrayBaseImpl* This = dmi_cast<ObjectArrayBaseImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ObjectArrayBaseImpl::clone();
    else
        ret = (::acdk::lang::RObject)This->clone();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectArrayBaseImpl_method_concat_INLRObjectArrayBaseImpl__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectArrayBaseImpl* This = dmi_cast<ObjectArrayBaseImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ObjectArrayBaseImpl::concat(::acdk::lang::dmi::castTo< RObjectArrayBaseImpl>(args[0], dc));
    else
        This->concat(::acdk::lang::dmi::castTo< RObjectArrayBaseImpl>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectArrayBaseImpl_method_create_instance__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ObjectArrayBaseImpl::create_instance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectArrayBaseImpl_method_ensureCapacity_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectArrayBaseImpl* This = dmi_cast<ObjectArrayBaseImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ObjectArrayBaseImpl::ensureCapacity(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->ensureCapacity(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectArrayBaseImpl_method_equals_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectArrayBaseImpl* This = dmi_cast<ObjectArrayBaseImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ObjectArrayBaseImpl::equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectArrayBaseImpl_method_find_INLRObject__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectArrayBaseImpl* This = dmi_cast<ObjectArrayBaseImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ObjectArrayBaseImpl::find(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->find(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectArrayBaseImpl_method_findFirst_INLRObject__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectArrayBaseImpl* This = dmi_cast<ObjectArrayBaseImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ObjectArrayBaseImpl::findFirst(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->findFirst(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectArrayBaseImpl_method_findLast_INLRObject__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectArrayBaseImpl* This = dmi_cast<ObjectArrayBaseImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ObjectArrayBaseImpl::findLast(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->findLast(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectArrayBaseImpl_method_findSame_INLRObject__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectArrayBaseImpl* This = dmi_cast<ObjectArrayBaseImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ObjectArrayBaseImpl::findSame(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->findSame(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectArrayBaseImpl_method_front_element__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectArrayBaseImpl* This = dmi_cast<ObjectArrayBaseImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ObjectArrayBaseImpl::front_element();
    else
        ret = (::acdk::lang::RObject)This->front_element();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectArrayBaseImpl_method_getElement_I_LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectArrayBaseImpl* This = dmi_cast<ObjectArrayBaseImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ObjectArrayBaseImpl::getElement(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getElement(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectArrayBaseImpl_method_getElementRef_I_LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectArrayBaseImpl* This = dmi_cast<ObjectArrayBaseImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = outOf(This->ObjectArrayBaseImpl::getElementRef(::acdk::lang::dmi::castTo< int>(args[0], dc)));
    else
        ret = outOf(This->getElementRef(::acdk::lang::dmi::castTo< int>(args[0], dc)));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectArrayBaseImpl_method_hashCode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectArrayBaseImpl* This = dmi_cast<ObjectArrayBaseImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ObjectArrayBaseImpl::hashCode();
    else
      ret = This->hashCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectArrayBaseImpl_method_insert_IINLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectArrayBaseImpl* This = dmi_cast<ObjectArrayBaseImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ObjectArrayBaseImpl::insert(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    else
        This->insert(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectArrayBaseImpl_method_iterator__Lacdk_util_RIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectArrayBaseImpl* This = dmi_cast<ObjectArrayBaseImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ObjectArrayBaseImpl::iterator();
    else
        ret = (::acdk::lang::RObject)This->iterator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectArrayBaseImpl_method_length__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectArrayBaseImpl* This = dmi_cast<ObjectArrayBaseImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ObjectArrayBaseImpl::length();
    else
      ret = This->length();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectArrayBaseImpl_method_makeCapacity_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectArrayBaseImpl* This = dmi_cast<ObjectArrayBaseImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ObjectArrayBaseImpl::makeCapacity(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->makeCapacity(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectArrayBaseImpl_method_operator_bo_I_LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectArrayBaseImpl* This = dmi_cast<ObjectArrayBaseImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = outOf(This->ObjectArrayBaseImpl::operator_bo(::acdk::lang::dmi::castTo< int>(args[0], dc)));
    else
        ret = outOf(This->operator_bo(::acdk::lang::dmi::castTo< int>(args[0], dc)));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectArrayBaseImpl_method_operator_bo_bc_I_LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectArrayBaseImpl* This = dmi_cast<ObjectArrayBaseImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = outOf(This->ObjectArrayBaseImpl::operator[](::acdk::lang::dmi::castTo< int>(args[0], dc)));
    else
        ret = outOf(This->operator[](::acdk::lang::dmi::castTo< int>(args[0], dc)));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectArrayBaseImpl_method_peekElementBack_I_LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectArrayBaseImpl* This = dmi_cast<ObjectArrayBaseImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ObjectArrayBaseImpl::peekElementBack(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->peekElementBack(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectArrayBaseImpl_method_pop_back_element__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectArrayBaseImpl* This = dmi_cast<ObjectArrayBaseImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ObjectArrayBaseImpl::pop_back_element();
    else
        ret = (::acdk::lang::RObject)This->pop_back_element();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectArrayBaseImpl_method_pop_front_element__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectArrayBaseImpl* This = dmi_cast<ObjectArrayBaseImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ObjectArrayBaseImpl::pop_front_element();
    else
        ret = (::acdk::lang::RObject)This->pop_front_element();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectArrayBaseImpl_method_push_back_element_INLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectArrayBaseImpl* This = dmi_cast<ObjectArrayBaseImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ObjectArrayBaseImpl::push_back_element(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        This->push_back_element(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectArrayBaseImpl_method_push_front_element_INLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectArrayBaseImpl* This = dmi_cast<ObjectArrayBaseImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ObjectArrayBaseImpl::push_front_element(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        This->push_front_element(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectArrayBaseImpl_method_remove_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectArrayBaseImpl* This = dmi_cast<ObjectArrayBaseImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ObjectArrayBaseImpl::remove(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->remove(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectArrayBaseImpl_method_removeEqualElement_INLRObject__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectArrayBaseImpl* This = dmi_cast<ObjectArrayBaseImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ObjectArrayBaseImpl::removeEqualElement(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->removeEqualElement(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectArrayBaseImpl_method_removeSameElement_INLRObject__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectArrayBaseImpl* This = dmi_cast<ObjectArrayBaseImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ObjectArrayBaseImpl::removeSameElement(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->removeSameElement(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectArrayBaseImpl_method_resize_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectArrayBaseImpl* This = dmi_cast<ObjectArrayBaseImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ObjectArrayBaseImpl::resize(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->resize(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectArrayBaseImpl_method_setElement_IINLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectArrayBaseImpl* This = dmi_cast<ObjectArrayBaseImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ObjectArrayBaseImpl::setElement(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    else
        This->setElement(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectArrayBaseImpl_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectArrayBaseImpl* This = dmi_cast<ObjectArrayBaseImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ObjectArrayBaseImpl::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ObjectArrayBaseImpl_fields__length_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ObjectArrayBaseImpl* This = dmi_cast<ObjectArrayBaseImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_length, flags);
    else
      This->_length = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ObjectArrayBaseImpl_fields__length = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_length", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ObjectArrayBaseImpl_MetainfoWrapper::ObjectArrayBaseImpl_fields__length_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ObjectArrayBaseImpl_fields[] = 
{
  &ObjectArrayBaseImpl_fields__length,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectArrayBaseImpl_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectArrayBaseImpl_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectArrayBaseImpl_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_B_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ObjectArrayBaseImpl_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ObjectArrayBaseImpl_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ObjectArrayBaseImpl_MetainfoWrapper::ObjectArrayBaseImpl_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectArrayBaseImpl_methods_ObjectArrayBaseImpl_I_LRObjectArrayBaseImpl__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectArrayBaseImpl_methods_ObjectArrayBaseImpl_I_LRObjectArrayBaseImpl__args[] = 
{
  &ObjectArrayBaseImpl_methods_ObjectArrayBaseImpl_I_LRObjectArrayBaseImpl__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectArrayBaseImpl_methods_ObjectArrayBaseImpl_I_LRObjectArrayBaseImpl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectArrayBaseImpl_method_ObjectArrayBaseImpl_I_LRObjectArrayBaseImpl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ObjectArrayBaseImpl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ObjectArrayBaseImpl::clazzInfo(), // return type
  "_0_ObjectArrayBaseImpl", // alternative name of method
  -1, // altlabelHashCode
  ObjectArrayBaseImpl_methods_ObjectArrayBaseImpl_I_LRObjectArrayBaseImpl__args, // the arguments
  0, //arguments count
  ObjectArrayBaseImpl_methods_ObjectArrayBaseImpl_I_LRObjectArrayBaseImpl__exceptions, // the declared exceptions
  ObjectArrayBaseImpl::dmiConstructor, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectArrayBaseImpl_methods_ObjectArrayBaseImpl__LRObjectArrayBaseImpl__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectArrayBaseImpl_methods_ObjectArrayBaseImpl__LRObjectArrayBaseImpl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectArrayBaseImpl_method_ObjectArrayBaseImpl__LRObjectArrayBaseImpl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ObjectArrayBaseImpl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ObjectArrayBaseImpl::clazzInfo(), // return type
  "_1_ObjectArrayBaseImpl", // alternative name of method
  -1, // altlabelHashCode
  ObjectArrayBaseImpl_methods_ObjectArrayBaseImpl__LRObjectArrayBaseImpl__args, // the arguments
  0, //arguments count
  ObjectArrayBaseImpl_methods_ObjectArrayBaseImpl__LRObjectArrayBaseImpl__exceptions, // the declared exceptions
  ObjectArrayBaseImpl::dmiConstructor, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectArrayBaseImpl_methods_append_INLRObject__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectArrayBaseImpl_methods_append_INLRObject__V_args[] = 
{
  &ObjectArrayBaseImpl_methods_append_INLRObject__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectArrayBaseImpl_methods_append_INLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectArrayBaseImpl_method_append_INLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "append", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_append", // alternative name of method
  -1, // altlabelHashCode
  ObjectArrayBaseImpl_methods_append_INLRObject__V_args, // the arguments
  0, //arguments count
  ObjectArrayBaseImpl_methods_append_INLRObject__V_exceptions, // the declared exceptions
  ObjectArrayBaseImpl_MetainfoWrapper::ObjectArrayBaseImpl_method_append_INLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectArrayBaseImpl_methods_asContainer_Z_Lacdk_util_RList__arg_copy = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "copy", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectArrayBaseImpl_methods_asContainer_Z_Lacdk_util_RList__args[] = 
{
  &ObjectArrayBaseImpl_methods_asContainer_Z_Lacdk_util_RList__arg_copy,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectArrayBaseImpl_methods_asContainer_Z_Lacdk_util_RList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectArrayBaseImpl_method_asContainer_Z_Lacdk_util_RList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "asContainer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RList::clazzInfo(), // return type
  "_k_asContainer", // alternative name of method
  -1, // altlabelHashCode
  ObjectArrayBaseImpl_methods_asContainer_Z_Lacdk_util_RList__args, // the arguments
  0, //arguments count
  ObjectArrayBaseImpl_methods_asContainer_Z_Lacdk_util_RList__exceptions, // the declared exceptions
  ObjectArrayBaseImpl_MetainfoWrapper::ObjectArrayBaseImpl_method_asContainer_Z_Lacdk_util_RList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectArrayBaseImpl_methods_asContainer__Lacdk_util_RList__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectArrayBaseImpl_methods_asContainer__Lacdk_util_RList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectArrayBaseImpl_method_asContainer__Lacdk_util_RList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "asContainer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RList::clazzInfo(), // return type
  "_l_asContainer", // alternative name of method
  -1, // altlabelHashCode
  ObjectArrayBaseImpl_methods_asContainer__Lacdk_util_RList__args, // the arguments
  0, //arguments count
  ObjectArrayBaseImpl_methods_asContainer__Lacdk_util_RList__exceptions, // the declared exceptions
  ObjectArrayBaseImpl_MetainfoWrapper::ObjectArrayBaseImpl_method_asContainer__Lacdk_util_RList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectArrayBaseImpl_methods_back_element__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectArrayBaseImpl_methods_back_element__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectArrayBaseImpl_method_back_element__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiIn | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "back_element", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "back", // alternative name of method
  -1, // altlabelHashCode
  ObjectArrayBaseImpl_methods_back_element__LRObject__args, // the arguments
  0, //arguments count
  ObjectArrayBaseImpl_methods_back_element__LRObject__exceptions, // the declared exceptions
  ObjectArrayBaseImpl_MetainfoWrapper::ObjectArrayBaseImpl_method_back_element__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectArrayBaseImpl_methods_capacity__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectArrayBaseImpl_methods_capacity__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectArrayBaseImpl_method_capacity__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "capacity", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_m_capacity", // alternative name of method
  -1, // altlabelHashCode
  ObjectArrayBaseImpl_methods_capacity__I_args, // the arguments
  0, //arguments count
  ObjectArrayBaseImpl_methods_capacity__I_exceptions, // the declared exceptions
  ObjectArrayBaseImpl_MetainfoWrapper::ObjectArrayBaseImpl_method_capacity__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectArrayBaseImpl_methods_clone__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectArrayBaseImpl_methods_clone__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectArrayBaseImpl_method_clone__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_t_clone", // alternative name of method
  -1, // altlabelHashCode
  ObjectArrayBaseImpl_methods_clone__LRObject__args, // the arguments
  0, //arguments count
  ObjectArrayBaseImpl_methods_clone__LRObject__exceptions, // the declared exceptions
  ObjectArrayBaseImpl_MetainfoWrapper::ObjectArrayBaseImpl_method_clone__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectArrayBaseImpl_methods_concat_INLRObjectArrayBaseImpl__V_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArrayBaseImpl::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectArrayBaseImpl_methods_concat_INLRObjectArrayBaseImpl__V_args[] = 
{
  &ObjectArrayBaseImpl_methods_concat_INLRObjectArrayBaseImpl__V_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectArrayBaseImpl_methods_concat_INLRObjectArrayBaseImpl__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectArrayBaseImpl_method_concat_INLRObjectArrayBaseImpl__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "concat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_concat", // alternative name of method
  -1, // altlabelHashCode
  ObjectArrayBaseImpl_methods_concat_INLRObjectArrayBaseImpl__V_args, // the arguments
  0, //arguments count
  ObjectArrayBaseImpl_methods_concat_INLRObjectArrayBaseImpl__V_exceptions, // the declared exceptions
  ObjectArrayBaseImpl_MetainfoWrapper::ObjectArrayBaseImpl_method_concat_INLRObjectArrayBaseImpl__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectArrayBaseImpl_methods_create_instance__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectArrayBaseImpl_methods_create_instance__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectArrayBaseImpl_method_create_instance__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create_instance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_2_create_instance", // alternative name of method
  -1, // altlabelHashCode
  ObjectArrayBaseImpl_methods_create_instance__LRObject__args, // the arguments
  0, //arguments count
  ObjectArrayBaseImpl_methods_create_instance__LRObject__exceptions, // the declared exceptions
  ObjectArrayBaseImpl_MetainfoWrapper::ObjectArrayBaseImpl_method_create_instance__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectArrayBaseImpl_methods_ensureCapacity_I_V_arg_newsize = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "newsize", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectArrayBaseImpl_methods_ensureCapacity_I_V_args[] = 
{
  &ObjectArrayBaseImpl_methods_ensureCapacity_I_V_arg_newsize,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectArrayBaseImpl_methods_ensureCapacity_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectArrayBaseImpl_method_ensureCapacity_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ensureCapacity", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_n_ensureCapacity", // alternative name of method
  -1, // altlabelHashCode
  ObjectArrayBaseImpl_methods_ensureCapacity_I_V_args, // the arguments
  0, //arguments count
  ObjectArrayBaseImpl_methods_ensureCapacity_I_V_exceptions, // the declared exceptions
  ObjectArrayBaseImpl_MetainfoWrapper::ObjectArrayBaseImpl_method_ensureCapacity_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectArrayBaseImpl_methods_equals_INLRObject__Z_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectArrayBaseImpl_methods_equals_INLRObject__Z_args[] = 
{
  &ObjectArrayBaseImpl_methods_equals_INLRObject__Z_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectArrayBaseImpl_methods_equals_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectArrayBaseImpl_method_equals_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_q_equals", // alternative name of method
  -1, // altlabelHashCode
  ObjectArrayBaseImpl_methods_equals_INLRObject__Z_args, // the arguments
  0, //arguments count
  ObjectArrayBaseImpl_methods_equals_INLRObject__Z_exceptions, // the declared exceptions
  ObjectArrayBaseImpl_MetainfoWrapper::ObjectArrayBaseImpl_method_equals_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectArrayBaseImpl_methods_find_INLRObject__I_arg_el = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "el", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectArrayBaseImpl_methods_find_INLRObject__I_args[] = 
{
  &ObjectArrayBaseImpl_methods_find_INLRObject__I_arg_el,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectArrayBaseImpl_methods_find_INLRObject__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectArrayBaseImpl_method_find_INLRObject__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "find", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_d_find", // alternative name of method
  -1, // altlabelHashCode
  ObjectArrayBaseImpl_methods_find_INLRObject__I_args, // the arguments
  0, //arguments count
  ObjectArrayBaseImpl_methods_find_INLRObject__I_exceptions, // the declared exceptions
  ObjectArrayBaseImpl_MetainfoWrapper::ObjectArrayBaseImpl_method_find_INLRObject__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectArrayBaseImpl_methods_findFirst_INLRObject__I_arg_el = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "el", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectArrayBaseImpl_methods_findFirst_INLRObject__I_args[] = 
{
  &ObjectArrayBaseImpl_methods_findFirst_INLRObject__I_arg_el,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectArrayBaseImpl_methods_findFirst_INLRObject__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectArrayBaseImpl_method_findFirst_INLRObject__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findFirst", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_e_findFirst", // alternative name of method
  -1, // altlabelHashCode
  ObjectArrayBaseImpl_methods_findFirst_INLRObject__I_args, // the arguments
  0, //arguments count
  ObjectArrayBaseImpl_methods_findFirst_INLRObject__I_exceptions, // the declared exceptions
  ObjectArrayBaseImpl_MetainfoWrapper::ObjectArrayBaseImpl_method_findFirst_INLRObject__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectArrayBaseImpl_methods_findLast_INLRObject__I_arg_el = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "el", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectArrayBaseImpl_methods_findLast_INLRObject__I_args[] = 
{
  &ObjectArrayBaseImpl_methods_findLast_INLRObject__I_arg_el,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectArrayBaseImpl_methods_findLast_INLRObject__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectArrayBaseImpl_method_findLast_INLRObject__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findLast", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_f_findLast", // alternative name of method
  -1, // altlabelHashCode
  ObjectArrayBaseImpl_methods_findLast_INLRObject__I_args, // the arguments
  0, //arguments count
  ObjectArrayBaseImpl_methods_findLast_INLRObject__I_exceptions, // the declared exceptions
  ObjectArrayBaseImpl_MetainfoWrapper::ObjectArrayBaseImpl_method_findLast_INLRObject__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectArrayBaseImpl_methods_findSame_INLRObject__I_arg_el = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "el", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectArrayBaseImpl_methods_findSame_INLRObject__I_args[] = 
{
  &ObjectArrayBaseImpl_methods_findSame_INLRObject__I_arg_el,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectArrayBaseImpl_methods_findSame_INLRObject__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectArrayBaseImpl_method_findSame_INLRObject__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findSame", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_g_findSame", // alternative name of method
  -1, // altlabelHashCode
  ObjectArrayBaseImpl_methods_findSame_INLRObject__I_args, // the arguments
  0, //arguments count
  ObjectArrayBaseImpl_methods_findSame_INLRObject__I_exceptions, // the declared exceptions
  ObjectArrayBaseImpl_MetainfoWrapper::ObjectArrayBaseImpl_method_findSame_INLRObject__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectArrayBaseImpl_methods_front_element__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectArrayBaseImpl_methods_front_element__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectArrayBaseImpl_method_front_element__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiIn | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "front_element", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "front", // alternative name of method
  -1, // altlabelHashCode
  ObjectArrayBaseImpl_methods_front_element__LRObject__args, // the arguments
  0, //arguments count
  ObjectArrayBaseImpl_methods_front_element__LRObject__exceptions, // the declared exceptions
  ObjectArrayBaseImpl_MetainfoWrapper::ObjectArrayBaseImpl_method_front_element__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectArrayBaseImpl_methods_getElement_I_LRObject__arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectArrayBaseImpl_methods_getElement_I_LRObject__args[] = 
{
  &ObjectArrayBaseImpl_methods_getElement_I_LRObject__arg_idx,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectArrayBaseImpl_methods_getElement_I_LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectArrayBaseImpl_method_getElement_I_LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiIn | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getElement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "get", // alternative name of method
  -1, // altlabelHashCode
  ObjectArrayBaseImpl_methods_getElement_I_LRObject__args, // the arguments
  0, //arguments count
  ObjectArrayBaseImpl_methods_getElement_I_LRObject__exceptions, // the declared exceptions
  ObjectArrayBaseImpl_MetainfoWrapper::ObjectArrayBaseImpl_method_getElement_I_LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectArrayBaseImpl_methods_getElementRef_I_LRObject__arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectArrayBaseImpl_methods_getElementRef_I_LRObject__args[] = 
{
  &ObjectArrayBaseImpl_methods_getElementRef_I_LRObject__arg_idx,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectArrayBaseImpl_methods_getElementRef_I_LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectArrayBaseImpl_method_getElementRef_I_LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOut | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getElementRef", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "getref", // alternative name of method
  -1, // altlabelHashCode
  ObjectArrayBaseImpl_methods_getElementRef_I_LRObject__args, // the arguments
  0, //arguments count
  ObjectArrayBaseImpl_methods_getElementRef_I_LRObject__exceptions, // the declared exceptions
  ObjectArrayBaseImpl_MetainfoWrapper::ObjectArrayBaseImpl_method_getElementRef_I_LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectArrayBaseImpl_methods_hashCode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectArrayBaseImpl_methods_hashCode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectArrayBaseImpl_method_hashCode__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hashCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_p_hashCode", // alternative name of method
  -1, // altlabelHashCode
  ObjectArrayBaseImpl_methods_hashCode__I_args, // the arguments
  0, //arguments count
  ObjectArrayBaseImpl_methods_hashCode__I_exceptions, // the declared exceptions
  ObjectArrayBaseImpl_MetainfoWrapper::ObjectArrayBaseImpl_method_hashCode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectArrayBaseImpl_methods_insert_IINLRObject__V_arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectArrayBaseImpl_methods_insert_IINLRObject__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectArrayBaseImpl_methods_insert_IINLRObject__V_args[] = 
{
  &ObjectArrayBaseImpl_methods_insert_IINLRObject__V_arg_idx,
  &ObjectArrayBaseImpl_methods_insert_IINLRObject__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectArrayBaseImpl_methods_insert_IINLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectArrayBaseImpl_method_insert_IINLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insert", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_insert", // alternative name of method
  -1, // altlabelHashCode
  ObjectArrayBaseImpl_methods_insert_IINLRObject__V_args, // the arguments
  0, //arguments count
  ObjectArrayBaseImpl_methods_insert_IINLRObject__V_exceptions, // the declared exceptions
  ObjectArrayBaseImpl_MetainfoWrapper::ObjectArrayBaseImpl_method_insert_IINLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectArrayBaseImpl_methods_iterator__Lacdk_util_RIterator__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectArrayBaseImpl_methods_iterator__Lacdk_util_RIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectArrayBaseImpl_method_iterator__Lacdk_util_RIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "iterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RIterator::clazzInfo(), // return type
  "_j_iterator", // alternative name of method
  -1, // altlabelHashCode
  ObjectArrayBaseImpl_methods_iterator__Lacdk_util_RIterator__args, // the arguments
  0, //arguments count
  ObjectArrayBaseImpl_methods_iterator__Lacdk_util_RIterator__exceptions, // the declared exceptions
  ObjectArrayBaseImpl_MetainfoWrapper::ObjectArrayBaseImpl_method_iterator__Lacdk_util_RIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectArrayBaseImpl_methods_length__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectArrayBaseImpl_methods_length__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectArrayBaseImpl_method_length__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "length", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3_length", // alternative name of method
  -1, // altlabelHashCode
  ObjectArrayBaseImpl_methods_length__I_args, // the arguments
  0, //arguments count
  ObjectArrayBaseImpl_methods_length__I_exceptions, // the declared exceptions
  ObjectArrayBaseImpl_MetainfoWrapper::ObjectArrayBaseImpl_method_length__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectArrayBaseImpl_methods_makeCapacity_I_V_arg_newsize = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "newsize", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectArrayBaseImpl_methods_makeCapacity_I_V_args[] = 
{
  &ObjectArrayBaseImpl_methods_makeCapacity_I_V_arg_newsize,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectArrayBaseImpl_methods_makeCapacity_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectArrayBaseImpl_method_makeCapacity_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "makeCapacity", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_o_makeCapacity", // alternative name of method
  -1, // altlabelHashCode
  ObjectArrayBaseImpl_methods_makeCapacity_I_V_args, // the arguments
  0, //arguments count
  ObjectArrayBaseImpl_methods_makeCapacity_I_V_exceptions, // the declared exceptions
  ObjectArrayBaseImpl_MetainfoWrapper::ObjectArrayBaseImpl_method_makeCapacity_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectArrayBaseImpl_methods_operator_bo_I_LRObject__arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectArrayBaseImpl_methods_operator_bo_I_LRObject__args[] = 
{
  &ObjectArrayBaseImpl_methods_operator_bo_I_LRObject__arg_idx,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectArrayBaseImpl_methods_operator_bo_I_LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectArrayBaseImpl_method_operator_bo_I_LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOut | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_bo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_9_operator_bo", // alternative name of method
  -1, // altlabelHashCode
  ObjectArrayBaseImpl_methods_operator_bo_I_LRObject__args, // the arguments
  0, //arguments count
  ObjectArrayBaseImpl_methods_operator_bo_I_LRObject__exceptions, // the declared exceptions
  ObjectArrayBaseImpl_MetainfoWrapper::ObjectArrayBaseImpl_method_operator_bo_I_LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectArrayBaseImpl_methods_operator_bo_bc_I_LRObject__arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectArrayBaseImpl_methods_operator_bo_bc_I_LRObject__args[] = 
{
  &ObjectArrayBaseImpl_methods_operator_bo_bc_I_LRObject__arg_idx,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectArrayBaseImpl_methods_operator_bo_bc_I_LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectArrayBaseImpl_method_operator_bo_bc_I_LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOut | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_bo_bc", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_6_operator_bo_bc", // alternative name of method
  -1, // altlabelHashCode
  ObjectArrayBaseImpl_methods_operator_bo_bc_I_LRObject__args, // the arguments
  0, //arguments count
  ObjectArrayBaseImpl_methods_operator_bo_bc_I_LRObject__exceptions, // the declared exceptions
  ObjectArrayBaseImpl_MetainfoWrapper::ObjectArrayBaseImpl_method_operator_bo_bc_I_LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectArrayBaseImpl_methods_peekElementBack_I_LRObject__arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectArrayBaseImpl_methods_peekElementBack_I_LRObject__args[] = 
{
  &ObjectArrayBaseImpl_methods_peekElementBack_I_LRObject__arg_idx,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectArrayBaseImpl_methods_peekElementBack_I_LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectArrayBaseImpl_method_peekElementBack_I_LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiIn | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "peekElementBack", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "peekBack", // alternative name of method
  -1, // altlabelHashCode
  ObjectArrayBaseImpl_methods_peekElementBack_I_LRObject__args, // the arguments
  0, //arguments count
  ObjectArrayBaseImpl_methods_peekElementBack_I_LRObject__exceptions, // the declared exceptions
  ObjectArrayBaseImpl_MetainfoWrapper::ObjectArrayBaseImpl_method_peekElementBack_I_LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectArrayBaseImpl_methods_pop_back_element__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectArrayBaseImpl_methods_pop_back_element__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectArrayBaseImpl_method_pop_back_element__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "pop_back_element", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "popBack", // alternative name of method
  -1, // altlabelHashCode
  ObjectArrayBaseImpl_methods_pop_back_element__LRObject__args, // the arguments
  0, //arguments count
  ObjectArrayBaseImpl_methods_pop_back_element__LRObject__exceptions, // the declared exceptions
  ObjectArrayBaseImpl_MetainfoWrapper::ObjectArrayBaseImpl_method_pop_back_element__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectArrayBaseImpl_methods_pop_front_element__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectArrayBaseImpl_methods_pop_front_element__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectArrayBaseImpl_method_pop_front_element__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "pop_front_element", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "popFront", // alternative name of method
  -1, // altlabelHashCode
  ObjectArrayBaseImpl_methods_pop_front_element__LRObject__args, // the arguments
  0, //arguments count
  ObjectArrayBaseImpl_methods_pop_front_element__LRObject__exceptions, // the declared exceptions
  ObjectArrayBaseImpl_MetainfoWrapper::ObjectArrayBaseImpl_method_pop_front_element__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectArrayBaseImpl_methods_push_back_element_INLRObject__V_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectArrayBaseImpl_methods_push_back_element_INLRObject__V_args[] = 
{
  &ObjectArrayBaseImpl_methods_push_back_element_INLRObject__V_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectArrayBaseImpl_methods_push_back_element_INLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectArrayBaseImpl_method_push_back_element_INLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "push_back_element", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "pushBack", // alternative name of method
  -1, // altlabelHashCode
  ObjectArrayBaseImpl_methods_push_back_element_INLRObject__V_args, // the arguments
  0, //arguments count
  ObjectArrayBaseImpl_methods_push_back_element_INLRObject__V_exceptions, // the declared exceptions
  ObjectArrayBaseImpl_MetainfoWrapper::ObjectArrayBaseImpl_method_push_back_element_INLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectArrayBaseImpl_methods_push_front_element_INLRObject__V_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectArrayBaseImpl_methods_push_front_element_INLRObject__V_args[] = 
{
  &ObjectArrayBaseImpl_methods_push_front_element_INLRObject__V_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectArrayBaseImpl_methods_push_front_element_INLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectArrayBaseImpl_method_push_front_element_INLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "push_front_element", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "pushFront", // alternative name of method
  -1, // altlabelHashCode
  ObjectArrayBaseImpl_methods_push_front_element_INLRObject__V_args, // the arguments
  0, //arguments count
  ObjectArrayBaseImpl_methods_push_front_element_INLRObject__V_exceptions, // the declared exceptions
  ObjectArrayBaseImpl_MetainfoWrapper::ObjectArrayBaseImpl_method_push_front_element_INLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectArrayBaseImpl_methods_remove_I_V_arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectArrayBaseImpl_methods_remove_I_V_args[] = 
{
  &ObjectArrayBaseImpl_methods_remove_I_V_arg_idx,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectArrayBaseImpl_methods_remove_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectArrayBaseImpl_method_remove_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "remove", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_remove", // alternative name of method
  -1, // altlabelHashCode
  ObjectArrayBaseImpl_methods_remove_I_V_args, // the arguments
  0, //arguments count
  ObjectArrayBaseImpl_methods_remove_I_V_exceptions, // the declared exceptions
  ObjectArrayBaseImpl_MetainfoWrapper::ObjectArrayBaseImpl_method_remove_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectArrayBaseImpl_methods_removeEqualElement_INLRObject__LRObject__arg_el = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "el", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectArrayBaseImpl_methods_removeEqualElement_INLRObject__LRObject__args[] = 
{
  &ObjectArrayBaseImpl_methods_removeEqualElement_INLRObject__LRObject__arg_el,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectArrayBaseImpl_methods_removeEqualElement_INLRObject__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectArrayBaseImpl_method_removeEqualElement_INLRObject__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "removeEqualElement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_h_removeEqualElement", // alternative name of method
  -1, // altlabelHashCode
  ObjectArrayBaseImpl_methods_removeEqualElement_INLRObject__LRObject__args, // the arguments
  0, //arguments count
  ObjectArrayBaseImpl_methods_removeEqualElement_INLRObject__LRObject__exceptions, // the declared exceptions
  ObjectArrayBaseImpl_MetainfoWrapper::ObjectArrayBaseImpl_method_removeEqualElement_INLRObject__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectArrayBaseImpl_methods_removeSameElement_INLRObject__LRObject__arg_el = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "el", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectArrayBaseImpl_methods_removeSameElement_INLRObject__LRObject__args[] = 
{
  &ObjectArrayBaseImpl_methods_removeSameElement_INLRObject__LRObject__arg_el,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectArrayBaseImpl_methods_removeSameElement_INLRObject__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectArrayBaseImpl_method_removeSameElement_INLRObject__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "removeSameElement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_i_removeSameElement", // alternative name of method
  -1, // altlabelHashCode
  ObjectArrayBaseImpl_methods_removeSameElement_INLRObject__LRObject__args, // the arguments
  0, //arguments count
  ObjectArrayBaseImpl_methods_removeSameElement_INLRObject__LRObject__exceptions, // the declared exceptions
  ObjectArrayBaseImpl_MetainfoWrapper::ObjectArrayBaseImpl_method_removeSameElement_INLRObject__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectArrayBaseImpl_methods_resize_I_V_arg_newSize = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "newSize", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectArrayBaseImpl_methods_resize_I_V_args[] = 
{
  &ObjectArrayBaseImpl_methods_resize_I_V_arg_newSize,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectArrayBaseImpl_methods_resize_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectArrayBaseImpl_method_resize_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "resize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_r_resize", // alternative name of method
  -1, // altlabelHashCode
  ObjectArrayBaseImpl_methods_resize_I_V_args, // the arguments
  0, //arguments count
  ObjectArrayBaseImpl_methods_resize_I_V_exceptions, // the declared exceptions
  ObjectArrayBaseImpl_MetainfoWrapper::ObjectArrayBaseImpl_method_resize_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectArrayBaseImpl_methods_setElement_IINLRObject__V_arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectArrayBaseImpl_methods_setElement_IINLRObject__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectArrayBaseImpl_methods_setElement_IINLRObject__V_args[] = 
{
  &ObjectArrayBaseImpl_methods_setElement_IINLRObject__V_arg_idx,
  &ObjectArrayBaseImpl_methods_setElement_IINLRObject__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectArrayBaseImpl_methods_setElement_IINLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectArrayBaseImpl_method_setElement_IINLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setElement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "set", // alternative name of method
  -1, // altlabelHashCode
  ObjectArrayBaseImpl_methods_setElement_IINLRObject__V_args, // the arguments
  0, //arguments count
  ObjectArrayBaseImpl_methods_setElement_IINLRObject__V_exceptions, // the declared exceptions
  ObjectArrayBaseImpl_MetainfoWrapper::ObjectArrayBaseImpl_method_setElement_IINLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectArrayBaseImpl_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectArrayBaseImpl_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectArrayBaseImpl_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_s_toString", // alternative name of method
  -1, // altlabelHashCode
  ObjectArrayBaseImpl_methods_toString__LRString__args, // the arguments
  0, //arguments count
  ObjectArrayBaseImpl_methods_toString__LRString__exceptions, // the declared exceptions
  ObjectArrayBaseImpl_MetainfoWrapper::ObjectArrayBaseImpl_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ObjectArrayBaseImpl_methods[] = 
{
  &ObjectArrayBaseImpl_method_GetClass__L_acdk_lang_RClass_,
  &ObjectArrayBaseImpl_method_ObjectArrayBaseImpl_I_LRObjectArrayBaseImpl_,
  &ObjectArrayBaseImpl_method_ObjectArrayBaseImpl__LRObjectArrayBaseImpl_,
  &ObjectArrayBaseImpl_method_append_INLRObject__V,
  &ObjectArrayBaseImpl_method_asContainer_Z_Lacdk_util_RList_,
  &ObjectArrayBaseImpl_method_asContainer__Lacdk_util_RList_,
  &ObjectArrayBaseImpl_method_back_element__LRObject_,
  &ObjectArrayBaseImpl_method_capacity__I,
  &ObjectArrayBaseImpl_method_clone__LRObject_,
  &ObjectArrayBaseImpl_method_concat_INLRObjectArrayBaseImpl__V,
  &ObjectArrayBaseImpl_method_create_instance__LRObject_,
  &ObjectArrayBaseImpl_method_ensureCapacity_I_V,
  &ObjectArrayBaseImpl_method_equals_INLRObject__Z,
  &ObjectArrayBaseImpl_method_find_INLRObject__I,
  &ObjectArrayBaseImpl_method_findFirst_INLRObject__I,
  &ObjectArrayBaseImpl_method_findLast_INLRObject__I,
  &ObjectArrayBaseImpl_method_findSame_INLRObject__I,
  &ObjectArrayBaseImpl_method_front_element__LRObject_,
  &ObjectArrayBaseImpl_method_getElement_I_LRObject_,
  &ObjectArrayBaseImpl_method_getElementRef_I_LRObject_,
  &ObjectArrayBaseImpl_method_hashCode__I,
  &ObjectArrayBaseImpl_method_insert_IINLRObject__V,
  &ObjectArrayBaseImpl_method_iterator__Lacdk_util_RIterator_,
  &ObjectArrayBaseImpl_method_length__I,
  &ObjectArrayBaseImpl_method_makeCapacity_I_V,
  &ObjectArrayBaseImpl_method_operator_bo_I_LRObject_,
  &ObjectArrayBaseImpl_method_operator_bo_bc_I_LRObject_,
  &ObjectArrayBaseImpl_method_peekElementBack_I_LRObject_,
  &ObjectArrayBaseImpl_method_pop_back_element__LRObject_,
  &ObjectArrayBaseImpl_method_pop_front_element__LRObject_,
  &ObjectArrayBaseImpl_method_push_back_element_INLRObject__V,
  &ObjectArrayBaseImpl_method_push_front_element_INLRObject__V,
  &ObjectArrayBaseImpl_method_remove_I_V,
  &ObjectArrayBaseImpl_method_removeEqualElement_INLRObject__LRObject_,
  &ObjectArrayBaseImpl_method_removeSameElement_INLRObject__LRObject_,
  &ObjectArrayBaseImpl_method_resize_I_V,
  &ObjectArrayBaseImpl_method_setElement_IINLRObject__V,
  &ObjectArrayBaseImpl_method_toString__LRString_,
  0
};


struct ObjectArrayBaseImpl_MetaInfoInitializer
{  ObjectArrayBaseImpl_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ObjectArrayBaseImpl::clazzInfo();
    ci->fields =  _ObjectArrayBaseImpl_fields;
    ci->methods =  _ObjectArrayBaseImpl_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ObjectArrayBaseImpl_MetaInfoInitializer ObjectArrayBaseImpl_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang

