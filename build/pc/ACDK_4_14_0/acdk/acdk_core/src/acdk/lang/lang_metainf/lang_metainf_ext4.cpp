// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../lang.h"
#include "../ArithmeticException.h"
#include "../ArrayIndexOutOfBoundsException.h"
#include "../BasicArray.h"
#include "../BasicArrayInl.h"
#include "../Boolean.h"
#include "../Byte.h"
#include "../ByteBuffer.h"
#include "../Character.h"
#include "../Class.h"
#include "../ClassCastException.h"
#include "../ClassLoader.h"
#include "../ClassNotFoundException.h"
#include "../Cloneable.h"
#include "../CloneNotSupportedException.h"
#include "../CmdLineOption.h"
#include "../CmdLineParseException.h"
#include "../CmdLineParser.h"
#include "../Comparable.h"
#include "../DmiException.h"
#include "../DmiTypeConversionException.h"
#include "../Double.h"
#include "../Error.h"
#include "../Exception.h"
#include "../ExceptionDeclarations.h"
#include "../ExtObject.h"
#include "../Float.h"
#include "../IllegalAccessException.h"
#include "../IllegalArgumentException.h"
#include "../IllegalMonitorStateException.h"
#include "../IllegalStateException.h"
#include "../IllegalThreadStateException.h"
#include "../IndexOutOfBoundsException.h"
#include "../InOutPreDeclaration.h"
#include "../InstantiationException.h"
#include "../Integer.h"
#include "../InterfaceBase.h"
#include "../InterruptedException.h"
#include "../lang.h"
#include "../lang_all.h"
#include "../Long.h"
#include "../Math.h"
#include "../NoSuchDmiElementException.h"
#include "../NoSuchElementException.h"
#include "../NoSuchFieldException.h"
#include "../NoSuchMethodException.h"
#include "../NullPointerException.h"
#include "../Number.h"
#include "../NumberFormatException.h"
#include "../Object.h"
#include "../ObjectArrayBase.h"
#include "../ObjectArrayBaseInl.h"
#include "../ObjectArrayImpl.h"
#include "../ObjectBase.h"
#include "../ObjectDebug.h"
#include "../ObjectImpl.h"
#include "../ObjectInline.h"
#include "../OutOfMemoryError.h"
#include "../Package.h"
#include "../ParamsMismatchException.h"
#include "../Process.h"
#include "../Runnable.h"
#include "../Runtime.h"
#include "../RuntimeException.h"
#include "../SharedLibrary.h"
#include "../Short.h"
#include "../StackFrame.h"
#include "../StackOverflowError.h"
#include "../String.h"
#include "../StringBuffer.h"
#include "../StringConcenator.h"
#include "../StringIndexOutOfBoundsException.h"
#include "../StringInline.h"
#include "../StringUtf8Utils.h"
#include "../System.h"
#include "../SystemError.h"
#include "../SystemInline.h"
#include "../SystemIntern.h"
#include "../Thread.h"
#include "../ThreadDeath.h"
#include "../ThreadGroup.h"
#include "../ThreadImpl.h"
#include "../ThreadLocal.h"
#include "../ThreadLocalImpl.h"
#include "../Throwable.h"
#include "../UnicodeCharacter.h"
#include "../UnsupportedOperationException.h"
#include "../Void.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
StringBuffer_create_array(int length)
{
  return new ObjectArrayImpl<RStringBuffer>(length);
}

//static
::acdk::lang::RObject
StringBuffer_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class StringBuffer_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)StringBuffer::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_StringBuffer__LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StringBuffer();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_StringBuffer_INLRString__LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StringBuffer(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method__unShare_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StringBuffer::_unShare(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->_unShare(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method__unShare__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StringBuffer::_unShare();
    else
        This->_unShare();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method__unShare2_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StringBuffer::_unShare2(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->_unShare2(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_append_INLRString__LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::append(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->append(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_append_C_LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::append(::acdk::lang::dmi::castTo< char>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->append(::acdk::lang::dmi::castTo< char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_append_Luc2char__LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::append(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->append(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_append_Z_LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::append(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->append(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_append_I_LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::append(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->append(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_append_J_LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::append(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->append(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_append_F_LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::append(::acdk::lang::dmi::castTo< float>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->append(::acdk::lang::dmi::castTo< float>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_append_D_LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::append(::acdk::lang::dmi::castTo< double>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->append(::acdk::lang::dmi::castTo< double>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_append_INLRObject__LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::append(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->append(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_append_II_LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::append(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->append(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_capacity__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StringBuffer::capacity();
    else
      ret = This->capacity();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_charAt_I_Luc2char__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StringBuffer::charAt(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->charAt(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_create_instance__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)StringBuffer::create_instance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_deleteCharAt_I_LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::deleteCharAt(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->deleteCharAt(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_deleteRegion_II_LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::deleteRegion(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->deleteRegion(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_ensureCapacity_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StringBuffer::ensureCapacity(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->ensureCapacity(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_getChars_IIINLRcharArray_IINLacdk_locale_REncoder__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StringBuffer::getChars(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< RcharArray>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc), ::acdk::lang::dmi::castTo< acdk::locale::REncoder>(args[4], dc));
    else
        This->getChars(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< RcharArray>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc), ::acdk::lang::dmi::castTo< acdk::locale::REncoder>(args[4], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_insert_IINLRString__LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::insert(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->insert(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_insert_IC_LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::insert(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< char>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->insert(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< char>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_insert_ILuc2char__LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::insert(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< uc2char>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->insert(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< uc2char>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_insert_IINLRObject__LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::insert(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->insert(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_insert_II_LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::insert(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->insert(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_insert_IJ_LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::insert(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< jlong>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->insert(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< jlong>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_insert_ID_LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::insert(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< double>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->insert(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< double>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_insert_IF_LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::insert(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< float>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->insert(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< float>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_insert_IZ_LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::insert(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->insert(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_isCChar__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StringBuffer::isCChar();
    else
      ret = This->isCChar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_isUc2Char__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StringBuffer::isUc2Char();
    else
      ret = This->isUc2Char();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_isUc4Char__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StringBuffer::isUc4Char();
    else
      ret = This->isUc4Char();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_length__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StringBuffer::length();
    else
      ret = This->length();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_operator_lt_lt_D_LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::operator_lt_lt(::acdk::lang::dmi::castTo< double>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator_lt_lt(::acdk::lang::dmi::castTo< double>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_operator_lt_lt_J_LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::operator_lt_lt(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator_lt_lt(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_operator_lt_lt_F_LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::operator_lt_lt(::acdk::lang::dmi::castTo< float>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator_lt_lt(::acdk::lang::dmi::castTo< float>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_operator_lt_lt_Luc2char__LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::operator_lt_lt(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator_lt_lt(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_operator_lt_lt_B_LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::operator_lt_lt(::acdk::lang::dmi::castTo< byte>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator_lt_lt(::acdk::lang::dmi::castTo< byte>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_operator_lt_lt_S_LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::operator_lt_lt(::acdk::lang::dmi::castTo< short>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator_lt_lt(::acdk::lang::dmi::castTo< short>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_operator_lt_lt_I_LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::operator_lt_lt(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator_lt_lt(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_operator_lt_lt_INLRString__LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::operator_lt_lt(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator_lt_lt(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_operator_lt_lt_INLRObject__LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::operator_lt_lt(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator_lt_lt(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_operator_lt_lt_Z_LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::operator_lt_lt(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator_lt_lt(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_operator_lt_lt_C_LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::operator_lt_lt(::acdk::lang::dmi::castTo< char>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator_lt_lt(::acdk::lang::dmi::castTo< char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_operator_pl_eq_INLRString__LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::operator+=(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator+=(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_operator_pl_eq_INLRObject__LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::operator+=(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator+=(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_operator_pl_eq_Z_LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::operator+=(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator+=(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_operator_pl_eq_C_LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::operator+=(::acdk::lang::dmi::castTo< char>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator+=(::acdk::lang::dmi::castTo< char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_operator_pl_eq_Luc2char__LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::operator+=(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator+=(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_operator_pl_eq_B_LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::operator+=(::acdk::lang::dmi::castTo< byte>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator+=(::acdk::lang::dmi::castTo< byte>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_operator_pl_eq_S_LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::operator+=(::acdk::lang::dmi::castTo< short>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator+=(::acdk::lang::dmi::castTo< short>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_operator_pl_eq_I_LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::operator+=(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator+=(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_operator_pl_eq_J_LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::operator+=(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator+=(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_operator_pl_eq_F_LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::operator+=(::acdk::lang::dmi::castTo< float>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator+=(::acdk::lang::dmi::castTo< float>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_operator_pl_eq_D_LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::operator+=(::acdk::lang::dmi::castTo< double>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator+=(::acdk::lang::dmi::castTo< double>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_replace_IIINLRString__LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::replace(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc));
    else
        ret = (::acdk::lang::RObject)This->replace(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_reset__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StringBuffer::reset();
    else
        This->reset();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_reverse__LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::reverse();
    else
        ret = (::acdk::lang::RObject)This->reverse();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_set_INLRString__LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::set(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->set(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_setCharAt_IC_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StringBuffer::setCharAt(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< char>(args[1], dc));
    else
        This->setCharAt(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< char>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_setCharAt_ILuc2char__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StringBuffer::setCharAt(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< uc2char>(args[1], dc));
    else
        This->setCharAt(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< uc2char>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_setLength_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StringBuffer::setLength(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setLength(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_substring_II_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::substring(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->substring(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringBuffer_method_substring_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringBuffer::substring(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->substring(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StringBuffer_fields__shared_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_shared, flags);
    else
      This->_shared = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StringBuffer_fields__str_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    StringBuffer* This = dmi_cast<StringBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_str, flags);
    else
      This->_str = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo StringBuffer_fields__shared = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo | 0x200000,
  0, //AttributesRes
  "_shared", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  StringBuffer_MetainfoWrapper::StringBuffer_fields__shared_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StringBuffer_fields__str = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_str", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  StringBuffer_MetainfoWrapper::StringBuffer_fields__str_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _StringBuffer_fields[] = 
{
  &StringBuffer_fields__shared,
  &StringBuffer_fields__str,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_14_GetClass", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  StringBuffer_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_StringBuffer__LRStringBuffer__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_StringBuffer__LRStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_StringBuffer__LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "StringBuffer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StringBuffer::clazzInfo(), // return type
  "_1_StringBuffer", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_StringBuffer__LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_StringBuffer__LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_StringBuffer__LRStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_StringBuffer_INLRString__LRStringBuffer__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_StringBuffer_INLRString__LRStringBuffer__args[] = 
{
  &StringBuffer_methods_StringBuffer_INLRString__LRStringBuffer__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_StringBuffer_INLRString__LRStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_StringBuffer_INLRString__LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "StringBuffer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StringBuffer::clazzInfo(), // return type
  "_2_StringBuffer", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_StringBuffer_INLRString__LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_StringBuffer_INLRString__LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_StringBuffer_INLRString__LRStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods__unShare_I_V_arg_mincap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "mincap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods__unShare_I_V_args[] = 
{
  &StringBuffer_methods__unShare_I_V_arg_mincap,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods__unShare_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method__unShare_I_V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_unShare", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_11__unShare", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods__unShare_I_V_args, // the arguments
  0, //arguments count
  StringBuffer_methods__unShare_I_V_exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method__unShare_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods__unShare__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods__unShare__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method__unShare__V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "_unShare", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_12__unShare", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods__unShare__V_args, // the arguments
  0, //arguments count
  StringBuffer_methods__unShare__V_exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method__unShare__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods__unShare2_I_V_arg_mincap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "mincap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods__unShare2_I_V_args[] = 
{
  &StringBuffer_methods__unShare2_I_V_arg_mincap,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods__unShare2_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method__unShare2_I_V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_unShare2", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_13__unShare2", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods__unShare2_I_V_args, // the arguments
  0, //arguments count
  StringBuffer_methods__unShare2_I_V_exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method__unShare2_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_append_INLRString__LRStringBuffer__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_append_INLRString__LRStringBuffer__args[] = 
{
  &StringBuffer_methods_append_INLRString__LRStringBuffer__arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_append_INLRString__LRStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_append_INLRString__LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "append", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_e_append", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_append_INLRString__LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_append_INLRString__LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_append_INLRString__LRStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_append_C_LRStringBuffer__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_append_C_LRStringBuffer__args[] = 
{
  &StringBuffer_methods_append_C_LRStringBuffer__arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_append_C_LRStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_append_C_LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "append", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_f_append", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_append_C_LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_append_C_LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_append_C_LRStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_append_Luc2char__LRStringBuffer__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_append_Luc2char__LRStringBuffer__args[] = 
{
  &StringBuffer_methods_append_Luc2char__LRStringBuffer__arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_append_Luc2char__LRStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_append_Luc2char__LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "append", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_g_append", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_append_Luc2char__LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_append_Luc2char__LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_append_Luc2char__LRStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_append_Z_LRStringBuffer__arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_append_Z_LRStringBuffer__args[] = 
{
  &StringBuffer_methods_append_Z_LRStringBuffer__arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_append_Z_LRStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_append_Z_LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "append", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_h_append", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_append_Z_LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_append_Z_LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_append_Z_LRStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_append_I_LRStringBuffer__arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_append_I_LRStringBuffer__args[] = 
{
  &StringBuffer_methods_append_I_LRStringBuffer__arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_append_I_LRStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_append_I_LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "append", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_i_append", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_append_I_LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_append_I_LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_append_I_LRStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_append_J_LRStringBuffer__arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_append_J_LRStringBuffer__args[] = 
{
  &StringBuffer_methods_append_J_LRStringBuffer__arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_append_J_LRStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_append_J_LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "append", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_j_append", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_append_J_LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_append_J_LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_append_J_LRStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_append_F_LRStringBuffer__arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_append_F_LRStringBuffer__args[] = 
{
  &StringBuffer_methods_append_F_LRStringBuffer__arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_append_F_LRStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_append_F_LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "append", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_k_append", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_append_F_LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_append_F_LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_append_F_LRStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_append_D_LRStringBuffer__arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_append_D_LRStringBuffer__args[] = 
{
  &StringBuffer_methods_append_D_LRStringBuffer__arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_append_D_LRStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_append_D_LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "append", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_l_append", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_append_D_LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_append_D_LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_append_D_LRStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_append_INLRObject__LRStringBuffer__arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_append_INLRObject__LRStringBuffer__args[] = 
{
  &StringBuffer_methods_append_INLRObject__LRStringBuffer__arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_append_INLRObject__LRStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_append_INLRObject__LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "append", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_m_append", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_append_INLRObject__LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_append_INLRObject__LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_append_INLRObject__LRStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_append_II_LRStringBuffer__arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_append_II_LRStringBuffer__arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_append_II_LRStringBuffer__args[] = 
{
  &StringBuffer_methods_append_II_LRStringBuffer__arg_offset,
  &StringBuffer_methods_append_II_LRStringBuffer__arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_append_II_LRStringBuffer__exceptions[] =
{
  RIndexOutOfBoundsException::clazzInfo(), 
  0
};

void StringBuffer_append_II_LRStringBuffer__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, IndexOutOfBoundsException) == true)
    THROW_INSTANCE( RIndexOutOfBoundsException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_append_II_LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "append", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_E_append", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_append_II_LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_append_II_LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_append_II_LRStringBuffer__dispatch, // invoke this method
  StringBuffer_append_II_LRStringBuffer__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_capacity__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_capacity__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_capacity__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "capacity", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_n_capacity", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_capacity__I_args, // the arguments
  0, //arguments count
  StringBuffer_methods_capacity__I_exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_capacity__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_charAt_I_Luc2char__arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_charAt_I_Luc2char__args[] = 
{
  &StringBuffer_methods_charAt_I_Luc2char__arg_idx,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_charAt_I_Luc2char__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_charAt_I_Luc2char_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "charAt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz(), // return type
  "_8_charAt", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_charAt_I_Luc2char__args, // the arguments
  0, //arguments count
  StringBuffer_methods_charAt_I_Luc2char__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_charAt_I_Luc2char__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_create_instance__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_create_instance__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_create_instance__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create_instance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_0_create_instance", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_create_instance__LRObject__args, // the arguments
  0, //arguments count
  StringBuffer_methods_create_instance__LRObject__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_create_instance__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_deleteCharAt_I_LRStringBuffer__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_deleteCharAt_I_LRStringBuffer__args[] = 
{
  &StringBuffer_methods_deleteCharAt_I_LRStringBuffer__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_deleteCharAt_I_LRStringBuffer__exceptions[] =
{
  RIndexOutOfBoundsException::clazzInfo(), 
  0
};

void StringBuffer_deleteCharAt_I_LRStringBuffer__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, IndexOutOfBoundsException) == true)
    THROW_INSTANCE( RIndexOutOfBoundsException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_deleteCharAt_I_LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deleteCharAt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_r_deleteCharAt", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_deleteCharAt_I_LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_deleteCharAt_I_LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_deleteCharAt_I_LRStringBuffer__dispatch, // invoke this method
  StringBuffer_deleteCharAt_I_LRStringBuffer__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_deleteRegion_II_LRStringBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_deleteRegion_II_LRStringBuffer__arg_end = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "end", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_deleteRegion_II_LRStringBuffer__args[] = 
{
  &StringBuffer_methods_deleteRegion_II_LRStringBuffer__arg_start,
  &StringBuffer_methods_deleteRegion_II_LRStringBuffer__arg_end,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_deleteRegion_II_LRStringBuffer__exceptions[] =
{
  RIndexOutOfBoundsException::clazzInfo(), 
  0
};

void StringBuffer_deleteRegion_II_LRStringBuffer__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, IndexOutOfBoundsException) == true)
    THROW_INSTANCE( RIndexOutOfBoundsException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_deleteRegion_II_LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deleteRegion", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_q_deleteRegion", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_deleteRegion_II_LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_deleteRegion_II_LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_deleteRegion_II_LRStringBuffer__dispatch, // invoke this method
  StringBuffer_deleteRegion_II_LRStringBuffer__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_ensureCapacity_I_V_arg_mincap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "mincap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_ensureCapacity_I_V_args[] = 
{
  &StringBuffer_methods_ensureCapacity_I_V_arg_mincap,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_ensureCapacity_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_ensureCapacity_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ensureCapacity", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_o_ensureCapacity", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_ensureCapacity_I_V_args, // the arguments
  0, //arguments count
  StringBuffer_methods_ensureCapacity_I_V_exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_ensureCapacity_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_getChars_IIINLRcharArray_IINLacdk_locale_REncoder__V_arg_srcBegin = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "srcBegin", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_getChars_IIINLRcharArray_IINLacdk_locale_REncoder__V_arg_srcEnd = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "srcEnd", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_getChars_IIINLRcharArray_IINLacdk_locale_REncoder__V_arg_dst = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "dst", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RcharArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_getChars_IIINLRcharArray_IINLacdk_locale_REncoder__V_arg_dstBegin = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dstBegin", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_getChars_IIINLRcharArray_IINLacdk_locale_REncoder__V_arg_enc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "enc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::REncoder::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_getChars_IIINLRcharArray_IINLacdk_locale_REncoder__V_args[] = 
{
  &StringBuffer_methods_getChars_IIINLRcharArray_IINLacdk_locale_REncoder__V_arg_srcBegin,
  &StringBuffer_methods_getChars_IIINLRcharArray_IINLacdk_locale_REncoder__V_arg_srcEnd,
  &StringBuffer_methods_getChars_IIINLRcharArray_IINLacdk_locale_REncoder__V_arg_dst,
  &StringBuffer_methods_getChars_IIINLRcharArray_IINLacdk_locale_REncoder__V_arg_dstBegin,
  &StringBuffer_methods_getChars_IIINLRcharArray_IINLacdk_locale_REncoder__V_arg_enc,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_getChars_IIINLRcharArray_IINLacdk_locale_REncoder__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_getChars_IIINLRcharArray_IINLacdk_locale_REncoder__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getChars", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_getChars", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_getChars_IIINLRcharArray_IINLacdk_locale_REncoder__V_args, // the arguments
  0, //arguments count
  StringBuffer_methods_getChars_IIINLRcharArray_IINLacdk_locale_REncoder__V_exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_getChars_IIINLRcharArray_IINLacdk_locale_REncoder__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_insert_IINLRString__LRStringBuffer__arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_insert_IINLRString__LRStringBuffer__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_insert_IINLRString__LRStringBuffer__args[] = 
{
  &StringBuffer_methods_insert_IINLRString__LRStringBuffer__arg_offset,
  &StringBuffer_methods_insert_IINLRString__LRStringBuffer__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_insert_IINLRString__LRStringBuffer__exceptions[] =
{
  RIndexOutOfBoundsException::clazzInfo(), 
  0
};

void StringBuffer_insert_IINLRString__LRStringBuffer__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, IndexOutOfBoundsException) == true)
    THROW_INSTANCE( RIndexOutOfBoundsException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_insert_IINLRString__LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insert", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_v_insert", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_insert_IINLRString__LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_insert_IINLRString__LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_insert_IINLRString__LRStringBuffer__dispatch, // invoke this method
  StringBuffer_insert_IINLRString__LRStringBuffer__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_insert_IC_LRStringBuffer__arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_insert_IC_LRStringBuffer__arg_ch = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ch", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_insert_IC_LRStringBuffer__args[] = 
{
  &StringBuffer_methods_insert_IC_LRStringBuffer__arg_offset,
  &StringBuffer_methods_insert_IC_LRStringBuffer__arg_ch,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_insert_IC_LRStringBuffer__exceptions[] =
{
  RIndexOutOfBoundsException::clazzInfo(), 
  0
};

void StringBuffer_insert_IC_LRStringBuffer__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, IndexOutOfBoundsException) == true)
    THROW_INSTANCE( RIndexOutOfBoundsException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_insert_IC_LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insert", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_w_insert", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_insert_IC_LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_insert_IC_LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_insert_IC_LRStringBuffer__dispatch, // invoke this method
  StringBuffer_insert_IC_LRStringBuffer__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_insert_ILuc2char__LRStringBuffer__arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_insert_ILuc2char__LRStringBuffer__arg_ch = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ch", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_insert_ILuc2char__LRStringBuffer__args[] = 
{
  &StringBuffer_methods_insert_ILuc2char__LRStringBuffer__arg_offset,
  &StringBuffer_methods_insert_ILuc2char__LRStringBuffer__arg_ch,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_insert_ILuc2char__LRStringBuffer__exceptions[] =
{
  RIndexOutOfBoundsException::clazzInfo(), 
  0
};

void StringBuffer_insert_ILuc2char__LRStringBuffer__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, IndexOutOfBoundsException) == true)
    THROW_INSTANCE( RIndexOutOfBoundsException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_insert_ILuc2char__LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insert", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_x_insert", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_insert_ILuc2char__LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_insert_ILuc2char__LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_insert_ILuc2char__LRStringBuffer__dispatch, // invoke this method
  StringBuffer_insert_ILuc2char__LRStringBuffer__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_insert_IINLRObject__LRStringBuffer__arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_insert_IINLRObject__LRStringBuffer__arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_insert_IINLRObject__LRStringBuffer__args[] = 
{
  &StringBuffer_methods_insert_IINLRObject__LRStringBuffer__arg_offset,
  &StringBuffer_methods_insert_IINLRObject__LRStringBuffer__arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_insert_IINLRObject__LRStringBuffer__exceptions[] =
{
  RIndexOutOfBoundsException::clazzInfo(), 
  0
};

void StringBuffer_insert_IINLRObject__LRStringBuffer__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, IndexOutOfBoundsException) == true)
    THROW_INSTANCE( RIndexOutOfBoundsException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_insert_IINLRObject__LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insert", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_y_insert", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_insert_IINLRObject__LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_insert_IINLRObject__LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_insert_IINLRObject__LRStringBuffer__dispatch, // invoke this method
  StringBuffer_insert_IINLRObject__LRStringBuffer__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_insert_II_LRStringBuffer__arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_insert_II_LRStringBuffer__arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_insert_II_LRStringBuffer__args[] = 
{
  &StringBuffer_methods_insert_II_LRStringBuffer__arg_offset,
  &StringBuffer_methods_insert_II_LRStringBuffer__arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_insert_II_LRStringBuffer__exceptions[] =
{
  RIndexOutOfBoundsException::clazzInfo(), 
  0
};

void StringBuffer_insert_II_LRStringBuffer__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, IndexOutOfBoundsException) == true)
    THROW_INSTANCE( RIndexOutOfBoundsException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_insert_II_LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insert", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_z_insert", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_insert_II_LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_insert_II_LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_insert_II_LRStringBuffer__dispatch, // invoke this method
  StringBuffer_insert_II_LRStringBuffer__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_insert_IJ_LRStringBuffer__arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_insert_IJ_LRStringBuffer__arg_l = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "l", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_insert_IJ_LRStringBuffer__args[] = 
{
  &StringBuffer_methods_insert_IJ_LRStringBuffer__arg_offset,
  &StringBuffer_methods_insert_IJ_LRStringBuffer__arg_l,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_insert_IJ_LRStringBuffer__exceptions[] =
{
  RIndexOutOfBoundsException::clazzInfo(), 
  0
};

void StringBuffer_insert_IJ_LRStringBuffer__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, IndexOutOfBoundsException) == true)
    THROW_INSTANCE( RIndexOutOfBoundsException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_insert_IJ_LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insert", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_A_insert", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_insert_IJ_LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_insert_IJ_LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_insert_IJ_LRStringBuffer__dispatch, // invoke this method
  StringBuffer_insert_IJ_LRStringBuffer__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_insert_ID_LRStringBuffer__arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_insert_ID_LRStringBuffer__arg_d = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "d", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_insert_ID_LRStringBuffer__args[] = 
{
  &StringBuffer_methods_insert_ID_LRStringBuffer__arg_offset,
  &StringBuffer_methods_insert_ID_LRStringBuffer__arg_d,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_insert_ID_LRStringBuffer__exceptions[] =
{
  RIndexOutOfBoundsException::clazzInfo(), 
  0
};

void StringBuffer_insert_ID_LRStringBuffer__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, IndexOutOfBoundsException) == true)
    THROW_INSTANCE( RIndexOutOfBoundsException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_insert_ID_LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insert", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_B_insert", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_insert_ID_LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_insert_ID_LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_insert_ID_LRStringBuffer__dispatch, // invoke this method
  StringBuffer_insert_ID_LRStringBuffer__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_insert_IF_LRStringBuffer__arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_insert_IF_LRStringBuffer__arg_f = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "f", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_insert_IF_LRStringBuffer__args[] = 
{
  &StringBuffer_methods_insert_IF_LRStringBuffer__arg_offset,
  &StringBuffer_methods_insert_IF_LRStringBuffer__arg_f,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_insert_IF_LRStringBuffer__exceptions[] =
{
  RIndexOutOfBoundsException::clazzInfo(), 
  0
};

void StringBuffer_insert_IF_LRStringBuffer__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, IndexOutOfBoundsException) == true)
    THROW_INSTANCE( RIndexOutOfBoundsException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_insert_IF_LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insert", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_C_insert", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_insert_IF_LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_insert_IF_LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_insert_IF_LRStringBuffer__dispatch, // invoke this method
  StringBuffer_insert_IF_LRStringBuffer__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_insert_IZ_LRStringBuffer__arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_insert_IZ_LRStringBuffer__arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_insert_IZ_LRStringBuffer__args[] = 
{
  &StringBuffer_methods_insert_IZ_LRStringBuffer__arg_offset,
  &StringBuffer_methods_insert_IZ_LRStringBuffer__arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_insert_IZ_LRStringBuffer__exceptions[] =
{
  RIndexOutOfBoundsException::clazzInfo(), 
  0
};

void StringBuffer_insert_IZ_LRStringBuffer__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, IndexOutOfBoundsException) == true)
    THROW_INSTANCE( RIndexOutOfBoundsException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_insert_IZ_LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insert", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_D_insert", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_insert_IZ_LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_insert_IZ_LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_insert_IZ_LRStringBuffer__dispatch, // invoke this method
  StringBuffer_insert_IZ_LRStringBuffer__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_isCChar__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_isCChar__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_isCChar__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isCChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_isCChar", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_isCChar__Z_args, // the arguments
  0, //arguments count
  StringBuffer_methods_isCChar__Z_exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_isCChar__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_isUc2Char__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_isUc2Char__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_isUc2Char__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isUc2Char", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_isUc2Char", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_isUc2Char__Z_args, // the arguments
  0, //arguments count
  StringBuffer_methods_isUc2Char__Z_exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_isUc2Char__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_isUc4Char__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_isUc4Char__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_isUc4Char__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isUc4Char", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_isUc4Char", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_isUc4Char__Z_args, // the arguments
  0, //arguments count
  StringBuffer_methods_isUc4Char__Z_exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_isUc4Char__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_length__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_length__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_length__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "length", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_length", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_length__I_args, // the arguments
  0, //arguments count
  StringBuffer_methods_length__I_exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_length__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_operator_lt_lt_D_LRStringBuffer__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_operator_lt_lt_D_LRStringBuffer__args[] = 
{
  &StringBuffer_methods_operator_lt_lt_D_LRStringBuffer__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_operator_lt_lt_D_LRStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_operator_lt_lt_D_LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_lt_lt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_10_operator_lt_lt", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_operator_lt_lt_D_LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_operator_lt_lt_D_LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_operator_lt_lt_D_LRStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_operator_lt_lt_J_LRStringBuffer__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_operator_lt_lt_J_LRStringBuffer__args[] = 
{
  &StringBuffer_methods_operator_lt_lt_J_LRStringBuffer__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_operator_lt_lt_J_LRStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_operator_lt_lt_J_LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_lt_lt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_Y_operator_lt_lt", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_operator_lt_lt_J_LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_operator_lt_lt_J_LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_operator_lt_lt_J_LRStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_operator_lt_lt_F_LRStringBuffer__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_operator_lt_lt_F_LRStringBuffer__args[] = 
{
  &StringBuffer_methods_operator_lt_lt_F_LRStringBuffer__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_operator_lt_lt_F_LRStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_operator_lt_lt_F_LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_lt_lt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_Z_operator_lt_lt", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_operator_lt_lt_F_LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_operator_lt_lt_F_LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_operator_lt_lt_F_LRStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_operator_lt_lt_Luc2char__LRStringBuffer__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_operator_lt_lt_Luc2char__LRStringBuffer__args[] = 
{
  &StringBuffer_methods_operator_lt_lt_Luc2char__LRStringBuffer__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_operator_lt_lt_Luc2char__LRStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_operator_lt_lt_Luc2char__LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_lt_lt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_U_operator_lt_lt", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_operator_lt_lt_Luc2char__LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_operator_lt_lt_Luc2char__LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_operator_lt_lt_Luc2char__LRStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_operator_lt_lt_B_LRStringBuffer__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_operator_lt_lt_B_LRStringBuffer__args[] = 
{
  &StringBuffer_methods_operator_lt_lt_B_LRStringBuffer__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_operator_lt_lt_B_LRStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_operator_lt_lt_B_LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_lt_lt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_V_operator_lt_lt", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_operator_lt_lt_B_LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_operator_lt_lt_B_LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_operator_lt_lt_B_LRStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_operator_lt_lt_S_LRStringBuffer__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_operator_lt_lt_S_LRStringBuffer__args[] = 
{
  &StringBuffer_methods_operator_lt_lt_S_LRStringBuffer__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_operator_lt_lt_S_LRStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_operator_lt_lt_S_LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_lt_lt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_W_operator_lt_lt", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_operator_lt_lt_S_LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_operator_lt_lt_S_LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_operator_lt_lt_S_LRStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_operator_lt_lt_I_LRStringBuffer__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_operator_lt_lt_I_LRStringBuffer__args[] = 
{
  &StringBuffer_methods_operator_lt_lt_I_LRStringBuffer__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_operator_lt_lt_I_LRStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_operator_lt_lt_I_LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_lt_lt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_X_operator_lt_lt", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_operator_lt_lt_I_LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_operator_lt_lt_I_LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_operator_lt_lt_I_LRStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_operator_lt_lt_INLRString__LRStringBuffer__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_operator_lt_lt_INLRString__LRStringBuffer__args[] = 
{
  &StringBuffer_methods_operator_lt_lt_INLRString__LRStringBuffer__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_operator_lt_lt_INLRString__LRStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_operator_lt_lt_INLRString__LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_lt_lt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_Q_operator_lt_lt", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_operator_lt_lt_INLRString__LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_operator_lt_lt_INLRString__LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_operator_lt_lt_INLRString__LRStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_operator_lt_lt_INLRObject__LRStringBuffer__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_operator_lt_lt_INLRObject__LRStringBuffer__args[] = 
{
  &StringBuffer_methods_operator_lt_lt_INLRObject__LRStringBuffer__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_operator_lt_lt_INLRObject__LRStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_operator_lt_lt_INLRObject__LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_lt_lt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_R_operator_lt_lt", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_operator_lt_lt_INLRObject__LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_operator_lt_lt_INLRObject__LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_operator_lt_lt_INLRObject__LRStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_operator_lt_lt_Z_LRStringBuffer__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_operator_lt_lt_Z_LRStringBuffer__args[] = 
{
  &StringBuffer_methods_operator_lt_lt_Z_LRStringBuffer__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_operator_lt_lt_Z_LRStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_operator_lt_lt_Z_LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_lt_lt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_S_operator_lt_lt", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_operator_lt_lt_Z_LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_operator_lt_lt_Z_LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_operator_lt_lt_Z_LRStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_operator_lt_lt_C_LRStringBuffer__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_operator_lt_lt_C_LRStringBuffer__args[] = 
{
  &StringBuffer_methods_operator_lt_lt_C_LRStringBuffer__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_operator_lt_lt_C_LRStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_operator_lt_lt_C_LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_lt_lt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_T_operator_lt_lt", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_operator_lt_lt_C_LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_operator_lt_lt_C_LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_operator_lt_lt_C_LRStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_operator_pl_eq_INLRString__LRStringBuffer__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_operator_pl_eq_INLRString__LRStringBuffer__args[] = 
{
  &StringBuffer_methods_operator_pl_eq_INLRString__LRStringBuffer__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_operator_pl_eq_INLRString__LRStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_operator_pl_eq_INLRString__LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_pl_eq", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_F_operator_pl_eq", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_operator_pl_eq_INLRString__LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_operator_pl_eq_INLRString__LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_operator_pl_eq_INLRString__LRStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_operator_pl_eq_INLRObject__LRStringBuffer__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_operator_pl_eq_INLRObject__LRStringBuffer__args[] = 
{
  &StringBuffer_methods_operator_pl_eq_INLRObject__LRStringBuffer__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_operator_pl_eq_INLRObject__LRStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_operator_pl_eq_INLRObject__LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_pl_eq", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_G_operator_pl_eq", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_operator_pl_eq_INLRObject__LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_operator_pl_eq_INLRObject__LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_operator_pl_eq_INLRObject__LRStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_operator_pl_eq_Z_LRStringBuffer__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_operator_pl_eq_Z_LRStringBuffer__args[] = 
{
  &StringBuffer_methods_operator_pl_eq_Z_LRStringBuffer__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_operator_pl_eq_Z_LRStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_operator_pl_eq_Z_LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_pl_eq", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_H_operator_pl_eq", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_operator_pl_eq_Z_LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_operator_pl_eq_Z_LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_operator_pl_eq_Z_LRStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_operator_pl_eq_C_LRStringBuffer__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_operator_pl_eq_C_LRStringBuffer__args[] = 
{
  &StringBuffer_methods_operator_pl_eq_C_LRStringBuffer__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_operator_pl_eq_C_LRStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_operator_pl_eq_C_LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_pl_eq", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_I_operator_pl_eq", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_operator_pl_eq_C_LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_operator_pl_eq_C_LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_operator_pl_eq_C_LRStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_operator_pl_eq_Luc2char__LRStringBuffer__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_operator_pl_eq_Luc2char__LRStringBuffer__args[] = 
{
  &StringBuffer_methods_operator_pl_eq_Luc2char__LRStringBuffer__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_operator_pl_eq_Luc2char__LRStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_operator_pl_eq_Luc2char__LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_pl_eq", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_J_operator_pl_eq", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_operator_pl_eq_Luc2char__LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_operator_pl_eq_Luc2char__LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_operator_pl_eq_Luc2char__LRStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_operator_pl_eq_B_LRStringBuffer__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_operator_pl_eq_B_LRStringBuffer__args[] = 
{
  &StringBuffer_methods_operator_pl_eq_B_LRStringBuffer__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_operator_pl_eq_B_LRStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_operator_pl_eq_B_LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_pl_eq", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_K_operator_pl_eq", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_operator_pl_eq_B_LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_operator_pl_eq_B_LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_operator_pl_eq_B_LRStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_operator_pl_eq_S_LRStringBuffer__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_operator_pl_eq_S_LRStringBuffer__args[] = 
{
  &StringBuffer_methods_operator_pl_eq_S_LRStringBuffer__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_operator_pl_eq_S_LRStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_operator_pl_eq_S_LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_pl_eq", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_L_operator_pl_eq", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_operator_pl_eq_S_LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_operator_pl_eq_S_LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_operator_pl_eq_S_LRStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_operator_pl_eq_I_LRStringBuffer__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_operator_pl_eq_I_LRStringBuffer__args[] = 
{
  &StringBuffer_methods_operator_pl_eq_I_LRStringBuffer__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_operator_pl_eq_I_LRStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_operator_pl_eq_I_LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_pl_eq", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_M_operator_pl_eq", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_operator_pl_eq_I_LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_operator_pl_eq_I_LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_operator_pl_eq_I_LRStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_operator_pl_eq_J_LRStringBuffer__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_operator_pl_eq_J_LRStringBuffer__args[] = 
{
  &StringBuffer_methods_operator_pl_eq_J_LRStringBuffer__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_operator_pl_eq_J_LRStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_operator_pl_eq_J_LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_pl_eq", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_N_operator_pl_eq", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_operator_pl_eq_J_LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_operator_pl_eq_J_LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_operator_pl_eq_J_LRStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_operator_pl_eq_F_LRStringBuffer__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_operator_pl_eq_F_LRStringBuffer__args[] = 
{
  &StringBuffer_methods_operator_pl_eq_F_LRStringBuffer__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_operator_pl_eq_F_LRStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_operator_pl_eq_F_LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_pl_eq", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_O_operator_pl_eq", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_operator_pl_eq_F_LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_operator_pl_eq_F_LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_operator_pl_eq_F_LRStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_operator_pl_eq_D_LRStringBuffer__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_operator_pl_eq_D_LRStringBuffer__args[] = 
{
  &StringBuffer_methods_operator_pl_eq_D_LRStringBuffer__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_operator_pl_eq_D_LRStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_operator_pl_eq_D_LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_pl_eq", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_P_operator_pl_eq", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_operator_pl_eq_D_LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_operator_pl_eq_D_LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_operator_pl_eq_D_LRStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_replace_IIINLRString__LRStringBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_replace_IIINLRString__LRStringBuffer__arg_end = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "end", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_replace_IIINLRString__LRStringBuffer__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_replace_IIINLRString__LRStringBuffer__args[] = 
{
  &StringBuffer_methods_replace_IIINLRString__LRStringBuffer__arg_start,
  &StringBuffer_methods_replace_IIINLRString__LRStringBuffer__arg_end,
  &StringBuffer_methods_replace_IIINLRString__LRStringBuffer__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_replace_IIINLRString__LRStringBuffer__exceptions[] =
{
  RIndexOutOfBoundsException::clazzInfo(), 
  0
};

void StringBuffer_replace_IIINLRString__LRStringBuffer__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, IndexOutOfBoundsException) == true)
    THROW_INSTANCE( RIndexOutOfBoundsException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_replace_IIINLRString__LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "replace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_s_replace", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_replace_IIINLRString__LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_replace_IIINLRString__LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_replace_IIINLRString__LRStringBuffer__dispatch, // invoke this method
  StringBuffer_replace_IIINLRString__LRStringBuffer__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_reset__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_reset__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_reset__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "reset", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_reset", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_reset__V_args, // the arguments
  0, //arguments count
  StringBuffer_methods_reset__V_exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_reset__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_reverse__LRStringBuffer__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_reverse__LRStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_reverse__LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "reverse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_d_reverse", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_reverse__LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_reverse__LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_reverse__LRStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_set_INLRString__LRStringBuffer__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_set_INLRString__LRStringBuffer__args[] = 
{
  &StringBuffer_methods_set_INLRString__LRStringBuffer__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_set_INLRString__LRStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_set_INLRString__LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "set", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_b_set", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_set_INLRString__LRStringBuffer__args, // the arguments
  0, //arguments count
  StringBuffer_methods_set_INLRString__LRStringBuffer__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_set_INLRString__LRStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_setCharAt_IC_V_arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_setCharAt_IC_V_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_setCharAt_IC_V_args[] = 
{
  &StringBuffer_methods_setCharAt_IC_V_arg_idx,
  &StringBuffer_methods_setCharAt_IC_V_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_setCharAt_IC_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_setCharAt_IC_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setCharAt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_setCharAt", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_setCharAt_IC_V_args, // the arguments
  0, //arguments count
  StringBuffer_methods_setCharAt_IC_V_exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_setCharAt_IC_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_setCharAt_ILuc2char__V_arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_setCharAt_ILuc2char__V_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_setCharAt_ILuc2char__V_args[] = 
{
  &StringBuffer_methods_setCharAt_ILuc2char__V_arg_idx,
  &StringBuffer_methods_setCharAt_ILuc2char__V_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_setCharAt_ILuc2char__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_setCharAt_ILuc2char__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setCharAt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_setCharAt", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_setCharAt_ILuc2char__V_args, // the arguments
  0, //arguments count
  StringBuffer_methods_setCharAt_ILuc2char__V_exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_setCharAt_ILuc2char__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_setLength_I_V_arg_newLength = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "newLength", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_setLength_I_V_args[] = 
{
  &StringBuffer_methods_setLength_I_V_arg_newLength,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_setLength_I_V_exceptions[] =
{
  RIndexOutOfBoundsException::clazzInfo(), 
  0
};

void StringBuffer_setLength_I_V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, IndexOutOfBoundsException) == true)
    THROW_INSTANCE( RIndexOutOfBoundsException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_setLength_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_p_setLength", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_setLength_I_V_args, // the arguments
  0, //arguments count
  StringBuffer_methods_setLength_I_V_exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_setLength_I_V_dispatch, // invoke this method
  StringBuffer_setLength_I_V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_substring_II_LRString__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_substring_II_LRString__arg_end = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "end", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_substring_II_LRString__args[] = 
{
  &StringBuffer_methods_substring_II_LRString__arg_start,
  &StringBuffer_methods_substring_II_LRString__arg_end,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_substring_II_LRString__exceptions[] =
{
  RIndexOutOfBoundsException::clazzInfo(), 
  0
};

void StringBuffer_substring_II_LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, IndexOutOfBoundsException) == true)
    THROW_INSTANCE( RIndexOutOfBoundsException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_substring_II_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "substring", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_t_substring", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_substring_II_LRString__args, // the arguments
  0, //arguments count
  StringBuffer_methods_substring_II_LRString__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_substring_II_LRString__dispatch, // invoke this method
  StringBuffer_substring_II_LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringBuffer_methods_substring_I_LRString__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringBuffer_methods_substring_I_LRString__args[] = 
{
  &StringBuffer_methods_substring_I_LRString__arg_start,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer_methods_substring_I_LRString__exceptions[] =
{
  RIndexOutOfBoundsException::clazzInfo(), 
  0
};

void StringBuffer_substring_I_LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, IndexOutOfBoundsException) == true)
    THROW_INSTANCE( RIndexOutOfBoundsException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo StringBuffer_method_substring_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "substring", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_u_substring", // alternative name of method
  -1, // altlabelHashCode
  StringBuffer_methods_substring_I_LRString__args, // the arguments
  0, //arguments count
  StringBuffer_methods_substring_I_LRString__exceptions, // the declared exceptions
  StringBuffer_MetainfoWrapper::StringBuffer_method_substring_I_LRString__dispatch, // invoke this method
  StringBuffer_substring_I_LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _StringBuffer_methods[] = 
{
  &StringBuffer_method_GetClass__L_acdk_lang_RClass_,
  &StringBuffer_method_StringBuffer__LRStringBuffer_,
  &StringBuffer_method_StringBuffer_INLRString__LRStringBuffer_,
  &StringBuffer_method__unShare_I_V,
  &StringBuffer_method__unShare__V,
  &StringBuffer_method__unShare2_I_V,
  &StringBuffer_method_append_INLRString__LRStringBuffer_,
  &StringBuffer_method_append_C_LRStringBuffer_,
  &StringBuffer_method_append_Luc2char__LRStringBuffer_,
  &StringBuffer_method_append_Z_LRStringBuffer_,
  &StringBuffer_method_append_I_LRStringBuffer_,
  &StringBuffer_method_append_J_LRStringBuffer_,
  &StringBuffer_method_append_F_LRStringBuffer_,
  &StringBuffer_method_append_D_LRStringBuffer_,
  &StringBuffer_method_append_INLRObject__LRStringBuffer_,
  &StringBuffer_method_append_II_LRStringBuffer_,
  &StringBuffer_method_capacity__I,
  &StringBuffer_method_charAt_I_Luc2char_,
  &StringBuffer_method_create_instance__LRObject_,
  &StringBuffer_method_deleteCharAt_I_LRStringBuffer_,
  &StringBuffer_method_deleteRegion_II_LRStringBuffer_,
  &StringBuffer_method_ensureCapacity_I_V,
  &StringBuffer_method_getChars_IIINLRcharArray_IINLacdk_locale_REncoder__V,
  &StringBuffer_method_insert_IINLRString__LRStringBuffer_,
  &StringBuffer_method_insert_IC_LRStringBuffer_,
  &StringBuffer_method_insert_ILuc2char__LRStringBuffer_,
  &StringBuffer_method_insert_IINLRObject__LRStringBuffer_,
  &StringBuffer_method_insert_II_LRStringBuffer_,
  &StringBuffer_method_insert_IJ_LRStringBuffer_,
  &StringBuffer_method_insert_ID_LRStringBuffer_,
  &StringBuffer_method_insert_IF_LRStringBuffer_,
  &StringBuffer_method_insert_IZ_LRStringBuffer_,
  &StringBuffer_method_isCChar__Z,
  &StringBuffer_method_isUc2Char__Z,
  &StringBuffer_method_isUc4Char__Z,
  &StringBuffer_method_length__I,
  &StringBuffer_method_operator_lt_lt_D_LRStringBuffer_,
  &StringBuffer_method_operator_lt_lt_J_LRStringBuffer_,
  &StringBuffer_method_operator_lt_lt_F_LRStringBuffer_,
  &StringBuffer_method_operator_lt_lt_Luc2char__LRStringBuffer_,
  &StringBuffer_method_operator_lt_lt_B_LRStringBuffer_,
  &StringBuffer_method_operator_lt_lt_S_LRStringBuffer_,
  &StringBuffer_method_operator_lt_lt_I_LRStringBuffer_,
  &StringBuffer_method_operator_lt_lt_INLRString__LRStringBuffer_,
  &StringBuffer_method_operator_lt_lt_INLRObject__LRStringBuffer_,
  &StringBuffer_method_operator_lt_lt_Z_LRStringBuffer_,
  &StringBuffer_method_operator_lt_lt_C_LRStringBuffer_,
  &StringBuffer_method_operator_pl_eq_INLRString__LRStringBuffer_,
  &StringBuffer_method_operator_pl_eq_INLRObject__LRStringBuffer_,
  &StringBuffer_method_operator_pl_eq_Z_LRStringBuffer_,
  &StringBuffer_method_operator_pl_eq_C_LRStringBuffer_,
  &StringBuffer_method_operator_pl_eq_Luc2char__LRStringBuffer_,
  &StringBuffer_method_operator_pl_eq_B_LRStringBuffer_,
  &StringBuffer_method_operator_pl_eq_S_LRStringBuffer_,
  &StringBuffer_method_operator_pl_eq_I_LRStringBuffer_,
  &StringBuffer_method_operator_pl_eq_J_LRStringBuffer_,
  &StringBuffer_method_operator_pl_eq_F_LRStringBuffer_,
  &StringBuffer_method_operator_pl_eq_D_LRStringBuffer_,
  &StringBuffer_method_replace_IIINLRString__LRStringBuffer_,
  &StringBuffer_method_reset__V,
  &StringBuffer_method_reverse__LRStringBuffer_,
  &StringBuffer_method_set_INLRString__LRStringBuffer_,
  &StringBuffer_method_setCharAt_IC_V,
  &StringBuffer_method_setCharAt_ILuc2char__V,
  &StringBuffer_method_setLength_I_V,
  &StringBuffer_method_substring_II_LRString_,
  &StringBuffer_method_substring_I_LRString_,
  0
};


struct StringBuffer_MetaInfoInitializer
{  StringBuffer_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = StringBuffer::clazzInfo();
    ci->fields =  _StringBuffer_fields;
    ci->methods =  _StringBuffer_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
StringBuffer_MetaInfoInitializer StringBuffer_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
StringIndexOutOfBoundsException_create_array(int length)
{
  return new ObjectArrayImpl<RStringIndexOutOfBoundsException>(length);
}

//static
::acdk::lang::RObject
StringIndexOutOfBoundsException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class StringIndexOutOfBoundsException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringIndexOutOfBoundsException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)StringIndexOutOfBoundsException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringIndexOutOfBoundsException_method_StringIndexOutOfBoundsException__LRStringIndexOutOfBoundsException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StringIndexOutOfBoundsException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringIndexOutOfBoundsException_method_StringIndexOutOfBoundsException_INLRString__LRStringIndexOutOfBoundsException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StringIndexOutOfBoundsException(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringIndexOutOfBoundsException_method_StringIndexOutOfBoundsException_INLRString_II_LRStringIndexOutOfBoundsException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StringIndexOutOfBoundsException(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringIndexOutOfBoundsException_method_StringIndexOutOfBoundsException_I_LRStringIndexOutOfBoundsException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StringIndexOutOfBoundsException(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
};


void ThrowException_StringIndexOutOfBoundsException(IN(::acdk::lang::RThrowable) ex)
{
  throw RStringIndexOutOfBoundsException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _StringIndexOutOfBoundsException_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringIndexOutOfBoundsException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StringIndexOutOfBoundsException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringIndexOutOfBoundsException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  StringIndexOutOfBoundsException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  StringIndexOutOfBoundsException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  StringIndexOutOfBoundsException_MetainfoWrapper::StringIndexOutOfBoundsException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringIndexOutOfBoundsException_methods_StringIndexOutOfBoundsException__LRStringIndexOutOfBoundsException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StringIndexOutOfBoundsException_methods_StringIndexOutOfBoundsException__LRStringIndexOutOfBoundsException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringIndexOutOfBoundsException_method_StringIndexOutOfBoundsException__LRStringIndexOutOfBoundsException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "StringIndexOutOfBoundsException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StringIndexOutOfBoundsException::clazzInfo(), // return type
  "_0_StringIndexOutOfBoundsException", // alternative name of method
  -1, // altlabelHashCode
  StringIndexOutOfBoundsException_methods_StringIndexOutOfBoundsException__LRStringIndexOutOfBoundsException__args, // the arguments
  0, //arguments count
  StringIndexOutOfBoundsException_methods_StringIndexOutOfBoundsException__LRStringIndexOutOfBoundsException__exceptions, // the declared exceptions
  StringIndexOutOfBoundsException_MetainfoWrapper::StringIndexOutOfBoundsException_method_StringIndexOutOfBoundsException__LRStringIndexOutOfBoundsException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringIndexOutOfBoundsException_methods_StringIndexOutOfBoundsException_INLRString__LRStringIndexOutOfBoundsException__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringIndexOutOfBoundsException_methods_StringIndexOutOfBoundsException_INLRString__LRStringIndexOutOfBoundsException__args[] = 
{
  &StringIndexOutOfBoundsException_methods_StringIndexOutOfBoundsException_INLRString__LRStringIndexOutOfBoundsException__arg_what,
  0
};

::acdk::lang::dmi::ClazzInfo* StringIndexOutOfBoundsException_methods_StringIndexOutOfBoundsException_INLRString__LRStringIndexOutOfBoundsException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringIndexOutOfBoundsException_method_StringIndexOutOfBoundsException_INLRString__LRStringIndexOutOfBoundsException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "StringIndexOutOfBoundsException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StringIndexOutOfBoundsException::clazzInfo(), // return type
  "_1_StringIndexOutOfBoundsException", // alternative name of method
  -1, // altlabelHashCode
  StringIndexOutOfBoundsException_methods_StringIndexOutOfBoundsException_INLRString__LRStringIndexOutOfBoundsException__args, // the arguments
  0, //arguments count
  StringIndexOutOfBoundsException_methods_StringIndexOutOfBoundsException_INLRString__LRStringIndexOutOfBoundsException__exceptions, // the declared exceptions
  StringIndexOutOfBoundsException_MetainfoWrapper::StringIndexOutOfBoundsException_method_StringIndexOutOfBoundsException_INLRString__LRStringIndexOutOfBoundsException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringIndexOutOfBoundsException_methods_StringIndexOutOfBoundsException_INLRString_II_LRStringIndexOutOfBoundsException__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StringIndexOutOfBoundsException_methods_StringIndexOutOfBoundsException_INLRString_II_LRStringIndexOutOfBoundsException__arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StringIndexOutOfBoundsException_methods_StringIndexOutOfBoundsException_INLRString_II_LRStringIndexOutOfBoundsException__arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringIndexOutOfBoundsException_methods_StringIndexOutOfBoundsException_INLRString_II_LRStringIndexOutOfBoundsException__args[] = 
{
  &StringIndexOutOfBoundsException_methods_StringIndexOutOfBoundsException_INLRString_II_LRStringIndexOutOfBoundsException__arg_what,
  &StringIndexOutOfBoundsException_methods_StringIndexOutOfBoundsException_INLRString_II_LRStringIndexOutOfBoundsException__arg_idx,
  &StringIndexOutOfBoundsException_methods_StringIndexOutOfBoundsException_INLRString_II_LRStringIndexOutOfBoundsException__arg_length,
  0
};

::acdk::lang::dmi::ClazzInfo* StringIndexOutOfBoundsException_methods_StringIndexOutOfBoundsException_INLRString_II_LRStringIndexOutOfBoundsException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringIndexOutOfBoundsException_method_StringIndexOutOfBoundsException_INLRString_II_LRStringIndexOutOfBoundsException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "StringIndexOutOfBoundsException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StringIndexOutOfBoundsException::clazzInfo(), // return type
  "_2_StringIndexOutOfBoundsException", // alternative name of method
  -1, // altlabelHashCode
  StringIndexOutOfBoundsException_methods_StringIndexOutOfBoundsException_INLRString_II_LRStringIndexOutOfBoundsException__args, // the arguments
  0, //arguments count
  StringIndexOutOfBoundsException_methods_StringIndexOutOfBoundsException_INLRString_II_LRStringIndexOutOfBoundsException__exceptions, // the declared exceptions
  StringIndexOutOfBoundsException_MetainfoWrapper::StringIndexOutOfBoundsException_method_StringIndexOutOfBoundsException_INLRString_II_LRStringIndexOutOfBoundsException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringIndexOutOfBoundsException_methods_StringIndexOutOfBoundsException_I_LRStringIndexOutOfBoundsException__arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringIndexOutOfBoundsException_methods_StringIndexOutOfBoundsException_I_LRStringIndexOutOfBoundsException__args[] = 
{
  &StringIndexOutOfBoundsException_methods_StringIndexOutOfBoundsException_I_LRStringIndexOutOfBoundsException__arg_idx,
  0
};

::acdk::lang::dmi::ClazzInfo* StringIndexOutOfBoundsException_methods_StringIndexOutOfBoundsException_I_LRStringIndexOutOfBoundsException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringIndexOutOfBoundsException_method_StringIndexOutOfBoundsException_I_LRStringIndexOutOfBoundsException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "StringIndexOutOfBoundsException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StringIndexOutOfBoundsException::clazzInfo(), // return type
  "_3_StringIndexOutOfBoundsException", // alternative name of method
  -1, // altlabelHashCode
  StringIndexOutOfBoundsException_methods_StringIndexOutOfBoundsException_I_LRStringIndexOutOfBoundsException__args, // the arguments
  0, //arguments count
  StringIndexOutOfBoundsException_methods_StringIndexOutOfBoundsException_I_LRStringIndexOutOfBoundsException__exceptions, // the declared exceptions
  StringIndexOutOfBoundsException_MetainfoWrapper::StringIndexOutOfBoundsException_method_StringIndexOutOfBoundsException_I_LRStringIndexOutOfBoundsException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _StringIndexOutOfBoundsException_methods[] = 
{
  &StringIndexOutOfBoundsException_method_GetClass__L_acdk_lang_RClass_,
  &StringIndexOutOfBoundsException_method_StringIndexOutOfBoundsException__LRStringIndexOutOfBoundsException_,
  &StringIndexOutOfBoundsException_method_StringIndexOutOfBoundsException_INLRString__LRStringIndexOutOfBoundsException_,
  &StringIndexOutOfBoundsException_method_StringIndexOutOfBoundsException_INLRString_II_LRStringIndexOutOfBoundsException_,
  &StringIndexOutOfBoundsException_method_StringIndexOutOfBoundsException_I_LRStringIndexOutOfBoundsException_,
  0
};


struct StringIndexOutOfBoundsException_MetaInfoInitializer
{  StringIndexOutOfBoundsException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = StringIndexOutOfBoundsException::clazzInfo();
    ci->fields =  _StringIndexOutOfBoundsException_fields;
    ci->methods =  _StringIndexOutOfBoundsException_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
StringIndexOutOfBoundsException_MetaInfoInitializer StringIndexOutOfBoundsException_MetaInfoInitializer_staticinstance__;


struct StringIndexOutOfBoundsException_clazzInfo_ClazzAttributesResInitializer39
{
  StringIndexOutOfBoundsException_clazzInfo_ClazzAttributesResInitializer39()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)StringIndexOutOfBoundsException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_StringIndexOutOfBoundsException));
  }
};

StringIndexOutOfBoundsException_clazzInfo_ClazzAttributesResInitializer39 StringIndexOutOfBoundsException_clazzInfo_ClazzAttributesResInitializer39_instance;



} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
Initializer_create_array(int length)
{
  return new ObjectArrayImpl<RInitializer>(length);
}

//static
::acdk::lang::RObject
Initializer_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Initializer_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Initializer_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Initializer::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Initializer_method_afterMain__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Initializer* This = dmi_cast<Initializer>(This_);
    This->afterMain();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Initializer_method_beforeMain__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Initializer* This = dmi_cast<Initializer>(This_);
    This->beforeMain();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Initializer_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Initializer_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Initializer_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Initializer_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Initializer_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Initializer_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Initializer_MetainfoWrapper::Initializer_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Initializer_methods_afterMain__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Initializer_methods_afterMain__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Initializer_method_afterMain__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "afterMain", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_afterMain", // alternative name of method
  -1, // altlabelHashCode
  Initializer_methods_afterMain__V_args, // the arguments
  0, //arguments count
  Initializer_methods_afterMain__V_exceptions, // the declared exceptions
  Initializer_MetainfoWrapper::Initializer_method_afterMain__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Initializer_methods_beforeMain__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Initializer_methods_beforeMain__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Initializer_method_beforeMain__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "beforeMain", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0_beforeMain", // alternative name of method
  -1, // altlabelHashCode
  Initializer_methods_beforeMain__V_args, // the arguments
  0, //arguments count
  Initializer_methods_beforeMain__V_exceptions, // the declared exceptions
  Initializer_MetainfoWrapper::Initializer_method_beforeMain__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Initializer_methods[] = 
{
  &Initializer_method_GetClass__L_acdk_lang_RClass_,
  &Initializer_method_afterMain__V,
  &Initializer_method_beforeMain__V,
  0
};


struct Initializer_MetaInfoInitializer
{  Initializer_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Initializer::clazzInfo();
    ci->fields =  _Initializer_fields;
    ci->methods =  _Initializer_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Initializer_MetaInfoInitializer Initializer_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
SystemImpl_create_array(int length)
{
  return new ObjectArrayImpl<RSystemImpl>(length);
}

//static
::acdk::lang::RObject
SystemImpl_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SystemImpl_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SystemImpl_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SystemImpl::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SystemImpl_method_SystemImpl__LRSystemImpl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SystemImpl();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SystemImpl_method__filterArgs_INLRStringArray__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SystemImpl* This = dmi_cast<SystemImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SystemImpl::_filterArgs(::acdk::lang::dmi::castTo< RStringArray>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->_filterArgs(::acdk::lang::dmi::castTo< RStringArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SystemImpl_method__loadAppProperties__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SystemImpl* This = dmi_cast<SystemImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SystemImpl::_loadAppProperties();
    else
        This->_loadAppProperties();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SystemImpl_method_deinit__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SystemImpl* This = dmi_cast<SystemImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SystemImpl::deinit();
    else
        This->deinit();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SystemImpl_method_environment__Lacdk_util_RProperties__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SystemImpl* This = dmi_cast<SystemImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SystemImpl::environment();
    else
        ret = (::acdk::lang::RObject)This->environment();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SystemImpl_method_getAcdkPath__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SystemImpl* This = dmi_cast<SystemImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SystemImpl::getAcdkPath();
    else
        ret = (::acdk::lang::RObject)This->getAcdkPath();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SystemImpl_method_getFilteredArgs__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SystemImpl* This = dmi_cast<SystemImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SystemImpl::getFilteredArgs();
    else
        ret = (::acdk::lang::RObject)This->getFilteredArgs();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SystemImpl_method_getUnfilteredArgs__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SystemImpl* This = dmi_cast<SystemImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SystemImpl::getUnfilteredArgs();
    else
        ret = (::acdk::lang::RObject)This->getUnfilteredArgs();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SystemImpl_method_properties__Lacdk_util_RProperties__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SystemImpl* This = dmi_cast<SystemImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SystemImpl::properties();
    else
        ret = (::acdk::lang::RObject)This->properties();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SystemImpl_method_reinit__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SystemImpl* This = dmi_cast<SystemImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SystemImpl::reinit();
    else
        This->reinit();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SystemImpl_method_setFilteredArgs_INLRStringArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SystemImpl* This = dmi_cast<SystemImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SystemImpl::setFilteredArgs(::acdk::lang::dmi::castTo< RStringArray>(args[0], dc));
    else
        This->setFilteredArgs(::acdk::lang::dmi::castTo< RStringArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SystemImpl_method_setProperties_INLacdk_util_RProperties__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SystemImpl* This = dmi_cast<SystemImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SystemImpl::setProperties(::acdk::lang::dmi::castTo< acdk::util::RProperties>(args[0], dc));
    else
        This->setProperties(::acdk::lang::dmi::castTo< acdk::util::RProperties>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SystemImpl_fields__acdkPath_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SystemImpl* This = dmi_cast<SystemImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_acdkPath, flags);
    else
      This->_acdkPath = ::acdk::lang::dmi::castTo< RStringArray>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SystemImpl_fields__environment_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SystemImpl* This = dmi_cast<SystemImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_environment, flags);
    else
      This->_environment = ::acdk::lang::dmi::castTo< acdk::util::RProperties>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SystemImpl_fields__filteredArgs_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SystemImpl* This = dmi_cast<SystemImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_filteredArgs, flags);
    else
      This->_filteredArgs = ::acdk::lang::dmi::castTo< RStringArray>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SystemImpl_fields__mainThread_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SystemImpl* This = dmi_cast<SystemImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_mainThread, flags);
    else
      This->_mainThread = ::acdk::lang::dmi::castTo< RThread>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SystemImpl_fields__properties_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SystemImpl* This = dmi_cast<SystemImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_properties, flags);
    else
      This->_properties = ::acdk::lang::dmi::castTo< acdk::util::RProperties>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SystemImpl_fields__systemPropertiesListener_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SystemImpl* This = dmi_cast<SystemImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_systemPropertiesListener, flags);
    else
      This->_systemPropertiesListener = ::acdk::lang::dmi::castTo< acdk::util::RPropertiesChangeListener>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SystemImpl_fields__unfilteredArgs_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SystemImpl* This = dmi_cast<SystemImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_unfilteredArgs, flags);
    else
      This->_unfilteredArgs = ::acdk::lang::dmi::castTo< RStringArray>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo SystemImpl_fields__acdkPath = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_acdkPath", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(),
  SystemImpl_MetainfoWrapper::SystemImpl_fields__acdkPath_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SystemImpl_fields__environment = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_environment", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RProperties::clazzInfo(),
  SystemImpl_MetainfoWrapper::SystemImpl_fields__environment_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SystemImpl_fields__filteredArgs = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_filteredArgs", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(),
  SystemImpl_MetainfoWrapper::SystemImpl_fields__filteredArgs_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SystemImpl_fields__mainThread = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_mainThread", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThread::clazzInfo(),
  SystemImpl_MetainfoWrapper::SystemImpl_fields__mainThread_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SystemImpl_fields__properties = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_properties", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RProperties::clazzInfo(),
  SystemImpl_MetainfoWrapper::SystemImpl_fields__properties_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SystemImpl_fields__systemPropertiesListener = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_systemPropertiesListener", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RPropertiesChangeListener::clazzInfo(),
  SystemImpl_MetainfoWrapper::SystemImpl_fields__systemPropertiesListener_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SystemImpl_fields__unfilteredArgs = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_unfilteredArgs", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(),
  SystemImpl_MetainfoWrapper::SystemImpl_fields__unfilteredArgs_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _SystemImpl_fields[] = 
{
  &SystemImpl_fields__acdkPath,
  &SystemImpl_fields__environment,
  &SystemImpl_fields__filteredArgs,
  &SystemImpl_fields__mainThread,
  &SystemImpl_fields__properties,
  &SystemImpl_fields__systemPropertiesListener,
  &SystemImpl_fields__unfilteredArgs,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SystemImpl_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SystemImpl_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SystemImpl_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_c_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SystemImpl_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SystemImpl_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SystemImpl_MetainfoWrapper::SystemImpl_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SystemImpl_methods_SystemImpl__LRSystemImpl__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SystemImpl_methods_SystemImpl__LRSystemImpl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SystemImpl_method_SystemImpl__LRSystemImpl_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SystemImpl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SystemImpl::clazzInfo(), // return type
  "_0_SystemImpl", // alternative name of method
  -1, // altlabelHashCode
  SystemImpl_methods_SystemImpl__LRSystemImpl__args, // the arguments
  0, //arguments count
  SystemImpl_methods_SystemImpl__LRSystemImpl__exceptions, // the declared exceptions
  SystemImpl_MetainfoWrapper::SystemImpl_method_SystemImpl__LRSystemImpl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SystemImpl_methods__filterArgs_INLRStringArray__LRStringArray__arg_args = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "args", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SystemImpl_methods__filterArgs_INLRStringArray__LRStringArray__args[] = 
{
  &SystemImpl_methods__filterArgs_INLRStringArray__LRStringArray__arg_args,
  0
};

::acdk::lang::dmi::ClazzInfo* SystemImpl_methods__filterArgs_INLRStringArray__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SystemImpl_method__filterArgs_INLRStringArray__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_filterArgs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_b__filterArgs", // alternative name of method
  -1, // altlabelHashCode
  SystemImpl_methods__filterArgs_INLRStringArray__LRStringArray__args, // the arguments
  0, //arguments count
  SystemImpl_methods__filterArgs_INLRStringArray__LRStringArray__exceptions, // the declared exceptions
  SystemImpl_MetainfoWrapper::SystemImpl_method__filterArgs_INLRStringArray__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SystemImpl_methods__loadAppProperties__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SystemImpl_methods__loadAppProperties__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SystemImpl_method__loadAppProperties__V = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_loadAppProperties", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a__loadAppProperties", // alternative name of method
  -1, // altlabelHashCode
  SystemImpl_methods__loadAppProperties__V_args, // the arguments
  0, //arguments count
  SystemImpl_methods__loadAppProperties__V_exceptions, // the declared exceptions
  SystemImpl_MetainfoWrapper::SystemImpl_method__loadAppProperties__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SystemImpl_methods_deinit__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SystemImpl_methods_deinit__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SystemImpl_method_deinit__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deinit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_deinit", // alternative name of method
  -1, // altlabelHashCode
  SystemImpl_methods_deinit__V_args, // the arguments
  0, //arguments count
  SystemImpl_methods_deinit__V_exceptions, // the declared exceptions
  SystemImpl_MetainfoWrapper::SystemImpl_method_deinit__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SystemImpl_methods_environment__Lacdk_util_RProperties__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SystemImpl_methods_environment__Lacdk_util_RProperties__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SystemImpl_method_environment__Lacdk_util_RProperties_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "environment", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RProperties::clazzInfo(), // return type
  "_4_environment", // alternative name of method
  -1, // altlabelHashCode
  SystemImpl_methods_environment__Lacdk_util_RProperties__args, // the arguments
  0, //arguments count
  SystemImpl_methods_environment__Lacdk_util_RProperties__exceptions, // the declared exceptions
  SystemImpl_MetainfoWrapper::SystemImpl_method_environment__Lacdk_util_RProperties__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SystemImpl_methods_getAcdkPath__LRStringArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SystemImpl_methods_getAcdkPath__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SystemImpl_method_getAcdkPath__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAcdkPath", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_5_getAcdkPath", // alternative name of method
  -1, // altlabelHashCode
  SystemImpl_methods_getAcdkPath__LRStringArray__args, // the arguments
  0, //arguments count
  SystemImpl_methods_getAcdkPath__LRStringArray__exceptions, // the declared exceptions
  SystemImpl_MetainfoWrapper::SystemImpl_method_getAcdkPath__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SystemImpl_methods_getFilteredArgs__LRStringArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SystemImpl_methods_getFilteredArgs__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SystemImpl_method_getFilteredArgs__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFilteredArgs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_7_getFilteredArgs", // alternative name of method
  -1, // altlabelHashCode
  SystemImpl_methods_getFilteredArgs__LRStringArray__args, // the arguments
  0, //arguments count
  SystemImpl_methods_getFilteredArgs__LRStringArray__exceptions, // the declared exceptions
  SystemImpl_MetainfoWrapper::SystemImpl_method_getFilteredArgs__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SystemImpl_methods_getUnfilteredArgs__LRStringArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SystemImpl_methods_getUnfilteredArgs__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SystemImpl_method_getUnfilteredArgs__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getUnfilteredArgs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_8_getUnfilteredArgs", // alternative name of method
  -1, // altlabelHashCode
  SystemImpl_methods_getUnfilteredArgs__LRStringArray__args, // the arguments
  0, //arguments count
  SystemImpl_methods_getUnfilteredArgs__LRStringArray__exceptions, // the declared exceptions
  SystemImpl_MetainfoWrapper::SystemImpl_method_getUnfilteredArgs__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SystemImpl_methods_properties__Lacdk_util_RProperties__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SystemImpl_methods_properties__Lacdk_util_RProperties__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SystemImpl_method_properties__Lacdk_util_RProperties_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "properties", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RProperties::clazzInfo(), // return type
  "_3_properties", // alternative name of method
  -1, // altlabelHashCode
  SystemImpl_methods_properties__Lacdk_util_RProperties__args, // the arguments
  0, //arguments count
  SystemImpl_methods_properties__Lacdk_util_RProperties__exceptions, // the declared exceptions
  SystemImpl_MetainfoWrapper::SystemImpl_method_properties__Lacdk_util_RProperties__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SystemImpl_methods_reinit__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SystemImpl_methods_reinit__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SystemImpl_method_reinit__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "reinit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_reinit", // alternative name of method
  -1, // altlabelHashCode
  SystemImpl_methods_reinit__V_args, // the arguments
  0, //arguments count
  SystemImpl_methods_reinit__V_exceptions, // the declared exceptions
  SystemImpl_MetainfoWrapper::SystemImpl_method_reinit__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SystemImpl_methods_setFilteredArgs_INLRStringArray__V_arg_args = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "args", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SystemImpl_methods_setFilteredArgs_INLRStringArray__V_args[] = 
{
  &SystemImpl_methods_setFilteredArgs_INLRStringArray__V_arg_args,
  0
};

::acdk::lang::dmi::ClazzInfo* SystemImpl_methods_setFilteredArgs_INLRStringArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SystemImpl_method_setFilteredArgs_INLRStringArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFilteredArgs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_setFilteredArgs", // alternative name of method
  -1, // altlabelHashCode
  SystemImpl_methods_setFilteredArgs_INLRStringArray__V_args, // the arguments
  0, //arguments count
  SystemImpl_methods_setFilteredArgs_INLRStringArray__V_exceptions, // the declared exceptions
  SystemImpl_MetainfoWrapper::SystemImpl_method_setFilteredArgs_INLRStringArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SystemImpl_methods_setProperties_INLacdk_util_RProperties__V_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RProperties::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SystemImpl_methods_setProperties_INLacdk_util_RProperties__V_args[] = 
{
  &SystemImpl_methods_setProperties_INLacdk_util_RProperties__V_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* SystemImpl_methods_setProperties_INLacdk_util_RProperties__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SystemImpl_method_setProperties_INLacdk_util_RProperties__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setProperties", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_setProperties", // alternative name of method
  -1, // altlabelHashCode
  SystemImpl_methods_setProperties_INLacdk_util_RProperties__V_args, // the arguments
  0, //arguments count
  SystemImpl_methods_setProperties_INLacdk_util_RProperties__V_exceptions, // the declared exceptions
  SystemImpl_MetainfoWrapper::SystemImpl_method_setProperties_INLacdk_util_RProperties__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SystemImpl_methods[] = 
{
  &SystemImpl_method_GetClass__L_acdk_lang_RClass_,
  &SystemImpl_method_SystemImpl__LRSystemImpl_,
  &SystemImpl_method__filterArgs_INLRStringArray__LRStringArray_,
  &SystemImpl_method__loadAppProperties__V,
  &SystemImpl_method_deinit__V,
  &SystemImpl_method_environment__Lacdk_util_RProperties_,
  &SystemImpl_method_getAcdkPath__LRStringArray_,
  &SystemImpl_method_getFilteredArgs__LRStringArray_,
  &SystemImpl_method_getUnfilteredArgs__LRStringArray_,
  &SystemImpl_method_properties__Lacdk_util_RProperties_,
  &SystemImpl_method_reinit__V,
  &SystemImpl_method_setFilteredArgs_INLRStringArray__V,
  &SystemImpl_method_setProperties_INLacdk_util_RProperties__V,
  0
};


struct SystemImpl_MetaInfoInitializer
{  SystemImpl_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SystemImpl::clazzInfo();
    ci->fields =  _SystemImpl_fields;
    ci->methods =  _SystemImpl_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SystemImpl_MetaInfoInitializer SystemImpl_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
System_create_array(int length)
{
  return new ObjectArrayImpl<RSystem>(length);
}

//static
::acdk::lang::RObject
System_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class System_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)System::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_addAcdkPath_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    System::addAcdkPath(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_afterMain__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = System::afterMain();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_afterUsersMain__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = System::afterUsersMain();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_configurationLoaded__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = System::configurationLoaded();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_currentTimeMillis__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = System::currentTimeMillis();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_deInitAsSharedLibrary__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    System::deInitAsSharedLibrary();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_exit_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    System::exit(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_gc__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = System::gc();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_getAcdkHome__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)System::getAcdkHome();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_getAcdkPath__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)System::getAcdkPath();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_getAcdkToolsHome__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)System::getAcdkToolsHome();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_getArgc__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = outOf(System::getArgc());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_getArguments__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)System::getArguments();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_getEnvPath__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)System::getEnvPath();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_getEnvironment__Lacdk_util_RProperties__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)System::getEnvironment();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_getErrmsg__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)System::getErrmsg();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_getErrmsg_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)System::getErrmsg(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_getErrno__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = System::getErrno();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_getLastError__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)System::getLastError();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_getMaxMemoryUsage__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = System::getMaxMemoryUsage();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_getModuleDir__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)System::getModuleDir();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_getModuleName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)System::getModuleName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_getModuleName_Z_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)System::getModuleName(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_getModulePath__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)System::getModulePath();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_getObjectList_I_LRObjectArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)System::getObjectList(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_getOriginalArgc__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = outOf(System::getOriginalArgc());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_getPlatformFlags__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = System::getPlatformFlags();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_getProperties__Lacdk_util_RProperties__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)System::getProperties();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_getProperty_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)System::getProperty(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_getProperty_INLRString_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)System::getProperty(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_getRootObjects__LRObjectArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)System::getRootObjects();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_getSystem__LRSystemImpl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)System::getSystem();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_getSystemCmdLineOps__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)System::getSystemCmdLineOps();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_getSystemStatus__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = outOf(System::getSystemStatus());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_getThreadMaxMemoryUsage__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = System::getThreadMaxMemoryUsage();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_getUnfilteredArguments__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)System::getUnfilteredArguments();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_identityHashCode_INLRObject__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = System::identityHashCode(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_initAsSharedLibrary__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    System::initAsSharedLibrary();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_insertAcdkPath_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    System::insertAcdkPath(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_isInMain__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = System::isInMain();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_isInUserMain__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = System::isInUserMain();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_loadLibrary_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    System::loadLibrary(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_printStackTrace_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    System::printStackTrace(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_printStackTrace__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    System::printStackTrace();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_printStackTrace_INLacdk_io_RPrintWriter_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    System::printStackTrace(::acdk::lang::dmi::castTo< acdk::io::RPrintWriter>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_printStackTrace_INLacdk_io_RPrintWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    System::printStackTrace(::acdk::lang::dmi::castTo< acdk::io::RPrintWriter>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_printStackTrace_INLacdk_io_RPrintWriter_INLRStackFrameArray_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    System::printStackTrace(::acdk::lang::dmi::castTo< acdk::io::RPrintWriter>(args[0], dc), ::acdk::lang::dmi::castTo< RStackFrameArray>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_printStackTrace_INLacdk_io_RPrintWriter_INLRStackFrameArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    System::printStackTrace(::acdk::lang::dmi::castTo< acdk::io::RPrintWriter>(args[0], dc), ::acdk::lang::dmi::castTo< RStackFrameArray>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_reinit__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    System::reinit();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_resetErrno__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    System::resetErrno();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_setErr_INLacdk_io_RPrintWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    System::setErr(::acdk::lang::dmi::castTo< acdk::io::RPrintWriter>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_setIn_INLacdk_io_RInputReader__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    System::setIn(::acdk::lang::dmi::castTo< acdk::io::RInputReader>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_setMaxMemoryUsage_J_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    System::setMaxMemoryUsage(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_setOut_INLacdk_io_RPrintWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    System::setOut(::acdk::lang::dmi::castTo< acdk::io::RPrintWriter>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_setProperties_INLacdk_util_RProperties__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    System::setProperties(::acdk::lang::dmi::castTo< acdk::util::RProperties>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_setProperty_INLRString_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)System::setProperty(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  System_method_setThreadMaxMemoryUsage_J_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    System::setThreadMaxMemoryUsage(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  System_fields__gSystem_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(System::_gSystem, flags);
    else
      System::_gSystem = ::acdk::lang::dmi::castTo< RSystemImpl>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  System_fields_err_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(System::err, flags);
    else
      System::err = ::acdk::lang::dmi::castTo< acdk::io::RPrintWriter>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  System_fields_hasConsole_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(System::hasConsole, flags);
    else
      System::hasConsole = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  System_fields_in_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(System::in, flags);
    else
      System::in = ::acdk::lang::dmi::castTo< acdk::io::RInputReader>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  System_fields_out_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(System::out, flags);
    else
      System::out = ::acdk::lang::dmi::castTo< acdk::io::RPrintWriter>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo System_fields__gSystem = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_gSystem", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSystemImpl::clazzInfo(),
  System_MetainfoWrapper::System_fields__gSystem_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo System_fields_err = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "err", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo(),
  System_MetainfoWrapper::System_fields_err_accessor, // read/write access to this fields
  (void*)System::err._ref_this() // address of field
};

::acdk::lang::dmi::ClazzFieldInfo System_fields_hasConsole = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "hasConsole", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  System_MetainfoWrapper::System_fields_hasConsole_accessor, // read/write access to this fields
  (void*)&System::hasConsole // address of field
};

::acdk::lang::dmi::ClazzFieldInfo System_fields_in = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "in", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RInputReader::clazzInfo(),
  System_MetainfoWrapper::System_fields_in_accessor, // read/write access to this fields
  (void*)System::in._ref_this() // address of field
};

::acdk::lang::dmi::ClazzFieldInfo System_fields_out = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "out", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo(),
  System_MetainfoWrapper::System_fields_out_accessor, // read/write access to this fields
  (void*)System::out._ref_this() // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _System_fields[] = 
{
  &System_fields__gSystem,
  &System_fields_err,
  &System_fields_hasConsole,
  &System_fields_in,
  &System_fields_out,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_V_GetClass", // alternative name of method
  -1, // altlabelHashCode
  System_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  System_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo System_methods_addAcdkPath_INLRString__V_arg_dir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "dir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_addAcdkPath_INLRString__V_args[] = 
{
  &System_methods_addAcdkPath_INLRString__V_arg_dir,
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_addAcdkPath_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_addAcdkPath_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addAcdkPath", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_s_addAcdkPath", // alternative name of method
  -1, // altlabelHashCode
  System_methods_addAcdkPath_INLRString__V_args, // the arguments
  0, //arguments count
  System_methods_addAcdkPath_INLRString__V_exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_addAcdkPath_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_afterMain__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_afterMain__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_afterMain__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "afterMain", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_G_afterMain", // alternative name of method
  -1, // altlabelHashCode
  System_methods_afterMain__Z_args, // the arguments
  0, //arguments count
  System_methods_afterMain__Z_exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_afterMain__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_afterUsersMain__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_afterUsersMain__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_afterUsersMain__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "afterUsersMain", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_F_afterUsersMain", // alternative name of method
  -1, // altlabelHashCode
  System_methods_afterUsersMain__Z_args, // the arguments
  0, //arguments count
  System_methods_afterUsersMain__Z_exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_afterUsersMain__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_configurationLoaded__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_configurationLoaded__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_configurationLoaded__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "configurationLoaded", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_E_configurationLoaded", // alternative name of method
  -1, // altlabelHashCode
  System_methods_configurationLoaded__Z_args, // the arguments
  0, //arguments count
  System_methods_configurationLoaded__Z_exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_configurationLoaded__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_currentTimeMillis__J_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_currentTimeMillis__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_currentTimeMillis__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "currentTimeMillis", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_3_currentTimeMillis", // alternative name of method
  -1, // altlabelHashCode
  System_methods_currentTimeMillis__J_args, // the arguments
  0, //arguments count
  System_methods_currentTimeMillis__J_exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_currentTimeMillis__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_deInitAsSharedLibrary__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_deInitAsSharedLibrary__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_deInitAsSharedLibrary__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deInitAsSharedLibrary", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_deInitAsSharedLibrary", // alternative name of method
  -1, // altlabelHashCode
  System_methods_deInitAsSharedLibrary__V_args, // the arguments
  0, //arguments count
  System_methods_deInitAsSharedLibrary__V_exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_deInitAsSharedLibrary__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo System_methods_exit_I_V_arg_status = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "status", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_exit_I_V_args[] = 
{
  &System_methods_exit_I_V_arg_status,
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_exit_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_exit_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "exit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_exit", // alternative name of method
  -1, // altlabelHashCode
  System_methods_exit_I_V_args, // the arguments
  0, //arguments count
  System_methods_exit_I_V_exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_exit_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_gc__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_gc__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_gc__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "gc", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_gc", // alternative name of method
  -1, // altlabelHashCode
  System_methods_gc__Z_args, // the arguments
  0, //arguments count
  System_methods_gc__Z_exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_gc__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_getAcdkHome__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_getAcdkHome__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_getAcdkHome__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAcdkHome", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_o_getAcdkHome", // alternative name of method
  -1, // altlabelHashCode
  System_methods_getAcdkHome__LRString__args, // the arguments
  0, //arguments count
  System_methods_getAcdkHome__LRString__exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_getAcdkHome__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_getAcdkPath__LRStringArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_getAcdkPath__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_getAcdkPath__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAcdkPath", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_r_getAcdkPath", // alternative name of method
  -1, // altlabelHashCode
  System_methods_getAcdkPath__LRStringArray__args, // the arguments
  0, //arguments count
  System_methods_getAcdkPath__LRStringArray__exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_getAcdkPath__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_getAcdkToolsHome__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_getAcdkToolsHome__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_getAcdkToolsHome__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAcdkToolsHome", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_p_getAcdkToolsHome", // alternative name of method
  -1, // altlabelHashCode
  System_methods_getAcdkToolsHome__LRString__args, // the arguments
  0, //arguments count
  System_methods_getAcdkToolsHome__LRString__exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_getAcdkToolsHome__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_getArgc__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_getArgc__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_getArgc__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOut | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getArgc", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_getArgc", // alternative name of method
  -1, // altlabelHashCode
  System_methods_getArgc__I_args, // the arguments
  0, //arguments count
  System_methods_getArgc__I_exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_getArgc__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_getArguments__LRStringArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_getArguments__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_getArguments__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getArguments", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_9_getArguments", // alternative name of method
  -1, // altlabelHashCode
  System_methods_getArguments__LRStringArray__args, // the arguments
  0, //arguments count
  System_methods_getArguments__LRStringArray__exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_getArguments__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_getEnvPath__LRStringArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_getEnvPath__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_getEnvPath__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEnvPath", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_q_getEnvPath", // alternative name of method
  -1, // altlabelHashCode
  System_methods_getEnvPath__LRStringArray__args, // the arguments
  0, //arguments count
  System_methods_getEnvPath__LRStringArray__exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_getEnvPath__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_getEnvironment__Lacdk_util_RProperties__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_getEnvironment__Lacdk_util_RProperties__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_getEnvironment__Lacdk_util_RProperties_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEnvironment", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RProperties::clazzInfo(), // return type
  "_c_getEnvironment", // alternative name of method
  -1, // altlabelHashCode
  System_methods_getEnvironment__Lacdk_util_RProperties__args, // the arguments
  0, //arguments count
  System_methods_getEnvironment__Lacdk_util_RProperties__exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_getEnvironment__Lacdk_util_RProperties__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_getErrmsg__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_getErrmsg__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_getErrmsg__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getErrmsg", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_J_getErrmsg", // alternative name of method
  -1, // altlabelHashCode
  System_methods_getErrmsg__LRString__args, // the arguments
  0, //arguments count
  System_methods_getErrmsg__LRString__exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_getErrmsg__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo System_methods_getErrmsg_I_LRString__arg_errnumber = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "errnumber", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_getErrmsg_I_LRString__args[] = 
{
  &System_methods_getErrmsg_I_LRString__arg_errnumber,
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_getErrmsg_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_getErrmsg_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getErrmsg", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_K_getErrmsg", // alternative name of method
  -1, // altlabelHashCode
  System_methods_getErrmsg_I_LRString__args, // the arguments
  0, //arguments count
  System_methods_getErrmsg_I_LRString__exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_getErrmsg_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_getErrno__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_getErrno__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_getErrno__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getErrno", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_H_getErrno", // alternative name of method
  -1, // altlabelHashCode
  System_methods_getErrno__I_args, // the arguments
  0, //arguments count
  System_methods_getErrno__I_exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_getErrno__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_getLastError__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_getLastError__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_getLastError__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLastError", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_L_getLastError", // alternative name of method
  -1, // altlabelHashCode
  System_methods_getLastError__LRString__args, // the arguments
  0, //arguments count
  System_methods_getLastError__LRString__exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_getLastError__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_getMaxMemoryUsage__J_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_getMaxMemoryUsage__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_getMaxMemoryUsage__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxMemoryUsage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_O_getMaxMemoryUsage", // alternative name of method
  -1, // altlabelHashCode
  System_methods_getMaxMemoryUsage__J_args, // the arguments
  0, //arguments count
  System_methods_getMaxMemoryUsage__J_exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_getMaxMemoryUsage__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_getModuleDir__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_getModuleDir__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_getModuleDir__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getModuleDir", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_n_getModuleDir", // alternative name of method
  -1, // altlabelHashCode
  System_methods_getModuleDir__LRString__args, // the arguments
  0, //arguments count
  System_methods_getModuleDir__LRString__exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_getModuleDir__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_getModuleName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_getModuleName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_getModuleName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getModuleName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_m_getModuleName", // alternative name of method
  -1, // altlabelHashCode
  System_methods_getModuleName__LRString__args, // the arguments
  0, //arguments count
  System_methods_getModuleName__LRString__exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_getModuleName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo System_methods_getModuleName_Z_LRString__arg_stripExt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "stripExt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_getModuleName_Z_LRString__args[] = 
{
  &System_methods_getModuleName_Z_LRString__arg_stripExt,
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_getModuleName_Z_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_getModuleName_Z_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getModuleName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_l_getModuleName", // alternative name of method
  -1, // altlabelHashCode
  System_methods_getModuleName_Z_LRString__args, // the arguments
  0, //arguments count
  System_methods_getModuleName_Z_LRString__exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_getModuleName_Z_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_getModulePath__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_getModulePath__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_getModulePath__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getModulePath", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_k_getModulePath", // alternative name of method
  -1, // altlabelHashCode
  System_methods_getModulePath__LRString__args, // the arguments
  0, //arguments count
  System_methods_getModulePath__LRString__exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_getModulePath__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo System_methods_getObjectList_I_LRObjectArray__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_getObjectList_I_LRObjectArray__args[] = 
{
  &System_methods_getObjectList_I_LRObjectArray__arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_getObjectList_I_LRObjectArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_getObjectList_I_LRObjectArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getObjectList", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo(), // return type
  "_U_getObjectList", // alternative name of method
  -1, // altlabelHashCode
  System_methods_getObjectList_I_LRObjectArray__args, // the arguments
  0, //arguments count
  System_methods_getObjectList_I_LRObjectArray__exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_getObjectList_I_LRObjectArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_getOriginalArgc__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_getOriginalArgc__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_getOriginalArgc__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOut | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getOriginalArgc", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_getOriginalArgc", // alternative name of method
  -1, // altlabelHashCode
  System_methods_getOriginalArgc__I_args, // the arguments
  0, //arguments count
  System_methods_getOriginalArgc__I_exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_getOriginalArgc__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_getPlatformFlags__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_getPlatformFlags__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_getPlatformFlags__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPlatformFlags", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_S_getPlatformFlags", // alternative name of method
  -1, // altlabelHashCode
  System_methods_getPlatformFlags__I_args, // the arguments
  0, //arguments count
  System_methods_getPlatformFlags__I_exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_getPlatformFlags__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_getProperties__Lacdk_util_RProperties__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_getProperties__Lacdk_util_RProperties__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_getProperties__Lacdk_util_RProperties_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getProperties", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RProperties::clazzInfo(), // return type
  "_b_getProperties", // alternative name of method
  -1, // altlabelHashCode
  System_methods_getProperties__Lacdk_util_RProperties__args, // the arguments
  0, //arguments count
  System_methods_getProperties__Lacdk_util_RProperties__exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_getProperties__Lacdk_util_RProperties__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo System_methods_getProperty_INLRString__LRString__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_getProperty_INLRString__LRString__args[] = 
{
  &System_methods_getProperty_INLRString__LRString__arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_getProperty_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_getProperty_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getProperty", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_d_getProperty", // alternative name of method
  -1, // altlabelHashCode
  System_methods_getProperty_INLRString__LRString__args, // the arguments
  0, //arguments count
  System_methods_getProperty_INLRString__LRString__exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_getProperty_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo System_methods_getProperty_INLRString_INLRString__LRString__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo System_methods_getProperty_INLRString_INLRString__LRString__arg_def = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "def", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_getProperty_INLRString_INLRString__LRString__args[] = 
{
  &System_methods_getProperty_INLRString_INLRString__LRString__arg_key,
  &System_methods_getProperty_INLRString_INLRString__LRString__arg_def,
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_getProperty_INLRString_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_getProperty_INLRString_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getProperty", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_e_getProperty", // alternative name of method
  -1, // altlabelHashCode
  System_methods_getProperty_INLRString_INLRString__LRString__args, // the arguments
  0, //arguments count
  System_methods_getProperty_INLRString_INLRString__LRString__exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_getProperty_INLRString_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_getRootObjects__LRObjectArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_getRootObjects__LRObjectArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_getRootObjects__LRObjectArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRootObjects", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo(), // return type
  "_T_getRootObjects", // alternative name of method
  -1, // altlabelHashCode
  System_methods_getRootObjects__LRObjectArray__args, // the arguments
  0, //arguments count
  System_methods_getRootObjects__LRObjectArray__exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_getRootObjects__LRObjectArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_getSystem__LRSystemImpl__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_getSystem__LRSystemImpl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_getSystem__LRSystemImpl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSystem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSystemImpl::clazzInfo(), // return type
  "_8_getSystem", // alternative name of method
  -1, // altlabelHashCode
  System_methods_getSystem__LRSystemImpl__args, // the arguments
  0, //arguments count
  System_methods_getSystem__LRSystemImpl__exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_getSystem__LRSystemImpl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_getSystemCmdLineOps__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_getSystemCmdLineOps__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_getSystemCmdLineOps__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSystemCmdLineOps", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_M_getSystemCmdLineOps", // alternative name of method
  -1, // altlabelHashCode
  System_methods_getSystemCmdLineOps__LRString__args, // the arguments
  0, //arguments count
  System_methods_getSystemCmdLineOps__LRString__exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_getSystemCmdLineOps__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_getSystemStatus__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_getSystemStatus__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_getSystemStatus__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOut | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSystemStatus", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_0_getSystemStatus", // alternative name of method
  -1, // altlabelHashCode
  System_methods_getSystemStatus__I_args, // the arguments
  0, //arguments count
  System_methods_getSystemStatus__I_exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_getSystemStatus__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_getThreadMaxMemoryUsage__J_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_getThreadMaxMemoryUsage__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_getThreadMaxMemoryUsage__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getThreadMaxMemoryUsage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_Q_getThreadMaxMemoryUsage", // alternative name of method
  -1, // altlabelHashCode
  System_methods_getThreadMaxMemoryUsage__J_args, // the arguments
  0, //arguments count
  System_methods_getThreadMaxMemoryUsage__J_exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_getThreadMaxMemoryUsage__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_getUnfilteredArguments__LRStringArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_getUnfilteredArguments__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_getUnfilteredArguments__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getUnfilteredArguments", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_a_getUnfilteredArguments", // alternative name of method
  -1, // altlabelHashCode
  System_methods_getUnfilteredArguments__LRStringArray__args, // the arguments
  0, //arguments count
  System_methods_getUnfilteredArguments__LRStringArray__exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_getUnfilteredArguments__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo System_methods_identityHashCode_INLRObject__I_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_identityHashCode_INLRObject__I_args[] = 
{
  &System_methods_identityHashCode_INLRObject__I_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_identityHashCode_INLRObject__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_identityHashCode_INLRObject__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "identityHashCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_A_identityHashCode", // alternative name of method
  -1, // altlabelHashCode
  System_methods_identityHashCode_INLRObject__I_args, // the arguments
  0, //arguments count
  System_methods_identityHashCode_INLRObject__I_exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_identityHashCode_INLRObject__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_initAsSharedLibrary__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_initAsSharedLibrary__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_initAsSharedLibrary__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "initAsSharedLibrary", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_initAsSharedLibrary", // alternative name of method
  -1, // altlabelHashCode
  System_methods_initAsSharedLibrary__V_args, // the arguments
  0, //arguments count
  System_methods_initAsSharedLibrary__V_exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_initAsSharedLibrary__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo System_methods_insertAcdkPath_INLRString__V_arg_dir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "dir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_insertAcdkPath_INLRString__V_args[] = 
{
  &System_methods_insertAcdkPath_INLRString__V_arg_dir,
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_insertAcdkPath_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_insertAcdkPath_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insertAcdkPath", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_t_insertAcdkPath", // alternative name of method
  -1, // altlabelHashCode
  System_methods_insertAcdkPath_INLRString__V_args, // the arguments
  0, //arguments count
  System_methods_insertAcdkPath_INLRString__V_exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_insertAcdkPath_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_isInMain__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_isInMain__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_isInMain__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isInMain", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_C_isInMain", // alternative name of method
  -1, // altlabelHashCode
  System_methods_isInMain__Z_args, // the arguments
  0, //arguments count
  System_methods_isInMain__Z_exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_isInMain__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_isInUserMain__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_isInUserMain__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_isInUserMain__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isInUserMain", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_D_isInUserMain", // alternative name of method
  -1, // altlabelHashCode
  System_methods_isInUserMain__Z_args, // the arguments
  0, //arguments count
  System_methods_isInUserMain__Z_exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_isInUserMain__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo System_methods_loadLibrary_INLRString__V_arg_libname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "libname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_loadLibrary_INLRString__V_args[] = 
{
  &System_methods_loadLibrary_INLRString__V_arg_libname,
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_loadLibrary_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_loadLibrary_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "loadLibrary", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_N_loadLibrary", // alternative name of method
  -1, // altlabelHashCode
  System_methods_loadLibrary_INLRString__V_args, // the arguments
  0, //arguments count
  System_methods_loadLibrary_INLRString__V_exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_loadLibrary_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo System_methods_printStackTrace_I_V_arg_ignoreFromTop = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "ignoreFromTop", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_printStackTrace_I_V_args[] = 
{
  &System_methods_printStackTrace_I_V_arg_ignoreFromTop,
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_printStackTrace_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_printStackTrace_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "printStackTrace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_u_printStackTrace", // alternative name of method
  -1, // altlabelHashCode
  System_methods_printStackTrace_I_V_args, // the arguments
  0, //arguments count
  System_methods_printStackTrace_I_V_exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_printStackTrace_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_printStackTrace__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_printStackTrace__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_printStackTrace__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "printStackTrace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_v_printStackTrace", // alternative name of method
  -1, // altlabelHashCode
  System_methods_printStackTrace__V_args, // the arguments
  0, //arguments count
  System_methods_printStackTrace__V_exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_printStackTrace__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo System_methods_printStackTrace_INLacdk_io_RPrintWriter_I_V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo System_methods_printStackTrace_INLacdk_io_RPrintWriter_I_V_arg_ignoreFromTop = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "ignoreFromTop", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_printStackTrace_INLacdk_io_RPrintWriter_I_V_args[] = 
{
  &System_methods_printStackTrace_INLacdk_io_RPrintWriter_I_V_arg_out,
  &System_methods_printStackTrace_INLacdk_io_RPrintWriter_I_V_arg_ignoreFromTop,
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_printStackTrace_INLacdk_io_RPrintWriter_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_printStackTrace_INLacdk_io_RPrintWriter_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "printStackTrace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_w_printStackTrace", // alternative name of method
  -1, // altlabelHashCode
  System_methods_printStackTrace_INLacdk_io_RPrintWriter_I_V_args, // the arguments
  0, //arguments count
  System_methods_printStackTrace_INLacdk_io_RPrintWriter_I_V_exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_printStackTrace_INLacdk_io_RPrintWriter_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo System_methods_printStackTrace_INLacdk_io_RPrintWriter__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_printStackTrace_INLacdk_io_RPrintWriter__V_args[] = 
{
  &System_methods_printStackTrace_INLacdk_io_RPrintWriter__V_arg_out,
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_printStackTrace_INLacdk_io_RPrintWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_printStackTrace_INLacdk_io_RPrintWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "printStackTrace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_x_printStackTrace", // alternative name of method
  -1, // altlabelHashCode
  System_methods_printStackTrace_INLacdk_io_RPrintWriter__V_args, // the arguments
  0, //arguments count
  System_methods_printStackTrace_INLacdk_io_RPrintWriter__V_exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_printStackTrace_INLacdk_io_RPrintWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo System_methods_printStackTrace_INLacdk_io_RPrintWriter_INLRStackFrameArray_I_V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo System_methods_printStackTrace_INLacdk_io_RPrintWriter_INLRStackFrameArray_I_V_arg_stackTrace = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "stackTrace", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStackFrameArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo System_methods_printStackTrace_INLacdk_io_RPrintWriter_INLRStackFrameArray_I_V_arg_ignoreFromTop = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "ignoreFromTop", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_printStackTrace_INLacdk_io_RPrintWriter_INLRStackFrameArray_I_V_args[] = 
{
  &System_methods_printStackTrace_INLacdk_io_RPrintWriter_INLRStackFrameArray_I_V_arg_out,
  &System_methods_printStackTrace_INLacdk_io_RPrintWriter_INLRStackFrameArray_I_V_arg_stackTrace,
  &System_methods_printStackTrace_INLacdk_io_RPrintWriter_INLRStackFrameArray_I_V_arg_ignoreFromTop,
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_printStackTrace_INLacdk_io_RPrintWriter_INLRStackFrameArray_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_printStackTrace_INLacdk_io_RPrintWriter_INLRStackFrameArray_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "printStackTrace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_y_printStackTrace", // alternative name of method
  -1, // altlabelHashCode
  System_methods_printStackTrace_INLacdk_io_RPrintWriter_INLRStackFrameArray_I_V_args, // the arguments
  0, //arguments count
  System_methods_printStackTrace_INLacdk_io_RPrintWriter_INLRStackFrameArray_I_V_exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_printStackTrace_INLacdk_io_RPrintWriter_INLRStackFrameArray_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo System_methods_printStackTrace_INLacdk_io_RPrintWriter_INLRStackFrameArray__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo System_methods_printStackTrace_INLacdk_io_RPrintWriter_INLRStackFrameArray__V_arg_stackTrace = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "stackTrace", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStackFrameArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_printStackTrace_INLacdk_io_RPrintWriter_INLRStackFrameArray__V_args[] = 
{
  &System_methods_printStackTrace_INLacdk_io_RPrintWriter_INLRStackFrameArray__V_arg_out,
  &System_methods_printStackTrace_INLacdk_io_RPrintWriter_INLRStackFrameArray__V_arg_stackTrace,
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_printStackTrace_INLacdk_io_RPrintWriter_INLRStackFrameArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_printStackTrace_INLacdk_io_RPrintWriter_INLRStackFrameArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "printStackTrace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_z_printStackTrace", // alternative name of method
  -1, // altlabelHashCode
  System_methods_printStackTrace_INLacdk_io_RPrintWriter_INLRStackFrameArray__V_args, // the arguments
  0, //arguments count
  System_methods_printStackTrace_INLacdk_io_RPrintWriter_INLRStackFrameArray__V_exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_printStackTrace_INLacdk_io_RPrintWriter_INLRStackFrameArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_reinit__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_reinit__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_reinit__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "reinit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_B_reinit", // alternative name of method
  -1, // altlabelHashCode
  System_methods_reinit__V_args, // the arguments
  0, //arguments count
  System_methods_reinit__V_exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_reinit__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_resetErrno__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_resetErrno__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_resetErrno__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "resetErrno", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_I_resetErrno", // alternative name of method
  -1, // altlabelHashCode
  System_methods_resetErrno__V_args, // the arguments
  0, //arguments count
  System_methods_resetErrno__V_exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_resetErrno__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo System_methods_setErr_INLacdk_io_RPrintWriter__V_arg_newerr = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "newerr", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_setErr_INLacdk_io_RPrintWriter__V_args[] = 
{
  &System_methods_setErr_INLacdk_io_RPrintWriter__V_arg_newerr,
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_setErr_INLacdk_io_RPrintWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_setErr_INLacdk_io_RPrintWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setErr", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_h_setErr", // alternative name of method
  -1, // altlabelHashCode
  System_methods_setErr_INLacdk_io_RPrintWriter__V_args, // the arguments
  0, //arguments count
  System_methods_setErr_INLacdk_io_RPrintWriter__V_exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_setErr_INLacdk_io_RPrintWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo System_methods_setIn_INLacdk_io_RInputReader__V_arg_newin = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "newin", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RInputReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_setIn_INLacdk_io_RInputReader__V_args[] = 
{
  &System_methods_setIn_INLacdk_io_RInputReader__V_arg_newin,
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_setIn_INLacdk_io_RInputReader__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_setIn_INLacdk_io_RInputReader__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setIn", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_i_setIn", // alternative name of method
  -1, // altlabelHashCode
  System_methods_setIn_INLacdk_io_RInputReader__V_args, // the arguments
  0, //arguments count
  System_methods_setIn_INLacdk_io_RInputReader__V_exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_setIn_INLacdk_io_RInputReader__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo System_methods_setMaxMemoryUsage_J_V_arg_maxmem = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "maxmem", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_setMaxMemoryUsage_J_V_args[] = 
{
  &System_methods_setMaxMemoryUsage_J_V_arg_maxmem,
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_setMaxMemoryUsage_J_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_setMaxMemoryUsage_J_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMaxMemoryUsage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_P_setMaxMemoryUsage", // alternative name of method
  -1, // altlabelHashCode
  System_methods_setMaxMemoryUsage_J_V_args, // the arguments
  0, //arguments count
  System_methods_setMaxMemoryUsage_J_V_exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_setMaxMemoryUsage_J_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo System_methods_setOut_INLacdk_io_RPrintWriter__V_arg_newout = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "newout", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_setOut_INLacdk_io_RPrintWriter__V_args[] = 
{
  &System_methods_setOut_INLacdk_io_RPrintWriter__V_arg_newout,
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_setOut_INLacdk_io_RPrintWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_setOut_INLacdk_io_RPrintWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setOut", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_j_setOut", // alternative name of method
  -1, // altlabelHashCode
  System_methods_setOut_INLacdk_io_RPrintWriter__V_args, // the arguments
  0, //arguments count
  System_methods_setOut_INLacdk_io_RPrintWriter__V_exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_setOut_INLacdk_io_RPrintWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo System_methods_setProperties_INLacdk_util_RProperties__V_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RProperties::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_setProperties_INLacdk_util_RProperties__V_args[] = 
{
  &System_methods_setProperties_INLacdk_util_RProperties__V_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_setProperties_INLacdk_util_RProperties__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_setProperties_INLacdk_util_RProperties__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setProperties", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_setProperties", // alternative name of method
  -1, // altlabelHashCode
  System_methods_setProperties_INLacdk_util_RProperties__V_args, // the arguments
  0, //arguments count
  System_methods_setProperties_INLacdk_util_RProperties__V_exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_setProperties_INLacdk_util_RProperties__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo System_methods_setProperty_INLRString_INLRString__LRString__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo System_methods_setProperty_INLRString_INLRString__LRString__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_setProperty_INLRString_INLRString__LRString__args[] = 
{
  &System_methods_setProperty_INLRString_INLRString__LRString__arg_key,
  &System_methods_setProperty_INLRString_INLRString__LRString__arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_setProperty_INLRString_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_setProperty_INLRString_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setProperty", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_g_setProperty", // alternative name of method
  -1, // altlabelHashCode
  System_methods_setProperty_INLRString_INLRString__LRString__args, // the arguments
  0, //arguments count
  System_methods_setProperty_INLRString_INLRString__LRString__exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_setProperty_INLRString_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo System_methods_setThreadMaxMemoryUsage_J_V_arg_maxmem = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "maxmem", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* System_methods_setThreadMaxMemoryUsage_J_V_args[] = 
{
  &System_methods_setThreadMaxMemoryUsage_J_V_arg_maxmem,
  0
};

::acdk::lang::dmi::ClazzInfo* System_methods_setThreadMaxMemoryUsage_J_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo System_method_setThreadMaxMemoryUsage_J_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setThreadMaxMemoryUsage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_R_setThreadMaxMemoryUsage", // alternative name of method
  -1, // altlabelHashCode
  System_methods_setThreadMaxMemoryUsage_J_V_args, // the arguments
  0, //arguments count
  System_methods_setThreadMaxMemoryUsage_J_V_exceptions, // the declared exceptions
  System_MetainfoWrapper::System_method_setThreadMaxMemoryUsage_J_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _System_methods[] = 
{
  &System_method_GetClass__L_acdk_lang_RClass_,
  &System_method_addAcdkPath_INLRString__V,
  &System_method_afterMain__Z,
  &System_method_afterUsersMain__Z,
  &System_method_configurationLoaded__Z,
  &System_method_currentTimeMillis__J,
  &System_method_deInitAsSharedLibrary__V,
  &System_method_exit_I_V,
  &System_method_gc__Z,
  &System_method_getAcdkHome__LRString_,
  &System_method_getAcdkPath__LRStringArray_,
  &System_method_getAcdkToolsHome__LRString_,
  &System_method_getArgc__I,
  &System_method_getArguments__LRStringArray_,
  &System_method_getEnvPath__LRStringArray_,
  &System_method_getEnvironment__Lacdk_util_RProperties_,
  &System_method_getErrmsg__LRString_,
  &System_method_getErrmsg_I_LRString_,
  &System_method_getErrno__I,
  &System_method_getLastError__LRString_,
  &System_method_getMaxMemoryUsage__J,
  &System_method_getModuleDir__LRString_,
  &System_method_getModuleName__LRString_,
  &System_method_getModuleName_Z_LRString_,
  &System_method_getModulePath__LRString_,
  &System_method_getObjectList_I_LRObjectArray_,
  &System_method_getOriginalArgc__I,
  &System_method_getPlatformFlags__I,
  &System_method_getProperties__Lacdk_util_RProperties_,
  &System_method_getProperty_INLRString__LRString_,
  &System_method_getProperty_INLRString_INLRString__LRString_,
  &System_method_getRootObjects__LRObjectArray_,
  &System_method_getSystem__LRSystemImpl_,
  &System_method_getSystemCmdLineOps__LRString_,
  &System_method_getSystemStatus__I,
  &System_method_getThreadMaxMemoryUsage__J,
  &System_method_getUnfilteredArguments__LRStringArray_,
  &System_method_identityHashCode_INLRObject__I,
  &System_method_initAsSharedLibrary__V,
  &System_method_insertAcdkPath_INLRString__V,
  &System_method_isInMain__Z,
  &System_method_isInUserMain__Z,
  &System_method_loadLibrary_INLRString__V,
  &System_method_printStackTrace_I_V,
  &System_method_printStackTrace__V,
  &System_method_printStackTrace_INLacdk_io_RPrintWriter_I_V,
  &System_method_printStackTrace_INLacdk_io_RPrintWriter__V,
  &System_method_printStackTrace_INLacdk_io_RPrintWriter_INLRStackFrameArray_I_V,
  &System_method_printStackTrace_INLacdk_io_RPrintWriter_INLRStackFrameArray__V,
  &System_method_reinit__V,
  &System_method_resetErrno__V,
  &System_method_setErr_INLacdk_io_RPrintWriter__V,
  &System_method_setIn_INLacdk_io_RInputReader__V,
  &System_method_setMaxMemoryUsage_J_V,
  &System_method_setOut_INLacdk_io_RPrintWriter__V,
  &System_method_setProperties_INLacdk_util_RProperties__V,
  &System_method_setProperty_INLRString_INLRString__LRString_,
  &System_method_setThreadMaxMemoryUsage_J_V,
  0
};


struct System_MetaInfoInitializer
{  System_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = System::clazzInfo();
    ci->fields =  _System_fields;
    ci->methods =  _System_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
System_MetaInfoInitializer System_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
SystemError_create_array(int length)
{
  return new ObjectArrayImpl<RSystemError>(length);
}

//static
::acdk::lang::RObject
SystemError_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SystemError_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SystemError_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SystemError::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SystemError_method_SystemError__LRSystemError__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SystemError();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SystemError_method_SystemError_INLRString__LRSystemError__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SystemError(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
};


void ThrowException_SystemError(IN(::acdk::lang::RThrowable) ex)
{
  throw RSystemError(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _SystemError_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SystemError_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SystemError_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SystemError_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SystemError_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SystemError_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SystemError_MetainfoWrapper::SystemError_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SystemError_methods_SystemError__LRSystemError__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SystemError_methods_SystemError__LRSystemError__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SystemError_method_SystemError__LRSystemError_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SystemError", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SystemError::clazzInfo(), // return type
  "_0_SystemError", // alternative name of method
  -1, // altlabelHashCode
  SystemError_methods_SystemError__LRSystemError__args, // the arguments
  0, //arguments count
  SystemError_methods_SystemError__LRSystemError__exceptions, // the declared exceptions
  SystemError_MetainfoWrapper::SystemError_method_SystemError__LRSystemError__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SystemError_methods_SystemError_INLRString__LRSystemError__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SystemError_methods_SystemError_INLRString__LRSystemError__args[] = 
{
  &SystemError_methods_SystemError_INLRString__LRSystemError__arg_what,
  0
};

::acdk::lang::dmi::ClazzInfo* SystemError_methods_SystemError_INLRString__LRSystemError__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SystemError_method_SystemError_INLRString__LRSystemError_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SystemError", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SystemError::clazzInfo(), // return type
  "_1_SystemError", // alternative name of method
  -1, // altlabelHashCode
  SystemError_methods_SystemError_INLRString__LRSystemError__args, // the arguments
  0, //arguments count
  SystemError_methods_SystemError_INLRString__LRSystemError__exceptions, // the declared exceptions
  SystemError_MetainfoWrapper::SystemError_method_SystemError_INLRString__LRSystemError__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SystemError_methods[] = 
{
  &SystemError_method_GetClass__L_acdk_lang_RClass_,
  &SystemError_method_SystemError__LRSystemError_,
  &SystemError_method_SystemError_INLRString__LRSystemError_,
  0
};


struct SystemError_MetaInfoInitializer
{  SystemError_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SystemError::clazzInfo();
    ci->fields =  _SystemError_fields;
    ci->methods =  _SystemError_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SystemError_MetaInfoInitializer SystemError_MetaInfoInitializer_staticinstance__;


struct SystemError_clazzInfo_ClazzAttributesResInitializer40
{
  SystemError_clazzInfo_ClazzAttributesResInitializer40()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)SystemError::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_SystemError));
  }
};

SystemError_clazzInfo_ClazzAttributesResInitializer40 SystemError_clazzInfo_ClazzAttributesResInitializer40_instance;



} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
Thread_create_array(int length)
{
  return new ObjectArrayImpl<RThread>(length);
}

//static
::acdk::lang::RObject
Thread_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Thread_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Thread::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_Thread_INLRRunnable_INLRString__LRThread__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Thread(::acdk::lang::dmi::castTo< RRunnable>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_Thread__LRThread__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Thread();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_Thread_INLRRunnable__LRThread__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Thread(::acdk::lang::dmi::castTo< RRunnable>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_Thread_INLRThreadGroup_INLRRunnable_INLRString__LRThread__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Thread(::acdk::lang::dmi::castTo< RThreadGroup>(args[0], dc), ::acdk::lang::dmi::castTo< RRunnable>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_Thread_INLRThreadGroup__LRThread__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Thread(::acdk::lang::dmi::castTo< RThreadGroup>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_Thread_INLRThreadGroup_INLRRunnable__LRThread__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Thread(::acdk::lang::dmi::castTo< RThreadGroup>(args[0], dc), ::acdk::lang::dmi::castTo< RRunnable>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_Thread_IINLRString__LRThread__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Thread((ThreadType)::acdk::lang::dmi::castTo<int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_Thread_I_LRThread__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Thread((ThreadType)::acdk::lang::dmi::castTo<int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method__checkAccess__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Thread* This = dmi_cast<Thread>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Thread::_checkAccess();
    else
        This->_checkAccess();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method__invokeThreadException__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Thread* This = dmi_cast<Thread>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Thread::_invokeThreadException();
    else
        This->_invokeThreadException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method__isThisThreadCurrent__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Thread* This = dmi_cast<Thread>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Thread::_isThisThreadCurrent();
    else
      ret = This->_isThisThreadCurrent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method__readResetIsInterrupted__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Thread* This = dmi_cast<Thread>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Thread::_readResetIsInterrupted();
    else
      ret = This->_readResetIsInterrupted();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method__run__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Thread* This = dmi_cast<Thread>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Thread::_run();
    else
        This->_run();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_activeCount__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Thread::activeCount();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_checkForPendingException__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Thread::checkForPendingException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_checkForThreadException__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Thread* This = dmi_cast<Thread>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Thread::checkForThreadException();
    else
        This->checkForThreadException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_checkSystemThreads__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Thread::checkSystemThreads();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_countStackFrames__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Thread* This = dmi_cast<Thread>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Thread::countStackFrames();
    else
      ret = This->countStackFrames();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_currentThread__LRThread__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Thread::currentThread();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_destroy__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Thread* This = dmi_cast<Thread>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Thread::destroy();
    else
        This->destroy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_doSleep_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Thread* This = dmi_cast<Thread>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Thread::doSleep(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->doSleep(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_dumpStack__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Thread::dumpStack();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_enumerate_INLRThreadArray__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Thread::enumerate(::acdk::lang::dmi::castTo< RThreadArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_getActiveCount__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Thread* This = dmi_cast<Thread>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Thread::getActiveCount();
    else
      ret = This->getActiveCount();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_getPriority__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Thread* This = dmi_cast<Thread>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Thread::getPriority();
    else
      ret = This->getPriority();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_getThreadCount__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Thread::getThreadCount();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_getThreadExceptionToThrow__LRThrowable__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Thread* This = dmi_cast<Thread>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Thread::getThreadExceptionToThrow();
    else
        ret = (::acdk::lang::RObject)This->getThreadExceptionToThrow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_getThreadGroup__LRThreadGroup__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Thread* This = dmi_cast<Thread>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Thread::getThreadGroup();
    else
        ret = (::acdk::lang::RObject)This->getThreadGroup();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_interrupt__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Thread* This = dmi_cast<Thread>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Thread::interrupt();
    else
        This->interrupt();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_interrupted__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Thread::interrupted();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_isAlive__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Thread* This = dmi_cast<Thread>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Thread::isAlive();
    else
      ret = This->isAlive();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_isDaemon__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Thread* This = dmi_cast<Thread>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Thread::isDaemon();
    else
      ret = This->isDaemon();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_isInterrupted__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Thread* This = dmi_cast<Thread>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Thread::isInterrupted();
    else
      ret = This->isInterrupted();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_isSingleThreaded__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Thread::isSingleThreaded();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_join__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Thread* This = dmi_cast<Thread>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Thread::join();
    else
        This->join();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_join_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Thread* This = dmi_cast<Thread>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Thread::join(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->join(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_join_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Thread* This = dmi_cast<Thread>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Thread::join(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->join(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_newSystemThread_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Thread::newSystemThread((ThreadType)::acdk::lang::dmi::castTo<int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_newSystemThread__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Thread::newSystemThread();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_removeSystemThread__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Thread::removeSystemThread();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_resume__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Thread* This = dmi_cast<Thread>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Thread::resume();
    else
        This->resume();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_run__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Thread* This = dmi_cast<Thread>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Thread::run();
    else
        This->run();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_setDaemon_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Thread* This = dmi_cast<Thread>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Thread::setDaemon(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->setDaemon(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_setName_LRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Thread* This = dmi_cast<Thread>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Thread::setName(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->setName(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_setPriority_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Thread* This = dmi_cast<Thread>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Thread::setPriority(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setPriority(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_setThreadExceptionToThrow_INLRThrowable__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Thread* This = dmi_cast<Thread>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Thread::setThreadExceptionToThrow(::acdk::lang::dmi::castTo< RThrowable>(args[0], dc));
    else
        This->setThreadExceptionToThrow(::acdk::lang::dmi::castTo< RThrowable>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_sleep_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Thread::sleep(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_sleep_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Thread::sleep(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_start__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Thread* This = dmi_cast<Thread>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Thread::start();
    else
        This->start();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_stop__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Thread* This = dmi_cast<Thread>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Thread::stop();
    else
        This->stop();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_stop_INLRThrowable__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Thread* This = dmi_cast<Thread>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Thread::stop(::acdk::lang::dmi::castTo< RThrowable>(args[0], dc));
    else
        This->stop(::acdk::lang::dmi::castTo< RThrowable>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_suspend__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Thread* This = dmi_cast<Thread>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Thread::suspend();
    else
        This->suspend();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Thread* This = dmi_cast<Thread>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Thread::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Thread_method_yield__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Thread::yield();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Thread_fields__exceptionToThrow_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Thread* This = dmi_cast<Thread>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_exceptionToThrow, flags);
    else
      This->_exceptionToThrow = ::acdk::lang::dmi::castTo< RThrowable>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Thread_fields__group_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Thread* This = dmi_cast<Thread>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_group, flags);
    else
      This->_group = ::acdk::lang::dmi::castTo< RThreadGroup>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Thread_fields__interrupted_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Thread* This = dmi_cast<Thread>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_interrupted, flags);
    else
      This->_interrupted = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Thread_fields__isDaemon_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Thread* This = dmi_cast<Thread>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_isDaemon, flags);
    else
      This->_isDaemon = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Thread_fields__name_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Thread* This = dmi_cast<Thread>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_name, flags);
    else
      This->_name = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Thread_fields__runnable_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Thread* This = dmi_cast<Thread>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_runnable, flags);
    else
      This->_runnable = ::acdk::lang::dmi::castTo< RRunnable>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Thread_fields__type_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Thread* This = dmi_cast<Thread>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->_type), flags);
    else
      This->_type = (ThreadType)::acdk::lang::dmi::castTo<int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo Thread_fields__exceptionToThrow = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_exceptionToThrow", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThrowable::clazzInfo(),
  Thread_MetainfoWrapper::Thread_fields__exceptionToThrow_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Thread_fields__group = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_group", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThreadGroup::clazzInfo(),
  Thread_MetainfoWrapper::Thread_fields__group_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Thread_fields__interrupted = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_interrupted", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  Thread_MetainfoWrapper::Thread_fields__interrupted_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Thread_fields__isDaemon = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_isDaemon", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  Thread_MetainfoWrapper::Thread_fields__isDaemon_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Thread_fields__name = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_name", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  Thread_MetainfoWrapper::Thread_fields__name_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Thread_fields__runnable = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_runnable", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRunnable::clazzInfo(),
  Thread_MetainfoWrapper::Thread_fields__runnable_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Thread_fields__type = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_type", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Thread_MetainfoWrapper::Thread_fields__type_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _Thread_fields[] = 
{
  &Thread_fields__exceptionToThrow,
  &Thread_fields__group,
  &Thread_fields__interrupted,
  &Thread_fields__isDaemon,
  &Thread_fields__name,
  &Thread_fields__runnable,
  &Thread_fields__type,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_S_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Thread_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Thread_methods_Thread_INLRRunnable_INLRString__LRThread__arg_target = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "target", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRunnable::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Thread_methods_Thread_INLRRunnable_INLRString__LRThread__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_Thread_INLRRunnable_INLRString__LRThread__args[] = 
{
  &Thread_methods_Thread_INLRRunnable_INLRString__LRThread__arg_target,
  &Thread_methods_Thread_INLRRunnable_INLRString__LRThread__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_Thread_INLRRunnable_INLRString__LRThread__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_Thread_INLRRunnable_INLRString__LRThread_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Thread", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Thread::clazzInfo(), // return type
  "_0_Thread", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_Thread_INLRRunnable_INLRString__LRThread__args, // the arguments
  0, //arguments count
  Thread_methods_Thread_INLRRunnable_INLRString__LRThread__exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_Thread_INLRRunnable_INLRString__LRThread__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_Thread__LRThread__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_Thread__LRThread__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_Thread__LRThread_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Thread", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Thread::clazzInfo(), // return type
  "_1_Thread", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_Thread__LRThread__args, // the arguments
  0, //arguments count
  Thread_methods_Thread__LRThread__exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_Thread__LRThread__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Thread_methods_Thread_INLRRunnable__LRThread__arg_target = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "target", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRunnable::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_Thread_INLRRunnable__LRThread__args[] = 
{
  &Thread_methods_Thread_INLRRunnable__LRThread__arg_target,
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_Thread_INLRRunnable__LRThread__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_Thread_INLRRunnable__LRThread_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Thread", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Thread::clazzInfo(), // return type
  "_2_Thread", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_Thread_INLRRunnable__LRThread__args, // the arguments
  0, //arguments count
  Thread_methods_Thread_INLRRunnable__LRThread__exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_Thread_INLRRunnable__LRThread__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Thread_methods_Thread_INLRThreadGroup_INLRRunnable_INLRString__LRThread__arg_group = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "group", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThreadGroup::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Thread_methods_Thread_INLRThreadGroup_INLRRunnable_INLRString__LRThread__arg_target = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "target", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRunnable::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Thread_methods_Thread_INLRThreadGroup_INLRRunnable_INLRString__LRThread__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_Thread_INLRThreadGroup_INLRRunnable_INLRString__LRThread__args[] = 
{
  &Thread_methods_Thread_INLRThreadGroup_INLRRunnable_INLRString__LRThread__arg_group,
  &Thread_methods_Thread_INLRThreadGroup_INLRRunnable_INLRString__LRThread__arg_target,
  &Thread_methods_Thread_INLRThreadGroup_INLRRunnable_INLRString__LRThread__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_Thread_INLRThreadGroup_INLRRunnable_INLRString__LRThread__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_Thread_INLRThreadGroup_INLRRunnable_INLRString__LRThread_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Thread", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Thread::clazzInfo(), // return type
  "_3_Thread", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_Thread_INLRThreadGroup_INLRRunnable_INLRString__LRThread__args, // the arguments
  0, //arguments count
  Thread_methods_Thread_INLRThreadGroup_INLRRunnable_INLRString__LRThread__exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_Thread_INLRThreadGroup_INLRRunnable_INLRString__LRThread__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Thread_methods_Thread_INLRThreadGroup__LRThread__arg_group = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "group", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThreadGroup::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_Thread_INLRThreadGroup__LRThread__args[] = 
{
  &Thread_methods_Thread_INLRThreadGroup__LRThread__arg_group,
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_Thread_INLRThreadGroup__LRThread__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_Thread_INLRThreadGroup__LRThread_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Thread", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Thread::clazzInfo(), // return type
  "_4_Thread", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_Thread_INLRThreadGroup__LRThread__args, // the arguments
  0, //arguments count
  Thread_methods_Thread_INLRThreadGroup__LRThread__exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_Thread_INLRThreadGroup__LRThread__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Thread_methods_Thread_INLRThreadGroup_INLRRunnable__LRThread__arg_group = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "group", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThreadGroup::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Thread_methods_Thread_INLRThreadGroup_INLRRunnable__LRThread__arg_target = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "target", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRunnable::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_Thread_INLRThreadGroup_INLRRunnable__LRThread__args[] = 
{
  &Thread_methods_Thread_INLRThreadGroup_INLRRunnable__LRThread__arg_group,
  &Thread_methods_Thread_INLRThreadGroup_INLRRunnable__LRThread__arg_target,
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_Thread_INLRThreadGroup_INLRRunnable__LRThread__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_Thread_INLRThreadGroup_INLRRunnable__LRThread_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Thread", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Thread::clazzInfo(), // return type
  "_5_Thread", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_Thread_INLRThreadGroup_INLRRunnable__LRThread__args, // the arguments
  0, //arguments count
  Thread_methods_Thread_INLRThreadGroup_INLRRunnable__LRThread__exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_Thread_INLRThreadGroup_INLRRunnable__LRThread__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Thread_methods_Thread_IINLRString__LRThread__arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Thread_methods_Thread_IINLRString__LRThread__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_Thread_IINLRString__LRThread__args[] = 
{
  &Thread_methods_Thread_IINLRString__LRThread__arg_type,
  &Thread_methods_Thread_IINLRString__LRThread__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_Thread_IINLRString__LRThread__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_Thread_IINLRString__LRThread_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Thread", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Thread::clazzInfo(), // return type
  "_6_Thread", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_Thread_IINLRString__LRThread__args, // the arguments
  0, //arguments count
  Thread_methods_Thread_IINLRString__LRThread__exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_Thread_IINLRString__LRThread__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Thread_methods_Thread_I_LRThread__arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_Thread_I_LRThread__args[] = 
{
  &Thread_methods_Thread_I_LRThread__arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_Thread_I_LRThread__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_Thread_I_LRThread_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Thread", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Thread::clazzInfo(), // return type
  "_7_Thread", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_Thread_I_LRThread__args, // the arguments
  0, //arguments count
  Thread_methods_Thread_I_LRThread__exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_Thread_I_LRThread__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods__checkAccess__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods__checkAccess__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method__checkAccess__V = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_checkAccess", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_R__checkAccess", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods__checkAccess__V_args, // the arguments
  0, //arguments count
  Thread_methods__checkAccess__V_exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method__checkAccess__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods__invokeThreadException__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods__invokeThreadException__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method__invokeThreadException__V = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_invokeThreadException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_O__invokeThreadException", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods__invokeThreadException__V_args, // the arguments
  0, //arguments count
  Thread_methods__invokeThreadException__V_exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method__invokeThreadException__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods__isThisThreadCurrent__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods__isThisThreadCurrent__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method__isThisThreadCurrent__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_isThisThreadCurrent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_Q__isThisThreadCurrent", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods__isThisThreadCurrent__Z_args, // the arguments
  0, //arguments count
  Thread_methods__isThisThreadCurrent__Z_exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method__isThisThreadCurrent__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods__readResetIsInterrupted__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods__readResetIsInterrupted__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method__readResetIsInterrupted__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_readResetIsInterrupted", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_N__readResetIsInterrupted", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods__readResetIsInterrupted__Z_args, // the arguments
  0, //arguments count
  Thread_methods__readResetIsInterrupted__Z_exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method__readResetIsInterrupted__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods__run__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods__run__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method__run__V = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_run", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_P__run", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods__run__V_args, // the arguments
  0, //arguments count
  Thread_methods__run__V_exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method__run__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_activeCount__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_activeCount__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_activeCount__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "activeCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_p_activeCount", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_activeCount__I_args, // the arguments
  0, //arguments count
  Thread_methods_activeCount__I_exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_activeCount__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_checkForPendingException__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_checkForPendingException__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_checkForPendingException__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "checkForPendingException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_M_checkForPendingException", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_checkForPendingException__V_args, // the arguments
  0, //arguments count
  Thread_methods_checkForPendingException__V_exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_checkForPendingException__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_checkForThreadException__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_checkForThreadException__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_checkForThreadException__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "checkForThreadException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_L_checkForThreadException", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_checkForThreadException__V_args, // the arguments
  0, //arguments count
  Thread_methods_checkForThreadException__V_exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_checkForThreadException__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_checkSystemThreads__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_checkSystemThreads__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_checkSystemThreads__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "checkSystemThreads", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_H_checkSystemThreads", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_checkSystemThreads__V_args, // the arguments
  0, //arguments count
  Thread_methods_checkSystemThreads__V_exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_checkSystemThreads__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_countStackFrames__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_countStackFrames__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_countStackFrames__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "countStackFrames", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_r_countStackFrames", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_countStackFrames__I_args, // the arguments
  0, //arguments count
  Thread_methods_countStackFrames__I_exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_countStackFrames__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_currentThread__LRThread__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_currentThread__LRThread__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_currentThread__LRThread_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "currentThread", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThread::clazzInfo(), // return type
  "_n_currentThread", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_currentThread__LRThread__args, // the arguments
  0, //arguments count
  Thread_methods_currentThread__LRThread__exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_currentThread__LRThread__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_destroy__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_destroy__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_destroy__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "destroy", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_s_destroy", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_destroy__V_args, // the arguments
  0, //arguments count
  Thread_methods_destroy__V_exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_destroy__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Thread_methods_doSleep_I_V_arg_millis = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "millis", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_doSleep_I_V_args[] = 
{
  &Thread_methods_doSleep_I_V_arg_millis,
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_doSleep_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_doSleep_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "doSleep", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_D_doSleep", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_doSleep_I_V_args, // the arguments
  0, //arguments count
  Thread_methods_doSleep_I_V_exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_doSleep_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_dumpStack__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_dumpStack__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_dumpStack__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "dumpStack", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_y_dumpStack", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_dumpStack__V_args, // the arguments
  0, //arguments count
  Thread_methods_dumpStack__V_exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_dumpStack__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Thread_methods_enumerate_INLRThreadArray__I_arg_tarray = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "tarray", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThreadArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_enumerate_INLRThreadArray__I_args[] = 
{
  &Thread_methods_enumerate_INLRThreadArray__I_arg_tarray,
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_enumerate_INLRThreadArray__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_enumerate_INLRThreadArray__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "enumerate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_x_enumerate", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_enumerate_INLRThreadArray__I_args, // the arguments
  0, //arguments count
  Thread_methods_enumerate_INLRThreadArray__I_exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_enumerate_INLRThreadArray__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_getActiveCount__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_getActiveCount__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_getActiveCount__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getActiveCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_q_getActiveCount", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_getActiveCount__I_args, // the arguments
  0, //arguments count
  Thread_methods_getActiveCount__I_exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_getActiveCount__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_getPriority__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_getPriority__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_getPriority__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPriority", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_i_getPriority", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_getPriority__I_args, // the arguments
  0, //arguments count
  Thread_methods_getPriority__I_exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_getPriority__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_getThreadCount__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_getThreadCount__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_getThreadCount__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getThreadCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_C_getThreadCount", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_getThreadCount__I_args, // the arguments
  0, //arguments count
  Thread_methods_getThreadCount__I_exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_getThreadCount__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_getThreadExceptionToThrow__LRThrowable__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_getThreadExceptionToThrow__LRThrowable__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_getThreadExceptionToThrow__LRThrowable_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getThreadExceptionToThrow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThrowable::clazzInfo(), // return type
  "_K_getThreadExceptionToThrow", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_getThreadExceptionToThrow__LRThrowable__args, // the arguments
  0, //arguments count
  Thread_methods_getThreadExceptionToThrow__LRThrowable__exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_getThreadExceptionToThrow__LRThrowable__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_getThreadGroup__LRThreadGroup__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_getThreadGroup__LRThreadGroup__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_getThreadGroup__LRThreadGroup_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getThreadGroup", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThreadGroup::clazzInfo(), // return type
  "_o_getThreadGroup", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_getThreadGroup__LRThreadGroup__args, // the arguments
  0, //arguments count
  Thread_methods_getThreadGroup__LRThreadGroup__exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_getThreadGroup__LRThreadGroup__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_interrupt__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_interrupt__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_interrupt__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "interrupt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_interrupt", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_interrupt__V_args, // the arguments
  0, //arguments count
  Thread_methods_interrupt__V_exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_interrupt__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_interrupted__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_interrupted__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_interrupted__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "interrupted", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_e_interrupted", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_interrupted__Z_args, // the arguments
  0, //arguments count
  Thread_methods_interrupted__Z_exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_interrupted__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_isAlive__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_isAlive__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_isAlive__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isAlive", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_f_isAlive", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_isAlive__Z_args, // the arguments
  0, //arguments count
  Thread_methods_isAlive__Z_exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_isAlive__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_isDaemon__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_isDaemon__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_isDaemon__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isDaemon", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_A_isDaemon", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_isDaemon__Z_args, // the arguments
  0, //arguments count
  Thread_methods_isDaemon__Z_exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_isDaemon__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_isInterrupted__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_isInterrupted__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_isInterrupted__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isInterrupted", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_d_isInterrupted", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_isInterrupted__Z_args, // the arguments
  0, //arguments count
  Thread_methods_isInterrupted__Z_exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_isInterrupted__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_isSingleThreaded__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_isSingleThreaded__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_isSingleThreaded__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isSingleThreaded", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_I_isSingleThreaded", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_isSingleThreaded__Z_args, // the arguments
  0, //arguments count
  Thread_methods_isSingleThreaded__Z_exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_isSingleThreaded__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_join__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_join__V_exceptions[] =
{
  RIllegalArgumentException::clazzInfo(), 
  0
};

void Thread_join__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, IllegalArgumentException) == true)
    THROW_INSTANCE( RIllegalArgumentException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Thread_method_join__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "join", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_join", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_join__V_args, // the arguments
  0, //arguments count
  Thread_methods_join__V_exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_join__V_dispatch, // invoke this method
  Thread_join__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Thread_methods_join_I_V_arg_millis = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "millis", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_join_I_V_args[] = 
{
  &Thread_methods_join_I_V_arg_millis,
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_join_I_V_exceptions[] =
{
  RIllegalArgumentException::clazzInfo(), 
  0
};

void Thread_join_I_V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, IllegalArgumentException) == true)
    THROW_INSTANCE( RIllegalArgumentException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Thread_method_join_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "join", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_join", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_join_I_V_args, // the arguments
  0, //arguments count
  Thread_methods_join_I_V_exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_join_I_V_dispatch, // invoke this method
  Thread_join_I_V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Thread_methods_join_II_V_arg_millis = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "millis", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Thread_methods_join_II_V_arg_nanos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "nanos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_join_II_V_args[] = 
{
  &Thread_methods_join_II_V_arg_millis,
  &Thread_methods_join_II_V_arg_nanos,
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_join_II_V_exceptions[] =
{
  RIllegalArgumentException::clazzInfo(), 
  0
};

void Thread_join_II_V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, IllegalArgumentException) == true)
    THROW_INSTANCE( RIllegalArgumentException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Thread_method_join_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "join", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_join", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_join_II_V_args, // the arguments
  0, //arguments count
  Thread_methods_join_II_V_exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_join_II_V_dispatch, // invoke this method
  Thread_join_II_V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Thread_methods_newSystemThread_I_V_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_newSystemThread_I_V_args[] = 
{
  &Thread_methods_newSystemThread_I_V_arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_newSystemThread_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_newSystemThread_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "newSystemThread", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_E_newSystemThread", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_newSystemThread_I_V_args, // the arguments
  0, //arguments count
  Thread_methods_newSystemThread_I_V_exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_newSystemThread_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_newSystemThread__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_newSystemThread__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_newSystemThread__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "newSystemThread", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_F_newSystemThread", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_newSystemThread__V_args, // the arguments
  0, //arguments count
  Thread_methods_newSystemThread__V_exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_newSystemThread__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_removeSystemThread__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_removeSystemThread__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_removeSystemThread__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "removeSystemThread", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_G_removeSystemThread", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_removeSystemThread__V_args, // the arguments
  0, //arguments count
  Thread_methods_removeSystemThread__V_exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_removeSystemThread__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_resume__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_resume__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_resume__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "resume", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_w_resume", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_resume__V_args, // the arguments
  0, //arguments count
  Thread_methods_resume__V_exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_resume__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_run__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_run__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_run__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "run", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_h_run", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_run__V_args, // the arguments
  0, //arguments count
  Thread_methods_run__V_exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_run__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Thread_methods_setDaemon_Z_V_arg_on = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "on", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_setDaemon_Z_V_args[] = 
{
  &Thread_methods_setDaemon_Z_V_arg_on,
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_setDaemon_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_setDaemon_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDaemon", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_z_setDaemon", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_setDaemon_Z_V_args, // the arguments
  0, //arguments count
  Thread_methods_setDaemon_Z_V_exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_setDaemon_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Thread_methods_setName_LRString__V_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_setName_LRString__V_args[] = 
{
  &Thread_methods_setName_LRString__V_arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_setName_LRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_setName_LRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_B_setName", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_setName_LRString__V_args, // the arguments
  0, //arguments count
  Thread_methods_setName_LRString__V_exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_setName_LRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Thread_methods_setPriority_I_V_arg_newPriority = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "newPriority", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_setPriority_I_V_args[] = 
{
  &Thread_methods_setPriority_I_V_arg_newPriority,
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_setPriority_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_setPriority_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setPriority", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_j_setPriority", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_setPriority_I_V_args, // the arguments
  0, //arguments count
  Thread_methods_setPriority_I_V_exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_setPriority_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Thread_methods_setThreadExceptionToThrow_INLRThrowable__V_arg_ex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThrowable::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_setThreadExceptionToThrow_INLRThrowable__V_args[] = 
{
  &Thread_methods_setThreadExceptionToThrow_INLRThrowable__V_arg_ex,
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_setThreadExceptionToThrow_INLRThrowable__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_setThreadExceptionToThrow_INLRThrowable__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setThreadExceptionToThrow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_J_setThreadExceptionToThrow", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_setThreadExceptionToThrow_INLRThrowable__V_args, // the arguments
  0, //arguments count
  Thread_methods_setThreadExceptionToThrow_INLRThrowable__V_exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_setThreadExceptionToThrow_INLRThrowable__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Thread_methods_sleep_I_V_arg_millis = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "millis", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_sleep_I_V_args[] = 
{
  &Thread_methods_sleep_I_V_arg_millis,
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_sleep_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_sleep_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "sleep", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_m_sleep", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_sleep_I_V_args, // the arguments
  0, //arguments count
  Thread_methods_sleep_I_V_exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_sleep_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Thread_methods_sleep_II_V_arg_millis = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "millis", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Thread_methods_sleep_II_V_arg_nanaos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "nanaos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_sleep_II_V_args[] = 
{
  &Thread_methods_sleep_II_V_arg_millis,
  &Thread_methods_sleep_II_V_arg_nanaos,
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_sleep_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_sleep_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "sleep", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_l_sleep", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_sleep_II_V_args, // the arguments
  0, //arguments count
  Thread_methods_sleep_II_V_exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_sleep_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_start__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_start__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_start__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "start", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_start", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_start__V_args, // the arguments
  0, //arguments count
  Thread_methods_start__V_exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_start__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_stop__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_stop__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_stop__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "stop", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_t_stop", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_stop__V_args, // the arguments
  0, //arguments count
  Thread_methods_stop__V_exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_stop__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Thread_methods_stop_INLRThrowable__V_arg_exception = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "exception", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThrowable::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_stop_INLRThrowable__V_args[] = 
{
  &Thread_methods_stop_INLRThrowable__V_arg_exception,
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_stop_INLRThrowable__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_stop_INLRThrowable__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "stop", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_u_stop", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_stop_INLRThrowable__V_args, // the arguments
  0, //arguments count
  Thread_methods_stop_INLRThrowable__V_exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_stop_INLRThrowable__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_suspend__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_suspend__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_suspend__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "suspend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_v_suspend", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_suspend__V_args, // the arguments
  0, //arguments count
  Thread_methods_suspend__V_exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_suspend__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_8_toString", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_toString__LRString__args, // the arguments
  0, //arguments count
  Thread_methods_toString__LRString__exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Thread_methods_yield__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Thread_methods_yield__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Thread_method_yield__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "yield", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_k_yield", // alternative name of method
  -1, // altlabelHashCode
  Thread_methods_yield__V_args, // the arguments
  0, //arguments count
  Thread_methods_yield__V_exceptions, // the declared exceptions
  Thread_MetainfoWrapper::Thread_method_yield__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Thread_methods[] = 
{
  &Thread_method_GetClass__L_acdk_lang_RClass_,
  &Thread_method_Thread_INLRRunnable_INLRString__LRThread_,
  &Thread_method_Thread__LRThread_,
  &Thread_method_Thread_INLRRunnable__LRThread_,
  &Thread_method_Thread_INLRThreadGroup_INLRRunnable_INLRString__LRThread_,
  &Thread_method_Thread_INLRThreadGroup__LRThread_,
  &Thread_method_Thread_INLRThreadGroup_INLRRunnable__LRThread_,
  &Thread_method_Thread_IINLRString__LRThread_,
  &Thread_method_Thread_I_LRThread_,
  &Thread_method__checkAccess__V,
  &Thread_method__invokeThreadException__V,
  &Thread_method__isThisThreadCurrent__Z,
  &Thread_method__readResetIsInterrupted__Z,
  &Thread_method__run__V,
  &Thread_method_activeCount__I,
  &Thread_method_checkForPendingException__V,
  &Thread_method_checkForThreadException__V,
  &Thread_method_checkSystemThreads__V,
  &Thread_method_countStackFrames__I,
  &Thread_method_currentThread__LRThread_,
  &Thread_method_destroy__V,
  &Thread_method_doSleep_I_V,
  &Thread_method_dumpStack__V,
  &Thread_method_enumerate_INLRThreadArray__I,
  &Thread_method_getActiveCount__I,
  &Thread_method_getPriority__I,
  &Thread_method_getThreadCount__I,
  &Thread_method_getThreadExceptionToThrow__LRThrowable_,
  &Thread_method_getThreadGroup__LRThreadGroup_,
  &Thread_method_interrupt__V,
  &Thread_method_interrupted__Z,
  &Thread_method_isAlive__Z,
  &Thread_method_isDaemon__Z,
  &Thread_method_isInterrupted__Z,
  &Thread_method_isSingleThreaded__Z,
  &Thread_method_join__V,
  &Thread_method_join_I_V,
  &Thread_method_join_II_V,
  &Thread_method_newSystemThread_I_V,
  &Thread_method_newSystemThread__V,
  &Thread_method_removeSystemThread__V,
  &Thread_method_resume__V,
  &Thread_method_run__V,
  &Thread_method_setDaemon_Z_V,
  &Thread_method_setName_LRString__V,
  &Thread_method_setPriority_I_V,
  &Thread_method_setThreadExceptionToThrow_INLRThrowable__V,
  &Thread_method_sleep_I_V,
  &Thread_method_sleep_II_V,
  &Thread_method_start__V,
  &Thread_method_stop__V,
  &Thread_method_stop_INLRThrowable__V,
  &Thread_method_suspend__V,
  &Thread_method_toString__LRString_,
  &Thread_method_yield__V,
  0
};


struct Thread_MetaInfoInitializer
{  Thread_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Thread::clazzInfo();
    ci->fields =  _Thread_fields;
    ci->methods =  _Thread_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Thread_MetaInfoInitializer Thread_MetaInfoInitializer_staticinstance__;


struct Thread_clazzInfo_ClazzAttributesResInitializer41
{
  Thread_clazzInfo_ClazzAttributesResInitializer41()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Thread_methods_Thread_IINLRString__LRThread__arg_type, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)ThreadTypeMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Thread_methods_Thread_I_LRThread__arg_type, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)ThreadTypeMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Thread_methods_newSystemThread_I_V_arg_type, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)ThreadTypeMetaInf::GetEnumInfo()));
  }
};

Thread_clazzInfo_ClazzAttributesResInitializer41 Thread_clazzInfo_ClazzAttributesResInitializer41_instance;



} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
ThreadDeath_create_array(int length)
{
  return new ObjectArrayImpl<RThreadDeath>(length);
}

//static
::acdk::lang::RObject
ThreadDeath_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ThreadDeath_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadDeath_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ThreadDeath::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadDeath_method_ThreadDeath__LRThreadDeath__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ThreadDeath();
    return methinf;
  }
};


void ThrowException_ThreadDeath(IN(::acdk::lang::RThrowable) ex)
{
  throw RThreadDeath(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _ThreadDeath_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadDeath_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadDeath_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadDeath_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ThreadDeath_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ThreadDeath_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ThreadDeath_MetainfoWrapper::ThreadDeath_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadDeath_methods_ThreadDeath__LRThreadDeath__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadDeath_methods_ThreadDeath__LRThreadDeath__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadDeath_method_ThreadDeath__LRThreadDeath_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ThreadDeath", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ThreadDeath::clazzInfo(), // return type
  "_0_ThreadDeath", // alternative name of method
  -1, // altlabelHashCode
  ThreadDeath_methods_ThreadDeath__LRThreadDeath__args, // the arguments
  0, //arguments count
  ThreadDeath_methods_ThreadDeath__LRThreadDeath__exceptions, // the declared exceptions
  ThreadDeath_MetainfoWrapper::ThreadDeath_method_ThreadDeath__LRThreadDeath__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ThreadDeath_methods[] = 
{
  &ThreadDeath_method_GetClass__L_acdk_lang_RClass_,
  &ThreadDeath_method_ThreadDeath__LRThreadDeath_,
  0
};


struct ThreadDeath_MetaInfoInitializer
{  ThreadDeath_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ThreadDeath::clazzInfo();
    ci->fields =  _ThreadDeath_fields;
    ci->methods =  _ThreadDeath_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ThreadDeath_MetaInfoInitializer ThreadDeath_MetaInfoInitializer_staticinstance__;


struct ThreadDeath_clazzInfo_ClazzAttributesResInitializer42
{
  ThreadDeath_clazzInfo_ClazzAttributesResInitializer42()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)ThreadDeath::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_ThreadDeath));
  }
};

ThreadDeath_clazzInfo_ClazzAttributesResInitializer42 ThreadDeath_clazzInfo_ClazzAttributesResInitializer42_instance;



} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
ThreadGroup_create_array(int length)
{
  return new ObjectArrayImpl<RThreadGroup>(length);
}

//static
::acdk::lang::RObject
ThreadGroup_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ThreadGroup_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadGroup_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ThreadGroup::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadGroup_method_ThreadGroup_INLRString__LRThreadGroup__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ThreadGroup(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadGroup_method_ThreadGroup_INLRThreadGroup_INLRString__LRThreadGroup__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ThreadGroup(::acdk::lang::dmi::castTo< RThreadGroup>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadGroup_method_ThreadGroup__LRThreadGroup__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ThreadGroup();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadGroup_method__addThread_INLRThread__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ThreadGroup* This = dmi_cast<ThreadGroup>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ThreadGroup::_addThread(::acdk::lang::dmi::castTo< RThread>(args[0], dc));
    else
        This->_addThread(::acdk::lang::dmi::castTo< RThread>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadGroup_method__removeThread_INLRThread__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ThreadGroup* This = dmi_cast<ThreadGroup>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ThreadGroup::_removeThread(::acdk::lang::dmi::castTo< RThread>(args[0], dc));
    else
        This->_removeThread(::acdk::lang::dmi::castTo< RThread>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadGroup_method_activeCount__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ThreadGroup* This = dmi_cast<ThreadGroup>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ThreadGroup::activeCount();
    else
      ret = This->activeCount();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadGroup_method_activeGroupCount__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ThreadGroup* This = dmi_cast<ThreadGroup>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ThreadGroup::activeGroupCount();
    else
      ret = This->activeGroupCount();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadGroup_method_checkAccess__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ThreadGroup* This = dmi_cast<ThreadGroup>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ThreadGroup::checkAccess();
    else
        This->checkAccess();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadGroup_method_destroy__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ThreadGroup* This = dmi_cast<ThreadGroup>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ThreadGroup::destroy();
    else
        This->destroy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadGroup_method_enumerate_INLRThreadArray_Z_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ThreadGroup* This = dmi_cast<ThreadGroup>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ThreadGroup::enumerate(::acdk::lang::dmi::castTo< RThreadArray>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    else
      ret = This->enumerate(::acdk::lang::dmi::castTo< RThreadArray>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadGroup_method_enumerate_INLRThreadArray__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ThreadGroup* This = dmi_cast<ThreadGroup>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ThreadGroup::enumerate(::acdk::lang::dmi::castTo< RThreadArray>(args[0], dc));
    else
      ret = This->enumerate(::acdk::lang::dmi::castTo< RThreadArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadGroup_method_enumerate_INLRThreadGroupArray_Z_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ThreadGroup* This = dmi_cast<ThreadGroup>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ThreadGroup::enumerate(::acdk::lang::dmi::castTo< RThreadGroupArray>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    else
      ret = This->enumerate(::acdk::lang::dmi::castTo< RThreadGroupArray>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadGroup_method_enumerate_INLRThreadGroupArray__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ThreadGroup* This = dmi_cast<ThreadGroup>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ThreadGroup::enumerate(::acdk::lang::dmi::castTo< RThreadGroupArray>(args[0], dc));
    else
      ret = This->enumerate(::acdk::lang::dmi::castTo< RThreadGroupArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadGroup_method_getMaxPriority__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ThreadGroup* This = dmi_cast<ThreadGroup>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ThreadGroup::getMaxPriority();
    else
      ret = This->getMaxPriority();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadGroup_method_getName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ThreadGroup* This = dmi_cast<ThreadGroup>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ThreadGroup::getName();
    else
        ret = (::acdk::lang::RObject)This->getName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadGroup_method_getParent__LRThreadGroup__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ThreadGroup* This = dmi_cast<ThreadGroup>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ThreadGroup::getParent();
    else
        ret = (::acdk::lang::RObject)This->getParent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadGroup_method_getRoot__LRThreadGroup__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ThreadGroup::getRoot();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadGroup_method_interrupt__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ThreadGroup* This = dmi_cast<ThreadGroup>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ThreadGroup::interrupt();
    else
        This->interrupt();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadGroup_method_isDaemon__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ThreadGroup* This = dmi_cast<ThreadGroup>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ThreadGroup::isDaemon();
    else
      ret = This->isDaemon();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadGroup_method_isDestroyed__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ThreadGroup* This = dmi_cast<ThreadGroup>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ThreadGroup::isDestroyed();
    else
      ret = This->isDestroyed();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadGroup_method_list__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ThreadGroup* This = dmi_cast<ThreadGroup>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ThreadGroup::list();
    else
        This->list();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadGroup_method_parentOf_INLRThreadGroup__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ThreadGroup* This = dmi_cast<ThreadGroup>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ThreadGroup::parentOf(::acdk::lang::dmi::castTo< RThreadGroup>(args[0], dc));
    else
      ret = This->parentOf(::acdk::lang::dmi::castTo< RThreadGroup>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadGroup_method_setDaemon_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ThreadGroup* This = dmi_cast<ThreadGroup>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ThreadGroup::setDaemon(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->setDaemon(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadGroup_method_setMaxPriority_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ThreadGroup* This = dmi_cast<ThreadGroup>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ThreadGroup::setMaxPriority(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setMaxPriority(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadGroup_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ThreadGroup* This = dmi_cast<ThreadGroup>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ThreadGroup::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadGroup_method_uncaughtException_INLRThread_INLRThrowable__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ThreadGroup* This = dmi_cast<ThreadGroup>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ThreadGroup::uncaughtException(::acdk::lang::dmi::castTo< RThread>(args[0], dc), ::acdk::lang::dmi::castTo< RThrowable>(args[1], dc));
    else
        This->uncaughtException(::acdk::lang::dmi::castTo< RThread>(args[0], dc), ::acdk::lang::dmi::castTo< RThrowable>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ThreadGroup_fields__children_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ThreadGroup* This = dmi_cast<ThreadGroup>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_children, flags);
    else
      This->_children = ::acdk::lang::dmi::castTo< ::acdk::util::RVector>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ThreadGroup_fields__isDaemon_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ThreadGroup* This = dmi_cast<ThreadGroup>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_isDaemon, flags);
    else
      This->_isDaemon = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ThreadGroup_fields__maxPriority_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ThreadGroup* This = dmi_cast<ThreadGroup>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_maxPriority, flags);
    else
      This->_maxPriority = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ThreadGroup_fields__name_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ThreadGroup* This = dmi_cast<ThreadGroup>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_name, flags);
    else
      This->_name = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ThreadGroup_fields__parent_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ThreadGroup* This = dmi_cast<ThreadGroup>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_parent, flags);
    else
      This->_parent = ::acdk::lang::dmi::castTo< RThreadGroup>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ThreadGroup_fields__root_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(ThreadGroup::_root, flags);
    else
      ThreadGroup::_root = ::acdk::lang::dmi::castTo< RThreadGroup>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ThreadGroup_fields__threads_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ThreadGroup* This = dmi_cast<ThreadGroup>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_threads, flags);
    else
      This->_threads = ::acdk::lang::dmi::castTo< ::acdk::util::RVector>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ThreadGroup_fields__children = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_children", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::RVector::clazzInfo(),
  ThreadGroup_MetainfoWrapper::ThreadGroup_fields__children_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ThreadGroup_fields__isDaemon = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_isDaemon", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  ThreadGroup_MetainfoWrapper::ThreadGroup_fields__isDaemon_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ThreadGroup_fields__maxPriority = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_maxPriority", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ThreadGroup_MetainfoWrapper::ThreadGroup_fields__maxPriority_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ThreadGroup_fields__name = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_name", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ThreadGroup_MetainfoWrapper::ThreadGroup_fields__name_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ThreadGroup_fields__parent = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_parent", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThreadGroup::clazzInfo(),
  ThreadGroup_MetainfoWrapper::ThreadGroup_fields__parent_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ThreadGroup_fields__root = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_root", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThreadGroup::clazzInfo(),
  ThreadGroup_MetainfoWrapper::ThreadGroup_fields__root_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ThreadGroup_fields__threads = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_threads", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::RVector::clazzInfo(),
  ThreadGroup_MetainfoWrapper::ThreadGroup_fields__threads_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ThreadGroup_fields[] = 
{
  &ThreadGroup_fields__children,
  &ThreadGroup_fields__isDaemon,
  &ThreadGroup_fields__maxPriority,
  &ThreadGroup_fields__name,
  &ThreadGroup_fields__parent,
  &ThreadGroup_fields__root,
  &ThreadGroup_fields__threads,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadGroup_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadGroup_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadGroup_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_q_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ThreadGroup_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ThreadGroup_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ThreadGroup_MetainfoWrapper::ThreadGroup_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ThreadGroup_methods_ThreadGroup_INLRString__LRThreadGroup__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadGroup_methods_ThreadGroup_INLRString__LRThreadGroup__args[] = 
{
  &ThreadGroup_methods_ThreadGroup_INLRString__LRThreadGroup__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadGroup_methods_ThreadGroup_INLRString__LRThreadGroup__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadGroup_method_ThreadGroup_INLRString__LRThreadGroup_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ThreadGroup", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ThreadGroup::clazzInfo(), // return type
  "_0_ThreadGroup", // alternative name of method
  -1, // altlabelHashCode
  ThreadGroup_methods_ThreadGroup_INLRString__LRThreadGroup__args, // the arguments
  0, //arguments count
  ThreadGroup_methods_ThreadGroup_INLRString__LRThreadGroup__exceptions, // the declared exceptions
  ThreadGroup_MetainfoWrapper::ThreadGroup_method_ThreadGroup_INLRString__LRThreadGroup__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ThreadGroup_methods_ThreadGroup_INLRThreadGroup_INLRString__LRThreadGroup__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThreadGroup::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ThreadGroup_methods_ThreadGroup_INLRThreadGroup_INLRString__LRThreadGroup__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadGroup_methods_ThreadGroup_INLRThreadGroup_INLRString__LRThreadGroup__args[] = 
{
  &ThreadGroup_methods_ThreadGroup_INLRThreadGroup_INLRString__LRThreadGroup__arg_parent,
  &ThreadGroup_methods_ThreadGroup_INLRThreadGroup_INLRString__LRThreadGroup__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadGroup_methods_ThreadGroup_INLRThreadGroup_INLRString__LRThreadGroup__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadGroup_method_ThreadGroup_INLRThreadGroup_INLRString__LRThreadGroup_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ThreadGroup", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ThreadGroup::clazzInfo(), // return type
  "_1_ThreadGroup", // alternative name of method
  -1, // altlabelHashCode
  ThreadGroup_methods_ThreadGroup_INLRThreadGroup_INLRString__LRThreadGroup__args, // the arguments
  0, //arguments count
  ThreadGroup_methods_ThreadGroup_INLRThreadGroup_INLRString__LRThreadGroup__exceptions, // the declared exceptions
  ThreadGroup_MetainfoWrapper::ThreadGroup_method_ThreadGroup_INLRThreadGroup_INLRString__LRThreadGroup__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadGroup_methods_ThreadGroup__LRThreadGroup__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadGroup_methods_ThreadGroup__LRThreadGroup__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadGroup_method_ThreadGroup__LRThreadGroup_ = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ThreadGroup", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ThreadGroup::clazzInfo(), // return type
  "_n_ThreadGroup", // alternative name of method
  -1, // altlabelHashCode
  ThreadGroup_methods_ThreadGroup__LRThreadGroup__args, // the arguments
  0, //arguments count
  ThreadGroup_methods_ThreadGroup__LRThreadGroup__exceptions, // the declared exceptions
  ThreadGroup_MetainfoWrapper::ThreadGroup_method_ThreadGroup__LRThreadGroup__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ThreadGroup_methods__addThread_INLRThread__V_arg_thread = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "thread", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThread::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadGroup_methods__addThread_INLRThread__V_args[] = 
{
  &ThreadGroup_methods__addThread_INLRThread__V_arg_thread,
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadGroup_methods__addThread_INLRThread__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadGroup_method__addThread_INLRThread__V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_addThread", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_p__addThread", // alternative name of method
  -1, // altlabelHashCode
  ThreadGroup_methods__addThread_INLRThread__V_args, // the arguments
  0, //arguments count
  ThreadGroup_methods__addThread_INLRThread__V_exceptions, // the declared exceptions
  ThreadGroup_MetainfoWrapper::ThreadGroup_method__addThread_INLRThread__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ThreadGroup_methods__removeThread_INLRThread__V_arg_thread = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "thread", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThread::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadGroup_methods__removeThread_INLRThread__V_args[] = 
{
  &ThreadGroup_methods__removeThread_INLRThread__V_arg_thread,
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadGroup_methods__removeThread_INLRThread__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadGroup_method__removeThread_INLRThread__V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_removeThread", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_o__removeThread", // alternative name of method
  -1, // altlabelHashCode
  ThreadGroup_methods__removeThread_INLRThread__V_args, // the arguments
  0, //arguments count
  ThreadGroup_methods__removeThread_INLRThread__V_exceptions, // the declared exceptions
  ThreadGroup_MetainfoWrapper::ThreadGroup_method__removeThread_INLRThread__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadGroup_methods_activeCount__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadGroup_methods_activeCount__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadGroup_method_activeCount__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "activeCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3_activeCount", // alternative name of method
  -1, // altlabelHashCode
  ThreadGroup_methods_activeCount__I_args, // the arguments
  0, //arguments count
  ThreadGroup_methods_activeCount__I_exceptions, // the declared exceptions
  ThreadGroup_MetainfoWrapper::ThreadGroup_method_activeCount__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadGroup_methods_activeGroupCount__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadGroup_methods_activeGroupCount__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadGroup_method_activeGroupCount__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "activeGroupCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_4_activeGroupCount", // alternative name of method
  -1, // altlabelHashCode
  ThreadGroup_methods_activeGroupCount__I_args, // the arguments
  0, //arguments count
  ThreadGroup_methods_activeGroupCount__I_exceptions, // the declared exceptions
  ThreadGroup_MetainfoWrapper::ThreadGroup_method_activeGroupCount__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadGroup_methods_checkAccess__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadGroup_methods_checkAccess__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadGroup_method_checkAccess__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "checkAccess", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_checkAccess", // alternative name of method
  -1, // altlabelHashCode
  ThreadGroup_methods_checkAccess__V_args, // the arguments
  0, //arguments count
  ThreadGroup_methods_checkAccess__V_exceptions, // the declared exceptions
  ThreadGroup_MetainfoWrapper::ThreadGroup_method_checkAccess__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadGroup_methods_destroy__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadGroup_methods_destroy__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadGroup_method_destroy__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "destroy", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_destroy", // alternative name of method
  -1, // altlabelHashCode
  ThreadGroup_methods_destroy__V_args, // the arguments
  0, //arguments count
  ThreadGroup_methods_destroy__V_exceptions, // the declared exceptions
  ThreadGroup_MetainfoWrapper::ThreadGroup_method_destroy__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ThreadGroup_methods_enumerate_INLRThreadArray_Z_I_arg_list = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "list", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThreadArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ThreadGroup_methods_enumerate_INLRThreadArray_Z_I_arg_recursive = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "recursive", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadGroup_methods_enumerate_INLRThreadArray_Z_I_args[] = 
{
  &ThreadGroup_methods_enumerate_INLRThreadArray_Z_I_arg_list,
  &ThreadGroup_methods_enumerate_INLRThreadArray_Z_I_arg_recursive,
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadGroup_methods_enumerate_INLRThreadArray_Z_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadGroup_method_enumerate_INLRThreadArray_Z_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "enumerate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_enumerate", // alternative name of method
  -1, // altlabelHashCode
  ThreadGroup_methods_enumerate_INLRThreadArray_Z_I_args, // the arguments
  0, //arguments count
  ThreadGroup_methods_enumerate_INLRThreadArray_Z_I_exceptions, // the declared exceptions
  ThreadGroup_MetainfoWrapper::ThreadGroup_method_enumerate_INLRThreadArray_Z_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ThreadGroup_methods_enumerate_INLRThreadArray__I_arg_list = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "list", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThreadArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadGroup_methods_enumerate_INLRThreadArray__I_args[] = 
{
  &ThreadGroup_methods_enumerate_INLRThreadArray__I_arg_list,
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadGroup_methods_enumerate_INLRThreadArray__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadGroup_method_enumerate_INLRThreadArray__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "enumerate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_8_enumerate", // alternative name of method
  -1, // altlabelHashCode
  ThreadGroup_methods_enumerate_INLRThreadArray__I_args, // the arguments
  0, //arguments count
  ThreadGroup_methods_enumerate_INLRThreadArray__I_exceptions, // the declared exceptions
  ThreadGroup_MetainfoWrapper::ThreadGroup_method_enumerate_INLRThreadArray__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ThreadGroup_methods_enumerate_INLRThreadGroupArray_Z_I_arg_list = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "list", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThreadGroupArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ThreadGroup_methods_enumerate_INLRThreadGroupArray_Z_I_arg_recursive = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "recursive", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadGroup_methods_enumerate_INLRThreadGroupArray_Z_I_args[] = 
{
  &ThreadGroup_methods_enumerate_INLRThreadGroupArray_Z_I_arg_list,
  &ThreadGroup_methods_enumerate_INLRThreadGroupArray_Z_I_arg_recursive,
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadGroup_methods_enumerate_INLRThreadGroupArray_Z_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadGroup_method_enumerate_INLRThreadGroupArray_Z_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "enumerate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_9_enumerate", // alternative name of method
  -1, // altlabelHashCode
  ThreadGroup_methods_enumerate_INLRThreadGroupArray_Z_I_args, // the arguments
  0, //arguments count
  ThreadGroup_methods_enumerate_INLRThreadGroupArray_Z_I_exceptions, // the declared exceptions
  ThreadGroup_MetainfoWrapper::ThreadGroup_method_enumerate_INLRThreadGroupArray_Z_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ThreadGroup_methods_enumerate_INLRThreadGroupArray__I_arg_list = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "list", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThreadGroupArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadGroup_methods_enumerate_INLRThreadGroupArray__I_args[] = 
{
  &ThreadGroup_methods_enumerate_INLRThreadGroupArray__I_arg_list,
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadGroup_methods_enumerate_INLRThreadGroupArray__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadGroup_method_enumerate_INLRThreadGroupArray__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "enumerate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_a_enumerate", // alternative name of method
  -1, // altlabelHashCode
  ThreadGroup_methods_enumerate_INLRThreadGroupArray__I_args, // the arguments
  0, //arguments count
  ThreadGroup_methods_enumerate_INLRThreadGroupArray__I_exceptions, // the declared exceptions
  ThreadGroup_MetainfoWrapper::ThreadGroup_method_enumerate_INLRThreadGroupArray__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadGroup_methods_getMaxPriority__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadGroup_methods_getMaxPriority__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadGroup_method_getMaxPriority__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxPriority", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_b_getMaxPriority", // alternative name of method
  -1, // altlabelHashCode
  ThreadGroup_methods_getMaxPriority__I_args, // the arguments
  0, //arguments count
  ThreadGroup_methods_getMaxPriority__I_exceptions, // the declared exceptions
  ThreadGroup_MetainfoWrapper::ThreadGroup_method_getMaxPriority__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadGroup_methods_getName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadGroup_methods_getName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadGroup_method_getName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_c_getName", // alternative name of method
  -1, // altlabelHashCode
  ThreadGroup_methods_getName__LRString__args, // the arguments
  0, //arguments count
  ThreadGroup_methods_getName__LRString__exceptions, // the declared exceptions
  ThreadGroup_MetainfoWrapper::ThreadGroup_method_getName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadGroup_methods_getParent__LRThreadGroup__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadGroup_methods_getParent__LRThreadGroup__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadGroup_method_getParent__LRThreadGroup_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getParent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThreadGroup::clazzInfo(), // return type
  "_d_getParent", // alternative name of method
  -1, // altlabelHashCode
  ThreadGroup_methods_getParent__LRThreadGroup__args, // the arguments
  0, //arguments count
  ThreadGroup_methods_getParent__LRThreadGroup__exceptions, // the declared exceptions
  ThreadGroup_MetainfoWrapper::ThreadGroup_method_getParent__LRThreadGroup__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadGroup_methods_getRoot__LRThreadGroup__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadGroup_methods_getRoot__LRThreadGroup__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadGroup_method_getRoot__LRThreadGroup_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRoot", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThreadGroup::clazzInfo(), // return type
  "_2_getRoot", // alternative name of method
  -1, // altlabelHashCode
  ThreadGroup_methods_getRoot__LRThreadGroup__args, // the arguments
  0, //arguments count
  ThreadGroup_methods_getRoot__LRThreadGroup__exceptions, // the declared exceptions
  ThreadGroup_MetainfoWrapper::ThreadGroup_method_getRoot__LRThreadGroup__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadGroup_methods_interrupt__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadGroup_methods_interrupt__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadGroup_method_interrupt__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "interrupt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_interrupt", // alternative name of method
  -1, // altlabelHashCode
  ThreadGroup_methods_interrupt__V_args, // the arguments
  0, //arguments count
  ThreadGroup_methods_interrupt__V_exceptions, // the declared exceptions
  ThreadGroup_MetainfoWrapper::ThreadGroup_method_interrupt__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadGroup_methods_isDaemon__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadGroup_methods_isDaemon__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadGroup_method_isDaemon__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isDaemon", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_e_isDaemon", // alternative name of method
  -1, // altlabelHashCode
  ThreadGroup_methods_isDaemon__Z_args, // the arguments
  0, //arguments count
  ThreadGroup_methods_isDaemon__Z_exceptions, // the declared exceptions
  ThreadGroup_MetainfoWrapper::ThreadGroup_method_isDaemon__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadGroup_methods_isDestroyed__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadGroup_methods_isDestroyed__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadGroup_method_isDestroyed__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isDestroyed", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_f_isDestroyed", // alternative name of method
  -1, // altlabelHashCode
  ThreadGroup_methods_isDestroyed__Z_args, // the arguments
  0, //arguments count
  ThreadGroup_methods_isDestroyed__Z_exceptions, // the declared exceptions
  ThreadGroup_MetainfoWrapper::ThreadGroup_method_isDestroyed__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadGroup_methods_list__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadGroup_methods_list__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadGroup_method_list__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "list", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_h_list", // alternative name of method
  -1, // altlabelHashCode
  ThreadGroup_methods_list__V_args, // the arguments
  0, //arguments count
  ThreadGroup_methods_list__V_exceptions, // the declared exceptions
  ThreadGroup_MetainfoWrapper::ThreadGroup_method_list__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ThreadGroup_methods_parentOf_INLRThreadGroup__Z_arg_group = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "group", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThreadGroup::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadGroup_methods_parentOf_INLRThreadGroup__Z_args[] = 
{
  &ThreadGroup_methods_parentOf_INLRThreadGroup__Z_arg_group,
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadGroup_methods_parentOf_INLRThreadGroup__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadGroup_method_parentOf_INLRThreadGroup__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parentOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_i_parentOf", // alternative name of method
  -1, // altlabelHashCode
  ThreadGroup_methods_parentOf_INLRThreadGroup__Z_args, // the arguments
  0, //arguments count
  ThreadGroup_methods_parentOf_INLRThreadGroup__Z_exceptions, // the declared exceptions
  ThreadGroup_MetainfoWrapper::ThreadGroup_method_parentOf_INLRThreadGroup__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ThreadGroup_methods_setDaemon_Z_V_arg_on = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "on", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadGroup_methods_setDaemon_Z_V_args[] = 
{
  &ThreadGroup_methods_setDaemon_Z_V_arg_on,
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadGroup_methods_setDaemon_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadGroup_method_setDaemon_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDaemon", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_j_setDaemon", // alternative name of method
  -1, // altlabelHashCode
  ThreadGroup_methods_setDaemon_Z_V_args, // the arguments
  0, //arguments count
  ThreadGroup_methods_setDaemon_Z_V_exceptions, // the declared exceptions
  ThreadGroup_MetainfoWrapper::ThreadGroup_method_setDaemon_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ThreadGroup_methods_setMaxPriority_I_V_arg_prio = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "prio", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadGroup_methods_setMaxPriority_I_V_args[] = 
{
  &ThreadGroup_methods_setMaxPriority_I_V_arg_prio,
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadGroup_methods_setMaxPriority_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadGroup_method_setMaxPriority_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMaxPriority", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_k_setMaxPriority", // alternative name of method
  -1, // altlabelHashCode
  ThreadGroup_methods_setMaxPriority_I_V_args, // the arguments
  0, //arguments count
  ThreadGroup_methods_setMaxPriority_I_V_exceptions, // the declared exceptions
  ThreadGroup_MetainfoWrapper::ThreadGroup_method_setMaxPriority_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadGroup_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadGroup_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadGroup_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_l_toString", // alternative name of method
  -1, // altlabelHashCode
  ThreadGroup_methods_toString__LRString__args, // the arguments
  0, //arguments count
  ThreadGroup_methods_toString__LRString__exceptions, // the declared exceptions
  ThreadGroup_MetainfoWrapper::ThreadGroup_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ThreadGroup_methods_uncaughtException_INLRThread_INLRThrowable__V_arg_t = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "t", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThread::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ThreadGroup_methods_uncaughtException_INLRThread_INLRThrowable__V_arg_e = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "e", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThrowable::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadGroup_methods_uncaughtException_INLRThread_INLRThrowable__V_args[] = 
{
  &ThreadGroup_methods_uncaughtException_INLRThread_INLRThrowable__V_arg_t,
  &ThreadGroup_methods_uncaughtException_INLRThread_INLRThrowable__V_arg_e,
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadGroup_methods_uncaughtException_INLRThread_INLRThrowable__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadGroup_method_uncaughtException_INLRThread_INLRThrowable__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "uncaughtException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_m_uncaughtException", // alternative name of method
  -1, // altlabelHashCode
  ThreadGroup_methods_uncaughtException_INLRThread_INLRThrowable__V_args, // the arguments
  0, //arguments count
  ThreadGroup_methods_uncaughtException_INLRThread_INLRThrowable__V_exceptions, // the declared exceptions
  ThreadGroup_MetainfoWrapper::ThreadGroup_method_uncaughtException_INLRThread_INLRThrowable__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ThreadGroup_methods[] = 
{
  &ThreadGroup_method_GetClass__L_acdk_lang_RClass_,
  &ThreadGroup_method_ThreadGroup_INLRString__LRThreadGroup_,
  &ThreadGroup_method_ThreadGroup_INLRThreadGroup_INLRString__LRThreadGroup_,
  &ThreadGroup_method_ThreadGroup__LRThreadGroup_,
  &ThreadGroup_method__addThread_INLRThread__V,
  &ThreadGroup_method__removeThread_INLRThread__V,
  &ThreadGroup_method_activeCount__I,
  &ThreadGroup_method_activeGroupCount__I,
  &ThreadGroup_method_checkAccess__V,
  &ThreadGroup_method_destroy__V,
  &ThreadGroup_method_enumerate_INLRThreadArray_Z_I,
  &ThreadGroup_method_enumerate_INLRThreadArray__I,
  &ThreadGroup_method_enumerate_INLRThreadGroupArray_Z_I,
  &ThreadGroup_method_enumerate_INLRThreadGroupArray__I,
  &ThreadGroup_method_getMaxPriority__I,
  &ThreadGroup_method_getName__LRString_,
  &ThreadGroup_method_getParent__LRThreadGroup_,
  &ThreadGroup_method_getRoot__LRThreadGroup_,
  &ThreadGroup_method_interrupt__V,
  &ThreadGroup_method_isDaemon__Z,
  &ThreadGroup_method_isDestroyed__Z,
  &ThreadGroup_method_list__V,
  &ThreadGroup_method_parentOf_INLRThreadGroup__Z,
  &ThreadGroup_method_setDaemon_Z_V,
  &ThreadGroup_method_setMaxPriority_I_V,
  &ThreadGroup_method_toString__LRString_,
  &ThreadGroup_method_uncaughtException_INLRThread_INLRThrowable__V,
  0
};


struct ThreadGroup_MetaInfoInitializer
{  ThreadGroup_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ThreadGroup::clazzInfo();
    ci->fields =  _ThreadGroup_fields;
    ci->methods =  _ThreadGroup_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ThreadGroup_MetaInfoInitializer ThreadGroup_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang

