// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../dmi.h"
#include "../AcdkDmiClient.h"
#include "../AcdkStdWeakTypeDmiClient.h"
#include "../ClazzAttributesRes.h"
#include "../ClazzInfo.h"
#include "../ClazzInfoInternals.h"
#include "../dmi.h"
#include "../DmiClient.h"
#include "../DmiDelegate.h"
#include "../DmiNamedArg.h"
#include "../DmiObject.h"
#include "../DmiObjectArray.h"
#include "../DmiProxy.h"
#include "../Marshaler.h"
#include "../MetaAttribute.h"
#include "../MetaInfo.h"
#include "../MetaInfoChildsArray.h"
#include "../MetaInfoFlags.h"
#include "../MetaObject.h"
#include "../NamedArgs.h"
#include "../ScriptInterpreter.h"
#include "../ScriptVar.h"
#include "../ScriptVarInl.h"
#include "../StdDispatch.h"
#include "../SysFields.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>


struct acdk::lang::dmi::UnitInfo acdk_lang_dmi_unitInfo = {
  ::acdk::lang::dmi::MiUnitInfo, // flags
  0, //attributeRes
  "dmi", // name of unit
  -1, // hashCode
  "acdk/lang", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  0 // _firstChild first ClazzInfo of this unit
};

static ::acdk::lang::dmi::RegisterUnitInfo _register_acdk_lang_dmi_unitInfo(&acdk_lang_dmi_unitInfo);


namespace acdk { 
namespace lang { 
namespace dmi { 


//static
::acdk::lang::RObject
DmiDelegate_create_array(int length)
{
  return new ObjectArrayImpl<RDmiDelegate>(length);
}

//static
::acdk::lang::RObject
DmiDelegate_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DmiDelegate_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiDelegate_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DmiDelegate::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiDelegate_method_call_INLRDmiObjectArray__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiDelegate* This = dmi_cast<DmiDelegate>(This_);
    ret = (::acdk::lang::RObject)This->call(::acdk::lang::dmi::castTo< RDmiObjectArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiDelegate_method_call_INLRDmiNamedArgArray__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiDelegate* This = dmi_cast<DmiDelegate>(This_);
    ret = (::acdk::lang::RObject)This->call(::acdk::lang::dmi::castTo< RDmiNamedArgArray>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _DmiDelegate_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiDelegate_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiDelegate_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiDelegate_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DmiDelegate_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DmiDelegate_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DmiDelegate_MetainfoWrapper::DmiDelegate_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiDelegate_methods_call_INLRDmiObjectArray__LRDmiObject__arg_args = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "args", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObjectArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiDelegate_methods_call_INLRDmiObjectArray__LRDmiObject__args[] = 
{
  &DmiDelegate_methods_call_INLRDmiObjectArray__LRDmiObject__arg_args,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiDelegate_methods_call_INLRDmiObjectArray__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiDelegate_method_call_INLRDmiObjectArray__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "call", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_0_call", // alternative name of method
  -1, // altlabelHashCode
  DmiDelegate_methods_call_INLRDmiObjectArray__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiDelegate_methods_call_INLRDmiObjectArray__LRDmiObject__exceptions, // the declared exceptions
  DmiDelegate_MetainfoWrapper::DmiDelegate_method_call_INLRDmiObjectArray__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiDelegate_methods_call_INLRDmiNamedArgArray__LRDmiObject__arg_namedArgs = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "namedArgs", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiNamedArgArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiDelegate_methods_call_INLRDmiNamedArgArray__LRDmiObject__args[] = 
{
  &DmiDelegate_methods_call_INLRDmiNamedArgArray__LRDmiObject__arg_namedArgs,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiDelegate_methods_call_INLRDmiNamedArgArray__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiDelegate_method_call_INLRDmiNamedArgArray__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "call", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_1_call", // alternative name of method
  -1, // altlabelHashCode
  DmiDelegate_methods_call_INLRDmiNamedArgArray__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiDelegate_methods_call_INLRDmiNamedArgArray__LRDmiObject__exceptions, // the declared exceptions
  DmiDelegate_MetainfoWrapper::DmiDelegate_method_call_INLRDmiNamedArgArray__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DmiDelegate_methods[] = 
{
  &DmiDelegate_method_GetClass__L_acdk_lang_RClass_,
  &DmiDelegate_method_call_INLRDmiObjectArray__LRDmiObject_,
  &DmiDelegate_method_call_INLRDmiNamedArgArray__LRDmiObject_,
  0
};


struct DmiDelegate_MetaInfoInitializer
{  DmiDelegate_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DmiDelegate::clazzInfo();
    ci->fields =  _DmiDelegate_fields;
    ci->methods =  _DmiDelegate_methods;
    ci->_scopeParent = acdk_lang_dmi_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DmiDelegate_MetaInfoInitializer DmiDelegate_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang
} // namespace dmi


namespace acdk { 
namespace lang { 
namespace dmi { 


//static
::acdk::lang::RObject
StdDmiDelegate_create_array(int length)
{
  return new ObjectArrayImpl<RStdDmiDelegate>(length);
}

//static
::acdk::lang::RObject
StdDmiDelegate_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class StdDmiDelegate_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StdDmiDelegate_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)StdDmiDelegate::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StdDmiDelegate_method_StdDmiDelegate_INLRObject_INLRString__LRStdDmiDelegate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StdDmiDelegate(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StdDmiDelegate_method_StdDmiDelegate_INLRClass_INLRString__LRStdDmiDelegate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StdDmiDelegate(::acdk::lang::dmi::castTo< RClass>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StdDmiDelegate_method_call_INLRDmiNamedArgArray__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StdDmiDelegate* This = dmi_cast<StdDmiDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StdDmiDelegate::call(::acdk::lang::dmi::castTo< RDmiNamedArgArray>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->call(::acdk::lang::dmi::castTo< RDmiNamedArgArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StdDmiDelegate_method_call_INLRDmiObjectArray__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StdDmiDelegate* This = dmi_cast<StdDmiDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StdDmiDelegate::call(::acdk::lang::dmi::castTo< RDmiObjectArray>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->call(::acdk::lang::dmi::castTo< RDmiObjectArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StdDmiDelegate_method_getClass__LRClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StdDmiDelegate* This = dmi_cast<StdDmiDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StdDmiDelegate::getClass();
    else
        ret = (::acdk::lang::RObject)This->getClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StdDmiDelegate_method_getMethodName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StdDmiDelegate* This = dmi_cast<StdDmiDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StdDmiDelegate::getMethodName();
    else
        ret = (::acdk::lang::RObject)This->getMethodName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StdDmiDelegate_method_getObject__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StdDmiDelegate* This = dmi_cast<StdDmiDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StdDmiDelegate::getObject();
    else
        ret = (::acdk::lang::RObject)This->getObject();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StdDmiDelegate_fields__class_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    StdDmiDelegate* This = dmi_cast<StdDmiDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_class, flags);
    else
      This->_class = ::acdk::lang::dmi::castTo< RClass>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StdDmiDelegate_fields__methodName_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    StdDmiDelegate* This = dmi_cast<StdDmiDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_methodName, flags);
    else
      This->_methodName = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StdDmiDelegate_fields__object_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    StdDmiDelegate* This = dmi_cast<StdDmiDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_object, flags);
    else
      This->_object = ::acdk::lang::dmi::castTo< RObject>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo StdDmiDelegate_fields__class = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_class", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(),
  StdDmiDelegate_MetainfoWrapper::StdDmiDelegate_fields__class_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StdDmiDelegate_fields__methodName = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_methodName", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  StdDmiDelegate_MetainfoWrapper::StdDmiDelegate_fields__methodName_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StdDmiDelegate_fields__object = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_object", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(),
  StdDmiDelegate_MetainfoWrapper::StdDmiDelegate_fields__object_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _StdDmiDelegate_fields[] = 
{
  &StdDmiDelegate_fields__class,
  &StdDmiDelegate_fields__methodName,
  &StdDmiDelegate_fields__object,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* StdDmiDelegate_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StdDmiDelegate_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StdDmiDelegate_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_7_GetClass", // alternative name of method
  -1, // altlabelHashCode
  StdDmiDelegate_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  StdDmiDelegate_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  StdDmiDelegate_MetainfoWrapper::StdDmiDelegate_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StdDmiDelegate_methods_StdDmiDelegate_INLRObject_INLRString__LRStdDmiDelegate__arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StdDmiDelegate_methods_StdDmiDelegate_INLRObject_INLRString__LRStdDmiDelegate__arg_methodName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "methodName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StdDmiDelegate_methods_StdDmiDelegate_INLRObject_INLRString__LRStdDmiDelegate__args[] = 
{
  &StdDmiDelegate_methods_StdDmiDelegate_INLRObject_INLRString__LRStdDmiDelegate__arg_obj,
  &StdDmiDelegate_methods_StdDmiDelegate_INLRObject_INLRString__LRStdDmiDelegate__arg_methodName,
  0
};

::acdk::lang::dmi::ClazzInfo* StdDmiDelegate_methods_StdDmiDelegate_INLRObject_INLRString__LRStdDmiDelegate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StdDmiDelegate_method_StdDmiDelegate_INLRObject_INLRString__LRStdDmiDelegate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "StdDmiDelegate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StdDmiDelegate::clazzInfo(), // return type
  "_0_StdDmiDelegate", // alternative name of method
  -1, // altlabelHashCode
  StdDmiDelegate_methods_StdDmiDelegate_INLRObject_INLRString__LRStdDmiDelegate__args, // the arguments
  0, //arguments count
  StdDmiDelegate_methods_StdDmiDelegate_INLRObject_INLRString__LRStdDmiDelegate__exceptions, // the declared exceptions
  StdDmiDelegate_MetainfoWrapper::StdDmiDelegate_method_StdDmiDelegate_INLRObject_INLRString__LRStdDmiDelegate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StdDmiDelegate_methods_StdDmiDelegate_INLRClass_INLRString__LRStdDmiDelegate__arg_cls = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cls", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StdDmiDelegate_methods_StdDmiDelegate_INLRClass_INLRString__LRStdDmiDelegate__arg_methodName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "methodName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StdDmiDelegate_methods_StdDmiDelegate_INLRClass_INLRString__LRStdDmiDelegate__args[] = 
{
  &StdDmiDelegate_methods_StdDmiDelegate_INLRClass_INLRString__LRStdDmiDelegate__arg_cls,
  &StdDmiDelegate_methods_StdDmiDelegate_INLRClass_INLRString__LRStdDmiDelegate__arg_methodName,
  0
};

::acdk::lang::dmi::ClazzInfo* StdDmiDelegate_methods_StdDmiDelegate_INLRClass_INLRString__LRStdDmiDelegate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StdDmiDelegate_method_StdDmiDelegate_INLRClass_INLRString__LRStdDmiDelegate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "StdDmiDelegate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StdDmiDelegate::clazzInfo(), // return type
  "_1_StdDmiDelegate", // alternative name of method
  -1, // altlabelHashCode
  StdDmiDelegate_methods_StdDmiDelegate_INLRClass_INLRString__LRStdDmiDelegate__args, // the arguments
  0, //arguments count
  StdDmiDelegate_methods_StdDmiDelegate_INLRClass_INLRString__LRStdDmiDelegate__exceptions, // the declared exceptions
  StdDmiDelegate_MetainfoWrapper::StdDmiDelegate_method_StdDmiDelegate_INLRClass_INLRString__LRStdDmiDelegate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StdDmiDelegate_methods_call_INLRDmiNamedArgArray__LRDmiObject__arg_namedArgs = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "namedArgs", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiNamedArgArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StdDmiDelegate_methods_call_INLRDmiNamedArgArray__LRDmiObject__args[] = 
{
  &StdDmiDelegate_methods_call_INLRDmiNamedArgArray__LRDmiObject__arg_namedArgs,
  0
};

::acdk::lang::dmi::ClazzInfo* StdDmiDelegate_methods_call_INLRDmiNamedArgArray__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StdDmiDelegate_method_call_INLRDmiNamedArgArray__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "call", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_6_call", // alternative name of method
  -1, // altlabelHashCode
  StdDmiDelegate_methods_call_INLRDmiNamedArgArray__LRDmiObject__args, // the arguments
  0, //arguments count
  StdDmiDelegate_methods_call_INLRDmiNamedArgArray__LRDmiObject__exceptions, // the declared exceptions
  StdDmiDelegate_MetainfoWrapper::StdDmiDelegate_method_call_INLRDmiNamedArgArray__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StdDmiDelegate_methods_call_INLRDmiObjectArray__LRDmiObject__arg_args = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "args", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObjectArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StdDmiDelegate_methods_call_INLRDmiObjectArray__LRDmiObject__args[] = 
{
  &StdDmiDelegate_methods_call_INLRDmiObjectArray__LRDmiObject__arg_args,
  0
};

::acdk::lang::dmi::ClazzInfo* StdDmiDelegate_methods_call_INLRDmiObjectArray__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StdDmiDelegate_method_call_INLRDmiObjectArray__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "call", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_5_call", // alternative name of method
  -1, // altlabelHashCode
  StdDmiDelegate_methods_call_INLRDmiObjectArray__LRDmiObject__args, // the arguments
  0, //arguments count
  StdDmiDelegate_methods_call_INLRDmiObjectArray__LRDmiObject__exceptions, // the declared exceptions
  StdDmiDelegate_MetainfoWrapper::StdDmiDelegate_method_call_INLRDmiObjectArray__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StdDmiDelegate_methods_getClass__LRClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StdDmiDelegate_methods_getClass__LRClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StdDmiDelegate_method_getClass__LRClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(), // return type
  "_3_getClass", // alternative name of method
  -1, // altlabelHashCode
  StdDmiDelegate_methods_getClass__LRClass__args, // the arguments
  0, //arguments count
  StdDmiDelegate_methods_getClass__LRClass__exceptions, // the declared exceptions
  StdDmiDelegate_MetainfoWrapper::StdDmiDelegate_method_getClass__LRClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StdDmiDelegate_methods_getMethodName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StdDmiDelegate_methods_getMethodName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StdDmiDelegate_method_getMethodName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMethodName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_4_getMethodName", // alternative name of method
  -1, // altlabelHashCode
  StdDmiDelegate_methods_getMethodName__LRString__args, // the arguments
  0, //arguments count
  StdDmiDelegate_methods_getMethodName__LRString__exceptions, // the declared exceptions
  StdDmiDelegate_MetainfoWrapper::StdDmiDelegate_method_getMethodName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StdDmiDelegate_methods_getObject__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StdDmiDelegate_methods_getObject__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StdDmiDelegate_method_getObject__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_2_getObject", // alternative name of method
  -1, // altlabelHashCode
  StdDmiDelegate_methods_getObject__LRObject__args, // the arguments
  0, //arguments count
  StdDmiDelegate_methods_getObject__LRObject__exceptions, // the declared exceptions
  StdDmiDelegate_MetainfoWrapper::StdDmiDelegate_method_getObject__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _StdDmiDelegate_methods[] = 
{
  &StdDmiDelegate_method_GetClass__L_acdk_lang_RClass_,
  &StdDmiDelegate_method_StdDmiDelegate_INLRObject_INLRString__LRStdDmiDelegate_,
  &StdDmiDelegate_method_StdDmiDelegate_INLRClass_INLRString__LRStdDmiDelegate_,
  &StdDmiDelegate_method_call_INLRDmiNamedArgArray__LRDmiObject_,
  &StdDmiDelegate_method_call_INLRDmiObjectArray__LRDmiObject_,
  &StdDmiDelegate_method_getClass__LRClass_,
  &StdDmiDelegate_method_getMethodName__LRString_,
  &StdDmiDelegate_method_getObject__LRObject_,
  0
};


struct StdDmiDelegate_MetaInfoInitializer
{  StdDmiDelegate_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = StdDmiDelegate::clazzInfo();
    ci->fields =  _StdDmiDelegate_fields;
    ci->methods =  _StdDmiDelegate_methods;
    ci->_scopeParent = acdk_lang_dmi_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
StdDmiDelegate_MetaInfoInitializer StdDmiDelegate_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang
} // namespace dmi


namespace acdk { 
namespace lang { 
namespace dmi { 


//static
::acdk::lang::RObject
DmiNamedArg_create_array(int length)
{
  return new ObjectArrayImpl<RDmiNamedArg>(length);
}

//static
::acdk::lang::RObject
DmiNamedArg_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DmiNamedArg_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiNamedArg_method_DmiNamedArg_INLRString_INLRDmiObject__LRDmiNamedArg__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiNamedArg(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RDmiObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiNamedArg_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DmiNamedArg::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DmiNamedArg_fields_name_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DmiNamedArg* This = dmi_cast<DmiNamedArg>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->name, flags);
    else
      This->name = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DmiNamedArg_fields_value_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DmiNamedArg* This = dmi_cast<DmiNamedArg>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->value, flags);
    else
      This->value = ::acdk::lang::dmi::castTo< RDmiObject>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo DmiNamedArg_fields_name = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "name", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  DmiNamedArg_MetainfoWrapper::DmiNamedArg_fields_name_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DmiNamedArg_fields_value = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "value", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(),
  DmiNamedArg_MetainfoWrapper::DmiNamedArg_fields_value_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _DmiNamedArg_fields[] = 
{
  &DmiNamedArg_fields_name,
  &DmiNamedArg_fields_value,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiNamedArg_methods_DmiNamedArg_INLRString_INLRDmiObject__LRDmiNamedArg__arg_nam = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nam", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiNamedArg_methods_DmiNamedArg_INLRString_INLRDmiObject__LRDmiNamedArg__arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiNamedArg_methods_DmiNamedArg_INLRString_INLRDmiObject__LRDmiNamedArg__args[] = 
{
  &DmiNamedArg_methods_DmiNamedArg_INLRString_INLRDmiObject__LRDmiNamedArg__arg_nam,
  &DmiNamedArg_methods_DmiNamedArg_INLRString_INLRDmiObject__LRDmiNamedArg__arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiNamedArg_methods_DmiNamedArg_INLRString_INLRDmiObject__LRDmiNamedArg__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiNamedArg_method_DmiNamedArg_INLRString_INLRDmiObject__LRDmiNamedArg_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiNamedArg", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiNamedArg::clazzInfo(), // return type
  "_0_DmiNamedArg", // alternative name of method
  -1, // altlabelHashCode
  DmiNamedArg_methods_DmiNamedArg_INLRString_INLRDmiObject__LRDmiNamedArg__args, // the arguments
  0, //arguments count
  DmiNamedArg_methods_DmiNamedArg_INLRString_INLRDmiObject__LRDmiNamedArg__exceptions, // the declared exceptions
  DmiNamedArg_MetainfoWrapper::DmiNamedArg_method_DmiNamedArg_INLRString_INLRDmiObject__LRDmiNamedArg__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiNamedArg_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiNamedArg_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiNamedArg_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DmiNamedArg_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DmiNamedArg_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DmiNamedArg_MetainfoWrapper::DmiNamedArg_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DmiNamedArg_methods[] = 
{
  &DmiNamedArg_method_DmiNamedArg_INLRString_INLRDmiObject__LRDmiNamedArg_,
  &DmiNamedArg_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct DmiNamedArg_MetaInfoInitializer
{  DmiNamedArg_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DmiNamedArg::clazzInfo();
    ci->fields =  _DmiNamedArg_fields;
    ci->methods =  _DmiNamedArg_methods;
    ci->_scopeParent = acdk_lang_dmi_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DmiNamedArg_MetaInfoInitializer DmiNamedArg_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang
} // namespace dmi


namespace acdk { 
namespace lang { 
namespace dmi { 


//static
::acdk::lang::RObject
DmiObject_create_array(int length)
{
  return new ObjectArrayImpl<RDmiObject>(length);
}

//static
::acdk::lang::RObject
DmiObject_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DmiObject_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_DmiObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiObject();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_DmiObject_INLRDmiObject_I_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiObject(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_DmiObject_INLRDmiObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiObject(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_DmiObject_INZI_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiObject(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_DmiObject_INZ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiObject(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_DmiObject_OUTZI_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiObject(::acdk::lang::dmi::castToBoolRef(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_DmiObject_OUTZ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiObject(::acdk::lang::dmi::castToBoolRef(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_DmiObject_INCI_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiObject(::acdk::lang::dmi::castTo< char>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_DmiObject_INC_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiObject(::acdk::lang::dmi::castTo< char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_DmiObject_OUTCI_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiObject(::acdk::lang::dmi::castToCharRef(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_DmiObject_OUTC_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiObject(::acdk::lang::dmi::castToCharRef(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_DmiObject_INUCI_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiObject(::acdk::lang::dmi::castTo< ucchar>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_DmiObject_INUC_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiObject(::acdk::lang::dmi::castTo< ucchar>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_DmiObject_OUTUCI_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiObject(::acdk::lang::dmi::castToUcCharRef(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_DmiObject_OUTUC_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiObject(::acdk::lang::dmi::castToUcCharRef(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_DmiObject_INBI_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiObject(::acdk::lang::dmi::castTo< byte>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_DmiObject_INB_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiObject(::acdk::lang::dmi::castTo< byte>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_DmiObject_OUTBI_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiObject(::acdk::lang::dmi::castToByteRef(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_DmiObject_OUTB_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiObject(::acdk::lang::dmi::castToByteRef(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_DmiObject_INSI_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiObject(::acdk::lang::dmi::castTo< short>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_DmiObject_INS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiObject(::acdk::lang::dmi::castTo< short>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_DmiObject_OUTSI_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiObject(::acdk::lang::dmi::castToShortRef(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_DmiObject_OUTS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiObject(::acdk::lang::dmi::castToShortRef(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_DmiObject_INII_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiObject(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_DmiObject_INI_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiObject(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_DmiObject_OUTII_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiObject(::acdk::lang::dmi::castToIntRef(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_DmiObject_OUTI_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiObject(::acdk::lang::dmi::castToIntRef(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_DmiObject_INJI_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiObject(::acdk::lang::dmi::castTo< jlong>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_DmiObject_INJ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiObject(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_DmiObject_OUTJI_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiObject(::acdk::lang::dmi::castToLongRef(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_DmiObject_OUTJ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiObject(::acdk::lang::dmi::castToLongRef(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_DmiObject_INFI_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiObject(::acdk::lang::dmi::castTo< float>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_DmiObject_INF_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiObject(::acdk::lang::dmi::castTo< float>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_DmiObject_OUTFI_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiObject(::acdk::lang::dmi::castToFloatRef(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_DmiObject_OUTF_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiObject(::acdk::lang::dmi::castToFloatRef(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_DmiObject_INDI_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiObject(::acdk::lang::dmi::castTo< double>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_DmiObject_IND_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiObject(::acdk::lang::dmi::castTo< double>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_DmiObject_OUTDI_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiObject(::acdk::lang::dmi::castToDoubleRef(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_DmiObject_OUTD_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiObject(::acdk::lang::dmi::castToDoubleRef(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_DmiObject_INLRObject_I_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiObject(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_DmiObject_INLRObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiObject(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_DmiObject_OUTLRObject_I_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiObject(::acdk::lang::dmi::castToObjectRef< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_DmiObject_OUTLRObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiObject(::acdk::lang::dmi::castToObjectRef< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DmiObject::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_addition_INLRDmiObject_S_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::addition(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->addition(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_addition_INLRDmiObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::addition(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->addition(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_addition_INJS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::addition(::acdk::lang::dmi::castTo< jlong>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->addition(::acdk::lang::dmi::castTo< jlong>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_addition_INJ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::addition(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->addition(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_addition_INDS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::addition(::acdk::lang::dmi::castTo< double>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->addition(::acdk::lang::dmi::castTo< double>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_addition_IND_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::addition(::acdk::lang::dmi::castTo< double>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->addition(::acdk::lang::dmi::castTo< double>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_assign_INUC_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::assign(::acdk::lang::dmi::castTo< ucchar>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->assign(::acdk::lang::dmi::castTo< ucchar>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_assign_INBS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::assign(::acdk::lang::dmi::castTo< byte>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->assign(::acdk::lang::dmi::castTo< byte>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_assign_INB_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::assign(::acdk::lang::dmi::castTo< byte>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->assign(::acdk::lang::dmi::castTo< byte>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_assign_INSS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::assign(::acdk::lang::dmi::castTo< short>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->assign(::acdk::lang::dmi::castTo< short>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_assign_INS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::assign(::acdk::lang::dmi::castTo< short>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->assign(::acdk::lang::dmi::castTo< short>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_assign_INIS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::assign(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->assign(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_assign_INI_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::assign(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->assign(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_assign_INJS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::assign(::acdk::lang::dmi::castTo< jlong>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->assign(::acdk::lang::dmi::castTo< jlong>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_assign_INZ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::assign(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->assign(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_assign_INCS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::assign(::acdk::lang::dmi::castTo< char>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->assign(::acdk::lang::dmi::castTo< char>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_assign_INC_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::assign(::acdk::lang::dmi::castTo< char>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->assign(::acdk::lang::dmi::castTo< char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_assign_INUCS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::assign(::acdk::lang::dmi::castTo< ucchar>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->assign(::acdk::lang::dmi::castTo< ucchar>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_assign_INLRDmiObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::assign(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->assign(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_assign_INZS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::assign(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->assign(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_assign_INLRDmiObject_S_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::assign(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->assign(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_assign_INLRObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::assign(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->assign(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_assign_IND_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::assign(::acdk::lang::dmi::castTo< double>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->assign(::acdk::lang::dmi::castTo< double>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_assign_INLRObject_S_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::assign(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->assign(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_assign_INJ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::assign(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->assign(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_assign_INFS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::assign(::acdk::lang::dmi::castTo< float>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->assign(::acdk::lang::dmi::castTo< float>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_assign_INF_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::assign(::acdk::lang::dmi::castTo< float>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->assign(::acdk::lang::dmi::castTo< float>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_assign_INDS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::assign(::acdk::lang::dmi::castTo< double>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->assign(::acdk::lang::dmi::castTo< double>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_binary_and_INLRDmiObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::binary_and(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->binary_and(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_binary_and_INJS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::binary_and(::acdk::lang::dmi::castTo< jlong>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->binary_and(::acdk::lang::dmi::castTo< jlong>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_binary_and_INLRDmiObject_S_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::binary_and(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->binary_and(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_binary_and_INJ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::binary_and(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->binary_and(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_binary_leftshift_INLRDmiObject_S_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::binary_leftshift(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->binary_leftshift(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_binary_leftshift_INLRDmiObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::binary_leftshift(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->binary_leftshift(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_binary_leftshift_INJS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::binary_leftshift(::acdk::lang::dmi::castTo< jlong>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->binary_leftshift(::acdk::lang::dmi::castTo< jlong>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_binary_leftshift_INJ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::binary_leftshift(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->binary_leftshift(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_binary_not_S_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::binary_not(::acdk::lang::dmi::castTo< short>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->binary_not(::acdk::lang::dmi::castTo< short>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_binary_not__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::binary_not();
    else
        ret = (::acdk::lang::RObject)This->binary_not();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_binary_or_INLRDmiObject_S_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::binary_or(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->binary_or(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_binary_or_INLRDmiObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::binary_or(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->binary_or(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_binary_or_INJS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::binary_or(::acdk::lang::dmi::castTo< jlong>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->binary_or(::acdk::lang::dmi::castTo< jlong>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_binary_or_INJ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::binary_or(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->binary_or(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_binary_rightshift_INLRDmiObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::binary_rightshift(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->binary_rightshift(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_binary_rightshift_INJS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::binary_rightshift(::acdk::lang::dmi::castTo< jlong>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->binary_rightshift(::acdk::lang::dmi::castTo< jlong>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_binary_rightshift_INLRDmiObject_S_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::binary_rightshift(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->binary_rightshift(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_binary_rightshift_INJ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::binary_rightshift(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->binary_rightshift(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_binary_rightshift_unsigned_INLRDmiObject_S_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::binary_rightshift_unsigned(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->binary_rightshift_unsigned(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_binary_rightshift_unsigned_INLRDmiObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::binary_rightshift_unsigned(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->binary_rightshift_unsigned(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_binary_rightshift_unsigned_INJS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::binary_rightshift_unsigned(::acdk::lang::dmi::castTo< jlong>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->binary_rightshift_unsigned(::acdk::lang::dmi::castTo< jlong>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_binary_rightshift_unsigned_INJ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::binary_rightshift_unsigned(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->binary_rightshift_unsigned(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_binary_rightshift_unsigned_INLRObject_S_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::binary_rightshift_unsigned(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->binary_rightshift_unsigned(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_binary_rightshift_unsigned_INLRObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::binary_rightshift_unsigned(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->binary_rightshift_unsigned(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_binary_xor_INLRDmiObject_S_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::binary_xor(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->binary_xor(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_binary_xor_INLRDmiObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::binary_xor(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->binary_xor(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_binary_xor_INJS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::binary_xor(::acdk::lang::dmi::castTo< jlong>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->binary_xor(::acdk::lang::dmi::castTo< jlong>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_binary_xor_INJ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::binary_xor(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->binary_xor(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_decrement_S_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::decrement(::acdk::lang::dmi::castTo< short>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->decrement(::acdk::lang::dmi::castTo< short>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_decrement__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::decrement();
    else
        ret = (::acdk::lang::RObject)This->decrement();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_divide_INLRDmiObject_S_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::divide(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->divide(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_divide_INLRDmiObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::divide(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->divide(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_divide_INJS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::divide(::acdk::lang::dmi::castTo< jlong>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->divide(::acdk::lang::dmi::castTo< jlong>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_divide_INJ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::divide(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->divide(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_divide_INDS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::divide(::acdk::lang::dmi::castTo< double>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->divide(::acdk::lang::dmi::castTo< double>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_divide_IND_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::divide(::acdk::lang::dmi::castTo< double>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->divide(::acdk::lang::dmi::castTo< double>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_equal_INJ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::equal(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->equal(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_equal_INDS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::equal(::acdk::lang::dmi::castTo< double>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->equal(::acdk::lang::dmi::castTo< double>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_equal_IND_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::equal(::acdk::lang::dmi::castTo< double>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->equal(::acdk::lang::dmi::castTo< double>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_equal_INZS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::equal(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->equal(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_equal_INLRDmiObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::equal(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->equal(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_equal_INJS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::equal(::acdk::lang::dmi::castTo< jlong>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->equal(::acdk::lang::dmi::castTo< jlong>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_equal_INLRDmiObject_S_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::equal(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->equal(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_equal_INZ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::equal(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->equal(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_equal_INCS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::equal(::acdk::lang::dmi::castTo< char>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->equal(::acdk::lang::dmi::castTo< char>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_equal_INC_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::equal(::acdk::lang::dmi::castTo< char>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->equal(::acdk::lang::dmi::castTo< char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_equal_INLuc2char_S_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::equal(::acdk::lang::dmi::castTo< uc2char>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->equal(::acdk::lang::dmi::castTo< uc2char>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_equal_INLuc2char__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::equal(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->equal(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_equal_INLRObject_S_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::equal(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->equal(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_equal_INLRObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::equal(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->equal(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_equals_INLRDmiObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::equals(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_equals_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_getBoolVar_S_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::getBoolVar(::acdk::lang::dmi::castTo< short>(args[0], dc));
    else
      ret = This->getBoolVar(::acdk::lang::dmi::castTo< short>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_getBoolVar__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::getBoolVar();
    else
      ret = This->getBoolVar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_getByteVar_S_B_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::getByteVar(::acdk::lang::dmi::castTo< short>(args[0], dc));
    else
      ret = This->getByteVar(::acdk::lang::dmi::castTo< short>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_getByteVar__B_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::getByteVar();
    else
      ret = This->getByteVar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_getCharVar_S_C_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::getCharVar(::acdk::lang::dmi::castTo< short>(args[0], dc));
    else
      ret = This->getCharVar(::acdk::lang::dmi::castTo< short>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_getCharVar__C_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::getCharVar();
    else
      ret = This->getCharVar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_getDoubleVar_S_D_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::getDoubleVar(::acdk::lang::dmi::castTo< short>(args[0], dc));
    else
      ret = This->getDoubleVar(::acdk::lang::dmi::castTo< short>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_getDoubleVar__D_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::getDoubleVar();
    else
      ret = This->getDoubleVar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_getFlags__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::getFlags();
    else
      ret = This->getFlags();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_getFloatVar__F_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::getFloatVar();
    else
      ret = This->getFloatVar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_getFloatVar_S_F_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::getFloatVar(::acdk::lang::dmi::castTo< short>(args[0], dc));
    else
      ret = This->getFloatVar(::acdk::lang::dmi::castTo< short>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_getIntVar_S_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::getIntVar(::acdk::lang::dmi::castTo< short>(args[0], dc));
    else
      ret = This->getIntVar(::acdk::lang::dmi::castTo< short>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_getIntVar__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::getIntVar();
    else
      ret = This->getIntVar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_getLongVar_S_J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::getLongVar(::acdk::lang::dmi::castTo< short>(args[0], dc));
    else
      ret = This->getLongVar(::acdk::lang::dmi::castTo< short>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_getLongVar__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::getLongVar();
    else
      ret = This->getLongVar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_getObjectVar_S_LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::getObjectVar(::acdk::lang::dmi::castTo< short>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getObjectVar(::acdk::lang::dmi::castTo< short>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_getObjectVar__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::getObjectVar();
    else
        ret = (::acdk::lang::RObject)This->getObjectVar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_getShortVar_S_S_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::getShortVar(::acdk::lang::dmi::castTo< short>(args[0], dc));
    else
      ret = This->getShortVar(::acdk::lang::dmi::castTo< short>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_getShortVar__S_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::getShortVar();
    else
      ret = This->getShortVar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_getStringVar_S_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::getStringVar(::acdk::lang::dmi::castTo< short>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getStringVar(::acdk::lang::dmi::castTo< short>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_getStringVar__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::getStringVar();
    else
        ret = (::acdk::lang::RObject)This->getStringVar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_getTypeInfo__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::getTypeInfo();
    else
        ret = (::acdk::lang::RObject)This->getTypeInfo();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_getVarType__LVarType__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = (VarType)This->DmiObject::getVarType();
    else
      ret = (VarType)This->getVarType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_greater_or_equal_INLRDmiObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::greater_or_equal(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->greater_or_equal(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_greater_or_equal_INJS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::greater_or_equal(::acdk::lang::dmi::castTo< jlong>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->greater_or_equal(::acdk::lang::dmi::castTo< jlong>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_greater_or_equal_INLRDmiObject_S_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::greater_or_equal(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->greater_or_equal(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_greater_or_equal_INJ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::greater_or_equal(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->greater_or_equal(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_greater_or_equal_INDS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::greater_or_equal(::acdk::lang::dmi::castTo< double>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->greater_or_equal(::acdk::lang::dmi::castTo< double>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_greater_or_equal_IND_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::greater_or_equal(::acdk::lang::dmi::castTo< double>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->greater_or_equal(::acdk::lang::dmi::castTo< double>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_greater_than_INLRDmiObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::greater_than(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->greater_than(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_greater_than_INJS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::greater_than(::acdk::lang::dmi::castTo< jlong>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->greater_than(::acdk::lang::dmi::castTo< jlong>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_greater_than_INLRDmiObject_S_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::greater_than(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->greater_than(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_greater_than_INJ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::greater_than(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->greater_than(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_greater_than_INDS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::greater_than(::acdk::lang::dmi::castTo< double>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->greater_than(::acdk::lang::dmi::castTo< double>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_greater_than_IND_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::greater_than(::acdk::lang::dmi::castTo< double>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->greater_than(::acdk::lang::dmi::castTo< double>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_increment__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::increment();
    else
        ret = (::acdk::lang::RObject)This->increment();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_isBoolType__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::isBoolType();
    else
      ret = This->isBoolType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_isBoolean_S_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::isBoolean(::acdk::lang::dmi::castTo< short>(args[0], dc));
    else
      ret = This->isBoolean(::acdk::lang::dmi::castTo< short>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_isBoolean__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::isBoolean();
    else
      ret = This->isBoolean();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_isByteType__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::isByteType();
    else
      ret = This->isByteType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_isCharType__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::isCharType();
    else
      ret = This->isCharType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_isCharacterType__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::isCharacterType();
    else
      ret = This->isCharacterType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_isDoubleType__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::isDoubleType();
    else
      ret = This->isDoubleType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_isFloatType__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::isFloatType();
    else
      ret = This->isFloatType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_isFloating_S_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::isFloating(::acdk::lang::dmi::castTo< short>(args[0], dc));
    else
      ret = This->isFloating(::acdk::lang::dmi::castTo< short>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_isFloating__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::isFloating();
    else
      ret = This->isFloating();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_isFloatingType__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::isFloatingType();
    else
      ret = This->isFloatingType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_isIntType__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::isIntType();
    else
      ret = This->isIntType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_isInteger_S_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::isInteger(::acdk::lang::dmi::castTo< short>(args[0], dc));
    else
      ret = This->isInteger(::acdk::lang::dmi::castTo< short>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_isInteger__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::isInteger();
    else
      ret = This->isInteger();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_isIntegerType__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::isIntegerType();
    else
      ret = This->isIntegerType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_isLongType__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::isLongType();
    else
      ret = This->isLongType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_isNumber_S_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::isNumber(::acdk::lang::dmi::castTo< short>(args[0], dc));
    else
      ret = This->isNumber(::acdk::lang::dmi::castTo< short>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_isNumber__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::isNumber();
    else
      ret = This->isNumber();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_isNumberType__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::isNumberType();
    else
      ret = This->isNumberType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_isObject_S_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::isObject(::acdk::lang::dmi::castTo< short>(args[0], dc));
    else
      ret = This->isObject(::acdk::lang::dmi::castTo< short>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_isObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::isObject();
    else
      ret = This->isObject();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_isObjectType__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::isObjectType();
    else
      ret = This->isObjectType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_isShortType__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::isShortType();
    else
      ret = This->isShortType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_isString_S_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::isString(::acdk::lang::dmi::castTo< short>(args[0], dc));
    else
      ret = This->isString(::acdk::lang::dmi::castTo< short>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_isString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::isString();
    else
      ret = This->isString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_isStringType__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::isStringType();
    else
      ret = This->isStringType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_isTrue_S_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::isTrue(::acdk::lang::dmi::castTo< short>(args[0], dc));
    else
      ret = This->isTrue(::acdk::lang::dmi::castTo< short>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_isTrue__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::isTrue();
    else
      ret = This->isTrue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_isUcCharType__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiObject::isUcCharType();
    else
      ret = This->isUcCharType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_less_or_equal_INLRDmiObject_S_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::less_or_equal(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->less_or_equal(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_less_or_equal_INLRDmiObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::less_or_equal(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->less_or_equal(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_less_or_equal_INJS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::less_or_equal(::acdk::lang::dmi::castTo< jlong>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->less_or_equal(::acdk::lang::dmi::castTo< jlong>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_less_or_equal_INJ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::less_or_equal(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->less_or_equal(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_less_or_equal_INDS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::less_or_equal(::acdk::lang::dmi::castTo< double>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->less_or_equal(::acdk::lang::dmi::castTo< double>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_less_or_equal_IND_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::less_or_equal(::acdk::lang::dmi::castTo< double>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->less_or_equal(::acdk::lang::dmi::castTo< double>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_less_than_INLRDmiObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::less_than(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->less_than(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_less_than_INJS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::less_than(::acdk::lang::dmi::castTo< jlong>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->less_than(::acdk::lang::dmi::castTo< jlong>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_less_than_INJ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::less_than(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->less_than(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_less_than_INDS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::less_than(::acdk::lang::dmi::castTo< double>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->less_than(::acdk::lang::dmi::castTo< double>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_less_than_INLRDmiObject_S_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::less_than(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->less_than(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_less_than_IND_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::less_than(::acdk::lang::dmi::castTo< double>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->less_than(::acdk::lang::dmi::castTo< double>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_logical_and_INLRDmiObject_S_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::logical_and(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->logical_and(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_logical_and_INLRDmiObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::logical_and(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->logical_and(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_logical_and_INZS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::logical_and(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->logical_and(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_logical_and_INZ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::logical_and(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->logical_and(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_logical_not_S_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::logical_not(::acdk::lang::dmi::castTo< short>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->logical_not(::acdk::lang::dmi::castTo< short>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_logical_not__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::logical_not();
    else
        ret = (::acdk::lang::RObject)This->logical_not();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_logical_or_INLRDmiObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::logical_or(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->logical_or(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_logical_or_INZS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::logical_or(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->logical_or(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_logical_or_INLRDmiObject_S_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::logical_or(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->logical_or(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_logical_or_INZ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::logical_or(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->logical_or(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_logical_xor_INLRDmiObject_S_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::logical_xor(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->logical_xor(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_logical_xor_INLRDmiObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::logical_xor(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->logical_xor(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_logical_xor_INZS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::logical_xor(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->logical_xor(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_logical_xor_INZ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::logical_xor(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->logical_xor(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_logical_xor_INLRObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::logical_xor(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->logical_xor(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_modulo_INLRDmiObject_S_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::modulo(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->modulo(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_modulo_INLRDmiObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::modulo(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->modulo(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_modulo_INJS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::modulo(::acdk::lang::dmi::castTo< jlong>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->modulo(::acdk::lang::dmi::castTo< jlong>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_modulo_INJ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::modulo(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->modulo(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_multiply_INLRDmiObject_S_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::multiply(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->multiply(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_multiply_INLRDmiObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::multiply(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->multiply(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_multiply_INJS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::multiply(::acdk::lang::dmi::castTo< jlong>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->multiply(::acdk::lang::dmi::castTo< jlong>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_multiply_INJ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::multiply(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->multiply(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_multiply_INDS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::multiply(::acdk::lang::dmi::castTo< double>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->multiply(::acdk::lang::dmi::castTo< double>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_multiply_IND_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::multiply(::acdk::lang::dmi::castTo< double>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->multiply(::acdk::lang::dmi::castTo< double>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_not_equal_INLRDmiObject_S_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::not_equal(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->not_equal(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_not_equal_INLRDmiObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::not_equal(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->not_equal(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_not_equal_INJS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::not_equal(::acdk::lang::dmi::castTo< jlong>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->not_equal(::acdk::lang::dmi::castTo< jlong>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_not_equal_INJ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::not_equal(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->not_equal(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_not_equal_INDS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::not_equal(::acdk::lang::dmi::castTo< double>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->not_equal(::acdk::lang::dmi::castTo< double>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_not_equal_IND_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::not_equal(::acdk::lang::dmi::castTo< double>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->not_equal(::acdk::lang::dmi::castTo< double>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_not_equal_INZS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::not_equal(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->not_equal(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_not_equal_INZ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::not_equal(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->not_equal(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_not_equal_INCS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::not_equal(::acdk::lang::dmi::castTo< char>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->not_equal(::acdk::lang::dmi::castTo< char>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_not_equal_INC_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::not_equal(::acdk::lang::dmi::castTo< char>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->not_equal(::acdk::lang::dmi::castTo< char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_not_equal_INLuc2char_S_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::not_equal(::acdk::lang::dmi::castTo< uc2char>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->not_equal(::acdk::lang::dmi::castTo< uc2char>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_not_equal_INLuc2char__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::not_equal(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->not_equal(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_as_INLRDmiObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator*(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator*(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_as_INJ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator*(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator*(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_as_IND_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator*(::acdk::lang::dmi::castTo< double>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator*(::acdk::lang::dmi::castTo< double>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_as_INLRObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator*(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator*(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_eq_eq_INLRDmiObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator==(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator==(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_eq_eq_INLuc2char__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator==(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator==(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_eq_eq_INLRObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator==(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator==(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_eq_eq_INJ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator==(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator==(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_eq_eq_IND_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator==(::acdk::lang::dmi::castTo< double>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator==(::acdk::lang::dmi::castTo< double>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_eq_eq_INZ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator==(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator==(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_eq_eq_INC_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator==(::acdk::lang::dmi::castTo< char>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator==(::acdk::lang::dmi::castTo< char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_gt_INLRDmiObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator>(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator>(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_gt_INLRObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator>(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator>(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_gt_INJ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator>(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator>(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_gt_IND_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator>(::acdk::lang::dmi::castTo< double>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator>(::acdk::lang::dmi::castTo< double>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_gt_eq_INLRDmiObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator>=(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator>=(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_gt_eq_INLRObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator>=(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator>=(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_gt_eq_INJ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator>=(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator>=(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_gt_eq_IND_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator>=(::acdk::lang::dmi::castTo< double>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator>=(::acdk::lang::dmi::castTo< double>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_gt_gt_INLRDmiObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator>>(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator>>(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_gt_gt_INJ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator>>(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator>>(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_gt_gt_INLRObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator>>(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator>>(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_la_INLRDmiObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator&(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator&(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_la_INJ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator&(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator&(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_la_INLRObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator&(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator&(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_la_la_INLRDmiObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator&&(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator&&(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_la_la_INZ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator&&(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator&&(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_la_la_INLRObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator&&(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator&&(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_lt_INLRDmiObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator<(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator<(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_lt_INJ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator<(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator<(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_lt_IND_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator<(::acdk::lang::dmi::castTo< double>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator<(::acdk::lang::dmi::castTo< double>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_lt_INLRObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator<(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator<(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_lt_eq_INLRDmiObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator<=(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator<=(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_lt_eq_INJ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator<=(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator<=(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_lt_eq_IND_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator<=(::acdk::lang::dmi::castTo< double>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator<=(::acdk::lang::dmi::castTo< double>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_lt_eq_INLRObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator<=(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator<=(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_lt_lt_INLRDmiObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator<<(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator<<(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_lt_lt_INJ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator<<(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator<<(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_lt_lt_INLRObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator<<(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator<<(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_mi_IND_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator-(::acdk::lang::dmi::castTo< double>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator-(::acdk::lang::dmi::castTo< double>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_mi__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator-();
    else
        ret = (::acdk::lang::RObject)This->operator-();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_mi_INLRObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator-(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator-(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_mi_INJ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator-(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator-(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_mi_INLRDmiObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator-(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator-(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_mi_mi__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator--();
    else
        ret = (::acdk::lang::RObject)This->operator--();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_mi_mi_I_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator--(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator--(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_nt__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator!();
    else
        ret = (::acdk::lang::RObject)This->operator!();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_nt_eq_INLRDmiObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator!=(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator!=(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_nt_eq_INJ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator!=(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator!=(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_nt_eq_IND_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator!=(::acdk::lang::dmi::castTo< double>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator!=(::acdk::lang::dmi::castTo< double>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_nt_eq_INZ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator!=(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator!=(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_nt_eq_INC_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator!=(::acdk::lang::dmi::castTo< char>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator!=(::acdk::lang::dmi::castTo< char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_nt_eq_INLuc2char__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator!=(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator!=(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_nt_eq_INLRObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator!=(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator!=(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_pl_INLRDmiObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator+(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator+(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_pl_INLRString__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator+(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator+(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_pl_INLRObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator+(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator+(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_pl_INJ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator+(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator+(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_pl_IND_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator+(::acdk::lang::dmi::castTo< double>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator+(::acdk::lang::dmi::castTo< double>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_pl__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator+();
    else
        ret = (::acdk::lang::RObject)This->operator+();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_pl_pl__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator++();
    else
        ret = (::acdk::lang::RObject)This->operator++();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_pl_pl_I_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator++(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator++(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_ps_INLRDmiObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator%(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator%(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_ps_INJ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator%(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator%(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_ps_INLRObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator%(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator%(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_rf_INLRDmiObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator^(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator^(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_rf_INJ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator^(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator^(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_rf_INLRObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator^(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator^(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_sl_INLRDmiObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator/(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator/(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_sl_INJ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator/(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator/(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_sl_IND_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator/(::acdk::lang::dmi::castTo< double>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator/(::acdk::lang::dmi::castTo< double>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_sl_INLRObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator/(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator/(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_tl__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator~();
    else
        ret = (::acdk::lang::RObject)This->operator~();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_vb_INLRObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator|(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator|(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_vb_INLRDmiObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator|(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator|(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_vb_INJ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator|(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator|(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_vb_vb_INLRDmiObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator||(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator||(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_vb_vb_INZ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator||(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator||(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_operator_vb_vb_INLRObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::operator||(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator||(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_readObject_INL_acdk_io_RObjectReader_INLRClass__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DmiObject::readObject(::acdk::lang::dmi::castTo< ::acdk::io::RObjectReader>(args[0], dc), ::acdk::lang::dmi::castTo< RClass>(args[1], dc));
    else
        This->readObject(::acdk::lang::dmi::castTo< ::acdk::io::RObjectReader>(args[0], dc), ::acdk::lang::dmi::castTo< RClass>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_subtraction_INLRDmiObject_S_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::subtraction(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->subtraction(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_subtraction_INLRDmiObject__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::subtraction(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->subtraction(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_subtraction_INJS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::subtraction(::acdk::lang::dmi::castTo< jlong>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->subtraction(::acdk::lang::dmi::castTo< jlong>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_subtraction_INJ_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::subtraction(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->subtraction(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_subtraction_INDS_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::subtraction(::acdk::lang::dmi::castTo< double>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->subtraction(::acdk::lang::dmi::castTo< double>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_subtraction_IND_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::subtraction(::acdk::lang::dmi::castTo< double>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->subtraction(::acdk::lang::dmi::castTo< double>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_toCode__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::toCode();
    else
        ret = (::acdk::lang::RObject)This->toCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiObject::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiObject_method_writeObject_INL_acdk_io_RObjectWriter_INLRClass__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiObject* This = dmi_cast<DmiObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DmiObject::writeObject(::acdk::lang::dmi::castTo< ::acdk::io::RObjectWriter>(args[0], dc), ::acdk::lang::dmi::castTo< RClass>(args[1], dc));
    else
        This->writeObject(::acdk::lang::dmi::castTo< ::acdk::io::RObjectWriter>(args[0], dc), ::acdk::lang::dmi::castTo< RClass>(args[1], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _DmiObject_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_DmiObject__LRDmiObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_DmiObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_DmiObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiObject::clazzInfo(), // return type
  "_0_DmiObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_DmiObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_DmiObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_DmiObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_INLRDmiObject_I_LRDmiObject__arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_INLRDmiObject_I_LRDmiObject__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_DmiObject_INLRDmiObject_I_LRDmiObject__args[] = 
{
  &DmiObject_methods_DmiObject_INLRDmiObject_I_LRDmiObject__arg_obj,
  &DmiObject_methods_DmiObject_INLRDmiObject_I_LRDmiObject__arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_DmiObject_INLRDmiObject_I_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_DmiObject_INLRDmiObject_I_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiObject::clazzInfo(), // return type
  "_1_DmiObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_DmiObject_INLRDmiObject_I_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_DmiObject_INLRDmiObject_I_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_DmiObject_INLRDmiObject_I_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_INLRDmiObject__LRDmiObject__arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_DmiObject_INLRDmiObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_DmiObject_INLRDmiObject__LRDmiObject__arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_DmiObject_INLRDmiObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_DmiObject_INLRDmiObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiObject::clazzInfo(), // return type
  "_2_DmiObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_DmiObject_INLRDmiObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_DmiObject_INLRDmiObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_DmiObject_INLRDmiObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_INZI_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_INZI_LRDmiObject__arg_fl = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "fl", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_DmiObject_INZI_LRDmiObject__args[] = 
{
  &DmiObject_methods_DmiObject_INZI_LRDmiObject__arg_c,
  &DmiObject_methods_DmiObject_INZI_LRDmiObject__arg_fl,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_DmiObject_INZI_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_DmiObject_INZI_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiObject::clazzInfo(), // return type
  "_3_DmiObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_DmiObject_INZI_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_DmiObject_INZI_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_DmiObject_INZI_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_INZ_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_DmiObject_INZ_LRDmiObject__args[] = 
{
  &DmiObject_methods_DmiObject_INZ_LRDmiObject__arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_DmiObject_INZ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_DmiObject_INZ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiObject::clazzInfo(), // return type
  "_4_DmiObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_DmiObject_INZ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_DmiObject_INZ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_DmiObject_INZ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_OUTZI_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_OUTZI_LRDmiObject__arg_fl = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "fl", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_DmiObject_OUTZI_LRDmiObject__args[] = 
{
  &DmiObject_methods_DmiObject_OUTZI_LRDmiObject__arg_c,
  &DmiObject_methods_DmiObject_OUTZI_LRDmiObject__arg_fl,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_DmiObject_OUTZI_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_DmiObject_OUTZI_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiObject::clazzInfo(), // return type
  "_5_DmiObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_DmiObject_OUTZI_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_DmiObject_OUTZI_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_DmiObject_OUTZI_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_OUTZ_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_DmiObject_OUTZ_LRDmiObject__args[] = 
{
  &DmiObject_methods_DmiObject_OUTZ_LRDmiObject__arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_DmiObject_OUTZ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_DmiObject_OUTZ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiObject::clazzInfo(), // return type
  "_6_DmiObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_DmiObject_OUTZ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_DmiObject_OUTZ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_DmiObject_OUTZ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_INCI_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_INCI_LRDmiObject__arg_fl = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "fl", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_DmiObject_INCI_LRDmiObject__args[] = 
{
  &DmiObject_methods_DmiObject_INCI_LRDmiObject__arg_c,
  &DmiObject_methods_DmiObject_INCI_LRDmiObject__arg_fl,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_DmiObject_INCI_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_DmiObject_INCI_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiObject::clazzInfo(), // return type
  "_7_DmiObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_DmiObject_INCI_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_DmiObject_INCI_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_DmiObject_INCI_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_INC_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_DmiObject_INC_LRDmiObject__args[] = 
{
  &DmiObject_methods_DmiObject_INC_LRDmiObject__arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_DmiObject_INC_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_DmiObject_INC_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiObject::clazzInfo(), // return type
  "_8_DmiObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_DmiObject_INC_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_DmiObject_INC_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_DmiObject_INC_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_OUTCI_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_OUTCI_LRDmiObject__arg_fl = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "fl", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_DmiObject_OUTCI_LRDmiObject__args[] = 
{
  &DmiObject_methods_DmiObject_OUTCI_LRDmiObject__arg_c,
  &DmiObject_methods_DmiObject_OUTCI_LRDmiObject__arg_fl,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_DmiObject_OUTCI_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_DmiObject_OUTCI_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiObject::clazzInfo(), // return type
  "_9_DmiObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_DmiObject_OUTCI_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_DmiObject_OUTCI_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_DmiObject_OUTCI_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_OUTC_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_DmiObject_OUTC_LRDmiObject__args[] = 
{
  &DmiObject_methods_DmiObject_OUTC_LRDmiObject__arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_DmiObject_OUTC_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_DmiObject_OUTC_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiObject::clazzInfo(), // return type
  "_a_DmiObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_DmiObject_OUTC_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_DmiObject_OUTC_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_DmiObject_OUTC_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_INUCI_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_INUCI_LRDmiObject__arg_fl = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "fl", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_DmiObject_INUCI_LRDmiObject__args[] = 
{
  &DmiObject_methods_DmiObject_INUCI_LRDmiObject__arg_c,
  &DmiObject_methods_DmiObject_INUCI_LRDmiObject__arg_fl,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_DmiObject_INUCI_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_DmiObject_INUCI_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiObject::clazzInfo(), // return type
  "_b_DmiObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_DmiObject_INUCI_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_DmiObject_INUCI_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_DmiObject_INUCI_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_INUC_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_DmiObject_INUC_LRDmiObject__args[] = 
{
  &DmiObject_methods_DmiObject_INUC_LRDmiObject__arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_DmiObject_INUC_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_DmiObject_INUC_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiObject::clazzInfo(), // return type
  "_c_DmiObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_DmiObject_INUC_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_DmiObject_INUC_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_DmiObject_INUC_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_OUTUCI_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_OUTUCI_LRDmiObject__arg_fl = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "fl", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_DmiObject_OUTUCI_LRDmiObject__args[] = 
{
  &DmiObject_methods_DmiObject_OUTUCI_LRDmiObject__arg_c,
  &DmiObject_methods_DmiObject_OUTUCI_LRDmiObject__arg_fl,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_DmiObject_OUTUCI_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_DmiObject_OUTUCI_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiObject::clazzInfo(), // return type
  "_d_DmiObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_DmiObject_OUTUCI_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_DmiObject_OUTUCI_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_DmiObject_OUTUCI_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_OUTUC_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_DmiObject_OUTUC_LRDmiObject__args[] = 
{
  &DmiObject_methods_DmiObject_OUTUC_LRDmiObject__arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_DmiObject_OUTUC_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_DmiObject_OUTUC_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiObject::clazzInfo(), // return type
  "_e_DmiObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_DmiObject_OUTUC_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_DmiObject_OUTUC_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_DmiObject_OUTUC_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_INBI_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_INBI_LRDmiObject__arg_fl = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "fl", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_DmiObject_INBI_LRDmiObject__args[] = 
{
  &DmiObject_methods_DmiObject_INBI_LRDmiObject__arg_c,
  &DmiObject_methods_DmiObject_INBI_LRDmiObject__arg_fl,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_DmiObject_INBI_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_DmiObject_INBI_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiObject::clazzInfo(), // return type
  "_f_DmiObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_DmiObject_INBI_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_DmiObject_INBI_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_DmiObject_INBI_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_INB_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_DmiObject_INB_LRDmiObject__args[] = 
{
  &DmiObject_methods_DmiObject_INB_LRDmiObject__arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_DmiObject_INB_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_DmiObject_INB_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiObject::clazzInfo(), // return type
  "_g_DmiObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_DmiObject_INB_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_DmiObject_INB_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_DmiObject_INB_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_OUTBI_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_OUTBI_LRDmiObject__arg_fl = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "fl", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_DmiObject_OUTBI_LRDmiObject__args[] = 
{
  &DmiObject_methods_DmiObject_OUTBI_LRDmiObject__arg_c,
  &DmiObject_methods_DmiObject_OUTBI_LRDmiObject__arg_fl,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_DmiObject_OUTBI_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_DmiObject_OUTBI_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiObject::clazzInfo(), // return type
  "_h_DmiObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_DmiObject_OUTBI_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_DmiObject_OUTBI_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_DmiObject_OUTBI_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_OUTB_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_DmiObject_OUTB_LRDmiObject__args[] = 
{
  &DmiObject_methods_DmiObject_OUTB_LRDmiObject__arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_DmiObject_OUTB_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_DmiObject_OUTB_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiObject::clazzInfo(), // return type
  "_i_DmiObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_DmiObject_OUTB_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_DmiObject_OUTB_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_DmiObject_OUTB_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_INSI_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_INSI_LRDmiObject__arg_fl = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "fl", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_DmiObject_INSI_LRDmiObject__args[] = 
{
  &DmiObject_methods_DmiObject_INSI_LRDmiObject__arg_c,
  &DmiObject_methods_DmiObject_INSI_LRDmiObject__arg_fl,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_DmiObject_INSI_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_DmiObject_INSI_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiObject::clazzInfo(), // return type
  "_j_DmiObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_DmiObject_INSI_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_DmiObject_INSI_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_DmiObject_INSI_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_INS_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_DmiObject_INS_LRDmiObject__args[] = 
{
  &DmiObject_methods_DmiObject_INS_LRDmiObject__arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_DmiObject_INS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_DmiObject_INS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiObject::clazzInfo(), // return type
  "_k_DmiObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_DmiObject_INS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_DmiObject_INS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_DmiObject_INS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_OUTSI_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_OUTSI_LRDmiObject__arg_fl = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "fl", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_DmiObject_OUTSI_LRDmiObject__args[] = 
{
  &DmiObject_methods_DmiObject_OUTSI_LRDmiObject__arg_c,
  &DmiObject_methods_DmiObject_OUTSI_LRDmiObject__arg_fl,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_DmiObject_OUTSI_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_DmiObject_OUTSI_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiObject::clazzInfo(), // return type
  "_l_DmiObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_DmiObject_OUTSI_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_DmiObject_OUTSI_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_DmiObject_OUTSI_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_OUTS_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_DmiObject_OUTS_LRDmiObject__args[] = 
{
  &DmiObject_methods_DmiObject_OUTS_LRDmiObject__arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_DmiObject_OUTS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_DmiObject_OUTS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiObject::clazzInfo(), // return type
  "_m_DmiObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_DmiObject_OUTS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_DmiObject_OUTS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_DmiObject_OUTS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_INII_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_INII_LRDmiObject__arg_fl = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "fl", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_DmiObject_INII_LRDmiObject__args[] = 
{
  &DmiObject_methods_DmiObject_INII_LRDmiObject__arg_c,
  &DmiObject_methods_DmiObject_INII_LRDmiObject__arg_fl,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_DmiObject_INII_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_DmiObject_INII_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiObject::clazzInfo(), // return type
  "_n_DmiObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_DmiObject_INII_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_DmiObject_INII_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_DmiObject_INII_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_INI_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_DmiObject_INI_LRDmiObject__args[] = 
{
  &DmiObject_methods_DmiObject_INI_LRDmiObject__arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_DmiObject_INI_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_DmiObject_INI_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiObject::clazzInfo(), // return type
  "_o_DmiObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_DmiObject_INI_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_DmiObject_INI_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_DmiObject_INI_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_OUTII_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_OUTII_LRDmiObject__arg_fl = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "fl", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_DmiObject_OUTII_LRDmiObject__args[] = 
{
  &DmiObject_methods_DmiObject_OUTII_LRDmiObject__arg_c,
  &DmiObject_methods_DmiObject_OUTII_LRDmiObject__arg_fl,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_DmiObject_OUTII_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_DmiObject_OUTII_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiObject::clazzInfo(), // return type
  "_p_DmiObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_DmiObject_OUTII_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_DmiObject_OUTII_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_DmiObject_OUTII_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_OUTI_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_DmiObject_OUTI_LRDmiObject__args[] = 
{
  &DmiObject_methods_DmiObject_OUTI_LRDmiObject__arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_DmiObject_OUTI_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_DmiObject_OUTI_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiObject::clazzInfo(), // return type
  "_q_DmiObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_DmiObject_OUTI_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_DmiObject_OUTI_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_DmiObject_OUTI_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_INJI_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_INJI_LRDmiObject__arg_fl = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "fl", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_DmiObject_INJI_LRDmiObject__args[] = 
{
  &DmiObject_methods_DmiObject_INJI_LRDmiObject__arg_c,
  &DmiObject_methods_DmiObject_INJI_LRDmiObject__arg_fl,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_DmiObject_INJI_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_DmiObject_INJI_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiObject::clazzInfo(), // return type
  "_r_DmiObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_DmiObject_INJI_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_DmiObject_INJI_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_DmiObject_INJI_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_INJ_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_DmiObject_INJ_LRDmiObject__args[] = 
{
  &DmiObject_methods_DmiObject_INJ_LRDmiObject__arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_DmiObject_INJ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_DmiObject_INJ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiObject::clazzInfo(), // return type
  "_s_DmiObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_DmiObject_INJ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_DmiObject_INJ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_DmiObject_INJ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_OUTJI_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_OUTJI_LRDmiObject__arg_fl = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "fl", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_DmiObject_OUTJI_LRDmiObject__args[] = 
{
  &DmiObject_methods_DmiObject_OUTJI_LRDmiObject__arg_c,
  &DmiObject_methods_DmiObject_OUTJI_LRDmiObject__arg_fl,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_DmiObject_OUTJI_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_DmiObject_OUTJI_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiObject::clazzInfo(), // return type
  "_t_DmiObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_DmiObject_OUTJI_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_DmiObject_OUTJI_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_DmiObject_OUTJI_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_OUTJ_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_DmiObject_OUTJ_LRDmiObject__args[] = 
{
  &DmiObject_methods_DmiObject_OUTJ_LRDmiObject__arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_DmiObject_OUTJ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_DmiObject_OUTJ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiObject::clazzInfo(), // return type
  "_u_DmiObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_DmiObject_OUTJ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_DmiObject_OUTJ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_DmiObject_OUTJ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_INFI_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_INFI_LRDmiObject__arg_fl = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "fl", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_DmiObject_INFI_LRDmiObject__args[] = 
{
  &DmiObject_methods_DmiObject_INFI_LRDmiObject__arg_c,
  &DmiObject_methods_DmiObject_INFI_LRDmiObject__arg_fl,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_DmiObject_INFI_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_DmiObject_INFI_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiObject::clazzInfo(), // return type
  "_v_DmiObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_DmiObject_INFI_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_DmiObject_INFI_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_DmiObject_INFI_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_INF_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_DmiObject_INF_LRDmiObject__args[] = 
{
  &DmiObject_methods_DmiObject_INF_LRDmiObject__arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_DmiObject_INF_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_DmiObject_INF_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiObject::clazzInfo(), // return type
  "_w_DmiObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_DmiObject_INF_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_DmiObject_INF_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_DmiObject_INF_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_OUTFI_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_OUTFI_LRDmiObject__arg_fl = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "fl", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_DmiObject_OUTFI_LRDmiObject__args[] = 
{
  &DmiObject_methods_DmiObject_OUTFI_LRDmiObject__arg_c,
  &DmiObject_methods_DmiObject_OUTFI_LRDmiObject__arg_fl,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_DmiObject_OUTFI_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_DmiObject_OUTFI_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiObject::clazzInfo(), // return type
  "_x_DmiObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_DmiObject_OUTFI_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_DmiObject_OUTFI_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_DmiObject_OUTFI_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_OUTF_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_DmiObject_OUTF_LRDmiObject__args[] = 
{
  &DmiObject_methods_DmiObject_OUTF_LRDmiObject__arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_DmiObject_OUTF_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_DmiObject_OUTF_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiObject::clazzInfo(), // return type
  "_y_DmiObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_DmiObject_OUTF_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_DmiObject_OUTF_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_DmiObject_OUTF_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_INDI_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_INDI_LRDmiObject__arg_fl = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "fl", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_DmiObject_INDI_LRDmiObject__args[] = 
{
  &DmiObject_methods_DmiObject_INDI_LRDmiObject__arg_c,
  &DmiObject_methods_DmiObject_INDI_LRDmiObject__arg_fl,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_DmiObject_INDI_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_DmiObject_INDI_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiObject::clazzInfo(), // return type
  "_z_DmiObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_DmiObject_INDI_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_DmiObject_INDI_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_DmiObject_INDI_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_IND_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_DmiObject_IND_LRDmiObject__args[] = 
{
  &DmiObject_methods_DmiObject_IND_LRDmiObject__arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_DmiObject_IND_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_DmiObject_IND_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiObject::clazzInfo(), // return type
  "_A_DmiObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_DmiObject_IND_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_DmiObject_IND_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_DmiObject_IND_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_OUTDI_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_OUTDI_LRDmiObject__arg_fl = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "fl", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_DmiObject_OUTDI_LRDmiObject__args[] = 
{
  &DmiObject_methods_DmiObject_OUTDI_LRDmiObject__arg_c,
  &DmiObject_methods_DmiObject_OUTDI_LRDmiObject__arg_fl,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_DmiObject_OUTDI_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_DmiObject_OUTDI_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiObject::clazzInfo(), // return type
  "_B_DmiObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_DmiObject_OUTDI_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_DmiObject_OUTDI_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_DmiObject_OUTDI_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_OUTD_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_DmiObject_OUTD_LRDmiObject__args[] = 
{
  &DmiObject_methods_DmiObject_OUTD_LRDmiObject__arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_DmiObject_OUTD_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_DmiObject_OUTD_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiObject::clazzInfo(), // return type
  "_C_DmiObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_DmiObject_OUTD_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_DmiObject_OUTD_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_DmiObject_OUTD_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_INLRObject_I_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_INLRObject_I_LRDmiObject__arg_fl = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "fl", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_DmiObject_INLRObject_I_LRDmiObject__args[] = 
{
  &DmiObject_methods_DmiObject_INLRObject_I_LRDmiObject__arg_c,
  &DmiObject_methods_DmiObject_INLRObject_I_LRDmiObject__arg_fl,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_DmiObject_INLRObject_I_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_DmiObject_INLRObject_I_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiObject::clazzInfo(), // return type
  "_D_DmiObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_DmiObject_INLRObject_I_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_DmiObject_INLRObject_I_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_DmiObject_INLRObject_I_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_INLRObject__LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_DmiObject_INLRObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_DmiObject_INLRObject__LRDmiObject__arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_DmiObject_INLRObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_DmiObject_INLRObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiObject::clazzInfo(), // return type
  "_E_DmiObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_DmiObject_INLRObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_DmiObject_INLRObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_DmiObject_INLRObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_OUTLRObject_I_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_OUTLRObject_I_LRDmiObject__arg_fl = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "fl", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_DmiObject_OUTLRObject_I_LRDmiObject__args[] = 
{
  &DmiObject_methods_DmiObject_OUTLRObject_I_LRDmiObject__arg_c,
  &DmiObject_methods_DmiObject_OUTLRObject_I_LRDmiObject__arg_fl,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_DmiObject_OUTLRObject_I_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_DmiObject_OUTLRObject_I_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiObject::clazzInfo(), // return type
  "_F_DmiObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_DmiObject_OUTLRObject_I_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_DmiObject_OUTLRObject_I_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_DmiObject_OUTLRObject_I_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_DmiObject_OUTLRObject__LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_DmiObject_OUTLRObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_DmiObject_OUTLRObject__LRDmiObject__arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_DmiObject_OUTLRObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_DmiObject_OUTLRObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiObject::clazzInfo(), // return type
  "_G_DmiObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_DmiObject_OUTLRObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_DmiObject_OUTLRObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_DmiObject_OUTLRObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5g_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DmiObject_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_addition_INLRDmiObject_S_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_addition_INLRDmiObject_S_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_addition_INLRDmiObject_S_LRDmiObject__args[] = 
{
  &DmiObject_methods_addition_INLRDmiObject_S_LRDmiObject__arg_other,
  &DmiObject_methods_addition_INLRDmiObject_S_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_addition_INLRDmiObject_S_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_addition_INLRDmiObject_S_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_1V_addition", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_addition_INLRDmiObject_S_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_addition_INLRDmiObject_S_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_addition_INLRDmiObject_S_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_addition_INLRDmiObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_addition_INLRDmiObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_addition_INLRDmiObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_addition_INLRDmiObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_addition_INLRDmiObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "addition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_1W_addition", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_addition_INLRDmiObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_addition_INLRDmiObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_addition_INLRDmiObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_addition_INJS_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_addition_INJS_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_addition_INJS_LRDmiObject__args[] = 
{
  &DmiObject_methods_addition_INJS_LRDmiObject__arg_other,
  &DmiObject_methods_addition_INJS_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_addition_INJS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_addition_INJS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_1X_addition", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_addition_INJS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_addition_INJS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_addition_INJS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_addition_INJ_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_addition_INJ_LRDmiObject__args[] = 
{
  &DmiObject_methods_addition_INJ_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_addition_INJ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_addition_INJ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "addition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_1Y_addition", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_addition_INJ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_addition_INJ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_addition_INJ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_addition_INDS_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_addition_INDS_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_addition_INDS_LRDmiObject__args[] = 
{
  &DmiObject_methods_addition_INDS_LRDmiObject__arg_other,
  &DmiObject_methods_addition_INDS_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_addition_INDS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_addition_INDS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_1Z_addition", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_addition_INDS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_addition_INDS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_addition_INDS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_addition_IND_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_addition_IND_LRDmiObject__args[] = 
{
  &DmiObject_methods_addition_IND_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_addition_IND_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_addition_IND_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "addition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_20_addition", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_addition_IND_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_addition_IND_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_addition_IND_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_assign_INUC_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_assign_INUC_LRDmiObject__args[] = 
{
  &DmiObject_methods_assign_INUC_LRDmiObject__arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_assign_INUC_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_assign_INUC_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "assign", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_1G_assign", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_assign_INUC_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_assign_INUC_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_assign_INUC_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_assign_INBS_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_assign_INBS_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_assign_INBS_LRDmiObject__args[] = 
{
  &DmiObject_methods_assign_INBS_LRDmiObject__arg_c,
  &DmiObject_methods_assign_INBS_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_assign_INBS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_assign_INBS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "assign", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_1H_assign", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_assign_INBS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_assign_INBS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_assign_INBS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_assign_INB_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_assign_INB_LRDmiObject__args[] = 
{
  &DmiObject_methods_assign_INB_LRDmiObject__arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_assign_INB_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_assign_INB_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "assign", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_1I_assign", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_assign_INB_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_assign_INB_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_assign_INB_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_assign_INSS_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_assign_INSS_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_assign_INSS_LRDmiObject__args[] = 
{
  &DmiObject_methods_assign_INSS_LRDmiObject__arg_c,
  &DmiObject_methods_assign_INSS_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_assign_INSS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_assign_INSS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "assign", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_1J_assign", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_assign_INSS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_assign_INSS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_assign_INSS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_assign_INS_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_assign_INS_LRDmiObject__args[] = 
{
  &DmiObject_methods_assign_INS_LRDmiObject__arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_assign_INS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_assign_INS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "assign", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_1K_assign", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_assign_INS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_assign_INS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_assign_INS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_assign_INIS_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_assign_INIS_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_assign_INIS_LRDmiObject__args[] = 
{
  &DmiObject_methods_assign_INIS_LRDmiObject__arg_c,
  &DmiObject_methods_assign_INIS_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_assign_INIS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_assign_INIS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "assign", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_1L_assign", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_assign_INIS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_assign_INIS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_assign_INIS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_assign_INI_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_assign_INI_LRDmiObject__args[] = 
{
  &DmiObject_methods_assign_INI_LRDmiObject__arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_assign_INI_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_assign_INI_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "assign", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_1M_assign", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_assign_INI_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_assign_INI_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_assign_INI_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_assign_INJS_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_assign_INJS_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_assign_INJS_LRDmiObject__args[] = 
{
  &DmiObject_methods_assign_INJS_LRDmiObject__arg_c,
  &DmiObject_methods_assign_INJS_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_assign_INJS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_assign_INJS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "assign", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_1N_assign", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_assign_INJS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_assign_INJS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_assign_INJS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_assign_INZ_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_assign_INZ_LRDmiObject__args[] = 
{
  &DmiObject_methods_assign_INZ_LRDmiObject__arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_assign_INZ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_assign_INZ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "assign", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_1C_assign", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_assign_INZ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_assign_INZ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_assign_INZ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_assign_INCS_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_assign_INCS_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_assign_INCS_LRDmiObject__args[] = 
{
  &DmiObject_methods_assign_INCS_LRDmiObject__arg_c,
  &DmiObject_methods_assign_INCS_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_assign_INCS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_assign_INCS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "assign", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_1D_assign", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_assign_INCS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_assign_INCS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_assign_INCS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_assign_INC_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_assign_INC_LRDmiObject__args[] = 
{
  &DmiObject_methods_assign_INC_LRDmiObject__arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_assign_INC_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_assign_INC_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "assign", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_1E_assign", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_assign_INC_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_assign_INC_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_assign_INC_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_assign_INUCS_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_assign_INUCS_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_assign_INUCS_LRDmiObject__args[] = 
{
  &DmiObject_methods_assign_INUCS_LRDmiObject__arg_c,
  &DmiObject_methods_assign_INUCS_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_assign_INUCS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_assign_INUCS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "assign", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_1F_assign", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_assign_INUCS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_assign_INUCS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_assign_INUCS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_assign_INLRDmiObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_assign_INLRDmiObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_assign_INLRDmiObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_assign_INLRDmiObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_assign_INLRDmiObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "assign", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_1A_assign", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_assign_INLRDmiObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_assign_INLRDmiObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_assign_INLRDmiObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_assign_INZS_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_assign_INZS_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_assign_INZS_LRDmiObject__args[] = 
{
  &DmiObject_methods_assign_INZS_LRDmiObject__arg_c,
  &DmiObject_methods_assign_INZS_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_assign_INZS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_assign_INZS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "assign", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_1B_assign", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_assign_INZS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_assign_INZS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_assign_INZS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_assign_INLRDmiObject_S_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_assign_INLRDmiObject_S_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_assign_INLRDmiObject_S_LRDmiObject__args[] = 
{
  &DmiObject_methods_assign_INLRDmiObject_S_LRDmiObject__arg_other,
  &DmiObject_methods_assign_INLRDmiObject_S_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_assign_INLRDmiObject_S_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_assign_INLRDmiObject_S_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "assign", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_1z_assign", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_assign_INLRDmiObject_S_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_assign_INLRDmiObject_S_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_assign_INLRDmiObject_S_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_assign_INLRObject__LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_assign_INLRObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_assign_INLRObject__LRDmiObject__arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_assign_INLRObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_assign_INLRObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "assign", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_1U_assign", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_assign_INLRObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_assign_INLRObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_assign_INLRObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_assign_IND_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_assign_IND_LRDmiObject__args[] = 
{
  &DmiObject_methods_assign_IND_LRDmiObject__arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_assign_IND_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_assign_IND_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "assign", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_1S_assign", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_assign_IND_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_assign_IND_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_assign_IND_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_assign_INLRObject_S_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_assign_INLRObject_S_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_assign_INLRObject_S_LRDmiObject__args[] = 
{
  &DmiObject_methods_assign_INLRObject_S_LRDmiObject__arg_c,
  &DmiObject_methods_assign_INLRObject_S_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_assign_INLRObject_S_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_assign_INLRObject_S_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "assign", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_1T_assign", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_assign_INLRObject_S_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_assign_INLRObject_S_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_assign_INLRObject_S_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_assign_INJ_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_assign_INJ_LRDmiObject__args[] = 
{
  &DmiObject_methods_assign_INJ_LRDmiObject__arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_assign_INJ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_assign_INJ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "assign", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_1O_assign", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_assign_INJ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_assign_INJ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_assign_INJ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_assign_INFS_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_assign_INFS_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_assign_INFS_LRDmiObject__args[] = 
{
  &DmiObject_methods_assign_INFS_LRDmiObject__arg_c,
  &DmiObject_methods_assign_INFS_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_assign_INFS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_assign_INFS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "assign", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_1P_assign", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_assign_INFS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_assign_INFS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_assign_INFS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_assign_INF_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_assign_INF_LRDmiObject__args[] = 
{
  &DmiObject_methods_assign_INF_LRDmiObject__arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_assign_INF_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_assign_INF_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "assign", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_1Q_assign", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_assign_INF_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_assign_INF_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_assign_INF_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_assign_INDS_LRDmiObject__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_assign_INDS_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_assign_INDS_LRDmiObject__args[] = 
{
  &DmiObject_methods_assign_INDS_LRDmiObject__arg_c,
  &DmiObject_methods_assign_INDS_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_assign_INDS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_assign_INDS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "assign", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_1R_assign", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_assign_INDS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_assign_INDS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_assign_INDS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_binary_and_INLRDmiObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_binary_and_INLRDmiObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_binary_and_INLRDmiObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_binary_and_INLRDmiObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_binary_and_INLRDmiObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "binary_and", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4q_binary_and", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_binary_and_INLRDmiObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_binary_and_INLRDmiObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_binary_and_INLRDmiObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_binary_and_INJS_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_binary_and_INJS_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_binary_and_INJS_LRDmiObject__args[] = 
{
  &DmiObject_methods_binary_and_INJS_LRDmiObject__arg_other,
  &DmiObject_methods_binary_and_INJS_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_binary_and_INJS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_binary_and_INJS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "binary_and", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4r_binary_and", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_binary_and_INJS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_binary_and_INJS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_binary_and_INJS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_binary_and_INLRDmiObject_S_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_binary_and_INLRDmiObject_S_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_binary_and_INLRDmiObject_S_LRDmiObject__args[] = 
{
  &DmiObject_methods_binary_and_INLRDmiObject_S_LRDmiObject__arg_other,
  &DmiObject_methods_binary_and_INLRDmiObject_S_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_binary_and_INLRDmiObject_S_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_binary_and_INLRDmiObject_S_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "binary_and", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4p_binary_and", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_binary_and_INLRDmiObject_S_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_binary_and_INLRDmiObject_S_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_binary_and_INLRDmiObject_S_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_binary_and_INJ_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_binary_and_INJ_LRDmiObject__args[] = 
{
  &DmiObject_methods_binary_and_INJ_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_binary_and_INJ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_binary_and_INJ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "binary_and", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4s_binary_and", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_binary_and_INJ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_binary_and_INJ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_binary_and_INJ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_binary_leftshift_INLRDmiObject_S_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_binary_leftshift_INLRDmiObject_S_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_binary_leftshift_INLRDmiObject_S_LRDmiObject__args[] = 
{
  &DmiObject_methods_binary_leftshift_INLRDmiObject_S_LRDmiObject__arg_other,
  &DmiObject_methods_binary_leftshift_INLRDmiObject_S_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_binary_leftshift_INLRDmiObject_S_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_binary_leftshift_INLRDmiObject_S_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "binary_leftshift", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4K_binary_leftshift", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_binary_leftshift_INLRDmiObject_S_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_binary_leftshift_INLRDmiObject_S_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_binary_leftshift_INLRDmiObject_S_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_binary_leftshift_INLRDmiObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_binary_leftshift_INLRDmiObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_binary_leftshift_INLRDmiObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_binary_leftshift_INLRDmiObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_binary_leftshift_INLRDmiObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "binary_leftshift", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4L_binary_leftshift", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_binary_leftshift_INLRDmiObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_binary_leftshift_INLRDmiObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_binary_leftshift_INLRDmiObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_binary_leftshift_INJS_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_binary_leftshift_INJS_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_binary_leftshift_INJS_LRDmiObject__args[] = 
{
  &DmiObject_methods_binary_leftshift_INJS_LRDmiObject__arg_other,
  &DmiObject_methods_binary_leftshift_INJS_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_binary_leftshift_INJS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_binary_leftshift_INJS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "binary_leftshift", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4M_binary_leftshift", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_binary_leftshift_INJS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_binary_leftshift_INJS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_binary_leftshift_INJS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_binary_leftshift_INJ_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_binary_leftshift_INJ_LRDmiObject__args[] = 
{
  &DmiObject_methods_binary_leftshift_INJ_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_binary_leftshift_INJ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_binary_leftshift_INJ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "binary_leftshift", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4N_binary_leftshift", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_binary_leftshift_INJ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_binary_leftshift_INJ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_binary_leftshift_INJ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_binary_not_S_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_binary_not_S_LRDmiObject__args[] = 
{
  &DmiObject_methods_binary_not_S_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_binary_not_S_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_binary_not_S_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "binary_not", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_54_binary_not", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_binary_not_S_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_binary_not_S_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_binary_not_S_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_binary_not__LRDmiObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_binary_not__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_binary_not__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "binary_not", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_55_binary_not", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_binary_not__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_binary_not__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_binary_not__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_binary_or_INLRDmiObject_S_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_binary_or_INLRDmiObject_S_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_binary_or_INLRDmiObject_S_LRDmiObject__args[] = 
{
  &DmiObject_methods_binary_or_INLRDmiObject_S_LRDmiObject__arg_other,
  &DmiObject_methods_binary_or_INLRDmiObject_S_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_binary_or_INLRDmiObject_S_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_binary_or_INLRDmiObject_S_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "binary_or", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4w_binary_or", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_binary_or_INLRDmiObject_S_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_binary_or_INLRDmiObject_S_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_binary_or_INLRDmiObject_S_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_binary_or_INLRDmiObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_binary_or_INLRDmiObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_binary_or_INLRDmiObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_binary_or_INLRDmiObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_binary_or_INLRDmiObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "binary_or", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4x_binary_or", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_binary_or_INLRDmiObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_binary_or_INLRDmiObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_binary_or_INLRDmiObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_binary_or_INJS_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_binary_or_INJS_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_binary_or_INJS_LRDmiObject__args[] = 
{
  &DmiObject_methods_binary_or_INJS_LRDmiObject__arg_other,
  &DmiObject_methods_binary_or_INJS_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_binary_or_INJS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_binary_or_INJS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "binary_or", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4y_binary_or", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_binary_or_INJS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_binary_or_INJS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_binary_or_INJS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_binary_or_INJ_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_binary_or_INJ_LRDmiObject__args[] = 
{
  &DmiObject_methods_binary_or_INJ_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_binary_or_INJ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_binary_or_INJ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "binary_or", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4z_binary_or", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_binary_or_INJ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_binary_or_INJ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_binary_or_INJ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_binary_rightshift_INLRDmiObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_binary_rightshift_INLRDmiObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_binary_rightshift_INLRDmiObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_binary_rightshift_INLRDmiObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_binary_rightshift_INLRDmiObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "binary_rightshift", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4S_binary_rightshift", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_binary_rightshift_INLRDmiObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_binary_rightshift_INLRDmiObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_binary_rightshift_INLRDmiObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_binary_rightshift_INJS_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_binary_rightshift_INJS_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_binary_rightshift_INJS_LRDmiObject__args[] = 
{
  &DmiObject_methods_binary_rightshift_INJS_LRDmiObject__arg_other,
  &DmiObject_methods_binary_rightshift_INJS_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_binary_rightshift_INJS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_binary_rightshift_INJS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "binary_rightshift", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4T_binary_rightshift", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_binary_rightshift_INJS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_binary_rightshift_INJS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_binary_rightshift_INJS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_binary_rightshift_INLRDmiObject_S_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_binary_rightshift_INLRDmiObject_S_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_binary_rightshift_INLRDmiObject_S_LRDmiObject__args[] = 
{
  &DmiObject_methods_binary_rightshift_INLRDmiObject_S_LRDmiObject__arg_other,
  &DmiObject_methods_binary_rightshift_INLRDmiObject_S_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_binary_rightshift_INLRDmiObject_S_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_binary_rightshift_INLRDmiObject_S_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "binary_rightshift", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4R_binary_rightshift", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_binary_rightshift_INLRDmiObject_S_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_binary_rightshift_INLRDmiObject_S_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_binary_rightshift_INLRDmiObject_S_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_binary_rightshift_INJ_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_binary_rightshift_INJ_LRDmiObject__args[] = 
{
  &DmiObject_methods_binary_rightshift_INJ_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_binary_rightshift_INJ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_binary_rightshift_INJ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "binary_rightshift", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4U_binary_rightshift", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_binary_rightshift_INJ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_binary_rightshift_INJ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_binary_rightshift_INJ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_binary_rightshift_unsigned_INLRDmiObject_S_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_binary_rightshift_unsigned_INLRDmiObject_S_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_binary_rightshift_unsigned_INLRDmiObject_S_LRDmiObject__args[] = 
{
  &DmiObject_methods_binary_rightshift_unsigned_INLRDmiObject_S_LRDmiObject__arg_other,
  &DmiObject_methods_binary_rightshift_unsigned_INLRDmiObject_S_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_binary_rightshift_unsigned_INLRDmiObject_S_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_binary_rightshift_unsigned_INLRDmiObject_S_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "binary_rightshift_unsigned", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4Y_binary_rightshift_unsigned", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_binary_rightshift_unsigned_INLRDmiObject_S_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_binary_rightshift_unsigned_INLRDmiObject_S_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_binary_rightshift_unsigned_INLRDmiObject_S_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_binary_rightshift_unsigned_INLRDmiObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_binary_rightshift_unsigned_INLRDmiObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_binary_rightshift_unsigned_INLRDmiObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_binary_rightshift_unsigned_INLRDmiObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_binary_rightshift_unsigned_INLRDmiObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "binary_rightshift_unsigned", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4Z_binary_rightshift_unsigned", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_binary_rightshift_unsigned_INLRDmiObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_binary_rightshift_unsigned_INLRDmiObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_binary_rightshift_unsigned_INLRDmiObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_binary_rightshift_unsigned_INJS_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_binary_rightshift_unsigned_INJS_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_binary_rightshift_unsigned_INJS_LRDmiObject__args[] = 
{
  &DmiObject_methods_binary_rightshift_unsigned_INJS_LRDmiObject__arg_other,
  &DmiObject_methods_binary_rightshift_unsigned_INJS_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_binary_rightshift_unsigned_INJS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_binary_rightshift_unsigned_INJS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "binary_rightshift_unsigned", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_50_binary_rightshift_unsigned", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_binary_rightshift_unsigned_INJS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_binary_rightshift_unsigned_INJS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_binary_rightshift_unsigned_INJS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_binary_rightshift_unsigned_INJ_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_binary_rightshift_unsigned_INJ_LRDmiObject__args[] = 
{
  &DmiObject_methods_binary_rightshift_unsigned_INJ_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_binary_rightshift_unsigned_INJ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_binary_rightshift_unsigned_INJ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "binary_rightshift_unsigned", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_51_binary_rightshift_unsigned", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_binary_rightshift_unsigned_INJ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_binary_rightshift_unsigned_INJ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_binary_rightshift_unsigned_INJ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_binary_rightshift_unsigned_INLRObject_S_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_binary_rightshift_unsigned_INLRObject_S_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_binary_rightshift_unsigned_INLRObject_S_LRDmiObject__args[] = 
{
  &DmiObject_methods_binary_rightshift_unsigned_INLRObject_S_LRDmiObject__arg_other,
  &DmiObject_methods_binary_rightshift_unsigned_INLRObject_S_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_binary_rightshift_unsigned_INLRObject_S_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_binary_rightshift_unsigned_INLRObject_S_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "binary_rightshift_unsigned", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_52_binary_rightshift_unsigned", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_binary_rightshift_unsigned_INLRObject_S_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_binary_rightshift_unsigned_INLRObject_S_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_binary_rightshift_unsigned_INLRObject_S_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_binary_rightshift_unsigned_INLRObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_binary_rightshift_unsigned_INLRObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_binary_rightshift_unsigned_INLRObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_binary_rightshift_unsigned_INLRObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_binary_rightshift_unsigned_INLRObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "binary_rightshift_unsigned", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_53_binary_rightshift_unsigned", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_binary_rightshift_unsigned_INLRObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_binary_rightshift_unsigned_INLRObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_binary_rightshift_unsigned_INLRObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_binary_xor_INLRDmiObject_S_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_binary_xor_INLRDmiObject_S_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_binary_xor_INLRDmiObject_S_LRDmiObject__args[] = 
{
  &DmiObject_methods_binary_xor_INLRDmiObject_S_LRDmiObject__arg_other,
  &DmiObject_methods_binary_xor_INLRDmiObject_S_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_binary_xor_INLRDmiObject_S_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_binary_xor_INLRDmiObject_S_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "binary_xor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4D_binary_xor", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_binary_xor_INLRDmiObject_S_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_binary_xor_INLRDmiObject_S_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_binary_xor_INLRDmiObject_S_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_binary_xor_INLRDmiObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_binary_xor_INLRDmiObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_binary_xor_INLRDmiObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_binary_xor_INLRDmiObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_binary_xor_INLRDmiObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "binary_xor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4E_binary_xor", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_binary_xor_INLRDmiObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_binary_xor_INLRDmiObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_binary_xor_INLRDmiObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_binary_xor_INJS_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_binary_xor_INJS_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_binary_xor_INJS_LRDmiObject__args[] = 
{
  &DmiObject_methods_binary_xor_INJS_LRDmiObject__arg_other,
  &DmiObject_methods_binary_xor_INJS_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_binary_xor_INJS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_binary_xor_INJS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "binary_xor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4F_binary_xor", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_binary_xor_INJS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_binary_xor_INJS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_binary_xor_INJS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_binary_xor_INJ_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_binary_xor_INJ_LRDmiObject__args[] = 
{
  &DmiObject_methods_binary_xor_INJ_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_binary_xor_INJ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_binary_xor_INJ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "binary_xor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4G_binary_xor", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_binary_xor_INJ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_binary_xor_INJ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_binary_xor_INJ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_decrement_S_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_decrement_S_LRDmiObject__args[] = 
{
  &DmiObject_methods_decrement_S_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_decrement_S_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_decrement_S_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "decrement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_5a_decrement", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_decrement_S_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_decrement_S_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_decrement_S_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_decrement__LRDmiObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_decrement__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_decrement__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "decrement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_5b_decrement", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_decrement__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_decrement__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_decrement__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_divide_INLRDmiObject_S_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_divide_INLRDmiObject_S_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_divide_INLRDmiObject_S_LRDmiObject__args[] = 
{
  &DmiObject_methods_divide_INLRDmiObject_S_LRDmiObject__arg_other,
  &DmiObject_methods_divide_INLRDmiObject_S_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_divide_INLRDmiObject_S_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_divide_INLRDmiObject_S_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "divide", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2s_divide", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_divide_INLRDmiObject_S_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_divide_INLRDmiObject_S_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_divide_INLRDmiObject_S_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_divide_INLRDmiObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_divide_INLRDmiObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_divide_INLRDmiObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_divide_INLRDmiObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_divide_INLRDmiObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "divide", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2t_divide", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_divide_INLRDmiObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_divide_INLRDmiObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_divide_INLRDmiObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_divide_INJS_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_divide_INJS_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_divide_INJS_LRDmiObject__args[] = 
{
  &DmiObject_methods_divide_INJS_LRDmiObject__arg_other,
  &DmiObject_methods_divide_INJS_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_divide_INJS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_divide_INJS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "divide", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2u_divide", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_divide_INJS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_divide_INJS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_divide_INJS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_divide_INJ_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_divide_INJ_LRDmiObject__args[] = 
{
  &DmiObject_methods_divide_INJ_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_divide_INJ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_divide_INJ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "divide", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2v_divide", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_divide_INJ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_divide_INJ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_divide_INJ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_divide_INDS_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_divide_INDS_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_divide_INDS_LRDmiObject__args[] = 
{
  &DmiObject_methods_divide_INDS_LRDmiObject__arg_other,
  &DmiObject_methods_divide_INDS_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_divide_INDS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_divide_INDS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "divide", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2w_divide", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_divide_INDS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_divide_INDS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_divide_INDS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_divide_IND_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_divide_IND_LRDmiObject__args[] = 
{
  &DmiObject_methods_divide_IND_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_divide_IND_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_divide_IND_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "divide", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2x_divide", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_divide_IND_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_divide_IND_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_divide_IND_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_equal_INJ_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_equal_INJ_LRDmiObject__args[] = 
{
  &DmiObject_methods_equal_INJ_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_equal_INJ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_equal_INJ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "equal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2M_equal", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_equal_INJ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_equal_INJ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_equal_INJ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_equal_INDS_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_equal_INDS_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_equal_INDS_LRDmiObject__args[] = 
{
  &DmiObject_methods_equal_INDS_LRDmiObject__arg_other,
  &DmiObject_methods_equal_INDS_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_equal_INDS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_equal_INDS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2N_equal", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_equal_INDS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_equal_INDS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_equal_INDS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_equal_IND_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_equal_IND_LRDmiObject__args[] = 
{
  &DmiObject_methods_equal_IND_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_equal_IND_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_equal_IND_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "equal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2O_equal", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_equal_IND_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_equal_IND_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_equal_IND_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_equal_INZS_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_equal_INZS_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_equal_INZS_LRDmiObject__args[] = 
{
  &DmiObject_methods_equal_INZS_LRDmiObject__arg_other,
  &DmiObject_methods_equal_INZS_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_equal_INZS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_equal_INZS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2P_equal", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_equal_INZS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_equal_INZS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_equal_INZS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_equal_INLRDmiObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_equal_INLRDmiObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_equal_INLRDmiObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_equal_INLRDmiObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_equal_INLRDmiObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "equal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2K_equal", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_equal_INLRDmiObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_equal_INLRDmiObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_equal_INLRDmiObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_equal_INJS_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_equal_INJS_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_equal_INJS_LRDmiObject__args[] = 
{
  &DmiObject_methods_equal_INJS_LRDmiObject__arg_other,
  &DmiObject_methods_equal_INJS_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_equal_INJS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_equal_INJS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2L_equal", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_equal_INJS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_equal_INJS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_equal_INJS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_equal_INLRDmiObject_S_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_equal_INLRDmiObject_S_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_equal_INLRDmiObject_S_LRDmiObject__args[] = 
{
  &DmiObject_methods_equal_INLRDmiObject_S_LRDmiObject__arg_other,
  &DmiObject_methods_equal_INLRDmiObject_S_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_equal_INLRDmiObject_S_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_equal_INLRDmiObject_S_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2J_equal", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_equal_INLRDmiObject_S_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_equal_INLRDmiObject_S_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_equal_INLRDmiObject_S_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_equal_INZ_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_equal_INZ_LRDmiObject__args[] = 
{
  &DmiObject_methods_equal_INZ_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_equal_INZ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_equal_INZ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "equal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2Q_equal", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_equal_INZ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_equal_INZ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_equal_INZ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_equal_INCS_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_equal_INCS_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_equal_INCS_LRDmiObject__args[] = 
{
  &DmiObject_methods_equal_INCS_LRDmiObject__arg_other,
  &DmiObject_methods_equal_INCS_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_equal_INCS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_equal_INCS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2R_equal", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_equal_INCS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_equal_INCS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_equal_INCS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_equal_INC_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_equal_INC_LRDmiObject__args[] = 
{
  &DmiObject_methods_equal_INC_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_equal_INC_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_equal_INC_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "equal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2S_equal", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_equal_INC_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_equal_INC_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_equal_INC_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_equal_INLuc2char_S_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_equal_INLuc2char_S_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_equal_INLuc2char_S_LRDmiObject__args[] = 
{
  &DmiObject_methods_equal_INLuc2char_S_LRDmiObject__arg_other,
  &DmiObject_methods_equal_INLuc2char_S_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_equal_INLuc2char_S_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_equal_INLuc2char_S_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2T_equal", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_equal_INLuc2char_S_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_equal_INLuc2char_S_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_equal_INLuc2char_S_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_equal_INLuc2char__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_equal_INLuc2char__LRDmiObject__args[] = 
{
  &DmiObject_methods_equal_INLuc2char__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_equal_INLuc2char__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_equal_INLuc2char__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "equal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2U_equal", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_equal_INLuc2char__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_equal_INLuc2char__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_equal_INLuc2char__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_equal_INLRObject_S_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_equal_INLRObject_S_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_equal_INLRObject_S_LRDmiObject__args[] = 
{
  &DmiObject_methods_equal_INLRObject_S_LRDmiObject__arg_other,
  &DmiObject_methods_equal_INLRObject_S_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_equal_INLRObject_S_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_equal_INLRObject_S_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2V_equal", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_equal_INLRObject_S_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_equal_INLRObject_S_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_equal_INLRObject_S_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_equal_INLRObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_equal_INLRObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_equal_INLRObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_equal_INLRObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_equal_INLRObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "equal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2W_equal", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_equal_INLRObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_equal_INLRObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_equal_INLRObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_equals_INLRDmiObject__Z_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_equals_INLRDmiObject__Z_args[] = 
{
  &DmiObject_methods_equals_INLRDmiObject__Z_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_equals_INLRDmiObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_equals_INLRDmiObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1x_equals", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_equals_INLRDmiObject__Z_args, // the arguments
  0, //arguments count
  DmiObject_methods_equals_INLRDmiObject__Z_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_equals_INLRDmiObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_equals_INLRObject__Z_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_equals_INLRObject__Z_args[] = 
{
  &DmiObject_methods_equals_INLRObject__Z_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_equals_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_equals_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1y_equals", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_equals_INLRObject__Z_args, // the arguments
  0, //arguments count
  DmiObject_methods_equals_INLRObject__Z_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_equals_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_getBoolVar_S_Z_arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_getBoolVar_S_Z_args[] = 
{
  &DmiObject_methods_getBoolVar_S_Z_arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_getBoolVar_S_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_getBoolVar_S_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBoolVar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_J_getBoolVar", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_getBoolVar_S_Z_args, // the arguments
  0, //arguments count
  DmiObject_methods_getBoolVar_S_Z_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_getBoolVar_S_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_getBoolVar__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_getBoolVar__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_getBoolVar__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getBoolVar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_K_getBoolVar", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_getBoolVar__Z_args, // the arguments
  0, //arguments count
  DmiObject_methods_getBoolVar__Z_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_getBoolVar__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_getByteVar_S_B_arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_getByteVar_S_B_args[] = 
{
  &DmiObject_methods_getByteVar_S_B_arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_getByteVar_S_B_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_getByteVar_S_B = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getByteVar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz(), // return type
  "_N_getByteVar", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_getByteVar_S_B_args, // the arguments
  0, //arguments count
  DmiObject_methods_getByteVar_S_B_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_getByteVar_S_B_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_getByteVar__B_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_getByteVar__B_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_getByteVar__B = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getByteVar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz(), // return type
  "_O_getByteVar", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_getByteVar__B_args, // the arguments
  0, //arguments count
  DmiObject_methods_getByteVar__B_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_getByteVar__B_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_getCharVar_S_C_arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_getCharVar_S_C_args[] = 
{
  &DmiObject_methods_getCharVar_S_C_arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_getCharVar_S_C_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_getCharVar_S_C = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCharVar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz(), // return type
  "_L_getCharVar", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_getCharVar_S_C_args, // the arguments
  0, //arguments count
  DmiObject_methods_getCharVar_S_C_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_getCharVar_S_C_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_getCharVar__C_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_getCharVar__C_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_getCharVar__C = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getCharVar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz(), // return type
  "_M_getCharVar", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_getCharVar__C_args, // the arguments
  0, //arguments count
  DmiObject_methods_getCharVar__C_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_getCharVar__C_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_getDoubleVar_S_D_arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_getDoubleVar_S_D_args[] = 
{
  &DmiObject_methods_getDoubleVar_S_D_arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_getDoubleVar_S_D_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_getDoubleVar_S_D = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDoubleVar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(), // return type
  "_X_getDoubleVar", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_getDoubleVar_S_D_args, // the arguments
  0, //arguments count
  DmiObject_methods_getDoubleVar_S_D_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_getDoubleVar_S_D_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_getDoubleVar__D_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_getDoubleVar__D_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_getDoubleVar__D = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getDoubleVar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(), // return type
  "_Y_getDoubleVar", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_getDoubleVar__D_args, // the arguments
  0, //arguments count
  DmiObject_methods_getDoubleVar__D_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_getDoubleVar__D_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_getFlags__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_getFlags__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_getFlags__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFlags", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_I_getFlags", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_getFlags__I_args, // the arguments
  0, //arguments count
  DmiObject_methods_getFlags__I_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_getFlags__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_getFloatVar__F_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_getFloatVar__F_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_getFloatVar__F = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getFloatVar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz(), // return type
  "_W_getFloatVar", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_getFloatVar__F_args, // the arguments
  0, //arguments count
  DmiObject_methods_getFloatVar__F_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_getFloatVar__F_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_getFloatVar_S_F_arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_getFloatVar_S_F_args[] = 
{
  &DmiObject_methods_getFloatVar_S_F_arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_getFloatVar_S_F_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_getFloatVar_S_F = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFloatVar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz(), // return type
  "_V_getFloatVar", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_getFloatVar_S_F_args, // the arguments
  0, //arguments count
  DmiObject_methods_getFloatVar_S_F_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_getFloatVar_S_F_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_getIntVar_S_I_arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_getIntVar_S_I_args[] = 
{
  &DmiObject_methods_getIntVar_S_I_arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_getIntVar_S_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_getIntVar_S_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getIntVar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_R_getIntVar", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_getIntVar_S_I_args, // the arguments
  0, //arguments count
  DmiObject_methods_getIntVar_S_I_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_getIntVar_S_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_getIntVar__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_getIntVar__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_getIntVar__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getIntVar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_S_getIntVar", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_getIntVar__I_args, // the arguments
  0, //arguments count
  DmiObject_methods_getIntVar__I_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_getIntVar__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_getLongVar_S_J_arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_getLongVar_S_J_args[] = 
{
  &DmiObject_methods_getLongVar_S_J_arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_getLongVar_S_J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_getLongVar_S_J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLongVar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_T_getLongVar", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_getLongVar_S_J_args, // the arguments
  0, //arguments count
  DmiObject_methods_getLongVar_S_J_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_getLongVar_S_J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_getLongVar__J_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_getLongVar__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_getLongVar__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getLongVar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_U_getLongVar", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_getLongVar__J_args, // the arguments
  0, //arguments count
  DmiObject_methods_getLongVar__J_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_getLongVar__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_getObjectVar_S_LRObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_getObjectVar_S_LRObject__args[] = 
{
  &DmiObject_methods_getObjectVar_S_LRObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_getObjectVar_S_LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_getObjectVar_S_LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getObjectVar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_Z_getObjectVar", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_getObjectVar_S_LRObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_getObjectVar_S_LRObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_getObjectVar_S_LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_getObjectVar__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_getObjectVar__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_getObjectVar__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getObjectVar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_10_getObjectVar", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_getObjectVar__LRObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_getObjectVar__LRObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_getObjectVar__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_getShortVar_S_S_arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_getShortVar_S_S_args[] = 
{
  &DmiObject_methods_getShortVar_S_S_arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_getShortVar_S_S_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_getShortVar_S_S = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getShortVar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(), // return type
  "_P_getShortVar", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_getShortVar_S_S_args, // the arguments
  0, //arguments count
  DmiObject_methods_getShortVar_S_S_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_getShortVar_S_S_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_getShortVar__S_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_getShortVar__S_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_getShortVar__S = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getShortVar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(), // return type
  "_Q_getShortVar", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_getShortVar__S_args, // the arguments
  0, //arguments count
  DmiObject_methods_getShortVar__S_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_getShortVar__S_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_getStringVar_S_LRString__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_getStringVar_S_LRString__args[] = 
{
  &DmiObject_methods_getStringVar_S_LRString__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_getStringVar_S_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_getStringVar_S_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getStringVar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_11_getStringVar", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_getStringVar_S_LRString__args, // the arguments
  0, //arguments count
  DmiObject_methods_getStringVar_S_LRString__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_getStringVar_S_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_getStringVar__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_getStringVar__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_getStringVar__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getStringVar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_12_getStringVar", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_getStringVar__LRString__args, // the arguments
  0, //arguments count
  DmiObject_methods_getStringVar__LRString__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_getStringVar__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_getTypeInfo__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_getTypeInfo__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_getTypeInfo__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTypeInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1u_getTypeInfo", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_getTypeInfo__LRString__args, // the arguments
  0, //arguments count
  DmiObject_methods_getTypeInfo__LRString__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_getTypeInfo__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_getVarType__LVarType__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_getVarType__LVarType__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_getVarType__LVarType_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getVarType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_H_getVarType", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_getVarType__LVarType__args, // the arguments
  0, //arguments count
  DmiObject_methods_getVarType__LVarType__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_getVarType__LVarType__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_greater_or_equal_INLRDmiObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_greater_or_equal_INLRDmiObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_greater_or_equal_INLRDmiObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_greater_or_equal_INLRDmiObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_greater_or_equal_INLRDmiObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "greater_or_equal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3I_greater_or_equal", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_greater_or_equal_INLRDmiObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_greater_or_equal_INLRDmiObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_greater_or_equal_INLRDmiObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_greater_or_equal_INJS_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_greater_or_equal_INJS_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_greater_or_equal_INJS_LRDmiObject__args[] = 
{
  &DmiObject_methods_greater_or_equal_INJS_LRDmiObject__arg_other,
  &DmiObject_methods_greater_or_equal_INJS_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_greater_or_equal_INJS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_greater_or_equal_INJS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "greater_or_equal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3J_greater_or_equal", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_greater_or_equal_INJS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_greater_or_equal_INJS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_greater_or_equal_INJS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_greater_or_equal_INLRDmiObject_S_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_greater_or_equal_INLRDmiObject_S_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_greater_or_equal_INLRDmiObject_S_LRDmiObject__args[] = 
{
  &DmiObject_methods_greater_or_equal_INLRDmiObject_S_LRDmiObject__arg_other,
  &DmiObject_methods_greater_or_equal_INLRDmiObject_S_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_greater_or_equal_INLRDmiObject_S_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_greater_or_equal_INLRDmiObject_S_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "greater_or_equal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3H_greater_or_equal", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_greater_or_equal_INLRDmiObject_S_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_greater_or_equal_INLRDmiObject_S_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_greater_or_equal_INLRDmiObject_S_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_greater_or_equal_INJ_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_greater_or_equal_INJ_LRDmiObject__args[] = 
{
  &DmiObject_methods_greater_or_equal_INJ_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_greater_or_equal_INJ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_greater_or_equal_INJ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "greater_or_equal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3K_greater_or_equal", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_greater_or_equal_INJ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_greater_or_equal_INJ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_greater_or_equal_INJ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_greater_or_equal_INDS_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_greater_or_equal_INDS_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_greater_or_equal_INDS_LRDmiObject__args[] = 
{
  &DmiObject_methods_greater_or_equal_INDS_LRDmiObject__arg_other,
  &DmiObject_methods_greater_or_equal_INDS_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_greater_or_equal_INDS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_greater_or_equal_INDS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "greater_or_equal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3L_greater_or_equal", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_greater_or_equal_INDS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_greater_or_equal_INDS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_greater_or_equal_INDS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_greater_or_equal_IND_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_greater_or_equal_IND_LRDmiObject__args[] = 
{
  &DmiObject_methods_greater_or_equal_IND_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_greater_or_equal_IND_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_greater_or_equal_IND_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "greater_or_equal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3M_greater_or_equal", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_greater_or_equal_IND_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_greater_or_equal_IND_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_greater_or_equal_IND_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_greater_than_INLRDmiObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_greater_than_INLRDmiObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_greater_than_INLRDmiObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_greater_than_INLRDmiObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_greater_than_INLRDmiObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "greater_than", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3o_greater_than", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_greater_than_INLRDmiObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_greater_than_INLRDmiObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_greater_than_INLRDmiObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_greater_than_INJS_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_greater_than_INJS_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_greater_than_INJS_LRDmiObject__args[] = 
{
  &DmiObject_methods_greater_than_INJS_LRDmiObject__arg_other,
  &DmiObject_methods_greater_than_INJS_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_greater_than_INJS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_greater_than_INJS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "greater_than", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3p_greater_than", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_greater_than_INJS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_greater_than_INJS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_greater_than_INJS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_greater_than_INLRDmiObject_S_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_greater_than_INLRDmiObject_S_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_greater_than_INLRDmiObject_S_LRDmiObject__args[] = 
{
  &DmiObject_methods_greater_than_INLRDmiObject_S_LRDmiObject__arg_other,
  &DmiObject_methods_greater_than_INLRDmiObject_S_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_greater_than_INLRDmiObject_S_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_greater_than_INLRDmiObject_S_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "greater_than", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3n_greater_than", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_greater_than_INLRDmiObject_S_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_greater_than_INLRDmiObject_S_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_greater_than_INLRDmiObject_S_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_greater_than_INJ_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_greater_than_INJ_LRDmiObject__args[] = 
{
  &DmiObject_methods_greater_than_INJ_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_greater_than_INJ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_greater_than_INJ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "greater_than", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3q_greater_than", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_greater_than_INJ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_greater_than_INJ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_greater_than_INJ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_greater_than_INDS_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_greater_than_INDS_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_greater_than_INDS_LRDmiObject__args[] = 
{
  &DmiObject_methods_greater_than_INDS_LRDmiObject__arg_other,
  &DmiObject_methods_greater_than_INDS_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_greater_than_INDS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_greater_than_INDS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "greater_than", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3r_greater_than", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_greater_than_INDS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_greater_than_INDS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_greater_than_INDS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_greater_than_IND_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_greater_than_IND_LRDmiObject__args[] = 
{
  &DmiObject_methods_greater_than_IND_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_greater_than_IND_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_greater_than_IND_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "greater_than", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3s_greater_than", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_greater_than_IND_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_greater_than_IND_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_greater_than_IND_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_increment__LRDmiObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_increment__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_increment__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "increment", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_57_increment", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_increment__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_increment__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_increment__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_isBoolType__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_isBoolType__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_isBoolType__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isBoolType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_13_isBoolType", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_isBoolType__Z_args, // the arguments
  0, //arguments count
  DmiObject_methods_isBoolType__Z_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_isBoolType__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_isBoolean_S_Z_arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_isBoolean_S_Z_args[] = 
{
  &DmiObject_methods_isBoolean_S_Z_arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_isBoolean_S_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_isBoolean_S_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isBoolean", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1i_isBoolean", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_isBoolean_S_Z_args, // the arguments
  0, //arguments count
  DmiObject_methods_isBoolean_S_Z_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_isBoolean_S_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_isBoolean__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_isBoolean__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_isBoolean__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "isBoolean", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1j_isBoolean", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_isBoolean__Z_args, // the arguments
  0, //arguments count
  DmiObject_methods_isBoolean__Z_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_isBoolean__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_isByteType__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_isByteType__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_isByteType__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isByteType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_16_isByteType", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_isByteType__Z_args, // the arguments
  0, //arguments count
  DmiObject_methods_isByteType__Z_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_isByteType__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_isCharType__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_isCharType__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_isCharType__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isCharType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_14_isCharType", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_isCharType__Z_args, // the arguments
  0, //arguments count
  DmiObject_methods_isCharType__Z_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_isCharType__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_isCharacterType__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_isCharacterType__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_isCharacterType__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isCharacterType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1d_isCharacterType", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_isCharacterType__Z_args, // the arguments
  0, //arguments count
  DmiObject_methods_isCharacterType__Z_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_isCharacterType__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_isDoubleType__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_isDoubleType__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_isDoubleType__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isDoubleType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1b_isDoubleType", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_isDoubleType__Z_args, // the arguments
  0, //arguments count
  DmiObject_methods_isDoubleType__Z_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_isDoubleType__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_isFloatType__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_isFloatType__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_isFloatType__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isFloatType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1a_isFloatType", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_isFloatType__Z_args, // the arguments
  0, //arguments count
  DmiObject_methods_isFloatType__Z_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_isFloatType__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_isFloating_S_Z_arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_isFloating_S_Z_args[] = 
{
  &DmiObject_methods_isFloating_S_Z_arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_isFloating_S_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_isFloating_S_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isFloating", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1m_isFloating", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_isFloating_S_Z_args, // the arguments
  0, //arguments count
  DmiObject_methods_isFloating_S_Z_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_isFloating_S_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_isFloating__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_isFloating__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_isFloating__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "isFloating", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1n_isFloating", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_isFloating__Z_args, // the arguments
  0, //arguments count
  DmiObject_methods_isFloating__Z_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_isFloating__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_isFloatingType__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_isFloatingType__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_isFloatingType__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isFloatingType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1f_isFloatingType", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_isFloatingType__Z_args, // the arguments
  0, //arguments count
  DmiObject_methods_isFloatingType__Z_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_isFloatingType__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_isIntType__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_isIntType__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_isIntType__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isIntType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_18_isIntType", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_isIntType__Z_args, // the arguments
  0, //arguments count
  DmiObject_methods_isIntType__Z_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_isIntType__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_isInteger_S_Z_arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_isInteger_S_Z_args[] = 
{
  &DmiObject_methods_isInteger_S_Z_arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_isInteger_S_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_isInteger_S_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isInteger", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1o_isInteger", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_isInteger_S_Z_args, // the arguments
  0, //arguments count
  DmiObject_methods_isInteger_S_Z_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_isInteger_S_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_isInteger__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_isInteger__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_isInteger__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "isInteger", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1p_isInteger", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_isInteger__Z_args, // the arguments
  0, //arguments count
  DmiObject_methods_isInteger__Z_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_isInteger__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_isIntegerType__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_isIntegerType__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_isIntegerType__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isIntegerType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1e_isIntegerType", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_isIntegerType__Z_args, // the arguments
  0, //arguments count
  DmiObject_methods_isIntegerType__Z_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_isIntegerType__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_isLongType__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_isLongType__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_isLongType__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isLongType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_19_isLongType", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_isLongType__Z_args, // the arguments
  0, //arguments count
  DmiObject_methods_isLongType__Z_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_isLongType__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_isNumber_S_Z_arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_isNumber_S_Z_args[] = 
{
  &DmiObject_methods_isNumber_S_Z_arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_isNumber_S_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_isNumber_S_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isNumber", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1k_isNumber", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_isNumber_S_Z_args, // the arguments
  0, //arguments count
  DmiObject_methods_isNumber_S_Z_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_isNumber_S_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_isNumber__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_isNumber__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_isNumber__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "isNumber", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1l_isNumber", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_isNumber__Z_args, // the arguments
  0, //arguments count
  DmiObject_methods_isNumber__Z_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_isNumber__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_isNumberType__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_isNumberType__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_isNumberType__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isNumberType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1g_isNumberType", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_isNumberType__Z_args, // the arguments
  0, //arguments count
  DmiObject_methods_isNumberType__Z_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_isNumberType__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_isObject_S_Z_arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_isObject_S_Z_args[] = 
{
  &DmiObject_methods_isObject_S_Z_arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_isObject_S_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_isObject_S_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1s_isObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_isObject_S_Z_args, // the arguments
  0, //arguments count
  DmiObject_methods_isObject_S_Z_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_isObject_S_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_isObject__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_isObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_isObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "isObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1t_isObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_isObject__Z_args, // the arguments
  0, //arguments count
  DmiObject_methods_isObject__Z_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_isObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_isObjectType__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_isObjectType__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_isObjectType__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isObjectType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1c_isObjectType", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_isObjectType__Z_args, // the arguments
  0, //arguments count
  DmiObject_methods_isObjectType__Z_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_isObjectType__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_isShortType__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_isShortType__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_isShortType__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isShortType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_17_isShortType", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_isShortType__Z_args, // the arguments
  0, //arguments count
  DmiObject_methods_isShortType__Z_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_isShortType__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_isString_S_Z_arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_isString_S_Z_args[] = 
{
  &DmiObject_methods_isString_S_Z_arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_isString_S_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_isString_S_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1q_isString", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_isString_S_Z_args, // the arguments
  0, //arguments count
  DmiObject_methods_isString_S_Z_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_isString_S_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_isString__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_isString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_isString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "isString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1r_isString", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_isString__Z_args, // the arguments
  0, //arguments count
  DmiObject_methods_isString__Z_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_isString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_isStringType__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_isStringType__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_isStringType__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isStringType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1h_isStringType", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_isStringType__Z_args, // the arguments
  0, //arguments count
  DmiObject_methods_isStringType__Z_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_isStringType__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_isTrue_S_Z_arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_isTrue_S_Z_args[] = 
{
  &DmiObject_methods_isTrue_S_Z_arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_isTrue_S_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_isTrue_S_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isTrue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_41_isTrue", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_isTrue_S_Z_args, // the arguments
  0, //arguments count
  DmiObject_methods_isTrue_S_Z_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_isTrue_S_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_isTrue__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_isTrue__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_isTrue__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "isTrue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_42_isTrue", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_isTrue__Z_args, // the arguments
  0, //arguments count
  DmiObject_methods_isTrue__Z_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_isTrue__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_isUcCharType__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_isUcCharType__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_isUcCharType__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isUcCharType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_15_isUcCharType", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_isUcCharType__Z_args, // the arguments
  0, //arguments count
  DmiObject_methods_isUcCharType__Z_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_isUcCharType__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_less_or_equal_INLRDmiObject_S_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_less_or_equal_INLRDmiObject_S_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_less_or_equal_INLRDmiObject_S_LRDmiObject__args[] = 
{
  &DmiObject_methods_less_or_equal_INLRDmiObject_S_LRDmiObject__arg_other,
  &DmiObject_methods_less_or_equal_INLRDmiObject_S_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_less_or_equal_INLRDmiObject_S_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_less_or_equal_INLRDmiObject_S_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "less_or_equal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3R_less_or_equal", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_less_or_equal_INLRDmiObject_S_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_less_or_equal_INLRDmiObject_S_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_less_or_equal_INLRDmiObject_S_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_less_or_equal_INLRDmiObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_less_or_equal_INLRDmiObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_less_or_equal_INLRDmiObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_less_or_equal_INLRDmiObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_less_or_equal_INLRDmiObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "less_or_equal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3S_less_or_equal", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_less_or_equal_INLRDmiObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_less_or_equal_INLRDmiObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_less_or_equal_INLRDmiObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_less_or_equal_INJS_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_less_or_equal_INJS_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_less_or_equal_INJS_LRDmiObject__args[] = 
{
  &DmiObject_methods_less_or_equal_INJS_LRDmiObject__arg_other,
  &DmiObject_methods_less_or_equal_INJS_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_less_or_equal_INJS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_less_or_equal_INJS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "less_or_equal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3T_less_or_equal", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_less_or_equal_INJS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_less_or_equal_INJS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_less_or_equal_INJS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_less_or_equal_INJ_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_less_or_equal_INJ_LRDmiObject__args[] = 
{
  &DmiObject_methods_less_or_equal_INJ_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_less_or_equal_INJ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_less_or_equal_INJ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "less_or_equal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3U_less_or_equal", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_less_or_equal_INJ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_less_or_equal_INJ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_less_or_equal_INJ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_less_or_equal_INDS_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_less_or_equal_INDS_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_less_or_equal_INDS_LRDmiObject__args[] = 
{
  &DmiObject_methods_less_or_equal_INDS_LRDmiObject__arg_other,
  &DmiObject_methods_less_or_equal_INDS_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_less_or_equal_INDS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_less_or_equal_INDS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "less_or_equal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3V_less_or_equal", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_less_or_equal_INDS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_less_or_equal_INDS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_less_or_equal_INDS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_less_or_equal_IND_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_less_or_equal_IND_LRDmiObject__args[] = 
{
  &DmiObject_methods_less_or_equal_IND_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_less_or_equal_IND_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_less_or_equal_IND_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "less_or_equal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3W_less_or_equal", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_less_or_equal_IND_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_less_or_equal_IND_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_less_or_equal_IND_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_less_than_INLRDmiObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_less_than_INLRDmiObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_less_than_INLRDmiObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_less_than_INLRDmiObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_less_than_INLRDmiObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "less_than", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3y_less_than", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_less_than_INLRDmiObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_less_than_INLRDmiObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_less_than_INLRDmiObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_less_than_INJS_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_less_than_INJS_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_less_than_INJS_LRDmiObject__args[] = 
{
  &DmiObject_methods_less_than_INJS_LRDmiObject__arg_other,
  &DmiObject_methods_less_than_INJS_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_less_than_INJS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_less_than_INJS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "less_than", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3z_less_than", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_less_than_INJS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_less_than_INJS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_less_than_INJS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_less_than_INJ_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_less_than_INJ_LRDmiObject__args[] = 
{
  &DmiObject_methods_less_than_INJ_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_less_than_INJ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_less_than_INJ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "less_than", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3A_less_than", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_less_than_INJ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_less_than_INJ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_less_than_INJ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_less_than_INDS_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_less_than_INDS_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_less_than_INDS_LRDmiObject__args[] = 
{
  &DmiObject_methods_less_than_INDS_LRDmiObject__arg_other,
  &DmiObject_methods_less_than_INDS_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_less_than_INDS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_less_than_INDS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "less_than", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3B_less_than", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_less_than_INDS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_less_than_INDS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_less_than_INDS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_less_than_INLRDmiObject_S_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_less_than_INLRDmiObject_S_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_less_than_INLRDmiObject_S_LRDmiObject__args[] = 
{
  &DmiObject_methods_less_than_INLRDmiObject_S_LRDmiObject__arg_other,
  &DmiObject_methods_less_than_INLRDmiObject_S_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_less_than_INLRDmiObject_S_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_less_than_INLRDmiObject_S_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "less_than", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3x_less_than", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_less_than_INLRDmiObject_S_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_less_than_INLRDmiObject_S_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_less_than_INLRDmiObject_S_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_less_than_IND_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_less_than_IND_LRDmiObject__args[] = 
{
  &DmiObject_methods_less_than_IND_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_less_than_IND_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_less_than_IND_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "less_than", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3C_less_than", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_less_than_IND_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_less_than_IND_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_less_than_IND_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_logical_and_INLRDmiObject_S_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_logical_and_INLRDmiObject_S_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_logical_and_INLRDmiObject_S_LRDmiObject__args[] = 
{
  &DmiObject_methods_logical_and_INLRDmiObject_S_LRDmiObject__arg_other,
  &DmiObject_methods_logical_and_INLRDmiObject_S_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_logical_and_INLRDmiObject_S_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_logical_and_INLRDmiObject_S_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "logical_and", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_43_logical_and", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_logical_and_INLRDmiObject_S_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_logical_and_INLRDmiObject_S_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_logical_and_INLRDmiObject_S_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_logical_and_INLRDmiObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_logical_and_INLRDmiObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_logical_and_INLRDmiObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_logical_and_INLRDmiObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_logical_and_INLRDmiObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "logical_and", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_44_logical_and", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_logical_and_INLRDmiObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_logical_and_INLRDmiObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_logical_and_INLRDmiObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_logical_and_INZS_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_logical_and_INZS_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_logical_and_INZS_LRDmiObject__args[] = 
{
  &DmiObject_methods_logical_and_INZS_LRDmiObject__arg_other,
  &DmiObject_methods_logical_and_INZS_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_logical_and_INZS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_logical_and_INZS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "logical_and", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_45_logical_and", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_logical_and_INZS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_logical_and_INZS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_logical_and_INZS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_logical_and_INZ_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_logical_and_INZ_LRDmiObject__args[] = 
{
  &DmiObject_methods_logical_and_INZ_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_logical_and_INZ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_logical_and_INZ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "logical_and", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_46_logical_and", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_logical_and_INZ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_logical_and_INZ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_logical_and_INZ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_logical_not_S_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_logical_not_S_LRDmiObject__args[] = 
{
  &DmiObject_methods_logical_not_S_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_logical_not_S_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_logical_not_S_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "logical_not", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4a_logical_not", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_logical_not_S_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_logical_not_S_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_logical_not_S_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_logical_not__LRDmiObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_logical_not__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_logical_not__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "logical_not", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4b_logical_not", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_logical_not__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_logical_not__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_logical_not__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_logical_or_INLRDmiObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_logical_or_INLRDmiObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_logical_or_INLRDmiObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_logical_or_INLRDmiObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_logical_or_INLRDmiObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "logical_or", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4e_logical_or", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_logical_or_INLRDmiObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_logical_or_INLRDmiObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_logical_or_INLRDmiObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_logical_or_INZS_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_logical_or_INZS_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_logical_or_INZS_LRDmiObject__args[] = 
{
  &DmiObject_methods_logical_or_INZS_LRDmiObject__arg_other,
  &DmiObject_methods_logical_or_INZS_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_logical_or_INZS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_logical_or_INZS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "logical_or", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4f_logical_or", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_logical_or_INZS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_logical_or_INZS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_logical_or_INZS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_logical_or_INLRDmiObject_S_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_logical_or_INLRDmiObject_S_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_logical_or_INLRDmiObject_S_LRDmiObject__args[] = 
{
  &DmiObject_methods_logical_or_INLRDmiObject_S_LRDmiObject__arg_other,
  &DmiObject_methods_logical_or_INLRDmiObject_S_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_logical_or_INLRDmiObject_S_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_logical_or_INLRDmiObject_S_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "logical_or", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4d_logical_or", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_logical_or_INLRDmiObject_S_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_logical_or_INLRDmiObject_S_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_logical_or_INLRDmiObject_S_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_logical_or_INZ_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_logical_or_INZ_LRDmiObject__args[] = 
{
  &DmiObject_methods_logical_or_INZ_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_logical_or_INZ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_logical_or_INZ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "logical_or", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4g_logical_or", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_logical_or_INZ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_logical_or_INZ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_logical_or_INZ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_logical_xor_INLRDmiObject_S_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_logical_xor_INLRDmiObject_S_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_logical_xor_INLRDmiObject_S_LRDmiObject__args[] = 
{
  &DmiObject_methods_logical_xor_INLRDmiObject_S_LRDmiObject__arg_other,
  &DmiObject_methods_logical_xor_INLRDmiObject_S_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_logical_xor_INLRDmiObject_S_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_logical_xor_INLRDmiObject_S_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "logical_xor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4k_logical_xor", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_logical_xor_INLRDmiObject_S_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_logical_xor_INLRDmiObject_S_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_logical_xor_INLRDmiObject_S_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_logical_xor_INLRDmiObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_logical_xor_INLRDmiObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_logical_xor_INLRDmiObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_logical_xor_INLRDmiObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_logical_xor_INLRDmiObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "logical_xor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4l_logical_xor", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_logical_xor_INLRDmiObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_logical_xor_INLRDmiObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_logical_xor_INLRDmiObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_logical_xor_INZS_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_logical_xor_INZS_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_logical_xor_INZS_LRDmiObject__args[] = 
{
  &DmiObject_methods_logical_xor_INZS_LRDmiObject__arg_other,
  &DmiObject_methods_logical_xor_INZS_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_logical_xor_INZS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_logical_xor_INZS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "logical_xor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4m_logical_xor", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_logical_xor_INZS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_logical_xor_INZS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_logical_xor_INZS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_logical_xor_INZ_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_logical_xor_INZ_LRDmiObject__args[] = 
{
  &DmiObject_methods_logical_xor_INZ_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_logical_xor_INZ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_logical_xor_INZ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "logical_xor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4n_logical_xor", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_logical_xor_INZ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_logical_xor_INZ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_logical_xor_INZ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_logical_xor_INLRObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_logical_xor_INLRObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_logical_xor_INLRObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_logical_xor_INLRObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_logical_xor_INLRObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "logical_xor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4o_logical_xor", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_logical_xor_INLRObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_logical_xor_INLRObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_logical_xor_INLRObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_modulo_INLRDmiObject_S_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_modulo_INLRDmiObject_S_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_modulo_INLRDmiObject_S_LRDmiObject__args[] = 
{
  &DmiObject_methods_modulo_INLRDmiObject_S_LRDmiObject__arg_other,
  &DmiObject_methods_modulo_INLRDmiObject_S_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_modulo_INLRDmiObject_S_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_modulo_INLRDmiObject_S_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "modulo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2C_modulo", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_modulo_INLRDmiObject_S_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_modulo_INLRDmiObject_S_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_modulo_INLRDmiObject_S_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_modulo_INLRDmiObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_modulo_INLRDmiObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_modulo_INLRDmiObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_modulo_INLRDmiObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_modulo_INLRDmiObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "modulo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2D_modulo", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_modulo_INLRDmiObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_modulo_INLRDmiObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_modulo_INLRDmiObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_modulo_INJS_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_modulo_INJS_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_modulo_INJS_LRDmiObject__args[] = 
{
  &DmiObject_methods_modulo_INJS_LRDmiObject__arg_other,
  &DmiObject_methods_modulo_INJS_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_modulo_INJS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_modulo_INJS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "modulo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2E_modulo", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_modulo_INJS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_modulo_INJS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_modulo_INJS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_modulo_INJ_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_modulo_INJ_LRDmiObject__args[] = 
{
  &DmiObject_methods_modulo_INJ_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_modulo_INJ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_modulo_INJ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "modulo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2F_modulo", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_modulo_INJ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_modulo_INJ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_modulo_INJ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_multiply_INLRDmiObject_S_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_multiply_INLRDmiObject_S_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_multiply_INLRDmiObject_S_LRDmiObject__args[] = 
{
  &DmiObject_methods_multiply_INLRDmiObject_S_LRDmiObject__arg_other,
  &DmiObject_methods_multiply_INLRDmiObject_S_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_multiply_INLRDmiObject_S_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_multiply_INLRDmiObject_S_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "multiply", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2i_multiply", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_multiply_INLRDmiObject_S_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_multiply_INLRDmiObject_S_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_multiply_INLRDmiObject_S_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_multiply_INLRDmiObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_multiply_INLRDmiObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_multiply_INLRDmiObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_multiply_INLRDmiObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_multiply_INLRDmiObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "multiply", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2j_multiply", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_multiply_INLRDmiObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_multiply_INLRDmiObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_multiply_INLRDmiObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_multiply_INJS_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_multiply_INJS_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_multiply_INJS_LRDmiObject__args[] = 
{
  &DmiObject_methods_multiply_INJS_LRDmiObject__arg_other,
  &DmiObject_methods_multiply_INJS_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_multiply_INJS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_multiply_INJS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "multiply", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2k_multiply", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_multiply_INJS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_multiply_INJS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_multiply_INJS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_multiply_INJ_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_multiply_INJ_LRDmiObject__args[] = 
{
  &DmiObject_methods_multiply_INJ_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_multiply_INJ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_multiply_INJ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "multiply", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2l_multiply", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_multiply_INJ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_multiply_INJ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_multiply_INJ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_multiply_INDS_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_multiply_INDS_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_multiply_INDS_LRDmiObject__args[] = 
{
  &DmiObject_methods_multiply_INDS_LRDmiObject__arg_other,
  &DmiObject_methods_multiply_INDS_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_multiply_INDS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_multiply_INDS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "multiply", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2m_multiply", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_multiply_INDS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_multiply_INDS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_multiply_INDS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_multiply_IND_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_multiply_IND_LRDmiObject__args[] = 
{
  &DmiObject_methods_multiply_IND_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_multiply_IND_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_multiply_IND_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "multiply", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2n_multiply", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_multiply_IND_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_multiply_IND_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_multiply_IND_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_not_equal_INLRDmiObject_S_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_not_equal_INLRDmiObject_S_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_not_equal_INLRDmiObject_S_LRDmiObject__args[] = 
{
  &DmiObject_methods_not_equal_INLRDmiObject_S_LRDmiObject__arg_other,
  &DmiObject_methods_not_equal_INLRDmiObject_S_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_not_equal_INLRDmiObject_S_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_not_equal_INLRDmiObject_S_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "not_equal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_34_not_equal", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_not_equal_INLRDmiObject_S_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_not_equal_INLRDmiObject_S_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_not_equal_INLRDmiObject_S_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_not_equal_INLRDmiObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_not_equal_INLRDmiObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_not_equal_INLRDmiObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_not_equal_INLRDmiObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_not_equal_INLRDmiObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "not_equal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_35_not_equal", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_not_equal_INLRDmiObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_not_equal_INLRDmiObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_not_equal_INLRDmiObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_not_equal_INJS_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_not_equal_INJS_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_not_equal_INJS_LRDmiObject__args[] = 
{
  &DmiObject_methods_not_equal_INJS_LRDmiObject__arg_other,
  &DmiObject_methods_not_equal_INJS_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_not_equal_INJS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_not_equal_INJS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "not_equal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_36_not_equal", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_not_equal_INJS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_not_equal_INJS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_not_equal_INJS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_not_equal_INJ_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_not_equal_INJ_LRDmiObject__args[] = 
{
  &DmiObject_methods_not_equal_INJ_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_not_equal_INJ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_not_equal_INJ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "not_equal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_37_not_equal", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_not_equal_INJ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_not_equal_INJ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_not_equal_INJ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_not_equal_INDS_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_not_equal_INDS_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_not_equal_INDS_LRDmiObject__args[] = 
{
  &DmiObject_methods_not_equal_INDS_LRDmiObject__arg_other,
  &DmiObject_methods_not_equal_INDS_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_not_equal_INDS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_not_equal_INDS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "not_equal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_38_not_equal", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_not_equal_INDS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_not_equal_INDS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_not_equal_INDS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_not_equal_IND_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_not_equal_IND_LRDmiObject__args[] = 
{
  &DmiObject_methods_not_equal_IND_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_not_equal_IND_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_not_equal_IND_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "not_equal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_39_not_equal", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_not_equal_IND_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_not_equal_IND_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_not_equal_IND_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_not_equal_INZS_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_not_equal_INZS_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_not_equal_INZS_LRDmiObject__args[] = 
{
  &DmiObject_methods_not_equal_INZS_LRDmiObject__arg_other,
  &DmiObject_methods_not_equal_INZS_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_not_equal_INZS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_not_equal_INZS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "not_equal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3a_not_equal", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_not_equal_INZS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_not_equal_INZS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_not_equal_INZS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_not_equal_INZ_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_not_equal_INZ_LRDmiObject__args[] = 
{
  &DmiObject_methods_not_equal_INZ_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_not_equal_INZ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_not_equal_INZ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "not_equal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3b_not_equal", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_not_equal_INZ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_not_equal_INZ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_not_equal_INZ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_not_equal_INCS_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_not_equal_INCS_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_not_equal_INCS_LRDmiObject__args[] = 
{
  &DmiObject_methods_not_equal_INCS_LRDmiObject__arg_other,
  &DmiObject_methods_not_equal_INCS_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_not_equal_INCS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_not_equal_INCS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "not_equal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3c_not_equal", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_not_equal_INCS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_not_equal_INCS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_not_equal_INCS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_not_equal_INC_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_not_equal_INC_LRDmiObject__args[] = 
{
  &DmiObject_methods_not_equal_INC_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_not_equal_INC_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_not_equal_INC_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "not_equal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3d_not_equal", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_not_equal_INC_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_not_equal_INC_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_not_equal_INC_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_not_equal_INLuc2char_S_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_not_equal_INLuc2char_S_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_not_equal_INLuc2char_S_LRDmiObject__args[] = 
{
  &DmiObject_methods_not_equal_INLuc2char_S_LRDmiObject__arg_other,
  &DmiObject_methods_not_equal_INLuc2char_S_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_not_equal_INLuc2char_S_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_not_equal_INLuc2char_S_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "not_equal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3e_not_equal", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_not_equal_INLuc2char_S_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_not_equal_INLuc2char_S_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_not_equal_INLuc2char_S_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_not_equal_INLuc2char__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_not_equal_INLuc2char__LRDmiObject__args[] = 
{
  &DmiObject_methods_not_equal_INLuc2char__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_not_equal_INLuc2char__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_not_equal_INLuc2char__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "not_equal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3f_not_equal", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_not_equal_INLuc2char__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_not_equal_INLuc2char__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_not_equal_INLuc2char__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_as_INLRDmiObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_as_INLRDmiObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_as_INLRDmiObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_as_INLRDmiObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_as_INLRDmiObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_as", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2o_operator_as", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_as_INLRDmiObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_as_INLRDmiObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_as_INLRDmiObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_as_INJ_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_as_INJ_LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_as_INJ_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_as_INJ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_as_INJ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_as", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2p_operator_as", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_as_INJ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_as_INJ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_as_INJ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_as_IND_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_as_IND_LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_as_IND_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_as_IND_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_as_IND_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_as", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2q_operator_as", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_as_IND_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_as_IND_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_as_IND_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_as_INLRObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_as_INLRObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_as_INLRObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_as_INLRObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_as_INLRObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_as", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2r_operator_as", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_as_INLRObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_as_INLRObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_as_INLRObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_eq_eq_INLRDmiObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_eq_eq_INLRDmiObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_eq_eq_INLRDmiObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_eq_eq_INLRDmiObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_eq_eq_INLRDmiObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_eq_eq", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2X_operator_eq_eq", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_eq_eq_INLRDmiObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_eq_eq_INLRDmiObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_eq_eq_INLRDmiObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_eq_eq_INLuc2char__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_eq_eq_INLuc2char__LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_eq_eq_INLuc2char__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_eq_eq_INLuc2char__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_eq_eq_INLuc2char__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_eq_eq", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_32_operator_eq_eq", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_eq_eq_INLuc2char__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_eq_eq_INLuc2char__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_eq_eq_INLuc2char__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_eq_eq_INLRObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_eq_eq_INLRObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_eq_eq_INLRObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_eq_eq_INLRObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_eq_eq_INLRObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_eq_eq", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_33_operator_eq_eq", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_eq_eq_INLRObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_eq_eq_INLRObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_eq_eq_INLRObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_eq_eq_INJ_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_eq_eq_INJ_LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_eq_eq_INJ_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_eq_eq_INJ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_eq_eq_INJ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_eq_eq", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2Y_operator_eq_eq", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_eq_eq_INJ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_eq_eq_INJ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_eq_eq_INJ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_eq_eq_IND_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_eq_eq_IND_LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_eq_eq_IND_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_eq_eq_IND_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_eq_eq_IND_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_eq_eq", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2Z_operator_eq_eq", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_eq_eq_IND_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_eq_eq_IND_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_eq_eq_IND_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_eq_eq_INZ_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_eq_eq_INZ_LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_eq_eq_INZ_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_eq_eq_INZ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_eq_eq_INZ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_eq_eq", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_30_operator_eq_eq", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_eq_eq_INZ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_eq_eq_INZ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_eq_eq_INZ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_eq_eq_INC_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_eq_eq_INC_LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_eq_eq_INC_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_eq_eq_INC_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_eq_eq_INC_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_eq_eq", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_31_operator_eq_eq", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_eq_eq_INC_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_eq_eq_INC_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_eq_eq_INC_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_gt_INLRDmiObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_gt_INLRDmiObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_gt_INLRDmiObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_gt_INLRDmiObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_gt_INLRDmiObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_gt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3t_operator_gt", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_gt_INLRDmiObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_gt_INLRDmiObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_gt_INLRDmiObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_gt_INLRObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_gt_INLRObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_gt_INLRObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_gt_INLRObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_gt_INLRObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_gt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3w_operator_gt", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_gt_INLRObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_gt_INLRObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_gt_INLRObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_gt_INJ_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_gt_INJ_LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_gt_INJ_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_gt_INJ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_gt_INJ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_gt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3u_operator_gt", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_gt_INJ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_gt_INJ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_gt_INJ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_gt_IND_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_gt_IND_LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_gt_IND_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_gt_IND_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_gt_IND_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_gt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3v_operator_gt", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_gt_IND_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_gt_IND_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_gt_IND_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_gt_eq_INLRDmiObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_gt_eq_INLRDmiObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_gt_eq_INLRDmiObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_gt_eq_INLRDmiObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_gt_eq_INLRDmiObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_gt_eq", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3N_operator_gt_eq", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_gt_eq_INLRDmiObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_gt_eq_INLRDmiObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_gt_eq_INLRDmiObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_gt_eq_INLRObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_gt_eq_INLRObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_gt_eq_INLRObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_gt_eq_INLRObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_gt_eq_INLRObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_gt_eq", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3Q_operator_gt_eq", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_gt_eq_INLRObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_gt_eq_INLRObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_gt_eq_INLRObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_gt_eq_INJ_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_gt_eq_INJ_LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_gt_eq_INJ_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_gt_eq_INJ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_gt_eq_INJ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_gt_eq", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3O_operator_gt_eq", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_gt_eq_INJ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_gt_eq_INJ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_gt_eq_INJ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_gt_eq_IND_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_gt_eq_IND_LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_gt_eq_IND_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_gt_eq_IND_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_gt_eq_IND_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_gt_eq", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3P_operator_gt_eq", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_gt_eq_IND_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_gt_eq_IND_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_gt_eq_IND_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_gt_gt_INLRDmiObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_gt_gt_INLRDmiObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_gt_gt_INLRDmiObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_gt_gt_INLRDmiObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_gt_gt_INLRDmiObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_gt_gt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4V_operator_gt_gt", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_gt_gt_INLRDmiObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_gt_gt_INLRDmiObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_gt_gt_INLRDmiObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_gt_gt_INJ_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_gt_gt_INJ_LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_gt_gt_INJ_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_gt_gt_INJ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_gt_gt_INJ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_gt_gt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4W_operator_gt_gt", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_gt_gt_INJ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_gt_gt_INJ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_gt_gt_INJ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_gt_gt_INLRObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_gt_gt_INLRObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_gt_gt_INLRObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_gt_gt_INLRObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_gt_gt_INLRObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_gt_gt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4X_operator_gt_gt", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_gt_gt_INLRObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_gt_gt_INLRObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_gt_gt_INLRObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_la_INLRDmiObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_la_INLRDmiObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_la_INLRDmiObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_la_INLRDmiObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_la_INLRDmiObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_la", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4t_operator_la", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_la_INLRDmiObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_la_INLRDmiObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_la_INLRDmiObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_la_INJ_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_la_INJ_LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_la_INJ_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_la_INJ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_la_INJ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_la", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4u_operator_la", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_la_INJ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_la_INJ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_la_INJ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_la_INLRObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_la_INLRObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_la_INLRObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_la_INLRObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_la_INLRObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_la", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4v_operator_la", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_la_INLRObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_la_INLRObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_la_INLRObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_la_la_INLRDmiObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_la_la_INLRDmiObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_la_la_INLRDmiObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_la_la_INLRDmiObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_la_la_INLRDmiObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_la_la", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_47_operator_la_la", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_la_la_INLRDmiObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_la_la_INLRDmiObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_la_la_INLRDmiObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_la_la_INZ_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_la_la_INZ_LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_la_la_INZ_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_la_la_INZ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_la_la_INZ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_la_la", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_48_operator_la_la", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_la_la_INZ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_la_la_INZ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_la_la_INZ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_la_la_INLRObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_la_la_INLRObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_la_la_INLRObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_la_la_INLRObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_la_la_INLRObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_la_la", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_49_operator_la_la", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_la_la_INLRObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_la_la_INLRObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_la_la_INLRObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_lt_INLRDmiObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_lt_INLRDmiObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_lt_INLRDmiObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_lt_INLRDmiObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_lt_INLRDmiObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_lt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3D_operator_lt", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_lt_INLRDmiObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_lt_INLRDmiObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_lt_INLRDmiObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_lt_INJ_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_lt_INJ_LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_lt_INJ_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_lt_INJ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_lt_INJ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_lt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3E_operator_lt", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_lt_INJ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_lt_INJ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_lt_INJ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_lt_IND_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_lt_IND_LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_lt_IND_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_lt_IND_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_lt_IND_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_lt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3F_operator_lt", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_lt_IND_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_lt_IND_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_lt_IND_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_lt_INLRObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_lt_INLRObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_lt_INLRObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_lt_INLRObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_lt_INLRObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_lt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3G_operator_lt", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_lt_INLRObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_lt_INLRObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_lt_INLRObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_lt_eq_INLRDmiObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_lt_eq_INLRDmiObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_lt_eq_INLRDmiObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_lt_eq_INLRDmiObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_lt_eq_INLRDmiObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_lt_eq", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3X_operator_lt_eq", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_lt_eq_INLRDmiObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_lt_eq_INLRDmiObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_lt_eq_INLRDmiObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_lt_eq_INJ_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_lt_eq_INJ_LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_lt_eq_INJ_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_lt_eq_INJ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_lt_eq_INJ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_lt_eq", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3Y_operator_lt_eq", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_lt_eq_INJ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_lt_eq_INJ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_lt_eq_INJ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_lt_eq_IND_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_lt_eq_IND_LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_lt_eq_IND_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_lt_eq_IND_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_lt_eq_IND_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_lt_eq", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3Z_operator_lt_eq", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_lt_eq_IND_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_lt_eq_IND_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_lt_eq_IND_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_lt_eq_INLRObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_lt_eq_INLRObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_lt_eq_INLRObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_lt_eq_INLRObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_lt_eq_INLRObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_lt_eq", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_40_operator_lt_eq", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_lt_eq_INLRObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_lt_eq_INLRObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_lt_eq_INLRObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_lt_lt_INLRDmiObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_lt_lt_INLRDmiObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_lt_lt_INLRDmiObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_lt_lt_INLRDmiObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_lt_lt_INLRDmiObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_lt_lt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4O_operator_lt_lt", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_lt_lt_INLRDmiObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_lt_lt_INLRDmiObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_lt_lt_INLRDmiObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_lt_lt_INJ_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_lt_lt_INJ_LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_lt_lt_INJ_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_lt_lt_INJ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_lt_lt_INJ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_lt_lt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4P_operator_lt_lt", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_lt_lt_INJ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_lt_lt_INJ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_lt_lt_INJ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_lt_lt_INLRObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_lt_lt_INLRObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_lt_lt_INLRObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_lt_lt_INLRObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_lt_lt_INLRObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_lt_lt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4Q_operator_lt_lt", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_lt_lt_INLRObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_lt_lt_INLRObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_lt_lt_INLRObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_mi_IND_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_mi_IND_LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_mi_IND_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_mi_IND_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_mi_IND_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_mi", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2g_operator_mi", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_mi_IND_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_mi_IND_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_mi_IND_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_mi__LRDmiObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_mi__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_mi__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_mi", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2h_operator_mi", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_mi__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_mi__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_mi__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_mi_INLRObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_mi_INLRObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_mi_INLRObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_mi_INLRObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_mi_INLRObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_mi", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2e_operator_mi", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_mi_INLRObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_mi_INLRObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_mi_INLRObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_mi_INJ_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_mi_INJ_LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_mi_INJ_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_mi_INJ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_mi_INJ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_mi", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2f_operator_mi", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_mi_INJ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_mi_INJ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_mi_INJ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_mi_INLRDmiObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_mi_INLRDmiObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_mi_INLRDmiObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_mi_INLRDmiObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_mi_INLRDmiObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_mi", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2d_operator_mi", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_mi_INLRDmiObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_mi_INLRDmiObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_mi_INLRDmiObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_mi_mi__LRDmiObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_mi_mi__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_mi_mi__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_mi_mi", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_5c_operator_mi_mi", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_mi_mi__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_mi_mi__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_mi_mi__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_mi_mi_I_LRDmiObject__arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_mi_mi_I_LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_mi_mi_I_LRDmiObject__arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_mi_mi_I_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_mi_mi_I_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_mi_mi", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_5d_operator_mi_mi", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_mi_mi_I_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_mi_mi_I_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_mi_mi_I_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_nt__LRDmiObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_nt__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_nt__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_nt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4c_operator_nt", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_nt__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_nt__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_nt__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_nt_eq_INLRDmiObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_nt_eq_INLRDmiObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_nt_eq_INLRDmiObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_nt_eq_INLRDmiObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_nt_eq_INLRDmiObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_nt_eq", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3g_operator_nt_eq", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_nt_eq_INLRDmiObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_nt_eq_INLRDmiObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_nt_eq_INLRDmiObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_nt_eq_INJ_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_nt_eq_INJ_LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_nt_eq_INJ_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_nt_eq_INJ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_nt_eq_INJ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_nt_eq", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3h_operator_nt_eq", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_nt_eq_INJ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_nt_eq_INJ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_nt_eq_INJ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_nt_eq_IND_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_nt_eq_IND_LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_nt_eq_IND_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_nt_eq_IND_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_nt_eq_IND_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_nt_eq", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3i_operator_nt_eq", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_nt_eq_IND_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_nt_eq_IND_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_nt_eq_IND_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_nt_eq_INZ_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_nt_eq_INZ_LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_nt_eq_INZ_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_nt_eq_INZ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_nt_eq_INZ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_nt_eq", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3j_operator_nt_eq", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_nt_eq_INZ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_nt_eq_INZ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_nt_eq_INZ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_nt_eq_INC_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_nt_eq_INC_LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_nt_eq_INC_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_nt_eq_INC_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_nt_eq_INC_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_nt_eq", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3k_operator_nt_eq", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_nt_eq_INC_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_nt_eq_INC_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_nt_eq_INC_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_nt_eq_INLuc2char__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_nt_eq_INLuc2char__LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_nt_eq_INLuc2char__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_nt_eq_INLuc2char__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_nt_eq_INLuc2char__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_nt_eq", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3l_operator_nt_eq", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_nt_eq_INLuc2char__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_nt_eq_INLuc2char__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_nt_eq_INLuc2char__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_nt_eq_INLRObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_nt_eq_INLRObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_nt_eq_INLRObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_nt_eq_INLRObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_nt_eq_INLRObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_nt_eq", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3m_operator_nt_eq", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_nt_eq_INLRObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_nt_eq_INLRObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_nt_eq_INLRObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_pl_INLRDmiObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_pl_INLRDmiObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_pl_INLRDmiObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_pl_INLRDmiObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_pl_INLRDmiObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_pl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_21_operator_pl", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_pl_INLRDmiObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_pl_INLRDmiObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_pl_INLRDmiObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_pl_INLRString__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_pl_INLRString__LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_pl_INLRString__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_pl_INLRString__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_pl_INLRString__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_pl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_22_operator_pl", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_pl_INLRString__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_pl_INLRString__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_pl_INLRString__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_pl_INLRObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_pl_INLRObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_pl_INLRObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_pl_INLRObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_pl_INLRObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_pl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_23_operator_pl", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_pl_INLRObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_pl_INLRObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_pl_INLRObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_pl_INJ_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_pl_INJ_LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_pl_INJ_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_pl_INJ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_pl_INJ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_pl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_24_operator_pl", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_pl_INJ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_pl_INJ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_pl_INJ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_pl_IND_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_pl_IND_LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_pl_IND_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_pl_IND_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_pl_IND_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_pl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_25_operator_pl", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_pl_IND_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_pl_IND_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_pl_IND_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_pl__LRDmiObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_pl__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_pl__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_pl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_26_operator_pl", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_pl__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_pl__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_pl__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_pl_pl__LRDmiObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_pl_pl__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_pl_pl__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_pl_pl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_58_operator_pl_pl", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_pl_pl__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_pl_pl__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_pl_pl__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_pl_pl_I_LRDmiObject__arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_pl_pl_I_LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_pl_pl_I_LRDmiObject__arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_pl_pl_I_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_pl_pl_I_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_pl_pl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_59_operator_pl_pl", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_pl_pl_I_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_pl_pl_I_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_pl_pl_I_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_ps_INLRDmiObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_ps_INLRDmiObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_ps_INLRDmiObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_ps_INLRDmiObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_ps_INLRDmiObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_ps", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2G_operator_ps", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_ps_INLRDmiObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_ps_INLRDmiObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_ps_INLRDmiObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_ps_INJ_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_ps_INJ_LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_ps_INJ_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_ps_INJ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_ps_INJ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_ps", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2H_operator_ps", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_ps_INJ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_ps_INJ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_ps_INJ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_ps_INLRObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_ps_INLRObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_ps_INLRObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_ps_INLRObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_ps_INLRObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_ps", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2I_operator_ps", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_ps_INLRObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_ps_INLRObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_ps_INLRObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_rf_INLRDmiObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_rf_INLRDmiObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_rf_INLRDmiObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_rf_INLRDmiObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_rf_INLRDmiObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_rf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4H_operator_rf", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_rf_INLRDmiObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_rf_INLRDmiObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_rf_INLRDmiObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_rf_INJ_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_rf_INJ_LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_rf_INJ_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_rf_INJ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_rf_INJ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_rf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4I_operator_rf", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_rf_INJ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_rf_INJ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_rf_INJ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_rf_INLRObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_rf_INLRObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_rf_INLRObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_rf_INLRObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_rf_INLRObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_rf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4J_operator_rf", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_rf_INLRObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_rf_INLRObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_rf_INLRObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_sl_INLRDmiObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_sl_INLRDmiObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_sl_INLRDmiObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_sl_INLRDmiObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_sl_INLRDmiObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_sl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2y_operator_sl", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_sl_INLRDmiObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_sl_INLRDmiObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_sl_INLRDmiObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_sl_INJ_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_sl_INJ_LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_sl_INJ_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_sl_INJ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_sl_INJ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_sl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2z_operator_sl", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_sl_INJ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_sl_INJ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_sl_INJ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_sl_IND_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_sl_IND_LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_sl_IND_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_sl_IND_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_sl_IND_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_sl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2A_operator_sl", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_sl_IND_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_sl_IND_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_sl_IND_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_sl_INLRObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_sl_INLRObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_sl_INLRObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_sl_INLRObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_sl_INLRObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_sl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2B_operator_sl", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_sl_INLRObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_sl_INLRObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_sl_INLRObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_tl__LRDmiObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_tl__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_tl__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_tl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_56_operator_tl", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_tl__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_tl__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_tl__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_vb_INLRObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_vb_INLRObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_vb_INLRObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_vb_INLRObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_vb_INLRObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_vb", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4C_operator_vb", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_vb_INLRObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_vb_INLRObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_vb_INLRObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_vb_INLRDmiObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_vb_INLRDmiObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_vb_INLRDmiObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_vb_INLRDmiObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_vb_INLRDmiObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_vb", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4A_operator_vb", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_vb_INLRDmiObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_vb_INLRDmiObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_vb_INLRDmiObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_vb_INJ_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_vb_INJ_LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_vb_INJ_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_vb_INJ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_vb_INJ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_vb", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4B_operator_vb", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_vb_INJ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_vb_INJ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_vb_INJ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_vb_vb_INLRDmiObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_vb_vb_INLRDmiObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_vb_vb_INLRDmiObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_vb_vb_INLRDmiObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_vb_vb_INLRDmiObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_vb_vb", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4h_operator_vb_vb", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_vb_vb_INLRDmiObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_vb_vb_INLRDmiObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_vb_vb_INLRDmiObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_vb_vb_INZ_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_vb_vb_INZ_LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_vb_vb_INZ_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_vb_vb_INZ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_vb_vb_INZ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_vb_vb", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4i_operator_vb_vb", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_vb_vb_INZ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_vb_vb_INZ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_vb_vb_INZ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_operator_vb_vb_INLRObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_operator_vb_vb_INLRObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_operator_vb_vb_INLRObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_operator_vb_vb_INLRObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_operator_vb_vb_INLRObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_vb_vb", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4j_operator_vb_vb", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_operator_vb_vb_INLRObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_operator_vb_vb_INLRObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_operator_vb_vb_INLRObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_readObject_INL_acdk_io_RObjectReader_INLRClass__V_arg_in = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "in", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::RObjectReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_readObject_INL_acdk_io_RObjectReader_INLRClass__V_arg_cls = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cls", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_readObject_INL_acdk_io_RObjectReader_INLRClass__V_args[] = 
{
  &DmiObject_methods_readObject_INL_acdk_io_RObjectReader_INLRClass__V_arg_in,
  &DmiObject_methods_readObject_INL_acdk_io_RObjectReader_INLRClass__V_arg_cls,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_readObject_INL_acdk_io_RObjectReader_INLRClass__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_readObject_INL_acdk_io_RObjectReader_INLRClass__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5f_readObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_readObject_INL_acdk_io_RObjectReader_INLRClass__V_args, // the arguments
  0, //arguments count
  DmiObject_methods_readObject_INL_acdk_io_RObjectReader_INLRClass__V_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_readObject_INL_acdk_io_RObjectReader_INLRClass__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_subtraction_INLRDmiObject_S_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_subtraction_INLRDmiObject_S_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_subtraction_INLRDmiObject_S_LRDmiObject__args[] = 
{
  &DmiObject_methods_subtraction_INLRDmiObject_S_LRDmiObject__arg_other,
  &DmiObject_methods_subtraction_INLRDmiObject_S_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_subtraction_INLRDmiObject_S_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_subtraction_INLRDmiObject_S_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "subtraction", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_27_subtraction", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_subtraction_INLRDmiObject_S_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_subtraction_INLRDmiObject_S_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_subtraction_INLRDmiObject_S_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_subtraction_INLRDmiObject__LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_subtraction_INLRDmiObject__LRDmiObject__args[] = 
{
  &DmiObject_methods_subtraction_INLRDmiObject__LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_subtraction_INLRDmiObject__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_subtraction_INLRDmiObject__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "subtraction", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_28_subtraction", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_subtraction_INLRDmiObject__LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_subtraction_INLRDmiObject__LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_subtraction_INLRDmiObject__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_subtraction_INJS_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_subtraction_INJS_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_subtraction_INJS_LRDmiObject__args[] = 
{
  &DmiObject_methods_subtraction_INJS_LRDmiObject__arg_other,
  &DmiObject_methods_subtraction_INJS_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_subtraction_INJS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_subtraction_INJS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "subtraction", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_29_subtraction", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_subtraction_INJS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_subtraction_INJS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_subtraction_INJS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_subtraction_INJ_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_subtraction_INJ_LRDmiObject__args[] = 
{
  &DmiObject_methods_subtraction_INJ_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_subtraction_INJ_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_subtraction_INJ_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "subtraction", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2a_subtraction", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_subtraction_INJ_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_subtraction_INJ_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_subtraction_INJ_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_subtraction_INDS_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_subtraction_INDS_LRDmiObject__arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_subtraction_INDS_LRDmiObject__args[] = 
{
  &DmiObject_methods_subtraction_INDS_LRDmiObject__arg_other,
  &DmiObject_methods_subtraction_INDS_LRDmiObject__arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_subtraction_INDS_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_subtraction_INDS_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "subtraction", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2b_subtraction", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_subtraction_INDS_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_subtraction_INDS_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_subtraction_INDS_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_subtraction_IND_LRDmiObject__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_subtraction_IND_LRDmiObject__args[] = 
{
  &DmiObject_methods_subtraction_IND_LRDmiObject__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_subtraction_IND_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_subtraction_IND_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "subtraction", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2c_subtraction", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_subtraction_IND_LRDmiObject__args, // the arguments
  0, //arguments count
  DmiObject_methods_subtraction_IND_LRDmiObject__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_subtraction_IND_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_toCode__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_toCode__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_toCode__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1w_toCode", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_toCode__LRString__args, // the arguments
  0, //arguments count
  DmiObject_methods_toCode__LRString__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_toCode__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1v_toString", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_toString__LRString__args, // the arguments
  0, //arguments count
  DmiObject_methods_toString__LRString__exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_writeObject_INL_acdk_io_RObjectWriter_INLRClass__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::RObjectWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiObject_methods_writeObject_INL_acdk_io_RObjectWriter_INLRClass__V_arg_cls = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cls", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiObject_methods_writeObject_INL_acdk_io_RObjectWriter_INLRClass__V_args[] = 
{
  &DmiObject_methods_writeObject_INL_acdk_io_RObjectWriter_INLRClass__V_arg_out,
  &DmiObject_methods_writeObject_INL_acdk_io_RObjectWriter_INLRClass__V_arg_cls,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiObject_methods_writeObject_INL_acdk_io_RObjectWriter_INLRClass__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiObject_method_writeObject_INL_acdk_io_RObjectWriter_INLRClass__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5e_writeObject", // alternative name of method
  -1, // altlabelHashCode
  DmiObject_methods_writeObject_INL_acdk_io_RObjectWriter_INLRClass__V_args, // the arguments
  0, //arguments count
  DmiObject_methods_writeObject_INL_acdk_io_RObjectWriter_INLRClass__V_exceptions, // the declared exceptions
  DmiObject_MetainfoWrapper::DmiObject_method_writeObject_INL_acdk_io_RObjectWriter_INLRClass__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DmiObject_methods[] = 
{
  &DmiObject_method_DmiObject__LRDmiObject_,
  &DmiObject_method_DmiObject_INLRDmiObject_I_LRDmiObject_,
  &DmiObject_method_DmiObject_INLRDmiObject__LRDmiObject_,
  &DmiObject_method_DmiObject_INZI_LRDmiObject_,
  &DmiObject_method_DmiObject_INZ_LRDmiObject_,
  &DmiObject_method_DmiObject_OUTZI_LRDmiObject_,
  &DmiObject_method_DmiObject_OUTZ_LRDmiObject_,
  &DmiObject_method_DmiObject_INCI_LRDmiObject_,
  &DmiObject_method_DmiObject_INC_LRDmiObject_,
  &DmiObject_method_DmiObject_OUTCI_LRDmiObject_,
  &DmiObject_method_DmiObject_OUTC_LRDmiObject_,
  &DmiObject_method_DmiObject_INUCI_LRDmiObject_,
  &DmiObject_method_DmiObject_INUC_LRDmiObject_,
  &DmiObject_method_DmiObject_OUTUCI_LRDmiObject_,
  &DmiObject_method_DmiObject_OUTUC_LRDmiObject_,
  &DmiObject_method_DmiObject_INBI_LRDmiObject_,
  &DmiObject_method_DmiObject_INB_LRDmiObject_,
  &DmiObject_method_DmiObject_OUTBI_LRDmiObject_,
  &DmiObject_method_DmiObject_OUTB_LRDmiObject_,
  &DmiObject_method_DmiObject_INSI_LRDmiObject_,
  &DmiObject_method_DmiObject_INS_LRDmiObject_,
  &DmiObject_method_DmiObject_OUTSI_LRDmiObject_,
  &DmiObject_method_DmiObject_OUTS_LRDmiObject_,
  &DmiObject_method_DmiObject_INII_LRDmiObject_,
  &DmiObject_method_DmiObject_INI_LRDmiObject_,
  &DmiObject_method_DmiObject_OUTII_LRDmiObject_,
  &DmiObject_method_DmiObject_OUTI_LRDmiObject_,
  &DmiObject_method_DmiObject_INJI_LRDmiObject_,
  &DmiObject_method_DmiObject_INJ_LRDmiObject_,
  &DmiObject_method_DmiObject_OUTJI_LRDmiObject_,
  &DmiObject_method_DmiObject_OUTJ_LRDmiObject_,
  &DmiObject_method_DmiObject_INFI_LRDmiObject_,
  &DmiObject_method_DmiObject_INF_LRDmiObject_,
  &DmiObject_method_DmiObject_OUTFI_LRDmiObject_,
  &DmiObject_method_DmiObject_OUTF_LRDmiObject_,
  &DmiObject_method_DmiObject_INDI_LRDmiObject_,
  &DmiObject_method_DmiObject_IND_LRDmiObject_,
  &DmiObject_method_DmiObject_OUTDI_LRDmiObject_,
  &DmiObject_method_DmiObject_OUTD_LRDmiObject_,
  &DmiObject_method_DmiObject_INLRObject_I_LRDmiObject_,
  &DmiObject_method_DmiObject_INLRObject__LRDmiObject_,
  &DmiObject_method_DmiObject_OUTLRObject_I_LRDmiObject_,
  &DmiObject_method_DmiObject_OUTLRObject__LRDmiObject_,
  &DmiObject_method_GetClass__L_acdk_lang_RClass_,
  &DmiObject_method_addition_INLRDmiObject_S_LRDmiObject_,
  &DmiObject_method_addition_INLRDmiObject__LRDmiObject_,
  &DmiObject_method_addition_INJS_LRDmiObject_,
  &DmiObject_method_addition_INJ_LRDmiObject_,
  &DmiObject_method_addition_INDS_LRDmiObject_,
  &DmiObject_method_addition_IND_LRDmiObject_,
  &DmiObject_method_assign_INUC_LRDmiObject_,
  &DmiObject_method_assign_INBS_LRDmiObject_,
  &DmiObject_method_assign_INB_LRDmiObject_,
  &DmiObject_method_assign_INSS_LRDmiObject_,
  &DmiObject_method_assign_INS_LRDmiObject_,
  &DmiObject_method_assign_INIS_LRDmiObject_,
  &DmiObject_method_assign_INI_LRDmiObject_,
  &DmiObject_method_assign_INJS_LRDmiObject_,
  &DmiObject_method_assign_INZ_LRDmiObject_,
  &DmiObject_method_assign_INCS_LRDmiObject_,
  &DmiObject_method_assign_INC_LRDmiObject_,
  &DmiObject_method_assign_INUCS_LRDmiObject_,
  &DmiObject_method_assign_INLRDmiObject__LRDmiObject_,
  &DmiObject_method_assign_INZS_LRDmiObject_,
  &DmiObject_method_assign_INLRDmiObject_S_LRDmiObject_,
  &DmiObject_method_assign_INLRObject__LRDmiObject_,
  &DmiObject_method_assign_IND_LRDmiObject_,
  &DmiObject_method_assign_INLRObject_S_LRDmiObject_,
  &DmiObject_method_assign_INJ_LRDmiObject_,
  &DmiObject_method_assign_INFS_LRDmiObject_,
  &DmiObject_method_assign_INF_LRDmiObject_,
  &DmiObject_method_assign_INDS_LRDmiObject_,
  &DmiObject_method_binary_and_INLRDmiObject__LRDmiObject_,
  &DmiObject_method_binary_and_INJS_LRDmiObject_,
  &DmiObject_method_binary_and_INLRDmiObject_S_LRDmiObject_,
  &DmiObject_method_binary_and_INJ_LRDmiObject_,
  &DmiObject_method_binary_leftshift_INLRDmiObject_S_LRDmiObject_,
  &DmiObject_method_binary_leftshift_INLRDmiObject__LRDmiObject_,
  &DmiObject_method_binary_leftshift_INJS_LRDmiObject_,
  &DmiObject_method_binary_leftshift_INJ_LRDmiObject_,
  &DmiObject_method_binary_not_S_LRDmiObject_,
  &DmiObject_method_binary_not__LRDmiObject_,
  &DmiObject_method_binary_or_INLRDmiObject_S_LRDmiObject_,
  &DmiObject_method_binary_or_INLRDmiObject__LRDmiObject_,
  &DmiObject_method_binary_or_INJS_LRDmiObject_,
  &DmiObject_method_binary_or_INJ_LRDmiObject_,
  &DmiObject_method_binary_rightshift_INLRDmiObject__LRDmiObject_,
  &DmiObject_method_binary_rightshift_INJS_LRDmiObject_,
  &DmiObject_method_binary_rightshift_INLRDmiObject_S_LRDmiObject_,
  &DmiObject_method_binary_rightshift_INJ_LRDmiObject_,
  &DmiObject_method_binary_rightshift_unsigned_INLRDmiObject_S_LRDmiObject_,
  &DmiObject_method_binary_rightshift_unsigned_INLRDmiObject__LRDmiObject_,
  &DmiObject_method_binary_rightshift_unsigned_INJS_LRDmiObject_,
  &DmiObject_method_binary_rightshift_unsigned_INJ_LRDmiObject_,
  &DmiObject_method_binary_rightshift_unsigned_INLRObject_S_LRDmiObject_,
  &DmiObject_method_binary_rightshift_unsigned_INLRObject__LRDmiObject_,
  &DmiObject_method_binary_xor_INLRDmiObject_S_LRDmiObject_,
  &DmiObject_method_binary_xor_INLRDmiObject__LRDmiObject_,
  &DmiObject_method_binary_xor_INJS_LRDmiObject_,
  &DmiObject_method_binary_xor_INJ_LRDmiObject_,
  &DmiObject_method_decrement_S_LRDmiObject_,
  &DmiObject_method_decrement__LRDmiObject_,
  &DmiObject_method_divide_INLRDmiObject_S_LRDmiObject_,
  &DmiObject_method_divide_INLRDmiObject__LRDmiObject_,
  &DmiObject_method_divide_INJS_LRDmiObject_,
  &DmiObject_method_divide_INJ_LRDmiObject_,
  &DmiObject_method_divide_INDS_LRDmiObject_,
  &DmiObject_method_divide_IND_LRDmiObject_,
  &DmiObject_method_equal_INJ_LRDmiObject_,
  &DmiObject_method_equal_INDS_LRDmiObject_,
  &DmiObject_method_equal_IND_LRDmiObject_,
  &DmiObject_method_equal_INZS_LRDmiObject_,
  &DmiObject_method_equal_INLRDmiObject__LRDmiObject_,
  &DmiObject_method_equal_INJS_LRDmiObject_,
  &DmiObject_method_equal_INLRDmiObject_S_LRDmiObject_,
  &DmiObject_method_equal_INZ_LRDmiObject_,
  &DmiObject_method_equal_INCS_LRDmiObject_,
  &DmiObject_method_equal_INC_LRDmiObject_,
  &DmiObject_method_equal_INLuc2char_S_LRDmiObject_,
  &DmiObject_method_equal_INLuc2char__LRDmiObject_,
  &DmiObject_method_equal_INLRObject_S_LRDmiObject_,
  &DmiObject_method_equal_INLRObject__LRDmiObject_,
  &DmiObject_method_equals_INLRDmiObject__Z,
  &DmiObject_method_equals_INLRObject__Z,
  &DmiObject_method_getBoolVar_S_Z,
  &DmiObject_method_getBoolVar__Z,
  &DmiObject_method_getByteVar_S_B,
  &DmiObject_method_getByteVar__B,
  &DmiObject_method_getCharVar_S_C,
  &DmiObject_method_getCharVar__C,
  &DmiObject_method_getDoubleVar_S_D,
  &DmiObject_method_getDoubleVar__D,
  &DmiObject_method_getFlags__I,
  &DmiObject_method_getFloatVar__F,
  &DmiObject_method_getFloatVar_S_F,
  &DmiObject_method_getIntVar_S_I,
  &DmiObject_method_getIntVar__I,
  &DmiObject_method_getLongVar_S_J,
  &DmiObject_method_getLongVar__J,
  &DmiObject_method_getObjectVar_S_LRObject_,
  &DmiObject_method_getObjectVar__LRObject_,
  &DmiObject_method_getShortVar_S_S,
  &DmiObject_method_getShortVar__S,
  &DmiObject_method_getStringVar_S_LRString_,
  &DmiObject_method_getStringVar__LRString_,
  &DmiObject_method_getTypeInfo__LRString_,
  &DmiObject_method_getVarType__LVarType_,
  &DmiObject_method_greater_or_equal_INLRDmiObject__LRDmiObject_,
  &DmiObject_method_greater_or_equal_INJS_LRDmiObject_,
  &DmiObject_method_greater_or_equal_INLRDmiObject_S_LRDmiObject_,
  &DmiObject_method_greater_or_equal_INJ_LRDmiObject_,
  &DmiObject_method_greater_or_equal_INDS_LRDmiObject_,
  &DmiObject_method_greater_or_equal_IND_LRDmiObject_,
  &DmiObject_method_greater_than_INLRDmiObject__LRDmiObject_,
  &DmiObject_method_greater_than_INJS_LRDmiObject_,
  &DmiObject_method_greater_than_INLRDmiObject_S_LRDmiObject_,
  &DmiObject_method_greater_than_INJ_LRDmiObject_,
  &DmiObject_method_greater_than_INDS_LRDmiObject_,
  &DmiObject_method_greater_than_IND_LRDmiObject_,
  &DmiObject_method_increment__LRDmiObject_,
  &DmiObject_method_isBoolType__Z,
  &DmiObject_method_isBoolean_S_Z,
  &DmiObject_method_isBoolean__Z,
  &DmiObject_method_isByteType__Z,
  &DmiObject_method_isCharType__Z,
  &DmiObject_method_isCharacterType__Z,
  &DmiObject_method_isDoubleType__Z,
  &DmiObject_method_isFloatType__Z,
  &DmiObject_method_isFloating_S_Z,
  &DmiObject_method_isFloating__Z,
  &DmiObject_method_isFloatingType__Z,
  &DmiObject_method_isIntType__Z,
  &DmiObject_method_isInteger_S_Z,
  &DmiObject_method_isInteger__Z,
  &DmiObject_method_isIntegerType__Z,
  &DmiObject_method_isLongType__Z,
  &DmiObject_method_isNumber_S_Z,
  &DmiObject_method_isNumber__Z,
  &DmiObject_method_isNumberType__Z,
  &DmiObject_method_isObject_S_Z,
  &DmiObject_method_isObject__Z,
  &DmiObject_method_isObjectType__Z,
  &DmiObject_method_isShortType__Z,
  &DmiObject_method_isString_S_Z,
  &DmiObject_method_isString__Z,
  &DmiObject_method_isStringType__Z,
  &DmiObject_method_isTrue_S_Z,
  &DmiObject_method_isTrue__Z,
  &DmiObject_method_isUcCharType__Z,
  &DmiObject_method_less_or_equal_INLRDmiObject_S_LRDmiObject_,
  &DmiObject_method_less_or_equal_INLRDmiObject__LRDmiObject_,
  &DmiObject_method_less_or_equal_INJS_LRDmiObject_,
  &DmiObject_method_less_or_equal_INJ_LRDmiObject_,
  &DmiObject_method_less_or_equal_INDS_LRDmiObject_,
  &DmiObject_method_less_or_equal_IND_LRDmiObject_,
  &DmiObject_method_less_than_INLRDmiObject__LRDmiObject_,
  &DmiObject_method_less_than_INJS_LRDmiObject_,
  &DmiObject_method_less_than_INJ_LRDmiObject_,
  &DmiObject_method_less_than_INDS_LRDmiObject_,
  &DmiObject_method_less_than_INLRDmiObject_S_LRDmiObject_,
  &DmiObject_method_less_than_IND_LRDmiObject_,
  &DmiObject_method_logical_and_INLRDmiObject_S_LRDmiObject_,
  &DmiObject_method_logical_and_INLRDmiObject__LRDmiObject_,
  &DmiObject_method_logical_and_INZS_LRDmiObject_,
  &DmiObject_method_logical_and_INZ_LRDmiObject_,
  &DmiObject_method_logical_not_S_LRDmiObject_,
  &DmiObject_method_logical_not__LRDmiObject_,
  &DmiObject_method_logical_or_INLRDmiObject__LRDmiObject_,
  &DmiObject_method_logical_or_INZS_LRDmiObject_,
  &DmiObject_method_logical_or_INLRDmiObject_S_LRDmiObject_,
  &DmiObject_method_logical_or_INZ_LRDmiObject_,
  &DmiObject_method_logical_xor_INLRDmiObject_S_LRDmiObject_,
  &DmiObject_method_logical_xor_INLRDmiObject__LRDmiObject_,
  &DmiObject_method_logical_xor_INZS_LRDmiObject_,
  &DmiObject_method_logical_xor_INZ_LRDmiObject_,
  &DmiObject_method_logical_xor_INLRObject__LRDmiObject_,
  &DmiObject_method_modulo_INLRDmiObject_S_LRDmiObject_,
  &DmiObject_method_modulo_INLRDmiObject__LRDmiObject_,
  &DmiObject_method_modulo_INJS_LRDmiObject_,
  &DmiObject_method_modulo_INJ_LRDmiObject_,
  &DmiObject_method_multiply_INLRDmiObject_S_LRDmiObject_,
  &DmiObject_method_multiply_INLRDmiObject__LRDmiObject_,
  &DmiObject_method_multiply_INJS_LRDmiObject_,
  &DmiObject_method_multiply_INJ_LRDmiObject_,
  &DmiObject_method_multiply_INDS_LRDmiObject_,
  &DmiObject_method_multiply_IND_LRDmiObject_,
  &DmiObject_method_not_equal_INLRDmiObject_S_LRDmiObject_,
  &DmiObject_method_not_equal_INLRDmiObject__LRDmiObject_,
  &DmiObject_method_not_equal_INJS_LRDmiObject_,
  &DmiObject_method_not_equal_INJ_LRDmiObject_,
  &DmiObject_method_not_equal_INDS_LRDmiObject_,
  &DmiObject_method_not_equal_IND_LRDmiObject_,
  &DmiObject_method_not_equal_INZS_LRDmiObject_,
  &DmiObject_method_not_equal_INZ_LRDmiObject_,
  &DmiObject_method_not_equal_INCS_LRDmiObject_,
  &DmiObject_method_not_equal_INC_LRDmiObject_,
  &DmiObject_method_not_equal_INLuc2char_S_LRDmiObject_,
  &DmiObject_method_not_equal_INLuc2char__LRDmiObject_,
  &DmiObject_method_operator_as_INLRDmiObject__LRDmiObject_,
  &DmiObject_method_operator_as_INJ_LRDmiObject_,
  &DmiObject_method_operator_as_IND_LRDmiObject_,
  &DmiObject_method_operator_as_INLRObject__LRDmiObject_,
  &DmiObject_method_operator_eq_eq_INLRDmiObject__LRDmiObject_,
  &DmiObject_method_operator_eq_eq_INLuc2char__LRDmiObject_,
  &DmiObject_method_operator_eq_eq_INLRObject__LRDmiObject_,
  &DmiObject_method_operator_eq_eq_INJ_LRDmiObject_,
  &DmiObject_method_operator_eq_eq_IND_LRDmiObject_,
  &DmiObject_method_operator_eq_eq_INZ_LRDmiObject_,
  &DmiObject_method_operator_eq_eq_INC_LRDmiObject_,
  &DmiObject_method_operator_gt_INLRDmiObject__LRDmiObject_,
  &DmiObject_method_operator_gt_INLRObject__LRDmiObject_,
  &DmiObject_method_operator_gt_INJ_LRDmiObject_,
  &DmiObject_method_operator_gt_IND_LRDmiObject_,
  &DmiObject_method_operator_gt_eq_INLRDmiObject__LRDmiObject_,
  &DmiObject_method_operator_gt_eq_INLRObject__LRDmiObject_,
  &DmiObject_method_operator_gt_eq_INJ_LRDmiObject_,
  &DmiObject_method_operator_gt_eq_IND_LRDmiObject_,
  &DmiObject_method_operator_gt_gt_INLRDmiObject__LRDmiObject_,
  &DmiObject_method_operator_gt_gt_INJ_LRDmiObject_,
  &DmiObject_method_operator_gt_gt_INLRObject__LRDmiObject_,
  &DmiObject_method_operator_la_INLRDmiObject__LRDmiObject_,
  &DmiObject_method_operator_la_INJ_LRDmiObject_,
  &DmiObject_method_operator_la_INLRObject__LRDmiObject_,
  &DmiObject_method_operator_la_la_INLRDmiObject__LRDmiObject_,
  &DmiObject_method_operator_la_la_INZ_LRDmiObject_,
  &DmiObject_method_operator_la_la_INLRObject__LRDmiObject_,
  &DmiObject_method_operator_lt_INLRDmiObject__LRDmiObject_,
  &DmiObject_method_operator_lt_INJ_LRDmiObject_,
  &DmiObject_method_operator_lt_IND_LRDmiObject_,
  &DmiObject_method_operator_lt_INLRObject__LRDmiObject_,
  &DmiObject_method_operator_lt_eq_INLRDmiObject__LRDmiObject_,
  &DmiObject_method_operator_lt_eq_INJ_LRDmiObject_,
  &DmiObject_method_operator_lt_eq_IND_LRDmiObject_,
  &DmiObject_method_operator_lt_eq_INLRObject__LRDmiObject_,
  &DmiObject_method_operator_lt_lt_INLRDmiObject__LRDmiObject_,
  &DmiObject_method_operator_lt_lt_INJ_LRDmiObject_,
  &DmiObject_method_operator_lt_lt_INLRObject__LRDmiObject_,
  &DmiObject_method_operator_mi_IND_LRDmiObject_,
  &DmiObject_method_operator_mi__LRDmiObject_,
  &DmiObject_method_operator_mi_INLRObject__LRDmiObject_,
  &DmiObject_method_operator_mi_INJ_LRDmiObject_,
  &DmiObject_method_operator_mi_INLRDmiObject__LRDmiObject_,
  &DmiObject_method_operator_mi_mi__LRDmiObject_,
  &DmiObject_method_operator_mi_mi_I_LRDmiObject_,
  &DmiObject_method_operator_nt__LRDmiObject_,
  &DmiObject_method_operator_nt_eq_INLRDmiObject__LRDmiObject_,
  &DmiObject_method_operator_nt_eq_INJ_LRDmiObject_,
  &DmiObject_method_operator_nt_eq_IND_LRDmiObject_,
  &DmiObject_method_operator_nt_eq_INZ_LRDmiObject_,
  &DmiObject_method_operator_nt_eq_INC_LRDmiObject_,
  &DmiObject_method_operator_nt_eq_INLuc2char__LRDmiObject_,
  &DmiObject_method_operator_nt_eq_INLRObject__LRDmiObject_,
  &DmiObject_method_operator_pl_INLRDmiObject__LRDmiObject_,
  &DmiObject_method_operator_pl_INLRString__LRDmiObject_,
  &DmiObject_method_operator_pl_INLRObject__LRDmiObject_,
  &DmiObject_method_operator_pl_INJ_LRDmiObject_,
  &DmiObject_method_operator_pl_IND_LRDmiObject_,
  &DmiObject_method_operator_pl__LRDmiObject_,
  &DmiObject_method_operator_pl_pl__LRDmiObject_,
  &DmiObject_method_operator_pl_pl_I_LRDmiObject_,
  &DmiObject_method_operator_ps_INLRDmiObject__LRDmiObject_,
  &DmiObject_method_operator_ps_INJ_LRDmiObject_,
  &DmiObject_method_operator_ps_INLRObject__LRDmiObject_,
  &DmiObject_method_operator_rf_INLRDmiObject__LRDmiObject_,
  &DmiObject_method_operator_rf_INJ_LRDmiObject_,
  &DmiObject_method_operator_rf_INLRObject__LRDmiObject_,
  &DmiObject_method_operator_sl_INLRDmiObject__LRDmiObject_,
  &DmiObject_method_operator_sl_INJ_LRDmiObject_,
  &DmiObject_method_operator_sl_IND_LRDmiObject_,
  &DmiObject_method_operator_sl_INLRObject__LRDmiObject_,
  &DmiObject_method_operator_tl__LRDmiObject_,
  &DmiObject_method_operator_vb_INLRObject__LRDmiObject_,
  &DmiObject_method_operator_vb_INLRDmiObject__LRDmiObject_,
  &DmiObject_method_operator_vb_INJ_LRDmiObject_,
  &DmiObject_method_operator_vb_vb_INLRDmiObject__LRDmiObject_,
  &DmiObject_method_operator_vb_vb_INZ_LRDmiObject_,
  &DmiObject_method_operator_vb_vb_INLRObject__LRDmiObject_,
  &DmiObject_method_readObject_INL_acdk_io_RObjectReader_INLRClass__V,
  &DmiObject_method_subtraction_INLRDmiObject_S_LRDmiObject_,
  &DmiObject_method_subtraction_INLRDmiObject__LRDmiObject_,
  &DmiObject_method_subtraction_INJS_LRDmiObject_,
  &DmiObject_method_subtraction_INJ_LRDmiObject_,
  &DmiObject_method_subtraction_INDS_LRDmiObject_,
  &DmiObject_method_subtraction_IND_LRDmiObject_,
  &DmiObject_method_toCode__LRString_,
  &DmiObject_method_toString__LRString_,
  &DmiObject_method_writeObject_INL_acdk_io_RObjectWriter_INLRClass__V,
  0
};


struct DmiObject_MetaInfoInitializer
{  DmiObject_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DmiObject::clazzInfo();
    ci->fields =  _DmiObject_fields;
    ci->methods =  _DmiObject_methods;
    ci->_scopeParent = acdk_lang_dmi_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DmiObject_MetaInfoInitializer DmiObject_MetaInfoInitializer_staticinstance__;


struct DmiObject_clazzInfo_ClazzAttributesResInitializer1
{
  DmiObject_clazzInfo_ClazzAttributesResInitializer1()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&DmiObject_method_getVarType__LVarType_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)VarTypeMetaInf::GetEnumInfo()));
  }
};

DmiObject_clazzInfo_ClazzAttributesResInitializer1 DmiObject_clazzInfo_ClazzAttributesResInitializer1_instance;



} // namespace acdk
} // namespace lang
} // namespace dmi


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) dmi_dummyExportFunc() {}
#endif

