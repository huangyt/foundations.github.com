// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "ArithmeticException.h"
#include "ArrayIndexOutOfBoundsException.h"
#include "BasicArray.h"
#include "BasicArrayInl.h"
#include "Boolean.h"
#include "Byte.h"
#include "ByteBuffer.h"
#include "Character.h"
#include "Class.h"
#include "ClassCastException.h"
#include "ClassLoader.h"
#include "ClassNotFoundException.h"
#include "Cloneable.h"
#include "CloneNotSupportedException.h"
#include "CmdLineOption.h"
#include "CmdLineParseException.h"
#include "CmdLineParser.h"
#include "Comparable.h"
#include "DmiException.h"
#include "DmiTypeConversionException.h"
#include "Double.h"
#include "Error.h"
#include "Exception.h"
#include "ExceptionDeclarations.h"
#include "ExtObject.h"
#include "Float.h"
#include "IllegalAccessException.h"
#include "IllegalArgumentException.h"
#include "IllegalMonitorStateException.h"
#include "IllegalStateException.h"
#include "IllegalThreadStateException.h"
#include "IndexOutOfBoundsException.h"
#include "InOutPreDeclaration.h"
#include "InstantiationException.h"
#include "Integer.h"
#include "InterfaceBase.h"
#include "InterruptedException.h"
#include "lang.h"
#include "lang_all.h"
#include "Long.h"
#include "Math.h"
#include "NoSuchDmiElementException.h"
#include "NoSuchElementException.h"
#include "NoSuchFieldException.h"
#include "NoSuchMethodException.h"
#include "NullPointerException.h"
#include "Number.h"
#include "NumberFormatException.h"
#include "Object.h"
#include "ObjectArrayBase.h"
#include "ObjectArrayBaseInl.h"
#include "ObjectArrayImpl.h"
#include "ObjectBase.h"
#include "ObjectDebug.h"
#include "ObjectImpl.h"
#include "ObjectInline.h"
#include "OutOfMemoryError.h"
#include "Package.h"
#include "ParamsMismatchException.h"
#include "Process.h"
#include "Runnable.h"
#include "Runtime.h"
#include "RuntimeException.h"
#include "SharedLibrary.h"
#include "Short.h"
#include "StackFrame.h"
#include "StackOverflowError.h"
#include "String.h"
#include "StringBuffer.h"
#include "StringConcenator.h"
#include "StringIndexOutOfBoundsException.h"
#include "StringInline.h"
#include "StringUtf8Utils.h"
#include "System.h"
#include "SystemError.h"
#include "SystemInline.h"
#include "SystemIntern.h"
#include "Thread.h"
#include "ThreadDeath.h"
#include "ThreadGroup.h"
#include "ThreadImpl.h"
#include "ThreadLocal.h"
#include "ThreadLocalImpl.h"
#include "Throwable.h"
#include "UnicodeCharacter.h"
#include "UnsupportedOperationException.h"
#include "Void.h"

namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _ArithmeticException_super_RuntimeException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  RuntimeException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ArithmeticException_interfaces[] =
{
  &_ArithmeticException_super_RuntimeException,
  0
};

::acdk::lang::dmi::ClazzInfo* ArithmeticException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ArithmeticException", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ArithmeticException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ArithmeticException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ArithmeticException(ArithmeticException::clazzInfo());

::acdk::lang::RClass
ArithmeticException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ArithmeticException::getCollectableFields(FieldReferences& fields)
{
  RuntimeException::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _ArithmeticOverflowException_super_ArithmeticException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ArithmeticException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ArithmeticOverflowException_interfaces[] =
{
  &_ArithmeticOverflowException_super_ArithmeticException,
  0
};

::acdk::lang::dmi::ClazzInfo* ArithmeticOverflowException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ArithmeticOverflowException", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ArithmeticOverflowException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ArithmeticOverflowException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ArithmeticOverflowException(ArithmeticOverflowException::clazzInfo());

::acdk::lang::RClass
ArithmeticOverflowException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ArithmeticOverflowException::getCollectableFields(FieldReferences& fields)
{
  ArithmeticException::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _ArrayIndexOutOfBoundsException_super_IndexOutOfBoundsException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  IndexOutOfBoundsException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ArrayIndexOutOfBoundsException_interfaces[] =
{
  &_ArrayIndexOutOfBoundsException_super_IndexOutOfBoundsException,
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayIndexOutOfBoundsException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ArrayIndexOutOfBoundsException", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ArrayIndexOutOfBoundsException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ArrayIndexOutOfBoundsException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ArrayIndexOutOfBoundsException(ArrayIndexOutOfBoundsException::clazzInfo());

::acdk::lang::RClass
ArrayIndexOutOfBoundsException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ArrayIndexOutOfBoundsException::getCollectableFields(FieldReferences& fields)
{
  IndexOutOfBoundsException::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _Boolean_super_Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Boolean_super_acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Boolean_super_acdk__lang__Cloneable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::lang::Cloneable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Boolean_interfaces[] =
{
  &_Boolean_super_Object,
  &_Boolean_super_acdk__io__Serializable,
  &_Boolean_super_acdk__lang__Cloneable,
  0
};

::acdk::lang::dmi::ClazzInfo* Boolean::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "Boolean", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Boolean_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  &Boolean::create_instance, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Boolean::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Boolean(Boolean::clazzInfo());

::acdk::lang::RClass
Boolean::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Boolean::getCollectableFields(FieldReferences& fields)
{
  Object::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _Byte_super_Number =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Number::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Byte_super_Comparable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Comparable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Byte_super_Cloneable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Cloneable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Byte_interfaces[] =
{
  &_Byte_super_Number,
  &_Byte_super_Comparable,
  &_Byte_super_Cloneable,
  0
};

::acdk::lang::dmi::ClazzInfo* Byte::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "Byte", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Byte_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  &Byte::create_instance, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Byte::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Byte(Byte::clazzInfo());

::acdk::lang::RClass
Byte::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Byte::getCollectableFields(FieldReferences& fields)
{
  Number::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


::acdk::lang::dmi::ClazzEnumValueInfo SliceType_ShadowSlice = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ShadowSlice", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::ShadowSlice, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SliceType_CopyOnWriteSlice = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "CopyOnWriteSlice", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::CopyOnWriteSlice, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SliceType_ClonedSlice = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ClonedSlice", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::ClonedSlice, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* SliceType_enumValues[] = {
  &SliceType_ShadowSlice,
  &SliceType_CopyOnWriteSlice,
  &SliceType_ClonedSlice,
0
};

::acdk::lang::dmi::ClazzEnumInfo* SliceTypeMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo SliceType_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "SliceType", // name
  -1, // hashCode
  "acdk/lang", // ns
  0, // _scopeParent
  0, // _nextSibling
  SliceType_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_SliceType(&SliceType_enumInfo);

  return &SliceType_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_SliceTypeEnumInfo(SliceTypeMetaInf::GetEnumInfo());


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo* _ByteBuffer_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBuffer::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "ByteBuffer", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ByteBuffer_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ByteBuffer::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ByteBuffer(ByteBuffer::clazzInfo());

::acdk::lang::RClass
ByteBuffer::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ByteBuffer::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _ReadByteBuffer_super_ByteBuffer =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ByteBuffer::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ReadByteBuffer_interfaces[] =
{
  &_ReadByteBuffer_super_ByteBuffer,
  0
};

::acdk::lang::dmi::ClazzInfo* ReadByteBuffer::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "ReadByteBuffer", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ReadByteBuffer_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ReadByteBuffer::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ReadByteBuffer(ReadByteBuffer::clazzInfo());

::acdk::lang::RClass
ReadByteBuffer::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ReadByteBuffer::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _WriteByteBuffer_super_ByteBuffer =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ByteBuffer::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _WriteByteBuffer_interfaces[] =
{
  &_WriteByteBuffer_super_ByteBuffer,
  0
};

::acdk::lang::dmi::ClazzInfo* WriteByteBuffer::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "WriteByteBuffer", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _WriteByteBuffer_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    WriteByteBuffer::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_WriteByteBuffer(WriteByteBuffer::clazzInfo());

::acdk::lang::RClass
WriteByteBuffer::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
WriteByteBuffer::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _ReadWriteByteBuffer_super_ReadByteBuffer =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ReadByteBuffer::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _ReadWriteByteBuffer_super_WriteByteBuffer =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  WriteByteBuffer::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ReadWriteByteBuffer_interfaces[] =
{
  &_ReadWriteByteBuffer_super_ReadByteBuffer,
  &_ReadWriteByteBuffer_super_WriteByteBuffer,
  0
};

::acdk::lang::dmi::ClazzInfo* ReadWriteByteBuffer::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "ReadWriteByteBuffer", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ReadWriteByteBuffer_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ReadWriteByteBuffer::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ReadWriteByteBuffer(ReadWriteByteBuffer::clazzInfo());

::acdk::lang::RClass
ReadWriteByteBuffer::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ReadWriteByteBuffer::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _FlexByteBuffer_super_ReadWriteByteBuffer =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ReadWriteByteBuffer::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _FlexByteBuffer_interfaces[] =
{
  &_FlexByteBuffer_super_ReadWriteByteBuffer,
  0
};

::acdk::lang::dmi::ClazzInfo* FlexByteBuffer::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "FlexByteBuffer", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _FlexByteBuffer_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    FlexByteBuffer::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_FlexByteBuffer(FlexByteBuffer::clazzInfo());

::acdk::lang::RClass
FlexByteBuffer::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
FlexByteBuffer::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _SlicedReadByteBuffer_super_Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _SlicedReadByteBuffer_super_ReadByteBuffer =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ReadByteBuffer::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SlicedReadByteBuffer_interfaces[] =
{
  &_SlicedReadByteBuffer_super_Object,
  &_SlicedReadByteBuffer_super_ReadByteBuffer,
  0
};

::acdk::lang::dmi::ClazzInfo* SlicedReadByteBuffer::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "SlicedReadByteBuffer", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SlicedReadByteBuffer_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SlicedReadByteBuffer::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SlicedReadByteBuffer(SlicedReadByteBuffer::clazzInfo());

::acdk::lang::RClass
SlicedReadByteBuffer::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SlicedReadByteBuffer::getCollectableFields(FieldReferences& fields)
{
  Object::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_parent._ref_this()); // RReadByteBuffer _parent 
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _SlicedReadWriteByteBuffer_super_Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _SlicedReadWriteByteBuffer_super_ReadWriteByteBuffer =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ReadWriteByteBuffer::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SlicedReadWriteByteBuffer_interfaces[] =
{
  &_SlicedReadWriteByteBuffer_super_Object,
  &_SlicedReadWriteByteBuffer_super_ReadWriteByteBuffer,
  0
};

::acdk::lang::dmi::ClazzInfo* SlicedReadWriteByteBuffer::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "SlicedReadWriteByteBuffer", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SlicedReadWriteByteBuffer_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SlicedReadWriteByteBuffer::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SlicedReadWriteByteBuffer(SlicedReadWriteByteBuffer::clazzInfo());

::acdk::lang::RClass
SlicedReadWriteByteBuffer::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SlicedReadWriteByteBuffer::getCollectableFields(FieldReferences& fields)
{
  Object::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_parent._ref_this()); // RReadWriteByteBuffer _parent 
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _ArrayReadByteBuffer_super_Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _ArrayReadByteBuffer_super_ReadByteBuffer =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ReadByteBuffer::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ArrayReadByteBuffer_interfaces[] =
{
  &_ArrayReadByteBuffer_super_Object,
  &_ArrayReadByteBuffer_super_ReadByteBuffer,
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayReadByteBuffer::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ArrayReadByteBuffer", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ArrayReadByteBuffer_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ArrayReadByteBuffer::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ArrayReadByteBuffer(ArrayReadByteBuffer::clazzInfo());

::acdk::lang::RClass
ArrayReadByteBuffer::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ArrayReadByteBuffer::getCollectableFields(FieldReferences& fields)
{
  Object::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_ba._ref_this()); // RbyteArray _ba 
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _ArrayReadWriteByteBuffer_super_ArrayReadByteBuffer =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ArrayReadByteBuffer::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _ArrayReadWriteByteBuffer_super_ReadWriteByteBuffer =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ReadWriteByteBuffer::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ArrayReadWriteByteBuffer_interfaces[] =
{
  &_ArrayReadWriteByteBuffer_super_ArrayReadByteBuffer,
  &_ArrayReadWriteByteBuffer_super_ReadWriteByteBuffer,
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayReadWriteByteBuffer::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ArrayReadWriteByteBuffer", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ArrayReadWriteByteBuffer_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ArrayReadWriteByteBuffer::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ArrayReadWriteByteBuffer(ArrayReadWriteByteBuffer::clazzInfo());

::acdk::lang::RClass
ArrayReadWriteByteBuffer::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ArrayReadWriteByteBuffer::getCollectableFields(FieldReferences& fields)
{
  ArrayReadByteBuffer::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _CoreByteBuffer_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _CoreByteBuffer_super_FlexByteBuffer =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  FlexByteBuffer::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _CoreByteBuffer_super_ReadWriteByteBuffer =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ReadWriteByteBuffer::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _CoreByteBuffer_interfaces[] =
{
  &_CoreByteBuffer_super_acdk__lang__Object,
  &_CoreByteBuffer_super_FlexByteBuffer,
  &_CoreByteBuffer_super_ReadWriteByteBuffer,
  0
};

::acdk::lang::dmi::ClazzInfo* CoreByteBuffer::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "CoreByteBuffer", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _CoreByteBuffer_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    CoreByteBuffer::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_CoreByteBuffer(CoreByteBuffer::clazzInfo());

::acdk::lang::RClass
CoreByteBuffer::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
CoreByteBuffer::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _StringReadByteBuffer_super_Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _StringReadByteBuffer_super_ReadByteBuffer =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ReadByteBuffer::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _StringReadByteBuffer_interfaces[] =
{
  &_StringReadByteBuffer_super_Object,
  &_StringReadByteBuffer_super_ReadByteBuffer,
  0
};

::acdk::lang::dmi::ClazzInfo* StringReadByteBuffer::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "StringReadByteBuffer", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _StringReadByteBuffer_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    StringReadByteBuffer::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_StringReadByteBuffer(StringReadByteBuffer::clazzInfo());

::acdk::lang::RClass
StringReadByteBuffer::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
StringReadByteBuffer::getCollectableFields(FieldReferences& fields)
{
  Object::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_str._ref_this()); // RString _str 
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _Buffers_super_Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Buffers_interfaces[] =
{
  &_Buffers_super_Object,
  0
};

::acdk::lang::dmi::ClazzInfo* Buffers::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "Buffers", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Buffers_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Buffers::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Buffers(Buffers::clazzInfo());

::acdk::lang::RClass
Buffers::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Buffers::getCollectableFields(FieldReferences& fields)
{
  Object::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _Character_super_Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Character_super_Comparable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Comparable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Character_super_Cloneable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Cloneable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Character_super_acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Character_interfaces[] =
{
  &_Character_super_Object,
  &_Character_super_Comparable,
  &_Character_super_Cloneable,
  &_Character_super_acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* Character::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "Character", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Character_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  &Character::create_instance, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Character::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Character(Character::clazzInfo());

::acdk::lang::RClass
Character::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Character::getCollectableFields(FieldReferences& fields)
{
  Object::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _Class_super_Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Class_super_dmi__MetaObject =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  dmi::MetaObject::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Class_interfaces[] =
{
  &_Class_super_Object,
  &_Class_super_dmi__MetaObject,
  0
};

::acdk::lang::dmi::ClazzInfo* Class::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiNoDmiProxy, // clazz-flags
  0, //AttributesRes
  "Class", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Class_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Class::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Class(Class::clazzInfo());

::acdk::lang::RClass
Class::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Class::getCollectableFields(FieldReferences& fields)
{
  Object::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _ClassCastException_super_Exception =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Exception::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ClassCastException_interfaces[] =
{
  &_ClassCastException_super_Exception,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassCastException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ClassCastException", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ClassCastException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ClassCastException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ClassCastException(ClassCastException::clazzInfo());

::acdk::lang::RClass
ClassCastException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ClassCastException::getCollectableFields(FieldReferences& fields)
{
  Exception::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _ClassLoader_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ClassLoader_interfaces[] =
{
  &_ClassLoader_super___acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassLoader::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ClassLoader", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ClassLoader_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ClassLoader::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ClassLoader(ClassLoader::clazzInfo());

::acdk::lang::RClass
ClassLoader::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ClassLoader::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_parent._ref_this()); // RClassLoader _parent 
  fields.push_back((::acdk::lang::RObject*)this->_registeredClassLoader._ref_this()); // RClassLoaderArray _registeredClassLoader 
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _ClassNotFoundException_super_NoSuchDmiElementException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  NoSuchDmiElementException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ClassNotFoundException_interfaces[] =
{
  &_ClassNotFoundException_super_NoSuchDmiElementException,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassNotFoundException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ClassNotFoundException", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ClassNotFoundException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ClassNotFoundException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ClassNotFoundException(ClassNotFoundException::clazzInfo());

::acdk::lang::RClass
ClassNotFoundException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ClassNotFoundException::getCollectableFields(FieldReferences& fields)
{
  NoSuchDmiElementException::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo* _Cloneable_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* Cloneable::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "Cloneable", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Cloneable_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Cloneable::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Cloneable(Cloneable::clazzInfo());

::acdk::lang::RClass
Cloneable::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Cloneable::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _CloneNotSupportedException_super_Exception =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Exception::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _CloneNotSupportedException_interfaces[] =
{
  &_CloneNotSupportedException_super_Exception,
  0
};

::acdk::lang::dmi::ClazzInfo* CloneNotSupportedException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "CloneNotSupportedException", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _CloneNotSupportedException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    CloneNotSupportedException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_CloneNotSupportedException(CloneNotSupportedException::clazzInfo());

::acdk::lang::RClass
CloneNotSupportedException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
CloneNotSupportedException::getCollectableFields(FieldReferences& fields)
{
  Exception::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _CmdLineOption_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _CmdLineOption_interfaces[] =
{
  &_CmdLineOption_super___acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* CmdLineOption::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "CmdLineOption", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _CmdLineOption_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 4, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    CmdLineOption::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_CmdLineOption(CmdLineOption::clazzInfo());

::acdk::lang::RClass
CmdLineOption::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
CmdLineOption::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_alias._ref_this()); // RString _alias 
  fields.push_back((::acdk::lang::RObject*)this->_docText._ref_this()); // RString _docText 
  fields.push_back((::acdk::lang::RObject*)this->_option._ref_this()); // RString _option 
  fields.push_back((::acdk::lang::RObject*)this->_shortOption._ref_this()); // RString _shortOption 
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _CmdLineParseException_super___acdk__lang__RuntimeException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::RuntimeException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _CmdLineParseException_interfaces[] =
{
  &_CmdLineParseException_super___acdk__lang__RuntimeException,
  0
};

::acdk::lang::dmi::ClazzInfo* CmdLineParseException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "CmdLineParseException", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _CmdLineParseException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    CmdLineParseException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_CmdLineParseException(CmdLineParseException::clazzInfo());

::acdk::lang::RClass
CmdLineParseException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
CmdLineParseException::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, RuntimeException)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_cmdline._ref_this()); // RStringArray _cmdline 
  fields.push_back((::acdk::lang::RObject*)this->_parser._ref_this()); // RCmdLineParser _parser 
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _CmdLineParser_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _CmdLineParser_interfaces[] =
{
  &_CmdLineParser_super___acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* CmdLineParser::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "CmdLineParser", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _CmdLineParser_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 3, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    CmdLineParser::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_CmdLineParser(CmdLineParser::clazzInfo());

::acdk::lang::RClass
CmdLineParser::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
CmdLineParser::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_helpDetail._ref_this()); // RString _helpDetail 
  fields.push_back((::acdk::lang::RObject*)this->_helpHeader._ref_this()); // RString _helpHeader 
  fields.push_back((::acdk::lang::RObject*)this->_map._ref_this()); // ::acdk::util::RHashMap _map 
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo* _Comparable_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* Comparable::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "Comparable", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Comparable_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Comparable::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Comparable(Comparable::clazzInfo());

::acdk::lang::RClass
Comparable::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Comparable::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _DmiException_super_RuntimeException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  RuntimeException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _DmiException_interfaces[] =
{
  &_DmiException_super_RuntimeException,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "DmiException", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _DmiException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    DmiException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_DmiException(DmiException::clazzInfo());

::acdk::lang::RClass
DmiException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
DmiException::getCollectableFields(FieldReferences& fields)
{
  RuntimeException::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _DmiTypeConversionException_super_DmiException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  DmiException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _DmiTypeConversionException_interfaces[] =
{
  &_DmiTypeConversionException_super_DmiException,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTypeConversionException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "DmiTypeConversionException", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _DmiTypeConversionException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    DmiTypeConversionException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_DmiTypeConversionException(DmiTypeConversionException::clazzInfo());

::acdk::lang::RClass
DmiTypeConversionException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
DmiTypeConversionException::getCollectableFields(FieldReferences& fields)
{
  DmiException::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _Double_super_Number =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Number::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Double_super_Comparable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Comparable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Double_super_Cloneable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Cloneable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Double_interfaces[] =
{
  &_Double_super_Number,
  &_Double_super_Comparable,
  &_Double_super_Cloneable,
  0
};

::acdk::lang::dmi::ClazzInfo* Double::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "Double", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Double_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  &Double::create_instance, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Double::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Double(Double::clazzInfo());

::acdk::lang::RClass
Double::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Double::getCollectableFields(FieldReferences& fields)
{
  Number::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _Error_super_Throwable =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Throwable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Error_interfaces[] =
{
  &_Error_super_Throwable,
  0
};

::acdk::lang::dmi::ClazzInfo* Error::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "Error", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Error_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Error::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Error(Error::clazzInfo());

::acdk::lang::RClass
Error::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Error::getCollectableFields(FieldReferences& fields)
{
  Throwable::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _Exception_super_Throwable =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Throwable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Exception_interfaces[] =
{
  &_Exception_super_Throwable,
  0
};

::acdk::lang::dmi::ClazzInfo* Exception::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "Exception", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Exception_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Exception::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Exception(Exception::clazzInfo());

::acdk::lang::RClass
Exception::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Exception::getCollectableFields(FieldReferences& fields)
{
  Throwable::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _Float_super_Number =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Number::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Float_super_Comparable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Comparable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Float_super_Cloneable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Cloneable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Float_interfaces[] =
{
  &_Float_super_Number,
  &_Float_super_Comparable,
  &_Float_super_Cloneable,
  0
};

::acdk::lang::dmi::ClazzInfo* Float::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "Float", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Float_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  &Float::create_instance, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Float::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Float(Float::clazzInfo());

::acdk::lang::RClass
Float::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Float::getCollectableFields(FieldReferences& fields)
{
  Number::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _IllegalAccessException_super_Exception =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Exception::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _IllegalAccessException_interfaces[] =
{
  &_IllegalAccessException_super_Exception,
  0
};

::acdk::lang::dmi::ClazzInfo* IllegalAccessException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "IllegalAccessException", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _IllegalAccessException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    IllegalAccessException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_IllegalAccessException(IllegalAccessException::clazzInfo());

::acdk::lang::RClass
IllegalAccessException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
IllegalAccessException::getCollectableFields(FieldReferences& fields)
{
  Exception::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _IllegalArgumentException_super_RuntimeException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  RuntimeException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _IllegalArgumentException_interfaces[] =
{
  &_IllegalArgumentException_super_RuntimeException,
  0
};

::acdk::lang::dmi::ClazzInfo* IllegalArgumentException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "IllegalArgumentException", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _IllegalArgumentException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    IllegalArgumentException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_IllegalArgumentException(IllegalArgumentException::clazzInfo());

::acdk::lang::RClass
IllegalArgumentException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
IllegalArgumentException::getCollectableFields(FieldReferences& fields)
{
  RuntimeException::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _IllegalMonitorStateException_super_RuntimeException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  RuntimeException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _IllegalMonitorStateException_interfaces[] =
{
  &_IllegalMonitorStateException_super_RuntimeException,
  0
};

::acdk::lang::dmi::ClazzInfo* IllegalMonitorStateException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "IllegalMonitorStateException", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _IllegalMonitorStateException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    IllegalMonitorStateException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_IllegalMonitorStateException(IllegalMonitorStateException::clazzInfo());

::acdk::lang::RClass
IllegalMonitorStateException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
IllegalMonitorStateException::getCollectableFields(FieldReferences& fields)
{
  RuntimeException::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _IllegalStateException_super_RuntimeException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  RuntimeException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _IllegalStateException_interfaces[] =
{
  &_IllegalStateException_super_RuntimeException,
  0
};

::acdk::lang::dmi::ClazzInfo* IllegalStateException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "IllegalStateException", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _IllegalStateException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    IllegalStateException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_IllegalStateException(IllegalStateException::clazzInfo());

::acdk::lang::RClass
IllegalStateException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
IllegalStateException::getCollectableFields(FieldReferences& fields)
{
  RuntimeException::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _IllegalThreadStateException_super_IllegalArgumentException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  IllegalArgumentException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _IllegalThreadStateException_interfaces[] =
{
  &_IllegalThreadStateException_super_IllegalArgumentException,
  0
};

::acdk::lang::dmi::ClazzInfo* IllegalThreadStateException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "IllegalThreadStateException", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _IllegalThreadStateException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    IllegalThreadStateException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_IllegalThreadStateException(IllegalThreadStateException::clazzInfo());

::acdk::lang::RClass
IllegalThreadStateException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
IllegalThreadStateException::getCollectableFields(FieldReferences& fields)
{
  IllegalArgumentException::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _IndexOutOfBoundsException_super_RuntimeException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  RuntimeException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _IndexOutOfBoundsException_interfaces[] =
{
  &_IndexOutOfBoundsException_super_RuntimeException,
  0
};

::acdk::lang::dmi::ClazzInfo* IndexOutOfBoundsException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "IndexOutOfBoundsException", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _IndexOutOfBoundsException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    IndexOutOfBoundsException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_IndexOutOfBoundsException(IndexOutOfBoundsException::clazzInfo());

::acdk::lang::RClass
IndexOutOfBoundsException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
IndexOutOfBoundsException::getCollectableFields(FieldReferences& fields)
{
  RuntimeException::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _InstantiationException_super_Exception =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Exception::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _InstantiationException_interfaces[] =
{
  &_InstantiationException_super_Exception,
  0
};

::acdk::lang::dmi::ClazzInfo* InstantiationException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "InstantiationException", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _InstantiationException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    InstantiationException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_InstantiationException(InstantiationException::clazzInfo());

::acdk::lang::RClass
InstantiationException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
InstantiationException::getCollectableFields(FieldReferences& fields)
{
  Exception::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _Integer_super_Number =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Number::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Integer_super_Comparable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Comparable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Integer_super_Cloneable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Cloneable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Integer_interfaces[] =
{
  &_Integer_super_Number,
  &_Integer_super_Comparable,
  &_Integer_super_Cloneable,
  0
};

::acdk::lang::dmi::ClazzInfo* Integer::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "Integer", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Integer_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  &Integer::create_instance, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Integer::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Integer(Integer::clazzInfo());

::acdk::lang::RClass
Integer::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Integer::getCollectableFields(FieldReferences& fields)
{
  Number::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _InterruptedException_super_Exception =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Exception::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _InterruptedException_interfaces[] =
{
  &_InterruptedException_super_Exception,
  0
};

::acdk::lang::dmi::ClazzInfo* InterruptedException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "InterruptedException", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _InterruptedException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    InterruptedException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_InterruptedException(InterruptedException::clazzInfo());

::acdk::lang::RClass
InterruptedException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
InterruptedException::getCollectableFields(FieldReferences& fields)
{
  Exception::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _Long_super_Number =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Number::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Long_super_Comparable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Comparable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Long_super_Cloneable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Cloneable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Long_interfaces[] =
{
  &_Long_super_Number,
  &_Long_super_Comparable,
  &_Long_super_Cloneable,
  0
};

::acdk::lang::dmi::ClazzInfo* Long::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "Long", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Long_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  &Long::create_instance, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Long::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Long(Long::clazzInfo());

::acdk::lang::RClass
Long::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Long::getCollectableFields(FieldReferences& fields)
{
  Number::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _NoSuchDmiElementException_super_DmiException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  DmiException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _NoSuchDmiElementException_interfaces[] =
{
  &_NoSuchDmiElementException_super_DmiException,
  0
};

::acdk::lang::dmi::ClazzInfo* NoSuchDmiElementException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "NoSuchDmiElementException", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _NoSuchDmiElementException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    NoSuchDmiElementException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_NoSuchDmiElementException(NoSuchDmiElementException::clazzInfo());

::acdk::lang::RClass
NoSuchDmiElementException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
NoSuchDmiElementException::getCollectableFields(FieldReferences& fields)
{
  DmiException::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _NoSuchElementException_super_DmiException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  DmiException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _NoSuchElementException_interfaces[] =
{
  &_NoSuchElementException_super_DmiException,
  0
};

::acdk::lang::dmi::ClazzInfo* NoSuchElementException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "NoSuchElementException", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _NoSuchElementException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    NoSuchElementException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_NoSuchElementException(NoSuchElementException::clazzInfo());

::acdk::lang::RClass
NoSuchElementException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
NoSuchElementException::getCollectableFields(FieldReferences& fields)
{
  DmiException::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _NoSuchFieldException_super_NoSuchDmiElementException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  NoSuchDmiElementException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _NoSuchFieldException_interfaces[] =
{
  &_NoSuchFieldException_super_NoSuchDmiElementException,
  0
};

::acdk::lang::dmi::ClazzInfo* NoSuchFieldException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "NoSuchFieldException", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _NoSuchFieldException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    NoSuchFieldException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_NoSuchFieldException(NoSuchFieldException::clazzInfo());

::acdk::lang::RClass
NoSuchFieldException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
NoSuchFieldException::getCollectableFields(FieldReferences& fields)
{
  NoSuchDmiElementException::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _NoSuchMethodException_super_NoSuchDmiElementException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  NoSuchDmiElementException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _NoSuchMethodException_interfaces[] =
{
  &_NoSuchMethodException_super_NoSuchDmiElementException,
  0
};

::acdk::lang::dmi::ClazzInfo* NoSuchMethodException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "NoSuchMethodException", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _NoSuchMethodException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    NoSuchMethodException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_NoSuchMethodException(NoSuchMethodException::clazzInfo());

::acdk::lang::RClass
NoSuchMethodException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
NoSuchMethodException::getCollectableFields(FieldReferences& fields)
{
  NoSuchDmiElementException::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _NullPointerException_super_RuntimeException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  RuntimeException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _NullPointerException_interfaces[] =
{
  &_NullPointerException_super_RuntimeException,
  0
};

::acdk::lang::dmi::ClazzInfo* NullPointerException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "NullPointerException", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _NullPointerException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    NullPointerException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_NullPointerException(NullPointerException::clazzInfo());

::acdk::lang::RClass
NullPointerException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
NullPointerException::getCollectableFields(FieldReferences& fields)
{
  RuntimeException::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


::acdk::lang::dmi::ClazzEnumValueInfo Endian_BigEndian = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "BigEndian", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::BigEndian, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo Endian_LittleEndian = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "LittleEndian", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::LittleEndian, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* Endian_enumValues[] = {
  &Endian_BigEndian,
  &Endian_LittleEndian,
0
};

::acdk::lang::dmi::ClazzEnumInfo* EndianMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo Endian_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "Endian", // name
  -1, // hashCode
  "acdk/lang", // ns
  0, // _scopeParent
  0, // _nextSibling
  Endian_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_Endian(&Endian_enumInfo);

  return &Endian_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_EndianEnumInfo(EndianMetaInf::GetEnumInfo());


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _Number_super_Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Number_super_acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Number_interfaces[] =
{
  &_Number_super_Object,
  &_Number_super_acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* Number::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiAbstract | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "Number", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Number_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Number::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Number(Number::clazzInfo());

::acdk::lang::RClass
Number::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Number::getCollectableFields(FieldReferences& fields)
{
  Object::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _NumberFormatException_super_IllegalArgumentException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  IllegalArgumentException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _NumberFormatException_interfaces[] =
{
  &_NumberFormatException_super_IllegalArgumentException,
  0
};

::acdk::lang::dmi::ClazzInfo* NumberFormatException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "NumberFormatException", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _NumberFormatException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    NumberFormatException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_NumberFormatException(NumberFormatException::clazzInfo());

::acdk::lang::RClass
NumberFormatException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
NumberFormatException::getCollectableFields(FieldReferences& fields)
{
  IllegalArgumentException::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo* _Object_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* Object::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "Object", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Object_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  &Object::create_instance, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Object::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Object(Object::clazzInfo());

::acdk::lang::RClass
Object::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Object::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _ObjectArrayBaseImpl_super_Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ObjectArrayBaseImpl_interfaces[] =
{
  &_ObjectArrayBaseImpl_super_Object,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectArrayBaseImpl::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiArray, // clazz-flags
  0, //AttributesRes
  "[", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ObjectArrayBaseImpl_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  &ObjectArrayBaseImpl::create_instance, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ObjectArrayBaseImpl::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ObjectArrayBaseImpl(ObjectArrayBaseImpl::clazzInfo());

::acdk::lang::RClass
ObjectArrayBaseImpl::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ObjectArrayBaseImpl::getCollectableFields(FieldReferences& fields)
{
  Object::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _Package_super_Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Package_interfaces[] =
{
  &_Package_super_Object,
  0
};

::acdk::lang::dmi::ClazzInfo* Package::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiNoDmiProxy, // clazz-flags
  0, //AttributesRes
  "Package", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Package_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Package::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Package(Package::clazzInfo());

::acdk::lang::RClass
Package::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Package::getCollectableFields(FieldReferences& fields)
{
  Object::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _ParamsMismatchException_super_DmiException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  DmiException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ParamsMismatchException_interfaces[] =
{
  &_ParamsMismatchException_super_DmiException,
  0
};

::acdk::lang::dmi::ClazzInfo* ParamsMismatchException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ParamsMismatchException", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ParamsMismatchException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ParamsMismatchException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ParamsMismatchException(ParamsMismatchException::clazzInfo());

::acdk::lang::RClass
ParamsMismatchException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ParamsMismatchException::getCollectableFields(FieldReferences& fields)
{
  DmiException::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


::acdk::lang::dmi::ClazzEnumValueInfo ProcessStatus_ProcessStillRunning = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ProcessStillRunning", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::ProcessStillRunning, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo ProcessStatus_ProcessFinished = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ProcessFinished", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::ProcessFinished, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo ProcessStatus_ProcessAlreadyDestroyed = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ProcessAlreadyDestroyed", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::ProcessAlreadyDestroyed, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo ProcessStatus_ProcessNotStarted = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ProcessNotStarted", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::ProcessNotStarted, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* ProcessStatus_enumValues[] = {
  &ProcessStatus_ProcessStillRunning,
  &ProcessStatus_ProcessFinished,
  &ProcessStatus_ProcessAlreadyDestroyed,
  &ProcessStatus_ProcessNotStarted,
0
};

::acdk::lang::dmi::ClazzEnumInfo* ProcessStatusMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo ProcessStatus_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "ProcessStatus", // name
  -1, // hashCode
  "acdk/lang", // ns
  0, // _scopeParent
  0, // _nextSibling
  ProcessStatus_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_ProcessStatus(&ProcessStatus_enumInfo);

  return &ProcessStatus_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_ProcessStatusEnumInfo(ProcessStatusMetaInf::GetEnumInfo());


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _Process_super_Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Process_interfaces[] =
{
  &_Process_super_Object,
  0
};

::acdk::lang::dmi::ClazzInfo* Process::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "Process", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Process_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 7, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Process::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Process(Process::clazzInfo());

::acdk::lang::RClass
Process::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Process::getCollectableFields(FieldReferences& fields)
{
  Object::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_args._ref_this()); // RStringArray _args 
  fields.push_back((::acdk::lang::RObject*)this->_command._ref_this()); // RString _command 
  fields.push_back((::acdk::lang::RObject*)this->_envp._ref_this()); // RStringArray _envp 
  fields.push_back((::acdk::lang::RObject*)this->_stderrReader._ref_this()); // RProcess_PipeReader _stderrReader 
  fields.push_back((::acdk::lang::RObject*)this->_stdinWriter._ref_this()); // acdk::io::RFileWriter _stdinWriter 
  fields.push_back((::acdk::lang::RObject*)this->_stdoutReader._ref_this()); // RProcess_PipeReader _stdoutReader 
  fields.push_back((::acdk::lang::RObject*)this->_workDir._ref_this()); // RString _workDir 
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo* _Runnable_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* Runnable::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "Runnable", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Runnable_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Runnable::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Runnable(Runnable::clazzInfo());

::acdk::lang::RClass
Runnable::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Runnable::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


::acdk::lang::dmi::ClazzEnumValueInfo SignalEventType_CtrlC_Event = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "CtrlC_Event", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::CtrlC_Event, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SignalEventType_CtrlBreak_Event = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "CtrlBreak_Event", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::CtrlBreak_Event, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* SignalEventType_enumValues[] = {
  &SignalEventType_CtrlC_Event,
  &SignalEventType_CtrlBreak_Event,
0
};

::acdk::lang::dmi::ClazzEnumInfo* SignalEventTypeMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo SignalEventType_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "SignalEventType", // name
  -1, // hashCode
  "acdk/lang", // ns
  0, // _scopeParent
  0, // _nextSibling
  SignalEventType_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_SignalEventType(&SignalEventType_enumInfo);

  return &SignalEventType_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_SignalEventTypeEnumInfo(SignalEventTypeMetaInf::GetEnumInfo());


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo* _SignalEventHandler_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* SignalEventHandler::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "SignalEventHandler", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SignalEventHandler_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SignalEventHandler::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SignalEventHandler(SignalEventHandler::clazzInfo());

::acdk::lang::RClass
SignalEventHandler::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SignalEventHandler::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _Runtime_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Runtime_interfaces[] =
{
  &_Runtime_super___acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* Runtime::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "Runtime", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Runtime_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Runtime::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Runtime(Runtime::clazzInfo());

::acdk::lang::RClass
Runtime::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Runtime::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _RuntimeException_super_Exception =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Exception::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _RuntimeException_interfaces[] =
{
  &_RuntimeException_super_Exception,
  0
};

::acdk::lang::dmi::ClazzInfo* RuntimeException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "RuntimeException", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _RuntimeException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    RuntimeException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_RuntimeException(RuntimeException::clazzInfo());

::acdk::lang::RClass
RuntimeException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
RuntimeException::getCollectableFields(FieldReferences& fields)
{
  Exception::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _SharedLibrary_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SharedLibrary_interfaces[] =
{
  &_SharedLibrary_super___acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* SharedLibrary::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "SharedLibrary", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SharedLibrary_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SharedLibrary::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SharedLibrary(SharedLibrary::clazzInfo());

::acdk::lang::RClass
SharedLibrary::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SharedLibrary::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_library._ref_this()); // acdk::lang::RString _library 
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _Short_super_Number =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Number::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Short_super_Comparable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Comparable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Short_super_Cloneable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Cloneable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Short_interfaces[] =
{
  &_Short_super_Number,
  &_Short_super_Comparable,
  &_Short_super_Cloneable,
  0
};

::acdk::lang::dmi::ClazzInfo* Short::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "Short", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Short_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  &Short::create_instance, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Short::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Short(Short::clazzInfo());

::acdk::lang::RClass
Short::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Short::getCollectableFields(FieldReferences& fields)
{
  Number::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _StackFrameLocal_super___acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _StackFrameLocal_interfaces[] =
{
  &_StackFrameLocal_super___acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* StackFrameLocal::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "StackFrameLocal", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _StackFrameLocal_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    StackFrameLocal::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_StackFrameLocal(StackFrameLocal::clazzInfo());

::acdk::lang::RClass
StackFrameLocal::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
StackFrameLocal::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _StackFrame_super___acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _StackFrame_interfaces[] =
{
  &_StackFrame_super___acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* StackFrame::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "StackFrame", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _StackFrame_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    StackFrame::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_StackFrame(StackFrame::clazzInfo());

::acdk::lang::RClass
StackFrame::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
StackFrame::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _NativeStackFrame_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _NativeStackFrame_super_StackFrame =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  StackFrame::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _NativeStackFrame_interfaces[] =
{
  &_NativeStackFrame_super_acdk__lang__Object,
  &_NativeStackFrame_super_StackFrame,
  0
};

::acdk::lang::dmi::ClazzInfo* NativeStackFrame::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "NativeStackFrame", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _NativeStackFrame_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    NativeStackFrame::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_NativeStackFrame(NativeStackFrame::clazzInfo());

::acdk::lang::RClass
NativeStackFrame::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
NativeStackFrame::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_functionName._ref_this()); // RString _functionName 
  fields.push_back((::acdk::lang::RObject*)this->_libraryName._ref_this()); // RString _libraryName 
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


::acdk::lang::dmi::ClazzEnumValueInfo StringStorageType_UnspecSST = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "UnspecSST", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::UnspecSST, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo StringStorageType_NormalSST = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "NormalSST", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::NormalSST, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo StringStorageType_SubSST = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SubSST", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::SubSST, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo StringStorageType_ConstSST = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ConstSST", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::ConstSST, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo StringStorageType_HashSST = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "HashSST", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::HashSST, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo StringStorageType_StorageMaskSST = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "StorageMaskSST", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::StorageMaskSST, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* StringStorageType_enumValues[] = {
  &StringStorageType_UnspecSST,
  &StringStorageType_NormalSST,
  &StringStorageType_SubSST,
  &StringStorageType_ConstSST,
  &StringStorageType_HashSST,
  &StringStorageType_StorageMaskSST,
0
};

::acdk::lang::dmi::ClazzEnumInfo* StringStorageTypeMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo StringStorageType_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "StringStorageType", // name
  -1, // hashCode
  "acdk/lang", // ns
  0, // _scopeParent
  0, // _nextSibling
  StringStorageType_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_StringStorageType(&StringStorageType_enumInfo);

  return &StringStorageType_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_StringStorageTypeEnumInfo(StringStorageTypeMetaInf::GetEnumInfo());


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


::acdk::lang::dmi::ClazzEnumValueInfo CharacterClass_CCAscii = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "CCAscii", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::CCAscii, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo CharacterClass_CCUcs2 = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "CCUcs2", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::CCUcs2, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo CharacterClass_CCUcs4 = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "CCUcs4", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::CCUcs4, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo CharacterClass_CCAnsi = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "CCAnsi", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::CCAnsi, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo CharacterClass_CCUtf8 = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "CCUtf8", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::CCUtf8, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo CharacterClass_CCUtf16 = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "CCUtf16", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::CCUtf16, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo CharacterClass_CCOsNative = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "CCOsNative", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::CCOsNative, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo CharacterClass_CharacterClassMask = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "CharacterClassMask", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::CharacterClassMask, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* CharacterClass_enumValues[] = {
  &CharacterClass_CCAscii,
  &CharacterClass_CCUcs2,
  &CharacterClass_CCUcs4,
  &CharacterClass_CCAnsi,
  &CharacterClass_CCUtf8,
  &CharacterClass_CCUtf16,
  &CharacterClass_CCOsNative,
  &CharacterClass_CharacterClassMask,
0
};

::acdk::lang::dmi::ClazzEnumInfo* CharacterClassMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo CharacterClass_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "CharacterClass", // name
  -1, // hashCode
  "acdk/lang", // ns
  0, // _scopeParent
  0, // _nextSibling
  CharacterClass_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_CharacterClass(&CharacterClass_enumInfo);

  return &CharacterClass_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_CharacterClassEnumInfo(CharacterClassMetaInf::GetEnumInfo());


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


::acdk::lang::dmi::ClazzEnumValueInfo TrimFlags_TrimSpace = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "TrimSpace", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::TrimSpace, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TrimFlags_TrimNewLines = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "TrimNewLines", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::TrimNewLines, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TrimFlags_TrimControl = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "TrimControl", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::TrimControl, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TrimFlags_TrimWhiteSpace = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "TrimWhiteSpace", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::TrimWhiteSpace, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TrimFlags_TrimLeft = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "TrimLeft", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::TrimLeft, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TrimFlags_TrimRight = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "TrimRight", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::TrimRight, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TrimFlags_TrimBoth = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "TrimBoth", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::TrimBoth, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* TrimFlags_enumValues[] = {
  &TrimFlags_TrimSpace,
  &TrimFlags_TrimNewLines,
  &TrimFlags_TrimControl,
  &TrimFlags_TrimWhiteSpace,
  &TrimFlags_TrimLeft,
  &TrimFlags_TrimRight,
  &TrimFlags_TrimBoth,
0
};

::acdk::lang::dmi::ClazzEnumInfo* TrimFlagsMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo TrimFlags_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "TrimFlags", // name
  -1, // hashCode
  "acdk/lang", // ns
  0, // _scopeParent
  0, // _nextSibling
  TrimFlags_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_TrimFlags(&TrimFlags_enumInfo);

  return &TrimFlags_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_TrimFlagsEnumInfo(TrimFlagsMetaInf::GetEnumInfo());


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _String_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _String_super___acdk__lang__Comparable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::lang::Comparable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _String_super___acdk__lang__Cloneable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::lang::Cloneable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _String_interfaces[] =
{
  &_String_super___acdk__lang__Object,
  &_String_super___acdk__lang__Comparable,
  &_String_super___acdk__lang__Cloneable,
  0
};

::acdk::lang::dmi::ClazzInfo* String::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "String", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _String_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  &String::create_instance, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    String::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_String(String::clazzInfo());

::acdk::lang::RClass
String::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
String::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _StringBuffer_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _StringBuffer_super___acdk__lang__Cloneable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::lang::Cloneable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _StringBuffer_super___acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _StringBuffer_interfaces[] =
{
  &_StringBuffer_super___acdk__lang__Object,
  &_StringBuffer_super___acdk__lang__Cloneable,
  &_StringBuffer_super___acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* StringBuffer::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "StringBuffer", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _StringBuffer_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  &StringBuffer::create_instance, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    StringBuffer::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_StringBuffer(StringBuffer::clazzInfo());

::acdk::lang::RClass
StringBuffer::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
StringBuffer::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_str._ref_this()); // RString _str 
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _StringIndexOutOfBoundsException_super_IndexOutOfBoundsException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  IndexOutOfBoundsException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _StringIndexOutOfBoundsException_interfaces[] =
{
  &_StringIndexOutOfBoundsException_super_IndexOutOfBoundsException,
  0
};

::acdk::lang::dmi::ClazzInfo* StringIndexOutOfBoundsException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "StringIndexOutOfBoundsException", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _StringIndexOutOfBoundsException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    StringIndexOutOfBoundsException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_StringIndexOutOfBoundsException(StringIndexOutOfBoundsException::clazzInfo());

::acdk::lang::RClass
StringIndexOutOfBoundsException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
StringIndexOutOfBoundsException::getCollectableFields(FieldReferences& fields)
{
  IndexOutOfBoundsException::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


::acdk::lang::dmi::ClazzEnumValueInfo PlatformFlags_PfWin32 = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "PfWin32", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::PfWin32, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo PlatformFlags_PfUnix = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "PfUnix", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::PfUnix, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo PlatformFlags_PfLinux = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "PfLinux", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::PfLinux, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo PlatformFlags_PfFreeBSD = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "PfFreeBSD", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::PfFreeBSD, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo PlatformFlags_PfSolaris = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "PfSolaris", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::PfSolaris, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo PlatformFlags_PfCygwin = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "PfCygwin", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::PfCygwin, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo PlatformFlags_PfCcGcc = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "PfCcGcc", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::PfCcGcc, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo PlatformFlags_PfCcVc = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "PfCcVc", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::PfCcVc, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo PlatformFlags_PfCcBcc = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "PfCcBcc", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::PfCcBcc, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo PlatformFlags_Pf32Bit = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "Pf32Bit", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::Pf32Bit, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo PlatformFlags_Pf64Bit = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "Pf64Bit", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::Pf64Bit, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo PlatformFlags_PfBigEndian = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "PfBigEndian", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::PfBigEndian, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo PlatformFlags_PfLittleEndian = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "PfLittleEndian", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::PfLittleEndian, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* PlatformFlags_enumValues[] = {
  &PlatformFlags_PfWin32,
  &PlatformFlags_PfUnix,
  &PlatformFlags_PfLinux,
  &PlatformFlags_PfFreeBSD,
  &PlatformFlags_PfSolaris,
  &PlatformFlags_PfCygwin,
  &PlatformFlags_PfCcGcc,
  &PlatformFlags_PfCcVc,
  &PlatformFlags_PfCcBcc,
  &PlatformFlags_Pf32Bit,
  &PlatformFlags_Pf64Bit,
  &PlatformFlags_PfBigEndian,
  &PlatformFlags_PfLittleEndian,
0
};

::acdk::lang::dmi::ClazzEnumInfo* PlatformFlagsMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo PlatformFlags_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "PlatformFlags", // name
  -1, // hashCode
  "acdk/lang", // ns
  0, // _scopeParent
  0, // _nextSibling
  PlatformFlags_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_PlatformFlags(&PlatformFlags_enumInfo);

  return &PlatformFlags_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_PlatformFlagsEnumInfo(PlatformFlagsMetaInf::GetEnumInfo());


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


::acdk::lang::dmi::ClazzEnumValueInfo SystemStatus_SystemStatusBeforeMain = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SystemStatusBeforeMain", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::SystemStatusBeforeMain, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SystemStatus_SystemStatusStartMain = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SystemStatusStartMain", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::SystemStatusStartMain, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SystemStatus_SystemStatusConfigLoaded = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SystemStatusConfigLoaded", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::SystemStatusConfigLoaded, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SystemStatus_SystemStatusInUsersMain = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SystemStatusInUsersMain", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::SystemStatusInUsersMain, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SystemStatus_SystemStatusAfterUsersMain = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SystemStatusAfterUsersMain", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::SystemStatusAfterUsersMain, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SystemStatus_SystemStatusAfterMain = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SystemStatusAfterMain", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::SystemStatusAfterMain, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* SystemStatus_enumValues[] = {
  &SystemStatus_SystemStatusBeforeMain,
  &SystemStatus_SystemStatusStartMain,
  &SystemStatus_SystemStatusConfigLoaded,
  &SystemStatus_SystemStatusInUsersMain,
  &SystemStatus_SystemStatusAfterUsersMain,
  &SystemStatus_SystemStatusAfterMain,
0
};

::acdk::lang::dmi::ClazzEnumInfo* SystemStatusMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo SystemStatus_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "SystemStatus", // name
  -1, // hashCode
  "acdk/lang", // ns
  0, // _scopeParent
  0, // _nextSibling
  SystemStatus_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_SystemStatus(&SystemStatus_enumInfo);

  return &SystemStatus_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_SystemStatusEnumInfo(SystemStatusMetaInf::GetEnumInfo());


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo* _Initializer_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* Initializer::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "Initializer", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Initializer_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Initializer::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Initializer(Initializer::clazzInfo());

::acdk::lang::RClass
Initializer::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Initializer::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _SystemImpl_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SystemImpl_interfaces[] =
{
  &_SystemImpl_super___acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* SystemImpl::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "SystemImpl", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SystemImpl_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 7, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SystemImpl::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SystemImpl(SystemImpl::clazzInfo());

::acdk::lang::RClass
SystemImpl::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SystemImpl::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_acdkPath._ref_this()); // RStringArray _acdkPath 
  fields.push_back((::acdk::lang::RObject*)this->_environment._ref_this()); // acdk::util::RProperties _environment 
  fields.push_back((::acdk::lang::RObject*)this->_filteredArgs._ref_this()); // RStringArray _filteredArgs 
  fields.push_back((::acdk::lang::RObject*)this->_mainThread._ref_this()); // RThread _mainThread 
  fields.push_back((::acdk::lang::RObject*)this->_properties._ref_this()); // acdk::util::RProperties _properties 
  fields.push_back((::acdk::lang::RObject*)this->_systemPropertiesListener._ref_this()); // acdk::util::RPropertiesChangeListener _systemPropertiesListener 
  fields.push_back((::acdk::lang::RObject*)this->_unfilteredArgs._ref_this()); // RStringArray _unfilteredArgs 
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _System_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _System_interfaces[] =
{
  &_System_super___acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* System::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "System", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _System_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 4, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    System::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_System(System::clazzInfo());

::acdk::lang::RClass
System::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
System::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _SystemError_super_Error =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Error::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SystemError_interfaces[] =
{
  &_SystemError_super_Error,
  0
};

::acdk::lang::dmi::ClazzInfo* SystemError::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "SystemError", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SystemError_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SystemError::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SystemError(SystemError::clazzInfo());

::acdk::lang::RClass
SystemError::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SystemError::getCollectableFields(FieldReferences& fields)
{
  Error::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


::acdk::lang::dmi::ClazzEnumValueInfo ThreadType_UserThreadType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "UserThreadType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::UserThreadType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo ThreadType_SystemThreadType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SystemThreadType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::SystemThreadType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo ThreadType_MainThreadType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "MainThreadType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::lang::MainThreadType, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* ThreadType_enumValues[] = {
  &ThreadType_UserThreadType,
  &ThreadType_SystemThreadType,
  &ThreadType_MainThreadType,
0
};

::acdk::lang::dmi::ClazzEnumInfo* ThreadTypeMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo ThreadType_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "ThreadType", // name
  -1, // hashCode
  "acdk/lang", // ns
  0, // _scopeParent
  0, // _nextSibling
  ThreadType_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_ThreadType(&ThreadType_enumInfo);

  return &ThreadType_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_ThreadTypeEnumInfo(ThreadTypeMetaInf::GetEnumInfo());


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _Thread_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Thread_super___acdk__lang__Runnable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::lang::Runnable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Thread_interfaces[] =
{
  &_Thread_super___acdk__lang__Object,
  &_Thread_super___acdk__lang__Runnable,
  0
};

::acdk::lang::dmi::ClazzInfo* Thread::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "Thread", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Thread_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 4, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Thread::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Thread(Thread::clazzInfo());

::acdk::lang::RClass
Thread::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Thread::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_exceptionToThrow._ref_this()); // RThrowable _exceptionToThrow 
  fields.push_back((::acdk::lang::RObject*)this->_group._ref_this()); // RThreadGroup _group 
  fields.push_back((::acdk::lang::RObject*)this->_name._ref_this()); // RString _name 
  fields.push_back((::acdk::lang::RObject*)this->_runnable._ref_this()); // RRunnable _runnable 
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _ThreadDeath_super_Error =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Error::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ThreadDeath_interfaces[] =
{
  &_ThreadDeath_super_Error,
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadDeath::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ThreadDeath", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ThreadDeath_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ThreadDeath::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ThreadDeath(ThreadDeath::clazzInfo());

::acdk::lang::RClass
ThreadDeath::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ThreadDeath::getCollectableFields(FieldReferences& fields)
{
  Error::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _ThreadGroup_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ThreadGroup_interfaces[] =
{
  &_ThreadGroup_super___acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadGroup::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ThreadGroup", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ThreadGroup_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 5, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ThreadGroup::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ThreadGroup(ThreadGroup::clazzInfo());

::acdk::lang::RClass
ThreadGroup::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ThreadGroup::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_children._ref_this()); // ::acdk::util::RVector _children 
  fields.push_back((::acdk::lang::RObject*)this->_name._ref_this()); // RString _name 
  fields.push_back((::acdk::lang::RObject*)this->_parent._ref_this()); // RThreadGroup _parent 
  fields.push_back((::acdk::lang::RObject*)this->_threads._ref_this()); // ::acdk::util::RVector _threads 
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _ThreadLocal_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ThreadLocal_interfaces[] =
{
  &_ThreadLocal_super___acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadLocal::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ThreadLocal", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ThreadLocal_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ThreadLocal::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ThreadLocal(ThreadLocal::clazzInfo());

::acdk::lang::RClass
ThreadLocal::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ThreadLocal::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo* _ThrowListener_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* ThrowListener::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "ThrowListener", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ThrowListener_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ThrowListener::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ThrowListener(ThrowListener::clazzInfo());

::acdk::lang::RClass
ThrowListener::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ThrowListener::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _Throwable_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Throwable_super_acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Throwable_interfaces[] =
{
  &_Throwable_super___acdk__lang__Object,
  &_Throwable_super_acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* Throwable::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "Throwable", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Throwable_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  &Throwable::create_instance, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 3, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Throwable::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Throwable(Throwable::clazzInfo());

::acdk::lang::RClass
Throwable::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Throwable::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_cause._ref_this()); // RThrowable _cause 
  fields.push_back((::acdk::lang::RObject*)this->_stackFrames._ref_this()); // RStackFrameArray _stackFrames 
  fields.push_back((::acdk::lang::RObject*)this->_what._ref_this()); // RString _what 
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _UnicodeCharacter_super_Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _UnicodeCharacter_super_Comparable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Comparable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _UnicodeCharacter_super_Cloneable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Cloneable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _UnicodeCharacter_super_acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _UnicodeCharacter_interfaces[] =
{
  &_UnicodeCharacter_super_Object,
  &_UnicodeCharacter_super_Comparable,
  &_UnicodeCharacter_super_Cloneable,
  &_UnicodeCharacter_super_acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* UnicodeCharacter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "UnicodeCharacter", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _UnicodeCharacter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  &UnicodeCharacter::create_instance, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    UnicodeCharacter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_UnicodeCharacter(UnicodeCharacter::clazzInfo());

::acdk::lang::RClass
UnicodeCharacter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
UnicodeCharacter::getCollectableFields(FieldReferences& fields)
{
  Object::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _UnsupportedOperationException_super_RuntimeException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  RuntimeException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _UnsupportedOperationException_interfaces[] =
{
  &_UnsupportedOperationException_super_RuntimeException,
  0
};

::acdk::lang::dmi::ClazzInfo* UnsupportedOperationException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "UnsupportedOperationException", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _UnsupportedOperationException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    UnsupportedOperationException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_UnsupportedOperationException(UnsupportedOperationException::clazzInfo());

::acdk::lang::RClass
UnsupportedOperationException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
UnsupportedOperationException::getCollectableFields(FieldReferences& fields)
{
  RuntimeException::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 

::acdk::lang::dmi::ClazzSuperInfo _Void_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Void_interfaces[] =
{
  &_Void_super___acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* Void::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "Void", // name of class
  -1, // hashCode
  "acdk/lang", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Void_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Void::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Void(Void::clazzInfo());

::acdk::lang::RClass
Void::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Void::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang

