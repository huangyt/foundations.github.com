// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "AccessibleObject.h"
#include "Constructor.h"
#include "Enumeration.h"
#include "Field.h"
#include "InvocationTargetException.h"
#include "Member.h"
#include "Method.h"
#include "Modifier.h"
#include "Parameter.h"
#include "reflect.h"
#include "Unit.h"

namespace acdk { 
namespace lang { 
namespace reflect { 

::acdk::lang::dmi::ClazzSuperInfo _AccessibleObject_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _AccessibleObject_interfaces[] =
{
  &_AccessibleObject_super_acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* AccessibleObject::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "AccessibleObject", // name of class
  -1, // hashCode
  "acdk/lang/reflect", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _AccessibleObject_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    AccessibleObject::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_AccessibleObject(AccessibleObject::clazzInfo());

::acdk::lang::RClass
AccessibleObject::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
AccessibleObject::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang
} // namespace reflect


namespace acdk { 
namespace lang { 
namespace reflect { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _Constructor_super_AccessibleObject =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AccessibleObject::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Constructor_super_Member =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Member::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Constructor_super_acdk__lang__dmi__MetaObject =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::lang::dmi::MetaObject::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Constructor_interfaces[] =
{
  &_Constructor_super_AccessibleObject,
  &_Constructor_super_Member,
  &_Constructor_super_acdk__lang__dmi__MetaObject,
  0
};

::acdk::lang::dmi::ClazzInfo* Constructor::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiNoDmiProxy, // clazz-flags
  0, //AttributesRes
  "Constructor", // name of class
  -1, // hashCode
  "acdk/lang/reflect", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Constructor_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Constructor::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Constructor(Constructor::clazzInfo());

::acdk::lang::RClass
Constructor::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Constructor::getCollectableFields(FieldReferences& fields)
{
  AccessibleObject::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang
} // namespace reflect


namespace acdk { 
namespace lang { 
namespace reflect { 

::acdk::lang::dmi::ClazzSuperInfo _EnumerationValue_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _EnumerationValue_interfaces[] =
{
  &_EnumerationValue_super_acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* EnumerationValue::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiNoDmiProxy, // clazz-flags
  0, //AttributesRes
  "EnumerationValue", // name of class
  -1, // hashCode
  "acdk/lang/reflect", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _EnumerationValue_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    EnumerationValue::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_EnumerationValue(EnumerationValue::clazzInfo());

::acdk::lang::RClass
EnumerationValue::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
EnumerationValue::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang
} // namespace reflect


namespace acdk { 
namespace lang { 
namespace reflect { 

::acdk::lang::dmi::ClazzSuperInfo _Enumeration_super_AccessibleObject =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AccessibleObject::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Enumeration_super_acdk__lang__dmi__MetaObject =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::lang::dmi::MetaObject::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Enumeration_interfaces[] =
{
  &_Enumeration_super_AccessibleObject,
  &_Enumeration_super_acdk__lang__dmi__MetaObject,
  0
};

::acdk::lang::dmi::ClazzInfo* Enumeration::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiNoDmiProxy, // clazz-flags
  0, //AttributesRes
  "Enumeration", // name of class
  -1, // hashCode
  "acdk/lang/reflect", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Enumeration_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Enumeration::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Enumeration(Enumeration::clazzInfo());

::acdk::lang::RClass
Enumeration::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Enumeration::getCollectableFields(FieldReferences& fields)
{
  AccessibleObject::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang
} // namespace reflect


namespace acdk { 
namespace lang { 
namespace reflect { 

::acdk::lang::dmi::ClazzSuperInfo _Field_super_AccessibleObject =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AccessibleObject::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Field_super_acdk__lang__dmi__MetaObject =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::lang::dmi::MetaObject::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Field_interfaces[] =
{
  &_Field_super_AccessibleObject,
  &_Field_super_acdk__lang__dmi__MetaObject,
  0
};

::acdk::lang::dmi::ClazzInfo* Field::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiNoDmiProxy, // clazz-flags
  0, //AttributesRes
  "Field", // name of class
  -1, // hashCode
  "acdk/lang/reflect", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Field_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Field::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Field(Field::clazzInfo());

::acdk::lang::RClass
Field::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Field::getCollectableFields(FieldReferences& fields)
{
  AccessibleObject::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang
} // namespace reflect


namespace acdk { 
namespace lang { 
namespace reflect { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _InvocationTargetException_super___acdk__lang__Exception =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Exception::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _InvocationTargetException_interfaces[] =
{
  &_InvocationTargetException_super___acdk__lang__Exception,
  0
};

::acdk::lang::dmi::ClazzInfo* InvocationTargetException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "InvocationTargetException", // name of class
  -1, // hashCode
  "acdk/lang/reflect", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _InvocationTargetException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    InvocationTargetException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_InvocationTargetException(InvocationTargetException::clazzInfo());

::acdk::lang::RClass
InvocationTargetException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
InvocationTargetException::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Exception)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang
} // namespace reflect


namespace acdk { 
namespace lang { 
namespace reflect { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo* _Member_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* Member::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "Member", // name of class
  -1, // hashCode
  "acdk/lang/reflect", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Member_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Member::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Member(Member::clazzInfo());

::acdk::lang::RClass
Member::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Member::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace lang
} // namespace reflect


namespace acdk { 
namespace lang { 
namespace reflect { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _Method_super_AccessibleObject =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AccessibleObject::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Method_super_Member =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Member::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Method_super_acdk__lang__dmi__MetaObject =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::lang::dmi::MetaObject::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Method_interfaces[] =
{
  &_Method_super_AccessibleObject,
  &_Method_super_Member,
  &_Method_super_acdk__lang__dmi__MetaObject,
  0
};

::acdk::lang::dmi::ClazzInfo* Method::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiNoDmiProxy, // clazz-flags
  0, //AttributesRes
  "Method", // name of class
  -1, // hashCode
  "acdk/lang/reflect", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Method_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Method::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Method(Method::clazzInfo());

::acdk::lang::RClass
Method::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Method::getCollectableFields(FieldReferences& fields)
{
  AccessibleObject::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang
} // namespace reflect


namespace acdk { 
namespace lang { 
namespace reflect { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _Parameter_super_AccessibleObject =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AccessibleObject::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Parameter_super_acdk__lang__dmi__MetaObject =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::lang::dmi::MetaObject::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Parameter_interfaces[] =
{
  &_Parameter_super_AccessibleObject,
  &_Parameter_super_acdk__lang__dmi__MetaObject,
  0
};

::acdk::lang::dmi::ClazzInfo* Parameter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiNoDmiProxy, // clazz-flags
  0, //AttributesRes
  "Parameter", // name of class
  -1, // hashCode
  "acdk/lang/reflect", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Parameter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Parameter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Parameter(Parameter::clazzInfo());

::acdk::lang::RClass
Parameter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Parameter::getCollectableFields(FieldReferences& fields)
{
  AccessibleObject::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang
} // namespace reflect


namespace acdk { 
namespace lang { 
namespace reflect { 

::acdk::lang::dmi::ClazzSuperInfo _Unit_super_AccessibleObject =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AccessibleObject::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Unit_super_acdk__lang__dmi__MetaObject =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::lang::dmi::MetaObject::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Unit_interfaces[] =
{
  &_Unit_super_AccessibleObject,
  &_Unit_super_acdk__lang__dmi__MetaObject,
  0
};

::acdk::lang::dmi::ClazzInfo* Unit::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiNoDmiProxy, // clazz-flags
  0, //AttributesRes
  "Unit", // name of class
  -1, // hashCode
  "acdk/lang/reflect", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Unit_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Unit::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Unit(Unit::clazzInfo());

::acdk::lang::RClass
Unit::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Unit::getCollectableFields(FieldReferences& fields)
{
  AccessibleObject::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang
} // namespace reflect

