// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../lang.h"
#include "../ArithmeticException.h"
#include "../ArrayIndexOutOfBoundsException.h"
#include "../BasicArray.h"
#include "../BasicArrayInl.h"
#include "../Boolean.h"
#include "../Byte.h"
#include "../ByteBuffer.h"
#include "../Character.h"
#include "../Class.h"
#include "../ClassCastException.h"
#include "../ClassLoader.h"
#include "../ClassNotFoundException.h"
#include "../Cloneable.h"
#include "../CloneNotSupportedException.h"
#include "../CmdLineOption.h"
#include "../CmdLineParseException.h"
#include "../CmdLineParser.h"
#include "../Comparable.h"
#include "../DmiException.h"
#include "../DmiTypeConversionException.h"
#include "../Double.h"
#include "../Error.h"
#include "../Exception.h"
#include "../ExceptionDeclarations.h"
#include "../ExtObject.h"
#include "../Float.h"
#include "../IllegalAccessException.h"
#include "../IllegalArgumentException.h"
#include "../IllegalMonitorStateException.h"
#include "../IllegalStateException.h"
#include "../IllegalThreadStateException.h"
#include "../IndexOutOfBoundsException.h"
#include "../InOutPreDeclaration.h"
#include "../InstantiationException.h"
#include "../Integer.h"
#include "../InterfaceBase.h"
#include "../InterruptedException.h"
#include "../lang.h"
#include "../lang_all.h"
#include "../Long.h"
#include "../Math.h"
#include "../NoSuchDmiElementException.h"
#include "../NoSuchElementException.h"
#include "../NoSuchFieldException.h"
#include "../NoSuchMethodException.h"
#include "../NullPointerException.h"
#include "../Number.h"
#include "../NumberFormatException.h"
#include "../Object.h"
#include "../ObjectArrayBase.h"
#include "../ObjectArrayBaseInl.h"
#include "../ObjectArrayImpl.h"
#include "../ObjectBase.h"
#include "../ObjectDebug.h"
#include "../ObjectImpl.h"
#include "../ObjectInline.h"
#include "../OutOfMemoryError.h"
#include "../Package.h"
#include "../ParamsMismatchException.h"
#include "../Process.h"
#include "../Runnable.h"
#include "../Runtime.h"
#include "../RuntimeException.h"
#include "../SharedLibrary.h"
#include "../Short.h"
#include "../StackFrame.h"
#include "../StackOverflowError.h"
#include "../String.h"
#include "../StringBuffer.h"
#include "../StringConcenator.h"
#include "../StringIndexOutOfBoundsException.h"
#include "../StringInline.h"
#include "../StringUtf8Utils.h"
#include "../System.h"
#include "../SystemError.h"
#include "../SystemInline.h"
#include "../SystemIntern.h"
#include "../Thread.h"
#include "../ThreadDeath.h"
#include "../ThreadGroup.h"
#include "../ThreadImpl.h"
#include "../ThreadLocal.h"
#include "../ThreadLocalImpl.h"
#include "../Throwable.h"
#include "../UnicodeCharacter.h"
#include "../UnsupportedOperationException.h"
#include "../Void.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>


struct acdk::lang::dmi::UnitInfo acdk_lang_unitInfo = {
  ::acdk::lang::dmi::MiUnitInfo, // flags
  0, //attributeRes
  "lang", // name of unit
  -1, // hashCode
  "acdk", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  0 // _firstChild first ClazzInfo of this unit
};

static ::acdk::lang::dmi::RegisterUnitInfo _register_acdk_lang_unitInfo(&acdk_lang_unitInfo);


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
ArithmeticException_create_array(int length)
{
  return new ObjectArrayImpl<RArithmeticException>(length);
}

//static
::acdk::lang::RObject
ArithmeticException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ArithmeticException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArithmeticException_method_ArithmeticException__LRArithmeticException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ArithmeticException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArithmeticException_method_ArithmeticException_INLRString__LRArithmeticException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ArithmeticException(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArithmeticException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ArithmeticException::GetClass();
    return methinf;
  }
};


void ThrowException_ArithmeticException(IN(::acdk::lang::RThrowable) ex)
{
  throw RArithmeticException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _ArithmeticException_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArithmeticException_methods_ArithmeticException__LRArithmeticException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ArithmeticException_methods_ArithmeticException__LRArithmeticException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArithmeticException_method_ArithmeticException__LRArithmeticException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ArithmeticException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ArithmeticException::clazzInfo(), // return type
  "_0_ArithmeticException", // alternative name of method
  -1, // altlabelHashCode
  ArithmeticException_methods_ArithmeticException__LRArithmeticException__args, // the arguments
  0, //arguments count
  ArithmeticException_methods_ArithmeticException__LRArithmeticException__exceptions, // the declared exceptions
  ArithmeticException_MetainfoWrapper::ArithmeticException_method_ArithmeticException__LRArithmeticException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArithmeticException_methods_ArithmeticException_INLRString__LRArithmeticException__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArithmeticException_methods_ArithmeticException_INLRString__LRArithmeticException__args[] = 
{
  &ArithmeticException_methods_ArithmeticException_INLRString__LRArithmeticException__arg_what,
  0
};

::acdk::lang::dmi::ClazzInfo* ArithmeticException_methods_ArithmeticException_INLRString__LRArithmeticException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArithmeticException_method_ArithmeticException_INLRString__LRArithmeticException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ArithmeticException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ArithmeticException::clazzInfo(), // return type
  "_1_ArithmeticException", // alternative name of method
  -1, // altlabelHashCode
  ArithmeticException_methods_ArithmeticException_INLRString__LRArithmeticException__args, // the arguments
  0, //arguments count
  ArithmeticException_methods_ArithmeticException_INLRString__LRArithmeticException__exceptions, // the declared exceptions
  ArithmeticException_MetainfoWrapper::ArithmeticException_method_ArithmeticException_INLRString__LRArithmeticException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArithmeticException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ArithmeticException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArithmeticException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ArithmeticException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ArithmeticException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ArithmeticException_MetainfoWrapper::ArithmeticException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ArithmeticException_methods[] = 
{
  &ArithmeticException_method_ArithmeticException__LRArithmeticException_,
  &ArithmeticException_method_ArithmeticException_INLRString__LRArithmeticException_,
  &ArithmeticException_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct ArithmeticException_MetaInfoInitializer
{  ArithmeticException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ArithmeticException::clazzInfo();
    ci->fields =  _ArithmeticException_fields;
    ci->methods =  _ArithmeticException_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ArithmeticException_MetaInfoInitializer ArithmeticException_MetaInfoInitializer_staticinstance__;


struct ArithmeticException_clazzInfo_ClazzAttributesResInitializer1
{
  ArithmeticException_clazzInfo_ClazzAttributesResInitializer1()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)ArithmeticException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_ArithmeticException));
  }
};

ArithmeticException_clazzInfo_ClazzAttributesResInitializer1 ArithmeticException_clazzInfo_ClazzAttributesResInitializer1_instance;



} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
ArithmeticOverflowException_create_array(int length)
{
  return new ObjectArrayImpl<RArithmeticOverflowException>(length);
}

//static
::acdk::lang::RObject
ArithmeticOverflowException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ArithmeticOverflowException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArithmeticOverflowException_method_ArithmeticOverflowException__LRArithmeticOverflowException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ArithmeticOverflowException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArithmeticOverflowException_method_ArithmeticOverflowException_INLRString__LRArithmeticOverflowException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ArithmeticOverflowException(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArithmeticOverflowException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ArithmeticOverflowException::GetClass();
    return methinf;
  }
};


void ThrowException_ArithmeticOverflowException(IN(::acdk::lang::RThrowable) ex)
{
  throw RArithmeticOverflowException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _ArithmeticOverflowException_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArithmeticOverflowException_methods_ArithmeticOverflowException__LRArithmeticOverflowException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ArithmeticOverflowException_methods_ArithmeticOverflowException__LRArithmeticOverflowException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArithmeticOverflowException_method_ArithmeticOverflowException__LRArithmeticOverflowException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ArithmeticOverflowException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ArithmeticOverflowException::clazzInfo(), // return type
  "_0_ArithmeticOverflowException", // alternative name of method
  -1, // altlabelHashCode
  ArithmeticOverflowException_methods_ArithmeticOverflowException__LRArithmeticOverflowException__args, // the arguments
  0, //arguments count
  ArithmeticOverflowException_methods_ArithmeticOverflowException__LRArithmeticOverflowException__exceptions, // the declared exceptions
  ArithmeticOverflowException_MetainfoWrapper::ArithmeticOverflowException_method_ArithmeticOverflowException__LRArithmeticOverflowException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArithmeticOverflowException_methods_ArithmeticOverflowException_INLRString__LRArithmeticOverflowException__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArithmeticOverflowException_methods_ArithmeticOverflowException_INLRString__LRArithmeticOverflowException__args[] = 
{
  &ArithmeticOverflowException_methods_ArithmeticOverflowException_INLRString__LRArithmeticOverflowException__arg_what,
  0
};

::acdk::lang::dmi::ClazzInfo* ArithmeticOverflowException_methods_ArithmeticOverflowException_INLRString__LRArithmeticOverflowException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArithmeticOverflowException_method_ArithmeticOverflowException_INLRString__LRArithmeticOverflowException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ArithmeticOverflowException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ArithmeticOverflowException::clazzInfo(), // return type
  "_1_ArithmeticOverflowException", // alternative name of method
  -1, // altlabelHashCode
  ArithmeticOverflowException_methods_ArithmeticOverflowException_INLRString__LRArithmeticOverflowException__args, // the arguments
  0, //arguments count
  ArithmeticOverflowException_methods_ArithmeticOverflowException_INLRString__LRArithmeticOverflowException__exceptions, // the declared exceptions
  ArithmeticOverflowException_MetainfoWrapper::ArithmeticOverflowException_method_ArithmeticOverflowException_INLRString__LRArithmeticOverflowException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArithmeticOverflowException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ArithmeticOverflowException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArithmeticOverflowException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ArithmeticOverflowException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ArithmeticOverflowException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ArithmeticOverflowException_MetainfoWrapper::ArithmeticOverflowException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ArithmeticOverflowException_methods[] = 
{
  &ArithmeticOverflowException_method_ArithmeticOverflowException__LRArithmeticOverflowException_,
  &ArithmeticOverflowException_method_ArithmeticOverflowException_INLRString__LRArithmeticOverflowException_,
  &ArithmeticOverflowException_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct ArithmeticOverflowException_MetaInfoInitializer
{  ArithmeticOverflowException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ArithmeticOverflowException::clazzInfo();
    ci->fields =  _ArithmeticOverflowException_fields;
    ci->methods =  _ArithmeticOverflowException_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ArithmeticOverflowException_MetaInfoInitializer ArithmeticOverflowException_MetaInfoInitializer_staticinstance__;


struct ArithmeticOverflowException_clazzInfo_ClazzAttributesResInitializer2
{
  ArithmeticOverflowException_clazzInfo_ClazzAttributesResInitializer2()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)ArithmeticOverflowException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_ArithmeticOverflowException));
  }
};

ArithmeticOverflowException_clazzInfo_ClazzAttributesResInitializer2 ArithmeticOverflowException_clazzInfo_ClazzAttributesResInitializer2_instance;



} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
ArrayIndexOutOfBoundsException_create_array(int length)
{
  return new ObjectArrayImpl<RArrayIndexOutOfBoundsException>(length);
}

//static
::acdk::lang::RObject
ArrayIndexOutOfBoundsException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ArrayIndexOutOfBoundsException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayIndexOutOfBoundsException_method_ArrayIndexOutOfBoundsException__LRArrayIndexOutOfBoundsException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ArrayIndexOutOfBoundsException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayIndexOutOfBoundsException_method_ArrayIndexOutOfBoundsException_LRString__LRArrayIndexOutOfBoundsException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ArrayIndexOutOfBoundsException(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayIndexOutOfBoundsException_method_ArrayIndexOutOfBoundsException_LRString_II_LRArrayIndexOutOfBoundsException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ArrayIndexOutOfBoundsException(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayIndexOutOfBoundsException_method_ArrayIndexOutOfBoundsException_I_LRArrayIndexOutOfBoundsException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ArrayIndexOutOfBoundsException(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayIndexOutOfBoundsException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ArrayIndexOutOfBoundsException::GetClass();
    return methinf;
  }
};


void ThrowException_ArrayIndexOutOfBoundsException(IN(::acdk::lang::RThrowable) ex)
{
  throw RArrayIndexOutOfBoundsException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _ArrayIndexOutOfBoundsException_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayIndexOutOfBoundsException_methods_ArrayIndexOutOfBoundsException__LRArrayIndexOutOfBoundsException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayIndexOutOfBoundsException_methods_ArrayIndexOutOfBoundsException__LRArrayIndexOutOfBoundsException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayIndexOutOfBoundsException_method_ArrayIndexOutOfBoundsException__LRArrayIndexOutOfBoundsException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ArrayIndexOutOfBoundsException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ArrayIndexOutOfBoundsException::clazzInfo(), // return type
  "_0_ArrayIndexOutOfBoundsException", // alternative name of method
  -1, // altlabelHashCode
  ArrayIndexOutOfBoundsException_methods_ArrayIndexOutOfBoundsException__LRArrayIndexOutOfBoundsException__args, // the arguments
  0, //arguments count
  ArrayIndexOutOfBoundsException_methods_ArrayIndexOutOfBoundsException__LRArrayIndexOutOfBoundsException__exceptions, // the declared exceptions
  ArrayIndexOutOfBoundsException_MetainfoWrapper::ArrayIndexOutOfBoundsException_method_ArrayIndexOutOfBoundsException__LRArrayIndexOutOfBoundsException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayIndexOutOfBoundsException_methods_ArrayIndexOutOfBoundsException_LRString__LRArrayIndexOutOfBoundsException__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayIndexOutOfBoundsException_methods_ArrayIndexOutOfBoundsException_LRString__LRArrayIndexOutOfBoundsException__args[] = 
{
  &ArrayIndexOutOfBoundsException_methods_ArrayIndexOutOfBoundsException_LRString__LRArrayIndexOutOfBoundsException__arg_what,
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayIndexOutOfBoundsException_methods_ArrayIndexOutOfBoundsException_LRString__LRArrayIndexOutOfBoundsException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayIndexOutOfBoundsException_method_ArrayIndexOutOfBoundsException_LRString__LRArrayIndexOutOfBoundsException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ArrayIndexOutOfBoundsException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ArrayIndexOutOfBoundsException::clazzInfo(), // return type
  "_1_ArrayIndexOutOfBoundsException", // alternative name of method
  -1, // altlabelHashCode
  ArrayIndexOutOfBoundsException_methods_ArrayIndexOutOfBoundsException_LRString__LRArrayIndexOutOfBoundsException__args, // the arguments
  0, //arguments count
  ArrayIndexOutOfBoundsException_methods_ArrayIndexOutOfBoundsException_LRString__LRArrayIndexOutOfBoundsException__exceptions, // the declared exceptions
  ArrayIndexOutOfBoundsException_MetainfoWrapper::ArrayIndexOutOfBoundsException_method_ArrayIndexOutOfBoundsException_LRString__LRArrayIndexOutOfBoundsException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayIndexOutOfBoundsException_methods_ArrayIndexOutOfBoundsException_LRString_II_LRArrayIndexOutOfBoundsException__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayIndexOutOfBoundsException_methods_ArrayIndexOutOfBoundsException_LRString_II_LRArrayIndexOutOfBoundsException__arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayIndexOutOfBoundsException_methods_ArrayIndexOutOfBoundsException_LRString_II_LRArrayIndexOutOfBoundsException__arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayIndexOutOfBoundsException_methods_ArrayIndexOutOfBoundsException_LRString_II_LRArrayIndexOutOfBoundsException__args[] = 
{
  &ArrayIndexOutOfBoundsException_methods_ArrayIndexOutOfBoundsException_LRString_II_LRArrayIndexOutOfBoundsException__arg_what,
  &ArrayIndexOutOfBoundsException_methods_ArrayIndexOutOfBoundsException_LRString_II_LRArrayIndexOutOfBoundsException__arg_idx,
  &ArrayIndexOutOfBoundsException_methods_ArrayIndexOutOfBoundsException_LRString_II_LRArrayIndexOutOfBoundsException__arg_length,
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayIndexOutOfBoundsException_methods_ArrayIndexOutOfBoundsException_LRString_II_LRArrayIndexOutOfBoundsException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayIndexOutOfBoundsException_method_ArrayIndexOutOfBoundsException_LRString_II_LRArrayIndexOutOfBoundsException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ArrayIndexOutOfBoundsException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ArrayIndexOutOfBoundsException::clazzInfo(), // return type
  "_2_ArrayIndexOutOfBoundsException", // alternative name of method
  -1, // altlabelHashCode
  ArrayIndexOutOfBoundsException_methods_ArrayIndexOutOfBoundsException_LRString_II_LRArrayIndexOutOfBoundsException__args, // the arguments
  0, //arguments count
  ArrayIndexOutOfBoundsException_methods_ArrayIndexOutOfBoundsException_LRString_II_LRArrayIndexOutOfBoundsException__exceptions, // the declared exceptions
  ArrayIndexOutOfBoundsException_MetainfoWrapper::ArrayIndexOutOfBoundsException_method_ArrayIndexOutOfBoundsException_LRString_II_LRArrayIndexOutOfBoundsException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayIndexOutOfBoundsException_methods_ArrayIndexOutOfBoundsException_I_LRArrayIndexOutOfBoundsException__arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayIndexOutOfBoundsException_methods_ArrayIndexOutOfBoundsException_I_LRArrayIndexOutOfBoundsException__args[] = 
{
  &ArrayIndexOutOfBoundsException_methods_ArrayIndexOutOfBoundsException_I_LRArrayIndexOutOfBoundsException__arg_idx,
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayIndexOutOfBoundsException_methods_ArrayIndexOutOfBoundsException_I_LRArrayIndexOutOfBoundsException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayIndexOutOfBoundsException_method_ArrayIndexOutOfBoundsException_I_LRArrayIndexOutOfBoundsException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ArrayIndexOutOfBoundsException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ArrayIndexOutOfBoundsException::clazzInfo(), // return type
  "_3_ArrayIndexOutOfBoundsException", // alternative name of method
  -1, // altlabelHashCode
  ArrayIndexOutOfBoundsException_methods_ArrayIndexOutOfBoundsException_I_LRArrayIndexOutOfBoundsException__args, // the arguments
  0, //arguments count
  ArrayIndexOutOfBoundsException_methods_ArrayIndexOutOfBoundsException_I_LRArrayIndexOutOfBoundsException__exceptions, // the declared exceptions
  ArrayIndexOutOfBoundsException_MetainfoWrapper::ArrayIndexOutOfBoundsException_method_ArrayIndexOutOfBoundsException_I_LRArrayIndexOutOfBoundsException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayIndexOutOfBoundsException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayIndexOutOfBoundsException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayIndexOutOfBoundsException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ArrayIndexOutOfBoundsException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ArrayIndexOutOfBoundsException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ArrayIndexOutOfBoundsException_MetainfoWrapper::ArrayIndexOutOfBoundsException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ArrayIndexOutOfBoundsException_methods[] = 
{
  &ArrayIndexOutOfBoundsException_method_ArrayIndexOutOfBoundsException__LRArrayIndexOutOfBoundsException_,
  &ArrayIndexOutOfBoundsException_method_ArrayIndexOutOfBoundsException_LRString__LRArrayIndexOutOfBoundsException_,
  &ArrayIndexOutOfBoundsException_method_ArrayIndexOutOfBoundsException_LRString_II_LRArrayIndexOutOfBoundsException_,
  &ArrayIndexOutOfBoundsException_method_ArrayIndexOutOfBoundsException_I_LRArrayIndexOutOfBoundsException_,
  &ArrayIndexOutOfBoundsException_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct ArrayIndexOutOfBoundsException_MetaInfoInitializer
{  ArrayIndexOutOfBoundsException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ArrayIndexOutOfBoundsException::clazzInfo();
    ci->fields =  _ArrayIndexOutOfBoundsException_fields;
    ci->methods =  _ArrayIndexOutOfBoundsException_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ArrayIndexOutOfBoundsException_MetaInfoInitializer ArrayIndexOutOfBoundsException_MetaInfoInitializer_staticinstance__;


struct ArrayIndexOutOfBoundsException_clazzInfo_ClazzAttributesResInitializer3
{
  ArrayIndexOutOfBoundsException_clazzInfo_ClazzAttributesResInitializer3()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)ArrayIndexOutOfBoundsException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_ArrayIndexOutOfBoundsException));
  }
};

ArrayIndexOutOfBoundsException_clazzInfo_ClazzAttributesResInitializer3 ArrayIndexOutOfBoundsException_clazzInfo_ClazzAttributesResInitializer3_instance;



} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
Boolean_create_array(int length)
{
  return new ObjectArrayImpl<RBoolean>(length);
}

//static
::acdk::lang::RObject
Boolean_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Boolean_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Boolean_method_Boolean__LRBoolean__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Boolean();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Boolean_method_Boolean_Z_LRBoolean__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Boolean(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Boolean_method_Boolean_INLRString__LRBoolean__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Boolean(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Boolean_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Boolean::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Boolean_method_booleanValue__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Boolean* This = dmi_cast<Boolean>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Boolean::booleanValue();
    else
      ret = This->booleanValue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Boolean_method_create_instance__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Boolean::create_instance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Boolean_method_equals_Z_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Boolean* This = dmi_cast<Boolean>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Boolean::equals(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Boolean_method_getBoolean_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Boolean::getBoolean(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Boolean_method_getFALSE__LRBoolean__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Boolean::getFALSE();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Boolean_method_getTRUE__LRBoolean__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Boolean::getTRUE();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Boolean_method_getTYPE__LRClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Boolean::getTYPE();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Boolean_method_valueOf_INLRString__LRBoolean__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Boolean::valueOf(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Boolean_method_valueOf_Z_LRBoolean__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Boolean::valueOf(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Boolean_fields__falseValue_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Boolean::_falseValue, flags);
    else
      Boolean::_falseValue = ::acdk::lang::dmi::castTo< RBoolean>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Boolean_fields__trueValue_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Boolean::_trueValue, flags);
    else
      Boolean::_trueValue = ::acdk::lang::dmi::castTo< RBoolean>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Boolean_fields_value_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Boolean* This = dmi_cast<Boolean>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->value, flags);
    else
      This->value = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo Boolean_fields__falseValue = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_falseValue", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBoolean::clazzInfo(),
  Boolean_MetainfoWrapper::Boolean_fields__falseValue_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Boolean_fields__trueValue = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_trueValue", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBoolean::clazzInfo(),
  Boolean_MetainfoWrapper::Boolean_fields__trueValue_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Boolean_fields_value = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "value", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  Boolean_MetainfoWrapper::Boolean_fields_value_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _Boolean_fields[] = 
{
  &Boolean_fields__falseValue,
  &Boolean_fields__trueValue,
  &Boolean_fields_value,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Boolean_methods_Boolean__LRBoolean__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Boolean_methods_Boolean__LRBoolean__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Boolean_method_Boolean__LRBoolean_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Boolean", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Boolean::clazzInfo(), // return type
  "_0_Boolean", // alternative name of method
  -1, // altlabelHashCode
  Boolean_methods_Boolean__LRBoolean__args, // the arguments
  0, //arguments count
  Boolean_methods_Boolean__LRBoolean__exceptions, // the declared exceptions
  Boolean_MetainfoWrapper::Boolean_method_Boolean__LRBoolean__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Boolean_methods_Boolean_Z_LRBoolean__arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Boolean_methods_Boolean_Z_LRBoolean__args[] = 
{
  &Boolean_methods_Boolean_Z_LRBoolean__arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* Boolean_methods_Boolean_Z_LRBoolean__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Boolean_method_Boolean_Z_LRBoolean_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Boolean", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Boolean::clazzInfo(), // return type
  "_4_Boolean", // alternative name of method
  -1, // altlabelHashCode
  Boolean_methods_Boolean_Z_LRBoolean__args, // the arguments
  0, //arguments count
  Boolean_methods_Boolean_Z_LRBoolean__exceptions, // the declared exceptions
  Boolean_MetainfoWrapper::Boolean_method_Boolean_Z_LRBoolean__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Boolean_methods_Boolean_INLRString__LRBoolean__arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Boolean_methods_Boolean_INLRString__LRBoolean__args[] = 
{
  &Boolean_methods_Boolean_INLRString__LRBoolean__arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* Boolean_methods_Boolean_INLRString__LRBoolean__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Boolean_method_Boolean_INLRString__LRBoolean_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Boolean", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Boolean::clazzInfo(), // return type
  "_5_Boolean", // alternative name of method
  -1, // altlabelHashCode
  Boolean_methods_Boolean_INLRString__LRBoolean__args, // the arguments
  0, //arguments count
  Boolean_methods_Boolean_INLRString__LRBoolean__exceptions, // the declared exceptions
  Boolean_MetainfoWrapper::Boolean_method_Boolean_INLRString__LRBoolean__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Boolean_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Boolean_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Boolean_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_c_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Boolean_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Boolean_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Boolean_MetainfoWrapper::Boolean_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Boolean_methods_booleanValue__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Boolean_methods_booleanValue__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Boolean_method_booleanValue__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "booleanValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_booleanValue", // alternative name of method
  -1, // altlabelHashCode
  Boolean_methods_booleanValue__Z_args, // the arguments
  0, //arguments count
  Boolean_methods_booleanValue__Z_exceptions, // the declared exceptions
  Boolean_MetainfoWrapper::Boolean_method_booleanValue__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Boolean_methods_create_instance__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Boolean_methods_create_instance__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Boolean_method_create_instance__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create_instance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_1_create_instance", // alternative name of method
  -1, // altlabelHashCode
  Boolean_methods_create_instance__LRObject__args, // the arguments
  0, //arguments count
  Boolean_methods_create_instance__LRObject__exceptions, // the declared exceptions
  Boolean_MetainfoWrapper::Boolean_method_create_instance__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Boolean_methods_equals_Z_Z_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Boolean_methods_equals_Z_Z_args[] = 
{
  &Boolean_methods_equals_Z_Z_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* Boolean_methods_equals_Z_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Boolean_method_equals_Z_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_equals", // alternative name of method
  -1, // altlabelHashCode
  Boolean_methods_equals_Z_Z_args, // the arguments
  0, //arguments count
  Boolean_methods_equals_Z_Z_exceptions, // the declared exceptions
  Boolean_MetainfoWrapper::Boolean_method_equals_Z_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Boolean_methods_getBoolean_INLRString__Z_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Boolean_methods_getBoolean_INLRString__Z_args[] = 
{
  &Boolean_methods_getBoolean_INLRString__Z_arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* Boolean_methods_getBoolean_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Boolean_method_getBoolean_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBoolean", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_8_getBoolean", // alternative name of method
  -1, // altlabelHashCode
  Boolean_methods_getBoolean_INLRString__Z_args, // the arguments
  0, //arguments count
  Boolean_methods_getBoolean_INLRString__Z_exceptions, // the declared exceptions
  Boolean_MetainfoWrapper::Boolean_method_getBoolean_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Boolean_methods_getFALSE__LRBoolean__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Boolean_methods_getFALSE__LRBoolean__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Boolean_method_getFALSE__LRBoolean_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFALSE", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBoolean::clazzInfo(), // return type
  "_2_getFALSE", // alternative name of method
  -1, // altlabelHashCode
  Boolean_methods_getFALSE__LRBoolean__args, // the arguments
  0, //arguments count
  Boolean_methods_getFALSE__LRBoolean__exceptions, // the declared exceptions
  Boolean_MetainfoWrapper::Boolean_method_getFALSE__LRBoolean__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Boolean_methods_getTRUE__LRBoolean__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Boolean_methods_getTRUE__LRBoolean__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Boolean_method_getTRUE__LRBoolean_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTRUE", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBoolean::clazzInfo(), // return type
  "_3_getTRUE", // alternative name of method
  -1, // altlabelHashCode
  Boolean_methods_getTRUE__LRBoolean__args, // the arguments
  0, //arguments count
  Boolean_methods_getTRUE__LRBoolean__exceptions, // the declared exceptions
  Boolean_MetainfoWrapper::Boolean_method_getTRUE__LRBoolean__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Boolean_methods_getTYPE__LRClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Boolean_methods_getTYPE__LRClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Boolean_method_getTYPE__LRClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTYPE", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(), // return type
  "_b_getTYPE", // alternative name of method
  -1, // altlabelHashCode
  Boolean_methods_getTYPE__LRClass__args, // the arguments
  0, //arguments count
  Boolean_methods_getTYPE__LRClass__exceptions, // the declared exceptions
  Boolean_MetainfoWrapper::Boolean_method_getTYPE__LRClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Boolean_methods_valueOf_INLRString__LRBoolean__arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Boolean_methods_valueOf_INLRString__LRBoolean__args[] = 
{
  &Boolean_methods_valueOf_INLRString__LRBoolean__arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* Boolean_methods_valueOf_INLRString__LRBoolean__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Boolean_method_valueOf_INLRString__LRBoolean_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "valueOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBoolean::clazzInfo(), // return type
  "_9_valueOf", // alternative name of method
  -1, // altlabelHashCode
  Boolean_methods_valueOf_INLRString__LRBoolean__args, // the arguments
  0, //arguments count
  Boolean_methods_valueOf_INLRString__LRBoolean__exceptions, // the declared exceptions
  Boolean_MetainfoWrapper::Boolean_method_valueOf_INLRString__LRBoolean__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Boolean_methods_valueOf_Z_LRBoolean__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Boolean_methods_valueOf_Z_LRBoolean__args[] = 
{
  &Boolean_methods_valueOf_Z_LRBoolean__arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* Boolean_methods_valueOf_Z_LRBoolean__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Boolean_method_valueOf_Z_LRBoolean_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "valueOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBoolean::clazzInfo(), // return type
  "_a_valueOf", // alternative name of method
  -1, // altlabelHashCode
  Boolean_methods_valueOf_Z_LRBoolean__args, // the arguments
  0, //arguments count
  Boolean_methods_valueOf_Z_LRBoolean__exceptions, // the declared exceptions
  Boolean_MetainfoWrapper::Boolean_method_valueOf_Z_LRBoolean__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Boolean_methods[] = 
{
  &Boolean_method_Boolean__LRBoolean_,
  &Boolean_method_Boolean_Z_LRBoolean_,
  &Boolean_method_Boolean_INLRString__LRBoolean_,
  &Boolean_method_GetClass__L_acdk_lang_RClass_,
  &Boolean_method_booleanValue__Z,
  &Boolean_method_create_instance__LRObject_,
  &Boolean_method_equals_Z_Z,
  &Boolean_method_getBoolean_INLRString__Z,
  &Boolean_method_getFALSE__LRBoolean_,
  &Boolean_method_getTRUE__LRBoolean_,
  &Boolean_method_getTYPE__LRClass_,
  &Boolean_method_valueOf_INLRString__LRBoolean_,
  &Boolean_method_valueOf_Z_LRBoolean_,
  0
};


struct Boolean_MetaInfoInitializer
{  Boolean_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Boolean::clazzInfo();
    ci->fields =  _Boolean_fields;
    ci->methods =  _Boolean_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Boolean_MetaInfoInitializer Boolean_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
Byte_create_array(int length)
{
  return new ObjectArrayImpl<RByte>(length);
}

//static
::acdk::lang::RObject
Byte_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Byte_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Byte_method_Byte_B_LRByte__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Byte(::acdk::lang::dmi::castTo< byte>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Byte_method_Byte_INLRString__LRByte__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Byte(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Byte_method_Byte__LRByte__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Byte();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Byte_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Byte::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Byte_method_compareTo_INLRByte__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Byte* This = dmi_cast<Byte>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Byte::compareTo(::acdk::lang::dmi::castTo< RByte>(args[0], dc));
    else
      ret = This->compareTo(::acdk::lang::dmi::castTo< RByte>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Byte_method_compareTo_B_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Byte* This = dmi_cast<Byte>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Byte::compareTo(::acdk::lang::dmi::castTo< byte>(args[0], dc));
    else
      ret = This->compareTo(::acdk::lang::dmi::castTo< byte>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Byte_method_create_instance__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Byte::create_instance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Byte_method_decode_INLRString__LRByte__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Byte::decode(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Byte_method_equals_B_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Byte* This = dmi_cast<Byte>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Byte::equals(::acdk::lang::dmi::castTo< byte>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< byte>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Byte_method_getTYPE__LRClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Byte::getTYPE();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Byte_method_parseByte_INLRString_I_C_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Byte::parseByte(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Byte_method_parseByte_INLRString__C_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Byte::parseByte(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Byte_method_valueOf_INLRString_I_LRByte__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Byte::valueOf(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Byte_method_valueOf_INLRString__LRByte__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Byte::valueOf(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Byte_fields_MAX_VALUE_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Byte::MAX_VALUE, flags);
    else
      Byte::MAX_VALUE = ::acdk::lang::dmi::castTo< byte>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Byte_fields_MIN_VALUE_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Byte::MIN_VALUE, flags);
    else
      Byte::MIN_VALUE = ::acdk::lang::dmi::castTo< byte>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Byte_fields_value_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Byte* This = dmi_cast<Byte>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->value, flags);
    else
      This->value = ::acdk::lang::dmi::castTo< byte>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo Byte_fields_MAX_VALUE = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "MAX_VALUE", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz(),
  Byte_MetainfoWrapper::Byte_fields_MAX_VALUE_accessor, // read/write access to this fields
  (void*)&Byte::MAX_VALUE // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Byte_fields_MIN_VALUE = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "MIN_VALUE", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz(),
  Byte_MetainfoWrapper::Byte_fields_MIN_VALUE_accessor, // read/write access to this fields
  (void*)&Byte::MIN_VALUE // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Byte_fields_value = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "value", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz(),
  Byte_MetainfoWrapper::Byte_fields_value_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _Byte_fields[] = 
{
  &Byte_fields_MAX_VALUE,
  &Byte_fields_MIN_VALUE,
  &Byte_fields_value,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo Byte_methods_Byte_B_LRByte__arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Byte_methods_Byte_B_LRByte__args[] = 
{
  &Byte_methods_Byte_B_LRByte__arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* Byte_methods_Byte_B_LRByte__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Byte_method_Byte_B_LRByte_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Byte", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Byte::clazzInfo(), // return type
  "_2_Byte", // alternative name of method
  -1, // altlabelHashCode
  Byte_methods_Byte_B_LRByte__args, // the arguments
  0, //arguments count
  Byte_methods_Byte_B_LRByte__exceptions, // the declared exceptions
  Byte_MetainfoWrapper::Byte_method_Byte_B_LRByte__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Byte_methods_Byte_INLRString__LRByte__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Byte_methods_Byte_INLRString__LRByte__args[] = 
{
  &Byte_methods_Byte_INLRString__LRByte__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* Byte_methods_Byte_INLRString__LRByte__exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Byte_Byte_INLRString__LRByte__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Byte_method_Byte_INLRString__LRByte_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Byte", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Byte::clazzInfo(), // return type
  "_3_Byte", // alternative name of method
  -1, // altlabelHashCode
  Byte_methods_Byte_INLRString__LRByte__args, // the arguments
  0, //arguments count
  Byte_methods_Byte_INLRString__LRByte__exceptions, // the declared exceptions
  Byte_MetainfoWrapper::Byte_method_Byte_INLRString__LRByte__dispatch, // invoke this method
  Byte_Byte_INLRString__LRByte__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Byte_methods_Byte__LRByte__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Byte_methods_Byte__LRByte__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Byte_method_Byte__LRByte_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Byte", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Byte::clazzInfo(), // return type
  "_1_Byte", // alternative name of method
  -1, // altlabelHashCode
  Byte_methods_Byte__LRByte__args, // the arguments
  0, //arguments count
  Byte_methods_Byte__LRByte__exceptions, // the declared exceptions
  Byte_MetainfoWrapper::Byte_method_Byte__LRByte__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Byte_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Byte_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Byte_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_d_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Byte_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Byte_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Byte_MetainfoWrapper::Byte_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Byte_methods_compareTo_INLRByte__I_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RByte::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Byte_methods_compareTo_INLRByte__I_args[] = 
{
  &Byte_methods_compareTo_INLRByte__I_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* Byte_methods_compareTo_INLRByte__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Byte_method_compareTo_INLRByte__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "compareTo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_4_compareTo", // alternative name of method
  -1, // altlabelHashCode
  Byte_methods_compareTo_INLRByte__I_args, // the arguments
  0, //arguments count
  Byte_methods_compareTo_INLRByte__I_exceptions, // the declared exceptions
  Byte_MetainfoWrapper::Byte_method_compareTo_INLRByte__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Byte_methods_compareTo_B_I_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Byte_methods_compareTo_B_I_args[] = 
{
  &Byte_methods_compareTo_B_I_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* Byte_methods_compareTo_B_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Byte_method_compareTo_B_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "compareTo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_compareTo", // alternative name of method
  -1, // altlabelHashCode
  Byte_methods_compareTo_B_I_args, // the arguments
  0, //arguments count
  Byte_methods_compareTo_B_I_exceptions, // the declared exceptions
  Byte_MetainfoWrapper::Byte_method_compareTo_B_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Byte_methods_create_instance__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Byte_methods_create_instance__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Byte_method_create_instance__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create_instance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_0_create_instance", // alternative name of method
  -1, // altlabelHashCode
  Byte_methods_create_instance__LRObject__args, // the arguments
  0, //arguments count
  Byte_methods_create_instance__LRObject__exceptions, // the declared exceptions
  Byte_MetainfoWrapper::Byte_method_create_instance__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Byte_methods_decode_INLRString__LRByte__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Byte_methods_decode_INLRString__LRByte__args[] = 
{
  &Byte_methods_decode_INLRString__LRByte__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* Byte_methods_decode_INLRString__LRByte__exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Byte_decode_INLRString__LRByte__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Byte_method_decode_INLRString__LRByte_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "decode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RByte::clazzInfo(), // return type
  "_7_decode", // alternative name of method
  -1, // altlabelHashCode
  Byte_methods_decode_INLRString__LRByte__args, // the arguments
  0, //arguments count
  Byte_methods_decode_INLRString__LRByte__exceptions, // the declared exceptions
  Byte_MetainfoWrapper::Byte_method_decode_INLRString__LRByte__dispatch, // invoke this method
  Byte_decode_INLRString__LRByte__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Byte_methods_equals_B_Z_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Byte_methods_equals_B_Z_args[] = 
{
  &Byte_methods_equals_B_Z_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* Byte_methods_equals_B_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Byte_method_equals_B_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_equals", // alternative name of method
  -1, // altlabelHashCode
  Byte_methods_equals_B_Z_args, // the arguments
  0, //arguments count
  Byte_methods_equals_B_Z_exceptions, // the declared exceptions
  Byte_MetainfoWrapper::Byte_method_equals_B_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Byte_methods_getTYPE__LRClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Byte_methods_getTYPE__LRClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Byte_method_getTYPE__LRClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTYPE", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(), // return type
  "_c_getTYPE", // alternative name of method
  -1, // altlabelHashCode
  Byte_methods_getTYPE__LRClass__args, // the arguments
  0, //arguments count
  Byte_methods_getTYPE__LRClass__exceptions, // the declared exceptions
  Byte_MetainfoWrapper::Byte_method_getTYPE__LRClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Byte_methods_parseByte_INLRString_I_C_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Byte_methods_parseByte_INLRString_I_C_arg_radix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "radix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Byte_methods_parseByte_INLRString_I_C_args[] = 
{
  &Byte_methods_parseByte_INLRString_I_C_arg_s,
  &Byte_methods_parseByte_INLRString_I_C_arg_radix,
  0
};

::acdk::lang::dmi::ClazzInfo* Byte_methods_parseByte_INLRString_I_C_exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Byte_parseByte_INLRString_I_C_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Byte_method_parseByte_INLRString_I_C = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parseByte", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz(), // return type
  "_8_parseByte", // alternative name of method
  -1, // altlabelHashCode
  Byte_methods_parseByte_INLRString_I_C_args, // the arguments
  0, //arguments count
  Byte_methods_parseByte_INLRString_I_C_exceptions, // the declared exceptions
  Byte_MetainfoWrapper::Byte_method_parseByte_INLRString_I_C_dispatch, // invoke this method
  Byte_parseByte_INLRString_I_C_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Byte_methods_parseByte_INLRString__C_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Byte_methods_parseByte_INLRString__C_args[] = 
{
  &Byte_methods_parseByte_INLRString__C_arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* Byte_methods_parseByte_INLRString__C_exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Byte_parseByte_INLRString__C_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Byte_method_parseByte_INLRString__C = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "parseByte", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz(), // return type
  "_9_parseByte", // alternative name of method
  -1, // altlabelHashCode
  Byte_methods_parseByte_INLRString__C_args, // the arguments
  0, //arguments count
  Byte_methods_parseByte_INLRString__C_exceptions, // the declared exceptions
  Byte_MetainfoWrapper::Byte_method_parseByte_INLRString__C_dispatch, // invoke this method
  Byte_parseByte_INLRString__C_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Byte_methods_valueOf_INLRString_I_LRByte__arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Byte_methods_valueOf_INLRString_I_LRByte__arg_radix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "radix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Byte_methods_valueOf_INLRString_I_LRByte__args[] = 
{
  &Byte_methods_valueOf_INLRString_I_LRByte__arg_s,
  &Byte_methods_valueOf_INLRString_I_LRByte__arg_radix,
  0
};

::acdk::lang::dmi::ClazzInfo* Byte_methods_valueOf_INLRString_I_LRByte__exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Byte_valueOf_INLRString_I_LRByte__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Byte_method_valueOf_INLRString_I_LRByte_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "valueOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RByte::clazzInfo(), // return type
  "_a_valueOf", // alternative name of method
  -1, // altlabelHashCode
  Byte_methods_valueOf_INLRString_I_LRByte__args, // the arguments
  0, //arguments count
  Byte_methods_valueOf_INLRString_I_LRByte__exceptions, // the declared exceptions
  Byte_MetainfoWrapper::Byte_method_valueOf_INLRString_I_LRByte__dispatch, // invoke this method
  Byte_valueOf_INLRString_I_LRByte__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Byte_methods_valueOf_INLRString__LRByte__arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Byte_methods_valueOf_INLRString__LRByte__args[] = 
{
  &Byte_methods_valueOf_INLRString__LRByte__arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* Byte_methods_valueOf_INLRString__LRByte__exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Byte_valueOf_INLRString__LRByte__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Byte_method_valueOf_INLRString__LRByte_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "valueOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RByte::clazzInfo(), // return type
  "_b_valueOf", // alternative name of method
  -1, // altlabelHashCode
  Byte_methods_valueOf_INLRString__LRByte__args, // the arguments
  0, //arguments count
  Byte_methods_valueOf_INLRString__LRByte__exceptions, // the declared exceptions
  Byte_MetainfoWrapper::Byte_method_valueOf_INLRString__LRByte__dispatch, // invoke this method
  Byte_valueOf_INLRString__LRByte__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Byte_methods[] = 
{
  &Byte_method_Byte_B_LRByte_,
  &Byte_method_Byte_INLRString__LRByte_,
  &Byte_method_Byte__LRByte_,
  &Byte_method_GetClass__L_acdk_lang_RClass_,
  &Byte_method_compareTo_INLRByte__I,
  &Byte_method_compareTo_B_I,
  &Byte_method_create_instance__LRObject_,
  &Byte_method_decode_INLRString__LRByte_,
  &Byte_method_equals_B_Z,
  &Byte_method_getTYPE__LRClass_,
  &Byte_method_parseByte_INLRString_I_C,
  &Byte_method_parseByte_INLRString__C,
  &Byte_method_valueOf_INLRString_I_LRByte_,
  &Byte_method_valueOf_INLRString__LRByte_,
  0
};


struct Byte_MetaInfoInitializer
{  Byte_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Byte::clazzInfo();
    ci->fields =  _Byte_fields;
    ci->methods =  _Byte_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Byte_MetaInfoInitializer Byte_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
ByteBuffer_create_array(int length)
{
  return new ObjectArrayImpl<RByteBuffer>(length);
}

//static
::acdk::lang::RObject
ByteBuffer_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ByteBuffer_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteBuffer_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ByteBuffer::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteBuffer_method_clone__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteBuffer* This = dmi_cast<ByteBuffer>(This_);
    ret = (::acdk::lang::RObject)This->clone();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteBuffer_method_length__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteBuffer* This = dmi_cast<ByteBuffer>(This_);
  ret = This->length();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteBuffer_method_supportNativeIterator__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteBuffer* This = dmi_cast<ByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ByteBuffer::supportNativeIterator();
    else
      ret = This->supportNativeIterator();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ByteBuffer_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteBuffer_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBuffer_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteBuffer_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ByteBuffer_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ByteBuffer_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ByteBuffer_MetainfoWrapper::ByteBuffer_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteBuffer_methods_clone__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBuffer_methods_clone__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteBuffer_method_clone__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_2_clone", // alternative name of method
  -1, // altlabelHashCode
  ByteBuffer_methods_clone__LRObject__args, // the arguments
  0, //arguments count
  ByteBuffer_methods_clone__LRObject__exceptions, // the declared exceptions
  ByteBuffer_MetainfoWrapper::ByteBuffer_method_clone__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteBuffer_methods_length__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBuffer_methods_length__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteBuffer_method_length__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "length", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_0_length", // alternative name of method
  -1, // altlabelHashCode
  ByteBuffer_methods_length__I_args, // the arguments
  0, //arguments count
  ByteBuffer_methods_length__I_exceptions, // the declared exceptions
  ByteBuffer_MetainfoWrapper::ByteBuffer_method_length__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteBuffer_methods_supportNativeIterator__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBuffer_methods_supportNativeIterator__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteBuffer_method_supportNativeIterator__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportNativeIterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_supportNativeIterator", // alternative name of method
  -1, // altlabelHashCode
  ByteBuffer_methods_supportNativeIterator__Z_args, // the arguments
  0, //arguments count
  ByteBuffer_methods_supportNativeIterator__Z_exceptions, // the declared exceptions
  ByteBuffer_MetainfoWrapper::ByteBuffer_method_supportNativeIterator__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ByteBuffer_methods[] = 
{
  &ByteBuffer_method_GetClass__L_acdk_lang_RClass_,
  &ByteBuffer_method_clone__LRObject_,
  &ByteBuffer_method_length__I,
  &ByteBuffer_method_supportNativeIterator__Z,
  0
};


struct ByteBuffer_MetaInfoInitializer
{  ByteBuffer_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ByteBuffer::clazzInfo();
    ci->fields =  _ByteBuffer_fields;
    ci->methods =  _ByteBuffer_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ByteBuffer_MetaInfoInitializer ByteBuffer_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
ReadByteBuffer_create_array(int length)
{
  return new ObjectArrayImpl<RReadByteBuffer>(length);
}

//static
::acdk::lang::RObject
ReadByteBuffer_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ReadByteBuffer_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ReadByteBuffer_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ReadByteBuffer::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ReadByteBuffer_method_createReadSlice_II_LRReadByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ReadByteBuffer* This = dmi_cast<ReadByteBuffer>(This_);
    ret = (::acdk::lang::RObject)This->createReadSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ReadByteBuffer_method_createReadSlice__LRReadByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ReadByteBuffer* This = dmi_cast<ReadByteBuffer>(This_);
    ret = (::acdk::lang::RObject)This->createReadSlice();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ReadByteBuffer_method_createReadSlice_I_LRReadByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ReadByteBuffer* This = dmi_cast<ReadByteBuffer>(This_);
    ret = (::acdk::lang::RObject)This->createReadSlice(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ReadByteBuffer_method_createReadSlice_III_LRReadByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ReadByteBuffer* This = dmi_cast<ReadByteBuffer>(This_);
    ret = (::acdk::lang::RObject)This->createReadSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), (SliceType)::acdk::lang::dmi::castTo<int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ReadByteBuffer_method_get_I_B_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ReadByteBuffer* This = dmi_cast<ReadByteBuffer>(This_);
  ret = This->get(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ReadByteBuffer_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ReadByteBuffer_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ReadByteBuffer_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ReadByteBuffer_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ReadByteBuffer_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ReadByteBuffer_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ReadByteBuffer_MetainfoWrapper::ReadByteBuffer_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ReadByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ReadByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__arg_end = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "end", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ReadByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__args[] = 
{
  &ReadByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__arg_start,
  &ReadByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__arg_end,
  0
};

::acdk::lang::dmi::ClazzInfo* ReadByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ReadByteBuffer_method_createReadSlice_II_LRReadByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract,// class flags, like static, Constructor
  0, //AttributesRes
  "createReadSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadByteBuffer::clazzInfo(), // return type
  "_4_createReadSlice", // alternative name of method
  -1, // altlabelHashCode
  ReadByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__args, // the arguments
  0, //arguments count
  ReadByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__exceptions, // the declared exceptions
  ReadByteBuffer_MetainfoWrapper::ReadByteBuffer_method_createReadSlice_II_LRReadByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ReadByteBuffer_methods_createReadSlice__LRReadByteBuffer__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ReadByteBuffer_methods_createReadSlice__LRReadByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ReadByteBuffer_method_createReadSlice__LRReadByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract,// class flags, like static, Constructor
  0, //AttributesRes
  "createReadSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadByteBuffer::clazzInfo(), // return type
  "_2_createReadSlice", // alternative name of method
  -1, // altlabelHashCode
  ReadByteBuffer_methods_createReadSlice__LRReadByteBuffer__args, // the arguments
  0, //arguments count
  ReadByteBuffer_methods_createReadSlice__LRReadByteBuffer__exceptions, // the declared exceptions
  ReadByteBuffer_MetainfoWrapper::ReadByteBuffer_method_createReadSlice__LRReadByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ReadByteBuffer_methods_createReadSlice_I_LRReadByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ReadByteBuffer_methods_createReadSlice_I_LRReadByteBuffer__args[] = 
{
  &ReadByteBuffer_methods_createReadSlice_I_LRReadByteBuffer__arg_start,
  0
};

::acdk::lang::dmi::ClazzInfo* ReadByteBuffer_methods_createReadSlice_I_LRReadByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ReadByteBuffer_method_createReadSlice_I_LRReadByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract,// class flags, like static, Constructor
  0, //AttributesRes
  "createReadSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadByteBuffer::clazzInfo(), // return type
  "_3_createReadSlice", // alternative name of method
  -1, // altlabelHashCode
  ReadByteBuffer_methods_createReadSlice_I_LRReadByteBuffer__args, // the arguments
  0, //arguments count
  ReadByteBuffer_methods_createReadSlice_I_LRReadByteBuffer__exceptions, // the declared exceptions
  ReadByteBuffer_MetainfoWrapper::ReadByteBuffer_method_createReadSlice_I_LRReadByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ReadByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ReadByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__arg_end = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "end", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ReadByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__arg_sliceType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "sliceType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ReadByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__args[] = 
{
  &ReadByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__arg_start,
  &ReadByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__arg_end,
  &ReadByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__arg_sliceType,
  0
};

::acdk::lang::dmi::ClazzInfo* ReadByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ReadByteBuffer_method_createReadSlice_III_LRReadByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createReadSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadByteBuffer::clazzInfo(), // return type
  "_1_createReadSlice", // alternative name of method
  -1, // altlabelHashCode
  ReadByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__args, // the arguments
  0, //arguments count
  ReadByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__exceptions, // the declared exceptions
  ReadByteBuffer_MetainfoWrapper::ReadByteBuffer_method_createReadSlice_III_LRReadByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ReadByteBuffer_methods_get_I_B_arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ReadByteBuffer_methods_get_I_B_args[] = 
{
  &ReadByteBuffer_methods_get_I_B_arg_idx,
  0
};

::acdk::lang::dmi::ClazzInfo* ReadByteBuffer_methods_get_I_B_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ReadByteBuffer_method_get_I_B = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "get", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz(), // return type
  "_0_get", // alternative name of method
  -1, // altlabelHashCode
  ReadByteBuffer_methods_get_I_B_args, // the arguments
  0, //arguments count
  ReadByteBuffer_methods_get_I_B_exceptions, // the declared exceptions
  ReadByteBuffer_MetainfoWrapper::ReadByteBuffer_method_get_I_B_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ReadByteBuffer_methods[] = 
{
  &ReadByteBuffer_method_GetClass__L_acdk_lang_RClass_,
  &ReadByteBuffer_method_createReadSlice_II_LRReadByteBuffer_,
  &ReadByteBuffer_method_createReadSlice__LRReadByteBuffer_,
  &ReadByteBuffer_method_createReadSlice_I_LRReadByteBuffer_,
  &ReadByteBuffer_method_createReadSlice_III_LRReadByteBuffer_,
  &ReadByteBuffer_method_get_I_B,
  0
};


struct ReadByteBuffer_MetaInfoInitializer
{  ReadByteBuffer_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ReadByteBuffer::clazzInfo();
    ci->fields =  _ReadByteBuffer_fields;
    ci->methods =  _ReadByteBuffer_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ReadByteBuffer_MetaInfoInitializer ReadByteBuffer_MetaInfoInitializer_staticinstance__;


struct ReadByteBuffer_clazzInfo_ClazzAttributesResInitializer4
{
  ReadByteBuffer_clazzInfo_ClazzAttributesResInitializer4()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&ReadByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__arg_sliceType, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)SliceTypeMetaInf::GetEnumInfo()));
  }
};

ReadByteBuffer_clazzInfo_ClazzAttributesResInitializer4 ReadByteBuffer_clazzInfo_ClazzAttributesResInitializer4_instance;



} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
WriteByteBuffer_create_array(int length)
{
  return new ObjectArrayImpl<RWriteByteBuffer>(length);
}

//static
::acdk::lang::RObject
WriteByteBuffer_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class WriteByteBuffer_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  WriteByteBuffer_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)WriteByteBuffer::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  WriteByteBuffer_method_createWriteSlice_II_LRWriteByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    WriteByteBuffer* This = dmi_cast<WriteByteBuffer>(This_);
    ret = (::acdk::lang::RObject)This->createWriteSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  WriteByteBuffer_method_createWriteSlice__LRWriteByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    WriteByteBuffer* This = dmi_cast<WriteByteBuffer>(This_);
    ret = (::acdk::lang::RObject)This->createWriteSlice();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  WriteByteBuffer_method_createWriteSlice_I_LRWriteByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    WriteByteBuffer* This = dmi_cast<WriteByteBuffer>(This_);
    ret = (::acdk::lang::RObject)This->createWriteSlice(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  WriteByteBuffer_method_createWriteSlice_III_LRWriteByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    WriteByteBuffer* This = dmi_cast<WriteByteBuffer>(This_);
    ret = (::acdk::lang::RObject)This->createWriteSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), (SliceType)::acdk::lang::dmi::castTo<int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  WriteByteBuffer_method_set_IB_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    WriteByteBuffer* This = dmi_cast<WriteByteBuffer>(This_);
    This->set(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< byte>(args[1], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _WriteByteBuffer_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* WriteByteBuffer_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* WriteByteBuffer_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo WriteByteBuffer_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  WriteByteBuffer_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  WriteByteBuffer_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  WriteByteBuffer_MetainfoWrapper::WriteByteBuffer_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo WriteByteBuffer_methods_createWriteSlice_II_LRWriteByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo WriteByteBuffer_methods_createWriteSlice_II_LRWriteByteBuffer__arg_end = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "end", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* WriteByteBuffer_methods_createWriteSlice_II_LRWriteByteBuffer__args[] = 
{
  &WriteByteBuffer_methods_createWriteSlice_II_LRWriteByteBuffer__arg_start,
  &WriteByteBuffer_methods_createWriteSlice_II_LRWriteByteBuffer__arg_end,
  0
};

::acdk::lang::dmi::ClazzInfo* WriteByteBuffer_methods_createWriteSlice_II_LRWriteByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo WriteByteBuffer_method_createWriteSlice_II_LRWriteByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract,// class flags, like static, Constructor
  0, //AttributesRes
  "createWriteSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriteByteBuffer::clazzInfo(), // return type
  "_4_createWriteSlice", // alternative name of method
  -1, // altlabelHashCode
  WriteByteBuffer_methods_createWriteSlice_II_LRWriteByteBuffer__args, // the arguments
  0, //arguments count
  WriteByteBuffer_methods_createWriteSlice_II_LRWriteByteBuffer__exceptions, // the declared exceptions
  WriteByteBuffer_MetainfoWrapper::WriteByteBuffer_method_createWriteSlice_II_LRWriteByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* WriteByteBuffer_methods_createWriteSlice__LRWriteByteBuffer__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* WriteByteBuffer_methods_createWriteSlice__LRWriteByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo WriteByteBuffer_method_createWriteSlice__LRWriteByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract,// class flags, like static, Constructor
  0, //AttributesRes
  "createWriteSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriteByteBuffer::clazzInfo(), // return type
  "_2_createWriteSlice", // alternative name of method
  -1, // altlabelHashCode
  WriteByteBuffer_methods_createWriteSlice__LRWriteByteBuffer__args, // the arguments
  0, //arguments count
  WriteByteBuffer_methods_createWriteSlice__LRWriteByteBuffer__exceptions, // the declared exceptions
  WriteByteBuffer_MetainfoWrapper::WriteByteBuffer_method_createWriteSlice__LRWriteByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo WriteByteBuffer_methods_createWriteSlice_I_LRWriteByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* WriteByteBuffer_methods_createWriteSlice_I_LRWriteByteBuffer__args[] = 
{
  &WriteByteBuffer_methods_createWriteSlice_I_LRWriteByteBuffer__arg_start,
  0
};

::acdk::lang::dmi::ClazzInfo* WriteByteBuffer_methods_createWriteSlice_I_LRWriteByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo WriteByteBuffer_method_createWriteSlice_I_LRWriteByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract,// class flags, like static, Constructor
  0, //AttributesRes
  "createWriteSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriteByteBuffer::clazzInfo(), // return type
  "_3_createWriteSlice", // alternative name of method
  -1, // altlabelHashCode
  WriteByteBuffer_methods_createWriteSlice_I_LRWriteByteBuffer__args, // the arguments
  0, //arguments count
  WriteByteBuffer_methods_createWriteSlice_I_LRWriteByteBuffer__exceptions, // the declared exceptions
  WriteByteBuffer_MetainfoWrapper::WriteByteBuffer_method_createWriteSlice_I_LRWriteByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo WriteByteBuffer_methods_createWriteSlice_III_LRWriteByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo WriteByteBuffer_methods_createWriteSlice_III_LRWriteByteBuffer__arg_end = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "end", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo WriteByteBuffer_methods_createWriteSlice_III_LRWriteByteBuffer__arg_sliceType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "sliceType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* WriteByteBuffer_methods_createWriteSlice_III_LRWriteByteBuffer__args[] = 
{
  &WriteByteBuffer_methods_createWriteSlice_III_LRWriteByteBuffer__arg_start,
  &WriteByteBuffer_methods_createWriteSlice_III_LRWriteByteBuffer__arg_end,
  &WriteByteBuffer_methods_createWriteSlice_III_LRWriteByteBuffer__arg_sliceType,
  0
};

::acdk::lang::dmi::ClazzInfo* WriteByteBuffer_methods_createWriteSlice_III_LRWriteByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo WriteByteBuffer_method_createWriteSlice_III_LRWriteByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createWriteSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriteByteBuffer::clazzInfo(), // return type
  "_1_createWriteSlice", // alternative name of method
  -1, // altlabelHashCode
  WriteByteBuffer_methods_createWriteSlice_III_LRWriteByteBuffer__args, // the arguments
  0, //arguments count
  WriteByteBuffer_methods_createWriteSlice_III_LRWriteByteBuffer__exceptions, // the declared exceptions
  WriteByteBuffer_MetainfoWrapper::WriteByteBuffer_method_createWriteSlice_III_LRWriteByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo WriteByteBuffer_methods_set_IB_V_arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo WriteByteBuffer_methods_set_IB_V_arg_t = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "t", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* WriteByteBuffer_methods_set_IB_V_args[] = 
{
  &WriteByteBuffer_methods_set_IB_V_arg_idx,
  &WriteByteBuffer_methods_set_IB_V_arg_t,
  0
};

::acdk::lang::dmi::ClazzInfo* WriteByteBuffer_methods_set_IB_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo WriteByteBuffer_method_set_IB_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "set", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0_set", // alternative name of method
  -1, // altlabelHashCode
  WriteByteBuffer_methods_set_IB_V_args, // the arguments
  0, //arguments count
  WriteByteBuffer_methods_set_IB_V_exceptions, // the declared exceptions
  WriteByteBuffer_MetainfoWrapper::WriteByteBuffer_method_set_IB_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _WriteByteBuffer_methods[] = 
{
  &WriteByteBuffer_method_GetClass__L_acdk_lang_RClass_,
  &WriteByteBuffer_method_createWriteSlice_II_LRWriteByteBuffer_,
  &WriteByteBuffer_method_createWriteSlice__LRWriteByteBuffer_,
  &WriteByteBuffer_method_createWriteSlice_I_LRWriteByteBuffer_,
  &WriteByteBuffer_method_createWriteSlice_III_LRWriteByteBuffer_,
  &WriteByteBuffer_method_set_IB_V,
  0
};


struct WriteByteBuffer_MetaInfoInitializer
{  WriteByteBuffer_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = WriteByteBuffer::clazzInfo();
    ci->fields =  _WriteByteBuffer_fields;
    ci->methods =  _WriteByteBuffer_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
WriteByteBuffer_MetaInfoInitializer WriteByteBuffer_MetaInfoInitializer_staticinstance__;


struct WriteByteBuffer_clazzInfo_ClazzAttributesResInitializer5
{
  WriteByteBuffer_clazzInfo_ClazzAttributesResInitializer5()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&WriteByteBuffer_methods_createWriteSlice_III_LRWriteByteBuffer__arg_sliceType, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)SliceTypeMetaInf::GetEnumInfo()));
  }
};

WriteByteBuffer_clazzInfo_ClazzAttributesResInitializer5 WriteByteBuffer_clazzInfo_ClazzAttributesResInitializer5_instance;



} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
ReadWriteByteBuffer_create_array(int length)
{
  return new ObjectArrayImpl<RReadWriteByteBuffer>(length);
}

//static
::acdk::lang::RObject
ReadWriteByteBuffer_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ReadWriteByteBuffer_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ReadWriteByteBuffer_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ReadWriteByteBuffer::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ReadWriteByteBuffer_method_createReadWriteSlice_III_LRReadWriteByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ReadWriteByteBuffer* This = dmi_cast<ReadWriteByteBuffer>(This_);
    ret = (::acdk::lang::RObject)This->createReadWriteSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), (SliceType)::acdk::lang::dmi::castTo<int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ReadWriteByteBuffer_method_createReadWriteSlice__LRReadWriteByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ReadWriteByteBuffer* This = dmi_cast<ReadWriteByteBuffer>(This_);
    ret = (::acdk::lang::RObject)This->createReadWriteSlice();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ReadWriteByteBuffer_method_createReadWriteSlice_I_LRReadWriteByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ReadWriteByteBuffer* This = dmi_cast<ReadWriteByteBuffer>(This_);
    ret = (::acdk::lang::RObject)This->createReadWriteSlice(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ReadWriteByteBuffer_method_createReadWriteSlice_II_LRReadWriteByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ReadWriteByteBuffer* This = dmi_cast<ReadWriteByteBuffer>(This_);
    ret = (::acdk::lang::RObject)This->createReadWriteSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ReadWriteByteBuffer_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ReadWriteByteBuffer_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ReadWriteByteBuffer_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ReadWriteByteBuffer_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ReadWriteByteBuffer_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ReadWriteByteBuffer_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ReadWriteByteBuffer_MetainfoWrapper::ReadWriteByteBuffer_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ReadWriteByteBuffer_methods_createReadWriteSlice_III_LRReadWriteByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ReadWriteByteBuffer_methods_createReadWriteSlice_III_LRReadWriteByteBuffer__arg_end = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "end", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ReadWriteByteBuffer_methods_createReadWriteSlice_III_LRReadWriteByteBuffer__arg_sliceType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "sliceType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ReadWriteByteBuffer_methods_createReadWriteSlice_III_LRReadWriteByteBuffer__args[] = 
{
  &ReadWriteByteBuffer_methods_createReadWriteSlice_III_LRReadWriteByteBuffer__arg_start,
  &ReadWriteByteBuffer_methods_createReadWriteSlice_III_LRReadWriteByteBuffer__arg_end,
  &ReadWriteByteBuffer_methods_createReadWriteSlice_III_LRReadWriteByteBuffer__arg_sliceType,
  0
};

::acdk::lang::dmi::ClazzInfo* ReadWriteByteBuffer_methods_createReadWriteSlice_III_LRReadWriteByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ReadWriteByteBuffer_method_createReadWriteSlice_III_LRReadWriteByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createReadWriteSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadWriteByteBuffer::clazzInfo(), // return type
  "_0_createReadWriteSlice", // alternative name of method
  -1, // altlabelHashCode
  ReadWriteByteBuffer_methods_createReadWriteSlice_III_LRReadWriteByteBuffer__args, // the arguments
  0, //arguments count
  ReadWriteByteBuffer_methods_createReadWriteSlice_III_LRReadWriteByteBuffer__exceptions, // the declared exceptions
  ReadWriteByteBuffer_MetainfoWrapper::ReadWriteByteBuffer_method_createReadWriteSlice_III_LRReadWriteByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ReadWriteByteBuffer_methods_createReadWriteSlice__LRReadWriteByteBuffer__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ReadWriteByteBuffer_methods_createReadWriteSlice__LRReadWriteByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ReadWriteByteBuffer_method_createReadWriteSlice__LRReadWriteByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract,// class flags, like static, Constructor
  0, //AttributesRes
  "createReadWriteSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadWriteByteBuffer::clazzInfo(), // return type
  "_1_createReadWriteSlice", // alternative name of method
  -1, // altlabelHashCode
  ReadWriteByteBuffer_methods_createReadWriteSlice__LRReadWriteByteBuffer__args, // the arguments
  0, //arguments count
  ReadWriteByteBuffer_methods_createReadWriteSlice__LRReadWriteByteBuffer__exceptions, // the declared exceptions
  ReadWriteByteBuffer_MetainfoWrapper::ReadWriteByteBuffer_method_createReadWriteSlice__LRReadWriteByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ReadWriteByteBuffer_methods_createReadWriteSlice_I_LRReadWriteByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ReadWriteByteBuffer_methods_createReadWriteSlice_I_LRReadWriteByteBuffer__args[] = 
{
  &ReadWriteByteBuffer_methods_createReadWriteSlice_I_LRReadWriteByteBuffer__arg_start,
  0
};

::acdk::lang::dmi::ClazzInfo* ReadWriteByteBuffer_methods_createReadWriteSlice_I_LRReadWriteByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ReadWriteByteBuffer_method_createReadWriteSlice_I_LRReadWriteByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract,// class flags, like static, Constructor
  0, //AttributesRes
  "createReadWriteSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadWriteByteBuffer::clazzInfo(), // return type
  "_2_createReadWriteSlice", // alternative name of method
  -1, // altlabelHashCode
  ReadWriteByteBuffer_methods_createReadWriteSlice_I_LRReadWriteByteBuffer__args, // the arguments
  0, //arguments count
  ReadWriteByteBuffer_methods_createReadWriteSlice_I_LRReadWriteByteBuffer__exceptions, // the declared exceptions
  ReadWriteByteBuffer_MetainfoWrapper::ReadWriteByteBuffer_method_createReadWriteSlice_I_LRReadWriteByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ReadWriteByteBuffer_methods_createReadWriteSlice_II_LRReadWriteByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ReadWriteByteBuffer_methods_createReadWriteSlice_II_LRReadWriteByteBuffer__arg_end = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "end", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ReadWriteByteBuffer_methods_createReadWriteSlice_II_LRReadWriteByteBuffer__args[] = 
{
  &ReadWriteByteBuffer_methods_createReadWriteSlice_II_LRReadWriteByteBuffer__arg_start,
  &ReadWriteByteBuffer_methods_createReadWriteSlice_II_LRReadWriteByteBuffer__arg_end,
  0
};

::acdk::lang::dmi::ClazzInfo* ReadWriteByteBuffer_methods_createReadWriteSlice_II_LRReadWriteByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ReadWriteByteBuffer_method_createReadWriteSlice_II_LRReadWriteByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract,// class flags, like static, Constructor
  0, //AttributesRes
  "createReadWriteSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadWriteByteBuffer::clazzInfo(), // return type
  "_3_createReadWriteSlice", // alternative name of method
  -1, // altlabelHashCode
  ReadWriteByteBuffer_methods_createReadWriteSlice_II_LRReadWriteByteBuffer__args, // the arguments
  0, //arguments count
  ReadWriteByteBuffer_methods_createReadWriteSlice_II_LRReadWriteByteBuffer__exceptions, // the declared exceptions
  ReadWriteByteBuffer_MetainfoWrapper::ReadWriteByteBuffer_method_createReadWriteSlice_II_LRReadWriteByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ReadWriteByteBuffer_methods[] = 
{
  &ReadWriteByteBuffer_method_GetClass__L_acdk_lang_RClass_,
  &ReadWriteByteBuffer_method_createReadWriteSlice_III_LRReadWriteByteBuffer_,
  &ReadWriteByteBuffer_method_createReadWriteSlice__LRReadWriteByteBuffer_,
  &ReadWriteByteBuffer_method_createReadWriteSlice_I_LRReadWriteByteBuffer_,
  &ReadWriteByteBuffer_method_createReadWriteSlice_II_LRReadWriteByteBuffer_,
  0
};


struct ReadWriteByteBuffer_MetaInfoInitializer
{  ReadWriteByteBuffer_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ReadWriteByteBuffer::clazzInfo();
    ci->fields =  _ReadWriteByteBuffer_fields;
    ci->methods =  _ReadWriteByteBuffer_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ReadWriteByteBuffer_MetaInfoInitializer ReadWriteByteBuffer_MetaInfoInitializer_staticinstance__;


struct ReadWriteByteBuffer_clazzInfo_ClazzAttributesResInitializer6
{
  ReadWriteByteBuffer_clazzInfo_ClazzAttributesResInitializer6()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&ReadWriteByteBuffer_methods_createReadWriteSlice_III_LRReadWriteByteBuffer__arg_sliceType, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)SliceTypeMetaInf::GetEnumInfo()));
  }
};

ReadWriteByteBuffer_clazzInfo_ClazzAttributesResInitializer6 ReadWriteByteBuffer_clazzInfo_ClazzAttributesResInitializer6_instance;



} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
FlexByteBuffer_create_array(int length)
{
  return new ObjectArrayImpl<RFlexByteBuffer>(length);
}

//static
::acdk::lang::RObject
FlexByteBuffer_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class FlexByteBuffer_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FlexByteBuffer_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)FlexByteBuffer::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FlexByteBuffer_method_append_B_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FlexByteBuffer* This = dmi_cast<FlexByteBuffer>(This_);
    This->append(::acdk::lang::dmi::castTo< byte>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FlexByteBuffer_method_deleteAt_I_B_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FlexByteBuffer* This = dmi_cast<FlexByteBuffer>(This_);
  ret = This->deleteAt(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FlexByteBuffer_method_ensureCapacity_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FlexByteBuffer* This = dmi_cast<FlexByteBuffer>(This_);
    This->ensureCapacity(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FlexByteBuffer_method_insertAt_IB_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FlexByteBuffer* This = dmi_cast<FlexByteBuffer>(This_);
    This->insertAt(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< byte>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FlexByteBuffer_method_limit__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FlexByteBuffer* This = dmi_cast<FlexByteBuffer>(This_);
  ret = This->limit();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FlexByteBuffer_method_pop__B_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FlexByteBuffer* This = dmi_cast<FlexByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FlexByteBuffer::pop();
    else
      ret = This->pop();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FlexByteBuffer_method_push_B_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FlexByteBuffer* This = dmi_cast<FlexByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FlexByteBuffer::push(::acdk::lang::dmi::castTo< byte>(args[0], dc));
    else
        This->push(::acdk::lang::dmi::castTo< byte>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FlexByteBuffer_method_resize_IB_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FlexByteBuffer* This = dmi_cast<FlexByteBuffer>(This_);
    This->resize(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< byte>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FlexByteBuffer_method_resize_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FlexByteBuffer* This = dmi_cast<FlexByteBuffer>(This_);
    This->resize(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _FlexByteBuffer_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* FlexByteBuffer_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FlexByteBuffer_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FlexByteBuffer_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_9_GetClass", // alternative name of method
  -1, // altlabelHashCode
  FlexByteBuffer_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  FlexByteBuffer_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  FlexByteBuffer_MetainfoWrapper::FlexByteBuffer_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FlexByteBuffer_methods_append_B_V_arg_t = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "t", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FlexByteBuffer_methods_append_B_V_args[] = 
{
  &FlexByteBuffer_methods_append_B_V_arg_t,
  0
};

::acdk::lang::dmi::ClazzInfo* FlexByteBuffer_methods_append_B_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FlexByteBuffer_method_append_B_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "append", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0_append", // alternative name of method
  -1, // altlabelHashCode
  FlexByteBuffer_methods_append_B_V_args, // the arguments
  0, //arguments count
  FlexByteBuffer_methods_append_B_V_exceptions, // the declared exceptions
  FlexByteBuffer_MetainfoWrapper::FlexByteBuffer_method_append_B_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FlexByteBuffer_methods_deleteAt_I_B_arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FlexByteBuffer_methods_deleteAt_I_B_args[] = 
{
  &FlexByteBuffer_methods_deleteAt_I_B_arg_idx,
  0
};

::acdk::lang::dmi::ClazzInfo* FlexByteBuffer_methods_deleteAt_I_B_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FlexByteBuffer_method_deleteAt_I_B = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deleteAt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz(), // return type
  "_1_deleteAt", // alternative name of method
  -1, // altlabelHashCode
  FlexByteBuffer_methods_deleteAt_I_B_args, // the arguments
  0, //arguments count
  FlexByteBuffer_methods_deleteAt_I_B_exceptions, // the declared exceptions
  FlexByteBuffer_MetainfoWrapper::FlexByteBuffer_method_deleteAt_I_B_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FlexByteBuffer_methods_ensureCapacity_I_V_arg_cap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "cap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FlexByteBuffer_methods_ensureCapacity_I_V_args[] = 
{
  &FlexByteBuffer_methods_ensureCapacity_I_V_arg_cap,
  0
};

::acdk::lang::dmi::ClazzInfo* FlexByteBuffer_methods_ensureCapacity_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FlexByteBuffer_method_ensureCapacity_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ensureCapacity", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_ensureCapacity", // alternative name of method
  -1, // altlabelHashCode
  FlexByteBuffer_methods_ensureCapacity_I_V_args, // the arguments
  0, //arguments count
  FlexByteBuffer_methods_ensureCapacity_I_V_exceptions, // the declared exceptions
  FlexByteBuffer_MetainfoWrapper::FlexByteBuffer_method_ensureCapacity_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FlexByteBuffer_methods_insertAt_IB_V_arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FlexByteBuffer_methods_insertAt_IB_V_arg_t = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "t", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FlexByteBuffer_methods_insertAt_IB_V_args[] = 
{
  &FlexByteBuffer_methods_insertAt_IB_V_arg_idx,
  &FlexByteBuffer_methods_insertAt_IB_V_arg_t,
  0
};

::acdk::lang::dmi::ClazzInfo* FlexByteBuffer_methods_insertAt_IB_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FlexByteBuffer_method_insertAt_IB_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insertAt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_insertAt", // alternative name of method
  -1, // altlabelHashCode
  FlexByteBuffer_methods_insertAt_IB_V_args, // the arguments
  0, //arguments count
  FlexByteBuffer_methods_insertAt_IB_V_exceptions, // the declared exceptions
  FlexByteBuffer_MetainfoWrapper::FlexByteBuffer_method_insertAt_IB_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FlexByteBuffer_methods_limit__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FlexByteBuffer_methods_limit__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FlexByteBuffer_method_limit__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "limit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3_limit", // alternative name of method
  -1, // altlabelHashCode
  FlexByteBuffer_methods_limit__I_args, // the arguments
  0, //arguments count
  FlexByteBuffer_methods_limit__I_exceptions, // the declared exceptions
  FlexByteBuffer_MetainfoWrapper::FlexByteBuffer_method_limit__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FlexByteBuffer_methods_pop__B_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FlexByteBuffer_methods_pop__B_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FlexByteBuffer_method_pop__B = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "pop", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz(), // return type
  "_8_pop", // alternative name of method
  -1, // altlabelHashCode
  FlexByteBuffer_methods_pop__B_args, // the arguments
  0, //arguments count
  FlexByteBuffer_methods_pop__B_exceptions, // the declared exceptions
  FlexByteBuffer_MetainfoWrapper::FlexByteBuffer_method_pop__B_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FlexByteBuffer_methods_push_B_V_arg_t = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "t", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FlexByteBuffer_methods_push_B_V_args[] = 
{
  &FlexByteBuffer_methods_push_B_V_arg_t,
  0
};

::acdk::lang::dmi::ClazzInfo* FlexByteBuffer_methods_push_B_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FlexByteBuffer_method_push_B_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "push", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_push", // alternative name of method
  -1, // altlabelHashCode
  FlexByteBuffer_methods_push_B_V_args, // the arguments
  0, //arguments count
  FlexByteBuffer_methods_push_B_V_exceptions, // the declared exceptions
  FlexByteBuffer_MetainfoWrapper::FlexByteBuffer_method_push_B_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FlexByteBuffer_methods_resize_IB_V_arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FlexByteBuffer_methods_resize_IB_V_arg_fill = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "fill", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FlexByteBuffer_methods_resize_IB_V_args[] = 
{
  &FlexByteBuffer_methods_resize_IB_V_arg_size,
  &FlexByteBuffer_methods_resize_IB_V_arg_fill,
  0
};

::acdk::lang::dmi::ClazzInfo* FlexByteBuffer_methods_resize_IB_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FlexByteBuffer_method_resize_IB_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "resize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_resize", // alternative name of method
  -1, // altlabelHashCode
  FlexByteBuffer_methods_resize_IB_V_args, // the arguments
  0, //arguments count
  FlexByteBuffer_methods_resize_IB_V_exceptions, // the declared exceptions
  FlexByteBuffer_MetainfoWrapper::FlexByteBuffer_method_resize_IB_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FlexByteBuffer_methods_resize_I_V_arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FlexByteBuffer_methods_resize_I_V_args[] = 
{
  &FlexByteBuffer_methods_resize_I_V_arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* FlexByteBuffer_methods_resize_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FlexByteBuffer_method_resize_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract,// class flags, like static, Constructor
  0, //AttributesRes
  "resize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_resize", // alternative name of method
  -1, // altlabelHashCode
  FlexByteBuffer_methods_resize_I_V_args, // the arguments
  0, //arguments count
  FlexByteBuffer_methods_resize_I_V_exceptions, // the declared exceptions
  FlexByteBuffer_MetainfoWrapper::FlexByteBuffer_method_resize_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _FlexByteBuffer_methods[] = 
{
  &FlexByteBuffer_method_GetClass__L_acdk_lang_RClass_,
  &FlexByteBuffer_method_append_B_V,
  &FlexByteBuffer_method_deleteAt_I_B,
  &FlexByteBuffer_method_ensureCapacity_I_V,
  &FlexByteBuffer_method_insertAt_IB_V,
  &FlexByteBuffer_method_limit__I,
  &FlexByteBuffer_method_pop__B,
  &FlexByteBuffer_method_push_B_V,
  &FlexByteBuffer_method_resize_IB_V,
  &FlexByteBuffer_method_resize_I_V,
  0
};


struct FlexByteBuffer_MetaInfoInitializer
{  FlexByteBuffer_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = FlexByteBuffer::clazzInfo();
    ci->fields =  _FlexByteBuffer_fields;
    ci->methods =  _FlexByteBuffer_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
FlexByteBuffer_MetaInfoInitializer FlexByteBuffer_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
SlicedReadByteBuffer_create_array(int length)
{
  return new ObjectArrayImpl<RSlicedReadByteBuffer>(length);
}

//static
::acdk::lang::RObject
SlicedReadByteBuffer_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SlicedReadByteBuffer_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SlicedReadByteBuffer_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SlicedReadByteBuffer::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SlicedReadByteBuffer_method_SlicedReadByteBuffer_INLRReadByteBuffer_II_LRSlicedReadByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SlicedReadByteBuffer(::acdk::lang::dmi::castTo< RReadByteBuffer>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SlicedReadByteBuffer_method_SlicedReadByteBuffer_INLRReadByteBuffer__LRSlicedReadByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SlicedReadByteBuffer(::acdk::lang::dmi::castTo< RReadByteBuffer>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SlicedReadByteBuffer_method_SlicedReadByteBuffer_INLRReadByteBuffer_I_LRSlicedReadByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SlicedReadByteBuffer(::acdk::lang::dmi::castTo< RReadByteBuffer>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SlicedReadByteBuffer_method_clone__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SlicedReadByteBuffer* This = dmi_cast<SlicedReadByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SlicedReadByteBuffer::clone();
    else
        ret = (::acdk::lang::RObject)This->clone();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SlicedReadByteBuffer_method_createReadSlice_III_LRReadByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SlicedReadByteBuffer* This = dmi_cast<SlicedReadByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SlicedReadByteBuffer::createReadSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), (SliceType)::acdk::lang::dmi::castTo<int>(args[2], dc));
    else
        ret = (::acdk::lang::RObject)This->createReadSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), (SliceType)::acdk::lang::dmi::castTo<int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SlicedReadByteBuffer_method_createReadSlice__LRReadByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SlicedReadByteBuffer* This = dmi_cast<SlicedReadByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SlicedReadByteBuffer::createReadSlice();
    else
        ret = (::acdk::lang::RObject)This->createReadSlice();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SlicedReadByteBuffer_method_createReadSlice_I_LRReadByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SlicedReadByteBuffer* This = dmi_cast<SlicedReadByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SlicedReadByteBuffer::createReadSlice(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->createReadSlice(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SlicedReadByteBuffer_method_createReadSlice_II_LRReadByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SlicedReadByteBuffer* This = dmi_cast<SlicedReadByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SlicedReadByteBuffer::createReadSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->createReadSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SlicedReadByteBuffer_method_get_I_B_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SlicedReadByteBuffer* This = dmi_cast<SlicedReadByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SlicedReadByteBuffer::get(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->get(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SlicedReadByteBuffer_method_length__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SlicedReadByteBuffer* This = dmi_cast<SlicedReadByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SlicedReadByteBuffer::length();
    else
      ret = This->length();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SlicedReadByteBuffer_method_supportNativeIterator__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SlicedReadByteBuffer* This = dmi_cast<SlicedReadByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SlicedReadByteBuffer::supportNativeIterator();
    else
      ret = This->supportNativeIterator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SlicedReadByteBuffer_fields__end_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SlicedReadByteBuffer* This = dmi_cast<SlicedReadByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_end, flags);
    else
      This->_end = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SlicedReadByteBuffer_fields__parent_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SlicedReadByteBuffer* This = dmi_cast<SlicedReadByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_parent, flags);
    else
      This->_parent = ::acdk::lang::dmi::castTo< RReadByteBuffer>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SlicedReadByteBuffer_fields__start_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SlicedReadByteBuffer* This = dmi_cast<SlicedReadByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_start, flags);
    else
      This->_start = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo SlicedReadByteBuffer_fields__end = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_end", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  SlicedReadByteBuffer_MetainfoWrapper::SlicedReadByteBuffer_fields__end_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SlicedReadByteBuffer_fields__parent = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_parent", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadByteBuffer::clazzInfo(),
  SlicedReadByteBuffer_MetainfoWrapper::SlicedReadByteBuffer_fields__parent_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SlicedReadByteBuffer_fields__start = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_start", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  SlicedReadByteBuffer_MetainfoWrapper::SlicedReadByteBuffer_fields__start_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _SlicedReadByteBuffer_fields[] = 
{
  &SlicedReadByteBuffer_fields__end,
  &SlicedReadByteBuffer_fields__parent,
  &SlicedReadByteBuffer_fields__start,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SlicedReadByteBuffer_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SlicedReadByteBuffer_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SlicedReadByteBuffer_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_b_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SlicedReadByteBuffer_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SlicedReadByteBuffer_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SlicedReadByteBuffer_MetainfoWrapper::SlicedReadByteBuffer_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SlicedReadByteBuffer_methods_SlicedReadByteBuffer_INLRReadByteBuffer_II_LRSlicedReadByteBuffer__arg_buf = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buf", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadByteBuffer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SlicedReadByteBuffer_methods_SlicedReadByteBuffer_INLRReadByteBuffer_II_LRSlicedReadByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SlicedReadByteBuffer_methods_SlicedReadByteBuffer_INLRReadByteBuffer_II_LRSlicedReadByteBuffer__arg_end = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "end", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SlicedReadByteBuffer_methods_SlicedReadByteBuffer_INLRReadByteBuffer_II_LRSlicedReadByteBuffer__args[] = 
{
  &SlicedReadByteBuffer_methods_SlicedReadByteBuffer_INLRReadByteBuffer_II_LRSlicedReadByteBuffer__arg_buf,
  &SlicedReadByteBuffer_methods_SlicedReadByteBuffer_INLRReadByteBuffer_II_LRSlicedReadByteBuffer__arg_start,
  &SlicedReadByteBuffer_methods_SlicedReadByteBuffer_INLRReadByteBuffer_II_LRSlicedReadByteBuffer__arg_end,
  0
};

::acdk::lang::dmi::ClazzInfo* SlicedReadByteBuffer_methods_SlicedReadByteBuffer_INLRReadByteBuffer_II_LRSlicedReadByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SlicedReadByteBuffer_method_SlicedReadByteBuffer_INLRReadByteBuffer_II_LRSlicedReadByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SlicedReadByteBuffer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SlicedReadByteBuffer::clazzInfo(), // return type
  "_0_SlicedReadByteBuffer", // alternative name of method
  -1, // altlabelHashCode
  SlicedReadByteBuffer_methods_SlicedReadByteBuffer_INLRReadByteBuffer_II_LRSlicedReadByteBuffer__args, // the arguments
  0, //arguments count
  SlicedReadByteBuffer_methods_SlicedReadByteBuffer_INLRReadByteBuffer_II_LRSlicedReadByteBuffer__exceptions, // the declared exceptions
  SlicedReadByteBuffer_MetainfoWrapper::SlicedReadByteBuffer_method_SlicedReadByteBuffer_INLRReadByteBuffer_II_LRSlicedReadByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SlicedReadByteBuffer_methods_SlicedReadByteBuffer_INLRReadByteBuffer__LRSlicedReadByteBuffer__arg_buf = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buf", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadByteBuffer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SlicedReadByteBuffer_methods_SlicedReadByteBuffer_INLRReadByteBuffer__LRSlicedReadByteBuffer__args[] = 
{
  &SlicedReadByteBuffer_methods_SlicedReadByteBuffer_INLRReadByteBuffer__LRSlicedReadByteBuffer__arg_buf,
  0
};

::acdk::lang::dmi::ClazzInfo* SlicedReadByteBuffer_methods_SlicedReadByteBuffer_INLRReadByteBuffer__LRSlicedReadByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SlicedReadByteBuffer_method_SlicedReadByteBuffer_INLRReadByteBuffer__LRSlicedReadByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "SlicedReadByteBuffer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SlicedReadByteBuffer::clazzInfo(), // return type
  "_1_SlicedReadByteBuffer", // alternative name of method
  -1, // altlabelHashCode
  SlicedReadByteBuffer_methods_SlicedReadByteBuffer_INLRReadByteBuffer__LRSlicedReadByteBuffer__args, // the arguments
  0, //arguments count
  SlicedReadByteBuffer_methods_SlicedReadByteBuffer_INLRReadByteBuffer__LRSlicedReadByteBuffer__exceptions, // the declared exceptions
  SlicedReadByteBuffer_MetainfoWrapper::SlicedReadByteBuffer_method_SlicedReadByteBuffer_INLRReadByteBuffer__LRSlicedReadByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SlicedReadByteBuffer_methods_SlicedReadByteBuffer_INLRReadByteBuffer_I_LRSlicedReadByteBuffer__arg_buf = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buf", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadByteBuffer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SlicedReadByteBuffer_methods_SlicedReadByteBuffer_INLRReadByteBuffer_I_LRSlicedReadByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SlicedReadByteBuffer_methods_SlicedReadByteBuffer_INLRReadByteBuffer_I_LRSlicedReadByteBuffer__args[] = 
{
  &SlicedReadByteBuffer_methods_SlicedReadByteBuffer_INLRReadByteBuffer_I_LRSlicedReadByteBuffer__arg_buf,
  &SlicedReadByteBuffer_methods_SlicedReadByteBuffer_INLRReadByteBuffer_I_LRSlicedReadByteBuffer__arg_start,
  0
};

::acdk::lang::dmi::ClazzInfo* SlicedReadByteBuffer_methods_SlicedReadByteBuffer_INLRReadByteBuffer_I_LRSlicedReadByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SlicedReadByteBuffer_method_SlicedReadByteBuffer_INLRReadByteBuffer_I_LRSlicedReadByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "SlicedReadByteBuffer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SlicedReadByteBuffer::clazzInfo(), // return type
  "_2_SlicedReadByteBuffer", // alternative name of method
  -1, // altlabelHashCode
  SlicedReadByteBuffer_methods_SlicedReadByteBuffer_INLRReadByteBuffer_I_LRSlicedReadByteBuffer__args, // the arguments
  0, //arguments count
  SlicedReadByteBuffer_methods_SlicedReadByteBuffer_INLRReadByteBuffer_I_LRSlicedReadByteBuffer__exceptions, // the declared exceptions
  SlicedReadByteBuffer_MetainfoWrapper::SlicedReadByteBuffer_method_SlicedReadByteBuffer_INLRReadByteBuffer_I_LRSlicedReadByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SlicedReadByteBuffer_methods_clone__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SlicedReadByteBuffer_methods_clone__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SlicedReadByteBuffer_method_clone__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_3_clone", // alternative name of method
  -1, // altlabelHashCode
  SlicedReadByteBuffer_methods_clone__LRObject__args, // the arguments
  0, //arguments count
  SlicedReadByteBuffer_methods_clone__LRObject__exceptions, // the declared exceptions
  SlicedReadByteBuffer_MetainfoWrapper::SlicedReadByteBuffer_method_clone__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SlicedReadByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SlicedReadByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__arg_end = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "end", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SlicedReadByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__arg_sliceType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "sliceType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SlicedReadByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__args[] = 
{
  &SlicedReadByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__arg_start,
  &SlicedReadByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__arg_end,
  &SlicedReadByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__arg_sliceType,
  0
};

::acdk::lang::dmi::ClazzInfo* SlicedReadByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SlicedReadByteBuffer_method_createReadSlice_III_LRReadByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createReadSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadByteBuffer::clazzInfo(), // return type
  "_6_createReadSlice", // alternative name of method
  -1, // altlabelHashCode
  SlicedReadByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__args, // the arguments
  0, //arguments count
  SlicedReadByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__exceptions, // the declared exceptions
  SlicedReadByteBuffer_MetainfoWrapper::SlicedReadByteBuffer_method_createReadSlice_III_LRReadByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SlicedReadByteBuffer_methods_createReadSlice__LRReadByteBuffer__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SlicedReadByteBuffer_methods_createReadSlice__LRReadByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SlicedReadByteBuffer_method_createReadSlice__LRReadByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "createReadSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadByteBuffer::clazzInfo(), // return type
  "_7_createReadSlice", // alternative name of method
  -1, // altlabelHashCode
  SlicedReadByteBuffer_methods_createReadSlice__LRReadByteBuffer__args, // the arguments
  0, //arguments count
  SlicedReadByteBuffer_methods_createReadSlice__LRReadByteBuffer__exceptions, // the declared exceptions
  SlicedReadByteBuffer_MetainfoWrapper::SlicedReadByteBuffer_method_createReadSlice__LRReadByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SlicedReadByteBuffer_methods_createReadSlice_I_LRReadByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SlicedReadByteBuffer_methods_createReadSlice_I_LRReadByteBuffer__args[] = 
{
  &SlicedReadByteBuffer_methods_createReadSlice_I_LRReadByteBuffer__arg_start,
  0
};

::acdk::lang::dmi::ClazzInfo* SlicedReadByteBuffer_methods_createReadSlice_I_LRReadByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SlicedReadByteBuffer_method_createReadSlice_I_LRReadByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "createReadSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadByteBuffer::clazzInfo(), // return type
  "_8_createReadSlice", // alternative name of method
  -1, // altlabelHashCode
  SlicedReadByteBuffer_methods_createReadSlice_I_LRReadByteBuffer__args, // the arguments
  0, //arguments count
  SlicedReadByteBuffer_methods_createReadSlice_I_LRReadByteBuffer__exceptions, // the declared exceptions
  SlicedReadByteBuffer_MetainfoWrapper::SlicedReadByteBuffer_method_createReadSlice_I_LRReadByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SlicedReadByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SlicedReadByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__arg_end = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "end", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SlicedReadByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__args[] = 
{
  &SlicedReadByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__arg_start,
  &SlicedReadByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__arg_end,
  0
};

::acdk::lang::dmi::ClazzInfo* SlicedReadByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SlicedReadByteBuffer_method_createReadSlice_II_LRReadByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "createReadSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadByteBuffer::clazzInfo(), // return type
  "_9_createReadSlice", // alternative name of method
  -1, // altlabelHashCode
  SlicedReadByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__args, // the arguments
  0, //arguments count
  SlicedReadByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__exceptions, // the declared exceptions
  SlicedReadByteBuffer_MetainfoWrapper::SlicedReadByteBuffer_method_createReadSlice_II_LRReadByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SlicedReadByteBuffer_methods_get_I_B_arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SlicedReadByteBuffer_methods_get_I_B_args[] = 
{
  &SlicedReadByteBuffer_methods_get_I_B_arg_idx,
  0
};

::acdk::lang::dmi::ClazzInfo* SlicedReadByteBuffer_methods_get_I_B_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SlicedReadByteBuffer_method_get_I_B = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "get", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz(), // return type
  "_5_get", // alternative name of method
  -1, // altlabelHashCode
  SlicedReadByteBuffer_methods_get_I_B_args, // the arguments
  0, //arguments count
  SlicedReadByteBuffer_methods_get_I_B_exceptions, // the declared exceptions
  SlicedReadByteBuffer_MetainfoWrapper::SlicedReadByteBuffer_method_get_I_B_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SlicedReadByteBuffer_methods_length__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SlicedReadByteBuffer_methods_length__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SlicedReadByteBuffer_method_length__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "length", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_4_length", // alternative name of method
  -1, // altlabelHashCode
  SlicedReadByteBuffer_methods_length__I_args, // the arguments
  0, //arguments count
  SlicedReadByteBuffer_methods_length__I_exceptions, // the declared exceptions
  SlicedReadByteBuffer_MetainfoWrapper::SlicedReadByteBuffer_method_length__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SlicedReadByteBuffer_methods_supportNativeIterator__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SlicedReadByteBuffer_methods_supportNativeIterator__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SlicedReadByteBuffer_method_supportNativeIterator__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportNativeIterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_a_supportNativeIterator", // alternative name of method
  -1, // altlabelHashCode
  SlicedReadByteBuffer_methods_supportNativeIterator__Z_args, // the arguments
  0, //arguments count
  SlicedReadByteBuffer_methods_supportNativeIterator__Z_exceptions, // the declared exceptions
  SlicedReadByteBuffer_MetainfoWrapper::SlicedReadByteBuffer_method_supportNativeIterator__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SlicedReadByteBuffer_methods[] = 
{
  &SlicedReadByteBuffer_method_GetClass__L_acdk_lang_RClass_,
  &SlicedReadByteBuffer_method_SlicedReadByteBuffer_INLRReadByteBuffer_II_LRSlicedReadByteBuffer_,
  &SlicedReadByteBuffer_method_SlicedReadByteBuffer_INLRReadByteBuffer__LRSlicedReadByteBuffer_,
  &SlicedReadByteBuffer_method_SlicedReadByteBuffer_INLRReadByteBuffer_I_LRSlicedReadByteBuffer_,
  &SlicedReadByteBuffer_method_clone__LRObject_,
  &SlicedReadByteBuffer_method_createReadSlice_III_LRReadByteBuffer_,
  &SlicedReadByteBuffer_method_createReadSlice__LRReadByteBuffer_,
  &SlicedReadByteBuffer_method_createReadSlice_I_LRReadByteBuffer_,
  &SlicedReadByteBuffer_method_createReadSlice_II_LRReadByteBuffer_,
  &SlicedReadByteBuffer_method_get_I_B,
  &SlicedReadByteBuffer_method_length__I,
  &SlicedReadByteBuffer_method_supportNativeIterator__Z,
  0
};


struct SlicedReadByteBuffer_MetaInfoInitializer
{  SlicedReadByteBuffer_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SlicedReadByteBuffer::clazzInfo();
    ci->fields =  _SlicedReadByteBuffer_fields;
    ci->methods =  _SlicedReadByteBuffer_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SlicedReadByteBuffer_MetaInfoInitializer SlicedReadByteBuffer_MetaInfoInitializer_staticinstance__;


struct SlicedReadByteBuffer_clazzInfo_ClazzAttributesResInitializer7
{
  SlicedReadByteBuffer_clazzInfo_ClazzAttributesResInitializer7()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&SlicedReadByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__arg_sliceType, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)SliceTypeMetaInf::GetEnumInfo()));
  }
};

SlicedReadByteBuffer_clazzInfo_ClazzAttributesResInitializer7 SlicedReadByteBuffer_clazzInfo_ClazzAttributesResInitializer7_instance;



} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
SlicedReadWriteByteBuffer_create_array(int length)
{
  return new ObjectArrayImpl<RSlicedReadWriteByteBuffer>(length);
}

//static
::acdk::lang::RObject
SlicedReadWriteByteBuffer_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SlicedReadWriteByteBuffer_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SlicedReadWriteByteBuffer_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SlicedReadWriteByteBuffer::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SlicedReadWriteByteBuffer_method_SlicedReadWriteByteBuffer_INLRReadWriteByteBuffer_III_LRSlicedReadWriteByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SlicedReadWriteByteBuffer(::acdk::lang::dmi::castTo< RReadWriteByteBuffer>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), (SliceType)::acdk::lang::dmi::castTo<int>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SlicedReadWriteByteBuffer_method_clone__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SlicedReadWriteByteBuffer* This = dmi_cast<SlicedReadWriteByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SlicedReadWriteByteBuffer::clone();
    else
        ret = (::acdk::lang::RObject)This->clone();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SlicedReadWriteByteBuffer_method_createReadSlice__LRReadByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SlicedReadWriteByteBuffer* This = dmi_cast<SlicedReadWriteByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SlicedReadWriteByteBuffer::createReadSlice();
    else
        ret = (::acdk::lang::RObject)This->createReadSlice();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SlicedReadWriteByteBuffer_method_createReadSlice_I_LRReadByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SlicedReadWriteByteBuffer* This = dmi_cast<SlicedReadWriteByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SlicedReadWriteByteBuffer::createReadSlice(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->createReadSlice(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SlicedReadWriteByteBuffer_method_createReadSlice_III_LRReadByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SlicedReadWriteByteBuffer* This = dmi_cast<SlicedReadWriteByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SlicedReadWriteByteBuffer::createReadSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), (SliceType)::acdk::lang::dmi::castTo<int>(args[2], dc));
    else
        ret = (::acdk::lang::RObject)This->createReadSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), (SliceType)::acdk::lang::dmi::castTo<int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SlicedReadWriteByteBuffer_method_createReadSlice_II_LRReadByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SlicedReadWriteByteBuffer* This = dmi_cast<SlicedReadWriteByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SlicedReadWriteByteBuffer::createReadSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->createReadSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SlicedReadWriteByteBuffer_method_createReadWriteSlice__LRReadWriteByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SlicedReadWriteByteBuffer* This = dmi_cast<SlicedReadWriteByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SlicedReadWriteByteBuffer::createReadWriteSlice();
    else
        ret = (::acdk::lang::RObject)This->createReadWriteSlice();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SlicedReadWriteByteBuffer_method_createReadWriteSlice_I_LRReadWriteByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SlicedReadWriteByteBuffer* This = dmi_cast<SlicedReadWriteByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SlicedReadWriteByteBuffer::createReadWriteSlice(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->createReadWriteSlice(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SlicedReadWriteByteBuffer_method_createReadWriteSlice_III_LRReadWriteByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SlicedReadWriteByteBuffer* This = dmi_cast<SlicedReadWriteByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SlicedReadWriteByteBuffer::createReadWriteSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), (SliceType)::acdk::lang::dmi::castTo<int>(args[2], dc));
    else
        ret = (::acdk::lang::RObject)This->createReadWriteSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), (SliceType)::acdk::lang::dmi::castTo<int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SlicedReadWriteByteBuffer_method_createReadWriteSlice_II_LRReadWriteByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SlicedReadWriteByteBuffer* This = dmi_cast<SlicedReadWriteByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SlicedReadWriteByteBuffer::createReadWriteSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->createReadWriteSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SlicedReadWriteByteBuffer_method_createWriteSlice_III_LRWriteByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SlicedReadWriteByteBuffer* This = dmi_cast<SlicedReadWriteByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SlicedReadWriteByteBuffer::createWriteSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), (SliceType)::acdk::lang::dmi::castTo<int>(args[2], dc));
    else
        ret = (::acdk::lang::RObject)This->createWriteSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), (SliceType)::acdk::lang::dmi::castTo<int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SlicedReadWriteByteBuffer_method_createWriteSlice__LRWriteByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SlicedReadWriteByteBuffer* This = dmi_cast<SlicedReadWriteByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SlicedReadWriteByteBuffer::createWriteSlice();
    else
        ret = (::acdk::lang::RObject)This->createWriteSlice();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SlicedReadWriteByteBuffer_method_createWriteSlice_I_LRWriteByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SlicedReadWriteByteBuffer* This = dmi_cast<SlicedReadWriteByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SlicedReadWriteByteBuffer::createWriteSlice(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->createWriteSlice(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SlicedReadWriteByteBuffer_method_createWriteSlice_II_LRWriteByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SlicedReadWriteByteBuffer* This = dmi_cast<SlicedReadWriteByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SlicedReadWriteByteBuffer::createWriteSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->createWriteSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SlicedReadWriteByteBuffer_method_get_I_B_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SlicedReadWriteByteBuffer* This = dmi_cast<SlicedReadWriteByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SlicedReadWriteByteBuffer::get(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->get(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SlicedReadWriteByteBuffer_method_length__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SlicedReadWriteByteBuffer* This = dmi_cast<SlicedReadWriteByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SlicedReadWriteByteBuffer::length();
    else
      ret = This->length();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SlicedReadWriteByteBuffer_method_set_IB_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SlicedReadWriteByteBuffer* This = dmi_cast<SlicedReadWriteByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SlicedReadWriteByteBuffer::set(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< byte>(args[1], dc));
    else
        This->set(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< byte>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SlicedReadWriteByteBuffer_fields__end_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SlicedReadWriteByteBuffer* This = dmi_cast<SlicedReadWriteByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_end, flags);
    else
      This->_end = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SlicedReadWriteByteBuffer_fields__parent_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SlicedReadWriteByteBuffer* This = dmi_cast<SlicedReadWriteByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_parent, flags);
    else
      This->_parent = ::acdk::lang::dmi::castTo< RReadWriteByteBuffer>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SlicedReadWriteByteBuffer_fields__sliceType_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SlicedReadWriteByteBuffer* This = dmi_cast<SlicedReadWriteByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->_sliceType), flags);
    else
      This->_sliceType = (SliceType)::acdk::lang::dmi::castTo<int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SlicedReadWriteByteBuffer_fields__start_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SlicedReadWriteByteBuffer* This = dmi_cast<SlicedReadWriteByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_start, flags);
    else
      This->_start = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo SlicedReadWriteByteBuffer_fields__end = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_end", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  SlicedReadWriteByteBuffer_MetainfoWrapper::SlicedReadWriteByteBuffer_fields__end_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SlicedReadWriteByteBuffer_fields__parent = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_parent", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadWriteByteBuffer::clazzInfo(),
  SlicedReadWriteByteBuffer_MetainfoWrapper::SlicedReadWriteByteBuffer_fields__parent_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SlicedReadWriteByteBuffer_fields__sliceType = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_sliceType", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  SlicedReadWriteByteBuffer_MetainfoWrapper::SlicedReadWriteByteBuffer_fields__sliceType_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SlicedReadWriteByteBuffer_fields__start = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_start", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  SlicedReadWriteByteBuffer_MetainfoWrapper::SlicedReadWriteByteBuffer_fields__start_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _SlicedReadWriteByteBuffer_fields[] = 
{
  &SlicedReadWriteByteBuffer_fields__end,
  &SlicedReadWriteByteBuffer_fields__parent,
  &SlicedReadWriteByteBuffer_fields__sliceType,
  &SlicedReadWriteByteBuffer_fields__start,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SlicedReadWriteByteBuffer_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SlicedReadWriteByteBuffer_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SlicedReadWriteByteBuffer_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_h_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SlicedReadWriteByteBuffer_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SlicedReadWriteByteBuffer_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SlicedReadWriteByteBuffer_MetainfoWrapper::SlicedReadWriteByteBuffer_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SlicedReadWriteByteBuffer_methods_SlicedReadWriteByteBuffer_INLRReadWriteByteBuffer_III_LRSlicedReadWriteByteBuffer__arg_buf = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buf", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadWriteByteBuffer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SlicedReadWriteByteBuffer_methods_SlicedReadWriteByteBuffer_INLRReadWriteByteBuffer_III_LRSlicedReadWriteByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SlicedReadWriteByteBuffer_methods_SlicedReadWriteByteBuffer_INLRReadWriteByteBuffer_III_LRSlicedReadWriteByteBuffer__arg_end = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "end", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SlicedReadWriteByteBuffer_methods_SlicedReadWriteByteBuffer_INLRReadWriteByteBuffer_III_LRSlicedReadWriteByteBuffer__arg_sliceType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "sliceType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SlicedReadWriteByteBuffer_methods_SlicedReadWriteByteBuffer_INLRReadWriteByteBuffer_III_LRSlicedReadWriteByteBuffer__args[] = 
{
  &SlicedReadWriteByteBuffer_methods_SlicedReadWriteByteBuffer_INLRReadWriteByteBuffer_III_LRSlicedReadWriteByteBuffer__arg_buf,
  &SlicedReadWriteByteBuffer_methods_SlicedReadWriteByteBuffer_INLRReadWriteByteBuffer_III_LRSlicedReadWriteByteBuffer__arg_start,
  &SlicedReadWriteByteBuffer_methods_SlicedReadWriteByteBuffer_INLRReadWriteByteBuffer_III_LRSlicedReadWriteByteBuffer__arg_end,
  &SlicedReadWriteByteBuffer_methods_SlicedReadWriteByteBuffer_INLRReadWriteByteBuffer_III_LRSlicedReadWriteByteBuffer__arg_sliceType,
  0
};

::acdk::lang::dmi::ClazzInfo* SlicedReadWriteByteBuffer_methods_SlicedReadWriteByteBuffer_INLRReadWriteByteBuffer_III_LRSlicedReadWriteByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SlicedReadWriteByteBuffer_method_SlicedReadWriteByteBuffer_INLRReadWriteByteBuffer_III_LRSlicedReadWriteByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SlicedReadWriteByteBuffer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SlicedReadWriteByteBuffer::clazzInfo(), // return type
  "_0_SlicedReadWriteByteBuffer", // alternative name of method
  -1, // altlabelHashCode
  SlicedReadWriteByteBuffer_methods_SlicedReadWriteByteBuffer_INLRReadWriteByteBuffer_III_LRSlicedReadWriteByteBuffer__args, // the arguments
  0, //arguments count
  SlicedReadWriteByteBuffer_methods_SlicedReadWriteByteBuffer_INLRReadWriteByteBuffer_III_LRSlicedReadWriteByteBuffer__exceptions, // the declared exceptions
  SlicedReadWriteByteBuffer_MetainfoWrapper::SlicedReadWriteByteBuffer_method_SlicedReadWriteByteBuffer_INLRReadWriteByteBuffer_III_LRSlicedReadWriteByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SlicedReadWriteByteBuffer_methods_clone__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SlicedReadWriteByteBuffer_methods_clone__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SlicedReadWriteByteBuffer_method_clone__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_1_clone", // alternative name of method
  -1, // altlabelHashCode
  SlicedReadWriteByteBuffer_methods_clone__LRObject__args, // the arguments
  0, //arguments count
  SlicedReadWriteByteBuffer_methods_clone__LRObject__exceptions, // the declared exceptions
  SlicedReadWriteByteBuffer_MetainfoWrapper::SlicedReadWriteByteBuffer_method_clone__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SlicedReadWriteByteBuffer_methods_createReadSlice__LRReadByteBuffer__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SlicedReadWriteByteBuffer_methods_createReadSlice__LRReadByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SlicedReadWriteByteBuffer_method_createReadSlice__LRReadByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "createReadSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadByteBuffer::clazzInfo(), // return type
  "_6_createReadSlice", // alternative name of method
  -1, // altlabelHashCode
  SlicedReadWriteByteBuffer_methods_createReadSlice__LRReadByteBuffer__args, // the arguments
  0, //arguments count
  SlicedReadWriteByteBuffer_methods_createReadSlice__LRReadByteBuffer__exceptions, // the declared exceptions
  SlicedReadWriteByteBuffer_MetainfoWrapper::SlicedReadWriteByteBuffer_method_createReadSlice__LRReadByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SlicedReadWriteByteBuffer_methods_createReadSlice_I_LRReadByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SlicedReadWriteByteBuffer_methods_createReadSlice_I_LRReadByteBuffer__args[] = 
{
  &SlicedReadWriteByteBuffer_methods_createReadSlice_I_LRReadByteBuffer__arg_start,
  0
};

::acdk::lang::dmi::ClazzInfo* SlicedReadWriteByteBuffer_methods_createReadSlice_I_LRReadByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SlicedReadWriteByteBuffer_method_createReadSlice_I_LRReadByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "createReadSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadByteBuffer::clazzInfo(), // return type
  "_7_createReadSlice", // alternative name of method
  -1, // altlabelHashCode
  SlicedReadWriteByteBuffer_methods_createReadSlice_I_LRReadByteBuffer__args, // the arguments
  0, //arguments count
  SlicedReadWriteByteBuffer_methods_createReadSlice_I_LRReadByteBuffer__exceptions, // the declared exceptions
  SlicedReadWriteByteBuffer_MetainfoWrapper::SlicedReadWriteByteBuffer_method_createReadSlice_I_LRReadByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SlicedReadWriteByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SlicedReadWriteByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__arg_end = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "end", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SlicedReadWriteByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__arg_sliceType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "sliceType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SlicedReadWriteByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__args[] = 
{
  &SlicedReadWriteByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__arg_start,
  &SlicedReadWriteByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__arg_end,
  &SlicedReadWriteByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__arg_sliceType,
  0
};

::acdk::lang::dmi::ClazzInfo* SlicedReadWriteByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SlicedReadWriteByteBuffer_method_createReadSlice_III_LRReadByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createReadSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadByteBuffer::clazzInfo(), // return type
  "_5_createReadSlice", // alternative name of method
  -1, // altlabelHashCode
  SlicedReadWriteByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__args, // the arguments
  0, //arguments count
  SlicedReadWriteByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__exceptions, // the declared exceptions
  SlicedReadWriteByteBuffer_MetainfoWrapper::SlicedReadWriteByteBuffer_method_createReadSlice_III_LRReadByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SlicedReadWriteByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SlicedReadWriteByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__arg_end = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "end", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SlicedReadWriteByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__args[] = 
{
  &SlicedReadWriteByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__arg_start,
  &SlicedReadWriteByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__arg_end,
  0
};

::acdk::lang::dmi::ClazzInfo* SlicedReadWriteByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SlicedReadWriteByteBuffer_method_createReadSlice_II_LRReadByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "createReadSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadByteBuffer::clazzInfo(), // return type
  "_8_createReadSlice", // alternative name of method
  -1, // altlabelHashCode
  SlicedReadWriteByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__args, // the arguments
  0, //arguments count
  SlicedReadWriteByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__exceptions, // the declared exceptions
  SlicedReadWriteByteBuffer_MetainfoWrapper::SlicedReadWriteByteBuffer_method_createReadSlice_II_LRReadByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SlicedReadWriteByteBuffer_methods_createReadWriteSlice__LRReadWriteByteBuffer__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SlicedReadWriteByteBuffer_methods_createReadWriteSlice__LRReadWriteByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SlicedReadWriteByteBuffer_method_createReadWriteSlice__LRReadWriteByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "createReadWriteSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadWriteByteBuffer::clazzInfo(), // return type
  "_e_createReadWriteSlice", // alternative name of method
  -1, // altlabelHashCode
  SlicedReadWriteByteBuffer_methods_createReadWriteSlice__LRReadWriteByteBuffer__args, // the arguments
  0, //arguments count
  SlicedReadWriteByteBuffer_methods_createReadWriteSlice__LRReadWriteByteBuffer__exceptions, // the declared exceptions
  SlicedReadWriteByteBuffer_MetainfoWrapper::SlicedReadWriteByteBuffer_method_createReadWriteSlice__LRReadWriteByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SlicedReadWriteByteBuffer_methods_createReadWriteSlice_I_LRReadWriteByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SlicedReadWriteByteBuffer_methods_createReadWriteSlice_I_LRReadWriteByteBuffer__args[] = 
{
  &SlicedReadWriteByteBuffer_methods_createReadWriteSlice_I_LRReadWriteByteBuffer__arg_start,
  0
};

::acdk::lang::dmi::ClazzInfo* SlicedReadWriteByteBuffer_methods_createReadWriteSlice_I_LRReadWriteByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SlicedReadWriteByteBuffer_method_createReadWriteSlice_I_LRReadWriteByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "createReadWriteSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadWriteByteBuffer::clazzInfo(), // return type
  "_f_createReadWriteSlice", // alternative name of method
  -1, // altlabelHashCode
  SlicedReadWriteByteBuffer_methods_createReadWriteSlice_I_LRReadWriteByteBuffer__args, // the arguments
  0, //arguments count
  SlicedReadWriteByteBuffer_methods_createReadWriteSlice_I_LRReadWriteByteBuffer__exceptions, // the declared exceptions
  SlicedReadWriteByteBuffer_MetainfoWrapper::SlicedReadWriteByteBuffer_method_createReadWriteSlice_I_LRReadWriteByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SlicedReadWriteByteBuffer_methods_createReadWriteSlice_III_LRReadWriteByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SlicedReadWriteByteBuffer_methods_createReadWriteSlice_III_LRReadWriteByteBuffer__arg_end = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "end", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SlicedReadWriteByteBuffer_methods_createReadWriteSlice_III_LRReadWriteByteBuffer__arg_sliceType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "sliceType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SlicedReadWriteByteBuffer_methods_createReadWriteSlice_III_LRReadWriteByteBuffer__args[] = 
{
  &SlicedReadWriteByteBuffer_methods_createReadWriteSlice_III_LRReadWriteByteBuffer__arg_start,
  &SlicedReadWriteByteBuffer_methods_createReadWriteSlice_III_LRReadWriteByteBuffer__arg_end,
  &SlicedReadWriteByteBuffer_methods_createReadWriteSlice_III_LRReadWriteByteBuffer__arg_sliceType,
  0
};

::acdk::lang::dmi::ClazzInfo* SlicedReadWriteByteBuffer_methods_createReadWriteSlice_III_LRReadWriteByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SlicedReadWriteByteBuffer_method_createReadWriteSlice_III_LRReadWriteByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createReadWriteSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadWriteByteBuffer::clazzInfo(), // return type
  "_d_createReadWriteSlice", // alternative name of method
  -1, // altlabelHashCode
  SlicedReadWriteByteBuffer_methods_createReadWriteSlice_III_LRReadWriteByteBuffer__args, // the arguments
  0, //arguments count
  SlicedReadWriteByteBuffer_methods_createReadWriteSlice_III_LRReadWriteByteBuffer__exceptions, // the declared exceptions
  SlicedReadWriteByteBuffer_MetainfoWrapper::SlicedReadWriteByteBuffer_method_createReadWriteSlice_III_LRReadWriteByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SlicedReadWriteByteBuffer_methods_createReadWriteSlice_II_LRReadWriteByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SlicedReadWriteByteBuffer_methods_createReadWriteSlice_II_LRReadWriteByteBuffer__arg_end = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "end", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SlicedReadWriteByteBuffer_methods_createReadWriteSlice_II_LRReadWriteByteBuffer__args[] = 
{
  &SlicedReadWriteByteBuffer_methods_createReadWriteSlice_II_LRReadWriteByteBuffer__arg_start,
  &SlicedReadWriteByteBuffer_methods_createReadWriteSlice_II_LRReadWriteByteBuffer__arg_end,
  0
};

::acdk::lang::dmi::ClazzInfo* SlicedReadWriteByteBuffer_methods_createReadWriteSlice_II_LRReadWriteByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SlicedReadWriteByteBuffer_method_createReadWriteSlice_II_LRReadWriteByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "createReadWriteSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadWriteByteBuffer::clazzInfo(), // return type
  "_g_createReadWriteSlice", // alternative name of method
  -1, // altlabelHashCode
  SlicedReadWriteByteBuffer_methods_createReadWriteSlice_II_LRReadWriteByteBuffer__args, // the arguments
  0, //arguments count
  SlicedReadWriteByteBuffer_methods_createReadWriteSlice_II_LRReadWriteByteBuffer__exceptions, // the declared exceptions
  SlicedReadWriteByteBuffer_MetainfoWrapper::SlicedReadWriteByteBuffer_method_createReadWriteSlice_II_LRReadWriteByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SlicedReadWriteByteBuffer_methods_createWriteSlice_III_LRWriteByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SlicedReadWriteByteBuffer_methods_createWriteSlice_III_LRWriteByteBuffer__arg_end = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "end", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SlicedReadWriteByteBuffer_methods_createWriteSlice_III_LRWriteByteBuffer__arg_sliceType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "sliceType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SlicedReadWriteByteBuffer_methods_createWriteSlice_III_LRWriteByteBuffer__args[] = 
{
  &SlicedReadWriteByteBuffer_methods_createWriteSlice_III_LRWriteByteBuffer__arg_start,
  &SlicedReadWriteByteBuffer_methods_createWriteSlice_III_LRWriteByteBuffer__arg_end,
  &SlicedReadWriteByteBuffer_methods_createWriteSlice_III_LRWriteByteBuffer__arg_sliceType,
  0
};

::acdk::lang::dmi::ClazzInfo* SlicedReadWriteByteBuffer_methods_createWriteSlice_III_LRWriteByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SlicedReadWriteByteBuffer_method_createWriteSlice_III_LRWriteByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createWriteSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriteByteBuffer::clazzInfo(), // return type
  "_9_createWriteSlice", // alternative name of method
  -1, // altlabelHashCode
  SlicedReadWriteByteBuffer_methods_createWriteSlice_III_LRWriteByteBuffer__args, // the arguments
  0, //arguments count
  SlicedReadWriteByteBuffer_methods_createWriteSlice_III_LRWriteByteBuffer__exceptions, // the declared exceptions
  SlicedReadWriteByteBuffer_MetainfoWrapper::SlicedReadWriteByteBuffer_method_createWriteSlice_III_LRWriteByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SlicedReadWriteByteBuffer_methods_createWriteSlice__LRWriteByteBuffer__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SlicedReadWriteByteBuffer_methods_createWriteSlice__LRWriteByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SlicedReadWriteByteBuffer_method_createWriteSlice__LRWriteByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "createWriteSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriteByteBuffer::clazzInfo(), // return type
  "_a_createWriteSlice", // alternative name of method
  -1, // altlabelHashCode
  SlicedReadWriteByteBuffer_methods_createWriteSlice__LRWriteByteBuffer__args, // the arguments
  0, //arguments count
  SlicedReadWriteByteBuffer_methods_createWriteSlice__LRWriteByteBuffer__exceptions, // the declared exceptions
  SlicedReadWriteByteBuffer_MetainfoWrapper::SlicedReadWriteByteBuffer_method_createWriteSlice__LRWriteByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SlicedReadWriteByteBuffer_methods_createWriteSlice_I_LRWriteByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SlicedReadWriteByteBuffer_methods_createWriteSlice_I_LRWriteByteBuffer__args[] = 
{
  &SlicedReadWriteByteBuffer_methods_createWriteSlice_I_LRWriteByteBuffer__arg_start,
  0
};

::acdk::lang::dmi::ClazzInfo* SlicedReadWriteByteBuffer_methods_createWriteSlice_I_LRWriteByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SlicedReadWriteByteBuffer_method_createWriteSlice_I_LRWriteByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "createWriteSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriteByteBuffer::clazzInfo(), // return type
  "_b_createWriteSlice", // alternative name of method
  -1, // altlabelHashCode
  SlicedReadWriteByteBuffer_methods_createWriteSlice_I_LRWriteByteBuffer__args, // the arguments
  0, //arguments count
  SlicedReadWriteByteBuffer_methods_createWriteSlice_I_LRWriteByteBuffer__exceptions, // the declared exceptions
  SlicedReadWriteByteBuffer_MetainfoWrapper::SlicedReadWriteByteBuffer_method_createWriteSlice_I_LRWriteByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SlicedReadWriteByteBuffer_methods_createWriteSlice_II_LRWriteByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SlicedReadWriteByteBuffer_methods_createWriteSlice_II_LRWriteByteBuffer__arg_end = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "end", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SlicedReadWriteByteBuffer_methods_createWriteSlice_II_LRWriteByteBuffer__args[] = 
{
  &SlicedReadWriteByteBuffer_methods_createWriteSlice_II_LRWriteByteBuffer__arg_start,
  &SlicedReadWriteByteBuffer_methods_createWriteSlice_II_LRWriteByteBuffer__arg_end,
  0
};

::acdk::lang::dmi::ClazzInfo* SlicedReadWriteByteBuffer_methods_createWriteSlice_II_LRWriteByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SlicedReadWriteByteBuffer_method_createWriteSlice_II_LRWriteByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "createWriteSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriteByteBuffer::clazzInfo(), // return type
  "_c_createWriteSlice", // alternative name of method
  -1, // altlabelHashCode
  SlicedReadWriteByteBuffer_methods_createWriteSlice_II_LRWriteByteBuffer__args, // the arguments
  0, //arguments count
  SlicedReadWriteByteBuffer_methods_createWriteSlice_II_LRWriteByteBuffer__exceptions, // the declared exceptions
  SlicedReadWriteByteBuffer_MetainfoWrapper::SlicedReadWriteByteBuffer_method_createWriteSlice_II_LRWriteByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SlicedReadWriteByteBuffer_methods_get_I_B_arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SlicedReadWriteByteBuffer_methods_get_I_B_args[] = 
{
  &SlicedReadWriteByteBuffer_methods_get_I_B_arg_idx,
  0
};

::acdk::lang::dmi::ClazzInfo* SlicedReadWriteByteBuffer_methods_get_I_B_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SlicedReadWriteByteBuffer_method_get_I_B = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "get", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz(), // return type
  "_3_get", // alternative name of method
  -1, // altlabelHashCode
  SlicedReadWriteByteBuffer_methods_get_I_B_args, // the arguments
  0, //arguments count
  SlicedReadWriteByteBuffer_methods_get_I_B_exceptions, // the declared exceptions
  SlicedReadWriteByteBuffer_MetainfoWrapper::SlicedReadWriteByteBuffer_method_get_I_B_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SlicedReadWriteByteBuffer_methods_length__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SlicedReadWriteByteBuffer_methods_length__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SlicedReadWriteByteBuffer_method_length__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "length", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2_length", // alternative name of method
  -1, // altlabelHashCode
  SlicedReadWriteByteBuffer_methods_length__I_args, // the arguments
  0, //arguments count
  SlicedReadWriteByteBuffer_methods_length__I_exceptions, // the declared exceptions
  SlicedReadWriteByteBuffer_MetainfoWrapper::SlicedReadWriteByteBuffer_method_length__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SlicedReadWriteByteBuffer_methods_set_IB_V_arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SlicedReadWriteByteBuffer_methods_set_IB_V_arg_t = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "t", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SlicedReadWriteByteBuffer_methods_set_IB_V_args[] = 
{
  &SlicedReadWriteByteBuffer_methods_set_IB_V_arg_idx,
  &SlicedReadWriteByteBuffer_methods_set_IB_V_arg_t,
  0
};

::acdk::lang::dmi::ClazzInfo* SlicedReadWriteByteBuffer_methods_set_IB_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SlicedReadWriteByteBuffer_method_set_IB_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "set", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_set", // alternative name of method
  -1, // altlabelHashCode
  SlicedReadWriteByteBuffer_methods_set_IB_V_args, // the arguments
  0, //arguments count
  SlicedReadWriteByteBuffer_methods_set_IB_V_exceptions, // the declared exceptions
  SlicedReadWriteByteBuffer_MetainfoWrapper::SlicedReadWriteByteBuffer_method_set_IB_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SlicedReadWriteByteBuffer_methods[] = 
{
  &SlicedReadWriteByteBuffer_method_GetClass__L_acdk_lang_RClass_,
  &SlicedReadWriteByteBuffer_method_SlicedReadWriteByteBuffer_INLRReadWriteByteBuffer_III_LRSlicedReadWriteByteBuffer_,
  &SlicedReadWriteByteBuffer_method_clone__LRObject_,
  &SlicedReadWriteByteBuffer_method_createReadSlice__LRReadByteBuffer_,
  &SlicedReadWriteByteBuffer_method_createReadSlice_I_LRReadByteBuffer_,
  &SlicedReadWriteByteBuffer_method_createReadSlice_III_LRReadByteBuffer_,
  &SlicedReadWriteByteBuffer_method_createReadSlice_II_LRReadByteBuffer_,
  &SlicedReadWriteByteBuffer_method_createReadWriteSlice__LRReadWriteByteBuffer_,
  &SlicedReadWriteByteBuffer_method_createReadWriteSlice_I_LRReadWriteByteBuffer_,
  &SlicedReadWriteByteBuffer_method_createReadWriteSlice_III_LRReadWriteByteBuffer_,
  &SlicedReadWriteByteBuffer_method_createReadWriteSlice_II_LRReadWriteByteBuffer_,
  &SlicedReadWriteByteBuffer_method_createWriteSlice_III_LRWriteByteBuffer_,
  &SlicedReadWriteByteBuffer_method_createWriteSlice__LRWriteByteBuffer_,
  &SlicedReadWriteByteBuffer_method_createWriteSlice_I_LRWriteByteBuffer_,
  &SlicedReadWriteByteBuffer_method_createWriteSlice_II_LRWriteByteBuffer_,
  &SlicedReadWriteByteBuffer_method_get_I_B,
  &SlicedReadWriteByteBuffer_method_length__I,
  &SlicedReadWriteByteBuffer_method_set_IB_V,
  0
};


struct SlicedReadWriteByteBuffer_MetaInfoInitializer
{  SlicedReadWriteByteBuffer_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SlicedReadWriteByteBuffer::clazzInfo();
    ci->fields =  _SlicedReadWriteByteBuffer_fields;
    ci->methods =  _SlicedReadWriteByteBuffer_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SlicedReadWriteByteBuffer_MetaInfoInitializer SlicedReadWriteByteBuffer_MetaInfoInitializer_staticinstance__;


struct SlicedReadWriteByteBuffer_clazzInfo_ClazzAttributesResInitializer8
{
  SlicedReadWriteByteBuffer_clazzInfo_ClazzAttributesResInitializer8()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&SlicedReadWriteByteBuffer_methods_SlicedReadWriteByteBuffer_INLRReadWriteByteBuffer_III_LRSlicedReadWriteByteBuffer__arg_sliceType, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)SliceTypeMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&SlicedReadWriteByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__arg_sliceType, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)SliceTypeMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&SlicedReadWriteByteBuffer_methods_createWriteSlice_III_LRWriteByteBuffer__arg_sliceType, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)SliceTypeMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&SlicedReadWriteByteBuffer_methods_createReadWriteSlice_III_LRReadWriteByteBuffer__arg_sliceType, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)SliceTypeMetaInf::GetEnumInfo()));
  }
};

SlicedReadWriteByteBuffer_clazzInfo_ClazzAttributesResInitializer8 SlicedReadWriteByteBuffer_clazzInfo_ClazzAttributesResInitializer8_instance;



} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
ArrayReadByteBuffer_create_array(int length)
{
  return new ObjectArrayImpl<RArrayReadByteBuffer>(length);
}

//static
::acdk::lang::RObject
ArrayReadByteBuffer_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ArrayReadByteBuffer_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayReadByteBuffer_method_ArrayReadByteBuffer_INLRbyteArray_II_LRArrayReadByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ArrayReadByteBuffer(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayReadByteBuffer_method_ArrayReadByteBuffer_INLRbyteArray__LRArrayReadByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ArrayReadByteBuffer(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayReadByteBuffer_method_ArrayReadByteBuffer_INLRbyteArray_I_LRArrayReadByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ArrayReadByteBuffer(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayReadByteBuffer_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ArrayReadByteBuffer::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayReadByteBuffer_method_clone__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ArrayReadByteBuffer* This = dmi_cast<ArrayReadByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ArrayReadByteBuffer::clone();
    else
        ret = (::acdk::lang::RObject)This->clone();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayReadByteBuffer_method_createReadSlice_III_LRReadByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ArrayReadByteBuffer* This = dmi_cast<ArrayReadByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ArrayReadByteBuffer::createReadSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), (SliceType)::acdk::lang::dmi::castTo<int>(args[2], dc));
    else
        ret = (::acdk::lang::RObject)This->createReadSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), (SliceType)::acdk::lang::dmi::castTo<int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayReadByteBuffer_method_createReadSlice__LRReadByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ArrayReadByteBuffer* This = dmi_cast<ArrayReadByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ArrayReadByteBuffer::createReadSlice();
    else
        ret = (::acdk::lang::RObject)This->createReadSlice();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayReadByteBuffer_method_createReadSlice_I_LRReadByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ArrayReadByteBuffer* This = dmi_cast<ArrayReadByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ArrayReadByteBuffer::createReadSlice(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->createReadSlice(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayReadByteBuffer_method_createReadSlice_II_LRReadByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ArrayReadByteBuffer* This = dmi_cast<ArrayReadByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ArrayReadByteBuffer::createReadSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->createReadSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayReadByteBuffer_method_endOffset__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ArrayReadByteBuffer* This = dmi_cast<ArrayReadByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ArrayReadByteBuffer::endOffset();
    else
      ret = This->endOffset();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayReadByteBuffer_method_get_I_B_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ArrayReadByteBuffer* This = dmi_cast<ArrayReadByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ArrayReadByteBuffer::get(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->get(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayReadByteBuffer_method_length__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ArrayReadByteBuffer* This = dmi_cast<ArrayReadByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ArrayReadByteBuffer::length();
    else
      ret = This->length();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayReadByteBuffer_method_startOffset__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ArrayReadByteBuffer* This = dmi_cast<ArrayReadByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ArrayReadByteBuffer::startOffset();
    else
      ret = This->startOffset();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayReadByteBuffer_method_supportNativeIterator__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ArrayReadByteBuffer* This = dmi_cast<ArrayReadByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ArrayReadByteBuffer::supportNativeIterator();
    else
      ret = This->supportNativeIterator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ArrayReadByteBuffer_fields__ba_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ArrayReadByteBuffer* This = dmi_cast<ArrayReadByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_ba, flags);
    else
      This->_ba = ::acdk::lang::dmi::castTo< RbyteArray>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ArrayReadByteBuffer_fields__ba = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_ba", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo(),
  ArrayReadByteBuffer_MetainfoWrapper::ArrayReadByteBuffer_fields__ba_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ArrayReadByteBuffer_fields[] = 
{
  &ArrayReadByteBuffer_fields__ba,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayReadByteBuffer_methods_ArrayReadByteBuffer_INLRbyteArray_II_LRArrayReadByteBuffer__arg_ba = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ba", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayReadByteBuffer_methods_ArrayReadByteBuffer_INLRbyteArray_II_LRArrayReadByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayReadByteBuffer_methods_ArrayReadByteBuffer_INLRbyteArray_II_LRArrayReadByteBuffer__arg_end = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "end", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayReadByteBuffer_methods_ArrayReadByteBuffer_INLRbyteArray_II_LRArrayReadByteBuffer__args[] = 
{
  &ArrayReadByteBuffer_methods_ArrayReadByteBuffer_INLRbyteArray_II_LRArrayReadByteBuffer__arg_ba,
  &ArrayReadByteBuffer_methods_ArrayReadByteBuffer_INLRbyteArray_II_LRArrayReadByteBuffer__arg_start,
  &ArrayReadByteBuffer_methods_ArrayReadByteBuffer_INLRbyteArray_II_LRArrayReadByteBuffer__arg_end,
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayReadByteBuffer_methods_ArrayReadByteBuffer_INLRbyteArray_II_LRArrayReadByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayReadByteBuffer_method_ArrayReadByteBuffer_INLRbyteArray_II_LRArrayReadByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ArrayReadByteBuffer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ArrayReadByteBuffer::clazzInfo(), // return type
  "_0_ArrayReadByteBuffer", // alternative name of method
  -1, // altlabelHashCode
  ArrayReadByteBuffer_methods_ArrayReadByteBuffer_INLRbyteArray_II_LRArrayReadByteBuffer__args, // the arguments
  0, //arguments count
  ArrayReadByteBuffer_methods_ArrayReadByteBuffer_INLRbyteArray_II_LRArrayReadByteBuffer__exceptions, // the declared exceptions
  ArrayReadByteBuffer_MetainfoWrapper::ArrayReadByteBuffer_method_ArrayReadByteBuffer_INLRbyteArray_II_LRArrayReadByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayReadByteBuffer_methods_ArrayReadByteBuffer_INLRbyteArray__LRArrayReadByteBuffer__arg_ba = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ba", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayReadByteBuffer_methods_ArrayReadByteBuffer_INLRbyteArray__LRArrayReadByteBuffer__args[] = 
{
  &ArrayReadByteBuffer_methods_ArrayReadByteBuffer_INLRbyteArray__LRArrayReadByteBuffer__arg_ba,
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayReadByteBuffer_methods_ArrayReadByteBuffer_INLRbyteArray__LRArrayReadByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayReadByteBuffer_method_ArrayReadByteBuffer_INLRbyteArray__LRArrayReadByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ArrayReadByteBuffer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ArrayReadByteBuffer::clazzInfo(), // return type
  "_1_ArrayReadByteBuffer", // alternative name of method
  -1, // altlabelHashCode
  ArrayReadByteBuffer_methods_ArrayReadByteBuffer_INLRbyteArray__LRArrayReadByteBuffer__args, // the arguments
  0, //arguments count
  ArrayReadByteBuffer_methods_ArrayReadByteBuffer_INLRbyteArray__LRArrayReadByteBuffer__exceptions, // the declared exceptions
  ArrayReadByteBuffer_MetainfoWrapper::ArrayReadByteBuffer_method_ArrayReadByteBuffer_INLRbyteArray__LRArrayReadByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayReadByteBuffer_methods_ArrayReadByteBuffer_INLRbyteArray_I_LRArrayReadByteBuffer__arg_ba = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ba", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayReadByteBuffer_methods_ArrayReadByteBuffer_INLRbyteArray_I_LRArrayReadByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayReadByteBuffer_methods_ArrayReadByteBuffer_INLRbyteArray_I_LRArrayReadByteBuffer__args[] = 
{
  &ArrayReadByteBuffer_methods_ArrayReadByteBuffer_INLRbyteArray_I_LRArrayReadByteBuffer__arg_ba,
  &ArrayReadByteBuffer_methods_ArrayReadByteBuffer_INLRbyteArray_I_LRArrayReadByteBuffer__arg_start,
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayReadByteBuffer_methods_ArrayReadByteBuffer_INLRbyteArray_I_LRArrayReadByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayReadByteBuffer_method_ArrayReadByteBuffer_INLRbyteArray_I_LRArrayReadByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ArrayReadByteBuffer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ArrayReadByteBuffer::clazzInfo(), // return type
  "_2_ArrayReadByteBuffer", // alternative name of method
  -1, // altlabelHashCode
  ArrayReadByteBuffer_methods_ArrayReadByteBuffer_INLRbyteArray_I_LRArrayReadByteBuffer__args, // the arguments
  0, //arguments count
  ArrayReadByteBuffer_methods_ArrayReadByteBuffer_INLRbyteArray_I_LRArrayReadByteBuffer__exceptions, // the declared exceptions
  ArrayReadByteBuffer_MetainfoWrapper::ArrayReadByteBuffer_method_ArrayReadByteBuffer_INLRbyteArray_I_LRArrayReadByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayReadByteBuffer_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayReadByteBuffer_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayReadByteBuffer_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_d_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ArrayReadByteBuffer_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ArrayReadByteBuffer_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ArrayReadByteBuffer_MetainfoWrapper::ArrayReadByteBuffer_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayReadByteBuffer_methods_clone__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayReadByteBuffer_methods_clone__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayReadByteBuffer_method_clone__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_3_clone", // alternative name of method
  -1, // altlabelHashCode
  ArrayReadByteBuffer_methods_clone__LRObject__args, // the arguments
  0, //arguments count
  ArrayReadByteBuffer_methods_clone__LRObject__exceptions, // the declared exceptions
  ArrayReadByteBuffer_MetainfoWrapper::ArrayReadByteBuffer_method_clone__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayReadByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayReadByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__arg_end = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "end", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayReadByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__arg_sliceType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "sliceType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayReadByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__args[] = 
{
  &ArrayReadByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__arg_start,
  &ArrayReadByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__arg_end,
  &ArrayReadByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__arg_sliceType,
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayReadByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayReadByteBuffer_method_createReadSlice_III_LRReadByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createReadSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadByteBuffer::clazzInfo(), // return type
  "_6_createReadSlice", // alternative name of method
  -1, // altlabelHashCode
  ArrayReadByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__args, // the arguments
  0, //arguments count
  ArrayReadByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__exceptions, // the declared exceptions
  ArrayReadByteBuffer_MetainfoWrapper::ArrayReadByteBuffer_method_createReadSlice_III_LRReadByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayReadByteBuffer_methods_createReadSlice__LRReadByteBuffer__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayReadByteBuffer_methods_createReadSlice__LRReadByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayReadByteBuffer_method_createReadSlice__LRReadByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "createReadSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadByteBuffer::clazzInfo(), // return type
  "_7_createReadSlice", // alternative name of method
  -1, // altlabelHashCode
  ArrayReadByteBuffer_methods_createReadSlice__LRReadByteBuffer__args, // the arguments
  0, //arguments count
  ArrayReadByteBuffer_methods_createReadSlice__LRReadByteBuffer__exceptions, // the declared exceptions
  ArrayReadByteBuffer_MetainfoWrapper::ArrayReadByteBuffer_method_createReadSlice__LRReadByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayReadByteBuffer_methods_createReadSlice_I_LRReadByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayReadByteBuffer_methods_createReadSlice_I_LRReadByteBuffer__args[] = 
{
  &ArrayReadByteBuffer_methods_createReadSlice_I_LRReadByteBuffer__arg_start,
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayReadByteBuffer_methods_createReadSlice_I_LRReadByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayReadByteBuffer_method_createReadSlice_I_LRReadByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "createReadSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadByteBuffer::clazzInfo(), // return type
  "_8_createReadSlice", // alternative name of method
  -1, // altlabelHashCode
  ArrayReadByteBuffer_methods_createReadSlice_I_LRReadByteBuffer__args, // the arguments
  0, //arguments count
  ArrayReadByteBuffer_methods_createReadSlice_I_LRReadByteBuffer__exceptions, // the declared exceptions
  ArrayReadByteBuffer_MetainfoWrapper::ArrayReadByteBuffer_method_createReadSlice_I_LRReadByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayReadByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayReadByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__arg_end = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "end", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayReadByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__args[] = 
{
  &ArrayReadByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__arg_start,
  &ArrayReadByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__arg_end,
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayReadByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayReadByteBuffer_method_createReadSlice_II_LRReadByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "createReadSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadByteBuffer::clazzInfo(), // return type
  "_9_createReadSlice", // alternative name of method
  -1, // altlabelHashCode
  ArrayReadByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__args, // the arguments
  0, //arguments count
  ArrayReadByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__exceptions, // the declared exceptions
  ArrayReadByteBuffer_MetainfoWrapper::ArrayReadByteBuffer_method_createReadSlice_II_LRReadByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayReadByteBuffer_methods_endOffset__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayReadByteBuffer_methods_endOffset__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayReadByteBuffer_method_endOffset__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "endOffset", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_b_endOffset", // alternative name of method
  -1, // altlabelHashCode
  ArrayReadByteBuffer_methods_endOffset__I_args, // the arguments
  0, //arguments count
  ArrayReadByteBuffer_methods_endOffset__I_exceptions, // the declared exceptions
  ArrayReadByteBuffer_MetainfoWrapper::ArrayReadByteBuffer_method_endOffset__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayReadByteBuffer_methods_get_I_B_arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayReadByteBuffer_methods_get_I_B_args[] = 
{
  &ArrayReadByteBuffer_methods_get_I_B_arg_idx,
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayReadByteBuffer_methods_get_I_B_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayReadByteBuffer_method_get_I_B = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "get", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz(), // return type
  "_5_get", // alternative name of method
  -1, // altlabelHashCode
  ArrayReadByteBuffer_methods_get_I_B_args, // the arguments
  0, //arguments count
  ArrayReadByteBuffer_methods_get_I_B_exceptions, // the declared exceptions
  ArrayReadByteBuffer_MetainfoWrapper::ArrayReadByteBuffer_method_get_I_B_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayReadByteBuffer_methods_length__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayReadByteBuffer_methods_length__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayReadByteBuffer_method_length__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "length", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_4_length", // alternative name of method
  -1, // altlabelHashCode
  ArrayReadByteBuffer_methods_length__I_args, // the arguments
  0, //arguments count
  ArrayReadByteBuffer_methods_length__I_exceptions, // the declared exceptions
  ArrayReadByteBuffer_MetainfoWrapper::ArrayReadByteBuffer_method_length__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayReadByteBuffer_methods_startOffset__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayReadByteBuffer_methods_startOffset__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayReadByteBuffer_method_startOffset__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "startOffset", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_a_startOffset", // alternative name of method
  -1, // altlabelHashCode
  ArrayReadByteBuffer_methods_startOffset__I_args, // the arguments
  0, //arguments count
  ArrayReadByteBuffer_methods_startOffset__I_exceptions, // the declared exceptions
  ArrayReadByteBuffer_MetainfoWrapper::ArrayReadByteBuffer_method_startOffset__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayReadByteBuffer_methods_supportNativeIterator__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayReadByteBuffer_methods_supportNativeIterator__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayReadByteBuffer_method_supportNativeIterator__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportNativeIterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_c_supportNativeIterator", // alternative name of method
  -1, // altlabelHashCode
  ArrayReadByteBuffer_methods_supportNativeIterator__Z_args, // the arguments
  0, //arguments count
  ArrayReadByteBuffer_methods_supportNativeIterator__Z_exceptions, // the declared exceptions
  ArrayReadByteBuffer_MetainfoWrapper::ArrayReadByteBuffer_method_supportNativeIterator__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ArrayReadByteBuffer_methods[] = 
{
  &ArrayReadByteBuffer_method_ArrayReadByteBuffer_INLRbyteArray_II_LRArrayReadByteBuffer_,
  &ArrayReadByteBuffer_method_ArrayReadByteBuffer_INLRbyteArray__LRArrayReadByteBuffer_,
  &ArrayReadByteBuffer_method_ArrayReadByteBuffer_INLRbyteArray_I_LRArrayReadByteBuffer_,
  &ArrayReadByteBuffer_method_GetClass__L_acdk_lang_RClass_,
  &ArrayReadByteBuffer_method_clone__LRObject_,
  &ArrayReadByteBuffer_method_createReadSlice_III_LRReadByteBuffer_,
  &ArrayReadByteBuffer_method_createReadSlice__LRReadByteBuffer_,
  &ArrayReadByteBuffer_method_createReadSlice_I_LRReadByteBuffer_,
  &ArrayReadByteBuffer_method_createReadSlice_II_LRReadByteBuffer_,
  &ArrayReadByteBuffer_method_endOffset__I,
  &ArrayReadByteBuffer_method_get_I_B,
  &ArrayReadByteBuffer_method_length__I,
  &ArrayReadByteBuffer_method_startOffset__I,
  &ArrayReadByteBuffer_method_supportNativeIterator__Z,
  0
};


struct ArrayReadByteBuffer_MetaInfoInitializer
{  ArrayReadByteBuffer_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ArrayReadByteBuffer::clazzInfo();
    ci->fields =  _ArrayReadByteBuffer_fields;
    ci->methods =  _ArrayReadByteBuffer_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ArrayReadByteBuffer_MetaInfoInitializer ArrayReadByteBuffer_MetaInfoInitializer_staticinstance__;


struct ArrayReadByteBuffer_clazzInfo_ClazzAttributesResInitializer9
{
  ArrayReadByteBuffer_clazzInfo_ClazzAttributesResInitializer9()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&ArrayReadByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__arg_sliceType, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)SliceTypeMetaInf::GetEnumInfo()));
  }
};

ArrayReadByteBuffer_clazzInfo_ClazzAttributesResInitializer9 ArrayReadByteBuffer_clazzInfo_ClazzAttributesResInitializer9_instance;



} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
ArrayReadWriteByteBuffer_create_array(int length)
{
  return new ObjectArrayImpl<RArrayReadWriteByteBuffer>(length);
}

//static
::acdk::lang::RObject
ArrayReadWriteByteBuffer_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ArrayReadWriteByteBuffer_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayReadWriteByteBuffer_method_ArrayReadWriteByteBuffer_INLRbyteArray_II_LRArrayReadWriteByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ArrayReadWriteByteBuffer(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayReadWriteByteBuffer_method_ArrayReadWriteByteBuffer_INLRbyteArray__LRArrayReadWriteByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ArrayReadWriteByteBuffer(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayReadWriteByteBuffer_method_ArrayReadWriteByteBuffer_INLRbyteArray_I_LRArrayReadWriteByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ArrayReadWriteByteBuffer(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayReadWriteByteBuffer_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ArrayReadWriteByteBuffer::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayReadWriteByteBuffer_method_clone__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ArrayReadWriteByteBuffer* This = dmi_cast<ArrayReadWriteByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ArrayReadWriteByteBuffer::clone();
    else
        ret = (::acdk::lang::RObject)This->clone();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayReadWriteByteBuffer_method_createReadWriteSlice_II_LRReadWriteByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ArrayReadWriteByteBuffer* This = dmi_cast<ArrayReadWriteByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ArrayReadWriteByteBuffer::createReadWriteSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->createReadWriteSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayReadWriteByteBuffer_method_createReadWriteSlice__LRReadWriteByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ArrayReadWriteByteBuffer* This = dmi_cast<ArrayReadWriteByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ArrayReadWriteByteBuffer::createReadWriteSlice();
    else
        ret = (::acdk::lang::RObject)This->createReadWriteSlice();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayReadWriteByteBuffer_method_createReadWriteSlice_I_LRReadWriteByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ArrayReadWriteByteBuffer* This = dmi_cast<ArrayReadWriteByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ArrayReadWriteByteBuffer::createReadWriteSlice(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->createReadWriteSlice(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayReadWriteByteBuffer_method_createReadWriteSlice_III_LRReadWriteByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ArrayReadWriteByteBuffer* This = dmi_cast<ArrayReadWriteByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ArrayReadWriteByteBuffer::createReadWriteSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), (SliceType)::acdk::lang::dmi::castTo<int>(args[2], dc));
    else
        ret = (::acdk::lang::RObject)This->createReadWriteSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), (SliceType)::acdk::lang::dmi::castTo<int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayReadWriteByteBuffer_method_createWriteSlice__LRWriteByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ArrayReadWriteByteBuffer* This = dmi_cast<ArrayReadWriteByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ArrayReadWriteByteBuffer::createWriteSlice();
    else
        ret = (::acdk::lang::RObject)This->createWriteSlice();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayReadWriteByteBuffer_method_createWriteSlice_I_LRWriteByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ArrayReadWriteByteBuffer* This = dmi_cast<ArrayReadWriteByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ArrayReadWriteByteBuffer::createWriteSlice(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->createWriteSlice(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayReadWriteByteBuffer_method_createWriteSlice_III_LRWriteByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ArrayReadWriteByteBuffer* This = dmi_cast<ArrayReadWriteByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ArrayReadWriteByteBuffer::createWriteSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), (SliceType)::acdk::lang::dmi::castTo<int>(args[2], dc));
    else
        ret = (::acdk::lang::RObject)This->createWriteSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), (SliceType)::acdk::lang::dmi::castTo<int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayReadWriteByteBuffer_method_createWriteSlice_II_LRWriteByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ArrayReadWriteByteBuffer* This = dmi_cast<ArrayReadWriteByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ArrayReadWriteByteBuffer::createWriteSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->createWriteSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayReadWriteByteBuffer_method_set_IB_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ArrayReadWriteByteBuffer* This = dmi_cast<ArrayReadWriteByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ArrayReadWriteByteBuffer::set(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< byte>(args[1], dc));
    else
        This->set(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< byte>(args[1], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ArrayReadWriteByteBuffer_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayReadWriteByteBuffer_methods_ArrayReadWriteByteBuffer_INLRbyteArray_II_LRArrayReadWriteByteBuffer__arg_ba = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ba", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayReadWriteByteBuffer_methods_ArrayReadWriteByteBuffer_INLRbyteArray_II_LRArrayReadWriteByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayReadWriteByteBuffer_methods_ArrayReadWriteByteBuffer_INLRbyteArray_II_LRArrayReadWriteByteBuffer__arg_end = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "end", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayReadWriteByteBuffer_methods_ArrayReadWriteByteBuffer_INLRbyteArray_II_LRArrayReadWriteByteBuffer__args[] = 
{
  &ArrayReadWriteByteBuffer_methods_ArrayReadWriteByteBuffer_INLRbyteArray_II_LRArrayReadWriteByteBuffer__arg_ba,
  &ArrayReadWriteByteBuffer_methods_ArrayReadWriteByteBuffer_INLRbyteArray_II_LRArrayReadWriteByteBuffer__arg_start,
  &ArrayReadWriteByteBuffer_methods_ArrayReadWriteByteBuffer_INLRbyteArray_II_LRArrayReadWriteByteBuffer__arg_end,
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayReadWriteByteBuffer_methods_ArrayReadWriteByteBuffer_INLRbyteArray_II_LRArrayReadWriteByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayReadWriteByteBuffer_method_ArrayReadWriteByteBuffer_INLRbyteArray_II_LRArrayReadWriteByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ArrayReadWriteByteBuffer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ArrayReadWriteByteBuffer::clazzInfo(), // return type
  "_0_ArrayReadWriteByteBuffer", // alternative name of method
  -1, // altlabelHashCode
  ArrayReadWriteByteBuffer_methods_ArrayReadWriteByteBuffer_INLRbyteArray_II_LRArrayReadWriteByteBuffer__args, // the arguments
  0, //arguments count
  ArrayReadWriteByteBuffer_methods_ArrayReadWriteByteBuffer_INLRbyteArray_II_LRArrayReadWriteByteBuffer__exceptions, // the declared exceptions
  ArrayReadWriteByteBuffer_MetainfoWrapper::ArrayReadWriteByteBuffer_method_ArrayReadWriteByteBuffer_INLRbyteArray_II_LRArrayReadWriteByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayReadWriteByteBuffer_methods_ArrayReadWriteByteBuffer_INLRbyteArray__LRArrayReadWriteByteBuffer__arg_ba = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ba", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayReadWriteByteBuffer_methods_ArrayReadWriteByteBuffer_INLRbyteArray__LRArrayReadWriteByteBuffer__args[] = 
{
  &ArrayReadWriteByteBuffer_methods_ArrayReadWriteByteBuffer_INLRbyteArray__LRArrayReadWriteByteBuffer__arg_ba,
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayReadWriteByteBuffer_methods_ArrayReadWriteByteBuffer_INLRbyteArray__LRArrayReadWriteByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayReadWriteByteBuffer_method_ArrayReadWriteByteBuffer_INLRbyteArray__LRArrayReadWriteByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ArrayReadWriteByteBuffer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ArrayReadWriteByteBuffer::clazzInfo(), // return type
  "_1_ArrayReadWriteByteBuffer", // alternative name of method
  -1, // altlabelHashCode
  ArrayReadWriteByteBuffer_methods_ArrayReadWriteByteBuffer_INLRbyteArray__LRArrayReadWriteByteBuffer__args, // the arguments
  0, //arguments count
  ArrayReadWriteByteBuffer_methods_ArrayReadWriteByteBuffer_INLRbyteArray__LRArrayReadWriteByteBuffer__exceptions, // the declared exceptions
  ArrayReadWriteByteBuffer_MetainfoWrapper::ArrayReadWriteByteBuffer_method_ArrayReadWriteByteBuffer_INLRbyteArray__LRArrayReadWriteByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayReadWriteByteBuffer_methods_ArrayReadWriteByteBuffer_INLRbyteArray_I_LRArrayReadWriteByteBuffer__arg_ba = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ba", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayReadWriteByteBuffer_methods_ArrayReadWriteByteBuffer_INLRbyteArray_I_LRArrayReadWriteByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayReadWriteByteBuffer_methods_ArrayReadWriteByteBuffer_INLRbyteArray_I_LRArrayReadWriteByteBuffer__args[] = 
{
  &ArrayReadWriteByteBuffer_methods_ArrayReadWriteByteBuffer_INLRbyteArray_I_LRArrayReadWriteByteBuffer__arg_ba,
  &ArrayReadWriteByteBuffer_methods_ArrayReadWriteByteBuffer_INLRbyteArray_I_LRArrayReadWriteByteBuffer__arg_start,
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayReadWriteByteBuffer_methods_ArrayReadWriteByteBuffer_INLRbyteArray_I_LRArrayReadWriteByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayReadWriteByteBuffer_method_ArrayReadWriteByteBuffer_INLRbyteArray_I_LRArrayReadWriteByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ArrayReadWriteByteBuffer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ArrayReadWriteByteBuffer::clazzInfo(), // return type
  "_2_ArrayReadWriteByteBuffer", // alternative name of method
  -1, // altlabelHashCode
  ArrayReadWriteByteBuffer_methods_ArrayReadWriteByteBuffer_INLRbyteArray_I_LRArrayReadWriteByteBuffer__args, // the arguments
  0, //arguments count
  ArrayReadWriteByteBuffer_methods_ArrayReadWriteByteBuffer_INLRbyteArray_I_LRArrayReadWriteByteBuffer__exceptions, // the declared exceptions
  ArrayReadWriteByteBuffer_MetainfoWrapper::ArrayReadWriteByteBuffer_method_ArrayReadWriteByteBuffer_INLRbyteArray_I_LRArrayReadWriteByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayReadWriteByteBuffer_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayReadWriteByteBuffer_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayReadWriteByteBuffer_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_d_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ArrayReadWriteByteBuffer_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ArrayReadWriteByteBuffer_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ArrayReadWriteByteBuffer_MetainfoWrapper::ArrayReadWriteByteBuffer_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayReadWriteByteBuffer_methods_clone__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayReadWriteByteBuffer_methods_clone__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayReadWriteByteBuffer_method_clone__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_3_clone", // alternative name of method
  -1, // altlabelHashCode
  ArrayReadWriteByteBuffer_methods_clone__LRObject__args, // the arguments
  0, //arguments count
  ArrayReadWriteByteBuffer_methods_clone__LRObject__exceptions, // the declared exceptions
  ArrayReadWriteByteBuffer_MetainfoWrapper::ArrayReadWriteByteBuffer_method_clone__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayReadWriteByteBuffer_methods_createReadWriteSlice_II_LRReadWriteByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayReadWriteByteBuffer_methods_createReadWriteSlice_II_LRReadWriteByteBuffer__arg_end = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "end", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayReadWriteByteBuffer_methods_createReadWriteSlice_II_LRReadWriteByteBuffer__args[] = 
{
  &ArrayReadWriteByteBuffer_methods_createReadWriteSlice_II_LRReadWriteByteBuffer__arg_start,
  &ArrayReadWriteByteBuffer_methods_createReadWriteSlice_II_LRReadWriteByteBuffer__arg_end,
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayReadWriteByteBuffer_methods_createReadWriteSlice_II_LRReadWriteByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayReadWriteByteBuffer_method_createReadWriteSlice_II_LRReadWriteByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "createReadWriteSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadWriteByteBuffer::clazzInfo(), // return type
  "_c_createReadWriteSlice", // alternative name of method
  -1, // altlabelHashCode
  ArrayReadWriteByteBuffer_methods_createReadWriteSlice_II_LRReadWriteByteBuffer__args, // the arguments
  0, //arguments count
  ArrayReadWriteByteBuffer_methods_createReadWriteSlice_II_LRReadWriteByteBuffer__exceptions, // the declared exceptions
  ArrayReadWriteByteBuffer_MetainfoWrapper::ArrayReadWriteByteBuffer_method_createReadWriteSlice_II_LRReadWriteByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayReadWriteByteBuffer_methods_createReadWriteSlice__LRReadWriteByteBuffer__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayReadWriteByteBuffer_methods_createReadWriteSlice__LRReadWriteByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayReadWriteByteBuffer_method_createReadWriteSlice__LRReadWriteByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "createReadWriteSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadWriteByteBuffer::clazzInfo(), // return type
  "_a_createReadWriteSlice", // alternative name of method
  -1, // altlabelHashCode
  ArrayReadWriteByteBuffer_methods_createReadWriteSlice__LRReadWriteByteBuffer__args, // the arguments
  0, //arguments count
  ArrayReadWriteByteBuffer_methods_createReadWriteSlice__LRReadWriteByteBuffer__exceptions, // the declared exceptions
  ArrayReadWriteByteBuffer_MetainfoWrapper::ArrayReadWriteByteBuffer_method_createReadWriteSlice__LRReadWriteByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayReadWriteByteBuffer_methods_createReadWriteSlice_I_LRReadWriteByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayReadWriteByteBuffer_methods_createReadWriteSlice_I_LRReadWriteByteBuffer__args[] = 
{
  &ArrayReadWriteByteBuffer_methods_createReadWriteSlice_I_LRReadWriteByteBuffer__arg_start,
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayReadWriteByteBuffer_methods_createReadWriteSlice_I_LRReadWriteByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayReadWriteByteBuffer_method_createReadWriteSlice_I_LRReadWriteByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "createReadWriteSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadWriteByteBuffer::clazzInfo(), // return type
  "_b_createReadWriteSlice", // alternative name of method
  -1, // altlabelHashCode
  ArrayReadWriteByteBuffer_methods_createReadWriteSlice_I_LRReadWriteByteBuffer__args, // the arguments
  0, //arguments count
  ArrayReadWriteByteBuffer_methods_createReadWriteSlice_I_LRReadWriteByteBuffer__exceptions, // the declared exceptions
  ArrayReadWriteByteBuffer_MetainfoWrapper::ArrayReadWriteByteBuffer_method_createReadWriteSlice_I_LRReadWriteByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayReadWriteByteBuffer_methods_createReadWriteSlice_III_LRReadWriteByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayReadWriteByteBuffer_methods_createReadWriteSlice_III_LRReadWriteByteBuffer__arg_end = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "end", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayReadWriteByteBuffer_methods_createReadWriteSlice_III_LRReadWriteByteBuffer__arg_sliceType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "sliceType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayReadWriteByteBuffer_methods_createReadWriteSlice_III_LRReadWriteByteBuffer__args[] = 
{
  &ArrayReadWriteByteBuffer_methods_createReadWriteSlice_III_LRReadWriteByteBuffer__arg_start,
  &ArrayReadWriteByteBuffer_methods_createReadWriteSlice_III_LRReadWriteByteBuffer__arg_end,
  &ArrayReadWriteByteBuffer_methods_createReadWriteSlice_III_LRReadWriteByteBuffer__arg_sliceType,
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayReadWriteByteBuffer_methods_createReadWriteSlice_III_LRReadWriteByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayReadWriteByteBuffer_method_createReadWriteSlice_III_LRReadWriteByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createReadWriteSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadWriteByteBuffer::clazzInfo(), // return type
  "_9_createReadWriteSlice", // alternative name of method
  -1, // altlabelHashCode
  ArrayReadWriteByteBuffer_methods_createReadWriteSlice_III_LRReadWriteByteBuffer__args, // the arguments
  0, //arguments count
  ArrayReadWriteByteBuffer_methods_createReadWriteSlice_III_LRReadWriteByteBuffer__exceptions, // the declared exceptions
  ArrayReadWriteByteBuffer_MetainfoWrapper::ArrayReadWriteByteBuffer_method_createReadWriteSlice_III_LRReadWriteByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayReadWriteByteBuffer_methods_createWriteSlice__LRWriteByteBuffer__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayReadWriteByteBuffer_methods_createWriteSlice__LRWriteByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayReadWriteByteBuffer_method_createWriteSlice__LRWriteByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "createWriteSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriteByteBuffer::clazzInfo(), // return type
  "_6_createWriteSlice", // alternative name of method
  -1, // altlabelHashCode
  ArrayReadWriteByteBuffer_methods_createWriteSlice__LRWriteByteBuffer__args, // the arguments
  0, //arguments count
  ArrayReadWriteByteBuffer_methods_createWriteSlice__LRWriteByteBuffer__exceptions, // the declared exceptions
  ArrayReadWriteByteBuffer_MetainfoWrapper::ArrayReadWriteByteBuffer_method_createWriteSlice__LRWriteByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayReadWriteByteBuffer_methods_createWriteSlice_I_LRWriteByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayReadWriteByteBuffer_methods_createWriteSlice_I_LRWriteByteBuffer__args[] = 
{
  &ArrayReadWriteByteBuffer_methods_createWriteSlice_I_LRWriteByteBuffer__arg_start,
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayReadWriteByteBuffer_methods_createWriteSlice_I_LRWriteByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayReadWriteByteBuffer_method_createWriteSlice_I_LRWriteByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "createWriteSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriteByteBuffer::clazzInfo(), // return type
  "_7_createWriteSlice", // alternative name of method
  -1, // altlabelHashCode
  ArrayReadWriteByteBuffer_methods_createWriteSlice_I_LRWriteByteBuffer__args, // the arguments
  0, //arguments count
  ArrayReadWriteByteBuffer_methods_createWriteSlice_I_LRWriteByteBuffer__exceptions, // the declared exceptions
  ArrayReadWriteByteBuffer_MetainfoWrapper::ArrayReadWriteByteBuffer_method_createWriteSlice_I_LRWriteByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayReadWriteByteBuffer_methods_createWriteSlice_III_LRWriteByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayReadWriteByteBuffer_methods_createWriteSlice_III_LRWriteByteBuffer__arg_end = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "end", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayReadWriteByteBuffer_methods_createWriteSlice_III_LRWriteByteBuffer__arg_sliceType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "sliceType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayReadWriteByteBuffer_methods_createWriteSlice_III_LRWriteByteBuffer__args[] = 
{
  &ArrayReadWriteByteBuffer_methods_createWriteSlice_III_LRWriteByteBuffer__arg_start,
  &ArrayReadWriteByteBuffer_methods_createWriteSlice_III_LRWriteByteBuffer__arg_end,
  &ArrayReadWriteByteBuffer_methods_createWriteSlice_III_LRWriteByteBuffer__arg_sliceType,
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayReadWriteByteBuffer_methods_createWriteSlice_III_LRWriteByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayReadWriteByteBuffer_method_createWriteSlice_III_LRWriteByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createWriteSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriteByteBuffer::clazzInfo(), // return type
  "_5_createWriteSlice", // alternative name of method
  -1, // altlabelHashCode
  ArrayReadWriteByteBuffer_methods_createWriteSlice_III_LRWriteByteBuffer__args, // the arguments
  0, //arguments count
  ArrayReadWriteByteBuffer_methods_createWriteSlice_III_LRWriteByteBuffer__exceptions, // the declared exceptions
  ArrayReadWriteByteBuffer_MetainfoWrapper::ArrayReadWriteByteBuffer_method_createWriteSlice_III_LRWriteByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayReadWriteByteBuffer_methods_createWriteSlice_II_LRWriteByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayReadWriteByteBuffer_methods_createWriteSlice_II_LRWriteByteBuffer__arg_end = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "end", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayReadWriteByteBuffer_methods_createWriteSlice_II_LRWriteByteBuffer__args[] = 
{
  &ArrayReadWriteByteBuffer_methods_createWriteSlice_II_LRWriteByteBuffer__arg_start,
  &ArrayReadWriteByteBuffer_methods_createWriteSlice_II_LRWriteByteBuffer__arg_end,
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayReadWriteByteBuffer_methods_createWriteSlice_II_LRWriteByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayReadWriteByteBuffer_method_createWriteSlice_II_LRWriteByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "createWriteSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriteByteBuffer::clazzInfo(), // return type
  "_8_createWriteSlice", // alternative name of method
  -1, // altlabelHashCode
  ArrayReadWriteByteBuffer_methods_createWriteSlice_II_LRWriteByteBuffer__args, // the arguments
  0, //arguments count
  ArrayReadWriteByteBuffer_methods_createWriteSlice_II_LRWriteByteBuffer__exceptions, // the declared exceptions
  ArrayReadWriteByteBuffer_MetainfoWrapper::ArrayReadWriteByteBuffer_method_createWriteSlice_II_LRWriteByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayReadWriteByteBuffer_methods_set_IB_V_arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayReadWriteByteBuffer_methods_set_IB_V_arg_v = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "v", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayReadWriteByteBuffer_methods_set_IB_V_args[] = 
{
  &ArrayReadWriteByteBuffer_methods_set_IB_V_arg_idx,
  &ArrayReadWriteByteBuffer_methods_set_IB_V_arg_v,
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayReadWriteByteBuffer_methods_set_IB_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayReadWriteByteBuffer_method_set_IB_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "set", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_set", // alternative name of method
  -1, // altlabelHashCode
  ArrayReadWriteByteBuffer_methods_set_IB_V_args, // the arguments
  0, //arguments count
  ArrayReadWriteByteBuffer_methods_set_IB_V_exceptions, // the declared exceptions
  ArrayReadWriteByteBuffer_MetainfoWrapper::ArrayReadWriteByteBuffer_method_set_IB_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ArrayReadWriteByteBuffer_methods[] = 
{
  &ArrayReadWriteByteBuffer_method_ArrayReadWriteByteBuffer_INLRbyteArray_II_LRArrayReadWriteByteBuffer_,
  &ArrayReadWriteByteBuffer_method_ArrayReadWriteByteBuffer_INLRbyteArray__LRArrayReadWriteByteBuffer_,
  &ArrayReadWriteByteBuffer_method_ArrayReadWriteByteBuffer_INLRbyteArray_I_LRArrayReadWriteByteBuffer_,
  &ArrayReadWriteByteBuffer_method_GetClass__L_acdk_lang_RClass_,
  &ArrayReadWriteByteBuffer_method_clone__LRObject_,
  &ArrayReadWriteByteBuffer_method_createReadWriteSlice_II_LRReadWriteByteBuffer_,
  &ArrayReadWriteByteBuffer_method_createReadWriteSlice__LRReadWriteByteBuffer_,
  &ArrayReadWriteByteBuffer_method_createReadWriteSlice_I_LRReadWriteByteBuffer_,
  &ArrayReadWriteByteBuffer_method_createReadWriteSlice_III_LRReadWriteByteBuffer_,
  &ArrayReadWriteByteBuffer_method_createWriteSlice__LRWriteByteBuffer_,
  &ArrayReadWriteByteBuffer_method_createWriteSlice_I_LRWriteByteBuffer_,
  &ArrayReadWriteByteBuffer_method_createWriteSlice_III_LRWriteByteBuffer_,
  &ArrayReadWriteByteBuffer_method_createWriteSlice_II_LRWriteByteBuffer_,
  &ArrayReadWriteByteBuffer_method_set_IB_V,
  0
};


struct ArrayReadWriteByteBuffer_MetaInfoInitializer
{  ArrayReadWriteByteBuffer_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ArrayReadWriteByteBuffer::clazzInfo();
    ci->fields =  _ArrayReadWriteByteBuffer_fields;
    ci->methods =  _ArrayReadWriteByteBuffer_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ArrayReadWriteByteBuffer_MetaInfoInitializer ArrayReadWriteByteBuffer_MetaInfoInitializer_staticinstance__;


struct ArrayReadWriteByteBuffer_clazzInfo_ClazzAttributesResInitializer10
{
  ArrayReadWriteByteBuffer_clazzInfo_ClazzAttributesResInitializer10()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&ArrayReadWriteByteBuffer_methods_createWriteSlice_III_LRWriteByteBuffer__arg_sliceType, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)SliceTypeMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&ArrayReadWriteByteBuffer_methods_createReadWriteSlice_III_LRReadWriteByteBuffer__arg_sliceType, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)SliceTypeMetaInf::GetEnumInfo()));
  }
};

ArrayReadWriteByteBuffer_clazzInfo_ClazzAttributesResInitializer10 ArrayReadWriteByteBuffer_clazzInfo_ClazzAttributesResInitializer10_instance;



} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
CoreByteBuffer_create_array(int length)
{
  return new ObjectArrayImpl<RCoreByteBuffer>(length);
}

//static
::acdk::lang::RObject
CoreByteBuffer_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class CoreByteBuffer_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CoreByteBuffer_method_CoreByteBuffer_I_LRCoreByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CoreByteBuffer(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CoreByteBuffer_method_CoreByteBuffer_IIB_LRCoreByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CoreByteBuffer(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< byte>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CoreByteBuffer_method_CoreByteBuffer_II_LRCoreByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CoreByteBuffer(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CoreByteBuffer_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)CoreByteBuffer::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CoreByteBuffer_method_append_B_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CoreByteBuffer* This = dmi_cast<CoreByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CoreByteBuffer::append(::acdk::lang::dmi::castTo< byte>(args[0], dc));
    else
        This->append(::acdk::lang::dmi::castTo< byte>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CoreByteBuffer_method_clone__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CoreByteBuffer* This = dmi_cast<CoreByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->CoreByteBuffer::clone();
    else
        ret = (::acdk::lang::RObject)This->clone();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CoreByteBuffer_method_createReadSlice_III_LRReadByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CoreByteBuffer* This = dmi_cast<CoreByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->CoreByteBuffer::createReadSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), (SliceType)::acdk::lang::dmi::castTo<int>(args[2], dc));
    else
        ret = (::acdk::lang::RObject)This->createReadSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), (SliceType)::acdk::lang::dmi::castTo<int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CoreByteBuffer_method_createReadSlice__LRReadByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CoreByteBuffer* This = dmi_cast<CoreByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->CoreByteBuffer::createReadSlice();
    else
        ret = (::acdk::lang::RObject)This->createReadSlice();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CoreByteBuffer_method_createReadSlice_I_LRReadByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CoreByteBuffer* This = dmi_cast<CoreByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->CoreByteBuffer::createReadSlice(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->createReadSlice(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CoreByteBuffer_method_createReadSlice_II_LRReadByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CoreByteBuffer* This = dmi_cast<CoreByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->CoreByteBuffer::createReadSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->createReadSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CoreByteBuffer_method_createReadWriteSlice_III_LRReadWriteByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CoreByteBuffer* This = dmi_cast<CoreByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->CoreByteBuffer::createReadWriteSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), (SliceType)::acdk::lang::dmi::castTo<int>(args[2], dc));
    else
        ret = (::acdk::lang::RObject)This->createReadWriteSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), (SliceType)::acdk::lang::dmi::castTo<int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CoreByteBuffer_method_createReadWriteSlice__LRReadWriteByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CoreByteBuffer* This = dmi_cast<CoreByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->CoreByteBuffer::createReadWriteSlice();
    else
        ret = (::acdk::lang::RObject)This->createReadWriteSlice();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CoreByteBuffer_method_createReadWriteSlice_I_LRReadWriteByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CoreByteBuffer* This = dmi_cast<CoreByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->CoreByteBuffer::createReadWriteSlice(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->createReadWriteSlice(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CoreByteBuffer_method_createReadWriteSlice_II_LRReadWriteByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CoreByteBuffer* This = dmi_cast<CoreByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->CoreByteBuffer::createReadWriteSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->createReadWriteSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CoreByteBuffer_method_createWriteSlice_III_LRWriteByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CoreByteBuffer* This = dmi_cast<CoreByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->CoreByteBuffer::createWriteSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), (SliceType)::acdk::lang::dmi::castTo<int>(args[2], dc));
    else
        ret = (::acdk::lang::RObject)This->createWriteSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), (SliceType)::acdk::lang::dmi::castTo<int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CoreByteBuffer_method_createWriteSlice__LRWriteByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CoreByteBuffer* This = dmi_cast<CoreByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->CoreByteBuffer::createWriteSlice();
    else
        ret = (::acdk::lang::RObject)This->createWriteSlice();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CoreByteBuffer_method_createWriteSlice_I_LRWriteByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CoreByteBuffer* This = dmi_cast<CoreByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->CoreByteBuffer::createWriteSlice(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->createWriteSlice(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CoreByteBuffer_method_createWriteSlice_II_LRWriteByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CoreByteBuffer* This = dmi_cast<CoreByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->CoreByteBuffer::createWriteSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->createWriteSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CoreByteBuffer_method_deleteAt_I_B_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CoreByteBuffer* This = dmi_cast<CoreByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->CoreByteBuffer::deleteAt(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->deleteAt(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CoreByteBuffer_method_ensureCapacity_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CoreByteBuffer* This = dmi_cast<CoreByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CoreByteBuffer::ensureCapacity(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->ensureCapacity(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CoreByteBuffer_method_get_I_B_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CoreByteBuffer* This = dmi_cast<CoreByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->CoreByteBuffer::get(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->get(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CoreByteBuffer_method_insertAt_IB_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CoreByteBuffer* This = dmi_cast<CoreByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CoreByteBuffer::insertAt(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< byte>(args[1], dc));
    else
        This->insertAt(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< byte>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CoreByteBuffer_method_length__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CoreByteBuffer* This = dmi_cast<CoreByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->CoreByteBuffer::length();
    else
      ret = This->length();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CoreByteBuffer_method_limit__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CoreByteBuffer* This = dmi_cast<CoreByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->CoreByteBuffer::limit();
    else
      ret = This->limit();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CoreByteBuffer_method_pop__B_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CoreByteBuffer* This = dmi_cast<CoreByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->CoreByteBuffer::pop();
    else
      ret = This->pop();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CoreByteBuffer_method_push_B_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CoreByteBuffer* This = dmi_cast<CoreByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CoreByteBuffer::push(::acdk::lang::dmi::castTo< byte>(args[0], dc));
    else
        This->push(::acdk::lang::dmi::castTo< byte>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CoreByteBuffer_method_resize_IB_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CoreByteBuffer* This = dmi_cast<CoreByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CoreByteBuffer::resize(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< byte>(args[1], dc));
    else
        This->resize(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< byte>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CoreByteBuffer_method_resize_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CoreByteBuffer* This = dmi_cast<CoreByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CoreByteBuffer::resize(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->resize(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CoreByteBuffer_method_set_IB_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CoreByteBuffer* This = dmi_cast<CoreByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CoreByteBuffer::set(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< byte>(args[1], dc));
    else
        This->set(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< byte>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CoreByteBuffer_method_supportNativeIterator__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CoreByteBuffer* This = dmi_cast<CoreByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->CoreByteBuffer::supportNativeIterator();
    else
      ret = This->supportNativeIterator();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _CoreByteBuffer_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo CoreByteBuffer_methods_CoreByteBuffer_I_LRCoreByteBuffer__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CoreByteBuffer_methods_CoreByteBuffer_I_LRCoreByteBuffer__args[] = 
{
  &CoreByteBuffer_methods_CoreByteBuffer_I_LRCoreByteBuffer__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* CoreByteBuffer_methods_CoreByteBuffer_I_LRCoreByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CoreByteBuffer_method_CoreByteBuffer_I_LRCoreByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "CoreByteBuffer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CoreByteBuffer::clazzInfo(), // return type
  "_0_CoreByteBuffer", // alternative name of method
  -1, // altlabelHashCode
  CoreByteBuffer_methods_CoreByteBuffer_I_LRCoreByteBuffer__args, // the arguments
  0, //arguments count
  CoreByteBuffer_methods_CoreByteBuffer_I_LRCoreByteBuffer__exceptions, // the declared exceptions
  CoreByteBuffer_MetainfoWrapper::CoreByteBuffer_method_CoreByteBuffer_I_LRCoreByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CoreByteBuffer_methods_CoreByteBuffer_IIB_LRCoreByteBuffer__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CoreByteBuffer_methods_CoreByteBuffer_IIB_LRCoreByteBuffer__arg_initCap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "initCap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CoreByteBuffer_methods_CoreByteBuffer_IIB_LRCoreByteBuffer__arg_fillWith = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "fillWith", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CoreByteBuffer_methods_CoreByteBuffer_IIB_LRCoreByteBuffer__args[] = 
{
  &CoreByteBuffer_methods_CoreByteBuffer_IIB_LRCoreByteBuffer__arg_size,
  &CoreByteBuffer_methods_CoreByteBuffer_IIB_LRCoreByteBuffer__arg_initCap,
  &CoreByteBuffer_methods_CoreByteBuffer_IIB_LRCoreByteBuffer__arg_fillWith,
  0
};

::acdk::lang::dmi::ClazzInfo* CoreByteBuffer_methods_CoreByteBuffer_IIB_LRCoreByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CoreByteBuffer_method_CoreByteBuffer_IIB_LRCoreByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "CoreByteBuffer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CoreByteBuffer::clazzInfo(), // return type
  "_1_CoreByteBuffer", // alternative name of method
  -1, // altlabelHashCode
  CoreByteBuffer_methods_CoreByteBuffer_IIB_LRCoreByteBuffer__args, // the arguments
  0, //arguments count
  CoreByteBuffer_methods_CoreByteBuffer_IIB_LRCoreByteBuffer__exceptions, // the declared exceptions
  CoreByteBuffer_MetainfoWrapper::CoreByteBuffer_method_CoreByteBuffer_IIB_LRCoreByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CoreByteBuffer_methods_CoreByteBuffer_II_LRCoreByteBuffer__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CoreByteBuffer_methods_CoreByteBuffer_II_LRCoreByteBuffer__arg_initCap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "initCap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CoreByteBuffer_methods_CoreByteBuffer_II_LRCoreByteBuffer__args[] = 
{
  &CoreByteBuffer_methods_CoreByteBuffer_II_LRCoreByteBuffer__arg_size,
  &CoreByteBuffer_methods_CoreByteBuffer_II_LRCoreByteBuffer__arg_initCap,
  0
};

::acdk::lang::dmi::ClazzInfo* CoreByteBuffer_methods_CoreByteBuffer_II_LRCoreByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CoreByteBuffer_method_CoreByteBuffer_II_LRCoreByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "CoreByteBuffer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CoreByteBuffer::clazzInfo(), // return type
  "_2_CoreByteBuffer", // alternative name of method
  -1, // altlabelHashCode
  CoreByteBuffer_methods_CoreByteBuffer_II_LRCoreByteBuffer__args, // the arguments
  0, //arguments count
  CoreByteBuffer_methods_CoreByteBuffer_II_LRCoreByteBuffer__exceptions, // the declared exceptions
  CoreByteBuffer_MetainfoWrapper::CoreByteBuffer_method_CoreByteBuffer_II_LRCoreByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CoreByteBuffer_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CoreByteBuffer_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CoreByteBuffer_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_t_GetClass", // alternative name of method
  -1, // altlabelHashCode
  CoreByteBuffer_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  CoreByteBuffer_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  CoreByteBuffer_MetainfoWrapper::CoreByteBuffer_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CoreByteBuffer_methods_append_B_V_arg_t = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "t", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CoreByteBuffer_methods_append_B_V_args[] = 
{
  &CoreByteBuffer_methods_append_B_V_arg_t,
  0
};

::acdk::lang::dmi::ClazzInfo* CoreByteBuffer_methods_append_B_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CoreByteBuffer_method_append_B_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "append", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_k_append", // alternative name of method
  -1, // altlabelHashCode
  CoreByteBuffer_methods_append_B_V_args, // the arguments
  0, //arguments count
  CoreByteBuffer_methods_append_B_V_exceptions, // the declared exceptions
  CoreByteBuffer_MetainfoWrapper::CoreByteBuffer_method_append_B_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CoreByteBuffer_methods_clone__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CoreByteBuffer_methods_clone__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CoreByteBuffer_method_clone__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_3_clone", // alternative name of method
  -1, // altlabelHashCode
  CoreByteBuffer_methods_clone__LRObject__args, // the arguments
  0, //arguments count
  CoreByteBuffer_methods_clone__LRObject__exceptions, // the declared exceptions
  CoreByteBuffer_MetainfoWrapper::CoreByteBuffer_method_clone__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CoreByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CoreByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__arg_end = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "end", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CoreByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__arg_sliceType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "sliceType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CoreByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__args[] = 
{
  &CoreByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__arg_start,
  &CoreByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__arg_end,
  &CoreByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__arg_sliceType,
  0
};

::acdk::lang::dmi::ClazzInfo* CoreByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CoreByteBuffer_method_createReadSlice_III_LRReadByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createReadSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadByteBuffer::clazzInfo(), // return type
  "_8_createReadSlice", // alternative name of method
  -1, // altlabelHashCode
  CoreByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__args, // the arguments
  0, //arguments count
  CoreByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__exceptions, // the declared exceptions
  CoreByteBuffer_MetainfoWrapper::CoreByteBuffer_method_createReadSlice_III_LRReadByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CoreByteBuffer_methods_createReadSlice__LRReadByteBuffer__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CoreByteBuffer_methods_createReadSlice__LRReadByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CoreByteBuffer_method_createReadSlice__LRReadByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "createReadSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadByteBuffer::clazzInfo(), // return type
  "_9_createReadSlice", // alternative name of method
  -1, // altlabelHashCode
  CoreByteBuffer_methods_createReadSlice__LRReadByteBuffer__args, // the arguments
  0, //arguments count
  CoreByteBuffer_methods_createReadSlice__LRReadByteBuffer__exceptions, // the declared exceptions
  CoreByteBuffer_MetainfoWrapper::CoreByteBuffer_method_createReadSlice__LRReadByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CoreByteBuffer_methods_createReadSlice_I_LRReadByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CoreByteBuffer_methods_createReadSlice_I_LRReadByteBuffer__args[] = 
{
  &CoreByteBuffer_methods_createReadSlice_I_LRReadByteBuffer__arg_start,
  0
};

::acdk::lang::dmi::ClazzInfo* CoreByteBuffer_methods_createReadSlice_I_LRReadByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CoreByteBuffer_method_createReadSlice_I_LRReadByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "createReadSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadByteBuffer::clazzInfo(), // return type
  "_a_createReadSlice", // alternative name of method
  -1, // altlabelHashCode
  CoreByteBuffer_methods_createReadSlice_I_LRReadByteBuffer__args, // the arguments
  0, //arguments count
  CoreByteBuffer_methods_createReadSlice_I_LRReadByteBuffer__exceptions, // the declared exceptions
  CoreByteBuffer_MetainfoWrapper::CoreByteBuffer_method_createReadSlice_I_LRReadByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CoreByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CoreByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__arg_end = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "end", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CoreByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__args[] = 
{
  &CoreByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__arg_start,
  &CoreByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__arg_end,
  0
};

::acdk::lang::dmi::ClazzInfo* CoreByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CoreByteBuffer_method_createReadSlice_II_LRReadByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "createReadSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadByteBuffer::clazzInfo(), // return type
  "_b_createReadSlice", // alternative name of method
  -1, // altlabelHashCode
  CoreByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__args, // the arguments
  0, //arguments count
  CoreByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__exceptions, // the declared exceptions
  CoreByteBuffer_MetainfoWrapper::CoreByteBuffer_method_createReadSlice_II_LRReadByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CoreByteBuffer_methods_createReadWriteSlice_III_LRReadWriteByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CoreByteBuffer_methods_createReadWriteSlice_III_LRReadWriteByteBuffer__arg_end = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "end", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CoreByteBuffer_methods_createReadWriteSlice_III_LRReadWriteByteBuffer__arg_sliceType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "sliceType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CoreByteBuffer_methods_createReadWriteSlice_III_LRReadWriteByteBuffer__args[] = 
{
  &CoreByteBuffer_methods_createReadWriteSlice_III_LRReadWriteByteBuffer__arg_start,
  &CoreByteBuffer_methods_createReadWriteSlice_III_LRReadWriteByteBuffer__arg_end,
  &CoreByteBuffer_methods_createReadWriteSlice_III_LRReadWriteByteBuffer__arg_sliceType,
  0
};

::acdk::lang::dmi::ClazzInfo* CoreByteBuffer_methods_createReadWriteSlice_III_LRReadWriteByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CoreByteBuffer_method_createReadWriteSlice_III_LRReadWriteByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createReadWriteSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadWriteByteBuffer::clazzInfo(), // return type
  "_g_createReadWriteSlice", // alternative name of method
  -1, // altlabelHashCode
  CoreByteBuffer_methods_createReadWriteSlice_III_LRReadWriteByteBuffer__args, // the arguments
  0, //arguments count
  CoreByteBuffer_methods_createReadWriteSlice_III_LRReadWriteByteBuffer__exceptions, // the declared exceptions
  CoreByteBuffer_MetainfoWrapper::CoreByteBuffer_method_createReadWriteSlice_III_LRReadWriteByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CoreByteBuffer_methods_createReadWriteSlice__LRReadWriteByteBuffer__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CoreByteBuffer_methods_createReadWriteSlice__LRReadWriteByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CoreByteBuffer_method_createReadWriteSlice__LRReadWriteByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "createReadWriteSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadWriteByteBuffer::clazzInfo(), // return type
  "_h_createReadWriteSlice", // alternative name of method
  -1, // altlabelHashCode
  CoreByteBuffer_methods_createReadWriteSlice__LRReadWriteByteBuffer__args, // the arguments
  0, //arguments count
  CoreByteBuffer_methods_createReadWriteSlice__LRReadWriteByteBuffer__exceptions, // the declared exceptions
  CoreByteBuffer_MetainfoWrapper::CoreByteBuffer_method_createReadWriteSlice__LRReadWriteByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CoreByteBuffer_methods_createReadWriteSlice_I_LRReadWriteByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CoreByteBuffer_methods_createReadWriteSlice_I_LRReadWriteByteBuffer__args[] = 
{
  &CoreByteBuffer_methods_createReadWriteSlice_I_LRReadWriteByteBuffer__arg_start,
  0
};

::acdk::lang::dmi::ClazzInfo* CoreByteBuffer_methods_createReadWriteSlice_I_LRReadWriteByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CoreByteBuffer_method_createReadWriteSlice_I_LRReadWriteByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "createReadWriteSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadWriteByteBuffer::clazzInfo(), // return type
  "_i_createReadWriteSlice", // alternative name of method
  -1, // altlabelHashCode
  CoreByteBuffer_methods_createReadWriteSlice_I_LRReadWriteByteBuffer__args, // the arguments
  0, //arguments count
  CoreByteBuffer_methods_createReadWriteSlice_I_LRReadWriteByteBuffer__exceptions, // the declared exceptions
  CoreByteBuffer_MetainfoWrapper::CoreByteBuffer_method_createReadWriteSlice_I_LRReadWriteByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CoreByteBuffer_methods_createReadWriteSlice_II_LRReadWriteByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CoreByteBuffer_methods_createReadWriteSlice_II_LRReadWriteByteBuffer__arg_end = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "end", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CoreByteBuffer_methods_createReadWriteSlice_II_LRReadWriteByteBuffer__args[] = 
{
  &CoreByteBuffer_methods_createReadWriteSlice_II_LRReadWriteByteBuffer__arg_start,
  &CoreByteBuffer_methods_createReadWriteSlice_II_LRReadWriteByteBuffer__arg_end,
  0
};

::acdk::lang::dmi::ClazzInfo* CoreByteBuffer_methods_createReadWriteSlice_II_LRReadWriteByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CoreByteBuffer_method_createReadWriteSlice_II_LRReadWriteByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "createReadWriteSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadWriteByteBuffer::clazzInfo(), // return type
  "_j_createReadWriteSlice", // alternative name of method
  -1, // altlabelHashCode
  CoreByteBuffer_methods_createReadWriteSlice_II_LRReadWriteByteBuffer__args, // the arguments
  0, //arguments count
  CoreByteBuffer_methods_createReadWriteSlice_II_LRReadWriteByteBuffer__exceptions, // the declared exceptions
  CoreByteBuffer_MetainfoWrapper::CoreByteBuffer_method_createReadWriteSlice_II_LRReadWriteByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CoreByteBuffer_methods_createWriteSlice_III_LRWriteByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CoreByteBuffer_methods_createWriteSlice_III_LRWriteByteBuffer__arg_end = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "end", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CoreByteBuffer_methods_createWriteSlice_III_LRWriteByteBuffer__arg_sliceType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "sliceType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CoreByteBuffer_methods_createWriteSlice_III_LRWriteByteBuffer__args[] = 
{
  &CoreByteBuffer_methods_createWriteSlice_III_LRWriteByteBuffer__arg_start,
  &CoreByteBuffer_methods_createWriteSlice_III_LRWriteByteBuffer__arg_end,
  &CoreByteBuffer_methods_createWriteSlice_III_LRWriteByteBuffer__arg_sliceType,
  0
};

::acdk::lang::dmi::ClazzInfo* CoreByteBuffer_methods_createWriteSlice_III_LRWriteByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CoreByteBuffer_method_createWriteSlice_III_LRWriteByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createWriteSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriteByteBuffer::clazzInfo(), // return type
  "_c_createWriteSlice", // alternative name of method
  -1, // altlabelHashCode
  CoreByteBuffer_methods_createWriteSlice_III_LRWriteByteBuffer__args, // the arguments
  0, //arguments count
  CoreByteBuffer_methods_createWriteSlice_III_LRWriteByteBuffer__exceptions, // the declared exceptions
  CoreByteBuffer_MetainfoWrapper::CoreByteBuffer_method_createWriteSlice_III_LRWriteByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CoreByteBuffer_methods_createWriteSlice__LRWriteByteBuffer__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CoreByteBuffer_methods_createWriteSlice__LRWriteByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CoreByteBuffer_method_createWriteSlice__LRWriteByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "createWriteSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriteByteBuffer::clazzInfo(), // return type
  "_d_createWriteSlice", // alternative name of method
  -1, // altlabelHashCode
  CoreByteBuffer_methods_createWriteSlice__LRWriteByteBuffer__args, // the arguments
  0, //arguments count
  CoreByteBuffer_methods_createWriteSlice__LRWriteByteBuffer__exceptions, // the declared exceptions
  CoreByteBuffer_MetainfoWrapper::CoreByteBuffer_method_createWriteSlice__LRWriteByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CoreByteBuffer_methods_createWriteSlice_I_LRWriteByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CoreByteBuffer_methods_createWriteSlice_I_LRWriteByteBuffer__args[] = 
{
  &CoreByteBuffer_methods_createWriteSlice_I_LRWriteByteBuffer__arg_start,
  0
};

::acdk::lang::dmi::ClazzInfo* CoreByteBuffer_methods_createWriteSlice_I_LRWriteByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CoreByteBuffer_method_createWriteSlice_I_LRWriteByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "createWriteSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriteByteBuffer::clazzInfo(), // return type
  "_e_createWriteSlice", // alternative name of method
  -1, // altlabelHashCode
  CoreByteBuffer_methods_createWriteSlice_I_LRWriteByteBuffer__args, // the arguments
  0, //arguments count
  CoreByteBuffer_methods_createWriteSlice_I_LRWriteByteBuffer__exceptions, // the declared exceptions
  CoreByteBuffer_MetainfoWrapper::CoreByteBuffer_method_createWriteSlice_I_LRWriteByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CoreByteBuffer_methods_createWriteSlice_II_LRWriteByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CoreByteBuffer_methods_createWriteSlice_II_LRWriteByteBuffer__arg_end = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "end", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CoreByteBuffer_methods_createWriteSlice_II_LRWriteByteBuffer__args[] = 
{
  &CoreByteBuffer_methods_createWriteSlice_II_LRWriteByteBuffer__arg_start,
  &CoreByteBuffer_methods_createWriteSlice_II_LRWriteByteBuffer__arg_end,
  0
};

::acdk::lang::dmi::ClazzInfo* CoreByteBuffer_methods_createWriteSlice_II_LRWriteByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CoreByteBuffer_method_createWriteSlice_II_LRWriteByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "createWriteSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriteByteBuffer::clazzInfo(), // return type
  "_f_createWriteSlice", // alternative name of method
  -1, // altlabelHashCode
  CoreByteBuffer_methods_createWriteSlice_II_LRWriteByteBuffer__args, // the arguments
  0, //arguments count
  CoreByteBuffer_methods_createWriteSlice_II_LRWriteByteBuffer__exceptions, // the declared exceptions
  CoreByteBuffer_MetainfoWrapper::CoreByteBuffer_method_createWriteSlice_II_LRWriteByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CoreByteBuffer_methods_deleteAt_I_B_arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CoreByteBuffer_methods_deleteAt_I_B_args[] = 
{
  &CoreByteBuffer_methods_deleteAt_I_B_arg_idx,
  0
};

::acdk::lang::dmi::ClazzInfo* CoreByteBuffer_methods_deleteAt_I_B_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CoreByteBuffer_method_deleteAt_I_B = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deleteAt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz(), // return type
  "_l_deleteAt", // alternative name of method
  -1, // altlabelHashCode
  CoreByteBuffer_methods_deleteAt_I_B_args, // the arguments
  0, //arguments count
  CoreByteBuffer_methods_deleteAt_I_B_exceptions, // the declared exceptions
  CoreByteBuffer_MetainfoWrapper::CoreByteBuffer_method_deleteAt_I_B_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CoreByteBuffer_methods_ensureCapacity_I_V_arg_cap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "cap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CoreByteBuffer_methods_ensureCapacity_I_V_args[] = 
{
  &CoreByteBuffer_methods_ensureCapacity_I_V_arg_cap,
  0
};

::acdk::lang::dmi::ClazzInfo* CoreByteBuffer_methods_ensureCapacity_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CoreByteBuffer_method_ensureCapacity_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ensureCapacity", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_q_ensureCapacity", // alternative name of method
  -1, // altlabelHashCode
  CoreByteBuffer_methods_ensureCapacity_I_V_args, // the arguments
  0, //arguments count
  CoreByteBuffer_methods_ensureCapacity_I_V_exceptions, // the declared exceptions
  CoreByteBuffer_MetainfoWrapper::CoreByteBuffer_method_ensureCapacity_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CoreByteBuffer_methods_get_I_B_arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CoreByteBuffer_methods_get_I_B_args[] = 
{
  &CoreByteBuffer_methods_get_I_B_arg_idx,
  0
};

::acdk::lang::dmi::ClazzInfo* CoreByteBuffer_methods_get_I_B_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CoreByteBuffer_method_get_I_B = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "get", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz(), // return type
  "_6_get", // alternative name of method
  -1, // altlabelHashCode
  CoreByteBuffer_methods_get_I_B_args, // the arguments
  0, //arguments count
  CoreByteBuffer_methods_get_I_B_exceptions, // the declared exceptions
  CoreByteBuffer_MetainfoWrapper::CoreByteBuffer_method_get_I_B_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CoreByteBuffer_methods_insertAt_IB_V_arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CoreByteBuffer_methods_insertAt_IB_V_arg_t = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "t", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CoreByteBuffer_methods_insertAt_IB_V_args[] = 
{
  &CoreByteBuffer_methods_insertAt_IB_V_arg_idx,
  &CoreByteBuffer_methods_insertAt_IB_V_arg_t,
  0
};

::acdk::lang::dmi::ClazzInfo* CoreByteBuffer_methods_insertAt_IB_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CoreByteBuffer_method_insertAt_IB_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insertAt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_m_insertAt", // alternative name of method
  -1, // altlabelHashCode
  CoreByteBuffer_methods_insertAt_IB_V_args, // the arguments
  0, //arguments count
  CoreByteBuffer_methods_insertAt_IB_V_exceptions, // the declared exceptions
  CoreByteBuffer_MetainfoWrapper::CoreByteBuffer_method_insertAt_IB_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CoreByteBuffer_methods_length__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CoreByteBuffer_methods_length__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CoreByteBuffer_method_length__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "length", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_length", // alternative name of method
  -1, // altlabelHashCode
  CoreByteBuffer_methods_length__I_args, // the arguments
  0, //arguments count
  CoreByteBuffer_methods_length__I_exceptions, // the declared exceptions
  CoreByteBuffer_MetainfoWrapper::CoreByteBuffer_method_length__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CoreByteBuffer_methods_limit__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CoreByteBuffer_methods_limit__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CoreByteBuffer_method_limit__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "limit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_n_limit", // alternative name of method
  -1, // altlabelHashCode
  CoreByteBuffer_methods_limit__I_args, // the arguments
  0, //arguments count
  CoreByteBuffer_methods_limit__I_exceptions, // the declared exceptions
  CoreByteBuffer_MetainfoWrapper::CoreByteBuffer_method_limit__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CoreByteBuffer_methods_pop__B_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CoreByteBuffer_methods_pop__B_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CoreByteBuffer_method_pop__B = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "pop", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz(), // return type
  "_s_pop", // alternative name of method
  -1, // altlabelHashCode
  CoreByteBuffer_methods_pop__B_args, // the arguments
  0, //arguments count
  CoreByteBuffer_methods_pop__B_exceptions, // the declared exceptions
  CoreByteBuffer_MetainfoWrapper::CoreByteBuffer_method_pop__B_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CoreByteBuffer_methods_push_B_V_arg_t = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "t", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CoreByteBuffer_methods_push_B_V_args[] = 
{
  &CoreByteBuffer_methods_push_B_V_arg_t,
  0
};

::acdk::lang::dmi::ClazzInfo* CoreByteBuffer_methods_push_B_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CoreByteBuffer_method_push_B_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "push", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_r_push", // alternative name of method
  -1, // altlabelHashCode
  CoreByteBuffer_methods_push_B_V_args, // the arguments
  0, //arguments count
  CoreByteBuffer_methods_push_B_V_exceptions, // the declared exceptions
  CoreByteBuffer_MetainfoWrapper::CoreByteBuffer_method_push_B_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CoreByteBuffer_methods_resize_IB_V_arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CoreByteBuffer_methods_resize_IB_V_arg_fill = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "fill", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CoreByteBuffer_methods_resize_IB_V_args[] = 
{
  &CoreByteBuffer_methods_resize_IB_V_arg_size,
  &CoreByteBuffer_methods_resize_IB_V_arg_fill,
  0
};

::acdk::lang::dmi::ClazzInfo* CoreByteBuffer_methods_resize_IB_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CoreByteBuffer_method_resize_IB_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "resize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_o_resize", // alternative name of method
  -1, // altlabelHashCode
  CoreByteBuffer_methods_resize_IB_V_args, // the arguments
  0, //arguments count
  CoreByteBuffer_methods_resize_IB_V_exceptions, // the declared exceptions
  CoreByteBuffer_MetainfoWrapper::CoreByteBuffer_method_resize_IB_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CoreByteBuffer_methods_resize_I_V_arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CoreByteBuffer_methods_resize_I_V_args[] = 
{
  &CoreByteBuffer_methods_resize_I_V_arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* CoreByteBuffer_methods_resize_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CoreByteBuffer_method_resize_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "resize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_p_resize", // alternative name of method
  -1, // altlabelHashCode
  CoreByteBuffer_methods_resize_I_V_args, // the arguments
  0, //arguments count
  CoreByteBuffer_methods_resize_I_V_exceptions, // the declared exceptions
  CoreByteBuffer_MetainfoWrapper::CoreByteBuffer_method_resize_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CoreByteBuffer_methods_set_IB_V_arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CoreByteBuffer_methods_set_IB_V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CoreByteBuffer_methods_set_IB_V_args[] = 
{
  &CoreByteBuffer_methods_set_IB_V_arg_idx,
  &CoreByteBuffer_methods_set_IB_V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* CoreByteBuffer_methods_set_IB_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CoreByteBuffer_method_set_IB_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "set", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_set", // alternative name of method
  -1, // altlabelHashCode
  CoreByteBuffer_methods_set_IB_V_args, // the arguments
  0, //arguments count
  CoreByteBuffer_methods_set_IB_V_exceptions, // the declared exceptions
  CoreByteBuffer_MetainfoWrapper::CoreByteBuffer_method_set_IB_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CoreByteBuffer_methods_supportNativeIterator__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CoreByteBuffer_methods_supportNativeIterator__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CoreByteBuffer_method_supportNativeIterator__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportNativeIterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_supportNativeIterator", // alternative name of method
  -1, // altlabelHashCode
  CoreByteBuffer_methods_supportNativeIterator__Z_args, // the arguments
  0, //arguments count
  CoreByteBuffer_methods_supportNativeIterator__Z_exceptions, // the declared exceptions
  CoreByteBuffer_MetainfoWrapper::CoreByteBuffer_method_supportNativeIterator__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _CoreByteBuffer_methods[] = 
{
  &CoreByteBuffer_method_CoreByteBuffer_I_LRCoreByteBuffer_,
  &CoreByteBuffer_method_CoreByteBuffer_IIB_LRCoreByteBuffer_,
  &CoreByteBuffer_method_CoreByteBuffer_II_LRCoreByteBuffer_,
  &CoreByteBuffer_method_GetClass__L_acdk_lang_RClass_,
  &CoreByteBuffer_method_append_B_V,
  &CoreByteBuffer_method_clone__LRObject_,
  &CoreByteBuffer_method_createReadSlice_III_LRReadByteBuffer_,
  &CoreByteBuffer_method_createReadSlice__LRReadByteBuffer_,
  &CoreByteBuffer_method_createReadSlice_I_LRReadByteBuffer_,
  &CoreByteBuffer_method_createReadSlice_II_LRReadByteBuffer_,
  &CoreByteBuffer_method_createReadWriteSlice_III_LRReadWriteByteBuffer_,
  &CoreByteBuffer_method_createReadWriteSlice__LRReadWriteByteBuffer_,
  &CoreByteBuffer_method_createReadWriteSlice_I_LRReadWriteByteBuffer_,
  &CoreByteBuffer_method_createReadWriteSlice_II_LRReadWriteByteBuffer_,
  &CoreByteBuffer_method_createWriteSlice_III_LRWriteByteBuffer_,
  &CoreByteBuffer_method_createWriteSlice__LRWriteByteBuffer_,
  &CoreByteBuffer_method_createWriteSlice_I_LRWriteByteBuffer_,
  &CoreByteBuffer_method_createWriteSlice_II_LRWriteByteBuffer_,
  &CoreByteBuffer_method_deleteAt_I_B,
  &CoreByteBuffer_method_ensureCapacity_I_V,
  &CoreByteBuffer_method_get_I_B,
  &CoreByteBuffer_method_insertAt_IB_V,
  &CoreByteBuffer_method_length__I,
  &CoreByteBuffer_method_limit__I,
  &CoreByteBuffer_method_pop__B,
  &CoreByteBuffer_method_push_B_V,
  &CoreByteBuffer_method_resize_IB_V,
  &CoreByteBuffer_method_resize_I_V,
  &CoreByteBuffer_method_set_IB_V,
  &CoreByteBuffer_method_supportNativeIterator__Z,
  0
};


struct CoreByteBuffer_MetaInfoInitializer
{  CoreByteBuffer_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = CoreByteBuffer::clazzInfo();
    ci->fields =  _CoreByteBuffer_fields;
    ci->methods =  _CoreByteBuffer_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
CoreByteBuffer_MetaInfoInitializer CoreByteBuffer_MetaInfoInitializer_staticinstance__;


struct CoreByteBuffer_clazzInfo_ClazzAttributesResInitializer11
{
  CoreByteBuffer_clazzInfo_ClazzAttributesResInitializer11()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&CoreByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__arg_sliceType, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)SliceTypeMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&CoreByteBuffer_methods_createWriteSlice_III_LRWriteByteBuffer__arg_sliceType, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)SliceTypeMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&CoreByteBuffer_methods_createReadWriteSlice_III_LRReadWriteByteBuffer__arg_sliceType, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)SliceTypeMetaInf::GetEnumInfo()));
  }
};

CoreByteBuffer_clazzInfo_ClazzAttributesResInitializer11 CoreByteBuffer_clazzInfo_ClazzAttributesResInitializer11_instance;



} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
StringReadByteBuffer_create_array(int length)
{
  return new ObjectArrayImpl<RStringReadByteBuffer>(length);
}

//static
::acdk::lang::RObject
StringReadByteBuffer_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class StringReadByteBuffer_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringReadByteBuffer_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)StringReadByteBuffer::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringReadByteBuffer_method_StringReadByteBuffer_INLRString_II_LRStringReadByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StringReadByteBuffer(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringReadByteBuffer_method_StringReadByteBuffer_INLRString__LRStringReadByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StringReadByteBuffer(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringReadByteBuffer_method_StringReadByteBuffer_INLRString_I_LRStringReadByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StringReadByteBuffer(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringReadByteBuffer_method_clone__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringReadByteBuffer* This = dmi_cast<StringReadByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringReadByteBuffer::clone();
    else
        ret = (::acdk::lang::RObject)This->clone();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringReadByteBuffer_method_createReadSlice_III_LRReadByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringReadByteBuffer* This = dmi_cast<StringReadByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringReadByteBuffer::createReadSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), (SliceType)::acdk::lang::dmi::castTo<int>(args[2], dc));
    else
        ret = (::acdk::lang::RObject)This->createReadSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), (SliceType)::acdk::lang::dmi::castTo<int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringReadByteBuffer_method_createReadSlice__LRReadByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringReadByteBuffer* This = dmi_cast<StringReadByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringReadByteBuffer::createReadSlice();
    else
        ret = (::acdk::lang::RObject)This->createReadSlice();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringReadByteBuffer_method_createReadSlice_I_LRReadByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringReadByteBuffer* This = dmi_cast<StringReadByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringReadByteBuffer::createReadSlice(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->createReadSlice(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringReadByteBuffer_method_createReadSlice_II_LRReadByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringReadByteBuffer* This = dmi_cast<StringReadByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringReadByteBuffer::createReadSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->createReadSlice(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringReadByteBuffer_method_endOffset__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringReadByteBuffer* This = dmi_cast<StringReadByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StringReadByteBuffer::endOffset();
    else
      ret = This->endOffset();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringReadByteBuffer_method_get_I_B_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringReadByteBuffer* This = dmi_cast<StringReadByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StringReadByteBuffer::get(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->get(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringReadByteBuffer_method_length__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringReadByteBuffer* This = dmi_cast<StringReadByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StringReadByteBuffer::length();
    else
      ret = This->length();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringReadByteBuffer_method_startOffset__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringReadByteBuffer* This = dmi_cast<StringReadByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StringReadByteBuffer::startOffset();
    else
      ret = This->startOffset();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringReadByteBuffer_method_supportNativeIterator__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringReadByteBuffer* This = dmi_cast<StringReadByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StringReadByteBuffer::supportNativeIterator();
    else
      ret = This->supportNativeIterator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StringReadByteBuffer_fields__str_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    StringReadByteBuffer* This = dmi_cast<StringReadByteBuffer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_str, flags);
    else
      This->_str = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo StringReadByteBuffer_fields__str = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_str", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  StringReadByteBuffer_MetainfoWrapper::StringReadByteBuffer_fields__str_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _StringReadByteBuffer_fields[] = 
{
  &StringReadByteBuffer_fields__str,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringReadByteBuffer_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StringReadByteBuffer_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringReadByteBuffer_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_d_GetClass", // alternative name of method
  -1, // altlabelHashCode
  StringReadByteBuffer_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  StringReadByteBuffer_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  StringReadByteBuffer_MetainfoWrapper::StringReadByteBuffer_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringReadByteBuffer_methods_StringReadByteBuffer_INLRString_II_LRStringReadByteBuffer__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StringReadByteBuffer_methods_StringReadByteBuffer_INLRString_II_LRStringReadByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StringReadByteBuffer_methods_StringReadByteBuffer_INLRString_II_LRStringReadByteBuffer__arg_end = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "end", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringReadByteBuffer_methods_StringReadByteBuffer_INLRString_II_LRStringReadByteBuffer__args[] = 
{
  &StringReadByteBuffer_methods_StringReadByteBuffer_INLRString_II_LRStringReadByteBuffer__arg_str,
  &StringReadByteBuffer_methods_StringReadByteBuffer_INLRString_II_LRStringReadByteBuffer__arg_start,
  &StringReadByteBuffer_methods_StringReadByteBuffer_INLRString_II_LRStringReadByteBuffer__arg_end,
  0
};

::acdk::lang::dmi::ClazzInfo* StringReadByteBuffer_methods_StringReadByteBuffer_INLRString_II_LRStringReadByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringReadByteBuffer_method_StringReadByteBuffer_INLRString_II_LRStringReadByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "StringReadByteBuffer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StringReadByteBuffer::clazzInfo(), // return type
  "_0_StringReadByteBuffer", // alternative name of method
  -1, // altlabelHashCode
  StringReadByteBuffer_methods_StringReadByteBuffer_INLRString_II_LRStringReadByteBuffer__args, // the arguments
  0, //arguments count
  StringReadByteBuffer_methods_StringReadByteBuffer_INLRString_II_LRStringReadByteBuffer__exceptions, // the declared exceptions
  StringReadByteBuffer_MetainfoWrapper::StringReadByteBuffer_method_StringReadByteBuffer_INLRString_II_LRStringReadByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringReadByteBuffer_methods_StringReadByteBuffer_INLRString__LRStringReadByteBuffer__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringReadByteBuffer_methods_StringReadByteBuffer_INLRString__LRStringReadByteBuffer__args[] = 
{
  &StringReadByteBuffer_methods_StringReadByteBuffer_INLRString__LRStringReadByteBuffer__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* StringReadByteBuffer_methods_StringReadByteBuffer_INLRString__LRStringReadByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringReadByteBuffer_method_StringReadByteBuffer_INLRString__LRStringReadByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "StringReadByteBuffer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StringReadByteBuffer::clazzInfo(), // return type
  "_1_StringReadByteBuffer", // alternative name of method
  -1, // altlabelHashCode
  StringReadByteBuffer_methods_StringReadByteBuffer_INLRString__LRStringReadByteBuffer__args, // the arguments
  0, //arguments count
  StringReadByteBuffer_methods_StringReadByteBuffer_INLRString__LRStringReadByteBuffer__exceptions, // the declared exceptions
  StringReadByteBuffer_MetainfoWrapper::StringReadByteBuffer_method_StringReadByteBuffer_INLRString__LRStringReadByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringReadByteBuffer_methods_StringReadByteBuffer_INLRString_I_LRStringReadByteBuffer__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StringReadByteBuffer_methods_StringReadByteBuffer_INLRString_I_LRStringReadByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringReadByteBuffer_methods_StringReadByteBuffer_INLRString_I_LRStringReadByteBuffer__args[] = 
{
  &StringReadByteBuffer_methods_StringReadByteBuffer_INLRString_I_LRStringReadByteBuffer__arg_str,
  &StringReadByteBuffer_methods_StringReadByteBuffer_INLRString_I_LRStringReadByteBuffer__arg_start,
  0
};

::acdk::lang::dmi::ClazzInfo* StringReadByteBuffer_methods_StringReadByteBuffer_INLRString_I_LRStringReadByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringReadByteBuffer_method_StringReadByteBuffer_INLRString_I_LRStringReadByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "StringReadByteBuffer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StringReadByteBuffer::clazzInfo(), // return type
  "_2_StringReadByteBuffer", // alternative name of method
  -1, // altlabelHashCode
  StringReadByteBuffer_methods_StringReadByteBuffer_INLRString_I_LRStringReadByteBuffer__args, // the arguments
  0, //arguments count
  StringReadByteBuffer_methods_StringReadByteBuffer_INLRString_I_LRStringReadByteBuffer__exceptions, // the declared exceptions
  StringReadByteBuffer_MetainfoWrapper::StringReadByteBuffer_method_StringReadByteBuffer_INLRString_I_LRStringReadByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringReadByteBuffer_methods_clone__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StringReadByteBuffer_methods_clone__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringReadByteBuffer_method_clone__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_3_clone", // alternative name of method
  -1, // altlabelHashCode
  StringReadByteBuffer_methods_clone__LRObject__args, // the arguments
  0, //arguments count
  StringReadByteBuffer_methods_clone__LRObject__exceptions, // the declared exceptions
  StringReadByteBuffer_MetainfoWrapper::StringReadByteBuffer_method_clone__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringReadByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StringReadByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__arg_end = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "end", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StringReadByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__arg_sliceType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "sliceType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringReadByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__args[] = 
{
  &StringReadByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__arg_start,
  &StringReadByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__arg_end,
  &StringReadByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__arg_sliceType,
  0
};

::acdk::lang::dmi::ClazzInfo* StringReadByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringReadByteBuffer_method_createReadSlice_III_LRReadByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createReadSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadByteBuffer::clazzInfo(), // return type
  "_6_createReadSlice", // alternative name of method
  -1, // altlabelHashCode
  StringReadByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__args, // the arguments
  0, //arguments count
  StringReadByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__exceptions, // the declared exceptions
  StringReadByteBuffer_MetainfoWrapper::StringReadByteBuffer_method_createReadSlice_III_LRReadByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringReadByteBuffer_methods_createReadSlice__LRReadByteBuffer__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StringReadByteBuffer_methods_createReadSlice__LRReadByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringReadByteBuffer_method_createReadSlice__LRReadByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "createReadSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadByteBuffer::clazzInfo(), // return type
  "_7_createReadSlice", // alternative name of method
  -1, // altlabelHashCode
  StringReadByteBuffer_methods_createReadSlice__LRReadByteBuffer__args, // the arguments
  0, //arguments count
  StringReadByteBuffer_methods_createReadSlice__LRReadByteBuffer__exceptions, // the declared exceptions
  StringReadByteBuffer_MetainfoWrapper::StringReadByteBuffer_method_createReadSlice__LRReadByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringReadByteBuffer_methods_createReadSlice_I_LRReadByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringReadByteBuffer_methods_createReadSlice_I_LRReadByteBuffer__args[] = 
{
  &StringReadByteBuffer_methods_createReadSlice_I_LRReadByteBuffer__arg_start,
  0
};

::acdk::lang::dmi::ClazzInfo* StringReadByteBuffer_methods_createReadSlice_I_LRReadByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringReadByteBuffer_method_createReadSlice_I_LRReadByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "createReadSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadByteBuffer::clazzInfo(), // return type
  "_8_createReadSlice", // alternative name of method
  -1, // altlabelHashCode
  StringReadByteBuffer_methods_createReadSlice_I_LRReadByteBuffer__args, // the arguments
  0, //arguments count
  StringReadByteBuffer_methods_createReadSlice_I_LRReadByteBuffer__exceptions, // the declared exceptions
  StringReadByteBuffer_MetainfoWrapper::StringReadByteBuffer_method_createReadSlice_I_LRReadByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringReadByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StringReadByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__arg_end = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "end", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringReadByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__args[] = 
{
  &StringReadByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__arg_start,
  &StringReadByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__arg_end,
  0
};

::acdk::lang::dmi::ClazzInfo* StringReadByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringReadByteBuffer_method_createReadSlice_II_LRReadByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "createReadSlice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadByteBuffer::clazzInfo(), // return type
  "_9_createReadSlice", // alternative name of method
  -1, // altlabelHashCode
  StringReadByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__args, // the arguments
  0, //arguments count
  StringReadByteBuffer_methods_createReadSlice_II_LRReadByteBuffer__exceptions, // the declared exceptions
  StringReadByteBuffer_MetainfoWrapper::StringReadByteBuffer_method_createReadSlice_II_LRReadByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringReadByteBuffer_methods_endOffset__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StringReadByteBuffer_methods_endOffset__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringReadByteBuffer_method_endOffset__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "endOffset", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_b_endOffset", // alternative name of method
  -1, // altlabelHashCode
  StringReadByteBuffer_methods_endOffset__I_args, // the arguments
  0, //arguments count
  StringReadByteBuffer_methods_endOffset__I_exceptions, // the declared exceptions
  StringReadByteBuffer_MetainfoWrapper::StringReadByteBuffer_method_endOffset__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringReadByteBuffer_methods_get_I_B_arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringReadByteBuffer_methods_get_I_B_args[] = 
{
  &StringReadByteBuffer_methods_get_I_B_arg_idx,
  0
};

::acdk::lang::dmi::ClazzInfo* StringReadByteBuffer_methods_get_I_B_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringReadByteBuffer_method_get_I_B = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "get", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz(), // return type
  "_5_get", // alternative name of method
  -1, // altlabelHashCode
  StringReadByteBuffer_methods_get_I_B_args, // the arguments
  0, //arguments count
  StringReadByteBuffer_methods_get_I_B_exceptions, // the declared exceptions
  StringReadByteBuffer_MetainfoWrapper::StringReadByteBuffer_method_get_I_B_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringReadByteBuffer_methods_length__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StringReadByteBuffer_methods_length__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringReadByteBuffer_method_length__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "length", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_4_length", // alternative name of method
  -1, // altlabelHashCode
  StringReadByteBuffer_methods_length__I_args, // the arguments
  0, //arguments count
  StringReadByteBuffer_methods_length__I_exceptions, // the declared exceptions
  StringReadByteBuffer_MetainfoWrapper::StringReadByteBuffer_method_length__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringReadByteBuffer_methods_startOffset__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StringReadByteBuffer_methods_startOffset__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringReadByteBuffer_method_startOffset__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "startOffset", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_a_startOffset", // alternative name of method
  -1, // altlabelHashCode
  StringReadByteBuffer_methods_startOffset__I_args, // the arguments
  0, //arguments count
  StringReadByteBuffer_methods_startOffset__I_exceptions, // the declared exceptions
  StringReadByteBuffer_MetainfoWrapper::StringReadByteBuffer_method_startOffset__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringReadByteBuffer_methods_supportNativeIterator__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StringReadByteBuffer_methods_supportNativeIterator__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringReadByteBuffer_method_supportNativeIterator__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportNativeIterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_c_supportNativeIterator", // alternative name of method
  -1, // altlabelHashCode
  StringReadByteBuffer_methods_supportNativeIterator__Z_args, // the arguments
  0, //arguments count
  StringReadByteBuffer_methods_supportNativeIterator__Z_exceptions, // the declared exceptions
  StringReadByteBuffer_MetainfoWrapper::StringReadByteBuffer_method_supportNativeIterator__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _StringReadByteBuffer_methods[] = 
{
  &StringReadByteBuffer_method_GetClass__L_acdk_lang_RClass_,
  &StringReadByteBuffer_method_StringReadByteBuffer_INLRString_II_LRStringReadByteBuffer_,
  &StringReadByteBuffer_method_StringReadByteBuffer_INLRString__LRStringReadByteBuffer_,
  &StringReadByteBuffer_method_StringReadByteBuffer_INLRString_I_LRStringReadByteBuffer_,
  &StringReadByteBuffer_method_clone__LRObject_,
  &StringReadByteBuffer_method_createReadSlice_III_LRReadByteBuffer_,
  &StringReadByteBuffer_method_createReadSlice__LRReadByteBuffer_,
  &StringReadByteBuffer_method_createReadSlice_I_LRReadByteBuffer_,
  &StringReadByteBuffer_method_createReadSlice_II_LRReadByteBuffer_,
  &StringReadByteBuffer_method_endOffset__I,
  &StringReadByteBuffer_method_get_I_B,
  &StringReadByteBuffer_method_length__I,
  &StringReadByteBuffer_method_startOffset__I,
  &StringReadByteBuffer_method_supportNativeIterator__Z,
  0
};


struct StringReadByteBuffer_MetaInfoInitializer
{  StringReadByteBuffer_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = StringReadByteBuffer::clazzInfo();
    ci->fields =  _StringReadByteBuffer_fields;
    ci->methods =  _StringReadByteBuffer_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
StringReadByteBuffer_MetaInfoInitializer StringReadByteBuffer_MetaInfoInitializer_staticinstance__;


struct StringReadByteBuffer_clazzInfo_ClazzAttributesResInitializer12
{
  StringReadByteBuffer_clazzInfo_ClazzAttributesResInitializer12()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&StringReadByteBuffer_methods_createReadSlice_III_LRReadByteBuffer__arg_sliceType, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)SliceTypeMetaInf::GetEnumInfo()));
  }
};

StringReadByteBuffer_clazzInfo_ClazzAttributesResInitializer12 StringReadByteBuffer_clazzInfo_ClazzAttributesResInitializer12_instance;



} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
Buffers_create_array(int length)
{
  return new ObjectArrayImpl<RBuffers>(length);
}

//static
::acdk::lang::RObject
Buffers_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Buffers_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Buffers_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Buffers::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Buffers_method_appendBuffer_INLRReadByteBuffer_INLRFlexByteBuffer__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Buffers::appendBuffer(::acdk::lang::dmi::castTo< RReadByteBuffer>(args[0], dc), ::acdk::lang::dmi::castTo< RFlexByteBuffer>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Buffers_method_copyBuffer_INLRReadByteBuffer_INLRWriteByteBuffer__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Buffers::copyBuffer(::acdk::lang::dmi::castTo< RReadByteBuffer>(args[0], dc), ::acdk::lang::dmi::castTo< RWriteByteBuffer>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Buffers_method_getAppendWriter_INLRFlexByteBuffer__Lacdk_io_RWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Buffers::getAppendWriter(::acdk::lang::dmi::castTo< RFlexByteBuffer>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Buffers_method_getNativeReadByteBuffer_INLRReadByteBuffer__LRReadByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Buffers::getNativeReadByteBuffer(::acdk::lang::dmi::castTo< RReadByteBuffer>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Buffers_method_getNativeWriteByteBuffer_INLRWriteByteBuffer__LRWriteByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Buffers::getNativeWriteByteBuffer(::acdk::lang::dmi::castTo< RWriteByteBuffer>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Buffers_method_getReadByteBuffer_INLRbyteArray__LRReadByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Buffers::getReadByteBuffer(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Buffers_method_getReadByteBuffer_INLRString_INLacdk_locale_REncoding__LRReadByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Buffers::getReadByteBuffer(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< acdk::locale::REncoding>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Buffers_method_getReadWriteByteBuffer_INLRbyteArray_II_LRReadWriteByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Buffers::getReadWriteByteBuffer(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Buffers_method_getReadWriteByteBuffer_INLRbyteArray__LRReadWriteByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Buffers::getReadWriteByteBuffer(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Buffers_method_getReadWriteByteBuffer_INLRbyteArray_I_LRReadWriteByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Buffers::getReadWriteByteBuffer(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Buffers_method_getReader_INLRReadByteBuffer__Lacdk_io_RReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Buffers::getReader(::acdk::lang::dmi::castTo< RReadByteBuffer>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Buffers_method_getWriter_INLRWriteByteBuffer__Lacdk_io_RWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Buffers::getWriter(::acdk::lang::dmi::castTo< RWriteByteBuffer>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Buffers_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Buffers* This = dmi_cast<Buffers>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Buffers::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Buffers_method_toString_INLRByteBuffer__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Buffers::toString(::acdk::lang::dmi::castTo< RByteBuffer>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Buffers_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Buffers_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Buffers_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Buffers_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_e_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Buffers_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Buffers_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Buffers_MetainfoWrapper::Buffers_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Buffers_methods_appendBuffer_INLRReadByteBuffer_INLRFlexByteBuffer__V_arg_source = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "source", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadByteBuffer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Buffers_methods_appendBuffer_INLRReadByteBuffer_INLRFlexByteBuffer__V_arg_buffer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buffer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFlexByteBuffer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Buffers_methods_appendBuffer_INLRReadByteBuffer_INLRFlexByteBuffer__V_args[] = 
{
  &Buffers_methods_appendBuffer_INLRReadByteBuffer_INLRFlexByteBuffer__V_arg_source,
  &Buffers_methods_appendBuffer_INLRReadByteBuffer_INLRFlexByteBuffer__V_arg_buffer,
  0
};

::acdk::lang::dmi::ClazzInfo* Buffers_methods_appendBuffer_INLRReadByteBuffer_INLRFlexByteBuffer__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Buffers_method_appendBuffer_INLRReadByteBuffer_INLRFlexByteBuffer__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "appendBuffer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_appendBuffer", // alternative name of method
  -1, // altlabelHashCode
  Buffers_methods_appendBuffer_INLRReadByteBuffer_INLRFlexByteBuffer__V_args, // the arguments
  0, //arguments count
  Buffers_methods_appendBuffer_INLRReadByteBuffer_INLRFlexByteBuffer__V_exceptions, // the declared exceptions
  Buffers_MetainfoWrapper::Buffers_method_appendBuffer_INLRReadByteBuffer_INLRFlexByteBuffer__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Buffers_methods_copyBuffer_INLRReadByteBuffer_INLRWriteByteBuffer__I_arg_source = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "source", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadByteBuffer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Buffers_methods_copyBuffer_INLRReadByteBuffer_INLRWriteByteBuffer__I_arg_target = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "target", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriteByteBuffer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Buffers_methods_copyBuffer_INLRReadByteBuffer_INLRWriteByteBuffer__I_args[] = 
{
  &Buffers_methods_copyBuffer_INLRReadByteBuffer_INLRWriteByteBuffer__I_arg_source,
  &Buffers_methods_copyBuffer_INLRReadByteBuffer_INLRWriteByteBuffer__I_arg_target,
  0
};

::acdk::lang::dmi::ClazzInfo* Buffers_methods_copyBuffer_INLRReadByteBuffer_INLRWriteByteBuffer__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Buffers_method_copyBuffer_INLRReadByteBuffer_INLRWriteByteBuffer__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "copyBuffer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_c_copyBuffer", // alternative name of method
  -1, // altlabelHashCode
  Buffers_methods_copyBuffer_INLRReadByteBuffer_INLRWriteByteBuffer__I_args, // the arguments
  0, //arguments count
  Buffers_methods_copyBuffer_INLRReadByteBuffer_INLRWriteByteBuffer__I_exceptions, // the declared exceptions
  Buffers_MetainfoWrapper::Buffers_method_copyBuffer_INLRReadByteBuffer_INLRWriteByteBuffer__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Buffers_methods_getAppendWriter_INLRFlexByteBuffer__Lacdk_io_RWriter__arg_buffer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buffer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFlexByteBuffer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Buffers_methods_getAppendWriter_INLRFlexByteBuffer__Lacdk_io_RWriter__args[] = 
{
  &Buffers_methods_getAppendWriter_INLRFlexByteBuffer__Lacdk_io_RWriter__arg_buffer,
  0
};

::acdk::lang::dmi::ClazzInfo* Buffers_methods_getAppendWriter_INLRFlexByteBuffer__Lacdk_io_RWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Buffers_method_getAppendWriter_INLRFlexByteBuffer__Lacdk_io_RWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAppendWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RWriter::clazzInfo(), // return type
  "_b_getAppendWriter", // alternative name of method
  -1, // altlabelHashCode
  Buffers_methods_getAppendWriter_INLRFlexByteBuffer__Lacdk_io_RWriter__args, // the arguments
  0, //arguments count
  Buffers_methods_getAppendWriter_INLRFlexByteBuffer__Lacdk_io_RWriter__exceptions, // the declared exceptions
  Buffers_MetainfoWrapper::Buffers_method_getAppendWriter_INLRFlexByteBuffer__Lacdk_io_RWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Buffers_methods_getNativeReadByteBuffer_INLRReadByteBuffer__LRReadByteBuffer__arg_buffer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buffer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadByteBuffer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Buffers_methods_getNativeReadByteBuffer_INLRReadByteBuffer__LRReadByteBuffer__args[] = 
{
  &Buffers_methods_getNativeReadByteBuffer_INLRReadByteBuffer__LRReadByteBuffer__arg_buffer,
  0
};

::acdk::lang::dmi::ClazzInfo* Buffers_methods_getNativeReadByteBuffer_INLRReadByteBuffer__LRReadByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Buffers_method_getNativeReadByteBuffer_INLRReadByteBuffer__LRReadByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNativeReadByteBuffer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadByteBuffer::clazzInfo(), // return type
  "_6_getNativeReadByteBuffer", // alternative name of method
  -1, // altlabelHashCode
  Buffers_methods_getNativeReadByteBuffer_INLRReadByteBuffer__LRReadByteBuffer__args, // the arguments
  0, //arguments count
  Buffers_methods_getNativeReadByteBuffer_INLRReadByteBuffer__LRReadByteBuffer__exceptions, // the declared exceptions
  Buffers_MetainfoWrapper::Buffers_method_getNativeReadByteBuffer_INLRReadByteBuffer__LRReadByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Buffers_methods_getNativeWriteByteBuffer_INLRWriteByteBuffer__LRWriteByteBuffer__arg_buffer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buffer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriteByteBuffer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Buffers_methods_getNativeWriteByteBuffer_INLRWriteByteBuffer__LRWriteByteBuffer__args[] = 
{
  &Buffers_methods_getNativeWriteByteBuffer_INLRWriteByteBuffer__LRWriteByteBuffer__arg_buffer,
  0
};

::acdk::lang::dmi::ClazzInfo* Buffers_methods_getNativeWriteByteBuffer_INLRWriteByteBuffer__LRWriteByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Buffers_method_getNativeWriteByteBuffer_INLRWriteByteBuffer__LRWriteByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNativeWriteByteBuffer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriteByteBuffer::clazzInfo(), // return type
  "_7_getNativeWriteByteBuffer", // alternative name of method
  -1, // altlabelHashCode
  Buffers_methods_getNativeWriteByteBuffer_INLRWriteByteBuffer__LRWriteByteBuffer__args, // the arguments
  0, //arguments count
  Buffers_methods_getNativeWriteByteBuffer_INLRWriteByteBuffer__LRWriteByteBuffer__exceptions, // the declared exceptions
  Buffers_MetainfoWrapper::Buffers_method_getNativeWriteByteBuffer_INLRWriteByteBuffer__LRWriteByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Buffers_methods_getReadByteBuffer_INLRbyteArray__LRReadByteBuffer__arg_ba = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ba", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Buffers_methods_getReadByteBuffer_INLRbyteArray__LRReadByteBuffer__args[] = 
{
  &Buffers_methods_getReadByteBuffer_INLRbyteArray__LRReadByteBuffer__arg_ba,
  0
};

::acdk::lang::dmi::ClazzInfo* Buffers_methods_getReadByteBuffer_INLRbyteArray__LRReadByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Buffers_method_getReadByteBuffer_INLRbyteArray__LRReadByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getReadByteBuffer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadByteBuffer::clazzInfo(), // return type
  "_2_getReadByteBuffer", // alternative name of method
  -1, // altlabelHashCode
  Buffers_methods_getReadByteBuffer_INLRbyteArray__LRReadByteBuffer__args, // the arguments
  0, //arguments count
  Buffers_methods_getReadByteBuffer_INLRbyteArray__LRReadByteBuffer__exceptions, // the declared exceptions
  Buffers_MetainfoWrapper::Buffers_method_getReadByteBuffer_INLRbyteArray__LRReadByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Buffers_methods_getReadByteBuffer_INLRString_INLacdk_locale_REncoding__LRReadByteBuffer__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Buffers_methods_getReadByteBuffer_INLRString_INLacdk_locale_REncoding__LRReadByteBuffer__arg_enc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "enc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::REncoding::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Buffers_methods_getReadByteBuffer_INLRString_INLacdk_locale_REncoding__LRReadByteBuffer__args[] = 
{
  &Buffers_methods_getReadByteBuffer_INLRString_INLacdk_locale_REncoding__LRReadByteBuffer__arg_str,
  &Buffers_methods_getReadByteBuffer_INLRString_INLacdk_locale_REncoding__LRReadByteBuffer__arg_enc,
  0
};

::acdk::lang::dmi::ClazzInfo* Buffers_methods_getReadByteBuffer_INLRString_INLacdk_locale_REncoding__LRReadByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Buffers_method_getReadByteBuffer_INLRString_INLacdk_locale_REncoding__LRReadByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getReadByteBuffer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadByteBuffer::clazzInfo(), // return type
  "_8_getReadByteBuffer", // alternative name of method
  -1, // altlabelHashCode
  Buffers_methods_getReadByteBuffer_INLRString_INLacdk_locale_REncoding__LRReadByteBuffer__args, // the arguments
  0, //arguments count
  Buffers_methods_getReadByteBuffer_INLRString_INLacdk_locale_REncoding__LRReadByteBuffer__exceptions, // the declared exceptions
  Buffers_MetainfoWrapper::Buffers_method_getReadByteBuffer_INLRString_INLacdk_locale_REncoding__LRReadByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Buffers_methods_getReadWriteByteBuffer_INLRbyteArray_II_LRReadWriteByteBuffer__arg_ba = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ba", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Buffers_methods_getReadWriteByteBuffer_INLRbyteArray_II_LRReadWriteByteBuffer__arg_startIdx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "startIdx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Buffers_methods_getReadWriteByteBuffer_INLRbyteArray_II_LRReadWriteByteBuffer__arg_endIdx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "endIdx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Buffers_methods_getReadWriteByteBuffer_INLRbyteArray_II_LRReadWriteByteBuffer__args[] = 
{
  &Buffers_methods_getReadWriteByteBuffer_INLRbyteArray_II_LRReadWriteByteBuffer__arg_ba,
  &Buffers_methods_getReadWriteByteBuffer_INLRbyteArray_II_LRReadWriteByteBuffer__arg_startIdx,
  &Buffers_methods_getReadWriteByteBuffer_INLRbyteArray_II_LRReadWriteByteBuffer__arg_endIdx,
  0
};

::acdk::lang::dmi::ClazzInfo* Buffers_methods_getReadWriteByteBuffer_INLRbyteArray_II_LRReadWriteByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Buffers_method_getReadWriteByteBuffer_INLRbyteArray_II_LRReadWriteByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getReadWriteByteBuffer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadWriteByteBuffer::clazzInfo(), // return type
  "_3_getReadWriteByteBuffer", // alternative name of method
  -1, // altlabelHashCode
  Buffers_methods_getReadWriteByteBuffer_INLRbyteArray_II_LRReadWriteByteBuffer__args, // the arguments
  0, //arguments count
  Buffers_methods_getReadWriteByteBuffer_INLRbyteArray_II_LRReadWriteByteBuffer__exceptions, // the declared exceptions
  Buffers_MetainfoWrapper::Buffers_method_getReadWriteByteBuffer_INLRbyteArray_II_LRReadWriteByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Buffers_methods_getReadWriteByteBuffer_INLRbyteArray__LRReadWriteByteBuffer__arg_ba = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ba", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Buffers_methods_getReadWriteByteBuffer_INLRbyteArray__LRReadWriteByteBuffer__args[] = 
{
  &Buffers_methods_getReadWriteByteBuffer_INLRbyteArray__LRReadWriteByteBuffer__arg_ba,
  0
};

::acdk::lang::dmi::ClazzInfo* Buffers_methods_getReadWriteByteBuffer_INLRbyteArray__LRReadWriteByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Buffers_method_getReadWriteByteBuffer_INLRbyteArray__LRReadWriteByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getReadWriteByteBuffer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadWriteByteBuffer::clazzInfo(), // return type
  "_4_getReadWriteByteBuffer", // alternative name of method
  -1, // altlabelHashCode
  Buffers_methods_getReadWriteByteBuffer_INLRbyteArray__LRReadWriteByteBuffer__args, // the arguments
  0, //arguments count
  Buffers_methods_getReadWriteByteBuffer_INLRbyteArray__LRReadWriteByteBuffer__exceptions, // the declared exceptions
  Buffers_MetainfoWrapper::Buffers_method_getReadWriteByteBuffer_INLRbyteArray__LRReadWriteByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Buffers_methods_getReadWriteByteBuffer_INLRbyteArray_I_LRReadWriteByteBuffer__arg_ba = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ba", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Buffers_methods_getReadWriteByteBuffer_INLRbyteArray_I_LRReadWriteByteBuffer__arg_startIdx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "startIdx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Buffers_methods_getReadWriteByteBuffer_INLRbyteArray_I_LRReadWriteByteBuffer__args[] = 
{
  &Buffers_methods_getReadWriteByteBuffer_INLRbyteArray_I_LRReadWriteByteBuffer__arg_ba,
  &Buffers_methods_getReadWriteByteBuffer_INLRbyteArray_I_LRReadWriteByteBuffer__arg_startIdx,
  0
};

::acdk::lang::dmi::ClazzInfo* Buffers_methods_getReadWriteByteBuffer_INLRbyteArray_I_LRReadWriteByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Buffers_method_getReadWriteByteBuffer_INLRbyteArray_I_LRReadWriteByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getReadWriteByteBuffer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadWriteByteBuffer::clazzInfo(), // return type
  "_5_getReadWriteByteBuffer", // alternative name of method
  -1, // altlabelHashCode
  Buffers_methods_getReadWriteByteBuffer_INLRbyteArray_I_LRReadWriteByteBuffer__args, // the arguments
  0, //arguments count
  Buffers_methods_getReadWriteByteBuffer_INLRbyteArray_I_LRReadWriteByteBuffer__exceptions, // the declared exceptions
  Buffers_MetainfoWrapper::Buffers_method_getReadWriteByteBuffer_INLRbyteArray_I_LRReadWriteByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Buffers_methods_getReader_INLRReadByteBuffer__Lacdk_io_RReader__arg_buffer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buffer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadByteBuffer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Buffers_methods_getReader_INLRReadByteBuffer__Lacdk_io_RReader__args[] = 
{
  &Buffers_methods_getReader_INLRReadByteBuffer__Lacdk_io_RReader__arg_buffer,
  0
};

::acdk::lang::dmi::ClazzInfo* Buffers_methods_getReader_INLRReadByteBuffer__Lacdk_io_RReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Buffers_method_getReader_INLRReadByteBuffer__Lacdk_io_RReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo(), // return type
  "_9_getReader", // alternative name of method
  -1, // altlabelHashCode
  Buffers_methods_getReader_INLRReadByteBuffer__Lacdk_io_RReader__args, // the arguments
  0, //arguments count
  Buffers_methods_getReader_INLRReadByteBuffer__Lacdk_io_RReader__exceptions, // the declared exceptions
  Buffers_MetainfoWrapper::Buffers_method_getReader_INLRReadByteBuffer__Lacdk_io_RReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Buffers_methods_getWriter_INLRWriteByteBuffer__Lacdk_io_RWriter__arg_buffer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buffer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriteByteBuffer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Buffers_methods_getWriter_INLRWriteByteBuffer__Lacdk_io_RWriter__args[] = 
{
  &Buffers_methods_getWriter_INLRWriteByteBuffer__Lacdk_io_RWriter__arg_buffer,
  0
};

::acdk::lang::dmi::ClazzInfo* Buffers_methods_getWriter_INLRWriteByteBuffer__Lacdk_io_RWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Buffers_method_getWriter_INLRWriteByteBuffer__Lacdk_io_RWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RWriter::clazzInfo(), // return type
  "_a_getWriter", // alternative name of method
  -1, // altlabelHashCode
  Buffers_methods_getWriter_INLRWriteByteBuffer__Lacdk_io_RWriter__args, // the arguments
  0, //arguments count
  Buffers_methods_getWriter_INLRWriteByteBuffer__Lacdk_io_RWriter__exceptions, // the declared exceptions
  Buffers_MetainfoWrapper::Buffers_method_getWriter_INLRWriteByteBuffer__Lacdk_io_RWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Buffers_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Buffers_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Buffers_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_0_toString", // alternative name of method
  -1, // altlabelHashCode
  Buffers_methods_toString__LRString__args, // the arguments
  0, //arguments count
  Buffers_methods_toString__LRString__exceptions, // the declared exceptions
  Buffers_MetainfoWrapper::Buffers_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Buffers_methods_toString_INLRByteBuffer__LRString__arg_buf = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buf", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RByteBuffer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Buffers_methods_toString_INLRByteBuffer__LRString__args[] = 
{
  &Buffers_methods_toString_INLRByteBuffer__LRString__arg_buf,
  0
};

::acdk::lang::dmi::ClazzInfo* Buffers_methods_toString_INLRByteBuffer__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Buffers_method_toString_INLRByteBuffer__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_toString", // alternative name of method
  -1, // altlabelHashCode
  Buffers_methods_toString_INLRByteBuffer__LRString__args, // the arguments
  0, //arguments count
  Buffers_methods_toString_INLRByteBuffer__LRString__exceptions, // the declared exceptions
  Buffers_MetainfoWrapper::Buffers_method_toString_INLRByteBuffer__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Buffers_methods[] = 
{
  &Buffers_method_GetClass__L_acdk_lang_RClass_,
  &Buffers_method_appendBuffer_INLRReadByteBuffer_INLRFlexByteBuffer__V,
  &Buffers_method_copyBuffer_INLRReadByteBuffer_INLRWriteByteBuffer__I,
  &Buffers_method_getAppendWriter_INLRFlexByteBuffer__Lacdk_io_RWriter_,
  &Buffers_method_getNativeReadByteBuffer_INLRReadByteBuffer__LRReadByteBuffer_,
  &Buffers_method_getNativeWriteByteBuffer_INLRWriteByteBuffer__LRWriteByteBuffer_,
  &Buffers_method_getReadByteBuffer_INLRbyteArray__LRReadByteBuffer_,
  &Buffers_method_getReadByteBuffer_INLRString_INLacdk_locale_REncoding__LRReadByteBuffer_,
  &Buffers_method_getReadWriteByteBuffer_INLRbyteArray_II_LRReadWriteByteBuffer_,
  &Buffers_method_getReadWriteByteBuffer_INLRbyteArray__LRReadWriteByteBuffer_,
  &Buffers_method_getReadWriteByteBuffer_INLRbyteArray_I_LRReadWriteByteBuffer_,
  &Buffers_method_getReader_INLRReadByteBuffer__Lacdk_io_RReader_,
  &Buffers_method_getWriter_INLRWriteByteBuffer__Lacdk_io_RWriter_,
  &Buffers_method_toString__LRString_,
  &Buffers_method_toString_INLRByteBuffer__LRString_,
  0
};


struct Buffers_MetaInfoInitializer
{  Buffers_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Buffers::clazzInfo();
    ci->fields =  _Buffers_fields;
    ci->methods =  _Buffers_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Buffers_MetaInfoInitializer Buffers_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) lang_dummyExportFunc() {}
#endif

