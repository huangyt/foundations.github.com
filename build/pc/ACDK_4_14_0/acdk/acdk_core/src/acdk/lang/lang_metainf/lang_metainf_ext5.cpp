// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../lang.h"
#include "../ArithmeticException.h"
#include "../ArrayIndexOutOfBoundsException.h"
#include "../BasicArray.h"
#include "../BasicArrayInl.h"
#include "../Boolean.h"
#include "../Byte.h"
#include "../ByteBuffer.h"
#include "../Character.h"
#include "../Class.h"
#include "../ClassCastException.h"
#include "../ClassLoader.h"
#include "../ClassNotFoundException.h"
#include "../Cloneable.h"
#include "../CloneNotSupportedException.h"
#include "../CmdLineOption.h"
#include "../CmdLineParseException.h"
#include "../CmdLineParser.h"
#include "../Comparable.h"
#include "../DmiException.h"
#include "../DmiTypeConversionException.h"
#include "../Double.h"
#include "../Error.h"
#include "../Exception.h"
#include "../ExceptionDeclarations.h"
#include "../ExtObject.h"
#include "../Float.h"
#include "../IllegalAccessException.h"
#include "../IllegalArgumentException.h"
#include "../IllegalMonitorStateException.h"
#include "../IllegalStateException.h"
#include "../IllegalThreadStateException.h"
#include "../IndexOutOfBoundsException.h"
#include "../InOutPreDeclaration.h"
#include "../InstantiationException.h"
#include "../Integer.h"
#include "../InterfaceBase.h"
#include "../InterruptedException.h"
#include "../lang.h"
#include "../lang_all.h"
#include "../Long.h"
#include "../Math.h"
#include "../NoSuchDmiElementException.h"
#include "../NoSuchElementException.h"
#include "../NoSuchFieldException.h"
#include "../NoSuchMethodException.h"
#include "../NullPointerException.h"
#include "../Number.h"
#include "../NumberFormatException.h"
#include "../Object.h"
#include "../ObjectArrayBase.h"
#include "../ObjectArrayBaseInl.h"
#include "../ObjectArrayImpl.h"
#include "../ObjectBase.h"
#include "../ObjectDebug.h"
#include "../ObjectImpl.h"
#include "../ObjectInline.h"
#include "../OutOfMemoryError.h"
#include "../Package.h"
#include "../ParamsMismatchException.h"
#include "../Process.h"
#include "../Runnable.h"
#include "../Runtime.h"
#include "../RuntimeException.h"
#include "../SharedLibrary.h"
#include "../Short.h"
#include "../StackFrame.h"
#include "../StackOverflowError.h"
#include "../String.h"
#include "../StringBuffer.h"
#include "../StringConcenator.h"
#include "../StringIndexOutOfBoundsException.h"
#include "../StringInline.h"
#include "../StringUtf8Utils.h"
#include "../System.h"
#include "../SystemError.h"
#include "../SystemInline.h"
#include "../SystemIntern.h"
#include "../Thread.h"
#include "../ThreadDeath.h"
#include "../ThreadGroup.h"
#include "../ThreadImpl.h"
#include "../ThreadLocal.h"
#include "../ThreadLocalImpl.h"
#include "../Throwable.h"
#include "../UnicodeCharacter.h"
#include "../UnsupportedOperationException.h"
#include "../Void.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
ThreadLocal_create_array(int length)
{
  return new ObjectArrayImpl<RThreadLocal>(length);
}

//static
::acdk::lang::RObject
ThreadLocal_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ThreadLocal_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadLocal_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ThreadLocal::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadLocal_method_ThreadLocal__LRThreadLocal__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ThreadLocal();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadLocal_method_ThreadLocal_INLRObject__LRThreadLocal__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ThreadLocal(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadLocal_method_get__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ThreadLocal* This = dmi_cast<ThreadLocal>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ThreadLocal::get();
    else
        ret = (::acdk::lang::RObject)This->get();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadLocal_method_set_INLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ThreadLocal* This = dmi_cast<ThreadLocal>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ThreadLocal::set(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        This->set(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadLocal_method_threadEnd__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ThreadLocal::threadEnd();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ThreadLocal_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadLocal_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadLocal_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadLocal_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ThreadLocal_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ThreadLocal_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ThreadLocal_MetainfoWrapper::ThreadLocal_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadLocal_methods_ThreadLocal__LRThreadLocal__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadLocal_methods_ThreadLocal__LRThreadLocal__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadLocal_method_ThreadLocal__LRThreadLocal_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ThreadLocal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ThreadLocal::clazzInfo(), // return type
  "_0_ThreadLocal", // alternative name of method
  -1, // altlabelHashCode
  ThreadLocal_methods_ThreadLocal__LRThreadLocal__args, // the arguments
  0, //arguments count
  ThreadLocal_methods_ThreadLocal__LRThreadLocal__exceptions, // the declared exceptions
  ThreadLocal_MetainfoWrapper::ThreadLocal_method_ThreadLocal__LRThreadLocal__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ThreadLocal_methods_ThreadLocal_INLRObject__LRThreadLocal__arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadLocal_methods_ThreadLocal_INLRObject__LRThreadLocal__args[] = 
{
  &ThreadLocal_methods_ThreadLocal_INLRObject__LRThreadLocal__arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadLocal_methods_ThreadLocal_INLRObject__LRThreadLocal__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadLocal_method_ThreadLocal_INLRObject__LRThreadLocal_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ThreadLocal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ThreadLocal::clazzInfo(), // return type
  "_1_ThreadLocal", // alternative name of method
  -1, // altlabelHashCode
  ThreadLocal_methods_ThreadLocal_INLRObject__LRThreadLocal__args, // the arguments
  0, //arguments count
  ThreadLocal_methods_ThreadLocal_INLRObject__LRThreadLocal__exceptions, // the declared exceptions
  ThreadLocal_MetainfoWrapper::ThreadLocal_method_ThreadLocal_INLRObject__LRThreadLocal__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadLocal_methods_get__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadLocal_methods_get__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadLocal_method_get__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "get", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_2_get", // alternative name of method
  -1, // altlabelHashCode
  ThreadLocal_methods_get__LRObject__args, // the arguments
  0, //arguments count
  ThreadLocal_methods_get__LRObject__exceptions, // the declared exceptions
  ThreadLocal_MetainfoWrapper::ThreadLocal_method_get__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ThreadLocal_methods_set_INLRObject__V_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadLocal_methods_set_INLRObject__V_args[] = 
{
  &ThreadLocal_methods_set_INLRObject__V_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadLocal_methods_set_INLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadLocal_method_set_INLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "set", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_set", // alternative name of method
  -1, // altlabelHashCode
  ThreadLocal_methods_set_INLRObject__V_args, // the arguments
  0, //arguments count
  ThreadLocal_methods_set_INLRObject__V_exceptions, // the declared exceptions
  ThreadLocal_MetainfoWrapper::ThreadLocal_method_set_INLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadLocal_methods_threadEnd__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadLocal_methods_threadEnd__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadLocal_method_threadEnd__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "threadEnd", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_threadEnd", // alternative name of method
  -1, // altlabelHashCode
  ThreadLocal_methods_threadEnd__V_args, // the arguments
  0, //arguments count
  ThreadLocal_methods_threadEnd__V_exceptions, // the declared exceptions
  ThreadLocal_MetainfoWrapper::ThreadLocal_method_threadEnd__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ThreadLocal_methods[] = 
{
  &ThreadLocal_method_GetClass__L_acdk_lang_RClass_,
  &ThreadLocal_method_ThreadLocal__LRThreadLocal_,
  &ThreadLocal_method_ThreadLocal_INLRObject__LRThreadLocal_,
  &ThreadLocal_method_get__LRObject_,
  &ThreadLocal_method_set_INLRObject__V,
  &ThreadLocal_method_threadEnd__V,
  0
};


struct ThreadLocal_MetaInfoInitializer
{  ThreadLocal_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ThreadLocal::clazzInfo();
    ci->fields =  _ThreadLocal_fields;
    ci->methods =  _ThreadLocal_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ThreadLocal_MetaInfoInitializer ThreadLocal_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
ThrowListener_create_array(int length)
{
  return new ObjectArrayImpl<RThrowListener>(length);
}

//static
::acdk::lang::RObject
ThrowListener_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ThrowListener_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThrowListener_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ThrowListener::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThrowListener_method_onThrow_INLRThrowable_IINLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ThrowListener* This = dmi_cast<ThrowListener>(This_);
  ret = This->onThrow(::acdk::lang::dmi::castTo< RThrowable>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ThrowListener_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThrowListener_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ThrowListener_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThrowListener_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ThrowListener_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ThrowListener_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ThrowListener_MetainfoWrapper::ThrowListener_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ThrowListener_methods_onThrow_INLRThrowable_IINLRString__Z_arg_ex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThrowable::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ThrowListener_methods_onThrow_INLRThrowable_IINLRString__Z_arg_line = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "line", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ThrowListener_methods_onThrow_INLRThrowable_IINLRString__Z_arg_file = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "file", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThrowListener_methods_onThrow_INLRThrowable_IINLRString__Z_args[] = 
{
  &ThrowListener_methods_onThrow_INLRThrowable_IINLRString__Z_arg_ex,
  &ThrowListener_methods_onThrow_INLRThrowable_IINLRString__Z_arg_line,
  &ThrowListener_methods_onThrow_INLRThrowable_IINLRString__Z_arg_file,
  0
};

::acdk::lang::dmi::ClazzInfo* ThrowListener_methods_onThrow_INLRThrowable_IINLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThrowListener_method_onThrow_INLRThrowable_IINLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "onThrow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_0_onThrow", // alternative name of method
  -1, // altlabelHashCode
  ThrowListener_methods_onThrow_INLRThrowable_IINLRString__Z_args, // the arguments
  0, //arguments count
  ThrowListener_methods_onThrow_INLRThrowable_IINLRString__Z_exceptions, // the declared exceptions
  ThrowListener_MetainfoWrapper::ThrowListener_method_onThrow_INLRThrowable_IINLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ThrowListener_methods[] = 
{
  &ThrowListener_method_GetClass__L_acdk_lang_RClass_,
  &ThrowListener_method_onThrow_INLRThrowable_IINLRString__Z,
  0
};


struct ThrowListener_MetaInfoInitializer
{  ThrowListener_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ThrowListener::clazzInfo();
    ci->fields =  _ThrowListener_fields;
    ci->methods =  _ThrowListener_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ThrowListener_MetaInfoInitializer ThrowListener_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
Throwable_create_array(int length)
{
  return new ObjectArrayImpl<RThrowable>(length);
}

//static
::acdk::lang::RObject
Throwable_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Throwable_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Throwable_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Throwable::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Throwable_method_Throwable_INLRString_INLRThrowable__LRThrowable__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Throwable(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RThrowable>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Throwable_method_Throwable_INLRString__LRThrowable__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Throwable(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Throwable_method_Throwable__LRThrowable__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Throwable();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Throwable_method_Throwable_INLRThrowable__LRThrowable__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Throwable(::acdk::lang::dmi::castTo< RThrowable>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Throwable_method_create_instance__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Throwable::create_instance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Throwable_method_getCause__LRThrowable__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Throwable* This = dmi_cast<Throwable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Throwable::getCause();
    else
        ret = (::acdk::lang::RObject)This->getCause();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Throwable_method_getMessage__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Throwable* This = dmi_cast<Throwable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Throwable::getMessage();
    else
        ret = (::acdk::lang::RObject)This->getMessage();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Throwable_method_getStackFrames__LRStackFrameArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Throwable* This = dmi_cast<Throwable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Throwable::getStackFrames();
    else
        ret = (::acdk::lang::RObject)This->getStackFrames();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Throwable_method_initCause_INLRThrowable__LRThrowable__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Throwable* This = dmi_cast<Throwable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Throwable::initCause(::acdk::lang::dmi::castTo< RThrowable>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->initCause(::acdk::lang::dmi::castTo< RThrowable>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Throwable_method_printStackTrace_INLacdk_io_RPrintWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Throwable* This = dmi_cast<Throwable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Throwable::printStackTrace(::acdk::lang::dmi::castTo< acdk::io::RPrintWriter>(args[0], dc));
    else
        This->printStackTrace(::acdk::lang::dmi::castTo< acdk::io::RPrintWriter>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Throwable_method_printStackTrace__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Throwable* This = dmi_cast<Throwable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Throwable::printStackTrace();
    else
        This->printStackTrace();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Throwable_method_registerThrowListener_INLRThrowListener__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Throwable::registerThrowListener(::acdk::lang::dmi::castTo< RThrowListener>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Throwable_method_throwException_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Throwable* This = dmi_cast<Throwable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Throwable::throwException(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->throwException(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Throwable_method_throwException__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Throwable* This = dmi_cast<Throwable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Throwable::throwException();
    else
        This->throwException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Throwable_method_unregisterThrowListener_INLRThrowListener__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Throwable::unregisterThrowListener(::acdk::lang::dmi::castTo< RThrowListener>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Throwable_method_writeObject_INLacdk_io_RObjectWriter_INLRClass__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Throwable* This = dmi_cast<Throwable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Throwable::writeObject(::acdk::lang::dmi::castTo< acdk::io::RObjectWriter>(args[0], dc), ::acdk::lang::dmi::castTo< RClass>(args[1], dc));
    else
        This->writeObject(::acdk::lang::dmi::castTo< acdk::io::RObjectWriter>(args[0], dc), ::acdk::lang::dmi::castTo< RClass>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Throwable_fields__cause_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Throwable* This = dmi_cast<Throwable>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_cause, flags);
    else
      This->_cause = ::acdk::lang::dmi::castTo< RThrowable>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Throwable_fields__stackFrames_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Throwable* This = dmi_cast<Throwable>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_stackFrames, flags);
    else
      This->_stackFrames = ::acdk::lang::dmi::castTo< RStackFrameArray>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Throwable_fields__what_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Throwable* This = dmi_cast<Throwable>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_what, flags);
    else
      This->_what = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
};


void ThrowException_Throwable(IN(::acdk::lang::RThrowable) ex)
{
  throw RThrowable(ex);
}

::acdk::lang::dmi::ClazzFieldInfo Throwable_fields__cause = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_cause", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThrowable::clazzInfo(),
  Throwable_MetainfoWrapper::Throwable_fields__cause_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Throwable_fields__stackFrames = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_stackFrames", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStackFrameArray::clazzInfo(),
  Throwable_MetainfoWrapper::Throwable_fields__stackFrames_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Throwable_fields__what = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_what", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  Throwable_MetainfoWrapper::Throwable_fields__what_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _Throwable_fields[] = 
{
  &Throwable_fields__cause,
  &Throwable_fields__stackFrames,
  &Throwable_fields__what,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Throwable_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Throwable_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Throwable_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_g_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Throwable_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Throwable_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Throwable_MetainfoWrapper::Throwable_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Throwable_methods_Throwable_INLRString_INLRThrowable__LRThrowable__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Throwable_methods_Throwable_INLRString_INLRThrowable__LRThrowable__arg_cause = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "cause", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThrowable::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Throwable_methods_Throwable_INLRString_INLRThrowable__LRThrowable__args[] = 
{
  &Throwable_methods_Throwable_INLRString_INLRThrowable__LRThrowable__arg_what,
  &Throwable_methods_Throwable_INLRString_INLRThrowable__LRThrowable__arg_cause,
  0
};

::acdk::lang::dmi::ClazzInfo* Throwable_methods_Throwable_INLRString_INLRThrowable__LRThrowable__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Throwable_method_Throwable_INLRString_INLRThrowable__LRThrowable_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Throwable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Throwable::clazzInfo(), // return type
  "_2_Throwable", // alternative name of method
  -1, // altlabelHashCode
  Throwable_methods_Throwable_INLRString_INLRThrowable__LRThrowable__args, // the arguments
  0, //arguments count
  Throwable_methods_Throwable_INLRString_INLRThrowable__LRThrowable__exceptions, // the declared exceptions
  Throwable_MetainfoWrapper::Throwable_method_Throwable_INLRString_INLRThrowable__LRThrowable__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Throwable_methods_Throwable_INLRString__LRThrowable__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Throwable_methods_Throwable_INLRString__LRThrowable__args[] = 
{
  &Throwable_methods_Throwable_INLRString__LRThrowable__arg_what,
  0
};

::acdk::lang::dmi::ClazzInfo* Throwable_methods_Throwable_INLRString__LRThrowable__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Throwable_method_Throwable_INLRString__LRThrowable_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Throwable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Throwable::clazzInfo(), // return type
  "_3_Throwable", // alternative name of method
  -1, // altlabelHashCode
  Throwable_methods_Throwable_INLRString__LRThrowable__args, // the arguments
  0, //arguments count
  Throwable_methods_Throwable_INLRString__LRThrowable__exceptions, // the declared exceptions
  Throwable_MetainfoWrapper::Throwable_method_Throwable_INLRString__LRThrowable__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Throwable_methods_Throwable__LRThrowable__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Throwable_methods_Throwable__LRThrowable__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Throwable_method_Throwable__LRThrowable_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Throwable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Throwable::clazzInfo(), // return type
  "_1_Throwable", // alternative name of method
  -1, // altlabelHashCode
  Throwable_methods_Throwable__LRThrowable__args, // the arguments
  0, //arguments count
  Throwable_methods_Throwable__LRThrowable__exceptions, // the declared exceptions
  Throwable_MetainfoWrapper::Throwable_method_Throwable__LRThrowable__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Throwable_methods_Throwable_INLRThrowable__LRThrowable__arg_cause = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cause", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThrowable::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Throwable_methods_Throwable_INLRThrowable__LRThrowable__args[] = 
{
  &Throwable_methods_Throwable_INLRThrowable__LRThrowable__arg_cause,
  0
};

::acdk::lang::dmi::ClazzInfo* Throwable_methods_Throwable_INLRThrowable__LRThrowable__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Throwable_method_Throwable_INLRThrowable__LRThrowable_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Throwable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Throwable::clazzInfo(), // return type
  "_4_Throwable", // alternative name of method
  -1, // altlabelHashCode
  Throwable_methods_Throwable_INLRThrowable__LRThrowable__args, // the arguments
  0, //arguments count
  Throwable_methods_Throwable_INLRThrowable__LRThrowable__exceptions, // the declared exceptions
  Throwable_MetainfoWrapper::Throwable_method_Throwable_INLRThrowable__LRThrowable__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Throwable_methods_create_instance__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Throwable_methods_create_instance__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Throwable_method_create_instance__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create_instance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_0_create_instance", // alternative name of method
  -1, // altlabelHashCode
  Throwable_methods_create_instance__LRObject__args, // the arguments
  0, //arguments count
  Throwable_methods_create_instance__LRObject__exceptions, // the declared exceptions
  Throwable_MetainfoWrapper::Throwable_method_create_instance__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Throwable_methods_getCause__LRThrowable__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Throwable_methods_getCause__LRThrowable__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Throwable_method_getCause__LRThrowable_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCause", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThrowable::clazzInfo(), // return type
  "_6_getCause", // alternative name of method
  -1, // altlabelHashCode
  Throwable_methods_getCause__LRThrowable__args, // the arguments
  0, //arguments count
  Throwable_methods_getCause__LRThrowable__exceptions, // the declared exceptions
  Throwable_MetainfoWrapper::Throwable_method_getCause__LRThrowable__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Throwable_methods_getMessage__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Throwable_methods_getMessage__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Throwable_method_getMessage__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMessage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_5_getMessage", // alternative name of method
  -1, // altlabelHashCode
  Throwable_methods_getMessage__LRString__args, // the arguments
  0, //arguments count
  Throwable_methods_getMessage__LRString__exceptions, // the declared exceptions
  Throwable_MetainfoWrapper::Throwable_method_getMessage__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Throwable_methods_getStackFrames__LRStackFrameArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Throwable_methods_getStackFrames__LRStackFrameArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Throwable_method_getStackFrames__LRStackFrameArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getStackFrames", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStackFrameArray::clazzInfo(), // return type
  "_a_getStackFrames", // alternative name of method
  -1, // altlabelHashCode
  Throwable_methods_getStackFrames__LRStackFrameArray__args, // the arguments
  0, //arguments count
  Throwable_methods_getStackFrames__LRStackFrameArray__exceptions, // the declared exceptions
  Throwable_MetainfoWrapper::Throwable_method_getStackFrames__LRStackFrameArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Throwable_methods_initCause_INLRThrowable__LRThrowable__arg_cause = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cause", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThrowable::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Throwable_methods_initCause_INLRThrowable__LRThrowable__args[] = 
{
  &Throwable_methods_initCause_INLRThrowable__LRThrowable__arg_cause,
  0
};

::acdk::lang::dmi::ClazzInfo* Throwable_methods_initCause_INLRThrowable__LRThrowable__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Throwable_method_initCause_INLRThrowable__LRThrowable_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "initCause", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThrowable::clazzInfo(), // return type
  "_7_initCause", // alternative name of method
  -1, // altlabelHashCode
  Throwable_methods_initCause_INLRThrowable__LRThrowable__args, // the arguments
  0, //arguments count
  Throwable_methods_initCause_INLRThrowable__LRThrowable__exceptions, // the declared exceptions
  Throwable_MetainfoWrapper::Throwable_method_initCause_INLRThrowable__LRThrowable__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Throwable_methods_printStackTrace_INLacdk_io_RPrintWriter__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Throwable_methods_printStackTrace_INLacdk_io_RPrintWriter__V_args[] = 
{
  &Throwable_methods_printStackTrace_INLacdk_io_RPrintWriter__V_arg_out,
  0
};

::acdk::lang::dmi::ClazzInfo* Throwable_methods_printStackTrace_INLacdk_io_RPrintWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Throwable_method_printStackTrace_INLacdk_io_RPrintWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "printStackTrace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_printStackTrace", // alternative name of method
  -1, // altlabelHashCode
  Throwable_methods_printStackTrace_INLacdk_io_RPrintWriter__V_args, // the arguments
  0, //arguments count
  Throwable_methods_printStackTrace_INLacdk_io_RPrintWriter__V_exceptions, // the declared exceptions
  Throwable_MetainfoWrapper::Throwable_method_printStackTrace_INLacdk_io_RPrintWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Throwable_methods_printStackTrace__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Throwable_methods_printStackTrace__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Throwable_method_printStackTrace__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "printStackTrace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_printStackTrace", // alternative name of method
  -1, // altlabelHashCode
  Throwable_methods_printStackTrace__V_args, // the arguments
  0, //arguments count
  Throwable_methods_printStackTrace__V_exceptions, // the declared exceptions
  Throwable_MetainfoWrapper::Throwable_method_printStackTrace__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Throwable_methods_registerThrowListener_INLRThrowListener__V_arg_listner = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "listner", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThrowListener::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Throwable_methods_registerThrowListener_INLRThrowListener__V_args[] = 
{
  &Throwable_methods_registerThrowListener_INLRThrowListener__V_arg_listner,
  0
};

::acdk::lang::dmi::ClazzInfo* Throwable_methods_registerThrowListener_INLRThrowListener__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Throwable_method_registerThrowListener_INLRThrowListener__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "registerThrowListener", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_registerThrowListener", // alternative name of method
  -1, // altlabelHashCode
  Throwable_methods_registerThrowListener_INLRThrowListener__V_args, // the arguments
  0, //arguments count
  Throwable_methods_registerThrowListener_INLRThrowListener__V_exceptions, // the declared exceptions
  Throwable_MetainfoWrapper::Throwable_method_registerThrowListener_INLRThrowListener__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Throwable_methods_throwException_Z_V_arg_onlyIfHasMeta = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onlyIfHasMeta", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Throwable_methods_throwException_Z_V_args[] = 
{
  &Throwable_methods_throwException_Z_V_arg_onlyIfHasMeta,
  0
};

::acdk::lang::dmi::ClazzInfo* Throwable_methods_throwException_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Throwable_method_throwException_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "throwException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_throwException", // alternative name of method
  -1, // altlabelHashCode
  Throwable_methods_throwException_Z_V_args, // the arguments
  0, //arguments count
  Throwable_methods_throwException_Z_V_exceptions, // the declared exceptions
  Throwable_MetainfoWrapper::Throwable_method_throwException_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Throwable_methods_throwException__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Throwable_methods_throwException__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Throwable_method_throwException__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "throwException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_throwException", // alternative name of method
  -1, // altlabelHashCode
  Throwable_methods_throwException__V_args, // the arguments
  0, //arguments count
  Throwable_methods_throwException__V_exceptions, // the declared exceptions
  Throwable_MetainfoWrapper::Throwable_method_throwException__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Throwable_methods_unregisterThrowListener_INLRThrowListener__V_arg_listner = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "listner", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThrowListener::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Throwable_methods_unregisterThrowListener_INLRThrowListener__V_args[] = 
{
  &Throwable_methods_unregisterThrowListener_INLRThrowListener__V_arg_listner,
  0
};

::acdk::lang::dmi::ClazzInfo* Throwable_methods_unregisterThrowListener_INLRThrowListener__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Throwable_method_unregisterThrowListener_INLRThrowListener__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "unregisterThrowListener", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_unregisterThrowListener", // alternative name of method
  -1, // altlabelHashCode
  Throwable_methods_unregisterThrowListener_INLRThrowListener__V_args, // the arguments
  0, //arguments count
  Throwable_methods_unregisterThrowListener_INLRThrowListener__V_exceptions, // the declared exceptions
  Throwable_MetainfoWrapper::Throwable_method_unregisterThrowListener_INLRThrowListener__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Throwable_methods_writeObject_INLacdk_io_RObjectWriter_INLRClass__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RObjectWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Throwable_methods_writeObject_INLacdk_io_RObjectWriter_INLRClass__V_arg_cls = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cls", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Throwable_methods_writeObject_INLacdk_io_RObjectWriter_INLRClass__V_args[] = 
{
  &Throwable_methods_writeObject_INLacdk_io_RObjectWriter_INLRClass__V_arg_out,
  &Throwable_methods_writeObject_INLacdk_io_RObjectWriter_INLRClass__V_arg_cls,
  0
};

::acdk::lang::dmi::ClazzInfo* Throwable_methods_writeObject_INLacdk_io_RObjectWriter_INLRClass__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Throwable_method_writeObject_INLacdk_io_RObjectWriter_INLRClass__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_writeObject", // alternative name of method
  -1, // altlabelHashCode
  Throwable_methods_writeObject_INLacdk_io_RObjectWriter_INLRClass__V_args, // the arguments
  0, //arguments count
  Throwable_methods_writeObject_INLacdk_io_RObjectWriter_INLRClass__V_exceptions, // the declared exceptions
  Throwable_MetainfoWrapper::Throwable_method_writeObject_INLacdk_io_RObjectWriter_INLRClass__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Throwable_methods[] = 
{
  &Throwable_method_GetClass__L_acdk_lang_RClass_,
  &Throwable_method_Throwable_INLRString_INLRThrowable__LRThrowable_,
  &Throwable_method_Throwable_INLRString__LRThrowable_,
  &Throwable_method_Throwable__LRThrowable_,
  &Throwable_method_Throwable_INLRThrowable__LRThrowable_,
  &Throwable_method_create_instance__LRObject_,
  &Throwable_method_getCause__LRThrowable_,
  &Throwable_method_getMessage__LRString_,
  &Throwable_method_getStackFrames__LRStackFrameArray_,
  &Throwable_method_initCause_INLRThrowable__LRThrowable_,
  &Throwable_method_printStackTrace_INLacdk_io_RPrintWriter__V,
  &Throwable_method_printStackTrace__V,
  &Throwable_method_registerThrowListener_INLRThrowListener__V,
  &Throwable_method_throwException_Z_V,
  &Throwable_method_throwException__V,
  &Throwable_method_unregisterThrowListener_INLRThrowListener__V,
  &Throwable_method_writeObject_INLacdk_io_RObjectWriter_INLRClass__V,
  0
};


struct Throwable_MetaInfoInitializer
{  Throwable_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Throwable::clazzInfo();
    ci->fields =  _Throwable_fields;
    ci->methods =  _Throwable_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Throwable_MetaInfoInitializer Throwable_MetaInfoInitializer_staticinstance__;


struct Throwable_clazzInfo_ClazzAttributesResInitializer43
{
  Throwable_clazzInfo_ClazzAttributesResInitializer43()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)Throwable::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_Throwable));
  }
};

Throwable_clazzInfo_ClazzAttributesResInitializer43 Throwable_clazzInfo_ClazzAttributesResInitializer43_instance;



} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
UnicodeCharacter_create_array(int length)
{
  return new ObjectArrayImpl<RUnicodeCharacter>(length);
}

//static
::acdk::lang::RObject
UnicodeCharacter_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class UnicodeCharacter_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UnicodeCharacter_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)UnicodeCharacter::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UnicodeCharacter_method_UnicodeCharacter_Luc2char__LRUnicodeCharacter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new UnicodeCharacter(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UnicodeCharacter_method_asciiDigit_Luc2char_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = UnicodeCharacter::asciiDigit(::acdk::lang::dmi::castTo< uc2char>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UnicodeCharacter_method_charValue__Luc2char__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    UnicodeCharacter* This = dmi_cast<UnicodeCharacter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->UnicodeCharacter::charValue();
    else
      ret = This->charValue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UnicodeCharacter_method_compareTo_INLRUnicodeCharacter__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    UnicodeCharacter* This = dmi_cast<UnicodeCharacter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->UnicodeCharacter::compareTo(::acdk::lang::dmi::castTo< RUnicodeCharacter>(args[0], dc));
    else
      ret = This->compareTo(::acdk::lang::dmi::castTo< RUnicodeCharacter>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UnicodeCharacter_method_compareTo_Luc2char_Luc2char__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = UnicodeCharacter::compareTo(::acdk::lang::dmi::castTo< uc2char>(args[0], dc), ::acdk::lang::dmi::castTo< uc2char>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UnicodeCharacter_method_compareToIgnoreCase_Luc2char_Luc2char__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = UnicodeCharacter::compareToIgnoreCase(::acdk::lang::dmi::castTo< uc2char>(args[0], dc), ::acdk::lang::dmi::castTo< uc2char>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UnicodeCharacter_method_create_instance__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)UnicodeCharacter::create_instance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UnicodeCharacter_method_decVal_UC_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = UnicodeCharacter::decVal(::acdk::lang::dmi::castTo< ucchar>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UnicodeCharacter_method_getCharacterDescription_Luc2char__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)UnicodeCharacter::getCharacterDescription(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UnicodeCharacter_method_getTYPE__LRClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)UnicodeCharacter::getTYPE();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UnicodeCharacter_method_isControl_Luc2char__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = UnicodeCharacter::isControl(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UnicodeCharacter_method_isDigit_Luc2char__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = UnicodeCharacter::isDigit(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UnicodeCharacter_method_isJavaIdentifierPart_Luc2char__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = UnicodeCharacter::isJavaIdentifierPart(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UnicodeCharacter_method_isJavaIdentifierStart_Luc2char__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = UnicodeCharacter::isJavaIdentifierStart(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UnicodeCharacter_method_isLetter_Luc2char__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = UnicodeCharacter::isLetter(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UnicodeCharacter_method_isLetterOrDigit_Luc2char__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = UnicodeCharacter::isLetterOrDigit(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UnicodeCharacter_method_isLowerCase_Luc2char__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = UnicodeCharacter::isLowerCase(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UnicodeCharacter_method_isMark_Luc2char__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = UnicodeCharacter::isMark(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UnicodeCharacter_method_isPunctation_Luc2char__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = UnicodeCharacter::isPunctation(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UnicodeCharacter_method_isSpace_Luc2char__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = UnicodeCharacter::isSpace(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UnicodeCharacter_method_isSymbol_Luc2char__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = UnicodeCharacter::isSymbol(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UnicodeCharacter_method_isTitleCase_Luc2char__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = UnicodeCharacter::isTitleCase(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UnicodeCharacter_method_isUnicodeIdentifierPart_Luc2char__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = UnicodeCharacter::isUnicodeIdentifierPart(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UnicodeCharacter_method_isUnicodeIdentifierStart_Luc2char__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = UnicodeCharacter::isUnicodeIdentifierStart(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UnicodeCharacter_method_isUpperCase_Luc2char__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = UnicodeCharacter::isUpperCase(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UnicodeCharacter_method_isWhitespace_Luc2char__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = UnicodeCharacter::isWhitespace(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UnicodeCharacter_method_isWhitespaceOnly_Luc2char__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = UnicodeCharacter::isWhitespaceOnly(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UnicodeCharacter_method_toLowerCase_Luc2char__Luc2char__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = UnicodeCharacter::toLowerCase(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UnicodeCharacter_method_toString_Luc2char__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)UnicodeCharacter::toString(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UnicodeCharacter_method_toUpperCase_Luc2char__Luc2char__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = UnicodeCharacter::toUpperCase(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  UnicodeCharacter_fields_MAX_RADIX_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(UnicodeCharacter::MAX_RADIX, flags);
    else
      UnicodeCharacter::MAX_RADIX = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  UnicodeCharacter_fields_MAX_VALUE_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(UnicodeCharacter::MAX_VALUE, flags);
    else
      UnicodeCharacter::MAX_VALUE = ::acdk::lang::dmi::castTo< uc2char>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  UnicodeCharacter_fields_MIN_RADIX_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(UnicodeCharacter::MIN_RADIX, flags);
    else
      UnicodeCharacter::MIN_RADIX = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  UnicodeCharacter_fields_MIN_VALUE_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(UnicodeCharacter::MIN_VALUE, flags);
    else
      UnicodeCharacter::MIN_VALUE = ::acdk::lang::dmi::castTo< uc2char>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  UnicodeCharacter_fields__value_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    UnicodeCharacter* This = dmi_cast<UnicodeCharacter>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_value, flags);
    else
      This->_value = ::acdk::lang::dmi::castTo< uc2char>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo UnicodeCharacter_fields_MAX_RADIX = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "MAX_RADIX", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  UnicodeCharacter_MetainfoWrapper::UnicodeCharacter_fields_MAX_RADIX_accessor, // read/write access to this fields
  (void*)&UnicodeCharacter::MAX_RADIX // address of field
};

::acdk::lang::dmi::ClazzFieldInfo UnicodeCharacter_fields_MAX_VALUE = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "MAX_VALUE", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz(),
  UnicodeCharacter_MetainfoWrapper::UnicodeCharacter_fields_MAX_VALUE_accessor, // read/write access to this fields
  (void*)&UnicodeCharacter::MAX_VALUE // address of field
};

::acdk::lang::dmi::ClazzFieldInfo UnicodeCharacter_fields_MIN_RADIX = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "MIN_RADIX", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  UnicodeCharacter_MetainfoWrapper::UnicodeCharacter_fields_MIN_RADIX_accessor, // read/write access to this fields
  (void*)&UnicodeCharacter::MIN_RADIX // address of field
};

::acdk::lang::dmi::ClazzFieldInfo UnicodeCharacter_fields_MIN_VALUE = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "MIN_VALUE", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz(),
  UnicodeCharacter_MetainfoWrapper::UnicodeCharacter_fields_MIN_VALUE_accessor, // read/write access to this fields
  (void*)&UnicodeCharacter::MIN_VALUE // address of field
};

::acdk::lang::dmi::ClazzFieldInfo UnicodeCharacter_fields__value = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_value", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz(),
  UnicodeCharacter_MetainfoWrapper::UnicodeCharacter_fields__value_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _UnicodeCharacter_fields[] = 
{
  &UnicodeCharacter_fields_MAX_RADIX,
  &UnicodeCharacter_fields_MAX_VALUE,
  &UnicodeCharacter_fields_MIN_RADIX,
  &UnicodeCharacter_fields_MIN_VALUE,
  &UnicodeCharacter_fields__value,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* UnicodeCharacter_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* UnicodeCharacter_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UnicodeCharacter_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_u_GetClass", // alternative name of method
  -1, // altlabelHashCode
  UnicodeCharacter_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  UnicodeCharacter_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  UnicodeCharacter_MetainfoWrapper::UnicodeCharacter_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UnicodeCharacter_methods_UnicodeCharacter_Luc2char__LRUnicodeCharacter__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UnicodeCharacter_methods_UnicodeCharacter_Luc2char__LRUnicodeCharacter__args[] = 
{
  &UnicodeCharacter_methods_UnicodeCharacter_Luc2char__LRUnicodeCharacter__arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* UnicodeCharacter_methods_UnicodeCharacter_Luc2char__LRUnicodeCharacter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UnicodeCharacter_method_UnicodeCharacter_Luc2char__LRUnicodeCharacter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "UnicodeCharacter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  UnicodeCharacter::clazzInfo(), // return type
  "_1_UnicodeCharacter", // alternative name of method
  -1, // altlabelHashCode
  UnicodeCharacter_methods_UnicodeCharacter_Luc2char__LRUnicodeCharacter__args, // the arguments
  0, //arguments count
  UnicodeCharacter_methods_UnicodeCharacter_Luc2char__LRUnicodeCharacter__exceptions, // the declared exceptions
  UnicodeCharacter_MetainfoWrapper::UnicodeCharacter_method_UnicodeCharacter_Luc2char__LRUnicodeCharacter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UnicodeCharacter_methods_asciiDigit_Luc2char_I_I_arg_ch = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ch", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo UnicodeCharacter_methods_asciiDigit_Luc2char_I_I_arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UnicodeCharacter_methods_asciiDigit_Luc2char_I_I_args[] = 
{
  &UnicodeCharacter_methods_asciiDigit_Luc2char_I_I_arg_ch,
  &UnicodeCharacter_methods_asciiDigit_Luc2char_I_I_arg_idx,
  0
};

::acdk::lang::dmi::ClazzInfo* UnicodeCharacter_methods_asciiDigit_Luc2char_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UnicodeCharacter_method_asciiDigit_Luc2char_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "asciiDigit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_asciiDigit", // alternative name of method
  -1, // altlabelHashCode
  UnicodeCharacter_methods_asciiDigit_Luc2char_I_I_args, // the arguments
  0, //arguments count
  UnicodeCharacter_methods_asciiDigit_Luc2char_I_I_exceptions, // the declared exceptions
  UnicodeCharacter_MetainfoWrapper::UnicodeCharacter_method_asciiDigit_Luc2char_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* UnicodeCharacter_methods_charValue__Luc2char__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* UnicodeCharacter_methods_charValue__Luc2char__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UnicodeCharacter_method_charValue__Luc2char_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "charValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz(), // return type
  "_2_charValue", // alternative name of method
  -1, // altlabelHashCode
  UnicodeCharacter_methods_charValue__Luc2char__args, // the arguments
  0, //arguments count
  UnicodeCharacter_methods_charValue__Luc2char__exceptions, // the declared exceptions
  UnicodeCharacter_MetainfoWrapper::UnicodeCharacter_method_charValue__Luc2char__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UnicodeCharacter_methods_compareTo_INLRUnicodeCharacter__I_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RUnicodeCharacter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UnicodeCharacter_methods_compareTo_INLRUnicodeCharacter__I_args[] = 
{
  &UnicodeCharacter_methods_compareTo_INLRUnicodeCharacter__I_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* UnicodeCharacter_methods_compareTo_INLRUnicodeCharacter__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UnicodeCharacter_method_compareTo_INLRUnicodeCharacter__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "compareTo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3_compareTo", // alternative name of method
  -1, // altlabelHashCode
  UnicodeCharacter_methods_compareTo_INLRUnicodeCharacter__I_args, // the arguments
  0, //arguments count
  UnicodeCharacter_methods_compareTo_INLRUnicodeCharacter__I_exceptions, // the declared exceptions
  UnicodeCharacter_MetainfoWrapper::UnicodeCharacter_method_compareTo_INLRUnicodeCharacter__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UnicodeCharacter_methods_compareTo_Luc2char_Luc2char__I_arg_first = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "first", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo UnicodeCharacter_methods_compareTo_Luc2char_Luc2char__I_arg_second = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "second", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UnicodeCharacter_methods_compareTo_Luc2char_Luc2char__I_args[] = 
{
  &UnicodeCharacter_methods_compareTo_Luc2char_Luc2char__I_arg_first,
  &UnicodeCharacter_methods_compareTo_Luc2char_Luc2char__I_arg_second,
  0
};

::acdk::lang::dmi::ClazzInfo* UnicodeCharacter_methods_compareTo_Luc2char_Luc2char__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UnicodeCharacter_method_compareTo_Luc2char_Luc2char__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "compareTo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_4_compareTo", // alternative name of method
  -1, // altlabelHashCode
  UnicodeCharacter_methods_compareTo_Luc2char_Luc2char__I_args, // the arguments
  0, //arguments count
  UnicodeCharacter_methods_compareTo_Luc2char_Luc2char__I_exceptions, // the declared exceptions
  UnicodeCharacter_MetainfoWrapper::UnicodeCharacter_method_compareTo_Luc2char_Luc2char__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UnicodeCharacter_methods_compareToIgnoreCase_Luc2char_Luc2char__I_arg_first = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "first", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo UnicodeCharacter_methods_compareToIgnoreCase_Luc2char_Luc2char__I_arg_second = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "second", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UnicodeCharacter_methods_compareToIgnoreCase_Luc2char_Luc2char__I_args[] = 
{
  &UnicodeCharacter_methods_compareToIgnoreCase_Luc2char_Luc2char__I_arg_first,
  &UnicodeCharacter_methods_compareToIgnoreCase_Luc2char_Luc2char__I_arg_second,
  0
};

::acdk::lang::dmi::ClazzInfo* UnicodeCharacter_methods_compareToIgnoreCase_Luc2char_Luc2char__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UnicodeCharacter_method_compareToIgnoreCase_Luc2char_Luc2char__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "compareToIgnoreCase", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_compareToIgnoreCase", // alternative name of method
  -1, // altlabelHashCode
  UnicodeCharacter_methods_compareToIgnoreCase_Luc2char_Luc2char__I_args, // the arguments
  0, //arguments count
  UnicodeCharacter_methods_compareToIgnoreCase_Luc2char_Luc2char__I_exceptions, // the declared exceptions
  UnicodeCharacter_MetainfoWrapper::UnicodeCharacter_method_compareToIgnoreCase_Luc2char_Luc2char__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* UnicodeCharacter_methods_create_instance__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* UnicodeCharacter_methods_create_instance__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UnicodeCharacter_method_create_instance__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create_instance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_0_create_instance", // alternative name of method
  -1, // altlabelHashCode
  UnicodeCharacter_methods_create_instance__LRObject__args, // the arguments
  0, //arguments count
  UnicodeCharacter_methods_create_instance__LRObject__exceptions, // the declared exceptions
  UnicodeCharacter_MetainfoWrapper::UnicodeCharacter_method_create_instance__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UnicodeCharacter_methods_decVal_UC_I_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UnicodeCharacter_methods_decVal_UC_I_args[] = 
{
  &UnicodeCharacter_methods_decVal_UC_I_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* UnicodeCharacter_methods_decVal_UC_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UnicodeCharacter_method_decVal_UC_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "decVal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_8_decVal", // alternative name of method
  -1, // altlabelHashCode
  UnicodeCharacter_methods_decVal_UC_I_args, // the arguments
  0, //arguments count
  UnicodeCharacter_methods_decVal_UC_I_exceptions, // the declared exceptions
  UnicodeCharacter_MetainfoWrapper::UnicodeCharacter_method_decVal_UC_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UnicodeCharacter_methods_getCharacterDescription_Luc2char__LRString__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UnicodeCharacter_methods_getCharacterDescription_Luc2char__LRString__args[] = 
{
  &UnicodeCharacter_methods_getCharacterDescription_Luc2char__LRString__arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* UnicodeCharacter_methods_getCharacterDescription_Luc2char__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UnicodeCharacter_method_getCharacterDescription_Luc2char__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCharacterDescription", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_r_getCharacterDescription", // alternative name of method
  -1, // altlabelHashCode
  UnicodeCharacter_methods_getCharacterDescription_Luc2char__LRString__args, // the arguments
  0, //arguments count
  UnicodeCharacter_methods_getCharacterDescription_Luc2char__LRString__exceptions, // the declared exceptions
  UnicodeCharacter_MetainfoWrapper::UnicodeCharacter_method_getCharacterDescription_Luc2char__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* UnicodeCharacter_methods_getTYPE__LRClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* UnicodeCharacter_methods_getTYPE__LRClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UnicodeCharacter_method_getTYPE__LRClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTYPE", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(), // return type
  "_t_getTYPE", // alternative name of method
  -1, // altlabelHashCode
  UnicodeCharacter_methods_getTYPE__LRClass__args, // the arguments
  0, //arguments count
  UnicodeCharacter_methods_getTYPE__LRClass__exceptions, // the declared exceptions
  UnicodeCharacter_MetainfoWrapper::UnicodeCharacter_method_getTYPE__LRClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UnicodeCharacter_methods_isControl_Luc2char__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UnicodeCharacter_methods_isControl_Luc2char__Z_args[] = 
{
  &UnicodeCharacter_methods_isControl_Luc2char__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* UnicodeCharacter_methods_isControl_Luc2char__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UnicodeCharacter_method_isControl_Luc2char__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isControl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_f_isControl", // alternative name of method
  -1, // altlabelHashCode
  UnicodeCharacter_methods_isControl_Luc2char__Z_args, // the arguments
  0, //arguments count
  UnicodeCharacter_methods_isControl_Luc2char__Z_exceptions, // the declared exceptions
  UnicodeCharacter_MetainfoWrapper::UnicodeCharacter_method_isControl_Luc2char__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UnicodeCharacter_methods_isDigit_Luc2char__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UnicodeCharacter_methods_isDigit_Luc2char__Z_args[] = 
{
  &UnicodeCharacter_methods_isDigit_Luc2char__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* UnicodeCharacter_methods_isDigit_Luc2char__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UnicodeCharacter_method_isDigit_Luc2char__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isDigit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_isDigit", // alternative name of method
  -1, // altlabelHashCode
  UnicodeCharacter_methods_isDigit_Luc2char__Z_args, // the arguments
  0, //arguments count
  UnicodeCharacter_methods_isDigit_Luc2char__Z_exceptions, // the declared exceptions
  UnicodeCharacter_MetainfoWrapper::UnicodeCharacter_method_isDigit_Luc2char__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UnicodeCharacter_methods_isJavaIdentifierPart_Luc2char__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UnicodeCharacter_methods_isJavaIdentifierPart_Luc2char__Z_args[] = 
{
  &UnicodeCharacter_methods_isJavaIdentifierPart_Luc2char__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* UnicodeCharacter_methods_isJavaIdentifierPart_Luc2char__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UnicodeCharacter_method_isJavaIdentifierPart_Luc2char__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isJavaIdentifierPart", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_o_isJavaIdentifierPart", // alternative name of method
  -1, // altlabelHashCode
  UnicodeCharacter_methods_isJavaIdentifierPart_Luc2char__Z_args, // the arguments
  0, //arguments count
  UnicodeCharacter_methods_isJavaIdentifierPart_Luc2char__Z_exceptions, // the declared exceptions
  UnicodeCharacter_MetainfoWrapper::UnicodeCharacter_method_isJavaIdentifierPart_Luc2char__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UnicodeCharacter_methods_isJavaIdentifierStart_Luc2char__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UnicodeCharacter_methods_isJavaIdentifierStart_Luc2char__Z_args[] = 
{
  &UnicodeCharacter_methods_isJavaIdentifierStart_Luc2char__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* UnicodeCharacter_methods_isJavaIdentifierStart_Luc2char__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UnicodeCharacter_method_isJavaIdentifierStart_Luc2char__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isJavaIdentifierStart", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_n_isJavaIdentifierStart", // alternative name of method
  -1, // altlabelHashCode
  UnicodeCharacter_methods_isJavaIdentifierStart_Luc2char__Z_args, // the arguments
  0, //arguments count
  UnicodeCharacter_methods_isJavaIdentifierStart_Luc2char__Z_exceptions, // the declared exceptions
  UnicodeCharacter_MetainfoWrapper::UnicodeCharacter_method_isJavaIdentifierStart_Luc2char__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UnicodeCharacter_methods_isLetter_Luc2char__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UnicodeCharacter_methods_isLetter_Luc2char__Z_args[] = 
{
  &UnicodeCharacter_methods_isLetter_Luc2char__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* UnicodeCharacter_methods_isLetter_Luc2char__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UnicodeCharacter_method_isLetter_Luc2char__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isLetter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_9_isLetter", // alternative name of method
  -1, // altlabelHashCode
  UnicodeCharacter_methods_isLetter_Luc2char__Z_args, // the arguments
  0, //arguments count
  UnicodeCharacter_methods_isLetter_Luc2char__Z_exceptions, // the declared exceptions
  UnicodeCharacter_MetainfoWrapper::UnicodeCharacter_method_isLetter_Luc2char__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UnicodeCharacter_methods_isLetterOrDigit_Luc2char__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UnicodeCharacter_methods_isLetterOrDigit_Luc2char__Z_args[] = 
{
  &UnicodeCharacter_methods_isLetterOrDigit_Luc2char__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* UnicodeCharacter_methods_isLetterOrDigit_Luc2char__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UnicodeCharacter_method_isLetterOrDigit_Luc2char__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isLetterOrDigit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_a_isLetterOrDigit", // alternative name of method
  -1, // altlabelHashCode
  UnicodeCharacter_methods_isLetterOrDigit_Luc2char__Z_args, // the arguments
  0, //arguments count
  UnicodeCharacter_methods_isLetterOrDigit_Luc2char__Z_exceptions, // the declared exceptions
  UnicodeCharacter_MetainfoWrapper::UnicodeCharacter_method_isLetterOrDigit_Luc2char__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UnicodeCharacter_methods_isLowerCase_Luc2char__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UnicodeCharacter_methods_isLowerCase_Luc2char__Z_args[] = 
{
  &UnicodeCharacter_methods_isLowerCase_Luc2char__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* UnicodeCharacter_methods_isLowerCase_Luc2char__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UnicodeCharacter_method_isLowerCase_Luc2char__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isLowerCase", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_b_isLowerCase", // alternative name of method
  -1, // altlabelHashCode
  UnicodeCharacter_methods_isLowerCase_Luc2char__Z_args, // the arguments
  0, //arguments count
  UnicodeCharacter_methods_isLowerCase_Luc2char__Z_exceptions, // the declared exceptions
  UnicodeCharacter_MetainfoWrapper::UnicodeCharacter_method_isLowerCase_Luc2char__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UnicodeCharacter_methods_isMark_Luc2char__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UnicodeCharacter_methods_isMark_Luc2char__Z_args[] = 
{
  &UnicodeCharacter_methods_isMark_Luc2char__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* UnicodeCharacter_methods_isMark_Luc2char__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UnicodeCharacter_method_isMark_Luc2char__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isMark", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_k_isMark", // alternative name of method
  -1, // altlabelHashCode
  UnicodeCharacter_methods_isMark_Luc2char__Z_args, // the arguments
  0, //arguments count
  UnicodeCharacter_methods_isMark_Luc2char__Z_exceptions, // the declared exceptions
  UnicodeCharacter_MetainfoWrapper::UnicodeCharacter_method_isMark_Luc2char__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UnicodeCharacter_methods_isPunctation_Luc2char__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UnicodeCharacter_methods_isPunctation_Luc2char__Z_args[] = 
{
  &UnicodeCharacter_methods_isPunctation_Luc2char__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* UnicodeCharacter_methods_isPunctation_Luc2char__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UnicodeCharacter_method_isPunctation_Luc2char__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isPunctation", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_h_isPunctation", // alternative name of method
  -1, // altlabelHashCode
  UnicodeCharacter_methods_isPunctation_Luc2char__Z_args, // the arguments
  0, //arguments count
  UnicodeCharacter_methods_isPunctation_Luc2char__Z_exceptions, // the declared exceptions
  UnicodeCharacter_MetainfoWrapper::UnicodeCharacter_method_isPunctation_Luc2char__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UnicodeCharacter_methods_isSpace_Luc2char__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UnicodeCharacter_methods_isSpace_Luc2char__Z_args[] = 
{
  &UnicodeCharacter_methods_isSpace_Luc2char__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* UnicodeCharacter_methods_isSpace_Luc2char__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UnicodeCharacter_method_isSpace_Luc2char__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isSpace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_c_isSpace", // alternative name of method
  -1, // altlabelHashCode
  UnicodeCharacter_methods_isSpace_Luc2char__Z_args, // the arguments
  0, //arguments count
  UnicodeCharacter_methods_isSpace_Luc2char__Z_exceptions, // the declared exceptions
  UnicodeCharacter_MetainfoWrapper::UnicodeCharacter_method_isSpace_Luc2char__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UnicodeCharacter_methods_isSymbol_Luc2char__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UnicodeCharacter_methods_isSymbol_Luc2char__Z_args[] = 
{
  &UnicodeCharacter_methods_isSymbol_Luc2char__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* UnicodeCharacter_methods_isSymbol_Luc2char__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UnicodeCharacter_method_isSymbol_Luc2char__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isSymbol", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_i_isSymbol", // alternative name of method
  -1, // altlabelHashCode
  UnicodeCharacter_methods_isSymbol_Luc2char__Z_args, // the arguments
  0, //arguments count
  UnicodeCharacter_methods_isSymbol_Luc2char__Z_exceptions, // the declared exceptions
  UnicodeCharacter_MetainfoWrapper::UnicodeCharacter_method_isSymbol_Luc2char__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UnicodeCharacter_methods_isTitleCase_Luc2char__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UnicodeCharacter_methods_isTitleCase_Luc2char__Z_args[] = 
{
  &UnicodeCharacter_methods_isTitleCase_Luc2char__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* UnicodeCharacter_methods_isTitleCase_Luc2char__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UnicodeCharacter_method_isTitleCase_Luc2char__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isTitleCase", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_j_isTitleCase", // alternative name of method
  -1, // altlabelHashCode
  UnicodeCharacter_methods_isTitleCase_Luc2char__Z_args, // the arguments
  0, //arguments count
  UnicodeCharacter_methods_isTitleCase_Luc2char__Z_exceptions, // the declared exceptions
  UnicodeCharacter_MetainfoWrapper::UnicodeCharacter_method_isTitleCase_Luc2char__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UnicodeCharacter_methods_isUnicodeIdentifierPart_Luc2char__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UnicodeCharacter_methods_isUnicodeIdentifierPart_Luc2char__Z_args[] = 
{
  &UnicodeCharacter_methods_isUnicodeIdentifierPart_Luc2char__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* UnicodeCharacter_methods_isUnicodeIdentifierPart_Luc2char__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UnicodeCharacter_method_isUnicodeIdentifierPart_Luc2char__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isUnicodeIdentifierPart", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_q_isUnicodeIdentifierPart", // alternative name of method
  -1, // altlabelHashCode
  UnicodeCharacter_methods_isUnicodeIdentifierPart_Luc2char__Z_args, // the arguments
  0, //arguments count
  UnicodeCharacter_methods_isUnicodeIdentifierPart_Luc2char__Z_exceptions, // the declared exceptions
  UnicodeCharacter_MetainfoWrapper::UnicodeCharacter_method_isUnicodeIdentifierPart_Luc2char__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UnicodeCharacter_methods_isUnicodeIdentifierStart_Luc2char__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UnicodeCharacter_methods_isUnicodeIdentifierStart_Luc2char__Z_args[] = 
{
  &UnicodeCharacter_methods_isUnicodeIdentifierStart_Luc2char__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* UnicodeCharacter_methods_isUnicodeIdentifierStart_Luc2char__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UnicodeCharacter_method_isUnicodeIdentifierStart_Luc2char__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isUnicodeIdentifierStart", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_p_isUnicodeIdentifierStart", // alternative name of method
  -1, // altlabelHashCode
  UnicodeCharacter_methods_isUnicodeIdentifierStart_Luc2char__Z_args, // the arguments
  0, //arguments count
  UnicodeCharacter_methods_isUnicodeIdentifierStart_Luc2char__Z_exceptions, // the declared exceptions
  UnicodeCharacter_MetainfoWrapper::UnicodeCharacter_method_isUnicodeIdentifierStart_Luc2char__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UnicodeCharacter_methods_isUpperCase_Luc2char__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UnicodeCharacter_methods_isUpperCase_Luc2char__Z_args[] = 
{
  &UnicodeCharacter_methods_isUpperCase_Luc2char__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* UnicodeCharacter_methods_isUpperCase_Luc2char__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UnicodeCharacter_method_isUpperCase_Luc2char__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isUpperCase", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_g_isUpperCase", // alternative name of method
  -1, // altlabelHashCode
  UnicodeCharacter_methods_isUpperCase_Luc2char__Z_args, // the arguments
  0, //arguments count
  UnicodeCharacter_methods_isUpperCase_Luc2char__Z_exceptions, // the declared exceptions
  UnicodeCharacter_MetainfoWrapper::UnicodeCharacter_method_isUpperCase_Luc2char__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UnicodeCharacter_methods_isWhitespace_Luc2char__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UnicodeCharacter_methods_isWhitespace_Luc2char__Z_args[] = 
{
  &UnicodeCharacter_methods_isWhitespace_Luc2char__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* UnicodeCharacter_methods_isWhitespace_Luc2char__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UnicodeCharacter_method_isWhitespace_Luc2char__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isWhitespace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_d_isWhitespace", // alternative name of method
  -1, // altlabelHashCode
  UnicodeCharacter_methods_isWhitespace_Luc2char__Z_args, // the arguments
  0, //arguments count
  UnicodeCharacter_methods_isWhitespace_Luc2char__Z_exceptions, // the declared exceptions
  UnicodeCharacter_MetainfoWrapper::UnicodeCharacter_method_isWhitespace_Luc2char__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UnicodeCharacter_methods_isWhitespaceOnly_Luc2char__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UnicodeCharacter_methods_isWhitespaceOnly_Luc2char__Z_args[] = 
{
  &UnicodeCharacter_methods_isWhitespaceOnly_Luc2char__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* UnicodeCharacter_methods_isWhitespaceOnly_Luc2char__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UnicodeCharacter_method_isWhitespaceOnly_Luc2char__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isWhitespaceOnly", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_e_isWhitespaceOnly", // alternative name of method
  -1, // altlabelHashCode
  UnicodeCharacter_methods_isWhitespaceOnly_Luc2char__Z_args, // the arguments
  0, //arguments count
  UnicodeCharacter_methods_isWhitespaceOnly_Luc2char__Z_exceptions, // the declared exceptions
  UnicodeCharacter_MetainfoWrapper::UnicodeCharacter_method_isWhitespaceOnly_Luc2char__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UnicodeCharacter_methods_toLowerCase_Luc2char__Luc2char__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UnicodeCharacter_methods_toLowerCase_Luc2char__Luc2char__args[] = 
{
  &UnicodeCharacter_methods_toLowerCase_Luc2char__Luc2char__arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* UnicodeCharacter_methods_toLowerCase_Luc2char__Luc2char__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UnicodeCharacter_method_toLowerCase_Luc2char__Luc2char_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toLowerCase", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz(), // return type
  "_l_toLowerCase", // alternative name of method
  -1, // altlabelHashCode
  UnicodeCharacter_methods_toLowerCase_Luc2char__Luc2char__args, // the arguments
  0, //arguments count
  UnicodeCharacter_methods_toLowerCase_Luc2char__Luc2char__exceptions, // the declared exceptions
  UnicodeCharacter_MetainfoWrapper::UnicodeCharacter_method_toLowerCase_Luc2char__Luc2char__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UnicodeCharacter_methods_toString_Luc2char__LRString__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UnicodeCharacter_methods_toString_Luc2char__LRString__args[] = 
{
  &UnicodeCharacter_methods_toString_Luc2char__LRString__arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* UnicodeCharacter_methods_toString_Luc2char__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UnicodeCharacter_method_toString_Luc2char__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_s_toString", // alternative name of method
  -1, // altlabelHashCode
  UnicodeCharacter_methods_toString_Luc2char__LRString__args, // the arguments
  0, //arguments count
  UnicodeCharacter_methods_toString_Luc2char__LRString__exceptions, // the declared exceptions
  UnicodeCharacter_MetainfoWrapper::UnicodeCharacter_method_toString_Luc2char__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UnicodeCharacter_methods_toUpperCase_Luc2char__Luc2char__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UnicodeCharacter_methods_toUpperCase_Luc2char__Luc2char__args[] = 
{
  &UnicodeCharacter_methods_toUpperCase_Luc2char__Luc2char__arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* UnicodeCharacter_methods_toUpperCase_Luc2char__Luc2char__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UnicodeCharacter_method_toUpperCase_Luc2char__Luc2char_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toUpperCase", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz(), // return type
  "_m_toUpperCase", // alternative name of method
  -1, // altlabelHashCode
  UnicodeCharacter_methods_toUpperCase_Luc2char__Luc2char__args, // the arguments
  0, //arguments count
  UnicodeCharacter_methods_toUpperCase_Luc2char__Luc2char__exceptions, // the declared exceptions
  UnicodeCharacter_MetainfoWrapper::UnicodeCharacter_method_toUpperCase_Luc2char__Luc2char__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _UnicodeCharacter_methods[] = 
{
  &UnicodeCharacter_method_GetClass__L_acdk_lang_RClass_,
  &UnicodeCharacter_method_UnicodeCharacter_Luc2char__LRUnicodeCharacter_,
  &UnicodeCharacter_method_asciiDigit_Luc2char_I_I,
  &UnicodeCharacter_method_charValue__Luc2char_,
  &UnicodeCharacter_method_compareTo_INLRUnicodeCharacter__I,
  &UnicodeCharacter_method_compareTo_Luc2char_Luc2char__I,
  &UnicodeCharacter_method_compareToIgnoreCase_Luc2char_Luc2char__I,
  &UnicodeCharacter_method_create_instance__LRObject_,
  &UnicodeCharacter_method_decVal_UC_I,
  &UnicodeCharacter_method_getCharacterDescription_Luc2char__LRString_,
  &UnicodeCharacter_method_getTYPE__LRClass_,
  &UnicodeCharacter_method_isControl_Luc2char__Z,
  &UnicodeCharacter_method_isDigit_Luc2char__Z,
  &UnicodeCharacter_method_isJavaIdentifierPart_Luc2char__Z,
  &UnicodeCharacter_method_isJavaIdentifierStart_Luc2char__Z,
  &UnicodeCharacter_method_isLetter_Luc2char__Z,
  &UnicodeCharacter_method_isLetterOrDigit_Luc2char__Z,
  &UnicodeCharacter_method_isLowerCase_Luc2char__Z,
  &UnicodeCharacter_method_isMark_Luc2char__Z,
  &UnicodeCharacter_method_isPunctation_Luc2char__Z,
  &UnicodeCharacter_method_isSpace_Luc2char__Z,
  &UnicodeCharacter_method_isSymbol_Luc2char__Z,
  &UnicodeCharacter_method_isTitleCase_Luc2char__Z,
  &UnicodeCharacter_method_isUnicodeIdentifierPart_Luc2char__Z,
  &UnicodeCharacter_method_isUnicodeIdentifierStart_Luc2char__Z,
  &UnicodeCharacter_method_isUpperCase_Luc2char__Z,
  &UnicodeCharacter_method_isWhitespace_Luc2char__Z,
  &UnicodeCharacter_method_isWhitespaceOnly_Luc2char__Z,
  &UnicodeCharacter_method_toLowerCase_Luc2char__Luc2char_,
  &UnicodeCharacter_method_toString_Luc2char__LRString_,
  &UnicodeCharacter_method_toUpperCase_Luc2char__Luc2char_,
  0
};


struct UnicodeCharacter_MetaInfoInitializer
{  UnicodeCharacter_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = UnicodeCharacter::clazzInfo();
    ci->fields =  _UnicodeCharacter_fields;
    ci->methods =  _UnicodeCharacter_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
UnicodeCharacter_MetaInfoInitializer UnicodeCharacter_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
UnsupportedOperationException_create_array(int length)
{
  return new ObjectArrayImpl<RUnsupportedOperationException>(length);
}

//static
::acdk::lang::RObject
UnsupportedOperationException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class UnsupportedOperationException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UnsupportedOperationException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)UnsupportedOperationException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UnsupportedOperationException_method_UnsupportedOperationException__LRUnsupportedOperationException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new UnsupportedOperationException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UnsupportedOperationException_method_UnsupportedOperationException_INLRString__LRUnsupportedOperationException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new UnsupportedOperationException(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
};


void ThrowException_UnsupportedOperationException(IN(::acdk::lang::RThrowable) ex)
{
  throw RUnsupportedOperationException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _UnsupportedOperationException_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* UnsupportedOperationException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* UnsupportedOperationException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UnsupportedOperationException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  UnsupportedOperationException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  UnsupportedOperationException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  UnsupportedOperationException_MetainfoWrapper::UnsupportedOperationException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* UnsupportedOperationException_methods_UnsupportedOperationException__LRUnsupportedOperationException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* UnsupportedOperationException_methods_UnsupportedOperationException__LRUnsupportedOperationException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UnsupportedOperationException_method_UnsupportedOperationException__LRUnsupportedOperationException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "UnsupportedOperationException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  UnsupportedOperationException::clazzInfo(), // return type
  "_0_UnsupportedOperationException", // alternative name of method
  -1, // altlabelHashCode
  UnsupportedOperationException_methods_UnsupportedOperationException__LRUnsupportedOperationException__args, // the arguments
  0, //arguments count
  UnsupportedOperationException_methods_UnsupportedOperationException__LRUnsupportedOperationException__exceptions, // the declared exceptions
  UnsupportedOperationException_MetainfoWrapper::UnsupportedOperationException_method_UnsupportedOperationException__LRUnsupportedOperationException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UnsupportedOperationException_methods_UnsupportedOperationException_INLRString__LRUnsupportedOperationException__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UnsupportedOperationException_methods_UnsupportedOperationException_INLRString__LRUnsupportedOperationException__args[] = 
{
  &UnsupportedOperationException_methods_UnsupportedOperationException_INLRString__LRUnsupportedOperationException__arg_what,
  0
};

::acdk::lang::dmi::ClazzInfo* UnsupportedOperationException_methods_UnsupportedOperationException_INLRString__LRUnsupportedOperationException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UnsupportedOperationException_method_UnsupportedOperationException_INLRString__LRUnsupportedOperationException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "UnsupportedOperationException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  UnsupportedOperationException::clazzInfo(), // return type
  "_1_UnsupportedOperationException", // alternative name of method
  -1, // altlabelHashCode
  UnsupportedOperationException_methods_UnsupportedOperationException_INLRString__LRUnsupportedOperationException__args, // the arguments
  0, //arguments count
  UnsupportedOperationException_methods_UnsupportedOperationException_INLRString__LRUnsupportedOperationException__exceptions, // the declared exceptions
  UnsupportedOperationException_MetainfoWrapper::UnsupportedOperationException_method_UnsupportedOperationException_INLRString__LRUnsupportedOperationException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _UnsupportedOperationException_methods[] = 
{
  &UnsupportedOperationException_method_GetClass__L_acdk_lang_RClass_,
  &UnsupportedOperationException_method_UnsupportedOperationException__LRUnsupportedOperationException_,
  &UnsupportedOperationException_method_UnsupportedOperationException_INLRString__LRUnsupportedOperationException_,
  0
};


struct UnsupportedOperationException_MetaInfoInitializer
{  UnsupportedOperationException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = UnsupportedOperationException::clazzInfo();
    ci->fields =  _UnsupportedOperationException_fields;
    ci->methods =  _UnsupportedOperationException_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
UnsupportedOperationException_MetaInfoInitializer UnsupportedOperationException_MetaInfoInitializer_staticinstance__;


struct UnsupportedOperationException_clazzInfo_ClazzAttributesResInitializer44
{
  UnsupportedOperationException_clazzInfo_ClazzAttributesResInitializer44()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)UnsupportedOperationException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_UnsupportedOperationException));
  }
};

UnsupportedOperationException_clazzInfo_ClazzAttributesResInitializer44 UnsupportedOperationException_clazzInfo_ClazzAttributesResInitializer44_instance;



} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
Void_create_array(int length)
{
  return new ObjectArrayImpl<RVoid>(length);
}

//static
::acdk::lang::RObject
Void_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Void_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Void_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Void::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Void_method_getTYPE__LRClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Void::getTYPE();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Void_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Void_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Void_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Void_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Void_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Void_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Void_MetainfoWrapper::Void_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Void_methods_getTYPE__LRClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Void_methods_getTYPE__LRClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Void_method_getTYPE__LRClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTYPE", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(), // return type
  "_0_getTYPE", // alternative name of method
  -1, // altlabelHashCode
  Void_methods_getTYPE__LRClass__args, // the arguments
  0, //arguments count
  Void_methods_getTYPE__LRClass__exceptions, // the declared exceptions
  Void_MetainfoWrapper::Void_method_getTYPE__LRClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Void_methods[] = 
{
  &Void_method_GetClass__L_acdk_lang_RClass_,
  &Void_method_getTYPE__LRClass_,
  0
};


struct Void_MetaInfoInitializer
{  Void_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Void::clazzInfo();
    ci->fields =  _Void_fields;
    ci->methods =  _Void_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Void_MetaInfoInitializer Void_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang

