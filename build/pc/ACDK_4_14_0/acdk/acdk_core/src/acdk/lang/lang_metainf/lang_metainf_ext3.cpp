// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../lang.h"
#include "../ArithmeticException.h"
#include "../ArrayIndexOutOfBoundsException.h"
#include "../BasicArray.h"
#include "../BasicArrayInl.h"
#include "../Boolean.h"
#include "../Byte.h"
#include "../ByteBuffer.h"
#include "../Character.h"
#include "../Class.h"
#include "../ClassCastException.h"
#include "../ClassLoader.h"
#include "../ClassNotFoundException.h"
#include "../Cloneable.h"
#include "../CloneNotSupportedException.h"
#include "../CmdLineOption.h"
#include "../CmdLineParseException.h"
#include "../CmdLineParser.h"
#include "../Comparable.h"
#include "../DmiException.h"
#include "../DmiTypeConversionException.h"
#include "../Double.h"
#include "../Error.h"
#include "../Exception.h"
#include "../ExceptionDeclarations.h"
#include "../ExtObject.h"
#include "../Float.h"
#include "../IllegalAccessException.h"
#include "../IllegalArgumentException.h"
#include "../IllegalMonitorStateException.h"
#include "../IllegalStateException.h"
#include "../IllegalThreadStateException.h"
#include "../IndexOutOfBoundsException.h"
#include "../InOutPreDeclaration.h"
#include "../InstantiationException.h"
#include "../Integer.h"
#include "../InterfaceBase.h"
#include "../InterruptedException.h"
#include "../lang.h"
#include "../lang_all.h"
#include "../Long.h"
#include "../Math.h"
#include "../NoSuchDmiElementException.h"
#include "../NoSuchElementException.h"
#include "../NoSuchFieldException.h"
#include "../NoSuchMethodException.h"
#include "../NullPointerException.h"
#include "../Number.h"
#include "../NumberFormatException.h"
#include "../Object.h"
#include "../ObjectArrayBase.h"
#include "../ObjectArrayBaseInl.h"
#include "../ObjectArrayImpl.h"
#include "../ObjectBase.h"
#include "../ObjectDebug.h"
#include "../ObjectImpl.h"
#include "../ObjectInline.h"
#include "../OutOfMemoryError.h"
#include "../Package.h"
#include "../ParamsMismatchException.h"
#include "../Process.h"
#include "../Runnable.h"
#include "../Runtime.h"
#include "../RuntimeException.h"
#include "../SharedLibrary.h"
#include "../Short.h"
#include "../StackFrame.h"
#include "../StackOverflowError.h"
#include "../String.h"
#include "../StringBuffer.h"
#include "../StringConcenator.h"
#include "../StringIndexOutOfBoundsException.h"
#include "../StringInline.h"
#include "../StringUtf8Utils.h"
#include "../System.h"
#include "../SystemError.h"
#include "../SystemInline.h"
#include "../SystemIntern.h"
#include "../Thread.h"
#include "../ThreadDeath.h"
#include "../ThreadGroup.h"
#include "../ThreadImpl.h"
#include "../ThreadLocal.h"
#include "../ThreadLocalImpl.h"
#include "../Throwable.h"
#include "../UnicodeCharacter.h"
#include "../UnsupportedOperationException.h"
#include "../Void.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
Package_create_array(int length)
{
  return new ObjectArrayImpl<RPackage>(length);
}

//static
::acdk::lang::RObject
Package_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Package_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Package_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Package::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Package_method_getImplementationTitle__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Package* This = dmi_cast<Package>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Package::getImplementationTitle();
    else
        ret = (::acdk::lang::RObject)This->getImplementationTitle();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Package_method_getImplementationVendor__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Package* This = dmi_cast<Package>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Package::getImplementationVendor();
    else
        ret = (::acdk::lang::RObject)This->getImplementationVendor();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Package_method_getImplementationVersion__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Package* This = dmi_cast<Package>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Package::getImplementationVersion();
    else
        ret = (::acdk::lang::RObject)This->getImplementationVersion();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Package_method_getName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Package* This = dmi_cast<Package>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Package::getName();
    else
        ret = (::acdk::lang::RObject)This->getName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Package_method_getPackage_INLRString__LRPackage__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Package::getPackage(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Package_method_getPackages__LRPackageArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Package::getPackages();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Package_method_getSpecificationTitle__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Package* This = dmi_cast<Package>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Package::getSpecificationTitle();
    else
        ret = (::acdk::lang::RObject)This->getSpecificationTitle();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Package_method_getSpecificationVendor__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Package* This = dmi_cast<Package>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Package::getSpecificationVendor();
    else
        ret = (::acdk::lang::RObject)This->getSpecificationVendor();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Package_method_getSpecificationVersion__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Package* This = dmi_cast<Package>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Package::getSpecificationVersion();
    else
        ret = (::acdk::lang::RObject)This->getSpecificationVersion();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Package_method_isCompatibleWith_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Package* This = dmi_cast<Package>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Package::isCompatibleWith(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
      ret = This->isCompatibleWith(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Package_method_isSealed__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Package* This = dmi_cast<Package>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Package::isSealed();
    else
      ret = This->isSealed();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Package_fields__dummyPackage_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Package* This = dmi_cast<Package>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_dummyPackage, flags);
    else
      This->_dummyPackage = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo Package_fields__dummyPackage = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_dummyPackage", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  Package_MetainfoWrapper::Package_fields__dummyPackage_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _Package_fields[] = 
{
  &Package_fields__dummyPackage,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Package_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Package_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Package_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_b_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Package_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Package_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Package_MetainfoWrapper::Package_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Package_methods_getImplementationTitle__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Package_methods_getImplementationTitle__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Package_method_getImplementationTitle__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getImplementationTitle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_0_getImplementationTitle", // alternative name of method
  -1, // altlabelHashCode
  Package_methods_getImplementationTitle__LRString__args, // the arguments
  0, //arguments count
  Package_methods_getImplementationTitle__LRString__exceptions, // the declared exceptions
  Package_MetainfoWrapper::Package_method_getImplementationTitle__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Package_methods_getImplementationVendor__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Package_methods_getImplementationVendor__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Package_method_getImplementationVendor__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getImplementationVendor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_getImplementationVendor", // alternative name of method
  -1, // altlabelHashCode
  Package_methods_getImplementationVendor__LRString__args, // the arguments
  0, //arguments count
  Package_methods_getImplementationVendor__LRString__exceptions, // the declared exceptions
  Package_MetainfoWrapper::Package_method_getImplementationVendor__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Package_methods_getImplementationVersion__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Package_methods_getImplementationVersion__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Package_method_getImplementationVersion__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getImplementationVersion", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_getImplementationVersion", // alternative name of method
  -1, // altlabelHashCode
  Package_methods_getImplementationVersion__LRString__args, // the arguments
  0, //arguments count
  Package_methods_getImplementationVersion__LRString__exceptions, // the declared exceptions
  Package_MetainfoWrapper::Package_method_getImplementationVersion__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Package_methods_getName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Package_methods_getName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Package_method_getName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_getName", // alternative name of method
  -1, // altlabelHashCode
  Package_methods_getName__LRString__args, // the arguments
  0, //arguments count
  Package_methods_getName__LRString__exceptions, // the declared exceptions
  Package_MetainfoWrapper::Package_method_getName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Package_methods_getPackage_INLRString__LRPackage__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Package_methods_getPackage_INLRString__LRPackage__args[] = 
{
  &Package_methods_getPackage_INLRString__LRPackage__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* Package_methods_getPackage_INLRString__LRPackage__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Package_method_getPackage_INLRString__LRPackage_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPackage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPackage::clazzInfo(), // return type
  "_4_getPackage", // alternative name of method
  -1, // altlabelHashCode
  Package_methods_getPackage_INLRString__LRPackage__args, // the arguments
  0, //arguments count
  Package_methods_getPackage_INLRString__LRPackage__exceptions, // the declared exceptions
  Package_MetainfoWrapper::Package_method_getPackage_INLRString__LRPackage__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Package_methods_getPackages__LRPackageArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Package_methods_getPackages__LRPackageArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Package_method_getPackages__LRPackageArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPackages", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPackageArray::clazzInfo(), // return type
  "_5_getPackages", // alternative name of method
  -1, // altlabelHashCode
  Package_methods_getPackages__LRPackageArray__args, // the arguments
  0, //arguments count
  Package_methods_getPackages__LRPackageArray__exceptions, // the declared exceptions
  Package_MetainfoWrapper::Package_method_getPackages__LRPackageArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Package_methods_getSpecificationTitle__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Package_methods_getSpecificationTitle__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Package_method_getSpecificationTitle__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSpecificationTitle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_6_getSpecificationTitle", // alternative name of method
  -1, // altlabelHashCode
  Package_methods_getSpecificationTitle__LRString__args, // the arguments
  0, //arguments count
  Package_methods_getSpecificationTitle__LRString__exceptions, // the declared exceptions
  Package_MetainfoWrapper::Package_method_getSpecificationTitle__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Package_methods_getSpecificationVendor__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Package_methods_getSpecificationVendor__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Package_method_getSpecificationVendor__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSpecificationVendor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_7_getSpecificationVendor", // alternative name of method
  -1, // altlabelHashCode
  Package_methods_getSpecificationVendor__LRString__args, // the arguments
  0, //arguments count
  Package_methods_getSpecificationVendor__LRString__exceptions, // the declared exceptions
  Package_MetainfoWrapper::Package_method_getSpecificationVendor__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Package_methods_getSpecificationVersion__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Package_methods_getSpecificationVersion__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Package_method_getSpecificationVersion__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSpecificationVersion", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_8_getSpecificationVersion", // alternative name of method
  -1, // altlabelHashCode
  Package_methods_getSpecificationVersion__LRString__args, // the arguments
  0, //arguments count
  Package_methods_getSpecificationVersion__LRString__exceptions, // the declared exceptions
  Package_MetainfoWrapper::Package_method_getSpecificationVersion__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Package_methods_isCompatibleWith_INLRString__Z_arg_desired = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "desired", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Package_methods_isCompatibleWith_INLRString__Z_args[] = 
{
  &Package_methods_isCompatibleWith_INLRString__Z_arg_desired,
  0
};

::acdk::lang::dmi::ClazzInfo* Package_methods_isCompatibleWith_INLRString__Z_exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Package_isCompatibleWith_INLRString__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Package_method_isCompatibleWith_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isCompatibleWith", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_9_isCompatibleWith", // alternative name of method
  -1, // altlabelHashCode
  Package_methods_isCompatibleWith_INLRString__Z_args, // the arguments
  0, //arguments count
  Package_methods_isCompatibleWith_INLRString__Z_exceptions, // the declared exceptions
  Package_MetainfoWrapper::Package_method_isCompatibleWith_INLRString__Z_dispatch, // invoke this method
  Package_isCompatibleWith_INLRString__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Package_methods_isSealed__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Package_methods_isSealed__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Package_method_isSealed__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isSealed", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_a_isSealed", // alternative name of method
  -1, // altlabelHashCode
  Package_methods_isSealed__Z_args, // the arguments
  0, //arguments count
  Package_methods_isSealed__Z_exceptions, // the declared exceptions
  Package_MetainfoWrapper::Package_method_isSealed__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Package_methods[] = 
{
  &Package_method_GetClass__L_acdk_lang_RClass_,
  &Package_method_getImplementationTitle__LRString_,
  &Package_method_getImplementationVendor__LRString_,
  &Package_method_getImplementationVersion__LRString_,
  &Package_method_getName__LRString_,
  &Package_method_getPackage_INLRString__LRPackage_,
  &Package_method_getPackages__LRPackageArray_,
  &Package_method_getSpecificationTitle__LRString_,
  &Package_method_getSpecificationVendor__LRString_,
  &Package_method_getSpecificationVersion__LRString_,
  &Package_method_isCompatibleWith_INLRString__Z,
  &Package_method_isSealed__Z,
  0
};


struct Package_MetaInfoInitializer
{  Package_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Package::clazzInfo();
    ci->fields =  _Package_fields;
    ci->methods =  _Package_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Package_MetaInfoInitializer Package_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
ParamsMismatchException_create_array(int length)
{
  return new ObjectArrayImpl<RParamsMismatchException>(length);
}

//static
::acdk::lang::RObject
ParamsMismatchException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ParamsMismatchException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParamsMismatchException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ParamsMismatchException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParamsMismatchException_method_ParamsMismatchException__LRParamsMismatchException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ParamsMismatchException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParamsMismatchException_method_ParamsMismatchException_INLRString__LRParamsMismatchException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ParamsMismatchException(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
};


void ThrowException_ParamsMismatchException(IN(::acdk::lang::RThrowable) ex)
{
  throw RParamsMismatchException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _ParamsMismatchException_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParamsMismatchException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ParamsMismatchException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParamsMismatchException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ParamsMismatchException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ParamsMismatchException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ParamsMismatchException_MetainfoWrapper::ParamsMismatchException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParamsMismatchException_methods_ParamsMismatchException__LRParamsMismatchException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ParamsMismatchException_methods_ParamsMismatchException__LRParamsMismatchException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParamsMismatchException_method_ParamsMismatchException__LRParamsMismatchException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ParamsMismatchException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ParamsMismatchException::clazzInfo(), // return type
  "_0_ParamsMismatchException", // alternative name of method
  -1, // altlabelHashCode
  ParamsMismatchException_methods_ParamsMismatchException__LRParamsMismatchException__args, // the arguments
  0, //arguments count
  ParamsMismatchException_methods_ParamsMismatchException__LRParamsMismatchException__exceptions, // the declared exceptions
  ParamsMismatchException_MetainfoWrapper::ParamsMismatchException_method_ParamsMismatchException__LRParamsMismatchException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ParamsMismatchException_methods_ParamsMismatchException_INLRString__LRParamsMismatchException__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParamsMismatchException_methods_ParamsMismatchException_INLRString__LRParamsMismatchException__args[] = 
{
  &ParamsMismatchException_methods_ParamsMismatchException_INLRString__LRParamsMismatchException__arg_what,
  0
};

::acdk::lang::dmi::ClazzInfo* ParamsMismatchException_methods_ParamsMismatchException_INLRString__LRParamsMismatchException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParamsMismatchException_method_ParamsMismatchException_INLRString__LRParamsMismatchException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ParamsMismatchException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ParamsMismatchException::clazzInfo(), // return type
  "_1_ParamsMismatchException", // alternative name of method
  -1, // altlabelHashCode
  ParamsMismatchException_methods_ParamsMismatchException_INLRString__LRParamsMismatchException__args, // the arguments
  0, //arguments count
  ParamsMismatchException_methods_ParamsMismatchException_INLRString__LRParamsMismatchException__exceptions, // the declared exceptions
  ParamsMismatchException_MetainfoWrapper::ParamsMismatchException_method_ParamsMismatchException_INLRString__LRParamsMismatchException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ParamsMismatchException_methods[] = 
{
  &ParamsMismatchException_method_GetClass__L_acdk_lang_RClass_,
  &ParamsMismatchException_method_ParamsMismatchException__LRParamsMismatchException_,
  &ParamsMismatchException_method_ParamsMismatchException_INLRString__LRParamsMismatchException_,
  0
};


struct ParamsMismatchException_MetaInfoInitializer
{  ParamsMismatchException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ParamsMismatchException::clazzInfo();
    ci->fields =  _ParamsMismatchException_fields;
    ci->methods =  _ParamsMismatchException_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ParamsMismatchException_MetaInfoInitializer ParamsMismatchException_MetaInfoInitializer_staticinstance__;


struct ParamsMismatchException_clazzInfo_ClazzAttributesResInitializer35
{
  ParamsMismatchException_clazzInfo_ClazzAttributesResInitializer35()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)ParamsMismatchException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_ParamsMismatchException));
  }
};

ParamsMismatchException_clazzInfo_ClazzAttributesResInitializer35 ParamsMismatchException_clazzInfo_ClazzAttributesResInitializer35_instance;



} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
Process_create_array(int length)
{
  return new ObjectArrayImpl<RProcess>(length);
}

//static
::acdk::lang::RObject
Process_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Process_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Process_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Process::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Process_method_Process_INLRString_INLRString__LRProcess__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Process(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Process_method_Process_INLRString__LRProcess__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Process(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Process_method_Process_INLRStringArray_INLRString__LRProcess__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Process(::acdk::lang::dmi::castTo< RStringArray>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Process_method_Process_INLRStringArray__LRProcess__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Process(::acdk::lang::dmi::castTo< RStringArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Process_method_Process_INLRStringArray_INLRStringArray_INLRString__LRProcess__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Process(::acdk::lang::dmi::castTo< RStringArray>(args[0], dc), ::acdk::lang::dmi::castTo< RStringArray>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Process_method_Process_INLRStringArray_INLRStringArray__LRProcess__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Process(::acdk::lang::dmi::castTo< RStringArray>(args[0], dc), ::acdk::lang::dmi::castTo< RStringArray>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Process_method_Process_INLRString_INLRStringArray_INLRString__LRProcess__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Process(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RStringArray>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Process_method_Process_INLRString_INLRStringArray__LRProcess__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Process(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RStringArray>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Process_method__run__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Process* This = dmi_cast<Process>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Process::_run();
    else
        This->_run();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Process_method_destroy__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Process* This = dmi_cast<Process>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Process::destroy();
    else
        This->destroy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Process_method_exitValue__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Process* This = dmi_cast<Process>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Process::exitValue();
    else
      ret = This->exitValue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Process_method_getCommandLine__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Process* This = dmi_cast<Process>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Process::getCommandLine();
    else
        ret = (::acdk::lang::RObject)This->getCommandLine();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Process_method_getErrorReader__Lacdk_io_RReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Process* This = dmi_cast<Process>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Process::getErrorReader();
    else
        ret = (::acdk::lang::RObject)This->getErrorReader();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Process_method_getErrorStream__Lacdk_io_RReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Process* This = dmi_cast<Process>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Process::getErrorStream();
    else
        ret = (::acdk::lang::RObject)This->getErrorStream();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Process_method_getInputStream__Lacdk_io_RWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Process* This = dmi_cast<Process>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Process::getInputStream();
    else
        ret = (::acdk::lang::RObject)This->getInputStream();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Process_method_getInputWriter__Lacdk_io_RWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Process* This = dmi_cast<Process>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Process::getInputWriter();
    else
        ret = (::acdk::lang::RObject)This->getInputWriter();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Process_method_getOutputReader__Lacdk_io_RReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Process* This = dmi_cast<Process>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Process::getOutputReader();
    else
        ret = (::acdk::lang::RObject)This->getOutputReader();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Process_method_getOutputStream__Lacdk_io_RReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Process* This = dmi_cast<Process>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Process::getOutputStream();
    else
        ret = (::acdk::lang::RObject)This->getOutputStream();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Process_method_getProcessId__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Process::getProcessId();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Process_method_isRunning__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Process* This = dmi_cast<Process>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Process::isRunning();
    else
      ret = This->isRunning();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Process_method_resume__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Process* This = dmi_cast<Process>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Process::resume();
    else
        This->resume();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Process_method_suspend__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Process* This = dmi_cast<Process>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Process::suspend();
    else
        This->suspend();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Process_method_waitFor_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Process* This = dmi_cast<Process>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Process::waitFor(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->waitFor(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Process_method_waitFor__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Process* This = dmi_cast<Process>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Process::waitFor();
    else
      ret = This->waitFor();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Process_fields__args_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Process* This = dmi_cast<Process>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_args, flags);
    else
      This->_args = ::acdk::lang::dmi::castTo< RStringArray>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Process_fields__command_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Process* This = dmi_cast<Process>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_command, flags);
    else
      This->_command = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Process_fields__envp_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Process* This = dmi_cast<Process>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_envp, flags);
    else
      This->_envp = ::acdk::lang::dmi::castTo< RStringArray>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Process_fields__exitCode_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Process* This = dmi_cast<Process>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_exitCode, flags);
    else
      This->_exitCode = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Process_fields__state_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Process* This = dmi_cast<Process>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_state, flags);
    else
      This->_state = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Process_fields__status_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Process* This = dmi_cast<Process>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->_status), flags);
    else
      This->_status = (ProcessStatus)::acdk::lang::dmi::castTo<int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Process_fields__stderrReader_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Process* This = dmi_cast<Process>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_stderrReader, flags);
    else
      This->_stderrReader = ::acdk::lang::dmi::castTo< RProcess_PipeReader>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Process_fields__stdinWriter_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Process* This = dmi_cast<Process>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_stdinWriter, flags);
    else
      This->_stdinWriter = ::acdk::lang::dmi::castTo< acdk::io::RFileWriter>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Process_fields__stdoutReader_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Process* This = dmi_cast<Process>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_stdoutReader, flags);
    else
      This->_stdoutReader = ::acdk::lang::dmi::castTo< RProcess_PipeReader>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Process_fields__workDir_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Process* This = dmi_cast<Process>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_workDir, flags);
    else
      This->_workDir = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo Process_fields__args = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_args", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(),
  Process_MetainfoWrapper::Process_fields__args_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Process_fields__command = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_command", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  Process_MetainfoWrapper::Process_fields__command_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Process_fields__envp = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_envp", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(),
  Process_MetainfoWrapper::Process_fields__envp_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Process_fields__exitCode = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_exitCode", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Process_MetainfoWrapper::Process_fields__exitCode_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Process_fields__state = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_state", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Process_MetainfoWrapper::Process_fields__state_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Process_fields__status = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_status", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Process_MetainfoWrapper::Process_fields__status_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Process_fields__stderrReader = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_stderrReader", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProcess_PipeReader::clazzInfo(),
  Process_MetainfoWrapper::Process_fields__stderrReader_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Process_fields__stdinWriter = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_stdinWriter", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RFileWriter::clazzInfo(),
  Process_MetainfoWrapper::Process_fields__stdinWriter_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Process_fields__stdoutReader = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_stdoutReader", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProcess_PipeReader::clazzInfo(),
  Process_MetainfoWrapper::Process_fields__stdoutReader_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Process_fields__workDir = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_workDir", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  Process_MetainfoWrapper::Process_fields__workDir_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _Process_fields[] = 
{
  &Process_fields__args,
  &Process_fields__command,
  &Process_fields__envp,
  &Process_fields__exitCode,
  &Process_fields__state,
  &Process_fields__status,
  &Process_fields__stderrReader,
  &Process_fields__stdinWriter,
  &Process_fields__stdoutReader,
  &Process_fields__workDir,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Process_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Process_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Process_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_o_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Process_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Process_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Process_MetainfoWrapper::Process_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Process_methods_Process_INLRString_INLRString__LRProcess__arg_command = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "command", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Process_methods_Process_INLRString_INLRString__LRProcess__arg_workdir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "workdir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Process_methods_Process_INLRString_INLRString__LRProcess__args[] = 
{
  &Process_methods_Process_INLRString_INLRString__LRProcess__arg_command,
  &Process_methods_Process_INLRString_INLRString__LRProcess__arg_workdir,
  0
};

::acdk::lang::dmi::ClazzInfo* Process_methods_Process_INLRString_INLRString__LRProcess__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Process_method_Process_INLRString_INLRString__LRProcess_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Process", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Process::clazzInfo(), // return type
  "_0_Process", // alternative name of method
  -1, // altlabelHashCode
  Process_methods_Process_INLRString_INLRString__LRProcess__args, // the arguments
  0, //arguments count
  Process_methods_Process_INLRString_INLRString__LRProcess__exceptions, // the declared exceptions
  Process_MetainfoWrapper::Process_method_Process_INLRString_INLRString__LRProcess__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Process_methods_Process_INLRString__LRProcess__arg_command = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "command", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Process_methods_Process_INLRString__LRProcess__args[] = 
{
  &Process_methods_Process_INLRString__LRProcess__arg_command,
  0
};

::acdk::lang::dmi::ClazzInfo* Process_methods_Process_INLRString__LRProcess__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Process_method_Process_INLRString__LRProcess_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Process", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Process::clazzInfo(), // return type
  "_1_Process", // alternative name of method
  -1, // altlabelHashCode
  Process_methods_Process_INLRString__LRProcess__args, // the arguments
  0, //arguments count
  Process_methods_Process_INLRString__LRProcess__exceptions, // the declared exceptions
  Process_MetainfoWrapper::Process_method_Process_INLRString__LRProcess__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Process_methods_Process_INLRStringArray_INLRString__LRProcess__arg_cmdarray = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cmdarray", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Process_methods_Process_INLRStringArray_INLRString__LRProcess__arg_workdir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "workdir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Process_methods_Process_INLRStringArray_INLRString__LRProcess__args[] = 
{
  &Process_methods_Process_INLRStringArray_INLRString__LRProcess__arg_cmdarray,
  &Process_methods_Process_INLRStringArray_INLRString__LRProcess__arg_workdir,
  0
};

::acdk::lang::dmi::ClazzInfo* Process_methods_Process_INLRStringArray_INLRString__LRProcess__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Process_method_Process_INLRStringArray_INLRString__LRProcess_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Process", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Process::clazzInfo(), // return type
  "_2_Process", // alternative name of method
  -1, // altlabelHashCode
  Process_methods_Process_INLRStringArray_INLRString__LRProcess__args, // the arguments
  0, //arguments count
  Process_methods_Process_INLRStringArray_INLRString__LRProcess__exceptions, // the declared exceptions
  Process_MetainfoWrapper::Process_method_Process_INLRStringArray_INLRString__LRProcess__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Process_methods_Process_INLRStringArray__LRProcess__arg_cmdarray = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cmdarray", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Process_methods_Process_INLRStringArray__LRProcess__args[] = 
{
  &Process_methods_Process_INLRStringArray__LRProcess__arg_cmdarray,
  0
};

::acdk::lang::dmi::ClazzInfo* Process_methods_Process_INLRStringArray__LRProcess__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Process_method_Process_INLRStringArray__LRProcess_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Process", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Process::clazzInfo(), // return type
  "_3_Process", // alternative name of method
  -1, // altlabelHashCode
  Process_methods_Process_INLRStringArray__LRProcess__args, // the arguments
  0, //arguments count
  Process_methods_Process_INLRStringArray__LRProcess__exceptions, // the declared exceptions
  Process_MetainfoWrapper::Process_method_Process_INLRStringArray__LRProcess__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Process_methods_Process_INLRStringArray_INLRStringArray_INLRString__LRProcess__arg_cmdarray = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cmdarray", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Process_methods_Process_INLRStringArray_INLRStringArray_INLRString__LRProcess__arg_envp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "envp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Process_methods_Process_INLRStringArray_INLRStringArray_INLRString__LRProcess__arg_workdir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "workdir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Process_methods_Process_INLRStringArray_INLRStringArray_INLRString__LRProcess__args[] = 
{
  &Process_methods_Process_INLRStringArray_INLRStringArray_INLRString__LRProcess__arg_cmdarray,
  &Process_methods_Process_INLRStringArray_INLRStringArray_INLRString__LRProcess__arg_envp,
  &Process_methods_Process_INLRStringArray_INLRStringArray_INLRString__LRProcess__arg_workdir,
  0
};

::acdk::lang::dmi::ClazzInfo* Process_methods_Process_INLRStringArray_INLRStringArray_INLRString__LRProcess__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Process_method_Process_INLRStringArray_INLRStringArray_INLRString__LRProcess_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Process", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Process::clazzInfo(), // return type
  "_4_Process", // alternative name of method
  -1, // altlabelHashCode
  Process_methods_Process_INLRStringArray_INLRStringArray_INLRString__LRProcess__args, // the arguments
  0, //arguments count
  Process_methods_Process_INLRStringArray_INLRStringArray_INLRString__LRProcess__exceptions, // the declared exceptions
  Process_MetainfoWrapper::Process_method_Process_INLRStringArray_INLRStringArray_INLRString__LRProcess__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Process_methods_Process_INLRStringArray_INLRStringArray__LRProcess__arg_cmdarray = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cmdarray", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Process_methods_Process_INLRStringArray_INLRStringArray__LRProcess__arg_envp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "envp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Process_methods_Process_INLRStringArray_INLRStringArray__LRProcess__args[] = 
{
  &Process_methods_Process_INLRStringArray_INLRStringArray__LRProcess__arg_cmdarray,
  &Process_methods_Process_INLRStringArray_INLRStringArray__LRProcess__arg_envp,
  0
};

::acdk::lang::dmi::ClazzInfo* Process_methods_Process_INLRStringArray_INLRStringArray__LRProcess__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Process_method_Process_INLRStringArray_INLRStringArray__LRProcess_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Process", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Process::clazzInfo(), // return type
  "_5_Process", // alternative name of method
  -1, // altlabelHashCode
  Process_methods_Process_INLRStringArray_INLRStringArray__LRProcess__args, // the arguments
  0, //arguments count
  Process_methods_Process_INLRStringArray_INLRStringArray__LRProcess__exceptions, // the declared exceptions
  Process_MetainfoWrapper::Process_method_Process_INLRStringArray_INLRStringArray__LRProcess__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Process_methods_Process_INLRString_INLRStringArray_INLRString__LRProcess__arg_command = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "command", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Process_methods_Process_INLRString_INLRStringArray_INLRString__LRProcess__arg_envp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "envp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Process_methods_Process_INLRString_INLRStringArray_INLRString__LRProcess__arg_workdir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "workdir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Process_methods_Process_INLRString_INLRStringArray_INLRString__LRProcess__args[] = 
{
  &Process_methods_Process_INLRString_INLRStringArray_INLRString__LRProcess__arg_command,
  &Process_methods_Process_INLRString_INLRStringArray_INLRString__LRProcess__arg_envp,
  &Process_methods_Process_INLRString_INLRStringArray_INLRString__LRProcess__arg_workdir,
  0
};

::acdk::lang::dmi::ClazzInfo* Process_methods_Process_INLRString_INLRStringArray_INLRString__LRProcess__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Process_method_Process_INLRString_INLRStringArray_INLRString__LRProcess_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Process", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Process::clazzInfo(), // return type
  "_6_Process", // alternative name of method
  -1, // altlabelHashCode
  Process_methods_Process_INLRString_INLRStringArray_INLRString__LRProcess__args, // the arguments
  0, //arguments count
  Process_methods_Process_INLRString_INLRStringArray_INLRString__LRProcess__exceptions, // the declared exceptions
  Process_MetainfoWrapper::Process_method_Process_INLRString_INLRStringArray_INLRString__LRProcess__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Process_methods_Process_INLRString_INLRStringArray__LRProcess__arg_command = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "command", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Process_methods_Process_INLRString_INLRStringArray__LRProcess__arg_envp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "envp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Process_methods_Process_INLRString_INLRStringArray__LRProcess__args[] = 
{
  &Process_methods_Process_INLRString_INLRStringArray__LRProcess__arg_command,
  &Process_methods_Process_INLRString_INLRStringArray__LRProcess__arg_envp,
  0
};

::acdk::lang::dmi::ClazzInfo* Process_methods_Process_INLRString_INLRStringArray__LRProcess__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Process_method_Process_INLRString_INLRStringArray__LRProcess_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Process", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Process::clazzInfo(), // return type
  "_7_Process", // alternative name of method
  -1, // altlabelHashCode
  Process_methods_Process_INLRString_INLRStringArray__LRProcess__args, // the arguments
  0, //arguments count
  Process_methods_Process_INLRString_INLRStringArray__LRProcess__exceptions, // the declared exceptions
  Process_MetainfoWrapper::Process_method_Process_INLRString_INLRStringArray__LRProcess__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Process_methods__run__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Process_methods__run__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Process_method__run__V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_run", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_n__run", // alternative name of method
  -1, // altlabelHashCode
  Process_methods__run__V_args, // the arguments
  0, //arguments count
  Process_methods__run__V_exceptions, // the declared exceptions
  Process_MetainfoWrapper::Process_method__run__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Process_methods_destroy__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Process_methods_destroy__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Process_method_destroy__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "destroy", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_destroy", // alternative name of method
  -1, // altlabelHashCode
  Process_methods_destroy__V_args, // the arguments
  0, //arguments count
  Process_methods_destroy__V_exceptions, // the declared exceptions
  Process_MetainfoWrapper::Process_method_destroy__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Process_methods_exitValue__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Process_methods_exitValue__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Process_method_exitValue__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "exitValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_a_exitValue", // alternative name of method
  -1, // altlabelHashCode
  Process_methods_exitValue__I_args, // the arguments
  0, //arguments count
  Process_methods_exitValue__I_exceptions, // the declared exceptions
  Process_MetainfoWrapper::Process_method_exitValue__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Process_methods_getCommandLine__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Process_methods_getCommandLine__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Process_method_getCommandLine__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCommandLine", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_9_getCommandLine", // alternative name of method
  -1, // altlabelHashCode
  Process_methods_getCommandLine__LRString__args, // the arguments
  0, //arguments count
  Process_methods_getCommandLine__LRString__exceptions, // the declared exceptions
  Process_MetainfoWrapper::Process_method_getCommandLine__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Process_methods_getErrorReader__Lacdk_io_RReader__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Process_methods_getErrorReader__Lacdk_io_RReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Process_method_getErrorReader__Lacdk_io_RReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getErrorReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo(), // return type
  "_c_getErrorReader", // alternative name of method
  -1, // altlabelHashCode
  Process_methods_getErrorReader__Lacdk_io_RReader__args, // the arguments
  0, //arguments count
  Process_methods_getErrorReader__Lacdk_io_RReader__exceptions, // the declared exceptions
  Process_MetainfoWrapper::Process_method_getErrorReader__Lacdk_io_RReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Process_methods_getErrorStream__Lacdk_io_RReader__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Process_methods_getErrorStream__Lacdk_io_RReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Process_method_getErrorStream__Lacdk_io_RReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getErrorStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo(), // return type
  "_e_getErrorStream", // alternative name of method
  -1, // altlabelHashCode
  Process_methods_getErrorStream__Lacdk_io_RReader__args, // the arguments
  0, //arguments count
  Process_methods_getErrorStream__Lacdk_io_RReader__exceptions, // the declared exceptions
  Process_MetainfoWrapper::Process_method_getErrorStream__Lacdk_io_RReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Process_methods_getInputStream__Lacdk_io_RWriter__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Process_methods_getInputStream__Lacdk_io_RWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Process_method_getInputStream__Lacdk_io_RWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInputStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RWriter::clazzInfo(), // return type
  "_f_getInputStream", // alternative name of method
  -1, // altlabelHashCode
  Process_methods_getInputStream__Lacdk_io_RWriter__args, // the arguments
  0, //arguments count
  Process_methods_getInputStream__Lacdk_io_RWriter__exceptions, // the declared exceptions
  Process_MetainfoWrapper::Process_method_getInputStream__Lacdk_io_RWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Process_methods_getInputWriter__Lacdk_io_RWriter__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Process_methods_getInputWriter__Lacdk_io_RWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Process_method_getInputWriter__Lacdk_io_RWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInputWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RWriter::clazzInfo(), // return type
  "_d_getInputWriter", // alternative name of method
  -1, // altlabelHashCode
  Process_methods_getInputWriter__Lacdk_io_RWriter__args, // the arguments
  0, //arguments count
  Process_methods_getInputWriter__Lacdk_io_RWriter__exceptions, // the declared exceptions
  Process_MetainfoWrapper::Process_method_getInputWriter__Lacdk_io_RWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Process_methods_getOutputReader__Lacdk_io_RReader__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Process_methods_getOutputReader__Lacdk_io_RReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Process_method_getOutputReader__Lacdk_io_RReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getOutputReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo(), // return type
  "_b_getOutputReader", // alternative name of method
  -1, // altlabelHashCode
  Process_methods_getOutputReader__Lacdk_io_RReader__args, // the arguments
  0, //arguments count
  Process_methods_getOutputReader__Lacdk_io_RReader__exceptions, // the declared exceptions
  Process_MetainfoWrapper::Process_method_getOutputReader__Lacdk_io_RReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Process_methods_getOutputStream__Lacdk_io_RReader__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Process_methods_getOutputStream__Lacdk_io_RReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Process_method_getOutputStream__Lacdk_io_RReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getOutputStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo(), // return type
  "_g_getOutputStream", // alternative name of method
  -1, // altlabelHashCode
  Process_methods_getOutputStream__Lacdk_io_RReader__args, // the arguments
  0, //arguments count
  Process_methods_getOutputStream__Lacdk_io_RReader__exceptions, // the declared exceptions
  Process_MetainfoWrapper::Process_method_getOutputStream__Lacdk_io_RReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Process_methods_getProcessId__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Process_methods_getProcessId__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Process_method_getProcessId__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getProcessId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_m_getProcessId", // alternative name of method
  -1, // altlabelHashCode
  Process_methods_getProcessId__I_args, // the arguments
  0, //arguments count
  Process_methods_getProcessId__I_exceptions, // the declared exceptions
  Process_MetainfoWrapper::Process_method_getProcessId__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Process_methods_isRunning__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Process_methods_isRunning__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Process_method_isRunning__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isRunning", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_j_isRunning", // alternative name of method
  -1, // altlabelHashCode
  Process_methods_isRunning__Z_args, // the arguments
  0, //arguments count
  Process_methods_isRunning__Z_exceptions, // the declared exceptions
  Process_MetainfoWrapper::Process_method_isRunning__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Process_methods_resume__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Process_methods_resume__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Process_method_resume__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "resume", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_l_resume", // alternative name of method
  -1, // altlabelHashCode
  Process_methods_resume__V_args, // the arguments
  0, //arguments count
  Process_methods_resume__V_exceptions, // the declared exceptions
  Process_MetainfoWrapper::Process_method_resume__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Process_methods_suspend__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Process_methods_suspend__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Process_method_suspend__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "suspend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_k_suspend", // alternative name of method
  -1, // altlabelHashCode
  Process_methods_suspend__V_args, // the arguments
  0, //arguments count
  Process_methods_suspend__V_exceptions, // the declared exceptions
  Process_MetainfoWrapper::Process_method_suspend__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Process_methods_waitFor_I_I_arg_timeOutMs = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "timeOutMs", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Process_methods_waitFor_I_I_args[] = 
{
  &Process_methods_waitFor_I_I_arg_timeOutMs,
  0
};

::acdk::lang::dmi::ClazzInfo* Process_methods_waitFor_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Process_method_waitFor_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "waitFor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_h_waitFor", // alternative name of method
  -1, // altlabelHashCode
  Process_methods_waitFor_I_I_args, // the arguments
  0, //arguments count
  Process_methods_waitFor_I_I_exceptions, // the declared exceptions
  Process_MetainfoWrapper::Process_method_waitFor_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Process_methods_waitFor__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Process_methods_waitFor__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Process_method_waitFor__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "waitFor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_i_waitFor", // alternative name of method
  -1, // altlabelHashCode
  Process_methods_waitFor__I_args, // the arguments
  0, //arguments count
  Process_methods_waitFor__I_exceptions, // the declared exceptions
  Process_MetainfoWrapper::Process_method_waitFor__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Process_methods[] = 
{
  &Process_method_GetClass__L_acdk_lang_RClass_,
  &Process_method_Process_INLRString_INLRString__LRProcess_,
  &Process_method_Process_INLRString__LRProcess_,
  &Process_method_Process_INLRStringArray_INLRString__LRProcess_,
  &Process_method_Process_INLRStringArray__LRProcess_,
  &Process_method_Process_INLRStringArray_INLRStringArray_INLRString__LRProcess_,
  &Process_method_Process_INLRStringArray_INLRStringArray__LRProcess_,
  &Process_method_Process_INLRString_INLRStringArray_INLRString__LRProcess_,
  &Process_method_Process_INLRString_INLRStringArray__LRProcess_,
  &Process_method__run__V,
  &Process_method_destroy__V,
  &Process_method_exitValue__I,
  &Process_method_getCommandLine__LRString_,
  &Process_method_getErrorReader__Lacdk_io_RReader_,
  &Process_method_getErrorStream__Lacdk_io_RReader_,
  &Process_method_getInputStream__Lacdk_io_RWriter_,
  &Process_method_getInputWriter__Lacdk_io_RWriter_,
  &Process_method_getOutputReader__Lacdk_io_RReader_,
  &Process_method_getOutputStream__Lacdk_io_RReader_,
  &Process_method_getProcessId__I,
  &Process_method_isRunning__Z,
  &Process_method_resume__V,
  &Process_method_suspend__V,
  &Process_method_waitFor_I_I,
  &Process_method_waitFor__I,
  0
};


struct Process_MetaInfoInitializer
{  Process_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Process::clazzInfo();
    ci->fields =  _Process_fields;
    ci->methods =  _Process_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Process_MetaInfoInitializer Process_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
Runnable_create_array(int length)
{
  return new ObjectArrayImpl<RRunnable>(length);
}

//static
::acdk::lang::RObject
Runnable_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Runnable_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Runnable_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Runnable::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Runnable_method_run__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Runnable* This = dmi_cast<Runnable>(This_);
    This->run();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Runnable_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Runnable_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Runnable_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Runnable_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Runnable_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Runnable_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Runnable_MetainfoWrapper::Runnable_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Runnable_methods_run__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Runnable_methods_run__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Runnable_method_run__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "run", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0_run", // alternative name of method
  -1, // altlabelHashCode
  Runnable_methods_run__V_args, // the arguments
  0, //arguments count
  Runnable_methods_run__V_exceptions, // the declared exceptions
  Runnable_MetainfoWrapper::Runnable_method_run__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Runnable_methods[] = 
{
  &Runnable_method_GetClass__L_acdk_lang_RClass_,
  &Runnable_method_run__V,
  0
};


struct Runnable_MetaInfoInitializer
{  Runnable_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Runnable::clazzInfo();
    ci->fields =  _Runnable_fields;
    ci->methods =  _Runnable_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Runnable_MetaInfoInitializer Runnable_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
SignalEventHandler_create_array(int length)
{
  return new ObjectArrayImpl<RSignalEventHandler>(length);
}

//static
::acdk::lang::RObject
SignalEventHandler_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SignalEventHandler_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SignalEventHandler_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SignalEventHandler::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SignalEventHandler_method_equals_INLRSignalEventHandler__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SignalEventHandler* This = dmi_cast<SignalEventHandler>(This_);
  ret = This->equals(::acdk::lang::dmi::castTo< RSignalEventHandler>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SignalEventHandler_method_handleEvent_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SignalEventHandler* This = dmi_cast<SignalEventHandler>(This_);
  ret = This->handleEvent((SignalEventType)::acdk::lang::dmi::castTo<int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SignalEventHandler_method_listenToEvents__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SignalEventHandler* This = dmi_cast<SignalEventHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SignalEventHandler::listenToEvents();
    else
      ret = This->listenToEvents();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _SignalEventHandler_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SignalEventHandler_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SignalEventHandler_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SignalEventHandler_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SignalEventHandler_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SignalEventHandler_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SignalEventHandler_MetainfoWrapper::SignalEventHandler_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SignalEventHandler_methods_equals_INLRSignalEventHandler__Z_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSignalEventHandler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SignalEventHandler_methods_equals_INLRSignalEventHandler__Z_args[] = 
{
  &SignalEventHandler_methods_equals_INLRSignalEventHandler__Z_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* SignalEventHandler_methods_equals_INLRSignalEventHandler__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SignalEventHandler_method_equals_INLRSignalEventHandler__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_equals", // alternative name of method
  -1, // altlabelHashCode
  SignalEventHandler_methods_equals_INLRSignalEventHandler__Z_args, // the arguments
  0, //arguments count
  SignalEventHandler_methods_equals_INLRSignalEventHandler__Z_exceptions, // the declared exceptions
  SignalEventHandler_MetainfoWrapper::SignalEventHandler_method_equals_INLRSignalEventHandler__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SignalEventHandler_methods_handleEvent_I_Z_arg_event = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "event", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SignalEventHandler_methods_handleEvent_I_Z_args[] = 
{
  &SignalEventHandler_methods_handleEvent_I_Z_arg_event,
  0
};

::acdk::lang::dmi::ClazzInfo* SignalEventHandler_methods_handleEvent_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SignalEventHandler_method_handleEvent_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "handleEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_0_handleEvent", // alternative name of method
  -1, // altlabelHashCode
  SignalEventHandler_methods_handleEvent_I_Z_args, // the arguments
  0, //arguments count
  SignalEventHandler_methods_handleEvent_I_Z_exceptions, // the declared exceptions
  SignalEventHandler_MetainfoWrapper::SignalEventHandler_method_handleEvent_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SignalEventHandler_methods_listenToEvents__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SignalEventHandler_methods_listenToEvents__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SignalEventHandler_method_listenToEvents__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "listenToEvents", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2_listenToEvents", // alternative name of method
  -1, // altlabelHashCode
  SignalEventHandler_methods_listenToEvents__I_args, // the arguments
  0, //arguments count
  SignalEventHandler_methods_listenToEvents__I_exceptions, // the declared exceptions
  SignalEventHandler_MetainfoWrapper::SignalEventHandler_method_listenToEvents__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SignalEventHandler_methods[] = 
{
  &SignalEventHandler_method_GetClass__L_acdk_lang_RClass_,
  &SignalEventHandler_method_equals_INLRSignalEventHandler__Z,
  &SignalEventHandler_method_handleEvent_I_Z,
  &SignalEventHandler_method_listenToEvents__I,
  0
};


struct SignalEventHandler_MetaInfoInitializer
{  SignalEventHandler_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SignalEventHandler::clazzInfo();
    ci->fields =  _SignalEventHandler_fields;
    ci->methods =  _SignalEventHandler_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SignalEventHandler_MetaInfoInitializer SignalEventHandler_MetaInfoInitializer_staticinstance__;


struct SignalEventHandler_clazzInfo_ClazzAttributesResInitializer36
{
  SignalEventHandler_clazzInfo_ClazzAttributesResInitializer36()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&SignalEventHandler_methods_handleEvent_I_Z_arg_event, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)SignalEventTypeMetaInf::GetEnumInfo()));
  }
};

SignalEventHandler_clazzInfo_ClazzAttributesResInitializer36 SignalEventHandler_clazzInfo_ClazzAttributesResInitializer36_instance;



} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
Runtime_create_array(int length)
{
  return new ObjectArrayImpl<RRuntime>(length);
}

//static
::acdk::lang::RObject
Runtime_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Runtime_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Runtime_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Runtime::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Runtime_method_exec_INLRStringArray__LRProcess__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Runtime::exec(::acdk::lang::dmi::castTo< RStringArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Runtime_method_exec_INLRStringArray_INLRStringArray_INLRString__LRProcess__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Runtime::exec(::acdk::lang::dmi::castTo< RStringArray>(args[0], dc), ::acdk::lang::dmi::castTo< RStringArray>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Runtime_method_exec_INLRStringArray_INLRStringArray__LRProcess__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Runtime::exec(::acdk::lang::dmi::castTo< RStringArray>(args[0], dc), ::acdk::lang::dmi::castTo< RStringArray>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Runtime_method_exec_INLRStringArray_INLacdk_util_RProperties_INLRString__LRProcess__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Runtime::exec(::acdk::lang::dmi::castTo< RStringArray>(args[0], dc), ::acdk::lang::dmi::castTo< acdk::util::RProperties>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Runtime_method_exec_INLRString__LRProcess__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Runtime::exec(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Runtime_method_exec_INLRStringArray_INLRString__LRProcess__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Runtime::exec(::acdk::lang::dmi::castTo< RStringArray>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Runtime_method_exec_INLRString_INLRString__LRProcess__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Runtime::exec(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Runtime_method_exec_INLRStringArray_INLacdk_util_RProperties__LRProcess__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Runtime::exec(::acdk::lang::dmi::castTo< RStringArray>(args[0], dc), ::acdk::lang::dmi::castTo< acdk::util::RProperties>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Runtime_method_exec_INLRString_INLRStringArray_INLRString__LRProcess__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Runtime::exec(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RStringArray>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Runtime_method_exec_INLRString_INLRStringArray__LRProcess__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Runtime::exec(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RStringArray>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Runtime_method_exec_INLRString_INLacdk_util_RProperties_INLRString__LRProcess__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Runtime::exec(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< acdk::util::RProperties>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Runtime_method_exec_INLRString_INLacdk_util_RProperties__LRProcess__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Runtime::exec(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< acdk::util::RProperties>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Runtime_method_exit_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Runtime* This = dmi_cast<Runtime>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Runtime::exit(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->exit(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Runtime_method_freeMemory__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Runtime* This = dmi_cast<Runtime>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Runtime::freeMemory();
    else
      ret = This->freeMemory();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Runtime_method_gc__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Runtime* This = dmi_cast<Runtime>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Runtime::gc();
    else
        This->gc();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Runtime_method_getEventHandlers__LRSignalEventHandlerArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Runtime::getEventHandlers();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Runtime_method_getRuntime__LRRuntime__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Runtime::getRuntime();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Runtime_method_initSignals__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Runtime::initSignals();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Runtime_method_load_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Runtime* This = dmi_cast<Runtime>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Runtime::load(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->load(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Runtime_method_loadLibrary_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Runtime* This = dmi_cast<Runtime>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Runtime::loadLibrary(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->loadLibrary(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Runtime_method_registerSignalEventHandler_INLRSignalEventHandler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Runtime::registerSignalEventHandler(::acdk::lang::dmi::castTo< RSignalEventHandler>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Runtime_method_runFinalization__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Runtime* This = dmi_cast<Runtime>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Runtime::runFinalization();
    else
        This->runFinalization();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Runtime_method_totalMemory__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Runtime* This = dmi_cast<Runtime>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Runtime::totalMemory();
    else
      ret = This->totalMemory();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Runtime_method_traceInstructions_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Runtime* This = dmi_cast<Runtime>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Runtime::traceInstructions(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->traceInstructions(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Runtime_method_traceMethodCalls_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Runtime* This = dmi_cast<Runtime>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Runtime::traceMethodCalls(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->traceMethodCalls(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Runtime_method_unregisterAllEventHandler_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Runtime::unregisterAllEventHandler(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Runtime_method_unregisterSignalEventHandler_INLRSignalEventHandler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Runtime::unregisterSignalEventHandler(::acdk::lang::dmi::castTo< RSignalEventHandler>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Runtime_fields_SignaledCtrlBreakCount_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Runtime::SignaledCtrlBreakCount, flags);
    else
      Runtime::SignaledCtrlBreakCount = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Runtime_fields_SignaledCtrlCCount_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Runtime::SignaledCtrlCCount, flags);
    else
      Runtime::SignaledCtrlCCount = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Runtime_fields__traceMethodCalls_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Runtime::_traceMethodCalls, flags);
    else
      Runtime::_traceMethodCalls = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Runtime_fields_eventHandler_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Runtime::eventHandler, flags);
    else
      Runtime::eventHandler = ::acdk::lang::dmi::castTo< RSignalEventHandlerArray>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo Runtime_fields_SignaledCtrlBreakCount = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "SignaledCtrlBreakCount", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Runtime_MetainfoWrapper::Runtime_fields_SignaledCtrlBreakCount_accessor, // read/write access to this fields
  (void*)&Runtime::SignaledCtrlBreakCount // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Runtime_fields_SignaledCtrlCCount = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "SignaledCtrlCCount", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Runtime_MetainfoWrapper::Runtime_fields_SignaledCtrlCCount_accessor, // read/write access to this fields
  (void*)&Runtime::SignaledCtrlCCount // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Runtime_fields__traceMethodCalls = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_traceMethodCalls", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  Runtime_MetainfoWrapper::Runtime_fields__traceMethodCalls_accessor, // read/write access to this fields
  (void*)&Runtime::_traceMethodCalls // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Runtime_fields_eventHandler = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "eventHandler", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSignalEventHandlerArray::clazzInfo(),
  Runtime_MetainfoWrapper::Runtime_fields_eventHandler_accessor, // read/write access to this fields
  (void*)Runtime::eventHandler._ref_this() // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _Runtime_fields[] = 
{
  &Runtime_fields_SignaledCtrlBreakCount,
  &Runtime_fields_SignaledCtrlCCount,
  &Runtime_fields__traceMethodCalls,
  &Runtime_fields_eventHandler,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Runtime_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Runtime_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Runtime_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_r_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Runtime_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Runtime_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Runtime_MetainfoWrapper::Runtime_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Runtime_methods_exec_INLRStringArray__LRProcess__arg_cmdarray = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cmdarray", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Runtime_methods_exec_INLRStringArray__LRProcess__args[] = 
{
  &Runtime_methods_exec_INLRStringArray__LRProcess__arg_cmdarray,
  0
};

::acdk::lang::dmi::ClazzInfo* Runtime_methods_exec_INLRStringArray__LRProcess__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Runtime_method_exec_INLRStringArray__LRProcess_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "exec", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProcess::clazzInfo(), // return type
  "_4_exec", // alternative name of method
  -1, // altlabelHashCode
  Runtime_methods_exec_INLRStringArray__LRProcess__args, // the arguments
  0, //arguments count
  Runtime_methods_exec_INLRStringArray__LRProcess__exceptions, // the declared exceptions
  Runtime_MetainfoWrapper::Runtime_method_exec_INLRStringArray__LRProcess__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Runtime_methods_exec_INLRStringArray_INLRStringArray_INLRString__LRProcess__arg_cmdarray = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cmdarray", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Runtime_methods_exec_INLRStringArray_INLRStringArray_INLRString__LRProcess__arg_envp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "envp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Runtime_methods_exec_INLRStringArray_INLRStringArray_INLRString__LRProcess__arg_workdir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "workdir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Runtime_methods_exec_INLRStringArray_INLRStringArray_INLRString__LRProcess__args[] = 
{
  &Runtime_methods_exec_INLRStringArray_INLRStringArray_INLRString__LRProcess__arg_cmdarray,
  &Runtime_methods_exec_INLRStringArray_INLRStringArray_INLRString__LRProcess__arg_envp,
  &Runtime_methods_exec_INLRStringArray_INLRStringArray_INLRString__LRProcess__arg_workdir,
  0
};

::acdk::lang::dmi::ClazzInfo* Runtime_methods_exec_INLRStringArray_INLRStringArray_INLRString__LRProcess__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Runtime_method_exec_INLRStringArray_INLRStringArray_INLRString__LRProcess_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "exec", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProcess::clazzInfo(), // return type
  "_5_exec", // alternative name of method
  -1, // altlabelHashCode
  Runtime_methods_exec_INLRStringArray_INLRStringArray_INLRString__LRProcess__args, // the arguments
  0, //arguments count
  Runtime_methods_exec_INLRStringArray_INLRStringArray_INLRString__LRProcess__exceptions, // the declared exceptions
  Runtime_MetainfoWrapper::Runtime_method_exec_INLRStringArray_INLRStringArray_INLRString__LRProcess__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Runtime_methods_exec_INLRStringArray_INLRStringArray__LRProcess__arg_cmdarray = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cmdarray", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Runtime_methods_exec_INLRStringArray_INLRStringArray__LRProcess__arg_envp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "envp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Runtime_methods_exec_INLRStringArray_INLRStringArray__LRProcess__args[] = 
{
  &Runtime_methods_exec_INLRStringArray_INLRStringArray__LRProcess__arg_cmdarray,
  &Runtime_methods_exec_INLRStringArray_INLRStringArray__LRProcess__arg_envp,
  0
};

::acdk::lang::dmi::ClazzInfo* Runtime_methods_exec_INLRStringArray_INLRStringArray__LRProcess__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Runtime_method_exec_INLRStringArray_INLRStringArray__LRProcess_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "exec", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProcess::clazzInfo(), // return type
  "_6_exec", // alternative name of method
  -1, // altlabelHashCode
  Runtime_methods_exec_INLRStringArray_INLRStringArray__LRProcess__args, // the arguments
  0, //arguments count
  Runtime_methods_exec_INLRStringArray_INLRStringArray__LRProcess__exceptions, // the declared exceptions
  Runtime_MetainfoWrapper::Runtime_method_exec_INLRStringArray_INLRStringArray__LRProcess__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Runtime_methods_exec_INLRStringArray_INLacdk_util_RProperties_INLRString__LRProcess__arg_cmdarray = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cmdarray", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Runtime_methods_exec_INLRStringArray_INLacdk_util_RProperties_INLRString__LRProcess__arg_envp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "envp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RProperties::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Runtime_methods_exec_INLRStringArray_INLacdk_util_RProperties_INLRString__LRProcess__arg_workdir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "workdir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Runtime_methods_exec_INLRStringArray_INLacdk_util_RProperties_INLRString__LRProcess__args[] = 
{
  &Runtime_methods_exec_INLRStringArray_INLacdk_util_RProperties_INLRString__LRProcess__arg_cmdarray,
  &Runtime_methods_exec_INLRStringArray_INLacdk_util_RProperties_INLRString__LRProcess__arg_envp,
  &Runtime_methods_exec_INLRStringArray_INLacdk_util_RProperties_INLRString__LRProcess__arg_workdir,
  0
};

::acdk::lang::dmi::ClazzInfo* Runtime_methods_exec_INLRStringArray_INLacdk_util_RProperties_INLRString__LRProcess__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Runtime_method_exec_INLRStringArray_INLacdk_util_RProperties_INLRString__LRProcess_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "exec", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProcess::clazzInfo(), // return type
  "_7_exec", // alternative name of method
  -1, // altlabelHashCode
  Runtime_methods_exec_INLRStringArray_INLacdk_util_RProperties_INLRString__LRProcess__args, // the arguments
  0, //arguments count
  Runtime_methods_exec_INLRStringArray_INLacdk_util_RProperties_INLRString__LRProcess__exceptions, // the declared exceptions
  Runtime_MetainfoWrapper::Runtime_method_exec_INLRStringArray_INLacdk_util_RProperties_INLRString__LRProcess__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Runtime_methods_exec_INLRString__LRProcess__arg_command = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "command", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Runtime_methods_exec_INLRString__LRProcess__args[] = 
{
  &Runtime_methods_exec_INLRString__LRProcess__arg_command,
  0
};

::acdk::lang::dmi::ClazzInfo* Runtime_methods_exec_INLRString__LRProcess__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Runtime_method_exec_INLRString__LRProcess_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "exec", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProcess::clazzInfo(), // return type
  "_2_exec", // alternative name of method
  -1, // altlabelHashCode
  Runtime_methods_exec_INLRString__LRProcess__args, // the arguments
  0, //arguments count
  Runtime_methods_exec_INLRString__LRProcess__exceptions, // the declared exceptions
  Runtime_MetainfoWrapper::Runtime_method_exec_INLRString__LRProcess__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Runtime_methods_exec_INLRStringArray_INLRString__LRProcess__arg_cmdarray = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cmdarray", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Runtime_methods_exec_INLRStringArray_INLRString__LRProcess__arg_workdir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "workdir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Runtime_methods_exec_INLRStringArray_INLRString__LRProcess__args[] = 
{
  &Runtime_methods_exec_INLRStringArray_INLRString__LRProcess__arg_cmdarray,
  &Runtime_methods_exec_INLRStringArray_INLRString__LRProcess__arg_workdir,
  0
};

::acdk::lang::dmi::ClazzInfo* Runtime_methods_exec_INLRStringArray_INLRString__LRProcess__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Runtime_method_exec_INLRStringArray_INLRString__LRProcess_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "exec", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProcess::clazzInfo(), // return type
  "_3_exec", // alternative name of method
  -1, // altlabelHashCode
  Runtime_methods_exec_INLRStringArray_INLRString__LRProcess__args, // the arguments
  0, //arguments count
  Runtime_methods_exec_INLRStringArray_INLRString__LRProcess__exceptions, // the declared exceptions
  Runtime_MetainfoWrapper::Runtime_method_exec_INLRStringArray_INLRString__LRProcess__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Runtime_methods_exec_INLRString_INLRString__LRProcess__arg_command = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "command", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Runtime_methods_exec_INLRString_INLRString__LRProcess__arg_workdir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "workdir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Runtime_methods_exec_INLRString_INLRString__LRProcess__args[] = 
{
  &Runtime_methods_exec_INLRString_INLRString__LRProcess__arg_command,
  &Runtime_methods_exec_INLRString_INLRString__LRProcess__arg_workdir,
  0
};

::acdk::lang::dmi::ClazzInfo* Runtime_methods_exec_INLRString_INLRString__LRProcess__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Runtime_method_exec_INLRString_INLRString__LRProcess_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "exec", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProcess::clazzInfo(), // return type
  "_1_exec", // alternative name of method
  -1, // altlabelHashCode
  Runtime_methods_exec_INLRString_INLRString__LRProcess__args, // the arguments
  0, //arguments count
  Runtime_methods_exec_INLRString_INLRString__LRProcess__exceptions, // the declared exceptions
  Runtime_MetainfoWrapper::Runtime_method_exec_INLRString_INLRString__LRProcess__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Runtime_methods_exec_INLRStringArray_INLacdk_util_RProperties__LRProcess__arg_cmdarray = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cmdarray", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Runtime_methods_exec_INLRStringArray_INLacdk_util_RProperties__LRProcess__arg_envp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "envp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RProperties::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Runtime_methods_exec_INLRStringArray_INLacdk_util_RProperties__LRProcess__args[] = 
{
  &Runtime_methods_exec_INLRStringArray_INLacdk_util_RProperties__LRProcess__arg_cmdarray,
  &Runtime_methods_exec_INLRStringArray_INLacdk_util_RProperties__LRProcess__arg_envp,
  0
};

::acdk::lang::dmi::ClazzInfo* Runtime_methods_exec_INLRStringArray_INLacdk_util_RProperties__LRProcess__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Runtime_method_exec_INLRStringArray_INLacdk_util_RProperties__LRProcess_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "exec", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProcess::clazzInfo(), // return type
  "_8_exec", // alternative name of method
  -1, // altlabelHashCode
  Runtime_methods_exec_INLRStringArray_INLacdk_util_RProperties__LRProcess__args, // the arguments
  0, //arguments count
  Runtime_methods_exec_INLRStringArray_INLacdk_util_RProperties__LRProcess__exceptions, // the declared exceptions
  Runtime_MetainfoWrapper::Runtime_method_exec_INLRStringArray_INLacdk_util_RProperties__LRProcess__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Runtime_methods_exec_INLRString_INLRStringArray_INLRString__LRProcess__arg_command = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "command", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Runtime_methods_exec_INLRString_INLRStringArray_INLRString__LRProcess__arg_envp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "envp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Runtime_methods_exec_INLRString_INLRStringArray_INLRString__LRProcess__arg_workdir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "workdir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Runtime_methods_exec_INLRString_INLRStringArray_INLRString__LRProcess__args[] = 
{
  &Runtime_methods_exec_INLRString_INLRStringArray_INLRString__LRProcess__arg_command,
  &Runtime_methods_exec_INLRString_INLRStringArray_INLRString__LRProcess__arg_envp,
  &Runtime_methods_exec_INLRString_INLRStringArray_INLRString__LRProcess__arg_workdir,
  0
};

::acdk::lang::dmi::ClazzInfo* Runtime_methods_exec_INLRString_INLRStringArray_INLRString__LRProcess__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Runtime_method_exec_INLRString_INLRStringArray_INLRString__LRProcess_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "exec", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProcess::clazzInfo(), // return type
  "_9_exec", // alternative name of method
  -1, // altlabelHashCode
  Runtime_methods_exec_INLRString_INLRStringArray_INLRString__LRProcess__args, // the arguments
  0, //arguments count
  Runtime_methods_exec_INLRString_INLRStringArray_INLRString__LRProcess__exceptions, // the declared exceptions
  Runtime_MetainfoWrapper::Runtime_method_exec_INLRString_INLRStringArray_INLRString__LRProcess__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Runtime_methods_exec_INLRString_INLRStringArray__LRProcess__arg_command = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "command", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Runtime_methods_exec_INLRString_INLRStringArray__LRProcess__arg_envp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "envp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Runtime_methods_exec_INLRString_INLRStringArray__LRProcess__args[] = 
{
  &Runtime_methods_exec_INLRString_INLRStringArray__LRProcess__arg_command,
  &Runtime_methods_exec_INLRString_INLRStringArray__LRProcess__arg_envp,
  0
};

::acdk::lang::dmi::ClazzInfo* Runtime_methods_exec_INLRString_INLRStringArray__LRProcess__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Runtime_method_exec_INLRString_INLRStringArray__LRProcess_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "exec", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProcess::clazzInfo(), // return type
  "_a_exec", // alternative name of method
  -1, // altlabelHashCode
  Runtime_methods_exec_INLRString_INLRStringArray__LRProcess__args, // the arguments
  0, //arguments count
  Runtime_methods_exec_INLRString_INLRStringArray__LRProcess__exceptions, // the declared exceptions
  Runtime_MetainfoWrapper::Runtime_method_exec_INLRString_INLRStringArray__LRProcess__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Runtime_methods_exec_INLRString_INLacdk_util_RProperties_INLRString__LRProcess__arg_command = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "command", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Runtime_methods_exec_INLRString_INLacdk_util_RProperties_INLRString__LRProcess__arg_envp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "envp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RProperties::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Runtime_methods_exec_INLRString_INLacdk_util_RProperties_INLRString__LRProcess__arg_workdir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "workdir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Runtime_methods_exec_INLRString_INLacdk_util_RProperties_INLRString__LRProcess__args[] = 
{
  &Runtime_methods_exec_INLRString_INLacdk_util_RProperties_INLRString__LRProcess__arg_command,
  &Runtime_methods_exec_INLRString_INLacdk_util_RProperties_INLRString__LRProcess__arg_envp,
  &Runtime_methods_exec_INLRString_INLacdk_util_RProperties_INLRString__LRProcess__arg_workdir,
  0
};

::acdk::lang::dmi::ClazzInfo* Runtime_methods_exec_INLRString_INLacdk_util_RProperties_INLRString__LRProcess__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Runtime_method_exec_INLRString_INLacdk_util_RProperties_INLRString__LRProcess_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "exec", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProcess::clazzInfo(), // return type
  "_b_exec", // alternative name of method
  -1, // altlabelHashCode
  Runtime_methods_exec_INLRString_INLacdk_util_RProperties_INLRString__LRProcess__args, // the arguments
  0, //arguments count
  Runtime_methods_exec_INLRString_INLacdk_util_RProperties_INLRString__LRProcess__exceptions, // the declared exceptions
  Runtime_MetainfoWrapper::Runtime_method_exec_INLRString_INLacdk_util_RProperties_INLRString__LRProcess__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Runtime_methods_exec_INLRString_INLacdk_util_RProperties__LRProcess__arg_command = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "command", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Runtime_methods_exec_INLRString_INLacdk_util_RProperties__LRProcess__arg_envp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "envp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RProperties::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Runtime_methods_exec_INLRString_INLacdk_util_RProperties__LRProcess__args[] = 
{
  &Runtime_methods_exec_INLRString_INLacdk_util_RProperties__LRProcess__arg_command,
  &Runtime_methods_exec_INLRString_INLacdk_util_RProperties__LRProcess__arg_envp,
  0
};

::acdk::lang::dmi::ClazzInfo* Runtime_methods_exec_INLRString_INLacdk_util_RProperties__LRProcess__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Runtime_method_exec_INLRString_INLacdk_util_RProperties__LRProcess_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "exec", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProcess::clazzInfo(), // return type
  "_c_exec", // alternative name of method
  -1, // altlabelHashCode
  Runtime_methods_exec_INLRString_INLacdk_util_RProperties__LRProcess__args, // the arguments
  0, //arguments count
  Runtime_methods_exec_INLRString_INLacdk_util_RProperties__LRProcess__exceptions, // the declared exceptions
  Runtime_MetainfoWrapper::Runtime_method_exec_INLRString_INLacdk_util_RProperties__LRProcess__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Runtime_methods_exit_I_V_arg_status = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "status", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Runtime_methods_exit_I_V_args[] = 
{
  &Runtime_methods_exit_I_V_arg_status,
  0
};

::acdk::lang::dmi::ClazzInfo* Runtime_methods_exit_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Runtime_method_exit_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "exit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_exit", // alternative name of method
  -1, // altlabelHashCode
  Runtime_methods_exit_I_V_args, // the arguments
  0, //arguments count
  Runtime_methods_exit_I_V_exceptions, // the declared exceptions
  Runtime_MetainfoWrapper::Runtime_method_exit_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Runtime_methods_freeMemory__J_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Runtime_methods_freeMemory__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Runtime_method_freeMemory__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "freeMemory", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_h_freeMemory", // alternative name of method
  -1, // altlabelHashCode
  Runtime_methods_freeMemory__J_args, // the arguments
  0, //arguments count
  Runtime_methods_freeMemory__J_exceptions, // the declared exceptions
  Runtime_MetainfoWrapper::Runtime_method_freeMemory__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Runtime_methods_gc__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Runtime_methods_gc__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Runtime_method_gc__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "gc", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_i_gc", // alternative name of method
  -1, // altlabelHashCode
  Runtime_methods_gc__V_args, // the arguments
  0, //arguments count
  Runtime_methods_gc__V_exceptions, // the declared exceptions
  Runtime_MetainfoWrapper::Runtime_method_gc__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Runtime_methods_getEventHandlers__LRSignalEventHandlerArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Runtime_methods_getEventHandlers__LRSignalEventHandlerArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Runtime_method_getEventHandlers__LRSignalEventHandlerArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEventHandlers", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSignalEventHandlerArray::clazzInfo(), // return type
  "_0_getEventHandlers", // alternative name of method
  -1, // altlabelHashCode
  Runtime_methods_getEventHandlers__LRSignalEventHandlerArray__args, // the arguments
  0, //arguments count
  Runtime_methods_getEventHandlers__LRSignalEventHandlerArray__exceptions, // the declared exceptions
  Runtime_MetainfoWrapper::Runtime_method_getEventHandlers__LRSignalEventHandlerArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Runtime_methods_getRuntime__LRRuntime__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Runtime_methods_getRuntime__LRRuntime__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Runtime_method_getRuntime__LRRuntime_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRuntime", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRuntime::clazzInfo(), // return type
  "_j_getRuntime", // alternative name of method
  -1, // altlabelHashCode
  Runtime_methods_getRuntime__LRRuntime__args, // the arguments
  0, //arguments count
  Runtime_methods_getRuntime__LRRuntime__exceptions, // the declared exceptions
  Runtime_MetainfoWrapper::Runtime_method_getRuntime__LRRuntime__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Runtime_methods_initSignals__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Runtime_methods_initSignals__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Runtime_method_initSignals__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "initSignals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_q_initSignals", // alternative name of method
  -1, // altlabelHashCode
  Runtime_methods_initSignals__V_args, // the arguments
  0, //arguments count
  Runtime_methods_initSignals__V_exceptions, // the declared exceptions
  Runtime_MetainfoWrapper::Runtime_method_initSignals__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Runtime_methods_load_INLRString__V_arg_filename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "filename", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Runtime_methods_load_INLRString__V_args[] = 
{
  &Runtime_methods_load_INLRString__V_arg_filename,
  0
};

::acdk::lang::dmi::ClazzInfo* Runtime_methods_load_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Runtime_method_load_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "load", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_k_load", // alternative name of method
  -1, // altlabelHashCode
  Runtime_methods_load_INLRString__V_args, // the arguments
  0, //arguments count
  Runtime_methods_load_INLRString__V_exceptions, // the declared exceptions
  Runtime_MetainfoWrapper::Runtime_method_load_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Runtime_methods_loadLibrary_INLRString__V_arg_libname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "libname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Runtime_methods_loadLibrary_INLRString__V_args[] = 
{
  &Runtime_methods_loadLibrary_INLRString__V_arg_libname,
  0
};

::acdk::lang::dmi::ClazzInfo* Runtime_methods_loadLibrary_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Runtime_method_loadLibrary_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "loadLibrary", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_l_loadLibrary", // alternative name of method
  -1, // altlabelHashCode
  Runtime_methods_loadLibrary_INLRString__V_args, // the arguments
  0, //arguments count
  Runtime_methods_loadLibrary_INLRString__V_exceptions, // the declared exceptions
  Runtime_MetainfoWrapper::Runtime_method_loadLibrary_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Runtime_methods_registerSignalEventHandler_INLRSignalEventHandler__V_arg_handler = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "handler", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSignalEventHandler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Runtime_methods_registerSignalEventHandler_INLRSignalEventHandler__V_args[] = 
{
  &Runtime_methods_registerSignalEventHandler_INLRSignalEventHandler__V_arg_handler,
  0
};

::acdk::lang::dmi::ClazzInfo* Runtime_methods_registerSignalEventHandler_INLRSignalEventHandler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Runtime_method_registerSignalEventHandler_INLRSignalEventHandler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "registerSignalEventHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_registerSignalEventHandler", // alternative name of method
  -1, // altlabelHashCode
  Runtime_methods_registerSignalEventHandler_INLRSignalEventHandler__V_args, // the arguments
  0, //arguments count
  Runtime_methods_registerSignalEventHandler_INLRSignalEventHandler__V_exceptions, // the declared exceptions
  Runtime_MetainfoWrapper::Runtime_method_registerSignalEventHandler_INLRSignalEventHandler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Runtime_methods_runFinalization__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Runtime_methods_runFinalization__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Runtime_method_runFinalization__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "runFinalization", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_m_runFinalization", // alternative name of method
  -1, // altlabelHashCode
  Runtime_methods_runFinalization__V_args, // the arguments
  0, //arguments count
  Runtime_methods_runFinalization__V_exceptions, // the declared exceptions
  Runtime_MetainfoWrapper::Runtime_method_runFinalization__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Runtime_methods_totalMemory__J_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Runtime_methods_totalMemory__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Runtime_method_totalMemory__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "totalMemory", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_n_totalMemory", // alternative name of method
  -1, // altlabelHashCode
  Runtime_methods_totalMemory__J_args, // the arguments
  0, //arguments count
  Runtime_methods_totalMemory__J_exceptions, // the declared exceptions
  Runtime_MetainfoWrapper::Runtime_method_totalMemory__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Runtime_methods_traceInstructions_Z_V_arg_on = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "on", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Runtime_methods_traceInstructions_Z_V_args[] = 
{
  &Runtime_methods_traceInstructions_Z_V_arg_on,
  0
};

::acdk::lang::dmi::ClazzInfo* Runtime_methods_traceInstructions_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Runtime_method_traceInstructions_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "traceInstructions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_o_traceInstructions", // alternative name of method
  -1, // altlabelHashCode
  Runtime_methods_traceInstructions_Z_V_args, // the arguments
  0, //arguments count
  Runtime_methods_traceInstructions_Z_V_exceptions, // the declared exceptions
  Runtime_MetainfoWrapper::Runtime_method_traceInstructions_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Runtime_methods_traceMethodCalls_Z_V_arg_on = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "on", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Runtime_methods_traceMethodCalls_Z_V_args[] = 
{
  &Runtime_methods_traceMethodCalls_Z_V_arg_on,
  0
};

::acdk::lang::dmi::ClazzInfo* Runtime_methods_traceMethodCalls_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Runtime_method_traceMethodCalls_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "traceMethodCalls", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_p_traceMethodCalls", // alternative name of method
  -1, // altlabelHashCode
  Runtime_methods_traceMethodCalls_Z_V_args, // the arguments
  0, //arguments count
  Runtime_methods_traceMethodCalls_Z_V_exceptions, // the declared exceptions
  Runtime_MetainfoWrapper::Runtime_method_traceMethodCalls_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Runtime_methods_unregisterAllEventHandler_I_V_arg_signals = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "signals", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Runtime_methods_unregisterAllEventHandler_I_V_args[] = 
{
  &Runtime_methods_unregisterAllEventHandler_I_V_arg_signals,
  0
};

::acdk::lang::dmi::ClazzInfo* Runtime_methods_unregisterAllEventHandler_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Runtime_method_unregisterAllEventHandler_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "unregisterAllEventHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_unregisterAllEventHandler", // alternative name of method
  -1, // altlabelHashCode
  Runtime_methods_unregisterAllEventHandler_I_V_args, // the arguments
  0, //arguments count
  Runtime_methods_unregisterAllEventHandler_I_V_exceptions, // the declared exceptions
  Runtime_MetainfoWrapper::Runtime_method_unregisterAllEventHandler_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Runtime_methods_unregisterSignalEventHandler_INLRSignalEventHandler__V_arg_handler = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "handler", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSignalEventHandler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Runtime_methods_unregisterSignalEventHandler_INLRSignalEventHandler__V_args[] = 
{
  &Runtime_methods_unregisterSignalEventHandler_INLRSignalEventHandler__V_arg_handler,
  0
};

::acdk::lang::dmi::ClazzInfo* Runtime_methods_unregisterSignalEventHandler_INLRSignalEventHandler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Runtime_method_unregisterSignalEventHandler_INLRSignalEventHandler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "unregisterSignalEventHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_unregisterSignalEventHandler", // alternative name of method
  -1, // altlabelHashCode
  Runtime_methods_unregisterSignalEventHandler_INLRSignalEventHandler__V_args, // the arguments
  0, //arguments count
  Runtime_methods_unregisterSignalEventHandler_INLRSignalEventHandler__V_exceptions, // the declared exceptions
  Runtime_MetainfoWrapper::Runtime_method_unregisterSignalEventHandler_INLRSignalEventHandler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Runtime_methods[] = 
{
  &Runtime_method_GetClass__L_acdk_lang_RClass_,
  &Runtime_method_exec_INLRStringArray__LRProcess_,
  &Runtime_method_exec_INLRStringArray_INLRStringArray_INLRString__LRProcess_,
  &Runtime_method_exec_INLRStringArray_INLRStringArray__LRProcess_,
  &Runtime_method_exec_INLRStringArray_INLacdk_util_RProperties_INLRString__LRProcess_,
  &Runtime_method_exec_INLRString__LRProcess_,
  &Runtime_method_exec_INLRStringArray_INLRString__LRProcess_,
  &Runtime_method_exec_INLRString_INLRString__LRProcess_,
  &Runtime_method_exec_INLRStringArray_INLacdk_util_RProperties__LRProcess_,
  &Runtime_method_exec_INLRString_INLRStringArray_INLRString__LRProcess_,
  &Runtime_method_exec_INLRString_INLRStringArray__LRProcess_,
  &Runtime_method_exec_INLRString_INLacdk_util_RProperties_INLRString__LRProcess_,
  &Runtime_method_exec_INLRString_INLacdk_util_RProperties__LRProcess_,
  &Runtime_method_exit_I_V,
  &Runtime_method_freeMemory__J,
  &Runtime_method_gc__V,
  &Runtime_method_getEventHandlers__LRSignalEventHandlerArray_,
  &Runtime_method_getRuntime__LRRuntime_,
  &Runtime_method_initSignals__V,
  &Runtime_method_load_INLRString__V,
  &Runtime_method_loadLibrary_INLRString__V,
  &Runtime_method_registerSignalEventHandler_INLRSignalEventHandler__V,
  &Runtime_method_runFinalization__V,
  &Runtime_method_totalMemory__J,
  &Runtime_method_traceInstructions_Z_V,
  &Runtime_method_traceMethodCalls_Z_V,
  &Runtime_method_unregisterAllEventHandler_I_V,
  &Runtime_method_unregisterSignalEventHandler_INLRSignalEventHandler__V,
  0
};


struct Runtime_MetaInfoInitializer
{  Runtime_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Runtime::clazzInfo();
    ci->fields =  _Runtime_fields;
    ci->methods =  _Runtime_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Runtime_MetaInfoInitializer Runtime_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
RuntimeException_create_array(int length)
{
  return new ObjectArrayImpl<RRuntimeException>(length);
}

//static
::acdk::lang::RObject
RuntimeException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class RuntimeException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RuntimeException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)RuntimeException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RuntimeException_method_RuntimeException__LRRuntimeException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RuntimeException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RuntimeException_method_RuntimeException_INLRString_INLRThrowable__LRRuntimeException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RuntimeException(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RThrowable>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RuntimeException_method_RuntimeException_INLRString__LRRuntimeException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RuntimeException(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RuntimeException_method_RuntimeException_INLRThrowable__LRRuntimeException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RuntimeException(::acdk::lang::dmi::castTo< RThrowable>(args[0], dc));
    return methinf;
  }
};


void ThrowException_RuntimeException(IN(::acdk::lang::RThrowable) ex)
{
  throw RRuntimeException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _RuntimeException_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* RuntimeException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RuntimeException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RuntimeException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  RuntimeException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  RuntimeException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  RuntimeException_MetainfoWrapper::RuntimeException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* RuntimeException_methods_RuntimeException__LRRuntimeException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RuntimeException_methods_RuntimeException__LRRuntimeException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RuntimeException_method_RuntimeException__LRRuntimeException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "RuntimeException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RuntimeException::clazzInfo(), // return type
  "_0_RuntimeException", // alternative name of method
  -1, // altlabelHashCode
  RuntimeException_methods_RuntimeException__LRRuntimeException__args, // the arguments
  0, //arguments count
  RuntimeException_methods_RuntimeException__LRRuntimeException__exceptions, // the declared exceptions
  RuntimeException_MetainfoWrapper::RuntimeException_method_RuntimeException__LRRuntimeException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RuntimeException_methods_RuntimeException_INLRString_INLRThrowable__LRRuntimeException__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RuntimeException_methods_RuntimeException_INLRString_INLRThrowable__LRRuntimeException__arg_cause = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "cause", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThrowable::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RuntimeException_methods_RuntimeException_INLRString_INLRThrowable__LRRuntimeException__args[] = 
{
  &RuntimeException_methods_RuntimeException_INLRString_INLRThrowable__LRRuntimeException__arg_what,
  &RuntimeException_methods_RuntimeException_INLRString_INLRThrowable__LRRuntimeException__arg_cause,
  0
};

::acdk::lang::dmi::ClazzInfo* RuntimeException_methods_RuntimeException_INLRString_INLRThrowable__LRRuntimeException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RuntimeException_method_RuntimeException_INLRString_INLRThrowable__LRRuntimeException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "RuntimeException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RuntimeException::clazzInfo(), // return type
  "_1_RuntimeException", // alternative name of method
  -1, // altlabelHashCode
  RuntimeException_methods_RuntimeException_INLRString_INLRThrowable__LRRuntimeException__args, // the arguments
  0, //arguments count
  RuntimeException_methods_RuntimeException_INLRString_INLRThrowable__LRRuntimeException__exceptions, // the declared exceptions
  RuntimeException_MetainfoWrapper::RuntimeException_method_RuntimeException_INLRString_INLRThrowable__LRRuntimeException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RuntimeException_methods_RuntimeException_INLRString__LRRuntimeException__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RuntimeException_methods_RuntimeException_INLRString__LRRuntimeException__args[] = 
{
  &RuntimeException_methods_RuntimeException_INLRString__LRRuntimeException__arg_what,
  0
};

::acdk::lang::dmi::ClazzInfo* RuntimeException_methods_RuntimeException_INLRString__LRRuntimeException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RuntimeException_method_RuntimeException_INLRString__LRRuntimeException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "RuntimeException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RuntimeException::clazzInfo(), // return type
  "_2_RuntimeException", // alternative name of method
  -1, // altlabelHashCode
  RuntimeException_methods_RuntimeException_INLRString__LRRuntimeException__args, // the arguments
  0, //arguments count
  RuntimeException_methods_RuntimeException_INLRString__LRRuntimeException__exceptions, // the declared exceptions
  RuntimeException_MetainfoWrapper::RuntimeException_method_RuntimeException_INLRString__LRRuntimeException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RuntimeException_methods_RuntimeException_INLRThrowable__LRRuntimeException__arg_cause = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cause", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThrowable::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RuntimeException_methods_RuntimeException_INLRThrowable__LRRuntimeException__args[] = 
{
  &RuntimeException_methods_RuntimeException_INLRThrowable__LRRuntimeException__arg_cause,
  0
};

::acdk::lang::dmi::ClazzInfo* RuntimeException_methods_RuntimeException_INLRThrowable__LRRuntimeException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RuntimeException_method_RuntimeException_INLRThrowable__LRRuntimeException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "RuntimeException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RuntimeException::clazzInfo(), // return type
  "_3_RuntimeException", // alternative name of method
  -1, // altlabelHashCode
  RuntimeException_methods_RuntimeException_INLRThrowable__LRRuntimeException__args, // the arguments
  0, //arguments count
  RuntimeException_methods_RuntimeException_INLRThrowable__LRRuntimeException__exceptions, // the declared exceptions
  RuntimeException_MetainfoWrapper::RuntimeException_method_RuntimeException_INLRThrowable__LRRuntimeException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _RuntimeException_methods[] = 
{
  &RuntimeException_method_GetClass__L_acdk_lang_RClass_,
  &RuntimeException_method_RuntimeException__LRRuntimeException_,
  &RuntimeException_method_RuntimeException_INLRString_INLRThrowable__LRRuntimeException_,
  &RuntimeException_method_RuntimeException_INLRString__LRRuntimeException_,
  &RuntimeException_method_RuntimeException_INLRThrowable__LRRuntimeException_,
  0
};


struct RuntimeException_MetaInfoInitializer
{  RuntimeException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = RuntimeException::clazzInfo();
    ci->fields =  _RuntimeException_fields;
    ci->methods =  _RuntimeException_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
RuntimeException_MetaInfoInitializer RuntimeException_MetaInfoInitializer_staticinstance__;


struct RuntimeException_clazzInfo_ClazzAttributesResInitializer37
{
  RuntimeException_clazzInfo_ClazzAttributesResInitializer37()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)RuntimeException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_RuntimeException));
  }
};

RuntimeException_clazzInfo_ClazzAttributesResInitializer37 RuntimeException_clazzInfo_ClazzAttributesResInitializer37_instance;



} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
SharedLibrary_create_array(int length)
{
  return new ObjectArrayImpl<RSharedLibrary>(length);
}

//static
::acdk::lang::RObject
SharedLibrary_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SharedLibrary_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SharedLibrary_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SharedLibrary::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SharedLibrary_method_SharedLibrary_INLRString__LRSharedLibrary__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SharedLibrary(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SharedLibrary_method_SharedLibrary_INLacdk_io_RFile__LRSharedLibrary__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SharedLibrary(::acdk::lang::dmi::castTo< acdk::io::RFile>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SharedLibrary_method_loadLibary__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SharedLibrary* This = dmi_cast<SharedLibrary>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SharedLibrary::loadLibary();
    else
        This->loadLibary();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SharedLibrary_method_loaded__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SharedLibrary* This = dmi_cast<SharedLibrary>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SharedLibrary::loaded();
    else
      ret = This->loaded();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SharedLibrary_method_unloadLibrary__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SharedLibrary* This = dmi_cast<SharedLibrary>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SharedLibrary::unloadLibrary();
    else
        This->unloadLibrary();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SharedLibrary_fields__library_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SharedLibrary* This = dmi_cast<SharedLibrary>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_library, flags);
    else
      This->_library = ::acdk::lang::dmi::castTo< acdk::lang::RString>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo SharedLibrary_fields__library = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_library", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo(),
  SharedLibrary_MetainfoWrapper::SharedLibrary_fields__library_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _SharedLibrary_fields[] = 
{
  &SharedLibrary_fields__library,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SharedLibrary_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SharedLibrary_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SharedLibrary_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SharedLibrary_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SharedLibrary_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SharedLibrary_MetainfoWrapper::SharedLibrary_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SharedLibrary_methods_SharedLibrary_INLRString__LRSharedLibrary__arg_libName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "libName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SharedLibrary_methods_SharedLibrary_INLRString__LRSharedLibrary__args[] = 
{
  &SharedLibrary_methods_SharedLibrary_INLRString__LRSharedLibrary__arg_libName,
  0
};

::acdk::lang::dmi::ClazzInfo* SharedLibrary_methods_SharedLibrary_INLRString__LRSharedLibrary__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SharedLibrary_method_SharedLibrary_INLRString__LRSharedLibrary_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SharedLibrary", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SharedLibrary::clazzInfo(), // return type
  "_0_SharedLibrary", // alternative name of method
  -1, // altlabelHashCode
  SharedLibrary_methods_SharedLibrary_INLRString__LRSharedLibrary__args, // the arguments
  0, //arguments count
  SharedLibrary_methods_SharedLibrary_INLRString__LRSharedLibrary__exceptions, // the declared exceptions
  SharedLibrary_MetainfoWrapper::SharedLibrary_method_SharedLibrary_INLRString__LRSharedLibrary__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SharedLibrary_methods_SharedLibrary_INLacdk_io_RFile__LRSharedLibrary__arg_library = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "library", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RFile::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SharedLibrary_methods_SharedLibrary_INLacdk_io_RFile__LRSharedLibrary__args[] = 
{
  &SharedLibrary_methods_SharedLibrary_INLacdk_io_RFile__LRSharedLibrary__arg_library,
  0
};

::acdk::lang::dmi::ClazzInfo* SharedLibrary_methods_SharedLibrary_INLacdk_io_RFile__LRSharedLibrary__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SharedLibrary_method_SharedLibrary_INLacdk_io_RFile__LRSharedLibrary_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SharedLibrary", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SharedLibrary::clazzInfo(), // return type
  "_1_SharedLibrary", // alternative name of method
  -1, // altlabelHashCode
  SharedLibrary_methods_SharedLibrary_INLacdk_io_RFile__LRSharedLibrary__args, // the arguments
  0, //arguments count
  SharedLibrary_methods_SharedLibrary_INLacdk_io_RFile__LRSharedLibrary__exceptions, // the declared exceptions
  SharedLibrary_MetainfoWrapper::SharedLibrary_method_SharedLibrary_INLacdk_io_RFile__LRSharedLibrary__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SharedLibrary_methods_loadLibary__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SharedLibrary_methods_loadLibary__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SharedLibrary_method_loadLibary__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "loadLibary", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_loadLibary", // alternative name of method
  -1, // altlabelHashCode
  SharedLibrary_methods_loadLibary__V_args, // the arguments
  0, //arguments count
  SharedLibrary_methods_loadLibary__V_exceptions, // the declared exceptions
  SharedLibrary_MetainfoWrapper::SharedLibrary_method_loadLibary__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SharedLibrary_methods_loaded__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SharedLibrary_methods_loaded__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SharedLibrary_method_loaded__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "loaded", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_loaded", // alternative name of method
  -1, // altlabelHashCode
  SharedLibrary_methods_loaded__Z_args, // the arguments
  0, //arguments count
  SharedLibrary_methods_loaded__Z_exceptions, // the declared exceptions
  SharedLibrary_MetainfoWrapper::SharedLibrary_method_loaded__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SharedLibrary_methods_unloadLibrary__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SharedLibrary_methods_unloadLibrary__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SharedLibrary_method_unloadLibrary__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "unloadLibrary", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_unloadLibrary", // alternative name of method
  -1, // altlabelHashCode
  SharedLibrary_methods_unloadLibrary__V_args, // the arguments
  0, //arguments count
  SharedLibrary_methods_unloadLibrary__V_exceptions, // the declared exceptions
  SharedLibrary_MetainfoWrapper::SharedLibrary_method_unloadLibrary__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SharedLibrary_methods[] = 
{
  &SharedLibrary_method_GetClass__L_acdk_lang_RClass_,
  &SharedLibrary_method_SharedLibrary_INLRString__LRSharedLibrary_,
  &SharedLibrary_method_SharedLibrary_INLacdk_io_RFile__LRSharedLibrary_,
  &SharedLibrary_method_loadLibary__V,
  &SharedLibrary_method_loaded__Z,
  &SharedLibrary_method_unloadLibrary__V,
  0
};


struct SharedLibrary_MetaInfoInitializer
{  SharedLibrary_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SharedLibrary::clazzInfo();
    ci->fields =  _SharedLibrary_fields;
    ci->methods =  _SharedLibrary_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SharedLibrary_MetaInfoInitializer SharedLibrary_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
Short_create_array(int length)
{
  return new ObjectArrayImpl<RShort>(length);
}

//static
::acdk::lang::RObject
Short_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Short_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Short_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Short::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Short_method_Short_INLRString__LRShort__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Short(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Short_method_Short_S_LRShort__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Short(::acdk::lang::dmi::castTo< short>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Short_method_compareTo_INLRShort__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Short* This = dmi_cast<Short>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Short::compareTo(::acdk::lang::dmi::castTo< RShort>(args[0], dc));
    else
      ret = This->compareTo(::acdk::lang::dmi::castTo< RShort>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Short_method_compareTo_S_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Short* This = dmi_cast<Short>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Short::compareTo(::acdk::lang::dmi::castTo< short>(args[0], dc));
    else
      ret = This->compareTo(::acdk::lang::dmi::castTo< short>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Short_method_create_instance__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Short::create_instance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Short_method_decode_INLRString__LRShort__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Short::decode(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Short_method_equals_INLRShort__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Short* This = dmi_cast<Short>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Short::equals(::acdk::lang::dmi::castTo< RShort>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< RShort>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Short_method_equals_S_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Short* This = dmi_cast<Short>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Short::equals(::acdk::lang::dmi::castTo< short>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< short>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Short_method_getTYPE__LRClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Short::getTYPE();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Short_method_parseShort_INLRString_I_S_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Short::parseShort(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Short_method_parseShort_INLRString__S_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Short::parseShort(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Short_method_toString_SI_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Short::toString(::acdk::lang::dmi::castTo< short>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Short_method_toString_S_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Short::toString(::acdk::lang::dmi::castTo< short>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Short_method_valueOf_INLRString_I_LRShort__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Short::valueOf(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Short_method_valueOf_INLRString__LRShort__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Short::valueOf(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Short_fields_MAX_VALUE_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Short::MAX_VALUE, flags);
    else
      Short::MAX_VALUE = ::acdk::lang::dmi::castTo< short>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Short_fields_MIN_VALUE_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Short::MIN_VALUE, flags);
    else
      Short::MIN_VALUE = ::acdk::lang::dmi::castTo< short>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Short_fields_value_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Short* This = dmi_cast<Short>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->value, flags);
    else
      This->value = ::acdk::lang::dmi::castTo< short>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo Short_fields_MAX_VALUE = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "MAX_VALUE", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(),
  Short_MetainfoWrapper::Short_fields_MAX_VALUE_accessor, // read/write access to this fields
  (void*)&Short::MAX_VALUE // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Short_fields_MIN_VALUE = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "MIN_VALUE", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(),
  Short_MetainfoWrapper::Short_fields_MIN_VALUE_accessor, // read/write access to this fields
  (void*)&Short::MIN_VALUE // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Short_fields_value = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "value", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(),
  Short_MetainfoWrapper::Short_fields_value_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _Short_fields[] = 
{
  &Short_fields_MAX_VALUE,
  &Short_fields_MIN_VALUE,
  &Short_fields_value,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Short_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Short_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Short_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_f_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Short_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Short_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Short_MetainfoWrapper::Short_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Short_methods_Short_INLRString__LRShort__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Short_methods_Short_INLRString__LRShort__args[] = 
{
  &Short_methods_Short_INLRString__LRShort__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* Short_methods_Short_INLRString__LRShort__exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Short_Short_INLRString__LRShort__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Short_method_Short_INLRString__LRShort_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Short", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Short::clazzInfo(), // return type
  "_1_Short", // alternative name of method
  -1, // altlabelHashCode
  Short_methods_Short_INLRString__LRShort__args, // the arguments
  0, //arguments count
  Short_methods_Short_INLRString__LRShort__exceptions, // the declared exceptions
  Short_MetainfoWrapper::Short_method_Short_INLRString__LRShort__dispatch, // invoke this method
  Short_Short_INLRString__LRShort__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Short_methods_Short_S_LRShort__arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Short_methods_Short_S_LRShort__args[] = 
{
  &Short_methods_Short_S_LRShort__arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* Short_methods_Short_S_LRShort__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Short_method_Short_S_LRShort_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Short", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Short::clazzInfo(), // return type
  "_2_Short", // alternative name of method
  -1, // altlabelHashCode
  Short_methods_Short_S_LRShort__args, // the arguments
  0, //arguments count
  Short_methods_Short_S_LRShort__exceptions, // the declared exceptions
  Short_MetainfoWrapper::Short_method_Short_S_LRShort__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Short_methods_compareTo_INLRShort__I_arg_anotherShort = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "anotherShort", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RShort::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Short_methods_compareTo_INLRShort__I_args[] = 
{
  &Short_methods_compareTo_INLRShort__I_arg_anotherShort,
  0
};

::acdk::lang::dmi::ClazzInfo* Short_methods_compareTo_INLRShort__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Short_method_compareTo_INLRShort__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "compareTo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_compareTo", // alternative name of method
  -1, // altlabelHashCode
  Short_methods_compareTo_INLRShort__I_args, // the arguments
  0, //arguments count
  Short_methods_compareTo_INLRShort__I_exceptions, // the declared exceptions
  Short_MetainfoWrapper::Short_method_compareTo_INLRShort__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Short_methods_compareTo_S_I_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Short_methods_compareTo_S_I_args[] = 
{
  &Short_methods_compareTo_S_I_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* Short_methods_compareTo_S_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Short_method_compareTo_S_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "compareTo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_compareTo", // alternative name of method
  -1, // altlabelHashCode
  Short_methods_compareTo_S_I_args, // the arguments
  0, //arguments count
  Short_methods_compareTo_S_I_exceptions, // the declared exceptions
  Short_MetainfoWrapper::Short_method_compareTo_S_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Short_methods_create_instance__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Short_methods_create_instance__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Short_method_create_instance__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create_instance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_0_create_instance", // alternative name of method
  -1, // altlabelHashCode
  Short_methods_create_instance__LRObject__args, // the arguments
  0, //arguments count
  Short_methods_create_instance__LRObject__exceptions, // the declared exceptions
  Short_MetainfoWrapper::Short_method_create_instance__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Short_methods_decode_INLRString__LRShort__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Short_methods_decode_INLRString__LRShort__args[] = 
{
  &Short_methods_decode_INLRString__LRShort__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* Short_methods_decode_INLRString__LRShort__exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Short_decode_INLRString__LRShort__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Short_method_decode_INLRString__LRShort_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "decode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RShort::clazzInfo(), // return type
  "_5_decode", // alternative name of method
  -1, // altlabelHashCode
  Short_methods_decode_INLRString__LRShort__args, // the arguments
  0, //arguments count
  Short_methods_decode_INLRString__LRShort__exceptions, // the declared exceptions
  Short_MetainfoWrapper::Short_method_decode_INLRString__LRShort__dispatch, // invoke this method
  Short_decode_INLRString__LRShort__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Short_methods_equals_INLRShort__Z_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RShort::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Short_methods_equals_INLRShort__Z_args[] = 
{
  &Short_methods_equals_INLRShort__Z_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* Short_methods_equals_INLRShort__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Short_method_equals_INLRShort__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_8_equals", // alternative name of method
  -1, // altlabelHashCode
  Short_methods_equals_INLRShort__Z_args, // the arguments
  0, //arguments count
  Short_methods_equals_INLRShort__Z_exceptions, // the declared exceptions
  Short_MetainfoWrapper::Short_method_equals_INLRShort__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Short_methods_equals_S_Z_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Short_methods_equals_S_Z_args[] = 
{
  &Short_methods_equals_S_Z_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* Short_methods_equals_S_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Short_method_equals_S_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_9_equals", // alternative name of method
  -1, // altlabelHashCode
  Short_methods_equals_S_Z_args, // the arguments
  0, //arguments count
  Short_methods_equals_S_Z_exceptions, // the declared exceptions
  Short_MetainfoWrapper::Short_method_equals_S_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Short_methods_getTYPE__LRClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Short_methods_getTYPE__LRClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Short_method_getTYPE__LRClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTYPE", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(), // return type
  "_e_getTYPE", // alternative name of method
  -1, // altlabelHashCode
  Short_methods_getTYPE__LRClass__args, // the arguments
  0, //arguments count
  Short_methods_getTYPE__LRClass__exceptions, // the declared exceptions
  Short_MetainfoWrapper::Short_method_getTYPE__LRClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Short_methods_parseShort_INLRString_I_S_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Short_methods_parseShort_INLRString_I_S_arg_radix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "radix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Short_methods_parseShort_INLRString_I_S_args[] = 
{
  &Short_methods_parseShort_INLRString_I_S_arg_str,
  &Short_methods_parseShort_INLRString_I_S_arg_radix,
  0
};

::acdk::lang::dmi::ClazzInfo* Short_methods_parseShort_INLRString_I_S_exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Short_parseShort_INLRString_I_S_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Short_method_parseShort_INLRString_I_S = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parseShort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(), // return type
  "_3_parseShort", // alternative name of method
  -1, // altlabelHashCode
  Short_methods_parseShort_INLRString_I_S_args, // the arguments
  0, //arguments count
  Short_methods_parseShort_INLRString_I_S_exceptions, // the declared exceptions
  Short_MetainfoWrapper::Short_method_parseShort_INLRString_I_S_dispatch, // invoke this method
  Short_parseShort_INLRString_I_S_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Short_methods_parseShort_INLRString__S_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Short_methods_parseShort_INLRString__S_args[] = 
{
  &Short_methods_parseShort_INLRString__S_arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* Short_methods_parseShort_INLRString__S_exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Short_parseShort_INLRString__S_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Short_method_parseShort_INLRString__S = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "parseShort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(), // return type
  "_4_parseShort", // alternative name of method
  -1, // altlabelHashCode
  Short_methods_parseShort_INLRString__S_args, // the arguments
  0, //arguments count
  Short_methods_parseShort_INLRString__S_exceptions, // the declared exceptions
  Short_MetainfoWrapper::Short_method_parseShort_INLRString__S_dispatch, // invoke this method
  Short_parseShort_INLRString__S_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Short_methods_toString_SI_LRString__arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Short_methods_toString_SI_LRString__arg_radix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "radix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Short_methods_toString_SI_LRString__args[] = 
{
  &Short_methods_toString_SI_LRString__arg_s,
  &Short_methods_toString_SI_LRString__arg_radix,
  0
};

::acdk::lang::dmi::ClazzInfo* Short_methods_toString_SI_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Short_method_toString_SI_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_a_toString", // alternative name of method
  -1, // altlabelHashCode
  Short_methods_toString_SI_LRString__args, // the arguments
  0, //arguments count
  Short_methods_toString_SI_LRString__exceptions, // the declared exceptions
  Short_MetainfoWrapper::Short_method_toString_SI_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Short_methods_toString_S_LRString__arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Short_methods_toString_S_LRString__args[] = 
{
  &Short_methods_toString_S_LRString__arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* Short_methods_toString_S_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Short_method_toString_S_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_b_toString", // alternative name of method
  -1, // altlabelHashCode
  Short_methods_toString_S_LRString__args, // the arguments
  0, //arguments count
  Short_methods_toString_S_LRString__exceptions, // the declared exceptions
  Short_MetainfoWrapper::Short_method_toString_S_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Short_methods_valueOf_INLRString_I_LRShort__arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Short_methods_valueOf_INLRString_I_LRShort__arg_radix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "radix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Short_methods_valueOf_INLRString_I_LRShort__args[] = 
{
  &Short_methods_valueOf_INLRString_I_LRShort__arg_s,
  &Short_methods_valueOf_INLRString_I_LRShort__arg_radix,
  0
};

::acdk::lang::dmi::ClazzInfo* Short_methods_valueOf_INLRString_I_LRShort__exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Short_valueOf_INLRString_I_LRShort__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Short_method_valueOf_INLRString_I_LRShort_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "valueOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RShort::clazzInfo(), // return type
  "_c_valueOf", // alternative name of method
  -1, // altlabelHashCode
  Short_methods_valueOf_INLRString_I_LRShort__args, // the arguments
  0, //arguments count
  Short_methods_valueOf_INLRString_I_LRShort__exceptions, // the declared exceptions
  Short_MetainfoWrapper::Short_method_valueOf_INLRString_I_LRShort__dispatch, // invoke this method
  Short_valueOf_INLRString_I_LRShort__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Short_methods_valueOf_INLRString__LRShort__arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Short_methods_valueOf_INLRString__LRShort__args[] = 
{
  &Short_methods_valueOf_INLRString__LRShort__arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* Short_methods_valueOf_INLRString__LRShort__exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Short_valueOf_INLRString__LRShort__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Short_method_valueOf_INLRString__LRShort_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "valueOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RShort::clazzInfo(), // return type
  "_d_valueOf", // alternative name of method
  -1, // altlabelHashCode
  Short_methods_valueOf_INLRString__LRShort__args, // the arguments
  0, //arguments count
  Short_methods_valueOf_INLRString__LRShort__exceptions, // the declared exceptions
  Short_MetainfoWrapper::Short_method_valueOf_INLRString__LRShort__dispatch, // invoke this method
  Short_valueOf_INLRString__LRShort__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Short_methods[] = 
{
  &Short_method_GetClass__L_acdk_lang_RClass_,
  &Short_method_Short_INLRString__LRShort_,
  &Short_method_Short_S_LRShort_,
  &Short_method_compareTo_INLRShort__I,
  &Short_method_compareTo_S_I,
  &Short_method_create_instance__LRObject_,
  &Short_method_decode_INLRString__LRShort_,
  &Short_method_equals_INLRShort__Z,
  &Short_method_equals_S_Z,
  &Short_method_getTYPE__LRClass_,
  &Short_method_parseShort_INLRString_I_S,
  &Short_method_parseShort_INLRString__S,
  &Short_method_toString_SI_LRString_,
  &Short_method_toString_S_LRString_,
  &Short_method_valueOf_INLRString_I_LRShort_,
  &Short_method_valueOf_INLRString__LRShort_,
  0
};


struct Short_MetaInfoInitializer
{  Short_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Short::clazzInfo();
    ci->fields =  _Short_fields;
    ci->methods =  _Short_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Short_MetaInfoInitializer Short_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
StackFrameLocal_create_array(int length)
{
  return new ObjectArrayImpl<RStackFrameLocal>(length);
}

//static
::acdk::lang::RObject
StackFrameLocal_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class StackFrameLocal_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StackFrameLocal_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)StackFrameLocal::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StackFrameLocal_method_getName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StackFrameLocal* This = dmi_cast<StackFrameLocal>(This_);
    ret = (::acdk::lang::RObject)This->getName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StackFrameLocal_method_getObjectValue__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StackFrameLocal* This = dmi_cast<StackFrameLocal>(This_);
    ret = (::acdk::lang::RObject)This->getObjectValue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StackFrameLocal_method_getVariable__Lacdk_lang_dmi_RDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StackFrameLocal* This = dmi_cast<StackFrameLocal>(This_);
    ret = (::acdk::lang::RObject)This->getVariable();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _StackFrameLocal_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* StackFrameLocal_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StackFrameLocal_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StackFrameLocal_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  StackFrameLocal_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  StackFrameLocal_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  StackFrameLocal_MetainfoWrapper::StackFrameLocal_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StackFrameLocal_methods_getName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StackFrameLocal_methods_getName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StackFrameLocal_method_getName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_0_getName", // alternative name of method
  -1, // altlabelHashCode
  StackFrameLocal_methods_getName__LRString__args, // the arguments
  0, //arguments count
  StackFrameLocal_methods_getName__LRString__exceptions, // the declared exceptions
  StackFrameLocal_MetainfoWrapper::StackFrameLocal_method_getName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StackFrameLocal_methods_getObjectValue__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StackFrameLocal_methods_getObjectValue__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StackFrameLocal_method_getObjectValue__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getObjectValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_1_getObjectValue", // alternative name of method
  -1, // altlabelHashCode
  StackFrameLocal_methods_getObjectValue__LRObject__args, // the arguments
  0, //arguments count
  StackFrameLocal_methods_getObjectValue__LRObject__exceptions, // the declared exceptions
  StackFrameLocal_MetainfoWrapper::StackFrameLocal_method_getObjectValue__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StackFrameLocal_methods_getVariable__Lacdk_lang_dmi_RDmiObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StackFrameLocal_methods_getVariable__Lacdk_lang_dmi_RDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StackFrameLocal_method_getVariable__Lacdk_lang_dmi_RDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getVariable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::dmi::RDmiObject::clazzInfo(), // return type
  "_2_getVariable", // alternative name of method
  -1, // altlabelHashCode
  StackFrameLocal_methods_getVariable__Lacdk_lang_dmi_RDmiObject__args, // the arguments
  0, //arguments count
  StackFrameLocal_methods_getVariable__Lacdk_lang_dmi_RDmiObject__exceptions, // the declared exceptions
  StackFrameLocal_MetainfoWrapper::StackFrameLocal_method_getVariable__Lacdk_lang_dmi_RDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _StackFrameLocal_methods[] = 
{
  &StackFrameLocal_method_GetClass__L_acdk_lang_RClass_,
  &StackFrameLocal_method_getName__LRString_,
  &StackFrameLocal_method_getObjectValue__LRObject_,
  &StackFrameLocal_method_getVariable__Lacdk_lang_dmi_RDmiObject_,
  0
};


struct StackFrameLocal_MetaInfoInitializer
{  StackFrameLocal_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = StackFrameLocal::clazzInfo();
    ci->fields =  _StackFrameLocal_fields;
    ci->methods =  _StackFrameLocal_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
StackFrameLocal_MetaInfoInitializer StackFrameLocal_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
StackFrame_create_array(int length)
{
  return new ObjectArrayImpl<RStackFrame>(length);
}

//static
::acdk::lang::RObject
StackFrame_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class StackFrame_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StackFrame_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)StackFrame::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StackFrame_method_getCurrentSourceLine__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StackFrame* This = dmi_cast<StackFrame>(This_);
    ret = (::acdk::lang::RObject)This->getCurrentSourceLine();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StackFrame_method_getFileLineNo__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StackFrame* This = dmi_cast<StackFrame>(This_);
  ret = This->getFileLineNo();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StackFrame_method_getFileName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StackFrame* This = dmi_cast<StackFrame>(This_);
    ret = (::acdk::lang::RObject)This->getFileName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StackFrame_method_getFunctionSignature__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StackFrame* This = dmi_cast<StackFrame>(This_);
    ret = (::acdk::lang::RObject)This->getFunctionSignature();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StackFrame_method_getLibraryName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StackFrame* This = dmi_cast<StackFrame>(This_);
    ret = (::acdk::lang::RObject)This->getLibraryName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StackFrame_method_getLocals__LRStackFrameLocalArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StackFrame* This = dmi_cast<StackFrame>(This_);
    ret = (::acdk::lang::RObject)This->getLocals();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StackFrame_method_getMethod__Lacdk_lang_reflect_RMethod__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StackFrame* This = dmi_cast<StackFrame>(This_);
    ret = (::acdk::lang::RObject)This->getMethod();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StackFrame_method_hasCurrentSourceLine__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StackFrame* This = dmi_cast<StackFrame>(This_);
  ret = This->hasCurrentSourceLine();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StackFrame_method_hasFileAndLine__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StackFrame* This = dmi_cast<StackFrame>(This_);
  ret = This->hasFileAndLine();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StackFrame_method_hasFunctionSignature__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StackFrame* This = dmi_cast<StackFrame>(This_);
  ret = This->hasFunctionSignature();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StackFrame_method_hasLibararyName__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StackFrame* This = dmi_cast<StackFrame>(This_);
  ret = This->hasLibararyName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StackFrame_method_hasLocals__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StackFrame* This = dmi_cast<StackFrame>(This_);
  ret = This->hasLocals();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StackFrame_method_hasMethod__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StackFrame* This = dmi_cast<StackFrame>(This_);
  ret = This->hasMethod();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StackFrame_method_isNative__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StackFrame* This = dmi_cast<StackFrame>(This_);
  ret = This->isNative();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _StackFrame_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* StackFrame_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StackFrame_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StackFrame_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_e_GetClass", // alternative name of method
  -1, // altlabelHashCode
  StackFrame_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  StackFrame_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  StackFrame_MetainfoWrapper::StackFrame_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StackFrame_methods_getCurrentSourceLine__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StackFrame_methods_getCurrentSourceLine__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StackFrame_method_getCurrentSourceLine__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCurrentSourceLine", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_a_getCurrentSourceLine", // alternative name of method
  -1, // altlabelHashCode
  StackFrame_methods_getCurrentSourceLine__LRString__args, // the arguments
  0, //arguments count
  StackFrame_methods_getCurrentSourceLine__LRString__exceptions, // the declared exceptions
  StackFrame_MetainfoWrapper::StackFrame_method_getCurrentSourceLine__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StackFrame_methods_getFileLineNo__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StackFrame_methods_getFileLineNo__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StackFrame_method_getFileLineNo__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFileLineNo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_getFileLineNo", // alternative name of method
  -1, // altlabelHashCode
  StackFrame_methods_getFileLineNo__I_args, // the arguments
  0, //arguments count
  StackFrame_methods_getFileLineNo__I_exceptions, // the declared exceptions
  StackFrame_MetainfoWrapper::StackFrame_method_getFileLineNo__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StackFrame_methods_getFileName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StackFrame_methods_getFileName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StackFrame_method_getFileName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFileName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_8_getFileName", // alternative name of method
  -1, // altlabelHashCode
  StackFrame_methods_getFileName__LRString__args, // the arguments
  0, //arguments count
  StackFrame_methods_getFileName__LRString__exceptions, // the declared exceptions
  StackFrame_MetainfoWrapper::StackFrame_method_getFileName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StackFrame_methods_getFunctionSignature__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StackFrame_methods_getFunctionSignature__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StackFrame_method_getFunctionSignature__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFunctionSignature", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_9_getFunctionSignature", // alternative name of method
  -1, // altlabelHashCode
  StackFrame_methods_getFunctionSignature__LRString__args, // the arguments
  0, //arguments count
  StackFrame_methods_getFunctionSignature__LRString__exceptions, // the declared exceptions
  StackFrame_MetainfoWrapper::StackFrame_method_getFunctionSignature__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StackFrame_methods_getLibraryName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StackFrame_methods_getLibraryName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StackFrame_method_getLibraryName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLibraryName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_b_getLibraryName", // alternative name of method
  -1, // altlabelHashCode
  StackFrame_methods_getLibraryName__LRString__args, // the arguments
  0, //arguments count
  StackFrame_methods_getLibraryName__LRString__exceptions, // the declared exceptions
  StackFrame_MetainfoWrapper::StackFrame_method_getLibraryName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StackFrame_methods_getLocals__LRStackFrameLocalArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StackFrame_methods_getLocals__LRStackFrameLocalArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StackFrame_method_getLocals__LRStackFrameLocalArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLocals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStackFrameLocalArray::clazzInfo(), // return type
  "_d_getLocals", // alternative name of method
  -1, // altlabelHashCode
  StackFrame_methods_getLocals__LRStackFrameLocalArray__args, // the arguments
  0, //arguments count
  StackFrame_methods_getLocals__LRStackFrameLocalArray__exceptions, // the declared exceptions
  StackFrame_MetainfoWrapper::StackFrame_method_getLocals__LRStackFrameLocalArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StackFrame_methods_getMethod__Lacdk_lang_reflect_RMethod__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StackFrame_methods_getMethod__Lacdk_lang_reflect_RMethod__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StackFrame_method_getMethod__Lacdk_lang_reflect_RMethod_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMethod", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::reflect::RMethod::clazzInfo(), // return type
  "_c_getMethod", // alternative name of method
  -1, // altlabelHashCode
  StackFrame_methods_getMethod__Lacdk_lang_reflect_RMethod__args, // the arguments
  0, //arguments count
  StackFrame_methods_getMethod__Lacdk_lang_reflect_RMethod__exceptions, // the declared exceptions
  StackFrame_MetainfoWrapper::StackFrame_method_getMethod__Lacdk_lang_reflect_RMethod__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StackFrame_methods_hasCurrentSourceLine__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StackFrame_methods_hasCurrentSourceLine__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StackFrame_method_hasCurrentSourceLine__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasCurrentSourceLine", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_hasCurrentSourceLine", // alternative name of method
  -1, // altlabelHashCode
  StackFrame_methods_hasCurrentSourceLine__Z_args, // the arguments
  0, //arguments count
  StackFrame_methods_hasCurrentSourceLine__Z_exceptions, // the declared exceptions
  StackFrame_MetainfoWrapper::StackFrame_method_hasCurrentSourceLine__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StackFrame_methods_hasFileAndLine__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StackFrame_methods_hasFileAndLine__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StackFrame_method_hasFileAndLine__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasFileAndLine", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_0_hasFileAndLine", // alternative name of method
  -1, // altlabelHashCode
  StackFrame_methods_hasFileAndLine__Z_args, // the arguments
  0, //arguments count
  StackFrame_methods_hasFileAndLine__Z_exceptions, // the declared exceptions
  StackFrame_MetainfoWrapper::StackFrame_method_hasFileAndLine__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StackFrame_methods_hasFunctionSignature__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StackFrame_methods_hasFunctionSignature__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StackFrame_method_hasFunctionSignature__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasFunctionSignature", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_hasFunctionSignature", // alternative name of method
  -1, // altlabelHashCode
  StackFrame_methods_hasFunctionSignature__Z_args, // the arguments
  0, //arguments count
  StackFrame_methods_hasFunctionSignature__Z_exceptions, // the declared exceptions
  StackFrame_MetainfoWrapper::StackFrame_method_hasFunctionSignature__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StackFrame_methods_hasLibararyName__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StackFrame_methods_hasLibararyName__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StackFrame_method_hasLibararyName__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasLibararyName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_hasLibararyName", // alternative name of method
  -1, // altlabelHashCode
  StackFrame_methods_hasLibararyName__Z_args, // the arguments
  0, //arguments count
  StackFrame_methods_hasLibararyName__Z_exceptions, // the declared exceptions
  StackFrame_MetainfoWrapper::StackFrame_method_hasLibararyName__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StackFrame_methods_hasLocals__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StackFrame_methods_hasLocals__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StackFrame_method_hasLocals__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasLocals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_hasLocals", // alternative name of method
  -1, // altlabelHashCode
  StackFrame_methods_hasLocals__Z_args, // the arguments
  0, //arguments count
  StackFrame_methods_hasLocals__Z_exceptions, // the declared exceptions
  StackFrame_MetainfoWrapper::StackFrame_method_hasLocals__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StackFrame_methods_hasMethod__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StackFrame_methods_hasMethod__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StackFrame_method_hasMethod__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasMethod", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_hasMethod", // alternative name of method
  -1, // altlabelHashCode
  StackFrame_methods_hasMethod__Z_args, // the arguments
  0, //arguments count
  StackFrame_methods_hasMethod__Z_exceptions, // the declared exceptions
  StackFrame_MetainfoWrapper::StackFrame_method_hasMethod__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StackFrame_methods_isNative__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StackFrame_methods_isNative__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StackFrame_method_isNative__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isNative", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_isNative", // alternative name of method
  -1, // altlabelHashCode
  StackFrame_methods_isNative__Z_args, // the arguments
  0, //arguments count
  StackFrame_methods_isNative__Z_exceptions, // the declared exceptions
  StackFrame_MetainfoWrapper::StackFrame_method_isNative__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _StackFrame_methods[] = 
{
  &StackFrame_method_GetClass__L_acdk_lang_RClass_,
  &StackFrame_method_getCurrentSourceLine__LRString_,
  &StackFrame_method_getFileLineNo__I,
  &StackFrame_method_getFileName__LRString_,
  &StackFrame_method_getFunctionSignature__LRString_,
  &StackFrame_method_getLibraryName__LRString_,
  &StackFrame_method_getLocals__LRStackFrameLocalArray_,
  &StackFrame_method_getMethod__Lacdk_lang_reflect_RMethod_,
  &StackFrame_method_hasCurrentSourceLine__Z,
  &StackFrame_method_hasFileAndLine__Z,
  &StackFrame_method_hasFunctionSignature__Z,
  &StackFrame_method_hasLibararyName__Z,
  &StackFrame_method_hasLocals__Z,
  &StackFrame_method_hasMethod__Z,
  &StackFrame_method_isNative__Z,
  0
};


struct StackFrame_MetaInfoInitializer
{  StackFrame_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = StackFrame::clazzInfo();
    ci->fields =  _StackFrame_fields;
    ci->methods =  _StackFrame_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
StackFrame_MetaInfoInitializer StackFrame_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
NativeStackFrame_create_array(int length)
{
  return new ObjectArrayImpl<RNativeStackFrame>(length);
}

//static
::acdk::lang::RObject
NativeStackFrame_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class NativeStackFrame_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NativeStackFrame_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)NativeStackFrame::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NativeStackFrame_method_NativeStackFrame__LRNativeStackFrame__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NativeStackFrame();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NativeStackFrame_method_NativeStackFrame_IINLRString_INLRString__LRNativeStackFrame__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NativeStackFrame(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NativeStackFrame_method_getCurrentSourceLine__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NativeStackFrame* This = dmi_cast<NativeStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->NativeStackFrame::getCurrentSourceLine();
    else
        ret = (::acdk::lang::RObject)This->getCurrentSourceLine();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NativeStackFrame_method_getFileLineNo__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NativeStackFrame* This = dmi_cast<NativeStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->NativeStackFrame::getFileLineNo();
    else
      ret = This->getFileLineNo();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NativeStackFrame_method_getFileName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NativeStackFrame* This = dmi_cast<NativeStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->NativeStackFrame::getFileName();
    else
        ret = (::acdk::lang::RObject)This->getFileName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NativeStackFrame_method_getFunctionSignature__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NativeStackFrame* This = dmi_cast<NativeStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->NativeStackFrame::getFunctionSignature();
    else
        ret = (::acdk::lang::RObject)This->getFunctionSignature();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NativeStackFrame_method_getLibraryName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NativeStackFrame* This = dmi_cast<NativeStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->NativeStackFrame::getLibraryName();
    else
        ret = (::acdk::lang::RObject)This->getLibraryName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NativeStackFrame_method_getLocals__LRStackFrameLocalArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NativeStackFrame* This = dmi_cast<NativeStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->NativeStackFrame::getLocals();
    else
        ret = (::acdk::lang::RObject)This->getLocals();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NativeStackFrame_method_getMethod__Lacdk_lang_reflect_RMethod__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NativeStackFrame* This = dmi_cast<NativeStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->NativeStackFrame::getMethod();
    else
        ret = (::acdk::lang::RObject)This->getMethod();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NativeStackFrame_method_hasCurrentSourceLine__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NativeStackFrame* This = dmi_cast<NativeStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->NativeStackFrame::hasCurrentSourceLine();
    else
      ret = This->hasCurrentSourceLine();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NativeStackFrame_method_hasFileAndLine__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NativeStackFrame* This = dmi_cast<NativeStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->NativeStackFrame::hasFileAndLine();
    else
      ret = This->hasFileAndLine();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NativeStackFrame_method_hasFunctionSignature__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NativeStackFrame* This = dmi_cast<NativeStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->NativeStackFrame::hasFunctionSignature();
    else
      ret = This->hasFunctionSignature();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NativeStackFrame_method_hasLibararyName__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NativeStackFrame* This = dmi_cast<NativeStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->NativeStackFrame::hasLibararyName();
    else
      ret = This->hasLibararyName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NativeStackFrame_method_hasLocals__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NativeStackFrame* This = dmi_cast<NativeStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->NativeStackFrame::hasLocals();
    else
      ret = This->hasLocals();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NativeStackFrame_method_hasMethod__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NativeStackFrame* This = dmi_cast<NativeStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->NativeStackFrame::hasMethod();
    else
      ret = This->hasMethod();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NativeStackFrame_method_isNative__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NativeStackFrame* This = dmi_cast<NativeStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->NativeStackFrame::isNative();
    else
      ret = This->isNative();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  NativeStackFrame_fields__functionName_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    NativeStackFrame* This = dmi_cast<NativeStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_functionName, flags);
    else
      This->_functionName = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  NativeStackFrame_fields__libraryName_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    NativeStackFrame* This = dmi_cast<NativeStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_libraryName, flags);
    else
      This->_libraryName = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  NativeStackFrame_fields__programCounter_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    NativeStackFrame* This = dmi_cast<NativeStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_programCounter, flags);
    else
      This->_programCounter = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo NativeStackFrame_fields__functionName = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_functionName", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  NativeStackFrame_MetainfoWrapper::NativeStackFrame_fields__functionName_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo NativeStackFrame_fields__libraryName = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_libraryName", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  NativeStackFrame_MetainfoWrapper::NativeStackFrame_fields__libraryName_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo NativeStackFrame_fields__programCounter = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_programCounter", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  NativeStackFrame_MetainfoWrapper::NativeStackFrame_fields__programCounter_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _NativeStackFrame_fields[] = 
{
  &NativeStackFrame_fields__functionName,
  &NativeStackFrame_fields__libraryName,
  &NativeStackFrame_fields__programCounter,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* NativeStackFrame_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NativeStackFrame_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NativeStackFrame_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_g_GetClass", // alternative name of method
  -1, // altlabelHashCode
  NativeStackFrame_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  NativeStackFrame_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  NativeStackFrame_MetainfoWrapper::NativeStackFrame_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NativeStackFrame_methods_NativeStackFrame__LRNativeStackFrame__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NativeStackFrame_methods_NativeStackFrame__LRNativeStackFrame__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NativeStackFrame_method_NativeStackFrame__LRNativeStackFrame_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NativeStackFrame", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NativeStackFrame::clazzInfo(), // return type
  "_0_NativeStackFrame", // alternative name of method
  -1, // altlabelHashCode
  NativeStackFrame_methods_NativeStackFrame__LRNativeStackFrame__args, // the arguments
  0, //arguments count
  NativeStackFrame_methods_NativeStackFrame__LRNativeStackFrame__exceptions, // the declared exceptions
  NativeStackFrame_MetainfoWrapper::NativeStackFrame_method_NativeStackFrame__LRNativeStackFrame__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NativeStackFrame_methods_NativeStackFrame_IINLRString_INLRString__LRNativeStackFrame__arg_pc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NativeStackFrame_methods_NativeStackFrame_IINLRString_INLRString__LRNativeStackFrame__arg_funcName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "funcName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NativeStackFrame_methods_NativeStackFrame_IINLRString_INLRString__LRNativeStackFrame__arg_libName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "libName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NativeStackFrame_methods_NativeStackFrame_IINLRString_INLRString__LRNativeStackFrame__args[] = 
{
  &NativeStackFrame_methods_NativeStackFrame_IINLRString_INLRString__LRNativeStackFrame__arg_pc,
  &NativeStackFrame_methods_NativeStackFrame_IINLRString_INLRString__LRNativeStackFrame__arg_funcName,
  &NativeStackFrame_methods_NativeStackFrame_IINLRString_INLRString__LRNativeStackFrame__arg_libName,
  0
};

::acdk::lang::dmi::ClazzInfo* NativeStackFrame_methods_NativeStackFrame_IINLRString_INLRString__LRNativeStackFrame__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NativeStackFrame_method_NativeStackFrame_IINLRString_INLRString__LRNativeStackFrame_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NativeStackFrame", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NativeStackFrame::clazzInfo(), // return type
  "_1_NativeStackFrame", // alternative name of method
  -1, // altlabelHashCode
  NativeStackFrame_methods_NativeStackFrame_IINLRString_INLRString__LRNativeStackFrame__args, // the arguments
  0, //arguments count
  NativeStackFrame_methods_NativeStackFrame_IINLRString_INLRString__LRNativeStackFrame__exceptions, // the declared exceptions
  NativeStackFrame_MetainfoWrapper::NativeStackFrame_method_NativeStackFrame_IINLRString_INLRString__LRNativeStackFrame__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NativeStackFrame_methods_getCurrentSourceLine__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NativeStackFrame_methods_getCurrentSourceLine__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NativeStackFrame_method_getCurrentSourceLine__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCurrentSourceLine", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_c_getCurrentSourceLine", // alternative name of method
  -1, // altlabelHashCode
  NativeStackFrame_methods_getCurrentSourceLine__LRString__args, // the arguments
  0, //arguments count
  NativeStackFrame_methods_getCurrentSourceLine__LRString__exceptions, // the declared exceptions
  NativeStackFrame_MetainfoWrapper::NativeStackFrame_method_getCurrentSourceLine__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NativeStackFrame_methods_getFileLineNo__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NativeStackFrame_methods_getFileLineNo__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NativeStackFrame_method_getFileLineNo__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFileLineNo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_9_getFileLineNo", // alternative name of method
  -1, // altlabelHashCode
  NativeStackFrame_methods_getFileLineNo__I_args, // the arguments
  0, //arguments count
  NativeStackFrame_methods_getFileLineNo__I_exceptions, // the declared exceptions
  NativeStackFrame_MetainfoWrapper::NativeStackFrame_method_getFileLineNo__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NativeStackFrame_methods_getFileName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NativeStackFrame_methods_getFileName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NativeStackFrame_method_getFileName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFileName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_a_getFileName", // alternative name of method
  -1, // altlabelHashCode
  NativeStackFrame_methods_getFileName__LRString__args, // the arguments
  0, //arguments count
  NativeStackFrame_methods_getFileName__LRString__exceptions, // the declared exceptions
  NativeStackFrame_MetainfoWrapper::NativeStackFrame_method_getFileName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NativeStackFrame_methods_getFunctionSignature__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NativeStackFrame_methods_getFunctionSignature__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NativeStackFrame_method_getFunctionSignature__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFunctionSignature", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_b_getFunctionSignature", // alternative name of method
  -1, // altlabelHashCode
  NativeStackFrame_methods_getFunctionSignature__LRString__args, // the arguments
  0, //arguments count
  NativeStackFrame_methods_getFunctionSignature__LRString__exceptions, // the declared exceptions
  NativeStackFrame_MetainfoWrapper::NativeStackFrame_method_getFunctionSignature__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NativeStackFrame_methods_getLibraryName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NativeStackFrame_methods_getLibraryName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NativeStackFrame_method_getLibraryName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLibraryName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_d_getLibraryName", // alternative name of method
  -1, // altlabelHashCode
  NativeStackFrame_methods_getLibraryName__LRString__args, // the arguments
  0, //arguments count
  NativeStackFrame_methods_getLibraryName__LRString__exceptions, // the declared exceptions
  NativeStackFrame_MetainfoWrapper::NativeStackFrame_method_getLibraryName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NativeStackFrame_methods_getLocals__LRStackFrameLocalArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NativeStackFrame_methods_getLocals__LRStackFrameLocalArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NativeStackFrame_method_getLocals__LRStackFrameLocalArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLocals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStackFrameLocalArray::clazzInfo(), // return type
  "_e_getLocals", // alternative name of method
  -1, // altlabelHashCode
  NativeStackFrame_methods_getLocals__LRStackFrameLocalArray__args, // the arguments
  0, //arguments count
  NativeStackFrame_methods_getLocals__LRStackFrameLocalArray__exceptions, // the declared exceptions
  NativeStackFrame_MetainfoWrapper::NativeStackFrame_method_getLocals__LRStackFrameLocalArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NativeStackFrame_methods_getMethod__Lacdk_lang_reflect_RMethod__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NativeStackFrame_methods_getMethod__Lacdk_lang_reflect_RMethod__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NativeStackFrame_method_getMethod__Lacdk_lang_reflect_RMethod_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMethod", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::reflect::RMethod::clazzInfo(), // return type
  "_f_getMethod", // alternative name of method
  -1, // altlabelHashCode
  NativeStackFrame_methods_getMethod__Lacdk_lang_reflect_RMethod__args, // the arguments
  0, //arguments count
  NativeStackFrame_methods_getMethod__Lacdk_lang_reflect_RMethod__exceptions, // the declared exceptions
  NativeStackFrame_MetainfoWrapper::NativeStackFrame_method_getMethod__Lacdk_lang_reflect_RMethod__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NativeStackFrame_methods_hasCurrentSourceLine__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NativeStackFrame_methods_hasCurrentSourceLine__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NativeStackFrame_method_hasCurrentSourceLine__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasCurrentSourceLine", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_hasCurrentSourceLine", // alternative name of method
  -1, // altlabelHashCode
  NativeStackFrame_methods_hasCurrentSourceLine__Z_args, // the arguments
  0, //arguments count
  NativeStackFrame_methods_hasCurrentSourceLine__Z_exceptions, // the declared exceptions
  NativeStackFrame_MetainfoWrapper::NativeStackFrame_method_hasCurrentSourceLine__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NativeStackFrame_methods_hasFileAndLine__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NativeStackFrame_methods_hasFileAndLine__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NativeStackFrame_method_hasFileAndLine__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasFileAndLine", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_hasFileAndLine", // alternative name of method
  -1, // altlabelHashCode
  NativeStackFrame_methods_hasFileAndLine__Z_args, // the arguments
  0, //arguments count
  NativeStackFrame_methods_hasFileAndLine__Z_exceptions, // the declared exceptions
  NativeStackFrame_MetainfoWrapper::NativeStackFrame_method_hasFileAndLine__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NativeStackFrame_methods_hasFunctionSignature__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NativeStackFrame_methods_hasFunctionSignature__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NativeStackFrame_method_hasFunctionSignature__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasFunctionSignature", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_hasFunctionSignature", // alternative name of method
  -1, // altlabelHashCode
  NativeStackFrame_methods_hasFunctionSignature__Z_args, // the arguments
  0, //arguments count
  NativeStackFrame_methods_hasFunctionSignature__Z_exceptions, // the declared exceptions
  NativeStackFrame_MetainfoWrapper::NativeStackFrame_method_hasFunctionSignature__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NativeStackFrame_methods_hasLibararyName__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NativeStackFrame_methods_hasLibararyName__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NativeStackFrame_method_hasLibararyName__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasLibararyName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_hasLibararyName", // alternative name of method
  -1, // altlabelHashCode
  NativeStackFrame_methods_hasLibararyName__Z_args, // the arguments
  0, //arguments count
  NativeStackFrame_methods_hasLibararyName__Z_exceptions, // the declared exceptions
  NativeStackFrame_MetainfoWrapper::NativeStackFrame_method_hasLibararyName__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NativeStackFrame_methods_hasLocals__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NativeStackFrame_methods_hasLocals__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NativeStackFrame_method_hasLocals__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasLocals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_hasLocals", // alternative name of method
  -1, // altlabelHashCode
  NativeStackFrame_methods_hasLocals__Z_args, // the arguments
  0, //arguments count
  NativeStackFrame_methods_hasLocals__Z_exceptions, // the declared exceptions
  NativeStackFrame_MetainfoWrapper::NativeStackFrame_method_hasLocals__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NativeStackFrame_methods_hasMethod__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NativeStackFrame_methods_hasMethod__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NativeStackFrame_method_hasMethod__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasMethod", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_hasMethod", // alternative name of method
  -1, // altlabelHashCode
  NativeStackFrame_methods_hasMethod__Z_args, // the arguments
  0, //arguments count
  NativeStackFrame_methods_hasMethod__Z_exceptions, // the declared exceptions
  NativeStackFrame_MetainfoWrapper::NativeStackFrame_method_hasMethod__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NativeStackFrame_methods_isNative__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NativeStackFrame_methods_isNative__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NativeStackFrame_method_isNative__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isNative", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_8_isNative", // alternative name of method
  -1, // altlabelHashCode
  NativeStackFrame_methods_isNative__Z_args, // the arguments
  0, //arguments count
  NativeStackFrame_methods_isNative__Z_exceptions, // the declared exceptions
  NativeStackFrame_MetainfoWrapper::NativeStackFrame_method_isNative__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _NativeStackFrame_methods[] = 
{
  &NativeStackFrame_method_GetClass__L_acdk_lang_RClass_,
  &NativeStackFrame_method_NativeStackFrame__LRNativeStackFrame_,
  &NativeStackFrame_method_NativeStackFrame_IINLRString_INLRString__LRNativeStackFrame_,
  &NativeStackFrame_method_getCurrentSourceLine__LRString_,
  &NativeStackFrame_method_getFileLineNo__I,
  &NativeStackFrame_method_getFileName__LRString_,
  &NativeStackFrame_method_getFunctionSignature__LRString_,
  &NativeStackFrame_method_getLibraryName__LRString_,
  &NativeStackFrame_method_getLocals__LRStackFrameLocalArray_,
  &NativeStackFrame_method_getMethod__Lacdk_lang_reflect_RMethod_,
  &NativeStackFrame_method_hasCurrentSourceLine__Z,
  &NativeStackFrame_method_hasFileAndLine__Z,
  &NativeStackFrame_method_hasFunctionSignature__Z,
  &NativeStackFrame_method_hasLibararyName__Z,
  &NativeStackFrame_method_hasLocals__Z,
  &NativeStackFrame_method_hasMethod__Z,
  &NativeStackFrame_method_isNative__Z,
  0
};


struct NativeStackFrame_MetaInfoInitializer
{  NativeStackFrame_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = NativeStackFrame::clazzInfo();
    ci->fields =  _NativeStackFrame_fields;
    ci->methods =  _NativeStackFrame_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
NativeStackFrame_MetaInfoInitializer NativeStackFrame_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
String_create_array(int length)
{
  return new ObjectArrayImpl<RString>(length);
}

//static
::acdk::lang::RObject
String_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class String_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)String::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_String_INLRbyteArray_II_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new String(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_String_INLRbyteArray__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new String(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_String_INLRbyteArray_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new String(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_String_INLRbyteArray_INLacdk_locale_RDecoder_II_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new String(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< acdk::locale::RDecoder>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_String_INLRbyteArray_INLacdk_locale_RDecoder__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new String(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< acdk::locale::RDecoder>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_String_INLRbyteArray_INLacdk_locale_RDecoder_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new String(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< acdk::locale::RDecoder>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_String_INLRcharArray_II_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new String(::acdk::lang::dmi::castTo< RcharArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_String_INLRcharArray__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new String(::acdk::lang::dmi::castTo< RcharArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_String_INLRString_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new String(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_String_INLRStringBuffer_II_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new String(::acdk::lang::dmi::castTo< RStringBuffer>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_String_INLRStringBuffer__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new String(::acdk::lang::dmi::castTo< RStringBuffer>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_String_INLRStringBuffer_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new String(::acdk::lang::dmi::castTo< RStringBuffer>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_String_INLRString_II_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new String(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_String_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new String(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_String__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new String();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_String_INLRcharArray_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new String(::acdk::lang::dmi::castTo< RcharArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_String_INLRuccharArray_II_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new String(::acdk::lang::dmi::castTo< RuccharArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_String_INLRuccharArray__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new String(::acdk::lang::dmi::castTo< RuccharArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_String_INLRuccharArray_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new String(::acdk::lang::dmi::castTo< RuccharArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method__itoa_II_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)String::_itoa(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method__jltoa_JI_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)String::_jltoa(::acdk::lang::dmi::castTo< jlong>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_center_ILuc2char__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::center(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< uc2char>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->center(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< uc2char>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_center_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::center(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->center(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_charAt_I_Luc2char__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->String::charAt(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->charAt(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_characterClass__LCharacterClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = (CharacterClass)This->String::characterClass();
    else
      ret = (CharacterClass)This->characterClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_compareTo_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->String::compareTo(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
      ret = This->compareTo(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_compareToIgnoreCase_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->String::compareToIgnoreCase(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
      ret = This->compareToIgnoreCase(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_concat_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::concat(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->concat(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_contains_INLRString_Luc2char__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = String::contains(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< uc2char>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_contains_INLRString_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = String::contains(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_containsNone_INLRString_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = String::containsNone(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_containsOnly_INLRString_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = String::containsOnly(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_convert_III_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::convert(::acdk::lang::dmi::castTo< int>(args[0], dc), (acdk::locale::CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[1], dc), (acdk::locale::CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[2], dc));
    else
        ret = (::acdk::lang::RObject)This->convert(::acdk::lang::dmi::castTo< int>(args[0], dc), (acdk::locale::CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[1], dc), (acdk::locale::CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_convert_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::convert(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->convert(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_convertToNative__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::convertToNative();
    else
        ret = (::acdk::lang::RObject)This->convertToNative();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_copyValueOf_INLRcharArray_II_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)String::copyValueOf(::acdk::lang::dmi::castTo< RcharArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_copyValueOf_INLRcharArray__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)String::copyValueOf(::acdk::lang::dmi::castTo< RcharArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_copyValueOf_INLRcharArray_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)String::copyValueOf(::acdk::lang::dmi::castTo< RcharArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_create_instance__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)String::create_instance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_decodeAscUnicode__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::decodeAscUnicode();
    else
        ret = (::acdk::lang::RObject)This->decodeAscUnicode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_defaultString_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)String::defaultString(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_defaultString_INLRString_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)String::defaultString(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_deleteWhitespace_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)String::deleteWhitespace(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_elementCount_C_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->String::elementCount(::acdk::lang::dmi::castTo< char>(args[0], dc));
    else
      ret = This->elementCount(::acdk::lang::dmi::castTo< char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_elementCount_Luc2char__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->String::elementCount(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    else
      ret = This->elementCount(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_elementCount_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->String::elementCount(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
      ret = This->elementCount(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_emptyString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = outOf(String::emptyString());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_encodeAscUnicode__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::encodeAscUnicode();
    else
        ret = (::acdk::lang::RObject)This->encodeAscUnicode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_endsWith_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->String::endsWith(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
      ret = This->endsWith(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_equals_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->String::equals(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_equalsIgnoreCase_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->String::equalsIgnoreCase(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
      ret = This->equalsIgnoreCase(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_getBytes__LRbyteArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::getBytes();
    else
        ret = (::acdk::lang::RObject)This->getBytes();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_getBytes_INLRString__LRbyteArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::getBytes(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getBytes(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_getBytes_INLacdk_locale_REncoder__LRbyteArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::getBytes(::acdk::lang::dmi::castTo< acdk::locale::REncoder>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getBytes(::acdk::lang::dmi::castTo< acdk::locale::REncoder>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_getCharCapacity__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->String::getCharCapacity();
    else
      ret = This->getCharCapacity();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_getChars__LRcharArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::getChars();
    else
        ret = (::acdk::lang::RObject)This->getChars();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_getChars_IIINLRcharArray_IINLacdk_locale_REncoder__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->String::getChars(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< RcharArray>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc), ::acdk::lang::dmi::castTo< acdk::locale::REncoder>(args[4], dc));
    else
        This->getChars(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< RcharArray>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc), ::acdk::lang::dmi::castTo< acdk::locale::REncoder>(args[4], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_getChars_INLacdk_locale_REncoder__LRcharArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::getChars(::acdk::lang::dmi::castTo< acdk::locale::REncoder>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getChars(::acdk::lang::dmi::castTo< acdk::locale::REncoder>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_getDistance_INLRString_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = String::getDistance(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_getEmptyString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)String::getEmptyString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_getFirstIndexOf_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->String::getFirstIndexOf(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
      ret = This->getFirstIndexOf(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_getMaxCharacterSize__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->String::getMaxCharacterSize();
    else
      ret = This->getMaxCharacterSize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_getNormalized__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::getNormalized();
    else
        ret = (::acdk::lang::RObject)This->getNormalized();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_getUc2Chars_IIINLRuccharArray_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->String::getUc2Chars(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< RuccharArray>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc));
    else
        This->getUc2Chars(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< RuccharArray>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_getUcChars__LRuccharArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::getUcChars();
    else
        ret = (::acdk::lang::RObject)This->getUcChars();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_indexOf_CI_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->String::indexOf(::acdk::lang::dmi::castTo< char>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
      ret = This->indexOf(::acdk::lang::dmi::castTo< char>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_indexOf_C_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->String::indexOf(::acdk::lang::dmi::castTo< char>(args[0], dc));
    else
      ret = This->indexOf(::acdk::lang::dmi::castTo< char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_indexOf_Luc2char_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->String::indexOf(::acdk::lang::dmi::castTo< uc2char>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
      ret = This->indexOf(::acdk::lang::dmi::castTo< uc2char>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_indexOf_Luc2char__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->String::indexOf(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    else
      ret = This->indexOf(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_indexOf_INLRString_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->String::indexOf(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
      ret = This->indexOf(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_indexOf_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->String::indexOf(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
      ret = This->indexOf(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_indexOfAny_INLRString_INLRuccharArray__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = String::indexOfAny(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RuccharArray>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_indexOfAny_INLRString_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = String::indexOfAny(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_indexOfAny_INLRString_INLRStringArray__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = String::indexOfAny(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RStringArray>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_indexOfDifference_INLRString_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = String::indexOfDifference(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_intern__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::intern();
    else
        ret = (::acdk::lang::RObject)This->intern();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_isAlpha_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = String::isAlpha(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_isAlphaSpace_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = String::isAlphaSpace(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_isAlphanumeric_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = String::isAlphanumeric(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_isAlphanumericSpace_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = String::isAlphanumericSpace(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_isBlank_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = String::isBlank(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_isCChar__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->String::isCChar();
    else
      ret = This->isCChar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_isCharacterClass_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->String::isCharacterClass((CharacterClass)::acdk::lang::dmi::castTo<int>(args[0], dc));
    else
      ret = This->isCharacterClass((CharacterClass)::acdk::lang::dmi::castTo<int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_isEmpty_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = String::isEmpty(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_isLowerCase__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->String::isLowerCase();
    else
      ret = This->isLowerCase();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_isNotBlank_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = String::isNotBlank(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_isNotEmpty_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = String::isNotEmpty(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_isNumeric_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = String::isNumeric(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_isNumericSpace_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = String::isNumericSpace(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_isUc2Char__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->String::isUc2Char();
    else
      ret = This->isUc2Char();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_isUc4Char__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->String::isUc4Char();
    else
      ret = This->isUc4Char();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_isUpperCase__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->String::isUpperCase();
    else
      ret = This->isUpperCase();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_isUtf8Char__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->String::isUtf8Char();
    else
      ret = This->isUtf8Char();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_join_INLacdk_util_RIterator__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)String::join(::acdk::lang::dmi::castTo< acdk::util::RIterator>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_join_INLacdk_util_RIterator_Luc2char__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)String::join(::acdk::lang::dmi::castTo< acdk::util::RIterator>(args[0], dc), ::acdk::lang::dmi::castTo< uc2char>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_join_INLacdk_util_RIterator_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)String::join(::acdk::lang::dmi::castTo< acdk::util::RIterator>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_join_INLRObjectArray__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)String::join(::acdk::lang::dmi::castTo< RObjectArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_join_INLRObjectArray_Luc2char__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)String::join(::acdk::lang::dmi::castTo< RObjectArray>(args[0], dc), ::acdk::lang::dmi::castTo< uc2char>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_join_INLRObjectArray_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)String::join(::acdk::lang::dmi::castTo< RObjectArray>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_lastIndexOf_CI_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->String::lastIndexOf(::acdk::lang::dmi::castTo< char>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
      ret = This->lastIndexOf(::acdk::lang::dmi::castTo< char>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_lastIndexOf_C_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->String::lastIndexOf(::acdk::lang::dmi::castTo< char>(args[0], dc));
    else
      ret = This->lastIndexOf(::acdk::lang::dmi::castTo< char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_lastIndexOf_Luc2char_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->String::lastIndexOf(::acdk::lang::dmi::castTo< uc2char>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
      ret = This->lastIndexOf(::acdk::lang::dmi::castTo< uc2char>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_lastIndexOf_Luc2char__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->String::lastIndexOf(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    else
      ret = This->lastIndexOf(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_lastIndexOf_INLRString_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->String::lastIndexOf(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
      ret = This->lastIndexOf(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_lastIndexOf_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->String::lastIndexOf(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
      ret = This->lastIndexOf(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_lastIndexOfAny_INLRString_INLRStringArray__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = String::lastIndexOfAny(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RStringArray>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_lastIndexOfAny_INLRString_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = String::lastIndexOfAny(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_lastIndexOfAny_INLRString_INLRuccharArray__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = String::lastIndexOfAny(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RuccharArray>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_left_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::left(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->left(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_leftPad_ILuc2char__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::leftPad(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< uc2char>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->leftPad(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< uc2char>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_leftPad_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::leftPad(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->leftPad(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_length__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->String::length();
    else
      ret = This->length();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_mid_II_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::mid(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->mid(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_narrow__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::narrow();
    else
        ret = (::acdk::lang::RObject)This->narrow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_operator_pl_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::operator+(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator+(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_operator_pl_INLRObject__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::operator+(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator+(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_operator_pl_Z_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::operator+(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator+(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_operator_pl_C_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::operator+(::acdk::lang::dmi::castTo< char>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator+(::acdk::lang::dmi::castTo< char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_operator_pl_Luc2char__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::operator+(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator+(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_operator_pl_S_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::operator+(::acdk::lang::dmi::castTo< short>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator+(::acdk::lang::dmi::castTo< short>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_operator_pl_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::operator+(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator+(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_operator_pl_J_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::operator+(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator+(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_operator_pl_F_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::operator+(::acdk::lang::dmi::castTo< float>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator+(::acdk::lang::dmi::castTo< float>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_operator_pl_D_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::operator+(::acdk::lang::dmi::castTo< double>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->operator+(::acdk::lang::dmi::castTo< double>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_peekLine_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::peekLine(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->peekLine(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_regionMatches_IINLRString_IIZ_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->String::regionMatches(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc), ::acdk::lang::dmi::castTo< bool>(args[4], dc));
    else
      ret = This->regionMatches(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc), ::acdk::lang::dmi::castTo< bool>(args[4], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_regionMatches_IINLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->String::regionMatches(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    else
      ret = This->regionMatches(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_regionMatches_IINLRString_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->String::regionMatches(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    else
      ret = This->regionMatches(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_regionMatches_IINLRString_II_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->String::regionMatches(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc));
    else
      ret = This->regionMatches(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_repeat_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::repeat(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->repeat(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_replace_CC_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::replace(::acdk::lang::dmi::castTo< char>(args[0], dc), ::acdk::lang::dmi::castTo< char>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->replace(::acdk::lang::dmi::castTo< char>(args[0], dc), ::acdk::lang::dmi::castTo< char>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_replace_Luc2char_Luc2char__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::replace(::acdk::lang::dmi::castTo< uc2char>(args[0], dc), ::acdk::lang::dmi::castTo< uc2char>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->replace(::acdk::lang::dmi::castTo< uc2char>(args[0], dc), ::acdk::lang::dmi::castTo< uc2char>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_replace_INLRString_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::replace(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->replace(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_replace_IIINLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::replace(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc));
    else
        ret = (::acdk::lang::RObject)This->replace(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_right_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::right(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->right(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_rightPad_ILuc2char__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::rightPad(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< uc2char>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->rightPad(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< uc2char>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_rightPad_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::rightPad(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->rightPad(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_split__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::split();
    else
        ret = (::acdk::lang::RObject)This->split();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_split_Luc2char__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::split(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->split(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_split_INLRString__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::split(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->split(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_startsWith_INLRString_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->String::startsWith(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
      ret = This->startsWith(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_startsWith_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->String::startsWith(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
      ret = This->startsWith(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_storageType__LStringStorageType__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = (StringStorageType)This->String::storageType();
    else
      ret = (StringStorageType)This->storageType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_substr_II_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::substr(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->substr(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_substr_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::substr(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->substr(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_substring_II_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::substring(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->substring(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_substring_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::substring(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->substring(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_substringAfter_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::substringAfter(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->substringAfter(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_substringAfterLast_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::substringAfterLast(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->substringAfterLast(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_substringBefore_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::substringBefore(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->substringBefore(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_substringBeforeLast_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::substringBeforeLast(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->substringBeforeLast(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_toLowerCase__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::toLowerCase();
    else
        ret = (::acdk::lang::RObject)This->toLowerCase();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_toUpperCase__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::toUpperCase();
    else
        ret = (::acdk::lang::RObject)This->toUpperCase();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_tocharArray__LRcharArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::tocharArray();
    else
        ret = (::acdk::lang::RObject)This->tocharArray();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_trim_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::trim(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->trim(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_trim__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->String::trim();
    else
        ret = (::acdk::lang::RObject)This->trim();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_valueOf_Z_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)String::valueOf(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_valueOf_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)String::valueOf(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_valueOf_C_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)String::valueOf(::acdk::lang::dmi::castTo< char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_valueOf_Luc2char__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)String::valueOf(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_valueOf_J_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)String::valueOf(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_valueOf_INLRObject__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)String::valueOf(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_valueOf_F_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)String::valueOf(::acdk::lang::dmi::castTo< float>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  String_method_valueOf_D_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)String::valueOf(::acdk::lang::dmi::castTo< double>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  String_fields__bufferLength_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_bufferLength, flags);
    else
      This->_bufferLength = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  String_fields__hashCode_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    String* This = dmi_cast<String>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_hashCode, flags);
    else
      This->_hashCode = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo String_fields__bufferLength = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_bufferLength", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  String_MetainfoWrapper::String_fields__bufferLength_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo String_fields__hashCode = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_hashCode", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  String_MetainfoWrapper::String_fields__hashCode_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _String_fields[] = 
{
  &String_fields__bufferLength,
  &String_fields__hashCode,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2E_GetClass", // alternative name of method
  -1, // altlabelHashCode
  String_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  String_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_String_INLRbyteArray_II_LRString__arg_ba = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ba", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_String_INLRbyteArray_II_LRString__arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_String_INLRbyteArray_II_LRString__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_String_INLRbyteArray_II_LRString__args[] = 
{
  &String_methods_String_INLRbyteArray_II_LRString__arg_ba,
  &String_methods_String_INLRbyteArray_II_LRString__arg_offset,
  &String_methods_String_INLRbyteArray_II_LRString__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_String_INLRbyteArray_II_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_String_INLRbyteArray_II_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "String", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  String::clazzInfo(), // return type
  "_8_String", // alternative name of method
  -1, // altlabelHashCode
  String_methods_String_INLRbyteArray_II_LRString__args, // the arguments
  0, //arguments count
  String_methods_String_INLRbyteArray_II_LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_String_INLRbyteArray_II_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_String_INLRbyteArray__LRString__arg_ba = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ba", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_String_INLRbyteArray__LRString__args[] = 
{
  &String_methods_String_INLRbyteArray__LRString__arg_ba,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_String_INLRbyteArray__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_String_INLRbyteArray__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "String", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  String::clazzInfo(), // return type
  "_9_String", // alternative name of method
  -1, // altlabelHashCode
  String_methods_String_INLRbyteArray__LRString__args, // the arguments
  0, //arguments count
  String_methods_String_INLRbyteArray__LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_String_INLRbyteArray__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_String_INLRbyteArray_I_LRString__arg_ba = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ba", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_String_INLRbyteArray_I_LRString__arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_String_INLRbyteArray_I_LRString__args[] = 
{
  &String_methods_String_INLRbyteArray_I_LRString__arg_ba,
  &String_methods_String_INLRbyteArray_I_LRString__arg_offset,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_String_INLRbyteArray_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_String_INLRbyteArray_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "String", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  String::clazzInfo(), // return type
  "_a_String", // alternative name of method
  -1, // altlabelHashCode
  String_methods_String_INLRbyteArray_I_LRString__args, // the arguments
  0, //arguments count
  String_methods_String_INLRbyteArray_I_LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_String_INLRbyteArray_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_String_INLRbyteArray_INLacdk_locale_RDecoder_II_LRString__arg_ba = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ba", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_String_INLRbyteArray_INLacdk_locale_RDecoder_II_LRString__arg_decoder = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "decoder", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::RDecoder::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_String_INLRbyteArray_INLacdk_locale_RDecoder_II_LRString__arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_String_INLRbyteArray_INLacdk_locale_RDecoder_II_LRString__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_String_INLRbyteArray_INLacdk_locale_RDecoder_II_LRString__args[] = 
{
  &String_methods_String_INLRbyteArray_INLacdk_locale_RDecoder_II_LRString__arg_ba,
  &String_methods_String_INLRbyteArray_INLacdk_locale_RDecoder_II_LRString__arg_decoder,
  &String_methods_String_INLRbyteArray_INLacdk_locale_RDecoder_II_LRString__arg_offset,
  &String_methods_String_INLRbyteArray_INLacdk_locale_RDecoder_II_LRString__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_String_INLRbyteArray_INLacdk_locale_RDecoder_II_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_String_INLRbyteArray_INLacdk_locale_RDecoder_II_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "String", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  String::clazzInfo(), // return type
  "_b_String", // alternative name of method
  -1, // altlabelHashCode
  String_methods_String_INLRbyteArray_INLacdk_locale_RDecoder_II_LRString__args, // the arguments
  0, //arguments count
  String_methods_String_INLRbyteArray_INLacdk_locale_RDecoder_II_LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_String_INLRbyteArray_INLacdk_locale_RDecoder_II_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_String_INLRbyteArray_INLacdk_locale_RDecoder__LRString__arg_ba = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ba", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_String_INLRbyteArray_INLacdk_locale_RDecoder__LRString__arg_decoder = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "decoder", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::RDecoder::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_String_INLRbyteArray_INLacdk_locale_RDecoder__LRString__args[] = 
{
  &String_methods_String_INLRbyteArray_INLacdk_locale_RDecoder__LRString__arg_ba,
  &String_methods_String_INLRbyteArray_INLacdk_locale_RDecoder__LRString__arg_decoder,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_String_INLRbyteArray_INLacdk_locale_RDecoder__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_String_INLRbyteArray_INLacdk_locale_RDecoder__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "String", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  String::clazzInfo(), // return type
  "_c_String", // alternative name of method
  -1, // altlabelHashCode
  String_methods_String_INLRbyteArray_INLacdk_locale_RDecoder__LRString__args, // the arguments
  0, //arguments count
  String_methods_String_INLRbyteArray_INLacdk_locale_RDecoder__LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_String_INLRbyteArray_INLacdk_locale_RDecoder__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_String_INLRbyteArray_INLacdk_locale_RDecoder_I_LRString__arg_ba = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ba", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_String_INLRbyteArray_INLacdk_locale_RDecoder_I_LRString__arg_decoder = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "decoder", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::RDecoder::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_String_INLRbyteArray_INLacdk_locale_RDecoder_I_LRString__arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_String_INLRbyteArray_INLacdk_locale_RDecoder_I_LRString__args[] = 
{
  &String_methods_String_INLRbyteArray_INLacdk_locale_RDecoder_I_LRString__arg_ba,
  &String_methods_String_INLRbyteArray_INLacdk_locale_RDecoder_I_LRString__arg_decoder,
  &String_methods_String_INLRbyteArray_INLacdk_locale_RDecoder_I_LRString__arg_offset,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_String_INLRbyteArray_INLacdk_locale_RDecoder_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_String_INLRbyteArray_INLacdk_locale_RDecoder_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "String", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  String::clazzInfo(), // return type
  "_d_String", // alternative name of method
  -1, // altlabelHashCode
  String_methods_String_INLRbyteArray_INLacdk_locale_RDecoder_I_LRString__args, // the arguments
  0, //arguments count
  String_methods_String_INLRbyteArray_INLacdk_locale_RDecoder_I_LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_String_INLRbyteArray_INLacdk_locale_RDecoder_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_String_INLRcharArray_II_LRString__arg_ba = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ba", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RcharArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_String_INLRcharArray_II_LRString__arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_String_INLRcharArray_II_LRString__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_String_INLRcharArray_II_LRString__args[] = 
{
  &String_methods_String_INLRcharArray_II_LRString__arg_ba,
  &String_methods_String_INLRcharArray_II_LRString__arg_offset,
  &String_methods_String_INLRcharArray_II_LRString__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_String_INLRcharArray_II_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_String_INLRcharArray_II_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "String", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  String::clazzInfo(), // return type
  "_e_String", // alternative name of method
  -1, // altlabelHashCode
  String_methods_String_INLRcharArray_II_LRString__args, // the arguments
  0, //arguments count
  String_methods_String_INLRcharArray_II_LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_String_INLRcharArray_II_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_String_INLRcharArray__LRString__arg_ba = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ba", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RcharArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_String_INLRcharArray__LRString__args[] = 
{
  &String_methods_String_INLRcharArray__LRString__arg_ba,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_String_INLRcharArray__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_String_INLRcharArray__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "String", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  String::clazzInfo(), // return type
  "_f_String", // alternative name of method
  -1, // altlabelHashCode
  String_methods_String_INLRcharArray__LRString__args, // the arguments
  0, //arguments count
  String_methods_String_INLRcharArray__LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_String_INLRcharArray__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_String_INLRString_I_LRString__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_String_INLRString_I_LRString__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_String_INLRString_I_LRString__args[] = 
{
  &String_methods_String_INLRString_I_LRString__arg_str,
  &String_methods_String_INLRString_I_LRString__arg_start,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_String_INLRString_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_String_INLRString_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "String", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  String::clazzInfo(), // return type
  "_4_String", // alternative name of method
  -1, // altlabelHashCode
  String_methods_String_INLRString_I_LRString__args, // the arguments
  0, //arguments count
  String_methods_String_INLRString_I_LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_String_INLRString_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_String_INLRStringBuffer_II_LRString__arg_buf = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buf", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_String_INLRStringBuffer_II_LRString__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_String_INLRStringBuffer_II_LRString__arg_end = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "end", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_String_INLRStringBuffer_II_LRString__args[] = 
{
  &String_methods_String_INLRStringBuffer_II_LRString__arg_buf,
  &String_methods_String_INLRStringBuffer_II_LRString__arg_start,
  &String_methods_String_INLRStringBuffer_II_LRString__arg_end,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_String_INLRStringBuffer_II_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_String_INLRStringBuffer_II_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "String", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  String::clazzInfo(), // return type
  "_5_String", // alternative name of method
  -1, // altlabelHashCode
  String_methods_String_INLRStringBuffer_II_LRString__args, // the arguments
  0, //arguments count
  String_methods_String_INLRStringBuffer_II_LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_String_INLRStringBuffer_II_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_String_INLRStringBuffer__LRString__arg_buf = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buf", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_String_INLRStringBuffer__LRString__args[] = 
{
  &String_methods_String_INLRStringBuffer__LRString__arg_buf,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_String_INLRStringBuffer__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_String_INLRStringBuffer__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "String", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  String::clazzInfo(), // return type
  "_6_String", // alternative name of method
  -1, // altlabelHashCode
  String_methods_String_INLRStringBuffer__LRString__args, // the arguments
  0, //arguments count
  String_methods_String_INLRStringBuffer__LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_String_INLRStringBuffer__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_String_INLRStringBuffer_I_LRString__arg_buf = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buf", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_String_INLRStringBuffer_I_LRString__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_String_INLRStringBuffer_I_LRString__args[] = 
{
  &String_methods_String_INLRStringBuffer_I_LRString__arg_buf,
  &String_methods_String_INLRStringBuffer_I_LRString__arg_start,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_String_INLRStringBuffer_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_String_INLRStringBuffer_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "String", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  String::clazzInfo(), // return type
  "_7_String", // alternative name of method
  -1, // altlabelHashCode
  String_methods_String_INLRStringBuffer_I_LRString__args, // the arguments
  0, //arguments count
  String_methods_String_INLRStringBuffer_I_LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_String_INLRStringBuffer_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_String_INLRString_II_LRString__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_String_INLRString_II_LRString__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_String_INLRString_II_LRString__arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_String_INLRString_II_LRString__args[] = 
{
  &String_methods_String_INLRString_II_LRString__arg_str,
  &String_methods_String_INLRString_II_LRString__arg_start,
  &String_methods_String_INLRString_II_LRString__arg_length,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_String_INLRString_II_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_String_INLRString_II_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "String", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  String::clazzInfo(), // return type
  "_2_String", // alternative name of method
  -1, // altlabelHashCode
  String_methods_String_INLRString_II_LRString__args, // the arguments
  0, //arguments count
  String_methods_String_INLRString_II_LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_String_INLRString_II_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_String_INLRString__LRString__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_String_INLRString__LRString__args[] = 
{
  &String_methods_String_INLRString__LRString__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_String_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_String_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "String", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  String::clazzInfo(), // return type
  "_3_String", // alternative name of method
  -1, // altlabelHashCode
  String_methods_String_INLRString__LRString__args, // the arguments
  0, //arguments count
  String_methods_String_INLRString__LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_String_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_String__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_String__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_String__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "String", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  String::clazzInfo(), // return type
  "_1_String", // alternative name of method
  -1, // altlabelHashCode
  String_methods_String__LRString__args, // the arguments
  0, //arguments count
  String_methods_String__LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_String__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_String_INLRcharArray_I_LRString__arg_ba = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ba", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RcharArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_String_INLRcharArray_I_LRString__arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_String_INLRcharArray_I_LRString__args[] = 
{
  &String_methods_String_INLRcharArray_I_LRString__arg_ba,
  &String_methods_String_INLRcharArray_I_LRString__arg_offset,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_String_INLRcharArray_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_String_INLRcharArray_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "String", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  String::clazzInfo(), // return type
  "_g_String", // alternative name of method
  -1, // altlabelHashCode
  String_methods_String_INLRcharArray_I_LRString__args, // the arguments
  0, //arguments count
  String_methods_String_INLRcharArray_I_LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_String_INLRcharArray_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_String_INLRuccharArray_II_LRString__arg_ba = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ba", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RuccharArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_String_INLRuccharArray_II_LRString__arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_String_INLRuccharArray_II_LRString__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_String_INLRuccharArray_II_LRString__args[] = 
{
  &String_methods_String_INLRuccharArray_II_LRString__arg_ba,
  &String_methods_String_INLRuccharArray_II_LRString__arg_offset,
  &String_methods_String_INLRuccharArray_II_LRString__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_String_INLRuccharArray_II_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_String_INLRuccharArray_II_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "String", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  String::clazzInfo(), // return type
  "_h_String", // alternative name of method
  -1, // altlabelHashCode
  String_methods_String_INLRuccharArray_II_LRString__args, // the arguments
  0, //arguments count
  String_methods_String_INLRuccharArray_II_LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_String_INLRuccharArray_II_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_String_INLRuccharArray__LRString__arg_ba = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ba", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RuccharArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_String_INLRuccharArray__LRString__args[] = 
{
  &String_methods_String_INLRuccharArray__LRString__arg_ba,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_String_INLRuccharArray__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_String_INLRuccharArray__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "String", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  String::clazzInfo(), // return type
  "_i_String", // alternative name of method
  -1, // altlabelHashCode
  String_methods_String_INLRuccharArray__LRString__args, // the arguments
  0, //arguments count
  String_methods_String_INLRuccharArray__LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_String_INLRuccharArray__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_String_INLRuccharArray_I_LRString__arg_ba = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ba", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RuccharArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_String_INLRuccharArray_I_LRString__arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_String_INLRuccharArray_I_LRString__args[] = 
{
  &String_methods_String_INLRuccharArray_I_LRString__arg_ba,
  &String_methods_String_INLRuccharArray_I_LRString__arg_offset,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_String_INLRuccharArray_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_String_INLRuccharArray_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "String", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  String::clazzInfo(), // return type
  "_j_String", // alternative name of method
  -1, // altlabelHashCode
  String_methods_String_INLRuccharArray_I_LRString__args, // the arguments
  0, //arguments count
  String_methods_String_INLRuccharArray_I_LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_String_INLRuccharArray_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods__itoa_II_LRString__arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods__itoa_II_LRString__arg_radix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "radix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods__itoa_II_LRString__args[] = 
{
  &String_methods__itoa_II_LRString__arg_i,
  &String_methods__itoa_II_LRString__arg_radix,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods__itoa_II_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method__itoa_II_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_itoa", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1y__itoa", // alternative name of method
  -1, // altlabelHashCode
  String_methods__itoa_II_LRString__args, // the arguments
  0, //arguments count
  String_methods__itoa_II_LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method__itoa_II_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods__jltoa_JI_LRString__arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods__jltoa_JI_LRString__arg_radix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "radix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods__jltoa_JI_LRString__args[] = 
{
  &String_methods__jltoa_JI_LRString__arg_i,
  &String_methods__jltoa_JI_LRString__arg_radix,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods__jltoa_JI_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method__jltoa_JI_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_jltoa", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1z__jltoa", // alternative name of method
  -1, // altlabelHashCode
  String_methods__jltoa_JI_LRString__args, // the arguments
  0, //arguments count
  String_methods__jltoa_JI_LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method__jltoa_JI_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_center_ILuc2char__LRString__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_center_ILuc2char__LRString__arg_padchar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "padchar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_center_ILuc2char__LRString__args[] = 
{
  &String_methods_center_ILuc2char__LRString__arg_size,
  &String_methods_center_ILuc2char__LRString__arg_padchar,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_center_ILuc2char__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_center_ILuc2char__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "center", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2i_center", // alternative name of method
  -1, // altlabelHashCode
  String_methods_center_ILuc2char__LRString__args, // the arguments
  0, //arguments count
  String_methods_center_ILuc2char__LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_center_ILuc2char__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_center_I_LRString__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_center_I_LRString__args[] = 
{
  &String_methods_center_I_LRString__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_center_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_center_I_LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "center", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2j_center", // alternative name of method
  -1, // altlabelHashCode
  String_methods_center_I_LRString__args, // the arguments
  0, //arguments count
  String_methods_center_I_LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_center_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_charAt_I_Luc2char__arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_charAt_I_Luc2char__args[] = 
{
  &String_methods_charAt_I_Luc2char__arg_idx,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_charAt_I_Luc2char__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_charAt_I_Luc2char_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "charAt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz(), // return type
  "_r_charAt", // alternative name of method
  -1, // altlabelHashCode
  String_methods_charAt_I_Luc2char__args, // the arguments
  0, //arguments count
  String_methods_charAt_I_Luc2char__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_charAt_I_Luc2char__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_characterClass__LCharacterClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_characterClass__LCharacterClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_characterClass__LCharacterClass_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "characterClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_l_characterClass", // alternative name of method
  -1, // altlabelHashCode
  String_methods_characterClass__LCharacterClass__args, // the arguments
  0, //arguments count
  String_methods_characterClass__LCharacterClass__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_characterClass__LCharacterClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_compareTo_INLRString__I_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_compareTo_INLRString__I_args[] = 
{
  &String_methods_compareTo_INLRString__I_arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_compareTo_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_compareTo_INLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "compareTo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_p_compareTo", // alternative name of method
  -1, // altlabelHashCode
  String_methods_compareTo_INLRString__I_args, // the arguments
  0, //arguments count
  String_methods_compareTo_INLRString__I_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_compareTo_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_compareToIgnoreCase_INLRString__I_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_compareToIgnoreCase_INLRString__I_args[] = 
{
  &String_methods_compareToIgnoreCase_INLRString__I_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_compareToIgnoreCase_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_compareToIgnoreCase_INLRString__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "compareToIgnoreCase", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_q_compareToIgnoreCase", // alternative name of method
  -1, // altlabelHashCode
  String_methods_compareToIgnoreCase_INLRString__I_args, // the arguments
  0, //arguments count
  String_methods_compareToIgnoreCase_INLRString__I_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_compareToIgnoreCase_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_concat_INLRString__LRString__arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_concat_INLRString__LRString__args[] = 
{
  &String_methods_concat_INLRString__LRString__arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_concat_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_concat_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "concat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_t_concat", // alternative name of method
  -1, // altlabelHashCode
  String_methods_concat_INLRString__LRString__args, // the arguments
  0, //arguments count
  String_methods_concat_INLRString__LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_concat_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_contains_INLRString_Luc2char__Z_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_contains_INLRString_Luc2char__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_contains_INLRString_Luc2char__Z_args[] = 
{
  &String_methods_contains_INLRString_Luc2char__Z_arg_str,
  &String_methods_contains_INLRString_Luc2char__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_contains_INLRString_Luc2char__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_contains_INLRString_Luc2char__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "contains", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1T_contains", // alternative name of method
  -1, // altlabelHashCode
  String_methods_contains_INLRString_Luc2char__Z_args, // the arguments
  0, //arguments count
  String_methods_contains_INLRString_Luc2char__Z_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_contains_INLRString_Luc2char__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_contains_INLRString_INLRString__Z_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_contains_INLRString_INLRString__Z_arg_find = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "find", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_contains_INLRString_INLRString__Z_args[] = 
{
  &String_methods_contains_INLRString_INLRString__Z_arg_str,
  &String_methods_contains_INLRString_INLRString__Z_arg_find,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_contains_INLRString_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_contains_INLRString_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "contains", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1U_contains", // alternative name of method
  -1, // altlabelHashCode
  String_methods_contains_INLRString_INLRString__Z_args, // the arguments
  0, //arguments count
  String_methods_contains_INLRString_INLRString__Z_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_contains_INLRString_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_containsNone_INLRString_INLRString__Z_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_containsNone_INLRString_INLRString__Z_arg_chars = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "chars", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_containsNone_INLRString_INLRString__Z_args[] = 
{
  &String_methods_containsNone_INLRString_INLRString__Z_arg_str,
  &String_methods_containsNone_INLRString_INLRString__Z_arg_chars,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_containsNone_INLRString_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_containsNone_INLRString_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "containsNone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1V_containsNone", // alternative name of method
  -1, // altlabelHashCode
  String_methods_containsNone_INLRString_INLRString__Z_args, // the arguments
  0, //arguments count
  String_methods_containsNone_INLRString_INLRString__Z_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_containsNone_INLRString_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_containsOnly_INLRString_INLRString__Z_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_containsOnly_INLRString_INLRString__Z_arg_chars = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "chars", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_containsOnly_INLRString_INLRString__Z_args[] = 
{
  &String_methods_containsOnly_INLRString_INLRString__Z_arg_str,
  &String_methods_containsOnly_INLRString_INLRString__Z_arg_chars,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_containsOnly_INLRString_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_containsOnly_INLRString_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "containsOnly", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1W_containsOnly", // alternative name of method
  -1, // altlabelHashCode
  String_methods_containsOnly_INLRString_INLRString__Z_args, // the arguments
  0, //arguments count
  String_methods_containsOnly_INLRString_INLRString__Z_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_containsOnly_INLRString_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_convert_III_LRString__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_convert_III_LRString__arg_onMalformed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "onMalformed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_convert_III_LRString__arg_onUnmappable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "onUnmappable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_convert_III_LRString__args[] = 
{
  &String_methods_convert_III_LRString__arg_flags,
  &String_methods_convert_III_LRString__arg_onMalformed,
  &String_methods_convert_III_LRString__arg_onUnmappable,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_convert_III_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_convert_III_LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "convert", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1A_convert", // alternative name of method
  -1, // altlabelHashCode
  String_methods_convert_III_LRString__args, // the arguments
  0, //arguments count
  String_methods_convert_III_LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_convert_III_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_convert_I_LRString__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_convert_I_LRString__args[] = 
{
  &String_methods_convert_I_LRString__arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_convert_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_convert_I_LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "convert", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1B_convert", // alternative name of method
  -1, // altlabelHashCode
  String_methods_convert_I_LRString__args, // the arguments
  0, //arguments count
  String_methods_convert_I_LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_convert_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_convertToNative__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_convertToNative__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_convertToNative__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "convertToNative", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1C_convertToNative", // alternative name of method
  -1, // altlabelHashCode
  String_methods_convertToNative__LRString__args, // the arguments
  0, //arguments count
  String_methods_convertToNative__LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_convertToNative__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_copyValueOf_INLRcharArray_II_LRString__arg_data = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "data", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RcharArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_copyValueOf_INLRcharArray_II_LRString__arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_copyValueOf_INLRcharArray_II_LRString__arg_count = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "count", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_copyValueOf_INLRcharArray_II_LRString__args[] = 
{
  &String_methods_copyValueOf_INLRcharArray_II_LRString__arg_data,
  &String_methods_copyValueOf_INLRcharArray_II_LRString__arg_offset,
  &String_methods_copyValueOf_INLRcharArray_II_LRString__arg_count,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_copyValueOf_INLRcharArray_II_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_copyValueOf_INLRcharArray_II_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "copyValueOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_u_copyValueOf", // alternative name of method
  -1, // altlabelHashCode
  String_methods_copyValueOf_INLRcharArray_II_LRString__args, // the arguments
  0, //arguments count
  String_methods_copyValueOf_INLRcharArray_II_LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_copyValueOf_INLRcharArray_II_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_copyValueOf_INLRcharArray__LRString__arg_data = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "data", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RcharArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_copyValueOf_INLRcharArray__LRString__args[] = 
{
  &String_methods_copyValueOf_INLRcharArray__LRString__arg_data,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_copyValueOf_INLRcharArray__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_copyValueOf_INLRcharArray__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "copyValueOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_v_copyValueOf", // alternative name of method
  -1, // altlabelHashCode
  String_methods_copyValueOf_INLRcharArray__LRString__args, // the arguments
  0, //arguments count
  String_methods_copyValueOf_INLRcharArray__LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_copyValueOf_INLRcharArray__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_copyValueOf_INLRcharArray_I_LRString__arg_data = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "data", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RcharArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_copyValueOf_INLRcharArray_I_LRString__arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_copyValueOf_INLRcharArray_I_LRString__args[] = 
{
  &String_methods_copyValueOf_INLRcharArray_I_LRString__arg_data,
  &String_methods_copyValueOf_INLRcharArray_I_LRString__arg_offset,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_copyValueOf_INLRcharArray_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_copyValueOf_INLRcharArray_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "copyValueOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_w_copyValueOf", // alternative name of method
  -1, // altlabelHashCode
  String_methods_copyValueOf_INLRcharArray_I_LRString__args, // the arguments
  0, //arguments count
  String_methods_copyValueOf_INLRcharArray_I_LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_copyValueOf_INLRcharArray_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_create_instance__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_create_instance__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_create_instance__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create_instance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_0_create_instance", // alternative name of method
  -1, // altlabelHashCode
  String_methods_create_instance__LRObject__args, // the arguments
  0, //arguments count
  String_methods_create_instance__LRObject__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_create_instance__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_decodeAscUnicode__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_decodeAscUnicode__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_decodeAscUnicode__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "decodeAscUnicode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2C_decodeAscUnicode", // alternative name of method
  -1, // altlabelHashCode
  String_methods_decodeAscUnicode__LRString__args, // the arguments
  0, //arguments count
  String_methods_decodeAscUnicode__LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_decodeAscUnicode__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_defaultString_INLRString__LRString__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_defaultString_INLRString__LRString__args[] = 
{
  &String_methods_defaultString_INLRString__LRString__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_defaultString_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_defaultString_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "defaultString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1H_defaultString", // alternative name of method
  -1, // altlabelHashCode
  String_methods_defaultString_INLRString__LRString__args, // the arguments
  0, //arguments count
  String_methods_defaultString_INLRString__LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_defaultString_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_defaultString_INLRString_INLRString__LRString__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_defaultString_INLRString_INLRString__LRString__arg_defaultString = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "defaultString", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_defaultString_INLRString_INLRString__LRString__args[] = 
{
  &String_methods_defaultString_INLRString_INLRString__LRString__arg_str,
  &String_methods_defaultString_INLRString_INLRString__LRString__arg_defaultString,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_defaultString_INLRString_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_defaultString_INLRString_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "defaultString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1I_defaultString", // alternative name of method
  -1, // altlabelHashCode
  String_methods_defaultString_INLRString_INLRString__LRString__args, // the arguments
  0, //arguments count
  String_methods_defaultString_INLRString_INLRString__LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_defaultString_INLRString_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_deleteWhitespace_INLRString__LRString__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_deleteWhitespace_INLRString__LRString__args[] = 
{
  &String_methods_deleteWhitespace_INLRString__LRString__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_deleteWhitespace_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_deleteWhitespace_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deleteWhitespace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2c_deleteWhitespace", // alternative name of method
  -1, // altlabelHashCode
  String_methods_deleteWhitespace_INLRString__LRString__args, // the arguments
  0, //arguments count
  String_methods_deleteWhitespace_INLRString__LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_deleteWhitespace_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_elementCount_C_I_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_elementCount_C_I_args[] = 
{
  &String_methods_elementCount_C_I_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_elementCount_C_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_elementCount_C_I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "elementCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1t_elementCount", // alternative name of method
  -1, // altlabelHashCode
  String_methods_elementCount_C_I_args, // the arguments
  0, //arguments count
  String_methods_elementCount_C_I_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_elementCount_C_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_elementCount_Luc2char__I_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_elementCount_Luc2char__I_args[] = 
{
  &String_methods_elementCount_Luc2char__I_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_elementCount_Luc2char__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_elementCount_Luc2char__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "elementCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1u_elementCount", // alternative name of method
  -1, // altlabelHashCode
  String_methods_elementCount_Luc2char__I_args, // the arguments
  0, //arguments count
  String_methods_elementCount_Luc2char__I_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_elementCount_Luc2char__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_elementCount_INLRString__I_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_elementCount_INLRString__I_args[] = 
{
  &String_methods_elementCount_INLRString__I_arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_elementCount_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_elementCount_INLRString__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "elementCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1v_elementCount", // alternative name of method
  -1, // altlabelHashCode
  String_methods_elementCount_INLRString__I_args, // the arguments
  0, //arguments count
  String_methods_elementCount_INLRString__I_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_elementCount_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_emptyString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_emptyString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_emptyString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOut | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "emptyString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1F_emptyString", // alternative name of method
  -1, // altlabelHashCode
  String_methods_emptyString__LRString__args, // the arguments
  0, //arguments count
  String_methods_emptyString__LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_emptyString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_encodeAscUnicode__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_encodeAscUnicode__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_encodeAscUnicode__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "encodeAscUnicode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2D_encodeAscUnicode", // alternative name of method
  -1, // altlabelHashCode
  String_methods_encodeAscUnicode__LRString__args, // the arguments
  0, //arguments count
  String_methods_encodeAscUnicode__LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_encodeAscUnicode__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_endsWith_INLRString__Z_arg_suffix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "suffix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_endsWith_INLRString__Z_args[] = 
{
  &String_methods_endsWith_INLRString__Z_arg_suffix,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_endsWith_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_endsWith_INLRString__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "endsWith", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_z_endsWith", // alternative name of method
  -1, // altlabelHashCode
  String_methods_endsWith_INLRString__Z_args, // the arguments
  0, //arguments count
  String_methods_endsWith_INLRString__Z_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_endsWith_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_equals_INLRString__Z_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_equals_INLRString__Z_args[] = 
{
  &String_methods_equals_INLRString__Z_arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_equals_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_equals_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_n_equals", // alternative name of method
  -1, // altlabelHashCode
  String_methods_equals_INLRString__Z_args, // the arguments
  0, //arguments count
  String_methods_equals_INLRString__Z_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_equals_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_equalsIgnoreCase_INLRString__Z_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_equalsIgnoreCase_INLRString__Z_args[] = 
{
  &String_methods_equalsIgnoreCase_INLRString__Z_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_equalsIgnoreCase_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_equalsIgnoreCase_INLRString__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equalsIgnoreCase", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_o_equalsIgnoreCase", // alternative name of method
  -1, // altlabelHashCode
  String_methods_equalsIgnoreCase_INLRString__Z_args, // the arguments
  0, //arguments count
  String_methods_equalsIgnoreCase_INLRString__Z_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_equalsIgnoreCase_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_getBytes__LRbyteArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_getBytes__LRbyteArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_getBytes__LRbyteArray_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBytes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo(), // return type
  "_T_getBytes", // alternative name of method
  -1, // altlabelHashCode
  String_methods_getBytes__LRbyteArray__args, // the arguments
  0, //arguments count
  String_methods_getBytes__LRbyteArray__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_getBytes__LRbyteArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_getBytes_INLRString__LRbyteArray__arg_enc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "enc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_getBytes_INLRString__LRbyteArray__args[] = 
{
  &String_methods_getBytes_INLRString__LRbyteArray__arg_enc,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_getBytes_INLRString__LRbyteArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_getBytes_INLRString__LRbyteArray_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBytes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo(), // return type
  "_U_getBytes", // alternative name of method
  -1, // altlabelHashCode
  String_methods_getBytes_INLRString__LRbyteArray__args, // the arguments
  0, //arguments count
  String_methods_getBytes_INLRString__LRbyteArray__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_getBytes_INLRString__LRbyteArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_getBytes_INLacdk_locale_REncoder__LRbyteArray__arg_enc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "enc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::REncoder::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_getBytes_INLacdk_locale_REncoder__LRbyteArray__args[] = 
{
  &String_methods_getBytes_INLacdk_locale_REncoder__LRbyteArray__arg_enc,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_getBytes_INLacdk_locale_REncoder__LRbyteArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_getBytes_INLacdk_locale_REncoder__LRbyteArray_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBytes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo(), // return type
  "_V_getBytes", // alternative name of method
  -1, // altlabelHashCode
  String_methods_getBytes_INLacdk_locale_REncoder__LRbyteArray__args, // the arguments
  0, //arguments count
  String_methods_getBytes_INLacdk_locale_REncoder__LRbyteArray__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_getBytes_INLacdk_locale_REncoder__LRbyteArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_getCharCapacity__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_getCharCapacity__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_getCharCapacity__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCharCapacity", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2B_getCharCapacity", // alternative name of method
  -1, // altlabelHashCode
  String_methods_getCharCapacity__I_args, // the arguments
  0, //arguments count
  String_methods_getCharCapacity__I_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_getCharCapacity__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_getChars__LRcharArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_getChars__LRcharArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_getChars__LRcharArray_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getChars", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RcharArray::clazzInfo(), // return type
  "_S_getChars", // alternative name of method
  -1, // altlabelHashCode
  String_methods_getChars__LRcharArray__args, // the arguments
  0, //arguments count
  String_methods_getChars__LRcharArray__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_getChars__LRcharArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_getChars_IIINLRcharArray_IINLacdk_locale_REncoder__V_arg_srcBegin = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "srcBegin", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_getChars_IIINLRcharArray_IINLacdk_locale_REncoder__V_arg_srcEnd = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "srcEnd", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_getChars_IIINLRcharArray_IINLacdk_locale_REncoder__V_arg_dst = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "dst", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RcharArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_getChars_IIINLRcharArray_IINLacdk_locale_REncoder__V_arg_dstBegin = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dstBegin", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_getChars_IIINLRcharArray_IINLacdk_locale_REncoder__V_arg_enc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "enc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::REncoder::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_getChars_IIINLRcharArray_IINLacdk_locale_REncoder__V_args[] = 
{
  &String_methods_getChars_IIINLRcharArray_IINLacdk_locale_REncoder__V_arg_srcBegin,
  &String_methods_getChars_IIINLRcharArray_IINLacdk_locale_REncoder__V_arg_srcEnd,
  &String_methods_getChars_IIINLRcharArray_IINLacdk_locale_REncoder__V_arg_dst,
  &String_methods_getChars_IIINLRcharArray_IINLacdk_locale_REncoder__V_arg_dstBegin,
  &String_methods_getChars_IIINLRcharArray_IINLacdk_locale_REncoder__V_arg_enc,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_getChars_IIINLRcharArray_IINLacdk_locale_REncoder__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_getChars_IIINLRcharArray_IINLacdk_locale_REncoder__V = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getChars", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_Q_getChars", // alternative name of method
  -1, // altlabelHashCode
  String_methods_getChars_IIINLRcharArray_IINLacdk_locale_REncoder__V_args, // the arguments
  0, //arguments count
  String_methods_getChars_IIINLRcharArray_IINLacdk_locale_REncoder__V_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_getChars_IIINLRcharArray_IINLacdk_locale_REncoder__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_getChars_INLacdk_locale_REncoder__LRcharArray__arg_enc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "enc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::REncoder::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_getChars_INLacdk_locale_REncoder__LRcharArray__args[] = 
{
  &String_methods_getChars_INLacdk_locale_REncoder__LRcharArray__arg_enc,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_getChars_INLacdk_locale_REncoder__LRcharArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_getChars_INLacdk_locale_REncoder__LRcharArray_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getChars", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RcharArray::clazzInfo(), // return type
  "_W_getChars", // alternative name of method
  -1, // altlabelHashCode
  String_methods_getChars_INLacdk_locale_REncoder__LRcharArray__args, // the arguments
  0, //arguments count
  String_methods_getChars_INLacdk_locale_REncoder__LRcharArray__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_getChars_INLacdk_locale_REncoder__LRcharArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_getDistance_INLRString_INLRString__I_arg_first = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "first", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_getDistance_INLRString_INLRString__I_arg_second = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "second", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_getDistance_INLRString_INLRString__I_args[] = 
{
  &String_methods_getDistance_INLRString_INLRString__I_arg_first,
  &String_methods_getDistance_INLRString_INLRString__I_arg_second,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_getDistance_INLRString_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_getDistance_INLRString_INLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDistance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2l_getDistance", // alternative name of method
  -1, // altlabelHashCode
  String_methods_getDistance_INLRString_INLRString__I_args, // the arguments
  0, //arguments count
  String_methods_getDistance_INLRString_INLRString__I_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_getDistance_INLRString_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_getEmptyString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_getEmptyString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_getEmptyString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEmptyString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1G_getEmptyString", // alternative name of method
  -1, // altlabelHashCode
  String_methods_getEmptyString__LRString__args, // the arguments
  0, //arguments count
  String_methods_getEmptyString__LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_getEmptyString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_getFirstIndexOf_INLRString__I_arg_chars = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "chars", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_getFirstIndexOf_INLRString__I_args[] = 
{
  &String_methods_getFirstIndexOf_INLRString__I_arg_chars,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_getFirstIndexOf_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_getFirstIndexOf_INLRString__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFirstIndexOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1w_getFirstIndexOf", // alternative name of method
  -1, // altlabelHashCode
  String_methods_getFirstIndexOf_INLRString__I_args, // the arguments
  0, //arguments count
  String_methods_getFirstIndexOf_INLRString__I_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_getFirstIndexOf_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_getMaxCharacterSize__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_getMaxCharacterSize__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_getMaxCharacterSize__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxCharacterSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2A_getMaxCharacterSize", // alternative name of method
  -1, // altlabelHashCode
  String_methods_getMaxCharacterSize__I_args, // the arguments
  0, //arguments count
  String_methods_getMaxCharacterSize__I_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_getMaxCharacterSize__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_getNormalized__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_getNormalized__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_getNormalized__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNormalized", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1E_getNormalized", // alternative name of method
  -1, // altlabelHashCode
  String_methods_getNormalized__LRString__args, // the arguments
  0, //arguments count
  String_methods_getNormalized__LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_getNormalized__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_getUc2Chars_IIINLRuccharArray_I_V_arg_srcBegin = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "srcBegin", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_getUc2Chars_IIINLRuccharArray_I_V_arg_srcEnd = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "srcEnd", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_getUc2Chars_IIINLRuccharArray_I_V_arg_dst = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "dst", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RuccharArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_getUc2Chars_IIINLRuccharArray_I_V_arg_dstBegin = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dstBegin", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_getUc2Chars_IIINLRuccharArray_I_V_args[] = 
{
  &String_methods_getUc2Chars_IIINLRuccharArray_I_V_arg_srcBegin,
  &String_methods_getUc2Chars_IIINLRuccharArray_I_V_arg_srcEnd,
  &String_methods_getUc2Chars_IIINLRuccharArray_I_V_arg_dst,
  &String_methods_getUc2Chars_IIINLRuccharArray_I_V_arg_dstBegin,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_getUc2Chars_IIINLRuccharArray_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_getUc2Chars_IIINLRuccharArray_I_V = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getUc2Chars", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_R_getUc2Chars", // alternative name of method
  -1, // altlabelHashCode
  String_methods_getUc2Chars_IIINLRuccharArray_I_V_args, // the arguments
  0, //arguments count
  String_methods_getUc2Chars_IIINLRuccharArray_I_V_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_getUc2Chars_IIINLRuccharArray_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_getUcChars__LRuccharArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_getUcChars__LRuccharArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_getUcChars__LRuccharArray_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getUcChars", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RuccharArray::clazzInfo(), // return type
  "_X_getUcChars", // alternative name of method
  -1, // altlabelHashCode
  String_methods_getUcChars__LRuccharArray__args, // the arguments
  0, //arguments count
  String_methods_getUcChars__LRuccharArray__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_getUcChars__LRuccharArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_indexOf_CI_I_arg_ch = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ch", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_indexOf_CI_I_arg_fromIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "fromIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_indexOf_CI_I_args[] = 
{
  &String_methods_indexOf_CI_I_arg_ch,
  &String_methods_indexOf_CI_I_arg_fromIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_indexOf_CI_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_indexOf_CI_I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "indexOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_E_indexOf", // alternative name of method
  -1, // altlabelHashCode
  String_methods_indexOf_CI_I_args, // the arguments
  0, //arguments count
  String_methods_indexOf_CI_I_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_indexOf_CI_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_indexOf_C_I_arg_ch = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ch", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_indexOf_C_I_args[] = 
{
  &String_methods_indexOf_C_I_arg_ch,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_indexOf_C_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_indexOf_C_I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "indexOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_F_indexOf", // alternative name of method
  -1, // altlabelHashCode
  String_methods_indexOf_C_I_args, // the arguments
  0, //arguments count
  String_methods_indexOf_C_I_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_indexOf_C_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_indexOf_Luc2char_I_I_arg_ch = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ch", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_indexOf_Luc2char_I_I_arg_fromIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "fromIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_indexOf_Luc2char_I_I_args[] = 
{
  &String_methods_indexOf_Luc2char_I_I_arg_ch,
  &String_methods_indexOf_Luc2char_I_I_arg_fromIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_indexOf_Luc2char_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_indexOf_Luc2char_I_I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "indexOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_G_indexOf", // alternative name of method
  -1, // altlabelHashCode
  String_methods_indexOf_Luc2char_I_I_args, // the arguments
  0, //arguments count
  String_methods_indexOf_Luc2char_I_I_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_indexOf_Luc2char_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_indexOf_Luc2char__I_arg_ch = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ch", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_indexOf_Luc2char__I_args[] = 
{
  &String_methods_indexOf_Luc2char__I_arg_ch,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_indexOf_Luc2char__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_indexOf_Luc2char__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "indexOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_H_indexOf", // alternative name of method
  -1, // altlabelHashCode
  String_methods_indexOf_Luc2char__I_args, // the arguments
  0, //arguments count
  String_methods_indexOf_Luc2char__I_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_indexOf_Luc2char__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_indexOf_INLRString_I_I_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_indexOf_INLRString_I_I_arg_fromIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "fromIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_indexOf_INLRString_I_I_args[] = 
{
  &String_methods_indexOf_INLRString_I_I_arg_str,
  &String_methods_indexOf_INLRString_I_I_arg_fromIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_indexOf_INLRString_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_indexOf_INLRString_I_I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "indexOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_M_indexOf", // alternative name of method
  -1, // altlabelHashCode
  String_methods_indexOf_INLRString_I_I_args, // the arguments
  0, //arguments count
  String_methods_indexOf_INLRString_I_I_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_indexOf_INLRString_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_indexOf_INLRString__I_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_indexOf_INLRString__I_args[] = 
{
  &String_methods_indexOf_INLRString__I_arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_indexOf_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_indexOf_INLRString__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "indexOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_N_indexOf", // alternative name of method
  -1, // altlabelHashCode
  String_methods_indexOf_INLRString__I_args, // the arguments
  0, //arguments count
  String_methods_indexOf_INLRString__I_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_indexOf_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_indexOfAny_INLRString_INLRuccharArray__I_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_indexOfAny_INLRString_INLRuccharArray__I_arg_chars = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "chars", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RuccharArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_indexOfAny_INLRString_INLRuccharArray__I_args[] = 
{
  &String_methods_indexOfAny_INLRString_INLRuccharArray__I_arg_str,
  &String_methods_indexOfAny_INLRString_INLRuccharArray__I_arg_chars,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_indexOfAny_INLRString_INLRuccharArray__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_indexOfAny_INLRString_INLRuccharArray__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "indexOfAny", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1X_indexOfAny", // alternative name of method
  -1, // altlabelHashCode
  String_methods_indexOfAny_INLRString_INLRuccharArray__I_args, // the arguments
  0, //arguments count
  String_methods_indexOfAny_INLRString_INLRuccharArray__I_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_indexOfAny_INLRString_INLRuccharArray__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_indexOfAny_INLRString_INLRString__I_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_indexOfAny_INLRString_INLRString__I_arg_chars = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "chars", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_indexOfAny_INLRString_INLRString__I_args[] = 
{
  &String_methods_indexOfAny_INLRString_INLRString__I_arg_str,
  &String_methods_indexOfAny_INLRString_INLRString__I_arg_chars,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_indexOfAny_INLRString_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_indexOfAny_INLRString_INLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "indexOfAny", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1Y_indexOfAny", // alternative name of method
  -1, // altlabelHashCode
  String_methods_indexOfAny_INLRString_INLRString__I_args, // the arguments
  0, //arguments count
  String_methods_indexOfAny_INLRString_INLRString__I_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_indexOfAny_INLRString_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_indexOfAny_INLRString_INLRStringArray__I_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_indexOfAny_INLRString_INLRStringArray__I_arg_strings = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "strings", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_indexOfAny_INLRString_INLRStringArray__I_args[] = 
{
  &String_methods_indexOfAny_INLRString_INLRStringArray__I_arg_str,
  &String_methods_indexOfAny_INLRString_INLRStringArray__I_arg_strings,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_indexOfAny_INLRString_INLRStringArray__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_indexOfAny_INLRString_INLRStringArray__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "indexOfAny", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1Z_indexOfAny", // alternative name of method
  -1, // altlabelHashCode
  String_methods_indexOfAny_INLRString_INLRStringArray__I_args, // the arguments
  0, //arguments count
  String_methods_indexOfAny_INLRString_INLRStringArray__I_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_indexOfAny_INLRString_INLRStringArray__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_indexOfDifference_INLRString_INLRString__I_arg_first = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "first", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_indexOfDifference_INLRString_INLRString__I_arg_second = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "second", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_indexOfDifference_INLRString_INLRString__I_args[] = 
{
  &String_methods_indexOfDifference_INLRString_INLRString__I_arg_first,
  &String_methods_indexOfDifference_INLRString_INLRString__I_arg_second,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_indexOfDifference_INLRString_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_indexOfDifference_INLRString_INLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "indexOfDifference", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2k_indexOfDifference", // alternative name of method
  -1, // altlabelHashCode
  String_methods_indexOfDifference_INLRString_INLRString__I_args, // the arguments
  0, //arguments count
  String_methods_indexOfDifference_INLRString_INLRString__I_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_indexOfDifference_INLRString_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_intern__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_intern__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_intern__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "intern", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1g_intern", // alternative name of method
  -1, // altlabelHashCode
  String_methods_intern__LRString__args, // the arguments
  0, //arguments count
  String_methods_intern__LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_intern__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_isAlpha_INLRString__Z_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_isAlpha_INLRString__Z_args[] = 
{
  &String_methods_isAlpha_INLRString__Z_arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_isAlpha_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_isAlpha_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isAlpha", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1N_isAlpha", // alternative name of method
  -1, // altlabelHashCode
  String_methods_isAlpha_INLRString__Z_args, // the arguments
  0, //arguments count
  String_methods_isAlpha_INLRString__Z_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_isAlpha_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_isAlphaSpace_INLRString__Z_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_isAlphaSpace_INLRString__Z_args[] = 
{
  &String_methods_isAlphaSpace_INLRString__Z_arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_isAlphaSpace_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_isAlphaSpace_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isAlphaSpace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1O_isAlphaSpace", // alternative name of method
  -1, // altlabelHashCode
  String_methods_isAlphaSpace_INLRString__Z_args, // the arguments
  0, //arguments count
  String_methods_isAlphaSpace_INLRString__Z_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_isAlphaSpace_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_isAlphanumeric_INLRString__Z_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_isAlphanumeric_INLRString__Z_args[] = 
{
  &String_methods_isAlphanumeric_INLRString__Z_arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_isAlphanumeric_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_isAlphanumeric_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isAlphanumeric", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1P_isAlphanumeric", // alternative name of method
  -1, // altlabelHashCode
  String_methods_isAlphanumeric_INLRString__Z_args, // the arguments
  0, //arguments count
  String_methods_isAlphanumeric_INLRString__Z_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_isAlphanumeric_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_isAlphanumericSpace_INLRString__Z_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_isAlphanumericSpace_INLRString__Z_args[] = 
{
  &String_methods_isAlphanumericSpace_INLRString__Z_arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_isAlphanumericSpace_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_isAlphanumericSpace_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isAlphanumericSpace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1Q_isAlphanumericSpace", // alternative name of method
  -1, // altlabelHashCode
  String_methods_isAlphanumericSpace_INLRString__Z_args, // the arguments
  0, //arguments count
  String_methods_isAlphanumericSpace_INLRString__Z_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_isAlphanumericSpace_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_isBlank_INLRString__Z_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_isBlank_INLRString__Z_args[] = 
{
  &String_methods_isBlank_INLRString__Z_arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_isBlank_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_isBlank_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isBlank", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1L_isBlank", // alternative name of method
  -1, // altlabelHashCode
  String_methods_isBlank_INLRString__Z_args, // the arguments
  0, //arguments count
  String_methods_isBlank_INLRString__Z_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_isBlank_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_isCChar__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_isCChar__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_isCChar__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isCChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2w_isCChar", // alternative name of method
  -1, // altlabelHashCode
  String_methods_isCChar__Z_args, // the arguments
  0, //arguments count
  String_methods_isCChar__Z_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_isCChar__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_isCharacterClass_I_Z_arg_cc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "cc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_isCharacterClass_I_Z_args[] = 
{
  &String_methods_isCharacterClass_I_Z_arg_cc,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_isCharacterClass_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_isCharacterClass_I_Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isCharacterClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_m_isCharacterClass", // alternative name of method
  -1, // altlabelHashCode
  String_methods_isCharacterClass_I_Z_args, // the arguments
  0, //arguments count
  String_methods_isCharacterClass_I_Z_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_isCharacterClass_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_isEmpty_INLRString__Z_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_isEmpty_INLRString__Z_args[] = 
{
  &String_methods_isEmpty_INLRString__Z_arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_isEmpty_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_isEmpty_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isEmpty", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1J_isEmpty", // alternative name of method
  -1, // altlabelHashCode
  String_methods_isEmpty_INLRString__Z_args, // the arguments
  0, //arguments count
  String_methods_isEmpty_INLRString__Z_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_isEmpty_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_isLowerCase__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_isLowerCase__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_isLowerCase__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isLowerCase", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1b_isLowerCase", // alternative name of method
  -1, // altlabelHashCode
  String_methods_isLowerCase__Z_args, // the arguments
  0, //arguments count
  String_methods_isLowerCase__Z_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_isLowerCase__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_isNotBlank_INLRString__Z_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_isNotBlank_INLRString__Z_args[] = 
{
  &String_methods_isNotBlank_INLRString__Z_arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_isNotBlank_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_isNotBlank_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isNotBlank", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1M_isNotBlank", // alternative name of method
  -1, // altlabelHashCode
  String_methods_isNotBlank_INLRString__Z_args, // the arguments
  0, //arguments count
  String_methods_isNotBlank_INLRString__Z_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_isNotBlank_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_isNotEmpty_INLRString__Z_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_isNotEmpty_INLRString__Z_args[] = 
{
  &String_methods_isNotEmpty_INLRString__Z_arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_isNotEmpty_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_isNotEmpty_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isNotEmpty", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1K_isNotEmpty", // alternative name of method
  -1, // altlabelHashCode
  String_methods_isNotEmpty_INLRString__Z_args, // the arguments
  0, //arguments count
  String_methods_isNotEmpty_INLRString__Z_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_isNotEmpty_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_isNumeric_INLRString__Z_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_isNumeric_INLRString__Z_args[] = 
{
  &String_methods_isNumeric_INLRString__Z_arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_isNumeric_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_isNumeric_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isNumeric", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1R_isNumeric", // alternative name of method
  -1, // altlabelHashCode
  String_methods_isNumeric_INLRString__Z_args, // the arguments
  0, //arguments count
  String_methods_isNumeric_INLRString__Z_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_isNumeric_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_isNumericSpace_INLRString__Z_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_isNumericSpace_INLRString__Z_args[] = 
{
  &String_methods_isNumericSpace_INLRString__Z_arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_isNumericSpace_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_isNumericSpace_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isNumericSpace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1S_isNumericSpace", // alternative name of method
  -1, // altlabelHashCode
  String_methods_isNumericSpace_INLRString__Z_args, // the arguments
  0, //arguments count
  String_methods_isNumericSpace_INLRString__Z_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_isNumericSpace_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_isUc2Char__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_isUc2Char__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_isUc2Char__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isUc2Char", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2x_isUc2Char", // alternative name of method
  -1, // altlabelHashCode
  String_methods_isUc2Char__Z_args, // the arguments
  0, //arguments count
  String_methods_isUc2Char__Z_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_isUc2Char__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_isUc4Char__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_isUc4Char__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_isUc4Char__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isUc4Char", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2y_isUc4Char", // alternative name of method
  -1, // altlabelHashCode
  String_methods_isUc4Char__Z_args, // the arguments
  0, //arguments count
  String_methods_isUc4Char__Z_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_isUc4Char__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_isUpperCase__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_isUpperCase__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_isUpperCase__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isUpperCase", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1d_isUpperCase", // alternative name of method
  -1, // altlabelHashCode
  String_methods_isUpperCase__Z_args, // the arguments
  0, //arguments count
  String_methods_isUpperCase__Z_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_isUpperCase__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_isUtf8Char__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_isUtf8Char__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_isUtf8Char__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isUtf8Char", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2z_isUtf8Char", // alternative name of method
  -1, // altlabelHashCode
  String_methods_isUtf8Char__Z_args, // the arguments
  0, //arguments count
  String_methods_isUtf8Char__Z_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_isUtf8Char__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_join_INLacdk_util_RIterator__LRString__arg_it = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "it", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RIterator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_join_INLacdk_util_RIterator__LRString__args[] = 
{
  &String_methods_join_INLacdk_util_RIterator__LRString__arg_it,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_join_INLacdk_util_RIterator__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_join_INLacdk_util_RIterator__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "join", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_23_join", // alternative name of method
  -1, // altlabelHashCode
  String_methods_join_INLacdk_util_RIterator__LRString__args, // the arguments
  0, //arguments count
  String_methods_join_INLacdk_util_RIterator__LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_join_INLacdk_util_RIterator__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_join_INLacdk_util_RIterator_Luc2char__LRString__arg_it = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "it", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RIterator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_join_INLacdk_util_RIterator_Luc2char__LRString__arg_delimiter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "delimiter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_join_INLacdk_util_RIterator_Luc2char__LRString__args[] = 
{
  &String_methods_join_INLacdk_util_RIterator_Luc2char__LRString__arg_it,
  &String_methods_join_INLacdk_util_RIterator_Luc2char__LRString__arg_delimiter,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_join_INLacdk_util_RIterator_Luc2char__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_join_INLacdk_util_RIterator_Luc2char__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "join", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_24_join", // alternative name of method
  -1, // altlabelHashCode
  String_methods_join_INLacdk_util_RIterator_Luc2char__LRString__args, // the arguments
  0, //arguments count
  String_methods_join_INLacdk_util_RIterator_Luc2char__LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_join_INLacdk_util_RIterator_Luc2char__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_join_INLacdk_util_RIterator_INLRString__LRString__arg_it = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "it", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RIterator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_join_INLacdk_util_RIterator_INLRString__LRString__arg_delimiter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "delimiter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_join_INLacdk_util_RIterator_INLRString__LRString__args[] = 
{
  &String_methods_join_INLacdk_util_RIterator_INLRString__LRString__arg_it,
  &String_methods_join_INLacdk_util_RIterator_INLRString__LRString__arg_delimiter,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_join_INLacdk_util_RIterator_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_join_INLacdk_util_RIterator_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "join", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_25_join", // alternative name of method
  -1, // altlabelHashCode
  String_methods_join_INLacdk_util_RIterator_INLRString__LRString__args, // the arguments
  0, //arguments count
  String_methods_join_INLacdk_util_RIterator_INLRString__LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_join_INLacdk_util_RIterator_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_join_INLRObjectArray__LRString__arg_oa = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "oa", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_join_INLRObjectArray__LRString__args[] = 
{
  &String_methods_join_INLRObjectArray__LRString__arg_oa,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_join_INLRObjectArray__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_join_INLRObjectArray__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "join", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_26_join", // alternative name of method
  -1, // altlabelHashCode
  String_methods_join_INLRObjectArray__LRString__args, // the arguments
  0, //arguments count
  String_methods_join_INLRObjectArray__LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_join_INLRObjectArray__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_join_INLRObjectArray_Luc2char__LRString__arg_oa = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "oa", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_join_INLRObjectArray_Luc2char__LRString__arg_delimiter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "delimiter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_join_INLRObjectArray_Luc2char__LRString__args[] = 
{
  &String_methods_join_INLRObjectArray_Luc2char__LRString__arg_oa,
  &String_methods_join_INLRObjectArray_Luc2char__LRString__arg_delimiter,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_join_INLRObjectArray_Luc2char__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_join_INLRObjectArray_Luc2char__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "join", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_27_join", // alternative name of method
  -1, // altlabelHashCode
  String_methods_join_INLRObjectArray_Luc2char__LRString__args, // the arguments
  0, //arguments count
  String_methods_join_INLRObjectArray_Luc2char__LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_join_INLRObjectArray_Luc2char__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_join_INLRObjectArray_INLRString__LRString__arg_oa = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "oa", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_join_INLRObjectArray_INLRString__LRString__arg_delimiter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "delimiter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_join_INLRObjectArray_INLRString__LRString__args[] = 
{
  &String_methods_join_INLRObjectArray_INLRString__LRString__arg_oa,
  &String_methods_join_INLRObjectArray_INLRString__LRString__arg_delimiter,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_join_INLRObjectArray_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_join_INLRObjectArray_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "join", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_28_join", // alternative name of method
  -1, // altlabelHashCode
  String_methods_join_INLRObjectArray_INLRString__LRString__args, // the arguments
  0, //arguments count
  String_methods_join_INLRObjectArray_INLRString__LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_join_INLRObjectArray_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_lastIndexOf_CI_I_arg_ch = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ch", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_lastIndexOf_CI_I_arg_fromIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "fromIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_lastIndexOf_CI_I_args[] = 
{
  &String_methods_lastIndexOf_CI_I_arg_ch,
  &String_methods_lastIndexOf_CI_I_arg_fromIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_lastIndexOf_CI_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_lastIndexOf_CI_I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lastIndexOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_I_lastIndexOf", // alternative name of method
  -1, // altlabelHashCode
  String_methods_lastIndexOf_CI_I_args, // the arguments
  0, //arguments count
  String_methods_lastIndexOf_CI_I_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_lastIndexOf_CI_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_lastIndexOf_C_I_arg_ch = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ch", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_lastIndexOf_C_I_args[] = 
{
  &String_methods_lastIndexOf_C_I_arg_ch,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_lastIndexOf_C_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_lastIndexOf_C_I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "lastIndexOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_J_lastIndexOf", // alternative name of method
  -1, // altlabelHashCode
  String_methods_lastIndexOf_C_I_args, // the arguments
  0, //arguments count
  String_methods_lastIndexOf_C_I_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_lastIndexOf_C_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_lastIndexOf_Luc2char_I_I_arg_ch = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ch", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_lastIndexOf_Luc2char_I_I_arg_fromIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "fromIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_lastIndexOf_Luc2char_I_I_args[] = 
{
  &String_methods_lastIndexOf_Luc2char_I_I_arg_ch,
  &String_methods_lastIndexOf_Luc2char_I_I_arg_fromIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_lastIndexOf_Luc2char_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_lastIndexOf_Luc2char_I_I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lastIndexOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_K_lastIndexOf", // alternative name of method
  -1, // altlabelHashCode
  String_methods_lastIndexOf_Luc2char_I_I_args, // the arguments
  0, //arguments count
  String_methods_lastIndexOf_Luc2char_I_I_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_lastIndexOf_Luc2char_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_lastIndexOf_Luc2char__I_arg_ch = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ch", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_lastIndexOf_Luc2char__I_args[] = 
{
  &String_methods_lastIndexOf_Luc2char__I_arg_ch,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_lastIndexOf_Luc2char__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_lastIndexOf_Luc2char__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "lastIndexOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_L_lastIndexOf", // alternative name of method
  -1, // altlabelHashCode
  String_methods_lastIndexOf_Luc2char__I_args, // the arguments
  0, //arguments count
  String_methods_lastIndexOf_Luc2char__I_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_lastIndexOf_Luc2char__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_lastIndexOf_INLRString_I_I_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_lastIndexOf_INLRString_I_I_arg_fromIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "fromIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_lastIndexOf_INLRString_I_I_args[] = 
{
  &String_methods_lastIndexOf_INLRString_I_I_arg_str,
  &String_methods_lastIndexOf_INLRString_I_I_arg_fromIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_lastIndexOf_INLRString_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_lastIndexOf_INLRString_I_I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lastIndexOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_O_lastIndexOf", // alternative name of method
  -1, // altlabelHashCode
  String_methods_lastIndexOf_INLRString_I_I_args, // the arguments
  0, //arguments count
  String_methods_lastIndexOf_INLRString_I_I_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_lastIndexOf_INLRString_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_lastIndexOf_INLRString__I_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_lastIndexOf_INLRString__I_args[] = 
{
  &String_methods_lastIndexOf_INLRString__I_arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_lastIndexOf_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_lastIndexOf_INLRString__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "lastIndexOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_P_lastIndexOf", // alternative name of method
  -1, // altlabelHashCode
  String_methods_lastIndexOf_INLRString__I_args, // the arguments
  0, //arguments count
  String_methods_lastIndexOf_INLRString__I_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_lastIndexOf_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_lastIndexOfAny_INLRString_INLRStringArray__I_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_lastIndexOfAny_INLRString_INLRStringArray__I_arg_strings = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "strings", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_lastIndexOfAny_INLRString_INLRStringArray__I_args[] = 
{
  &String_methods_lastIndexOfAny_INLRString_INLRStringArray__I_arg_str,
  &String_methods_lastIndexOfAny_INLRString_INLRStringArray__I_arg_strings,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_lastIndexOfAny_INLRString_INLRStringArray__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_lastIndexOfAny_INLRString_INLRStringArray__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lastIndexOfAny", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_22_lastIndexOfAny", // alternative name of method
  -1, // altlabelHashCode
  String_methods_lastIndexOfAny_INLRString_INLRStringArray__I_args, // the arguments
  0, //arguments count
  String_methods_lastIndexOfAny_INLRString_INLRStringArray__I_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_lastIndexOfAny_INLRString_INLRStringArray__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_lastIndexOfAny_INLRString_INLRString__I_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_lastIndexOfAny_INLRString_INLRString__I_arg_chars = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "chars", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_lastIndexOfAny_INLRString_INLRString__I_args[] = 
{
  &String_methods_lastIndexOfAny_INLRString_INLRString__I_arg_str,
  &String_methods_lastIndexOfAny_INLRString_INLRString__I_arg_chars,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_lastIndexOfAny_INLRString_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_lastIndexOfAny_INLRString_INLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lastIndexOfAny", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_20_lastIndexOfAny", // alternative name of method
  -1, // altlabelHashCode
  String_methods_lastIndexOfAny_INLRString_INLRString__I_args, // the arguments
  0, //arguments count
  String_methods_lastIndexOfAny_INLRString_INLRString__I_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_lastIndexOfAny_INLRString_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_lastIndexOfAny_INLRString_INLRuccharArray__I_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_lastIndexOfAny_INLRString_INLRuccharArray__I_arg_chars = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "chars", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RuccharArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_lastIndexOfAny_INLRString_INLRuccharArray__I_args[] = 
{
  &String_methods_lastIndexOfAny_INLRString_INLRuccharArray__I_arg_str,
  &String_methods_lastIndexOfAny_INLRString_INLRuccharArray__I_arg_chars,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_lastIndexOfAny_INLRString_INLRuccharArray__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_lastIndexOfAny_INLRString_INLRuccharArray__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lastIndexOfAny", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_21_lastIndexOfAny", // alternative name of method
  -1, // altlabelHashCode
  String_methods_lastIndexOfAny_INLRString_INLRuccharArray__I_args, // the arguments
  0, //arguments count
  String_methods_lastIndexOfAny_INLRString_INLRuccharArray__I_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_lastIndexOfAny_INLRString_INLRuccharArray__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_left_I_LRString__arg_len = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "len", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_left_I_LRString__args[] = 
{
  &String_methods_left_I_LRString__arg_len,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_left_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_left_I_LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "left", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_13_left", // alternative name of method
  -1, // altlabelHashCode
  String_methods_left_I_LRString__args, // the arguments
  0, //arguments count
  String_methods_left_I_LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_left_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_leftPad_ILuc2char__LRString__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_leftPad_ILuc2char__LRString__arg_padchar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "padchar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_leftPad_ILuc2char__LRString__args[] = 
{
  &String_methods_leftPad_ILuc2char__LRString__arg_size,
  &String_methods_leftPad_ILuc2char__LRString__arg_padchar,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_leftPad_ILuc2char__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_leftPad_ILuc2char__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "leftPad", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2g_leftPad", // alternative name of method
  -1, // altlabelHashCode
  String_methods_leftPad_ILuc2char__LRString__args, // the arguments
  0, //arguments count
  String_methods_leftPad_ILuc2char__LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_leftPad_ILuc2char__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_leftPad_I_LRString__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_leftPad_I_LRString__args[] = 
{
  &String_methods_leftPad_I_LRString__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_leftPad_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_leftPad_I_LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "leftPad", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2h_leftPad", // alternative name of method
  -1, // altlabelHashCode
  String_methods_leftPad_I_LRString__args, // the arguments
  0, //arguments count
  String_methods_leftPad_I_LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_leftPad_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_length__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_length__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_length__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "length", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_s_length", // alternative name of method
  -1, // altlabelHashCode
  String_methods_length__I_args, // the arguments
  0, //arguments count
  String_methods_length__I_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_length__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_mid_II_LRString__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_mid_II_LRString__arg_len = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "len", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_mid_II_LRString__args[] = 
{
  &String_methods_mid_II_LRString__arg_start,
  &String_methods_mid_II_LRString__arg_len,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_mid_II_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_mid_II_LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "mid", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_15_mid", // alternative name of method
  -1, // altlabelHashCode
  String_methods_mid_II_LRString__args, // the arguments
  0, //arguments count
  String_methods_mid_II_LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_mid_II_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_narrow__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_narrow__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_narrow__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "narrow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1D_narrow", // alternative name of method
  -1, // altlabelHashCode
  String_methods_narrow__LRString__args, // the arguments
  0, //arguments count
  String_methods_narrow__LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_narrow__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_operator_pl_INLRString__LRString__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_operator_pl_INLRString__LRString__args[] = 
{
  &String_methods_operator_pl_INLRString__LRString__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_operator_pl_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_operator_pl_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_pl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2m_operator_pl", // alternative name of method
  -1, // altlabelHashCode
  String_methods_operator_pl_INLRString__LRString__args, // the arguments
  0, //arguments count
  String_methods_operator_pl_INLRString__LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_operator_pl_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_operator_pl_INLRObject__LRString__arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_operator_pl_INLRObject__LRString__args[] = 
{
  &String_methods_operator_pl_INLRObject__LRString__arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_operator_pl_INLRObject__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_operator_pl_INLRObject__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_pl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2n_operator_pl", // alternative name of method
  -1, // altlabelHashCode
  String_methods_operator_pl_INLRObject__LRString__args, // the arguments
  0, //arguments count
  String_methods_operator_pl_INLRObject__LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_operator_pl_INLRObject__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_operator_pl_Z_LRString__arg_v = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "v", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_operator_pl_Z_LRString__args[] = 
{
  &String_methods_operator_pl_Z_LRString__arg_v,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_operator_pl_Z_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_operator_pl_Z_LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_pl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2o_operator_pl", // alternative name of method
  -1, // altlabelHashCode
  String_methods_operator_pl_Z_LRString__args, // the arguments
  0, //arguments count
  String_methods_operator_pl_Z_LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_operator_pl_Z_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_operator_pl_C_LRString__arg_v = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "v", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_operator_pl_C_LRString__args[] = 
{
  &String_methods_operator_pl_C_LRString__arg_v,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_operator_pl_C_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_operator_pl_C_LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_pl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2p_operator_pl", // alternative name of method
  -1, // altlabelHashCode
  String_methods_operator_pl_C_LRString__args, // the arguments
  0, //arguments count
  String_methods_operator_pl_C_LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_operator_pl_C_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_operator_pl_Luc2char__LRString__arg_v = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "v", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_operator_pl_Luc2char__LRString__args[] = 
{
  &String_methods_operator_pl_Luc2char__LRString__arg_v,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_operator_pl_Luc2char__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_operator_pl_Luc2char__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_pl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2q_operator_pl", // alternative name of method
  -1, // altlabelHashCode
  String_methods_operator_pl_Luc2char__LRString__args, // the arguments
  0, //arguments count
  String_methods_operator_pl_Luc2char__LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_operator_pl_Luc2char__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_operator_pl_S_LRString__arg_v = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "v", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_operator_pl_S_LRString__args[] = 
{
  &String_methods_operator_pl_S_LRString__arg_v,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_operator_pl_S_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_operator_pl_S_LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_pl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2r_operator_pl", // alternative name of method
  -1, // altlabelHashCode
  String_methods_operator_pl_S_LRString__args, // the arguments
  0, //arguments count
  String_methods_operator_pl_S_LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_operator_pl_S_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_operator_pl_I_LRString__arg_v = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "v", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_operator_pl_I_LRString__args[] = 
{
  &String_methods_operator_pl_I_LRString__arg_v,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_operator_pl_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_operator_pl_I_LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_pl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2s_operator_pl", // alternative name of method
  -1, // altlabelHashCode
  String_methods_operator_pl_I_LRString__args, // the arguments
  0, //arguments count
  String_methods_operator_pl_I_LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_operator_pl_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_operator_pl_J_LRString__arg_v = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "v", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_operator_pl_J_LRString__args[] = 
{
  &String_methods_operator_pl_J_LRString__arg_v,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_operator_pl_J_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_operator_pl_J_LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_pl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2t_operator_pl", // alternative name of method
  -1, // altlabelHashCode
  String_methods_operator_pl_J_LRString__args, // the arguments
  0, //arguments count
  String_methods_operator_pl_J_LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_operator_pl_J_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_operator_pl_F_LRString__arg_v = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "v", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_operator_pl_F_LRString__args[] = 
{
  &String_methods_operator_pl_F_LRString__arg_v,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_operator_pl_F_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_operator_pl_F_LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_pl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2u_operator_pl", // alternative name of method
  -1, // altlabelHashCode
  String_methods_operator_pl_F_LRString__args, // the arguments
  0, //arguments count
  String_methods_operator_pl_F_LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_operator_pl_F_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_operator_pl_D_LRString__arg_v = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "v", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_operator_pl_D_LRString__args[] = 
{
  &String_methods_operator_pl_D_LRString__arg_v,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_operator_pl_D_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_operator_pl_D_LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_pl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2v_operator_pl", // alternative name of method
  -1, // altlabelHashCode
  String_methods_operator_pl_D_LRString__args, // the arguments
  0, //arguments count
  String_methods_operator_pl_D_LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_operator_pl_D_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_peekLine_I_LRString__arg_lineNo = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "lineNo", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_peekLine_I_LRString__args[] = 
{
  &String_methods_peekLine_I_LRString__arg_lineNo,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_peekLine_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_peekLine_I_LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "peekLine", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1x_peekLine", // alternative name of method
  -1, // altlabelHashCode
  String_methods_peekLine_I_LRString__args, // the arguments
  0, //arguments count
  String_methods_peekLine_I_LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_peekLine_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_regionMatches_IINLRString_IIZ_Z_arg_toffset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "toffset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_regionMatches_IINLRString_IIZ_Z_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_regionMatches_IINLRString_IIZ_Z_arg_otheroffset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "otheroffset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_regionMatches_IINLRString_IIZ_Z_arg_len = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "len", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_regionMatches_IINLRString_IIZ_Z_arg_ignoreCase = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "ignoreCase", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_regionMatches_IINLRString_IIZ_Z_args[] = 
{
  &String_methods_regionMatches_IINLRString_IIZ_Z_arg_toffset,
  &String_methods_regionMatches_IINLRString_IIZ_Z_arg_other,
  &String_methods_regionMatches_IINLRString_IIZ_Z_arg_otheroffset,
  &String_methods_regionMatches_IINLRString_IIZ_Z_arg_len,
  &String_methods_regionMatches_IINLRString_IIZ_Z_arg_ignoreCase,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_regionMatches_IINLRString_IIZ_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_regionMatches_IINLRString_IIZ_Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "regionMatches", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_A_regionMatches", // alternative name of method
  -1, // altlabelHashCode
  String_methods_regionMatches_IINLRString_IIZ_Z_args, // the arguments
  0, //arguments count
  String_methods_regionMatches_IINLRString_IIZ_Z_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_regionMatches_IINLRString_IIZ_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_regionMatches_IINLRString__Z_arg_toffset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "toffset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_regionMatches_IINLRString__Z_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_regionMatches_IINLRString__Z_args[] = 
{
  &String_methods_regionMatches_IINLRString__Z_arg_toffset,
  &String_methods_regionMatches_IINLRString__Z_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_regionMatches_IINLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_regionMatches_IINLRString__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "regionMatches", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_B_regionMatches", // alternative name of method
  -1, // altlabelHashCode
  String_methods_regionMatches_IINLRString__Z_args, // the arguments
  0, //arguments count
  String_methods_regionMatches_IINLRString__Z_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_regionMatches_IINLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_regionMatches_IINLRString_I_Z_arg_toffset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "toffset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_regionMatches_IINLRString_I_Z_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_regionMatches_IINLRString_I_Z_arg_otheroffset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "otheroffset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_regionMatches_IINLRString_I_Z_args[] = 
{
  &String_methods_regionMatches_IINLRString_I_Z_arg_toffset,
  &String_methods_regionMatches_IINLRString_I_Z_arg_other,
  &String_methods_regionMatches_IINLRString_I_Z_arg_otheroffset,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_regionMatches_IINLRString_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_regionMatches_IINLRString_I_Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "regionMatches", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_C_regionMatches", // alternative name of method
  -1, // altlabelHashCode
  String_methods_regionMatches_IINLRString_I_Z_args, // the arguments
  0, //arguments count
  String_methods_regionMatches_IINLRString_I_Z_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_regionMatches_IINLRString_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_regionMatches_IINLRString_II_Z_arg_toffset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "toffset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_regionMatches_IINLRString_II_Z_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_regionMatches_IINLRString_II_Z_arg_otheroffset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "otheroffset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_regionMatches_IINLRString_II_Z_arg_len = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "len", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_regionMatches_IINLRString_II_Z_args[] = 
{
  &String_methods_regionMatches_IINLRString_II_Z_arg_toffset,
  &String_methods_regionMatches_IINLRString_II_Z_arg_other,
  &String_methods_regionMatches_IINLRString_II_Z_arg_otheroffset,
  &String_methods_regionMatches_IINLRString_II_Z_arg_len,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_regionMatches_IINLRString_II_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_regionMatches_IINLRString_II_Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "regionMatches", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_D_regionMatches", // alternative name of method
  -1, // altlabelHashCode
  String_methods_regionMatches_IINLRString_II_Z_args, // the arguments
  0, //arguments count
  String_methods_regionMatches_IINLRString_II_Z_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_regionMatches_IINLRString_II_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_repeat_I_LRString__arg_ntimes = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ntimes", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_repeat_I_LRString__args[] = 
{
  &String_methods_repeat_I_LRString__arg_ntimes,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_repeat_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_repeat_I_LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "repeat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2d_repeat", // alternative name of method
  -1, // altlabelHashCode
  String_methods_repeat_I_LRString__args, // the arguments
  0, //arguments count
  String_methods_repeat_I_LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_repeat_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_replace_CC_LRString__arg_oldChar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "oldChar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_replace_CC_LRString__arg_newChar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "newChar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_replace_CC_LRString__args[] = 
{
  &String_methods_replace_CC_LRString__arg_oldChar,
  &String_methods_replace_CC_LRString__arg_newChar,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_replace_CC_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_replace_CC_LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "replace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1h_replace", // alternative name of method
  -1, // altlabelHashCode
  String_methods_replace_CC_LRString__args, // the arguments
  0, //arguments count
  String_methods_replace_CC_LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_replace_CC_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_replace_Luc2char_Luc2char__LRString__arg_oldChar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "oldChar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_replace_Luc2char_Luc2char__LRString__arg_newChar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "newChar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_replace_Luc2char_Luc2char__LRString__args[] = 
{
  &String_methods_replace_Luc2char_Luc2char__LRString__arg_oldChar,
  &String_methods_replace_Luc2char_Luc2char__LRString__arg_newChar,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_replace_Luc2char_Luc2char__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_replace_Luc2char_Luc2char__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "replace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1i_replace", // alternative name of method
  -1, // altlabelHashCode
  String_methods_replace_Luc2char_Luc2char__LRString__args, // the arguments
  0, //arguments count
  String_methods_replace_Luc2char_Luc2char__LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_replace_Luc2char_Luc2char__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_replace_INLRString_INLRString__LRString__arg_find = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "find", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_replace_INLRString_INLRString__LRString__arg_repl = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "repl", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_replace_INLRString_INLRString__LRString__args[] = 
{
  &String_methods_replace_INLRString_INLRString__LRString__arg_find,
  &String_methods_replace_INLRString_INLRString__LRString__arg_repl,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_replace_INLRString_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_replace_INLRString_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "replace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1j_replace", // alternative name of method
  -1, // altlabelHashCode
  String_methods_replace_INLRString_INLRString__LRString__args, // the arguments
  0, //arguments count
  String_methods_replace_INLRString_INLRString__LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_replace_INLRString_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_replace_IIINLRString__LRString__arg_startidx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "startidx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_replace_IIINLRString__LRString__arg_endidx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "endidx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_replace_IIINLRString__LRString__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_replace_IIINLRString__LRString__args[] = 
{
  &String_methods_replace_IIINLRString__LRString__arg_startidx,
  &String_methods_replace_IIINLRString__LRString__arg_endidx,
  &String_methods_replace_IIINLRString__LRString__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_replace_IIINLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_replace_IIINLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "replace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1k_replace", // alternative name of method
  -1, // altlabelHashCode
  String_methods_replace_IIINLRString__LRString__args, // the arguments
  0, //arguments count
  String_methods_replace_IIINLRString__LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_replace_IIINLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_right_I_LRString__arg_len = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "len", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_right_I_LRString__args[] = 
{
  &String_methods_right_I_LRString__arg_len,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_right_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_right_I_LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "right", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_14_right", // alternative name of method
  -1, // altlabelHashCode
  String_methods_right_I_LRString__args, // the arguments
  0, //arguments count
  String_methods_right_I_LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_right_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_rightPad_ILuc2char__LRString__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_rightPad_ILuc2char__LRString__arg_padchar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "padchar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_rightPad_ILuc2char__LRString__args[] = 
{
  &String_methods_rightPad_ILuc2char__LRString__arg_size,
  &String_methods_rightPad_ILuc2char__LRString__arg_padchar,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_rightPad_ILuc2char__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_rightPad_ILuc2char__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "rightPad", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2e_rightPad", // alternative name of method
  -1, // altlabelHashCode
  String_methods_rightPad_ILuc2char__LRString__args, // the arguments
  0, //arguments count
  String_methods_rightPad_ILuc2char__LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_rightPad_ILuc2char__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_rightPad_I_LRString__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_rightPad_I_LRString__args[] = 
{
  &String_methods_rightPad_I_LRString__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_rightPad_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_rightPad_I_LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "rightPad", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2f_rightPad", // alternative name of method
  -1, // altlabelHashCode
  String_methods_rightPad_I_LRString__args, // the arguments
  0, //arguments count
  String_methods_rightPad_I_LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_rightPad_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_split__LRStringArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_split__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_split__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "split", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_29_split", // alternative name of method
  -1, // altlabelHashCode
  String_methods_split__LRStringArray__args, // the arguments
  0, //arguments count
  String_methods_split__LRStringArray__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_split__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_split_Luc2char__LRStringArray__arg_delimiter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "delimiter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_split_Luc2char__LRStringArray__args[] = 
{
  &String_methods_split_Luc2char__LRStringArray__arg_delimiter,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_split_Luc2char__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_split_Luc2char__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "split", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_2a_split", // alternative name of method
  -1, // altlabelHashCode
  String_methods_split_Luc2char__LRStringArray__args, // the arguments
  0, //arguments count
  String_methods_split_Luc2char__LRStringArray__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_split_Luc2char__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_split_INLRString__LRStringArray__arg_delimiterChars = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "delimiterChars", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_split_INLRString__LRStringArray__args[] = 
{
  &String_methods_split_INLRString__LRStringArray__arg_delimiterChars,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_split_INLRString__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_split_INLRString__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "split", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_2b_split", // alternative name of method
  -1, // altlabelHashCode
  String_methods_split_INLRString__LRStringArray__args, // the arguments
  0, //arguments count
  String_methods_split_INLRString__LRStringArray__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_split_INLRString__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_startsWith_INLRString_I_Z_arg_prefix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "prefix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_startsWith_INLRString_I_Z_arg_toffset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "toffset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_startsWith_INLRString_I_Z_args[] = 
{
  &String_methods_startsWith_INLRString_I_Z_arg_prefix,
  &String_methods_startsWith_INLRString_I_Z_arg_toffset,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_startsWith_INLRString_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_startsWith_INLRString_I_Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "startsWith", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_x_startsWith", // alternative name of method
  -1, // altlabelHashCode
  String_methods_startsWith_INLRString_I_Z_args, // the arguments
  0, //arguments count
  String_methods_startsWith_INLRString_I_Z_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_startsWith_INLRString_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_startsWith_INLRString__Z_arg_prefix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "prefix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_startsWith_INLRString__Z_args[] = 
{
  &String_methods_startsWith_INLRString__Z_arg_prefix,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_startsWith_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_startsWith_INLRString__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "startsWith", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_y_startsWith", // alternative name of method
  -1, // altlabelHashCode
  String_methods_startsWith_INLRString__Z_args, // the arguments
  0, //arguments count
  String_methods_startsWith_INLRString__Z_exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_startsWith_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_storageType__LStringStorageType__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_storageType__LStringStorageType__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_storageType__LStringStorageType_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "storageType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_k_storageType", // alternative name of method
  -1, // altlabelHashCode
  String_methods_storageType__LStringStorageType__args, // the arguments
  0, //arguments count
  String_methods_storageType__LStringStorageType__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_storageType__LStringStorageType__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_substr_II_LRString__arg_startidx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "startidx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_substr_II_LRString__arg_endidx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "endidx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_substr_II_LRString__args[] = 
{
  &String_methods_substr_II_LRString__arg_startidx,
  &String_methods_substr_II_LRString__arg_endidx,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_substr_II_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_substr_II_LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "substr", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_Z_substr", // alternative name of method
  -1, // altlabelHashCode
  String_methods_substr_II_LRString__args, // the arguments
  0, //arguments count
  String_methods_substr_II_LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_substr_II_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_substr_I_LRString__arg_startidx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "startidx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_substr_I_LRString__args[] = 
{
  &String_methods_substr_I_LRString__arg_startidx,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_substr_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_substr_I_LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "substr", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_10_substr", // alternative name of method
  -1, // altlabelHashCode
  String_methods_substr_I_LRString__args, // the arguments
  0, //arguments count
  String_methods_substr_I_LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_substr_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_substring_II_LRString__arg_startidx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "startidx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_substring_II_LRString__arg_endidx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "endidx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_substring_II_LRString__args[] = 
{
  &String_methods_substring_II_LRString__arg_startidx,
  &String_methods_substring_II_LRString__arg_endidx,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_substring_II_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_substring_II_LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "substring", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_11_substring", // alternative name of method
  -1, // altlabelHashCode
  String_methods_substring_II_LRString__args, // the arguments
  0, //arguments count
  String_methods_substring_II_LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_substring_II_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_substring_I_LRString__arg_startidx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "startidx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_substring_I_LRString__args[] = 
{
  &String_methods_substring_I_LRString__arg_startidx,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_substring_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_substring_I_LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "substring", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_12_substring", // alternative name of method
  -1, // altlabelHashCode
  String_methods_substring_I_LRString__args, // the arguments
  0, //arguments count
  String_methods_substring_I_LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_substring_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_substringAfter_INLRString__LRString__arg_find = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "find", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_substringAfter_INLRString__LRString__args[] = 
{
  &String_methods_substringAfter_INLRString__LRString__arg_find,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_substringAfter_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_substringAfter_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "substringAfter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_17_substringAfter", // alternative name of method
  -1, // altlabelHashCode
  String_methods_substringAfter_INLRString__LRString__args, // the arguments
  0, //arguments count
  String_methods_substringAfter_INLRString__LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_substringAfter_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_substringAfterLast_INLRString__LRString__arg_find = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "find", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_substringAfterLast_INLRString__LRString__args[] = 
{
  &String_methods_substringAfterLast_INLRString__LRString__arg_find,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_substringAfterLast_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_substringAfterLast_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "substringAfterLast", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_19_substringAfterLast", // alternative name of method
  -1, // altlabelHashCode
  String_methods_substringAfterLast_INLRString__LRString__args, // the arguments
  0, //arguments count
  String_methods_substringAfterLast_INLRString__LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_substringAfterLast_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_substringBefore_INLRString__LRString__arg_find = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "find", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_substringBefore_INLRString__LRString__args[] = 
{
  &String_methods_substringBefore_INLRString__LRString__arg_find,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_substringBefore_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_substringBefore_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "substringBefore", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_16_substringBefore", // alternative name of method
  -1, // altlabelHashCode
  String_methods_substringBefore_INLRString__LRString__args, // the arguments
  0, //arguments count
  String_methods_substringBefore_INLRString__LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_substringBefore_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_substringBeforeLast_INLRString__LRString__arg_find = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "find", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_substringBeforeLast_INLRString__LRString__args[] = 
{
  &String_methods_substringBeforeLast_INLRString__LRString__arg_find,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_substringBeforeLast_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_substringBeforeLast_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "substringBeforeLast", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_18_substringBeforeLast", // alternative name of method
  -1, // altlabelHashCode
  String_methods_substringBeforeLast_INLRString__LRString__args, // the arguments
  0, //arguments count
  String_methods_substringBeforeLast_INLRString__LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_substringBeforeLast_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_toLowerCase__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_toLowerCase__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_toLowerCase__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toLowerCase", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1a_toLowerCase", // alternative name of method
  -1, // altlabelHashCode
  String_methods_toLowerCase__LRString__args, // the arguments
  0, //arguments count
  String_methods_toLowerCase__LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_toLowerCase__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_toUpperCase__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_toUpperCase__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_toUpperCase__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toUpperCase", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1c_toUpperCase", // alternative name of method
  -1, // altlabelHashCode
  String_methods_toUpperCase__LRString__args, // the arguments
  0, //arguments count
  String_methods_toUpperCase__LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_toUpperCase__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_tocharArray__LRcharArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_tocharArray__LRcharArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_tocharArray__LRcharArray_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "tocharArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RcharArray::clazzInfo(), // return type
  "_Y_tocharArray", // alternative name of method
  -1, // altlabelHashCode
  String_methods_tocharArray__LRcharArray__args, // the arguments
  0, //arguments count
  String_methods_tocharArray__LRcharArray__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_tocharArray__LRcharArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_trim_I_LRString__arg_trimflags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "trimflags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_trim_I_LRString__args[] = 
{
  &String_methods_trim_I_LRString__arg_trimflags,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_trim_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_trim_I_LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "trim", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1e_trim", // alternative name of method
  -1, // altlabelHashCode
  String_methods_trim_I_LRString__args, // the arguments
  0, //arguments count
  String_methods_trim_I_LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_trim_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_trim__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_trim__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_trim__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "trim", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1f_trim", // alternative name of method
  -1, // altlabelHashCode
  String_methods_trim__LRString__args, // the arguments
  0, //arguments count
  String_methods_trim__LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_trim__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_valueOf_Z_LRString__arg_z = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "z", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_valueOf_Z_LRString__args[] = 
{
  &String_methods_valueOf_Z_LRString__arg_z,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_valueOf_Z_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_valueOf_Z_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "valueOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1l_valueOf", // alternative name of method
  -1, // altlabelHashCode
  String_methods_valueOf_Z_LRString__args, // the arguments
  0, //arguments count
  String_methods_valueOf_Z_LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_valueOf_Z_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_valueOf_I_LRString__arg_z = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "z", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_valueOf_I_LRString__args[] = 
{
  &String_methods_valueOf_I_LRString__arg_z,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_valueOf_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_valueOf_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "valueOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1m_valueOf", // alternative name of method
  -1, // altlabelHashCode
  String_methods_valueOf_I_LRString__args, // the arguments
  0, //arguments count
  String_methods_valueOf_I_LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_valueOf_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_valueOf_C_LRString__arg_z = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "z", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_valueOf_C_LRString__args[] = 
{
  &String_methods_valueOf_C_LRString__arg_z,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_valueOf_C_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_valueOf_C_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "valueOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1n_valueOf", // alternative name of method
  -1, // altlabelHashCode
  String_methods_valueOf_C_LRString__args, // the arguments
  0, //arguments count
  String_methods_valueOf_C_LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_valueOf_C_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_valueOf_Luc2char__LRString__arg_z = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "z", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_valueOf_Luc2char__LRString__args[] = 
{
  &String_methods_valueOf_Luc2char__LRString__arg_z,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_valueOf_Luc2char__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_valueOf_Luc2char__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "valueOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1o_valueOf", // alternative name of method
  -1, // altlabelHashCode
  String_methods_valueOf_Luc2char__LRString__args, // the arguments
  0, //arguments count
  String_methods_valueOf_Luc2char__LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_valueOf_Luc2char__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_valueOf_J_LRString__arg_z = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "z", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_valueOf_J_LRString__args[] = 
{
  &String_methods_valueOf_J_LRString__arg_z,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_valueOf_J_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_valueOf_J_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "valueOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1p_valueOf", // alternative name of method
  -1, // altlabelHashCode
  String_methods_valueOf_J_LRString__args, // the arguments
  0, //arguments count
  String_methods_valueOf_J_LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_valueOf_J_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_valueOf_INLRObject__LRString__arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_valueOf_INLRObject__LRString__args[] = 
{
  &String_methods_valueOf_INLRObject__LRString__arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_valueOf_INLRObject__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_valueOf_INLRObject__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "valueOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1s_valueOf", // alternative name of method
  -1, // altlabelHashCode
  String_methods_valueOf_INLRObject__LRString__args, // the arguments
  0, //arguments count
  String_methods_valueOf_INLRObject__LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_valueOf_INLRObject__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_valueOf_F_LRString__arg_z = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "z", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_valueOf_F_LRString__args[] = 
{
  &String_methods_valueOf_F_LRString__arg_z,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_valueOf_F_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_valueOf_F_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "valueOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1q_valueOf", // alternative name of method
  -1, // altlabelHashCode
  String_methods_valueOf_F_LRString__args, // the arguments
  0, //arguments count
  String_methods_valueOf_F_LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_valueOf_F_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo String_methods_valueOf_D_LRString__arg_z = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "z", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* String_methods_valueOf_D_LRString__args[] = 
{
  &String_methods_valueOf_D_LRString__arg_z,
  0
};

::acdk::lang::dmi::ClazzInfo* String_methods_valueOf_D_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo String_method_valueOf_D_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "valueOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1r_valueOf", // alternative name of method
  -1, // altlabelHashCode
  String_methods_valueOf_D_LRString__args, // the arguments
  0, //arguments count
  String_methods_valueOf_D_LRString__exceptions, // the declared exceptions
  String_MetainfoWrapper::String_method_valueOf_D_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _String_methods[] = 
{
  &String_method_GetClass__L_acdk_lang_RClass_,
  &String_method_String_INLRbyteArray_II_LRString_,
  &String_method_String_INLRbyteArray__LRString_,
  &String_method_String_INLRbyteArray_I_LRString_,
  &String_method_String_INLRbyteArray_INLacdk_locale_RDecoder_II_LRString_,
  &String_method_String_INLRbyteArray_INLacdk_locale_RDecoder__LRString_,
  &String_method_String_INLRbyteArray_INLacdk_locale_RDecoder_I_LRString_,
  &String_method_String_INLRcharArray_II_LRString_,
  &String_method_String_INLRcharArray__LRString_,
  &String_method_String_INLRString_I_LRString_,
  &String_method_String_INLRStringBuffer_II_LRString_,
  &String_method_String_INLRStringBuffer__LRString_,
  &String_method_String_INLRStringBuffer_I_LRString_,
  &String_method_String_INLRString_II_LRString_,
  &String_method_String_INLRString__LRString_,
  &String_method_String__LRString_,
  &String_method_String_INLRcharArray_I_LRString_,
  &String_method_String_INLRuccharArray_II_LRString_,
  &String_method_String_INLRuccharArray__LRString_,
  &String_method_String_INLRuccharArray_I_LRString_,
  &String_method__itoa_II_LRString_,
  &String_method__jltoa_JI_LRString_,
  &String_method_center_ILuc2char__LRString_,
  &String_method_center_I_LRString_,
  &String_method_charAt_I_Luc2char_,
  &String_method_characterClass__LCharacterClass_,
  &String_method_compareTo_INLRString__I,
  &String_method_compareToIgnoreCase_INLRString__I,
  &String_method_concat_INLRString__LRString_,
  &String_method_contains_INLRString_Luc2char__Z,
  &String_method_contains_INLRString_INLRString__Z,
  &String_method_containsNone_INLRString_INLRString__Z,
  &String_method_containsOnly_INLRString_INLRString__Z,
  &String_method_convert_III_LRString_,
  &String_method_convert_I_LRString_,
  &String_method_convertToNative__LRString_,
  &String_method_copyValueOf_INLRcharArray_II_LRString_,
  &String_method_copyValueOf_INLRcharArray__LRString_,
  &String_method_copyValueOf_INLRcharArray_I_LRString_,
  &String_method_create_instance__LRObject_,
  &String_method_decodeAscUnicode__LRString_,
  &String_method_defaultString_INLRString__LRString_,
  &String_method_defaultString_INLRString_INLRString__LRString_,
  &String_method_deleteWhitespace_INLRString__LRString_,
  &String_method_elementCount_C_I,
  &String_method_elementCount_Luc2char__I,
  &String_method_elementCount_INLRString__I,
  &String_method_emptyString__LRString_,
  &String_method_encodeAscUnicode__LRString_,
  &String_method_endsWith_INLRString__Z,
  &String_method_equals_INLRString__Z,
  &String_method_equalsIgnoreCase_INLRString__Z,
  &String_method_getBytes__LRbyteArray_,
  &String_method_getBytes_INLRString__LRbyteArray_,
  &String_method_getBytes_INLacdk_locale_REncoder__LRbyteArray_,
  &String_method_getCharCapacity__I,
  &String_method_getChars__LRcharArray_,
  &String_method_getChars_IIINLRcharArray_IINLacdk_locale_REncoder__V,
  &String_method_getChars_INLacdk_locale_REncoder__LRcharArray_,
  &String_method_getDistance_INLRString_INLRString__I,
  &String_method_getEmptyString__LRString_,
  &String_method_getFirstIndexOf_INLRString__I,
  &String_method_getMaxCharacterSize__I,
  &String_method_getNormalized__LRString_,
  &String_method_getUc2Chars_IIINLRuccharArray_I_V,
  &String_method_getUcChars__LRuccharArray_,
  &String_method_indexOf_CI_I,
  &String_method_indexOf_C_I,
  &String_method_indexOf_Luc2char_I_I,
  &String_method_indexOf_Luc2char__I,
  &String_method_indexOf_INLRString_I_I,
  &String_method_indexOf_INLRString__I,
  &String_method_indexOfAny_INLRString_INLRuccharArray__I,
  &String_method_indexOfAny_INLRString_INLRString__I,
  &String_method_indexOfAny_INLRString_INLRStringArray__I,
  &String_method_indexOfDifference_INLRString_INLRString__I,
  &String_method_intern__LRString_,
  &String_method_isAlpha_INLRString__Z,
  &String_method_isAlphaSpace_INLRString__Z,
  &String_method_isAlphanumeric_INLRString__Z,
  &String_method_isAlphanumericSpace_INLRString__Z,
  &String_method_isBlank_INLRString__Z,
  &String_method_isCChar__Z,
  &String_method_isCharacterClass_I_Z,
  &String_method_isEmpty_INLRString__Z,
  &String_method_isLowerCase__Z,
  &String_method_isNotBlank_INLRString__Z,
  &String_method_isNotEmpty_INLRString__Z,
  &String_method_isNumeric_INLRString__Z,
  &String_method_isNumericSpace_INLRString__Z,
  &String_method_isUc2Char__Z,
  &String_method_isUc4Char__Z,
  &String_method_isUpperCase__Z,
  &String_method_isUtf8Char__Z,
  &String_method_join_INLacdk_util_RIterator__LRString_,
  &String_method_join_INLacdk_util_RIterator_Luc2char__LRString_,
  &String_method_join_INLacdk_util_RIterator_INLRString__LRString_,
  &String_method_join_INLRObjectArray__LRString_,
  &String_method_join_INLRObjectArray_Luc2char__LRString_,
  &String_method_join_INLRObjectArray_INLRString__LRString_,
  &String_method_lastIndexOf_CI_I,
  &String_method_lastIndexOf_C_I,
  &String_method_lastIndexOf_Luc2char_I_I,
  &String_method_lastIndexOf_Luc2char__I,
  &String_method_lastIndexOf_INLRString_I_I,
  &String_method_lastIndexOf_INLRString__I,
  &String_method_lastIndexOfAny_INLRString_INLRStringArray__I,
  &String_method_lastIndexOfAny_INLRString_INLRString__I,
  &String_method_lastIndexOfAny_INLRString_INLRuccharArray__I,
  &String_method_left_I_LRString_,
  &String_method_leftPad_ILuc2char__LRString_,
  &String_method_leftPad_I_LRString_,
  &String_method_length__I,
  &String_method_mid_II_LRString_,
  &String_method_narrow__LRString_,
  &String_method_operator_pl_INLRString__LRString_,
  &String_method_operator_pl_INLRObject__LRString_,
  &String_method_operator_pl_Z_LRString_,
  &String_method_operator_pl_C_LRString_,
  &String_method_operator_pl_Luc2char__LRString_,
  &String_method_operator_pl_S_LRString_,
  &String_method_operator_pl_I_LRString_,
  &String_method_operator_pl_J_LRString_,
  &String_method_operator_pl_F_LRString_,
  &String_method_operator_pl_D_LRString_,
  &String_method_peekLine_I_LRString_,
  &String_method_regionMatches_IINLRString_IIZ_Z,
  &String_method_regionMatches_IINLRString__Z,
  &String_method_regionMatches_IINLRString_I_Z,
  &String_method_regionMatches_IINLRString_II_Z,
  &String_method_repeat_I_LRString_,
  &String_method_replace_CC_LRString_,
  &String_method_replace_Luc2char_Luc2char__LRString_,
  &String_method_replace_INLRString_INLRString__LRString_,
  &String_method_replace_IIINLRString__LRString_,
  &String_method_right_I_LRString_,
  &String_method_rightPad_ILuc2char__LRString_,
  &String_method_rightPad_I_LRString_,
  &String_method_split__LRStringArray_,
  &String_method_split_Luc2char__LRStringArray_,
  &String_method_split_INLRString__LRStringArray_,
  &String_method_startsWith_INLRString_I_Z,
  &String_method_startsWith_INLRString__Z,
  &String_method_storageType__LStringStorageType_,
  &String_method_substr_II_LRString_,
  &String_method_substr_I_LRString_,
  &String_method_substring_II_LRString_,
  &String_method_substring_I_LRString_,
  &String_method_substringAfter_INLRString__LRString_,
  &String_method_substringAfterLast_INLRString__LRString_,
  &String_method_substringBefore_INLRString__LRString_,
  &String_method_substringBeforeLast_INLRString__LRString_,
  &String_method_toLowerCase__LRString_,
  &String_method_toUpperCase__LRString_,
  &String_method_tocharArray__LRcharArray_,
  &String_method_trim_I_LRString_,
  &String_method_trim__LRString_,
  &String_method_valueOf_Z_LRString_,
  &String_method_valueOf_I_LRString_,
  &String_method_valueOf_C_LRString_,
  &String_method_valueOf_Luc2char__LRString_,
  &String_method_valueOf_J_LRString_,
  &String_method_valueOf_INLRObject__LRString_,
  &String_method_valueOf_F_LRString_,
  &String_method_valueOf_D_LRString_,
  0
};


struct String_MetaInfoInitializer
{  String_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = String::clazzInfo();
    ci->fields =  _String_fields;
    ci->methods =  _String_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
String_MetaInfoInitializer String_MetaInfoInitializer_staticinstance__;


struct String_clazzInfo_ClazzAttributesResInitializer38
{
  String_clazzInfo_ClazzAttributesResInitializer38()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&String_method_storageType__LStringStorageType_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)StringStorageTypeMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&String_method_characterClass__LCharacterClass_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CharacterClassMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&String_methods_isCharacterClass_I_Z_arg_cc, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CharacterClassMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&String_methods_convert_III_LRString__arg_onMalformed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)acdk::locale::CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&String_methods_convert_III_LRString__arg_onUnmappable, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)acdk::locale::CodingErrorActionMetaInf::GetEnumInfo()));
  }
};

String_clazzInfo_ClazzAttributesResInitializer38 String_clazzInfo_ClazzAttributesResInitializer38_instance;



} // namespace acdk
} // namespace lang

