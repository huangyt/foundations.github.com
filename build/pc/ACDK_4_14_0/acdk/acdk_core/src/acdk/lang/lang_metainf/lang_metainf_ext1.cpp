// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../lang.h"
#include "../ArithmeticException.h"
#include "../ArrayIndexOutOfBoundsException.h"
#include "../BasicArray.h"
#include "../BasicArrayInl.h"
#include "../Boolean.h"
#include "../Byte.h"
#include "../ByteBuffer.h"
#include "../Character.h"
#include "../Class.h"
#include "../ClassCastException.h"
#include "../ClassLoader.h"
#include "../ClassNotFoundException.h"
#include "../Cloneable.h"
#include "../CloneNotSupportedException.h"
#include "../CmdLineOption.h"
#include "../CmdLineParseException.h"
#include "../CmdLineParser.h"
#include "../Comparable.h"
#include "../DmiException.h"
#include "../DmiTypeConversionException.h"
#include "../Double.h"
#include "../Error.h"
#include "../Exception.h"
#include "../ExceptionDeclarations.h"
#include "../ExtObject.h"
#include "../Float.h"
#include "../IllegalAccessException.h"
#include "../IllegalArgumentException.h"
#include "../IllegalMonitorStateException.h"
#include "../IllegalStateException.h"
#include "../IllegalThreadStateException.h"
#include "../IndexOutOfBoundsException.h"
#include "../InOutPreDeclaration.h"
#include "../InstantiationException.h"
#include "../Integer.h"
#include "../InterfaceBase.h"
#include "../InterruptedException.h"
#include "../lang.h"
#include "../lang_all.h"
#include "../Long.h"
#include "../Math.h"
#include "../NoSuchDmiElementException.h"
#include "../NoSuchElementException.h"
#include "../NoSuchFieldException.h"
#include "../NoSuchMethodException.h"
#include "../NullPointerException.h"
#include "../Number.h"
#include "../NumberFormatException.h"
#include "../Object.h"
#include "../ObjectArrayBase.h"
#include "../ObjectArrayBaseInl.h"
#include "../ObjectArrayImpl.h"
#include "../ObjectBase.h"
#include "../ObjectDebug.h"
#include "../ObjectImpl.h"
#include "../ObjectInline.h"
#include "../OutOfMemoryError.h"
#include "../Package.h"
#include "../ParamsMismatchException.h"
#include "../Process.h"
#include "../Runnable.h"
#include "../Runtime.h"
#include "../RuntimeException.h"
#include "../SharedLibrary.h"
#include "../Short.h"
#include "../StackFrame.h"
#include "../StackOverflowError.h"
#include "../String.h"
#include "../StringBuffer.h"
#include "../StringConcenator.h"
#include "../StringIndexOutOfBoundsException.h"
#include "../StringInline.h"
#include "../StringUtf8Utils.h"
#include "../System.h"
#include "../SystemError.h"
#include "../SystemInline.h"
#include "../SystemIntern.h"
#include "../Thread.h"
#include "../ThreadDeath.h"
#include "../ThreadGroup.h"
#include "../ThreadImpl.h"
#include "../ThreadLocal.h"
#include "../ThreadLocalImpl.h"
#include "../Throwable.h"
#include "../UnicodeCharacter.h"
#include "../UnsupportedOperationException.h"
#include "../Void.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
Character_create_array(int length)
{
  return new ObjectArrayImpl<RCharacter>(length);
}

//static
::acdk::lang::RObject
Character_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Character_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Character_method_Character__LRCharacter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Character();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Character_method_Character_C_LRCharacter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Character(::acdk::lang::dmi::castTo< char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Character_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Character::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Character_method_asciiDigit_CI_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Character::asciiDigit(::acdk::lang::dmi::castTo< char>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Character_method_asciiDigit_Luc2char_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Character::asciiDigit(::acdk::lang::dmi::castTo< uc2char>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Character_method_charValue__C_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Character* This = dmi_cast<Character>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Character::charValue();
    else
      ret = This->charValue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Character_method_compareTo_INLRCharacter__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Character* This = dmi_cast<Character>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Character::compareTo(::acdk::lang::dmi::castTo< RCharacter>(args[0], dc));
    else
      ret = This->compareTo(::acdk::lang::dmi::castTo< RCharacter>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Character_method_compareTo_UC_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Character* This = dmi_cast<Character>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Character::compareTo(::acdk::lang::dmi::castTo< ucchar>(args[0], dc));
    else
      ret = This->compareTo(::acdk::lang::dmi::castTo< ucchar>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Character_method_create_instance__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Character::create_instance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Character_method_decVal_C_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Character::decVal(::acdk::lang::dmi::castTo< char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Character_method_decVal_UC_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Character::decVal(::acdk::lang::dmi::castTo< ucchar>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Character_method_equals_UC_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Character* This = dmi_cast<Character>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Character::equals(::acdk::lang::dmi::castTo< ucchar>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< ucchar>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Character_method_getTYPE__LRClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Character::getTYPE();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Character_method_isControl_Luc2char__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Character::isControl(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Character_method_isControl_C_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Character::isControl(::acdk::lang::dmi::castTo< char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Character_method_isDigit_C_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Character::isDigit(::acdk::lang::dmi::castTo< char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Character_method_isDigit_Luc2char__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Character::isDigit(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Character_method_isHexDigit_C_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Character::isHexDigit(::acdk::lang::dmi::castTo< char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Character_method_isHexDigit_Luc2char__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Character::isHexDigit(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Character_method_isJavaIdentifierPart_C_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Character::isJavaIdentifierPart(::acdk::lang::dmi::castTo< char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Character_method_isJavaIdentifierPart_Luc2char__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Character::isJavaIdentifierPart(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Character_method_isJavaIdentifierStart_Luc2char__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Character::isJavaIdentifierStart(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Character_method_isJavaIdentifierStart_C_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Character::isJavaIdentifierStart(::acdk::lang::dmi::castTo< char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Character_method_isLetter_C_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Character::isLetter(::acdk::lang::dmi::castTo< char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Character_method_isLetter_Luc2char__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Character::isLetter(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Character_method_isLetterOrDigit_C_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Character::isLetterOrDigit(::acdk::lang::dmi::castTo< char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Character_method_isLetterOrDigit_Luc2char__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Character::isLetterOrDigit(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Character_method_isLowerCase_C_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Character::isLowerCase(::acdk::lang::dmi::castTo< char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Character_method_isLowerCase_Luc2char__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Character::isLowerCase(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Character_method_isSpace_C_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Character::isSpace(::acdk::lang::dmi::castTo< char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Character_method_isSpace_Luc2char__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Character::isSpace(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Character_method_isUnicodeIdentifierPart_C_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Character::isUnicodeIdentifierPart(::acdk::lang::dmi::castTo< char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Character_method_isUnicodeIdentifierPart_Luc2char__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Character::isUnicodeIdentifierPart(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Character_method_isUnicodeIdentifierStart_C_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Character::isUnicodeIdentifierStart(::acdk::lang::dmi::castTo< char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Character_method_isUnicodeIdentifierStart_Luc2char__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Character::isUnicodeIdentifierStart(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Character_method_isUpperCase_C_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Character::isUpperCase(::acdk::lang::dmi::castTo< char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Character_method_isUpperCase_Luc2char__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Character::isUpperCase(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Character_method_isWhitespace_C_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Character::isWhitespace(::acdk::lang::dmi::castTo< char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Character_method_isWhitespace_Luc2char__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Character::isWhitespace(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Character_method_toLowerCase_C_C_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Character::toLowerCase(::acdk::lang::dmi::castTo< char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Character_method_toLowerCase_Luc2char__Luc2char__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Character::toLowerCase(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Character_method_toString_C_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Character::toString(::acdk::lang::dmi::castTo< char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Character_method_toString_Luc2char__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Character::toString(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Character_method_toUpperCase_C_C_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Character::toUpperCase(::acdk::lang::dmi::castTo< char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Character_method_toUpperCase_Luc2char__Luc2char__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Character::toUpperCase(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Character_fields_MAX_RADIX_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Character::MAX_RADIX, flags);
    else
      Character::MAX_RADIX = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Character_fields_MAX_VALUE_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Character::MAX_VALUE, flags);
    else
      Character::MAX_VALUE = ::acdk::lang::dmi::castTo< char>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Character_fields_MIN_RADIX_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Character::MIN_RADIX, flags);
    else
      Character::MIN_RADIX = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Character_fields_MIN_VALUE_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Character::MIN_VALUE, flags);
    else
      Character::MIN_VALUE = ::acdk::lang::dmi::castTo< char>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Character_fields_value_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Character* This = dmi_cast<Character>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->value, flags);
    else
      This->value = ::acdk::lang::dmi::castTo< char>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo Character_fields_MAX_RADIX = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "MAX_RADIX", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Character_MetainfoWrapper::Character_fields_MAX_RADIX_accessor, // read/write access to this fields
  (void*)&Character::MAX_RADIX // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Character_fields_MAX_VALUE = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "MAX_VALUE", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz(),
  Character_MetainfoWrapper::Character_fields_MAX_VALUE_accessor, // read/write access to this fields
  (void*)&Character::MAX_VALUE // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Character_fields_MIN_RADIX = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "MIN_RADIX", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Character_MetainfoWrapper::Character_fields_MIN_RADIX_accessor, // read/write access to this fields
  (void*)&Character::MIN_RADIX // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Character_fields_MIN_VALUE = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "MIN_VALUE", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz(),
  Character_MetainfoWrapper::Character_fields_MIN_VALUE_accessor, // read/write access to this fields
  (void*)&Character::MIN_VALUE // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Character_fields_value = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "value", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz(),
  Character_MetainfoWrapper::Character_fields_value_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _Character_fields[] = 
{
  &Character_fields_MAX_RADIX,
  &Character_fields_MAX_VALUE,
  &Character_fields_MIN_RADIX,
  &Character_fields_MIN_VALUE,
  &Character_fields_value,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Character_methods_Character__LRCharacter__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Character_methods_Character__LRCharacter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Character_method_Character__LRCharacter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Character", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Character::clazzInfo(), // return type
  "_1_Character", // alternative name of method
  -1, // altlabelHashCode
  Character_methods_Character__LRCharacter__args, // the arguments
  0, //arguments count
  Character_methods_Character__LRCharacter__exceptions, // the declared exceptions
  Character_MetainfoWrapper::Character_method_Character__LRCharacter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Character_methods_Character_C_LRCharacter__arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Character_methods_Character_C_LRCharacter__args[] = 
{
  &Character_methods_Character_C_LRCharacter__arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* Character_methods_Character_C_LRCharacter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Character_method_Character_C_LRCharacter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Character", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Character::clazzInfo(), // return type
  "_2_Character", // alternative name of method
  -1, // altlabelHashCode
  Character_methods_Character_C_LRCharacter__args, // the arguments
  0, //arguments count
  Character_methods_Character_C_LRCharacter__exceptions, // the declared exceptions
  Character_MetainfoWrapper::Character_method_Character_C_LRCharacter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Character_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Character_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Character_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_I_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Character_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Character_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Character_MetainfoWrapper::Character_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Character_methods_asciiDigit_CI_I_arg_ch = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ch", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Character_methods_asciiDigit_CI_I_arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Character_methods_asciiDigit_CI_I_args[] = 
{
  &Character_methods_asciiDigit_CI_I_arg_ch,
  &Character_methods_asciiDigit_CI_I_arg_idx,
  0
};

::acdk::lang::dmi::ClazzInfo* Character_methods_asciiDigit_CI_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Character_method_asciiDigit_CI_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "asciiDigit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_asciiDigit", // alternative name of method
  -1, // altlabelHashCode
  Character_methods_asciiDigit_CI_I_args, // the arguments
  0, //arguments count
  Character_methods_asciiDigit_CI_I_exceptions, // the declared exceptions
  Character_MetainfoWrapper::Character_method_asciiDigit_CI_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Character_methods_asciiDigit_Luc2char_I_I_arg_ch = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ch", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Character_methods_asciiDigit_Luc2char_I_I_arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Character_methods_asciiDigit_Luc2char_I_I_args[] = 
{
  &Character_methods_asciiDigit_Luc2char_I_I_arg_ch,
  &Character_methods_asciiDigit_Luc2char_I_I_arg_idx,
  0
};

::acdk::lang::dmi::ClazzInfo* Character_methods_asciiDigit_Luc2char_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Character_method_asciiDigit_Luc2char_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "asciiDigit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_8_asciiDigit", // alternative name of method
  -1, // altlabelHashCode
  Character_methods_asciiDigit_Luc2char_I_I_args, // the arguments
  0, //arguments count
  Character_methods_asciiDigit_Luc2char_I_I_exceptions, // the declared exceptions
  Character_MetainfoWrapper::Character_method_asciiDigit_Luc2char_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Character_methods_charValue__C_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Character_methods_charValue__C_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Character_method_charValue__C = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "charValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz(), // return type
  "_3_charValue", // alternative name of method
  -1, // altlabelHashCode
  Character_methods_charValue__C_args, // the arguments
  0, //arguments count
  Character_methods_charValue__C_exceptions, // the declared exceptions
  Character_MetainfoWrapper::Character_method_charValue__C_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Character_methods_compareTo_INLRCharacter__I_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCharacter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Character_methods_compareTo_INLRCharacter__I_args[] = 
{
  &Character_methods_compareTo_INLRCharacter__I_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* Character_methods_compareTo_INLRCharacter__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Character_method_compareTo_INLRCharacter__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "compareTo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_4_compareTo", // alternative name of method
  -1, // altlabelHashCode
  Character_methods_compareTo_INLRCharacter__I_args, // the arguments
  0, //arguments count
  Character_methods_compareTo_INLRCharacter__I_exceptions, // the declared exceptions
  Character_MetainfoWrapper::Character_method_compareTo_INLRCharacter__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Character_methods_compareTo_UC_I_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Character_methods_compareTo_UC_I_args[] = 
{
  &Character_methods_compareTo_UC_I_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* Character_methods_compareTo_UC_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Character_method_compareTo_UC_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "compareTo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_compareTo", // alternative name of method
  -1, // altlabelHashCode
  Character_methods_compareTo_UC_I_args, // the arguments
  0, //arguments count
  Character_methods_compareTo_UC_I_exceptions, // the declared exceptions
  Character_MetainfoWrapper::Character_method_compareTo_UC_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Character_methods_create_instance__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Character_methods_create_instance__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Character_method_create_instance__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create_instance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_0_create_instance", // alternative name of method
  -1, // altlabelHashCode
  Character_methods_create_instance__LRObject__args, // the arguments
  0, //arguments count
  Character_methods_create_instance__LRObject__exceptions, // the declared exceptions
  Character_MetainfoWrapper::Character_method_create_instance__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Character_methods_decVal_C_I_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Character_methods_decVal_C_I_args[] = 
{
  &Character_methods_decVal_C_I_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Character_methods_decVal_C_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Character_method_decVal_C_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "decVal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_b_decVal", // alternative name of method
  -1, // altlabelHashCode
  Character_methods_decVal_C_I_args, // the arguments
  0, //arguments count
  Character_methods_decVal_C_I_exceptions, // the declared exceptions
  Character_MetainfoWrapper::Character_method_decVal_C_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Character_methods_decVal_UC_I_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Character_methods_decVal_UC_I_args[] = 
{
  &Character_methods_decVal_UC_I_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Character_methods_decVal_UC_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Character_method_decVal_UC_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "decVal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_c_decVal", // alternative name of method
  -1, // altlabelHashCode
  Character_methods_decVal_UC_I_args, // the arguments
  0, //arguments count
  Character_methods_decVal_UC_I_exceptions, // the declared exceptions
  Character_MetainfoWrapper::Character_method_decVal_UC_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Character_methods_equals_UC_Z_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Character_methods_equals_UC_Z_args[] = 
{
  &Character_methods_equals_UC_Z_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* Character_methods_equals_UC_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Character_method_equals_UC_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_equals", // alternative name of method
  -1, // altlabelHashCode
  Character_methods_equals_UC_Z_args, // the arguments
  0, //arguments count
  Character_methods_equals_UC_Z_exceptions, // the declared exceptions
  Character_MetainfoWrapper::Character_method_equals_UC_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Character_methods_getTYPE__LRClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Character_methods_getTYPE__LRClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Character_method_getTYPE__LRClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTYPE", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(), // return type
  "_H_getTYPE", // alternative name of method
  -1, // altlabelHashCode
  Character_methods_getTYPE__LRClass__args, // the arguments
  0, //arguments count
  Character_methods_getTYPE__LRClass__exceptions, // the declared exceptions
  Character_MetainfoWrapper::Character_method_getTYPE__LRClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Character_methods_isControl_Luc2char__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Character_methods_isControl_Luc2char__Z_args[] = 
{
  &Character_methods_isControl_Luc2char__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Character_methods_isControl_Luc2char__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Character_method_isControl_Luc2char__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isControl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_p_isControl", // alternative name of method
  -1, // altlabelHashCode
  Character_methods_isControl_Luc2char__Z_args, // the arguments
  0, //arguments count
  Character_methods_isControl_Luc2char__Z_exceptions, // the declared exceptions
  Character_MetainfoWrapper::Character_method_isControl_Luc2char__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Character_methods_isControl_C_Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Character_methods_isControl_C_Z_args[] = 
{
  &Character_methods_isControl_C_Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Character_methods_isControl_C_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Character_method_isControl_C_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isControl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_q_isControl", // alternative name of method
  -1, // altlabelHashCode
  Character_methods_isControl_C_Z_args, // the arguments
  0, //arguments count
  Character_methods_isControl_C_Z_exceptions, // the declared exceptions
  Character_MetainfoWrapper::Character_method_isControl_C_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Character_methods_isDigit_C_Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Character_methods_isDigit_C_Z_args[] = 
{
  &Character_methods_isDigit_C_Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Character_methods_isDigit_C_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Character_method_isDigit_C_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isDigit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_9_isDigit", // alternative name of method
  -1, // altlabelHashCode
  Character_methods_isDigit_C_Z_args, // the arguments
  0, //arguments count
  Character_methods_isDigit_C_Z_exceptions, // the declared exceptions
  Character_MetainfoWrapper::Character_method_isDigit_C_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Character_methods_isDigit_Luc2char__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Character_methods_isDigit_Luc2char__Z_args[] = 
{
  &Character_methods_isDigit_Luc2char__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Character_methods_isDigit_Luc2char__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Character_method_isDigit_Luc2char__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isDigit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_a_isDigit", // alternative name of method
  -1, // altlabelHashCode
  Character_methods_isDigit_Luc2char__Z_args, // the arguments
  0, //arguments count
  Character_methods_isDigit_Luc2char__Z_exceptions, // the declared exceptions
  Character_MetainfoWrapper::Character_method_isDigit_Luc2char__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Character_methods_isHexDigit_C_Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Character_methods_isHexDigit_C_Z_args[] = 
{
  &Character_methods_isHexDigit_C_Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Character_methods_isHexDigit_C_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Character_method_isHexDigit_C_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isHexDigit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_d_isHexDigit", // alternative name of method
  -1, // altlabelHashCode
  Character_methods_isHexDigit_C_Z_args, // the arguments
  0, //arguments count
  Character_methods_isHexDigit_C_Z_exceptions, // the declared exceptions
  Character_MetainfoWrapper::Character_method_isHexDigit_C_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Character_methods_isHexDigit_Luc2char__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Character_methods_isHexDigit_Luc2char__Z_args[] = 
{
  &Character_methods_isHexDigit_Luc2char__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Character_methods_isHexDigit_Luc2char__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Character_method_isHexDigit_Luc2char__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isHexDigit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_e_isHexDigit", // alternative name of method
  -1, // altlabelHashCode
  Character_methods_isHexDigit_Luc2char__Z_args, // the arguments
  0, //arguments count
  Character_methods_isHexDigit_Luc2char__Z_exceptions, // the declared exceptions
  Character_MetainfoWrapper::Character_method_isHexDigit_Luc2char__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Character_methods_isJavaIdentifierPart_C_Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Character_methods_isJavaIdentifierPart_C_Z_args[] = 
{
  &Character_methods_isJavaIdentifierPart_C_Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Character_methods_isJavaIdentifierPart_C_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Character_method_isJavaIdentifierPart_C_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isJavaIdentifierPart", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_z_isJavaIdentifierPart", // alternative name of method
  -1, // altlabelHashCode
  Character_methods_isJavaIdentifierPart_C_Z_args, // the arguments
  0, //arguments count
  Character_methods_isJavaIdentifierPart_C_Z_exceptions, // the declared exceptions
  Character_MetainfoWrapper::Character_method_isJavaIdentifierPart_C_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Character_methods_isJavaIdentifierPart_Luc2char__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Character_methods_isJavaIdentifierPart_Luc2char__Z_args[] = 
{
  &Character_methods_isJavaIdentifierPart_Luc2char__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Character_methods_isJavaIdentifierPart_Luc2char__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Character_method_isJavaIdentifierPart_Luc2char__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isJavaIdentifierPart", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_A_isJavaIdentifierPart", // alternative name of method
  -1, // altlabelHashCode
  Character_methods_isJavaIdentifierPart_Luc2char__Z_args, // the arguments
  0, //arguments count
  Character_methods_isJavaIdentifierPart_Luc2char__Z_exceptions, // the declared exceptions
  Character_MetainfoWrapper::Character_method_isJavaIdentifierPart_Luc2char__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Character_methods_isJavaIdentifierStart_Luc2char__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Character_methods_isJavaIdentifierStart_Luc2char__Z_args[] = 
{
  &Character_methods_isJavaIdentifierStart_Luc2char__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Character_methods_isJavaIdentifierStart_Luc2char__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Character_method_isJavaIdentifierStart_Luc2char__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isJavaIdentifierStart", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_y_isJavaIdentifierStart", // alternative name of method
  -1, // altlabelHashCode
  Character_methods_isJavaIdentifierStart_Luc2char__Z_args, // the arguments
  0, //arguments count
  Character_methods_isJavaIdentifierStart_Luc2char__Z_exceptions, // the declared exceptions
  Character_MetainfoWrapper::Character_method_isJavaIdentifierStart_Luc2char__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Character_methods_isJavaIdentifierStart_C_Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Character_methods_isJavaIdentifierStart_C_Z_args[] = 
{
  &Character_methods_isJavaIdentifierStart_C_Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Character_methods_isJavaIdentifierStart_C_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Character_method_isJavaIdentifierStart_C_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isJavaIdentifierStart", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_x_isJavaIdentifierStart", // alternative name of method
  -1, // altlabelHashCode
  Character_methods_isJavaIdentifierStart_C_Z_args, // the arguments
  0, //arguments count
  Character_methods_isJavaIdentifierStart_C_Z_exceptions, // the declared exceptions
  Character_MetainfoWrapper::Character_method_isJavaIdentifierStart_C_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Character_methods_isLetter_C_Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Character_methods_isLetter_C_Z_args[] = 
{
  &Character_methods_isLetter_C_Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Character_methods_isLetter_C_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Character_method_isLetter_C_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isLetter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_f_isLetter", // alternative name of method
  -1, // altlabelHashCode
  Character_methods_isLetter_C_Z_args, // the arguments
  0, //arguments count
  Character_methods_isLetter_C_Z_exceptions, // the declared exceptions
  Character_MetainfoWrapper::Character_method_isLetter_C_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Character_methods_isLetter_Luc2char__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Character_methods_isLetter_Luc2char__Z_args[] = 
{
  &Character_methods_isLetter_Luc2char__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Character_methods_isLetter_Luc2char__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Character_method_isLetter_Luc2char__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isLetter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_g_isLetter", // alternative name of method
  -1, // altlabelHashCode
  Character_methods_isLetter_Luc2char__Z_args, // the arguments
  0, //arguments count
  Character_methods_isLetter_Luc2char__Z_exceptions, // the declared exceptions
  Character_MetainfoWrapper::Character_method_isLetter_Luc2char__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Character_methods_isLetterOrDigit_C_Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Character_methods_isLetterOrDigit_C_Z_args[] = 
{
  &Character_methods_isLetterOrDigit_C_Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Character_methods_isLetterOrDigit_C_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Character_method_isLetterOrDigit_C_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isLetterOrDigit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_h_isLetterOrDigit", // alternative name of method
  -1, // altlabelHashCode
  Character_methods_isLetterOrDigit_C_Z_args, // the arguments
  0, //arguments count
  Character_methods_isLetterOrDigit_C_Z_exceptions, // the declared exceptions
  Character_MetainfoWrapper::Character_method_isLetterOrDigit_C_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Character_methods_isLetterOrDigit_Luc2char__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Character_methods_isLetterOrDigit_Luc2char__Z_args[] = 
{
  &Character_methods_isLetterOrDigit_Luc2char__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Character_methods_isLetterOrDigit_Luc2char__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Character_method_isLetterOrDigit_Luc2char__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isLetterOrDigit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_i_isLetterOrDigit", // alternative name of method
  -1, // altlabelHashCode
  Character_methods_isLetterOrDigit_Luc2char__Z_args, // the arguments
  0, //arguments count
  Character_methods_isLetterOrDigit_Luc2char__Z_exceptions, // the declared exceptions
  Character_MetainfoWrapper::Character_method_isLetterOrDigit_Luc2char__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Character_methods_isLowerCase_C_Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Character_methods_isLowerCase_C_Z_args[] = 
{
  &Character_methods_isLowerCase_C_Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Character_methods_isLowerCase_C_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Character_method_isLowerCase_C_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isLowerCase", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_j_isLowerCase", // alternative name of method
  -1, // altlabelHashCode
  Character_methods_isLowerCase_C_Z_args, // the arguments
  0, //arguments count
  Character_methods_isLowerCase_C_Z_exceptions, // the declared exceptions
  Character_MetainfoWrapper::Character_method_isLowerCase_C_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Character_methods_isLowerCase_Luc2char__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Character_methods_isLowerCase_Luc2char__Z_args[] = 
{
  &Character_methods_isLowerCase_Luc2char__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Character_methods_isLowerCase_Luc2char__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Character_method_isLowerCase_Luc2char__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isLowerCase", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_k_isLowerCase", // alternative name of method
  -1, // altlabelHashCode
  Character_methods_isLowerCase_Luc2char__Z_args, // the arguments
  0, //arguments count
  Character_methods_isLowerCase_Luc2char__Z_exceptions, // the declared exceptions
  Character_MetainfoWrapper::Character_method_isLowerCase_Luc2char__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Character_methods_isSpace_C_Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Character_methods_isSpace_C_Z_args[] = 
{
  &Character_methods_isSpace_C_Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Character_methods_isSpace_C_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Character_method_isSpace_C_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isSpace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_l_isSpace", // alternative name of method
  -1, // altlabelHashCode
  Character_methods_isSpace_C_Z_args, // the arguments
  0, //arguments count
  Character_methods_isSpace_C_Z_exceptions, // the declared exceptions
  Character_MetainfoWrapper::Character_method_isSpace_C_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Character_methods_isSpace_Luc2char__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Character_methods_isSpace_Luc2char__Z_args[] = 
{
  &Character_methods_isSpace_Luc2char__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Character_methods_isSpace_Luc2char__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Character_method_isSpace_Luc2char__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isSpace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_m_isSpace", // alternative name of method
  -1, // altlabelHashCode
  Character_methods_isSpace_Luc2char__Z_args, // the arguments
  0, //arguments count
  Character_methods_isSpace_Luc2char__Z_exceptions, // the declared exceptions
  Character_MetainfoWrapper::Character_method_isSpace_Luc2char__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Character_methods_isUnicodeIdentifierPart_C_Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Character_methods_isUnicodeIdentifierPart_C_Z_args[] = 
{
  &Character_methods_isUnicodeIdentifierPart_C_Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Character_methods_isUnicodeIdentifierPart_C_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Character_method_isUnicodeIdentifierPart_C_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isUnicodeIdentifierPart", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_D_isUnicodeIdentifierPart", // alternative name of method
  -1, // altlabelHashCode
  Character_methods_isUnicodeIdentifierPart_C_Z_args, // the arguments
  0, //arguments count
  Character_methods_isUnicodeIdentifierPart_C_Z_exceptions, // the declared exceptions
  Character_MetainfoWrapper::Character_method_isUnicodeIdentifierPart_C_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Character_methods_isUnicodeIdentifierPart_Luc2char__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Character_methods_isUnicodeIdentifierPart_Luc2char__Z_args[] = 
{
  &Character_methods_isUnicodeIdentifierPart_Luc2char__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Character_methods_isUnicodeIdentifierPart_Luc2char__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Character_method_isUnicodeIdentifierPart_Luc2char__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isUnicodeIdentifierPart", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_E_isUnicodeIdentifierPart", // alternative name of method
  -1, // altlabelHashCode
  Character_methods_isUnicodeIdentifierPart_Luc2char__Z_args, // the arguments
  0, //arguments count
  Character_methods_isUnicodeIdentifierPart_Luc2char__Z_exceptions, // the declared exceptions
  Character_MetainfoWrapper::Character_method_isUnicodeIdentifierPart_Luc2char__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Character_methods_isUnicodeIdentifierStart_C_Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Character_methods_isUnicodeIdentifierStart_C_Z_args[] = 
{
  &Character_methods_isUnicodeIdentifierStart_C_Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Character_methods_isUnicodeIdentifierStart_C_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Character_method_isUnicodeIdentifierStart_C_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isUnicodeIdentifierStart", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_B_isUnicodeIdentifierStart", // alternative name of method
  -1, // altlabelHashCode
  Character_methods_isUnicodeIdentifierStart_C_Z_args, // the arguments
  0, //arguments count
  Character_methods_isUnicodeIdentifierStart_C_Z_exceptions, // the declared exceptions
  Character_MetainfoWrapper::Character_method_isUnicodeIdentifierStart_C_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Character_methods_isUnicodeIdentifierStart_Luc2char__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Character_methods_isUnicodeIdentifierStart_Luc2char__Z_args[] = 
{
  &Character_methods_isUnicodeIdentifierStart_Luc2char__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Character_methods_isUnicodeIdentifierStart_Luc2char__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Character_method_isUnicodeIdentifierStart_Luc2char__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isUnicodeIdentifierStart", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_C_isUnicodeIdentifierStart", // alternative name of method
  -1, // altlabelHashCode
  Character_methods_isUnicodeIdentifierStart_Luc2char__Z_args, // the arguments
  0, //arguments count
  Character_methods_isUnicodeIdentifierStart_Luc2char__Z_exceptions, // the declared exceptions
  Character_MetainfoWrapper::Character_method_isUnicodeIdentifierStart_Luc2char__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Character_methods_isUpperCase_C_Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Character_methods_isUpperCase_C_Z_args[] = 
{
  &Character_methods_isUpperCase_C_Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Character_methods_isUpperCase_C_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Character_method_isUpperCase_C_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isUpperCase", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_r_isUpperCase", // alternative name of method
  -1, // altlabelHashCode
  Character_methods_isUpperCase_C_Z_args, // the arguments
  0, //arguments count
  Character_methods_isUpperCase_C_Z_exceptions, // the declared exceptions
  Character_MetainfoWrapper::Character_method_isUpperCase_C_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Character_methods_isUpperCase_Luc2char__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Character_methods_isUpperCase_Luc2char__Z_args[] = 
{
  &Character_methods_isUpperCase_Luc2char__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Character_methods_isUpperCase_Luc2char__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Character_method_isUpperCase_Luc2char__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isUpperCase", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_s_isUpperCase", // alternative name of method
  -1, // altlabelHashCode
  Character_methods_isUpperCase_Luc2char__Z_args, // the arguments
  0, //arguments count
  Character_methods_isUpperCase_Luc2char__Z_exceptions, // the declared exceptions
  Character_MetainfoWrapper::Character_method_isUpperCase_Luc2char__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Character_methods_isWhitespace_C_Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Character_methods_isWhitespace_C_Z_args[] = 
{
  &Character_methods_isWhitespace_C_Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Character_methods_isWhitespace_C_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Character_method_isWhitespace_C_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isWhitespace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_n_isWhitespace", // alternative name of method
  -1, // altlabelHashCode
  Character_methods_isWhitespace_C_Z_args, // the arguments
  0, //arguments count
  Character_methods_isWhitespace_C_Z_exceptions, // the declared exceptions
  Character_MetainfoWrapper::Character_method_isWhitespace_C_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Character_methods_isWhitespace_Luc2char__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Character_methods_isWhitespace_Luc2char__Z_args[] = 
{
  &Character_methods_isWhitespace_Luc2char__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Character_methods_isWhitespace_Luc2char__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Character_method_isWhitespace_Luc2char__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isWhitespace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_o_isWhitespace", // alternative name of method
  -1, // altlabelHashCode
  Character_methods_isWhitespace_Luc2char__Z_args, // the arguments
  0, //arguments count
  Character_methods_isWhitespace_Luc2char__Z_exceptions, // the declared exceptions
  Character_MetainfoWrapper::Character_method_isWhitespace_Luc2char__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Character_methods_toLowerCase_C_C_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Character_methods_toLowerCase_C_C_args[] = 
{
  &Character_methods_toLowerCase_C_C_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Character_methods_toLowerCase_C_C_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Character_method_toLowerCase_C_C = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toLowerCase", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz(), // return type
  "_t_toLowerCase", // alternative name of method
  -1, // altlabelHashCode
  Character_methods_toLowerCase_C_C_args, // the arguments
  0, //arguments count
  Character_methods_toLowerCase_C_C_exceptions, // the declared exceptions
  Character_MetainfoWrapper::Character_method_toLowerCase_C_C_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Character_methods_toLowerCase_Luc2char__Luc2char__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Character_methods_toLowerCase_Luc2char__Luc2char__args[] = 
{
  &Character_methods_toLowerCase_Luc2char__Luc2char__arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Character_methods_toLowerCase_Luc2char__Luc2char__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Character_method_toLowerCase_Luc2char__Luc2char_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toLowerCase", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz(), // return type
  "_u_toLowerCase", // alternative name of method
  -1, // altlabelHashCode
  Character_methods_toLowerCase_Luc2char__Luc2char__args, // the arguments
  0, //arguments count
  Character_methods_toLowerCase_Luc2char__Luc2char__exceptions, // the declared exceptions
  Character_MetainfoWrapper::Character_method_toLowerCase_Luc2char__Luc2char__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Character_methods_toString_C_LRString__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Character_methods_toString_C_LRString__args[] = 
{
  &Character_methods_toString_C_LRString__arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Character_methods_toString_C_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Character_method_toString_C_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_F_toString", // alternative name of method
  -1, // altlabelHashCode
  Character_methods_toString_C_LRString__args, // the arguments
  0, //arguments count
  Character_methods_toString_C_LRString__exceptions, // the declared exceptions
  Character_MetainfoWrapper::Character_method_toString_C_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Character_methods_toString_Luc2char__LRString__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Character_methods_toString_Luc2char__LRString__args[] = 
{
  &Character_methods_toString_Luc2char__LRString__arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Character_methods_toString_Luc2char__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Character_method_toString_Luc2char__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_G_toString", // alternative name of method
  -1, // altlabelHashCode
  Character_methods_toString_Luc2char__LRString__args, // the arguments
  0, //arguments count
  Character_methods_toString_Luc2char__LRString__exceptions, // the declared exceptions
  Character_MetainfoWrapper::Character_method_toString_Luc2char__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Character_methods_toUpperCase_C_C_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Character_methods_toUpperCase_C_C_args[] = 
{
  &Character_methods_toUpperCase_C_C_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Character_methods_toUpperCase_C_C_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Character_method_toUpperCase_C_C = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toUpperCase", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz(), // return type
  "_v_toUpperCase", // alternative name of method
  -1, // altlabelHashCode
  Character_methods_toUpperCase_C_C_args, // the arguments
  0, //arguments count
  Character_methods_toUpperCase_C_C_exceptions, // the declared exceptions
  Character_MetainfoWrapper::Character_method_toUpperCase_C_C_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Character_methods_toUpperCase_Luc2char__Luc2char__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Character_methods_toUpperCase_Luc2char__Luc2char__args[] = 
{
  &Character_methods_toUpperCase_Luc2char__Luc2char__arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Character_methods_toUpperCase_Luc2char__Luc2char__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Character_method_toUpperCase_Luc2char__Luc2char_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toUpperCase", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz(), // return type
  "_w_toUpperCase", // alternative name of method
  -1, // altlabelHashCode
  Character_methods_toUpperCase_Luc2char__Luc2char__args, // the arguments
  0, //arguments count
  Character_methods_toUpperCase_Luc2char__Luc2char__exceptions, // the declared exceptions
  Character_MetainfoWrapper::Character_method_toUpperCase_Luc2char__Luc2char__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Character_methods[] = 
{
  &Character_method_Character__LRCharacter_,
  &Character_method_Character_C_LRCharacter_,
  &Character_method_GetClass__L_acdk_lang_RClass_,
  &Character_method_asciiDigit_CI_I,
  &Character_method_asciiDigit_Luc2char_I_I,
  &Character_method_charValue__C,
  &Character_method_compareTo_INLRCharacter__I,
  &Character_method_compareTo_UC_I,
  &Character_method_create_instance__LRObject_,
  &Character_method_decVal_C_I,
  &Character_method_decVal_UC_I,
  &Character_method_equals_UC_Z,
  &Character_method_getTYPE__LRClass_,
  &Character_method_isControl_Luc2char__Z,
  &Character_method_isControl_C_Z,
  &Character_method_isDigit_C_Z,
  &Character_method_isDigit_Luc2char__Z,
  &Character_method_isHexDigit_C_Z,
  &Character_method_isHexDigit_Luc2char__Z,
  &Character_method_isJavaIdentifierPart_C_Z,
  &Character_method_isJavaIdentifierPart_Luc2char__Z,
  &Character_method_isJavaIdentifierStart_Luc2char__Z,
  &Character_method_isJavaIdentifierStart_C_Z,
  &Character_method_isLetter_C_Z,
  &Character_method_isLetter_Luc2char__Z,
  &Character_method_isLetterOrDigit_C_Z,
  &Character_method_isLetterOrDigit_Luc2char__Z,
  &Character_method_isLowerCase_C_Z,
  &Character_method_isLowerCase_Luc2char__Z,
  &Character_method_isSpace_C_Z,
  &Character_method_isSpace_Luc2char__Z,
  &Character_method_isUnicodeIdentifierPart_C_Z,
  &Character_method_isUnicodeIdentifierPart_Luc2char__Z,
  &Character_method_isUnicodeIdentifierStart_C_Z,
  &Character_method_isUnicodeIdentifierStart_Luc2char__Z,
  &Character_method_isUpperCase_C_Z,
  &Character_method_isUpperCase_Luc2char__Z,
  &Character_method_isWhitespace_C_Z,
  &Character_method_isWhitespace_Luc2char__Z,
  &Character_method_toLowerCase_C_C,
  &Character_method_toLowerCase_Luc2char__Luc2char_,
  &Character_method_toString_C_LRString_,
  &Character_method_toString_Luc2char__LRString_,
  &Character_method_toUpperCase_C_C,
  &Character_method_toUpperCase_Luc2char__Luc2char_,
  0
};


struct Character_MetaInfoInitializer
{  Character_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Character::clazzInfo();
    ci->fields =  _Character_fields;
    ci->methods =  _Character_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Character_MetaInfoInitializer Character_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
Class_create_array(int length)
{
  return new ObjectArrayImpl<RClass>(length);
}

//static
::acdk::lang::RObject
Class_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Class_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Class::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method__forName_INLRString__LRClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Class::_forName(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method__getInstance__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Class::_getInstance();
    else
        ret = (::acdk::lang::RObject)This->_getInstance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_compareTo_INLRClass__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Class::compareTo(::acdk::lang::dmi::castTo< RClass>(args[0], dc));
    else
      ret = This->compareTo(::acdk::lang::dmi::castTo< RClass>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_compareTo_INLRObject__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Class::compareTo(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->compareTo(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_createDmiProxy_INLRObject__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Class::createDmiProxy(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->createDmiProxy(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_create_arrayInstance_INLRClass_I_LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Class::create_arrayInstance(::acdk::lang::dmi::castTo< RClass>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_equals_INLRClass__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Class::equals(::acdk::lang::dmi::castTo< RClass>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< RClass>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_finalize__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Class::finalize();
    else
        This->finalize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_findClass_INLRString__LRClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Class::findClass(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_forName_INLRString_ZINLRClassLoader__LRClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Class::forName(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc), ::acdk::lang::dmi::castTo< RClassLoader>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_forName_INLRString__LRClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Class::forName(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_forName_INLRString_Z_LRClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Class::forName(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_getArrayElementClass__LRClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Class::getArrayElementClass();
    else
        ret = (::acdk::lang::RObject)This->getArrayElementClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_getClassByJType_INLRString__LRClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Class::getClassByJType(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_getClassLoader__LRClassLoader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Class::getClassLoader();
    else
        ret = (::acdk::lang::RObject)This->getClassLoader();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_getClassName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Class::getClassName();
    else
        ret = (::acdk::lang::RObject)This->getClassName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_getClasses__LRClassArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Class::getClasses();
    else
        ret = (::acdk::lang::RObject)This->getClasses();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_getComponentType__LRClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Class::getComponentType();
    else
        ret = (::acdk::lang::RObject)This->getComponentType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_getDeclaredClasses__LRClassArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Class::getDeclaredClasses();
    else
        ret = (::acdk::lang::RObject)This->getDeclaredClasses();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_getDeclaredConstructor_INLRClassArray__L_acdk_lang_reflect_RConstructor__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Class::getDeclaredConstructor(::acdk::lang::dmi::castTo< RClassArray>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getDeclaredConstructor(::acdk::lang::dmi::castTo< RClassArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_getDeclaredConstructors__L_acdk_lang_reflect_RConstructorArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Class::getDeclaredConstructors();
    else
        ret = (::acdk::lang::RObject)This->getDeclaredConstructors();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_getDeclaredField_INLRString__L_acdk_lang_reflect_RField__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Class::getDeclaredField(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getDeclaredField(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_getDeclaredFields__L_acdk_lang_reflect_RFieldArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Class::getDeclaredFields();
    else
        ret = (::acdk::lang::RObject)This->getDeclaredFields();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_getDeclaredMethod_INLRString_INLRClassArray__L_acdk_lang_reflect_RMethod__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Class::getDeclaredMethod(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RClassArray>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->getDeclaredMethod(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RClassArray>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_getDeclaredMethods__L_acdk_lang_reflect_RMethodArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Class::getDeclaredMethods();
    else
        ret = (::acdk::lang::RObject)This->getDeclaredMethods();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_getDeclaringClass__LRClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Class::getDeclaringClass();
    else
        ret = (::acdk::lang::RObject)This->getDeclaringClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_getDmiProxies_INLRObjectArray_INLRObject_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Class::getDmiProxies(::acdk::lang::dmi::castTo< RObjectArray>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    else
      ret = This->getDmiProxies(::acdk::lang::dmi::castTo< RObjectArray>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_getField_INLRString__L_acdk_lang_reflect_RField__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Class::getField(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getField(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_getFields__L_acdk_lang_reflect_RFieldArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Class::getFields();
    else
        ret = (::acdk::lang::RObject)This->getFields();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_getInterfaces__LRClassArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Class::getInterfaces();
    else
        ret = (::acdk::lang::RObject)This->getInterfaces();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_getMethod_INLRString_INLRClassArray_INLRStringArray__L_acdk_lang_reflect_RMethod__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Class::getMethod(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RClassArray>(args[1], dc), ::acdk::lang::dmi::castTo< RStringArray>(args[2], dc));
    else
        ret = (::acdk::lang::RObject)This->getMethod(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RClassArray>(args[1], dc), ::acdk::lang::dmi::castTo< RStringArray>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_getMethod_INLRString_INLRClassArray__L_acdk_lang_reflect_RMethod__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Class::getMethod(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RClassArray>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->getMethod(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RClassArray>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_getMethods__L_acdk_lang_reflect_RMethodArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Class::getMethods();
    else
        ret = (::acdk::lang::RObject)This->getMethods();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_getModifiers__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Class::getModifiers();
    else
      ret = This->getModifiers();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_getName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Class::getName();
    else
        ret = (::acdk::lang::RObject)This->getName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_getPackage__LRPackage__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Class::getPackage();
    else
        ret = (::acdk::lang::RObject)This->getPackage();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_getSerialVersionUID__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Class::getSerialVersionUID();
    else
      ret = This->getSerialVersionUID();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_getSuperClasses__LRClassArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Class::getSuperClasses();
    else
        ret = (::acdk::lang::RObject)This->getSuperClasses();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_getSuperclass__LRClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Class::getSuperclass();
    else
        ret = (::acdk::lang::RObject)This->getSuperclass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_getUnit__L_acdk_lang_reflect_RUnit__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Class::getUnit();
    else
        ret = (::acdk::lang::RObject)This->getUnit();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_hasReadObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Class::hasReadObject();
    else
      ret = This->hasReadObject();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_hasReadResolve__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Class::hasReadResolve();
    else
      ret = This->hasReadResolve();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_hasWriteObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Class::hasWriteObject();
    else
      ret = This->hasWriteObject();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_hasWriteReplace__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Class::hasWriteReplace();
    else
      ret = This->hasWriteReplace();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_isArray__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Class::isArray();
    else
      ret = This->isArray();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_isAssignableFrom_INLRClass__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Class::isAssignableFrom(::acdk::lang::dmi::castTo< RClass>(args[0], dc));
    else
      ret = This->isAssignableFrom(::acdk::lang::dmi::castTo< RClass>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_isInstance_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Class::isInstance(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->isInstance(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_isInterface__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Class::isInterface();
    else
      ret = This->isInterface();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_isPrimitive__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Class::isPrimitive();
    else
      ret = This->isPrimitive();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_isSerializable__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Class::isSerializable();
    else
      ret = This->isSerializable();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_newInstance__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Class::newInstance();
    else
        ret = (::acdk::lang::RObject)This->newInstance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_resolve__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Class::resolve();
    else
        This->resolve();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_toTypeString_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Class::toTypeString(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->toTypeString(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Class_method_toTypeString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Class* This = dmi_cast<Class>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Class::toTypeString();
    else
        ret = (::acdk::lang::RObject)This->toTypeString();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Class_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_S_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Class_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Class_methods__forName_INLRString__LRClass__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods__forName_INLRString__LRClass__args[] = 
{
  &Class_methods__forName_INLRString__LRClass__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods__forName_INLRString__LRClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method__forName_INLRString__LRClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_forName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(), // return type
  "_C__forName", // alternative name of method
  -1, // altlabelHashCode
  Class_methods__forName_INLRString__LRClass__args, // the arguments
  0, //arguments count
  Class_methods__forName_INLRString__LRClass__exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method__forName_INLRString__LRClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods__getInstance__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods__getInstance__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method__getInstance__LRObject_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_getInstance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_R__getInstance", // alternative name of method
  -1, // altlabelHashCode
  Class_methods__getInstance__LRObject__args, // the arguments
  0, //arguments count
  Class_methods__getInstance__LRObject__exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method__getInstance__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Class_methods_compareTo_INLRClass__I_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_compareTo_INLRClass__I_args[] = 
{
  &Class_methods_compareTo_INLRClass__I_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_compareTo_INLRClass__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method_compareTo_INLRClass__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "compareTo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_N_compareTo", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_compareTo_INLRClass__I_args, // the arguments
  0, //arguments count
  Class_methods_compareTo_INLRClass__I_exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_compareTo_INLRClass__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Class_methods_compareTo_INLRObject__I_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_compareTo_INLRObject__I_args[] = 
{
  &Class_methods_compareTo_INLRObject__I_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_compareTo_INLRObject__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method_compareTo_INLRObject__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "compareTo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_O_compareTo", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_compareTo_INLRObject__I_args, // the arguments
  0, //arguments count
  Class_methods_compareTo_INLRObject__I_exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_compareTo_INLRObject__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Class_methods_createDmiProxy_INLRObject__LRObject__arg_dmiTarget = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "dmiTarget", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_createDmiProxy_INLRObject__LRObject__args[] = 
{
  &Class_methods_createDmiProxy_INLRObject__LRObject__arg_dmiTarget,
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_createDmiProxy_INLRObject__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method_createDmiProxy_INLRObject__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createDmiProxy", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_M_createDmiProxy", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_createDmiProxy_INLRObject__LRObject__args, // the arguments
  0, //arguments count
  Class_methods_createDmiProxy_INLRObject__LRObject__exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_createDmiProxy_INLRObject__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Class_methods_create_arrayInstance_INLRClass_I_LRObject__arg_component = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "component", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Class_methods_create_arrayInstance_INLRClass_I_LRObject__arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_create_arrayInstance_INLRClass_I_LRObject__args[] = 
{
  &Class_methods_create_arrayInstance_INLRClass_I_LRObject__arg_component,
  &Class_methods_create_arrayInstance_INLRClass_I_LRObject__arg_length,
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_create_arrayInstance_INLRClass_I_LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method_create_arrayInstance_INLRClass_I_LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create_arrayInstance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_E_create_arrayInstance", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_create_arrayInstance_INLRClass_I_LRObject__args, // the arguments
  0, //arguments count
  Class_methods_create_arrayInstance_INLRClass_I_LRObject__exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_create_arrayInstance_INLRClass_I_LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Class_methods_equals_INLRClass__Z_arg_oclass = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "oclass", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_equals_INLRClass__Z_args[] = 
{
  &Class_methods_equals_INLRClass__Z_arg_oclass,
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_equals_INLRClass__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method_equals_INLRClass__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_D_equals", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_equals_INLRClass__Z_args, // the arguments
  0, //arguments count
  Class_methods_equals_INLRClass__Z_exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_equals_INLRClass__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_finalize__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_finalize__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method_finalize__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "finalize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0_finalize", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_finalize__V_args, // the arguments
  0, //arguments count
  Class_methods_finalize__V_exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_finalize__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Class_methods_findClass_INLRString__LRClass__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_findClass_INLRString__LRClass__args[] = 
{
  &Class_methods_findClass_INLRString__LRClass__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_findClass_INLRString__LRClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method_findClass_INLRString__LRClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(), // return type
  "_A_findClass", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_findClass_INLRString__LRClass__args, // the arguments
  0, //arguments count
  Class_methods_findClass_INLRString__LRClass__exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_findClass_INLRString__LRClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Class_methods_forName_INLRString_ZINLRClassLoader__LRClass__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Class_methods_forName_INLRString_ZINLRClassLoader__LRClass__arg_initialize = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "initialize", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Class_methods_forName_INLRString_ZINLRClassLoader__LRClass__arg_loader = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "loader", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClassLoader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_forName_INLRString_ZINLRClassLoader__LRClass__args[] = 
{
  &Class_methods_forName_INLRString_ZINLRClassLoader__LRClass__arg_name,
  &Class_methods_forName_INLRString_ZINLRClassLoader__LRClass__arg_initialize,
  &Class_methods_forName_INLRString_ZINLRClassLoader__LRClass__arg_loader,
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_forName_INLRString_ZINLRClassLoader__LRClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method_forName_INLRString_ZINLRClassLoader__LRClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "forName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(), // return type
  "_B_forName", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_forName_INLRString_ZINLRClassLoader__LRClass__args, // the arguments
  0, //arguments count
  Class_methods_forName_INLRString_ZINLRClassLoader__LRClass__exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_forName_INLRString_ZINLRClassLoader__LRClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Class_methods_forName_INLRString__LRClass__arg_className = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "className", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_forName_INLRString__LRClass__args[] = 
{
  &Class_methods_forName_INLRString__LRClass__arg_className,
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_forName_INLRString__LRClass__exceptions[] =
{
  RClassNotFoundException::clazzInfo(), 
  0
};

void Class_forName_INLRString__LRClass__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ClassNotFoundException) == true)
    THROW_INSTANCE( RClassNotFoundException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Class_method_forName_INLRString__LRClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "forName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(), // return type
  "_y_forName", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_forName_INLRString__LRClass__args, // the arguments
  0, //arguments count
  Class_methods_forName_INLRString__LRClass__exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_forName_INLRString__LRClass__dispatch, // invoke this method
  Class_forName_INLRString__LRClass__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Class_methods_forName_INLRString_Z_LRClass__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Class_methods_forName_INLRString_Z_LRClass__arg_initialize = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "initialize", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_forName_INLRString_Z_LRClass__args[] = 
{
  &Class_methods_forName_INLRString_Z_LRClass__arg_name,
  &Class_methods_forName_INLRString_Z_LRClass__arg_initialize,
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_forName_INLRString_Z_LRClass__exceptions[] =
{
  RClassNotFoundException::clazzInfo(), 
  0
};

void Class_forName_INLRString_Z_LRClass__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ClassNotFoundException) == true)
    THROW_INSTANCE( RClassNotFoundException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Class_method_forName_INLRString_Z_LRClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "forName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(), // return type
  "_z_forName", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_forName_INLRString_Z_LRClass__args, // the arguments
  0, //arguments count
  Class_methods_forName_INLRString_Z_LRClass__exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_forName_INLRString_Z_LRClass__dispatch, // invoke this method
  Class_forName_INLRString_Z_LRClass__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_getArrayElementClass__LRClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_getArrayElementClass__LRClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method_getArrayElementClass__LRClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getArrayElementClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(), // return type
  "_s_getArrayElementClass", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_getArrayElementClass__LRClass__args, // the arguments
  0, //arguments count
  Class_methods_getArrayElementClass__LRClass__exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_getArrayElementClass__LRClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Class_methods_getClassByJType_INLRString__LRClass__arg_sign = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sign", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_getClassByJType_INLRString__LRClass__args[] = 
{
  &Class_methods_getClassByJType_INLRString__LRClass__arg_sign,
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_getClassByJType_INLRString__LRClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method_getClassByJType_INLRString__LRClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getClassByJType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(), // return type
  "_F_getClassByJType", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_getClassByJType_INLRString__LRClass__args, // the arguments
  0, //arguments count
  Class_methods_getClassByJType_INLRString__LRClass__exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_getClassByJType_INLRString__LRClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_getClassLoader__LRClassLoader__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_getClassLoader__LRClassLoader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method_getClassLoader__LRClassLoader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getClassLoader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClassLoader::clazzInfo(), // return type
  "_2_getClassLoader", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_getClassLoader__LRClassLoader__args, // the arguments
  0, //arguments count
  Class_methods_getClassLoader__LRClassLoader__exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_getClassLoader__LRClassLoader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_getClassName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_getClassName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method_getClassName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getClassName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_m_getClassName", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_getClassName__LRString__args, // the arguments
  0, //arguments count
  Class_methods_getClassName__LRString__exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_getClassName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_getClasses__LRClassArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_getClasses__LRClassArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method_getClasses__LRClassArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getClasses", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClassArray::clazzInfo(), // return type
  "_g_getClasses", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_getClasses__LRClassArray__args, // the arguments
  0, //arguments count
  Class_methods_getClasses__LRClassArray__exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_getClasses__LRClassArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_getComponentType__LRClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_getComponentType__LRClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method_getComponentType__LRClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getComponentType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(), // return type
  "_3_getComponentType", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_getComponentType__LRClass__args, // the arguments
  0, //arguments count
  Class_methods_getComponentType__LRClass__exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_getComponentType__LRClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_getDeclaredClasses__LRClassArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_getDeclaredClasses__LRClassArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method_getDeclaredClasses__LRClassArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDeclaredClasses", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClassArray::clazzInfo(), // return type
  "_h_getDeclaredClasses", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_getDeclaredClasses__LRClassArray__args, // the arguments
  0, //arguments count
  Class_methods_getDeclaredClasses__LRClassArray__exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_getDeclaredClasses__LRClassArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Class_methods_getDeclaredConstructor_INLRClassArray__L_acdk_lang_reflect_RConstructor__arg_parameterTypes = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parameterTypes", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClassArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_getDeclaredConstructor_INLRClassArray__L_acdk_lang_reflect_RConstructor__args[] = 
{
  &Class_methods_getDeclaredConstructor_INLRClassArray__L_acdk_lang_reflect_RConstructor__arg_parameterTypes,
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_getDeclaredConstructor_INLRClassArray__L_acdk_lang_reflect_RConstructor__exceptions[] =
{
  RNoSuchMethodException::clazzInfo(), 
  0
};

void Class_getDeclaredConstructor_INLRClassArray__L_acdk_lang_reflect_RConstructor__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NoSuchMethodException) == true)
    THROW_INSTANCE( RNoSuchMethodException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Class_method_getDeclaredConstructor_INLRClassArray__L_acdk_lang_reflect_RConstructor_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDeclaredConstructor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::reflect::RConstructor::clazzInfo(), // return type
  "_4_getDeclaredConstructor", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_getDeclaredConstructor_INLRClassArray__L_acdk_lang_reflect_RConstructor__args, // the arguments
  0, //arguments count
  Class_methods_getDeclaredConstructor_INLRClassArray__L_acdk_lang_reflect_RConstructor__exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_getDeclaredConstructor_INLRClassArray__L_acdk_lang_reflect_RConstructor__dispatch, // invoke this method
  Class_getDeclaredConstructor_INLRClassArray__L_acdk_lang_reflect_RConstructor__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_getDeclaredConstructors__L_acdk_lang_reflect_RConstructorArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_getDeclaredConstructors__L_acdk_lang_reflect_RConstructorArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method_getDeclaredConstructors__L_acdk_lang_reflect_RConstructorArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDeclaredConstructors", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::reflect::RConstructorArray::clazzInfo(), // return type
  "_5_getDeclaredConstructors", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_getDeclaredConstructors__L_acdk_lang_reflect_RConstructorArray__args, // the arguments
  0, //arguments count
  Class_methods_getDeclaredConstructors__L_acdk_lang_reflect_RConstructorArray__exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_getDeclaredConstructors__L_acdk_lang_reflect_RConstructorArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Class_methods_getDeclaredField_INLRString__L_acdk_lang_reflect_RField__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_getDeclaredField_INLRString__L_acdk_lang_reflect_RField__args[] = 
{
  &Class_methods_getDeclaredField_INLRString__L_acdk_lang_reflect_RField__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_getDeclaredField_INLRString__L_acdk_lang_reflect_RField__exceptions[] =
{
  RNoSuchFieldException::clazzInfo(), 
  0
};

void Class_getDeclaredField_INLRString__L_acdk_lang_reflect_RField__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NoSuchFieldException) == true)
    THROW_INSTANCE( RNoSuchFieldException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Class_method_getDeclaredField_INLRString__L_acdk_lang_reflect_RField_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDeclaredField", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::reflect::RField::clazzInfo(), // return type
  "_6_getDeclaredField", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_getDeclaredField_INLRString__L_acdk_lang_reflect_RField__args, // the arguments
  0, //arguments count
  Class_methods_getDeclaredField_INLRString__L_acdk_lang_reflect_RField__exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_getDeclaredField_INLRString__L_acdk_lang_reflect_RField__dispatch, // invoke this method
  Class_getDeclaredField_INLRString__L_acdk_lang_reflect_RField__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_getDeclaredFields__L_acdk_lang_reflect_RFieldArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_getDeclaredFields__L_acdk_lang_reflect_RFieldArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method_getDeclaredFields__L_acdk_lang_reflect_RFieldArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDeclaredFields", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::reflect::RFieldArray::clazzInfo(), // return type
  "_7_getDeclaredFields", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_getDeclaredFields__L_acdk_lang_reflect_RFieldArray__args, // the arguments
  0, //arguments count
  Class_methods_getDeclaredFields__L_acdk_lang_reflect_RFieldArray__exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_getDeclaredFields__L_acdk_lang_reflect_RFieldArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Class_methods_getDeclaredMethod_INLRString_INLRClassArray__L_acdk_lang_reflect_RMethod__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Class_methods_getDeclaredMethod_INLRString_INLRClassArray__L_acdk_lang_reflect_RMethod__arg_parameterTypes = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parameterTypes", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClassArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_getDeclaredMethod_INLRString_INLRClassArray__L_acdk_lang_reflect_RMethod__args[] = 
{
  &Class_methods_getDeclaredMethod_INLRString_INLRClassArray__L_acdk_lang_reflect_RMethod__arg_name,
  &Class_methods_getDeclaredMethod_INLRString_INLRClassArray__L_acdk_lang_reflect_RMethod__arg_parameterTypes,
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_getDeclaredMethod_INLRString_INLRClassArray__L_acdk_lang_reflect_RMethod__exceptions[] =
{
  RNoSuchMethodException::clazzInfo(), 
  0
};

void Class_getDeclaredMethod_INLRString_INLRClassArray__L_acdk_lang_reflect_RMethod__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NoSuchMethodException) == true)
    THROW_INSTANCE( RNoSuchMethodException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Class_method_getDeclaredMethod_INLRString_INLRClassArray__L_acdk_lang_reflect_RMethod_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDeclaredMethod", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::reflect::RMethod::clazzInfo(), // return type
  "_8_getDeclaredMethod", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_getDeclaredMethod_INLRString_INLRClassArray__L_acdk_lang_reflect_RMethod__args, // the arguments
  0, //arguments count
  Class_methods_getDeclaredMethod_INLRString_INLRClassArray__L_acdk_lang_reflect_RMethod__exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_getDeclaredMethod_INLRString_INLRClassArray__L_acdk_lang_reflect_RMethod__dispatch, // invoke this method
  Class_getDeclaredMethod_INLRString_INLRClassArray__L_acdk_lang_reflect_RMethod__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_getDeclaredMethods__L_acdk_lang_reflect_RMethodArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_getDeclaredMethods__L_acdk_lang_reflect_RMethodArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method_getDeclaredMethods__L_acdk_lang_reflect_RMethodArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDeclaredMethods", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::reflect::RMethodArray::clazzInfo(), // return type
  "_9_getDeclaredMethods", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_getDeclaredMethods__L_acdk_lang_reflect_RMethodArray__args, // the arguments
  0, //arguments count
  Class_methods_getDeclaredMethods__L_acdk_lang_reflect_RMethodArray__exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_getDeclaredMethods__L_acdk_lang_reflect_RMethodArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_getDeclaringClass__LRClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_getDeclaringClass__LRClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method_getDeclaringClass__LRClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDeclaringClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(), // return type
  "_f_getDeclaringClass", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_getDeclaringClass__LRClass__args, // the arguments
  0, //arguments count
  Class_methods_getDeclaringClass__LRClass__exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_getDeclaringClass__LRClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Class_methods_getDmiProxies_INLRObjectArray_INLRObject_I_Z_arg_proxies = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "proxies", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Class_methods_getDmiProxies_INLRObjectArray_INLRObject_I_Z_arg_dmiTarget = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "dmiTarget", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Class_methods_getDmiProxies_INLRObjectArray_INLRObject_I_Z_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_getDmiProxies_INLRObjectArray_INLRObject_I_Z_args[] = 
{
  &Class_methods_getDmiProxies_INLRObjectArray_INLRObject_I_Z_arg_proxies,
  &Class_methods_getDmiProxies_INLRObjectArray_INLRObject_I_Z_arg_dmiTarget,
  &Class_methods_getDmiProxies_INLRObjectArray_INLRObject_I_Z_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_getDmiProxies_INLRObjectArray_INLRObject_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method_getDmiProxies_INLRObjectArray_INLRObject_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDmiProxies", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_L_getDmiProxies", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_getDmiProxies_INLRObjectArray_INLRObject_I_Z_args, // the arguments
  0, //arguments count
  Class_methods_getDmiProxies_INLRObjectArray_INLRObject_I_Z_exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_getDmiProxies_INLRObjectArray_INLRObject_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Class_methods_getField_INLRString__L_acdk_lang_reflect_RField__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_getField_INLRString__L_acdk_lang_reflect_RField__args[] = 
{
  &Class_methods_getField_INLRString__L_acdk_lang_reflect_RField__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_getField_INLRString__L_acdk_lang_reflect_RField__exceptions[] =
{
  RNoSuchFieldException::clazzInfo(), 
  0
};

void Class_getField_INLRString__L_acdk_lang_reflect_RField__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NoSuchFieldException) == true)
    THROW_INSTANCE( RNoSuchFieldException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Class_method_getField_INLRString__L_acdk_lang_reflect_RField_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getField", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::reflect::RField::clazzInfo(), // return type
  "_a_getField", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_getField_INLRString__L_acdk_lang_reflect_RField__args, // the arguments
  0, //arguments count
  Class_methods_getField_INLRString__L_acdk_lang_reflect_RField__exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_getField_INLRString__L_acdk_lang_reflect_RField__dispatch, // invoke this method
  Class_getField_INLRString__L_acdk_lang_reflect_RField__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_getFields__L_acdk_lang_reflect_RFieldArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_getFields__L_acdk_lang_reflect_RFieldArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method_getFields__L_acdk_lang_reflect_RFieldArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFields", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::reflect::RFieldArray::clazzInfo(), // return type
  "_b_getFields", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_getFields__L_acdk_lang_reflect_RFieldArray__args, // the arguments
  0, //arguments count
  Class_methods_getFields__L_acdk_lang_reflect_RFieldArray__exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_getFields__L_acdk_lang_reflect_RFieldArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_getInterfaces__LRClassArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_getInterfaces__LRClassArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method_getInterfaces__LRClassArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInterfaces", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClassArray::clazzInfo(), // return type
  "_i_getInterfaces", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_getInterfaces__LRClassArray__args, // the arguments
  0, //arguments count
  Class_methods_getInterfaces__LRClassArray__exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_getInterfaces__LRClassArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Class_methods_getMethod_INLRString_INLRClassArray_INLRStringArray__L_acdk_lang_reflect_RMethod__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Class_methods_getMethod_INLRString_INLRClassArray_INLRStringArray__L_acdk_lang_reflect_RMethod__arg_parameterTypes = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parameterTypes", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClassArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Class_methods_getMethod_INLRString_INLRClassArray_INLRStringArray__L_acdk_lang_reflect_RMethod__arg_namedargs = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "namedargs", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_getMethod_INLRString_INLRClassArray_INLRStringArray__L_acdk_lang_reflect_RMethod__args[] = 
{
  &Class_methods_getMethod_INLRString_INLRClassArray_INLRStringArray__L_acdk_lang_reflect_RMethod__arg_name,
  &Class_methods_getMethod_INLRString_INLRClassArray_INLRStringArray__L_acdk_lang_reflect_RMethod__arg_parameterTypes,
  &Class_methods_getMethod_INLRString_INLRClassArray_INLRStringArray__L_acdk_lang_reflect_RMethod__arg_namedargs,
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_getMethod_INLRString_INLRClassArray_INLRStringArray__L_acdk_lang_reflect_RMethod__exceptions[] =
{
  RNoSuchMethodException::clazzInfo(), 
  0
};

void Class_getMethod_INLRString_INLRClassArray_INLRStringArray__L_acdk_lang_reflect_RMethod__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NoSuchMethodException) == true)
    THROW_INSTANCE( RNoSuchMethodException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Class_method_getMethod_INLRString_INLRClassArray_INLRStringArray__L_acdk_lang_reflect_RMethod_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMethod", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::reflect::RMethod::clazzInfo(), // return type
  "_c_getMethod", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_getMethod_INLRString_INLRClassArray_INLRStringArray__L_acdk_lang_reflect_RMethod__args, // the arguments
  0, //arguments count
  Class_methods_getMethod_INLRString_INLRClassArray_INLRStringArray__L_acdk_lang_reflect_RMethod__exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_getMethod_INLRString_INLRClassArray_INLRStringArray__L_acdk_lang_reflect_RMethod__dispatch, // invoke this method
  Class_getMethod_INLRString_INLRClassArray_INLRStringArray__L_acdk_lang_reflect_RMethod__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Class_methods_getMethod_INLRString_INLRClassArray__L_acdk_lang_reflect_RMethod__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Class_methods_getMethod_INLRString_INLRClassArray__L_acdk_lang_reflect_RMethod__arg_parameterTypes = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parameterTypes", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClassArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_getMethod_INLRString_INLRClassArray__L_acdk_lang_reflect_RMethod__args[] = 
{
  &Class_methods_getMethod_INLRString_INLRClassArray__L_acdk_lang_reflect_RMethod__arg_name,
  &Class_methods_getMethod_INLRString_INLRClassArray__L_acdk_lang_reflect_RMethod__arg_parameterTypes,
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_getMethod_INLRString_INLRClassArray__L_acdk_lang_reflect_RMethod__exceptions[] =
{
  RNoSuchMethodException::clazzInfo(), 
  0
};

void Class_getMethod_INLRString_INLRClassArray__L_acdk_lang_reflect_RMethod__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NoSuchMethodException) == true)
    THROW_INSTANCE( RNoSuchMethodException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Class_method_getMethod_INLRString_INLRClassArray__L_acdk_lang_reflect_RMethod_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getMethod", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::reflect::RMethod::clazzInfo(), // return type
  "_d_getMethod", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_getMethod_INLRString_INLRClassArray__L_acdk_lang_reflect_RMethod__args, // the arguments
  0, //arguments count
  Class_methods_getMethod_INLRString_INLRClassArray__L_acdk_lang_reflect_RMethod__exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_getMethod_INLRString_INLRClassArray__L_acdk_lang_reflect_RMethod__dispatch, // invoke this method
  Class_getMethod_INLRString_INLRClassArray__L_acdk_lang_reflect_RMethod__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_getMethods__L_acdk_lang_reflect_RMethodArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_getMethods__L_acdk_lang_reflect_RMethodArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method_getMethods__L_acdk_lang_reflect_RMethodArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMethods", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::reflect::RMethodArray::clazzInfo(), // return type
  "_e_getMethods", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_getMethods__L_acdk_lang_reflect_RMethodArray__args, // the arguments
  0, //arguments count
  Class_methods_getMethods__L_acdk_lang_reflect_RMethodArray__exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_getMethods__L_acdk_lang_reflect_RMethodArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_getModifiers__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_getModifiers__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method_getModifiers__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getModifiers", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_k_getModifiers", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_getModifiers__I_args, // the arguments
  0, //arguments count
  Class_methods_getModifiers__I_exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_getModifiers__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_getName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_getName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method_getName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_l_getName", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_getName__LRString__args, // the arguments
  0, //arguments count
  Class_methods_getName__LRString__exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_getName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_getPackage__LRPackage__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_getPackage__LRPackage__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method_getPackage__LRPackage_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPackage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPackage::clazzInfo(), // return type
  "_n_getPackage", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_getPackage__LRPackage__args, // the arguments
  0, //arguments count
  Class_methods_getPackage__LRPackage__exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_getPackage__LRPackage__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_getSerialVersionUID__J_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_getSerialVersionUID__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method_getSerialVersionUID__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSerialVersionUID", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_q_getSerialVersionUID", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_getSerialVersionUID__J_args, // the arguments
  0, //arguments count
  Class_methods_getSerialVersionUID__J_exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_getSerialVersionUID__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_getSuperClasses__LRClassArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_getSuperClasses__LRClassArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method_getSuperClasses__LRClassArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSuperClasses", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClassArray::clazzInfo(), // return type
  "_p_getSuperClasses", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_getSuperClasses__LRClassArray__args, // the arguments
  0, //arguments count
  Class_methods_getSuperClasses__LRClassArray__exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_getSuperClasses__LRClassArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_getSuperclass__LRClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_getSuperclass__LRClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method_getSuperclass__LRClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSuperclass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(), // return type
  "_o_getSuperclass", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_getSuperclass__LRClass__args, // the arguments
  0, //arguments count
  Class_methods_getSuperclass__LRClass__exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_getSuperclass__LRClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_getUnit__L_acdk_lang_reflect_RUnit__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_getUnit__L_acdk_lang_reflect_RUnit__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method_getUnit__L_acdk_lang_reflect_RUnit_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getUnit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::reflect::RUnit::clazzInfo(), // return type
  "_j_getUnit", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_getUnit__L_acdk_lang_reflect_RUnit__args, // the arguments
  0, //arguments count
  Class_methods_getUnit__L_acdk_lang_reflect_RUnit__exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_getUnit__L_acdk_lang_reflect_RUnit__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_hasReadObject__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_hasReadObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method_hasReadObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasReadObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_I_hasReadObject", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_hasReadObject__Z_args, // the arguments
  0, //arguments count
  Class_methods_hasReadObject__Z_exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_hasReadObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_hasReadResolve__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_hasReadResolve__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method_hasReadResolve__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasReadResolve", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_K_hasReadResolve", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_hasReadResolve__Z_args, // the arguments
  0, //arguments count
  Class_methods_hasReadResolve__Z_exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_hasReadResolve__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_hasWriteObject__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_hasWriteObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method_hasWriteObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasWriteObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_H_hasWriteObject", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_hasWriteObject__Z_args, // the arguments
  0, //arguments count
  Class_methods_hasWriteObject__Z_exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_hasWriteObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_hasWriteReplace__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_hasWriteReplace__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method_hasWriteReplace__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasWriteReplace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_J_hasWriteReplace", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_hasWriteReplace__Z_args, // the arguments
  0, //arguments count
  Class_methods_hasWriteReplace__Z_exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_hasWriteReplace__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_isArray__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_isArray__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method_isArray__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_r_isArray", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_isArray__Z_args, // the arguments
  0, //arguments count
  Class_methods_isArray__Z_exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_isArray__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Class_methods_isAssignableFrom_INLRClass__Z_arg_cls = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cls", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_isAssignableFrom_INLRClass__Z_args[] = 
{
  &Class_methods_isAssignableFrom_INLRClass__Z_arg_cls,
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_isAssignableFrom_INLRClass__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method_isAssignableFrom_INLRClass__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isAssignableFrom", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_t_isAssignableFrom", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_isAssignableFrom_INLRClass__Z_args, // the arguments
  0, //arguments count
  Class_methods_isAssignableFrom_INLRClass__Z_exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_isAssignableFrom_INLRClass__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Class_methods_isInstance_INLRObject__Z_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_isInstance_INLRObject__Z_args[] = 
{
  &Class_methods_isInstance_INLRObject__Z_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_isInstance_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method_isInstance_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isInstance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_u_isInstance", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_isInstance_INLRObject__Z_args, // the arguments
  0, //arguments count
  Class_methods_isInstance_INLRObject__Z_exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_isInstance_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_isInterface__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_isInterface__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method_isInterface__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isInterface", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_v_isInterface", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_isInterface__Z_args, // the arguments
  0, //arguments count
  Class_methods_isInterface__Z_exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_isInterface__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_isPrimitive__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_isPrimitive__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method_isPrimitive__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isPrimitive", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_w_isPrimitive", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_isPrimitive__Z_args, // the arguments
  0, //arguments count
  Class_methods_isPrimitive__Z_exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_isPrimitive__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_isSerializable__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_isSerializable__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method_isSerializable__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isSerializable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_G_isSerializable", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_isSerializable__Z_args, // the arguments
  0, //arguments count
  Class_methods_isSerializable__Z_exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_isSerializable__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_newInstance__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_newInstance__LRObject__exceptions[] =
{
  RInstantiationException::clazzInfo(), 
  0
};

void Class_newInstance__LRObject__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, InstantiationException) == true)
    THROW_INSTANCE( RInstantiationException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Class_method_newInstance__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "newInstance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_x_newInstance", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_newInstance__LRObject__args, // the arguments
  0, //arguments count
  Class_methods_newInstance__LRObject__exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_newInstance__LRObject__dispatch, // invoke this method
  Class_newInstance__LRObject__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_resolve__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_resolve__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method_resolve__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "resolve", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_resolve", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_resolve__V_args, // the arguments
  0, //arguments count
  Class_methods_resolve__V_exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_resolve__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Class_methods_toTypeString_I_LRString__arg_format = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "format", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_toTypeString_I_LRString__args[] = 
{
  &Class_methods_toTypeString_I_LRString__arg_format,
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_toTypeString_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method_toTypeString_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toTypeString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_P_toTypeString", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_toTypeString_I_LRString__args, // the arguments
  0, //arguments count
  Class_methods_toTypeString_I_LRString__exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_toTypeString_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Class_methods_toTypeString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Class_methods_toTypeString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Class_method_toTypeString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "toTypeString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_Q_toTypeString", // alternative name of method
  -1, // altlabelHashCode
  Class_methods_toTypeString__LRString__args, // the arguments
  0, //arguments count
  Class_methods_toTypeString__LRString__exceptions, // the declared exceptions
  Class_MetainfoWrapper::Class_method_toTypeString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Class_methods[] = 
{
  &Class_method_GetClass__L_acdk_lang_RClass_,
  &Class_method__forName_INLRString__LRClass_,
  &Class_method__getInstance__LRObject_,
  &Class_method_compareTo_INLRClass__I,
  &Class_method_compareTo_INLRObject__I,
  &Class_method_createDmiProxy_INLRObject__LRObject_,
  &Class_method_create_arrayInstance_INLRClass_I_LRObject_,
  &Class_method_equals_INLRClass__Z,
  &Class_method_finalize__V,
  &Class_method_findClass_INLRString__LRClass_,
  &Class_method_forName_INLRString_ZINLRClassLoader__LRClass_,
  &Class_method_forName_INLRString__LRClass_,
  &Class_method_forName_INLRString_Z_LRClass_,
  &Class_method_getArrayElementClass__LRClass_,
  &Class_method_getClassByJType_INLRString__LRClass_,
  &Class_method_getClassLoader__LRClassLoader_,
  &Class_method_getClassName__LRString_,
  &Class_method_getClasses__LRClassArray_,
  &Class_method_getComponentType__LRClass_,
  &Class_method_getDeclaredClasses__LRClassArray_,
  &Class_method_getDeclaredConstructor_INLRClassArray__L_acdk_lang_reflect_RConstructor_,
  &Class_method_getDeclaredConstructors__L_acdk_lang_reflect_RConstructorArray_,
  &Class_method_getDeclaredField_INLRString__L_acdk_lang_reflect_RField_,
  &Class_method_getDeclaredFields__L_acdk_lang_reflect_RFieldArray_,
  &Class_method_getDeclaredMethod_INLRString_INLRClassArray__L_acdk_lang_reflect_RMethod_,
  &Class_method_getDeclaredMethods__L_acdk_lang_reflect_RMethodArray_,
  &Class_method_getDeclaringClass__LRClass_,
  &Class_method_getDmiProxies_INLRObjectArray_INLRObject_I_Z,
  &Class_method_getField_INLRString__L_acdk_lang_reflect_RField_,
  &Class_method_getFields__L_acdk_lang_reflect_RFieldArray_,
  &Class_method_getInterfaces__LRClassArray_,
  &Class_method_getMethod_INLRString_INLRClassArray_INLRStringArray__L_acdk_lang_reflect_RMethod_,
  &Class_method_getMethod_INLRString_INLRClassArray__L_acdk_lang_reflect_RMethod_,
  &Class_method_getMethods__L_acdk_lang_reflect_RMethodArray_,
  &Class_method_getModifiers__I,
  &Class_method_getName__LRString_,
  &Class_method_getPackage__LRPackage_,
  &Class_method_getSerialVersionUID__J,
  &Class_method_getSuperClasses__LRClassArray_,
  &Class_method_getSuperclass__LRClass_,
  &Class_method_getUnit__L_acdk_lang_reflect_RUnit_,
  &Class_method_hasReadObject__Z,
  &Class_method_hasReadResolve__Z,
  &Class_method_hasWriteObject__Z,
  &Class_method_hasWriteReplace__Z,
  &Class_method_isArray__Z,
  &Class_method_isAssignableFrom_INLRClass__Z,
  &Class_method_isInstance_INLRObject__Z,
  &Class_method_isInterface__Z,
  &Class_method_isPrimitive__Z,
  &Class_method_isSerializable__Z,
  &Class_method_newInstance__LRObject_,
  &Class_method_resolve__V,
  &Class_method_toTypeString_I_LRString_,
  &Class_method_toTypeString__LRString_,
  0
};


struct Class_MetaInfoInitializer
{  Class_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Class::clazzInfo();
    ci->fields =  _Class_fields;
    ci->methods =  _Class_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Class_MetaInfoInitializer Class_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
ClassCastException_create_array(int length)
{
  return new ObjectArrayImpl<RClassCastException>(length);
}

//static
::acdk::lang::RObject
ClassCastException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ClassCastException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassCastException_method_ClassCastException__LRClassCastException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ClassCastException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassCastException_method_ClassCastException_INLRString__LRClassCastException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ClassCastException(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassCastException_method_ClassCastException_INLRClass_INLRClass__LRClassCastException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ClassCastException(::acdk::lang::dmi::castTo< RClass>(args[0], dc), ::acdk::lang::dmi::castTo< RClass>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassCastException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ClassCastException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassCastException_method__setWhat__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ClassCastException* This = dmi_cast<ClassCastException>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ClassCastException::_setWhat();
    else
        This->_setWhat();
    return methinf;
  }
};


void ThrowException_ClassCastException(IN(::acdk::lang::RThrowable) ex)
{
  throw RClassCastException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _ClassCastException_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassCastException_methods_ClassCastException__LRClassCastException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ClassCastException_methods_ClassCastException__LRClassCastException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassCastException_method_ClassCastException__LRClassCastException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ClassCastException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ClassCastException::clazzInfo(), // return type
  "_0_ClassCastException", // alternative name of method
  -1, // altlabelHashCode
  ClassCastException_methods_ClassCastException__LRClassCastException__args, // the arguments
  0, //arguments count
  ClassCastException_methods_ClassCastException__LRClassCastException__exceptions, // the declared exceptions
  ClassCastException_MetainfoWrapper::ClassCastException_method_ClassCastException__LRClassCastException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassCastException_methods_ClassCastException_INLRString__LRClassCastException__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassCastException_methods_ClassCastException_INLRString__LRClassCastException__args[] = 
{
  &ClassCastException_methods_ClassCastException_INLRString__LRClassCastException__arg_what,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassCastException_methods_ClassCastException_INLRString__LRClassCastException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassCastException_method_ClassCastException_INLRString__LRClassCastException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ClassCastException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ClassCastException::clazzInfo(), // return type
  "_1_ClassCastException", // alternative name of method
  -1, // altlabelHashCode
  ClassCastException_methods_ClassCastException_INLRString__LRClassCastException__args, // the arguments
  0, //arguments count
  ClassCastException_methods_ClassCastException_INLRString__LRClassCastException__exceptions, // the declared exceptions
  ClassCastException_MetainfoWrapper::ClassCastException_method_ClassCastException_INLRString__LRClassCastException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassCastException_methods_ClassCastException_INLRClass_INLRClass__LRClassCastException__arg_fromObject = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fromObject", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassCastException_methods_ClassCastException_INLRClass_INLRClass__LRClassCastException__arg_toObject = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "toObject", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassCastException_methods_ClassCastException_INLRClass_INLRClass__LRClassCastException__args[] = 
{
  &ClassCastException_methods_ClassCastException_INLRClass_INLRClass__LRClassCastException__arg_fromObject,
  &ClassCastException_methods_ClassCastException_INLRClass_INLRClass__LRClassCastException__arg_toObject,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassCastException_methods_ClassCastException_INLRClass_INLRClass__LRClassCastException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassCastException_method_ClassCastException_INLRClass_INLRClass__LRClassCastException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ClassCastException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ClassCastException::clazzInfo(), // return type
  "_2_ClassCastException", // alternative name of method
  -1, // altlabelHashCode
  ClassCastException_methods_ClassCastException_INLRClass_INLRClass__LRClassCastException__args, // the arguments
  0, //arguments count
  ClassCastException_methods_ClassCastException_INLRClass_INLRClass__LRClassCastException__exceptions, // the declared exceptions
  ClassCastException_MetainfoWrapper::ClassCastException_method_ClassCastException_INLRClass_INLRClass__LRClassCastException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassCastException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ClassCastException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassCastException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ClassCastException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ClassCastException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ClassCastException_MetainfoWrapper::ClassCastException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassCastException_methods__setWhat__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ClassCastException_methods__setWhat__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassCastException_method__setWhat__V = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_setWhat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3__setWhat", // alternative name of method
  -1, // altlabelHashCode
  ClassCastException_methods__setWhat__V_args, // the arguments
  0, //arguments count
  ClassCastException_methods__setWhat__V_exceptions, // the declared exceptions
  ClassCastException_MetainfoWrapper::ClassCastException_method__setWhat__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ClassCastException_methods[] = 
{
  &ClassCastException_method_ClassCastException__LRClassCastException_,
  &ClassCastException_method_ClassCastException_INLRString__LRClassCastException_,
  &ClassCastException_method_ClassCastException_INLRClass_INLRClass__LRClassCastException_,
  &ClassCastException_method_GetClass__L_acdk_lang_RClass_,
  &ClassCastException_method__setWhat__V,
  0
};


struct ClassCastException_MetaInfoInitializer
{  ClassCastException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ClassCastException::clazzInfo();
    ci->fields =  _ClassCastException_fields;
    ci->methods =  _ClassCastException_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ClassCastException_MetaInfoInitializer ClassCastException_MetaInfoInitializer_staticinstance__;


struct ClassCastException_clazzInfo_ClazzAttributesResInitializer13
{
  ClassCastException_clazzInfo_ClazzAttributesResInitializer13()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)ClassCastException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_ClassCastException));
  }
};

ClassCastException_clazzInfo_ClazzAttributesResInitializer13 ClassCastException_clazzInfo_ClazzAttributesResInitializer13_instance;



} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
ClassLoader_create_array(int length)
{
  return new ObjectArrayImpl<RClassLoader>(length);
}

//static
::acdk::lang::RObject
ClassLoader_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ClassLoader_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassLoader_method_ClassLoader__LRClassLoader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ClassLoader();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassLoader_method_ClassLoader_INLRClassLoader__LRClassLoader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ClassLoader(::acdk::lang::dmi::castTo< RClassLoader>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassLoader_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ClassLoader::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassLoader_method_defineClass_INLRString_INLRbyteArray_II_LRClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ClassLoader* This = dmi_cast<ClassLoader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ClassLoader::defineClass(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RbyteArray>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc));
    else
        ret = (::acdk::lang::RObject)This->defineClass(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RbyteArray>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassLoader_method_findClass_INLRString_Z_LRClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ClassLoader* This = dmi_cast<ClassLoader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ClassLoader::findClass(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->findClass(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassLoader_method_findClass_INLRString__LRClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ClassLoader* This = dmi_cast<ClassLoader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ClassLoader::findClass(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->findClass(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassLoader_method_findLibrary_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ClassLoader* This = dmi_cast<ClassLoader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ClassLoader::findLibrary(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->findLibrary(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassLoader_method_findLibrary2_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ClassLoader* This = dmi_cast<ClassLoader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ClassLoader::findLibrary2(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->findLibrary2(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassLoader_method_findLoadedClass_INLRString_Z_LRClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ClassLoader* This = dmi_cast<ClassLoader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ClassLoader::findLoadedClass(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->findLoadedClass(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassLoader_method_findLoadedClass_INLRString__LRClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ClassLoader* This = dmi_cast<ClassLoader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ClassLoader::findLoadedClass(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->findLoadedClass(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassLoader_method_findResource_INLRString__Lacdk_io_RFile__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ClassLoader* This = dmi_cast<ClassLoader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ClassLoader::findResource(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->findResource(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassLoader_method_findResources_INLRString__Lacdk_util_RIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ClassLoader* This = dmi_cast<ClassLoader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ClassLoader::findResources(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->findResources(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassLoader_method_findSystemClass_INLRString__LRClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ClassLoader* This = dmi_cast<ClassLoader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ClassLoader::findSystemClass(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->findSystemClass(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassLoader_method_getPackage_INLRString__LRPackage__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ClassLoader* This = dmi_cast<ClassLoader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ClassLoader::getPackage(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getPackage(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassLoader_method_getPackages__LRPackageArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ClassLoader* This = dmi_cast<ClassLoader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ClassLoader::getPackages();
    else
        ret = (::acdk::lang::RObject)This->getPackages();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassLoader_method_getParent__LRClassLoader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ClassLoader* This = dmi_cast<ClassLoader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ClassLoader::getParent();
    else
        ret = (::acdk::lang::RObject)This->getParent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassLoader_method_getResource_INLRString__Lacdk_io_RFile__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ClassLoader* This = dmi_cast<ClassLoader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ClassLoader::getResource(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getResource(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassLoader_method_getResourceAsStream_INLRString__Lacdk_io_RReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ClassLoader* This = dmi_cast<ClassLoader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ClassLoader::getResourceAsStream(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getResourceAsStream(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassLoader_method_getResources_INLRString__Lacdk_util_RIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ClassLoader* This = dmi_cast<ClassLoader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ClassLoader::getResources(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getResources(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassLoader_method_getSystemClassLoader__LRClassLoader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ClassLoader::getSystemClassLoader();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassLoader_method_getSystemResource_INLRString__Lacdk_io_RFile__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ClassLoader::getSystemResource(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassLoader_method_getSystemResourceAsStream_INLRString__Lacdk_io_RReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ClassLoader::getSystemResourceAsStream(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassLoader_method_getSystemResources_INLRString__Lacdk_util_RIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ClassLoader::getSystemResources(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassLoader_method_loadClass_INLRString__LRClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ClassLoader* This = dmi_cast<ClassLoader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ClassLoader::loadClass(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->loadClass(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassLoader_method_loadClass_INLRString_Z_LRClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ClassLoader* This = dmi_cast<ClassLoader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ClassLoader::loadClass(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->loadClass(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassLoader_method_loadClassLibrary_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ClassLoader* This = dmi_cast<ClassLoader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ClassLoader::loadClassLibrary(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
      ret = This->loadClassLibrary(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassLoader_method_loadDmiProxyLibrary_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ClassLoader* This = dmi_cast<ClassLoader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ClassLoader::loadDmiProxyLibrary(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
      ret = This->loadDmiProxyLibrary(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassLoader_method_loadExtInfoLibrary_INLRString_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ClassLoader* This = dmi_cast<ClassLoader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ClassLoader::loadExtInfoLibrary(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    else
      ret = This->loadExtInfoLibrary(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassLoader_method_loadMetaInfoLibrary_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ClassLoader* This = dmi_cast<ClassLoader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ClassLoader::loadMetaInfoLibrary(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
      ret = This->loadMetaInfoLibrary(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassLoader_method_loadUnit_INLRString__Lacdk_lang_reflect_RUnit__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ClassLoader* This = dmi_cast<ClassLoader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ClassLoader::loadUnit(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->loadUnit(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassLoader_method_registerClassLoader_INLRClassLoader__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ClassLoader* This = dmi_cast<ClassLoader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ClassLoader::registerClassLoader(::acdk::lang::dmi::castTo< RClassLoader>(args[0], dc));
    else
        This->registerClassLoader(::acdk::lang::dmi::castTo< RClassLoader>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassLoader_method_resolveClass_INLRClass__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ClassLoader* This = dmi_cast<ClassLoader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ClassLoader::resolveClass(::acdk::lang::dmi::castTo< RClass>(args[0], dc));
    else
        This->resolveClass(::acdk::lang::dmi::castTo< RClass>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassLoader_method_setSigners_INLRClass_INLRObjectArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ClassLoader* This = dmi_cast<ClassLoader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ClassLoader::setSigners(::acdk::lang::dmi::castTo< RClass>(args[0], dc), ::acdk::lang::dmi::castTo< RObjectArray>(args[1], dc));
    else
        This->setSigners(::acdk::lang::dmi::castTo< RClass>(args[0], dc), ::acdk::lang::dmi::castTo< RObjectArray>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ClassLoader_fields__parent_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ClassLoader* This = dmi_cast<ClassLoader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_parent, flags);
    else
      This->_parent = ::acdk::lang::dmi::castTo< RClassLoader>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ClassLoader_fields__registeredClassLoader_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ClassLoader* This = dmi_cast<ClassLoader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_registeredClassLoader, flags);
    else
      This->_registeredClassLoader = ::acdk::lang::dmi::castTo< RClassLoaderArray>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ClassLoader_fields__parent = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_parent", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClassLoader::clazzInfo(),
  ClassLoader_MetainfoWrapper::ClassLoader_fields__parent_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ClassLoader_fields__registeredClassLoader = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_registeredClassLoader", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClassLoaderArray::clazzInfo(),
  ClassLoader_MetainfoWrapper::ClassLoader_fields__registeredClassLoader_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ClassLoader_fields[] = 
{
  &ClassLoader_fields__parent,
  &ClassLoader_fields__registeredClassLoader,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassLoader_methods_ClassLoader__LRClassLoader__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ClassLoader_methods_ClassLoader__LRClassLoader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassLoader_method_ClassLoader__LRClassLoader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ClassLoader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ClassLoader::clazzInfo(), // return type
  "_0_ClassLoader", // alternative name of method
  -1, // altlabelHashCode
  ClassLoader_methods_ClassLoader__LRClassLoader__args, // the arguments
  0, //arguments count
  ClassLoader_methods_ClassLoader__LRClassLoader__exceptions, // the declared exceptions
  ClassLoader_MetainfoWrapper::ClassLoader_method_ClassLoader__LRClassLoader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassLoader_methods_ClassLoader_INLRClassLoader__LRClassLoader__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClassLoader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassLoader_methods_ClassLoader_INLRClassLoader__LRClassLoader__args[] = 
{
  &ClassLoader_methods_ClassLoader_INLRClassLoader__LRClassLoader__arg_parent,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassLoader_methods_ClassLoader_INLRClassLoader__LRClassLoader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassLoader_method_ClassLoader_INLRClassLoader__LRClassLoader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ClassLoader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ClassLoader::clazzInfo(), // return type
  "_1_ClassLoader", // alternative name of method
  -1, // altlabelHashCode
  ClassLoader_methods_ClassLoader_INLRClassLoader__LRClassLoader__args, // the arguments
  0, //arguments count
  ClassLoader_methods_ClassLoader_INLRClassLoader__LRClassLoader__exceptions, // the declared exceptions
  ClassLoader_MetainfoWrapper::ClassLoader_method_ClassLoader_INLRClassLoader__LRClassLoader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassLoader_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ClassLoader_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassLoader_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_w_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ClassLoader_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ClassLoader_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ClassLoader_MetainfoWrapper::ClassLoader_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassLoader_methods_defineClass_INLRString_INLRbyteArray_II_LRClass__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassLoader_methods_defineClass_INLRString_INLRbyteArray_II_LRClass__arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassLoader_methods_defineClass_INLRString_INLRbyteArray_II_LRClass__arg_off = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "off", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassLoader_methods_defineClass_INLRString_INLRbyteArray_II_LRClass__arg_len = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "len", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassLoader_methods_defineClass_INLRString_INLRbyteArray_II_LRClass__args[] = 
{
  &ClassLoader_methods_defineClass_INLRString_INLRbyteArray_II_LRClass__arg_name,
  &ClassLoader_methods_defineClass_INLRString_INLRbyteArray_II_LRClass__arg_b,
  &ClassLoader_methods_defineClass_INLRString_INLRbyteArray_II_LRClass__arg_off,
  &ClassLoader_methods_defineClass_INLRString_INLRbyteArray_II_LRClass__arg_len,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassLoader_methods_defineClass_INLRString_INLRbyteArray_II_LRClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassLoader_method_defineClass_INLRString_INLRbyteArray_II_LRClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "defineClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(), // return type
  "_2_defineClass", // alternative name of method
  -1, // altlabelHashCode
  ClassLoader_methods_defineClass_INLRString_INLRbyteArray_II_LRClass__args, // the arguments
  0, //arguments count
  ClassLoader_methods_defineClass_INLRString_INLRbyteArray_II_LRClass__exceptions, // the declared exceptions
  ClassLoader_MetainfoWrapper::ClassLoader_method_defineClass_INLRString_INLRbyteArray_II_LRClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassLoader_methods_findClass_INLRString_Z_LRClass__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassLoader_methods_findClass_INLRString_Z_LRClass__arg_nothrow = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "nothrow", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassLoader_methods_findClass_INLRString_Z_LRClass__args[] = 
{
  &ClassLoader_methods_findClass_INLRString_Z_LRClass__arg_name,
  &ClassLoader_methods_findClass_INLRString_Z_LRClass__arg_nothrow,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassLoader_methods_findClass_INLRString_Z_LRClass__exceptions[] =
{
  RClassNotFoundException::clazzInfo(), 
  0
};

void ClassLoader_findClass_INLRString_Z_LRClass__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ClassNotFoundException) == true)
    THROW_INSTANCE( RClassNotFoundException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ClassLoader_method_findClass_INLRString_Z_LRClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(), // return type
  "_3_findClass", // alternative name of method
  -1, // altlabelHashCode
  ClassLoader_methods_findClass_INLRString_Z_LRClass__args, // the arguments
  0, //arguments count
  ClassLoader_methods_findClass_INLRString_Z_LRClass__exceptions, // the declared exceptions
  ClassLoader_MetainfoWrapper::ClassLoader_method_findClass_INLRString_Z_LRClass__dispatch, // invoke this method
  ClassLoader_findClass_INLRString_Z_LRClass__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassLoader_methods_findClass_INLRString__LRClass__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassLoader_methods_findClass_INLRString__LRClass__args[] = 
{
  &ClassLoader_methods_findClass_INLRString__LRClass__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassLoader_methods_findClass_INLRString__LRClass__exceptions[] =
{
  RClassNotFoundException::clazzInfo(), 
  0
};

void ClassLoader_findClass_INLRString__LRClass__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ClassNotFoundException) == true)
    THROW_INSTANCE( RClassNotFoundException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ClassLoader_method_findClass_INLRString__LRClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "findClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(), // return type
  "_4_findClass", // alternative name of method
  -1, // altlabelHashCode
  ClassLoader_methods_findClass_INLRString__LRClass__args, // the arguments
  0, //arguments count
  ClassLoader_methods_findClass_INLRString__LRClass__exceptions, // the declared exceptions
  ClassLoader_MetainfoWrapper::ClassLoader_method_findClass_INLRString__LRClass__dispatch, // invoke this method
  ClassLoader_findClass_INLRString__LRClass__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassLoader_methods_findLibrary_INLRString__LRString__arg_libname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "libname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassLoader_methods_findLibrary_INLRString__LRString__args[] = 
{
  &ClassLoader_methods_findLibrary_INLRString__LRString__arg_libname,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassLoader_methods_findLibrary_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassLoader_method_findLibrary_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findLibrary", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_6_findLibrary", // alternative name of method
  -1, // altlabelHashCode
  ClassLoader_methods_findLibrary_INLRString__LRString__args, // the arguments
  0, //arguments count
  ClassLoader_methods_findLibrary_INLRString__LRString__exceptions, // the declared exceptions
  ClassLoader_MetainfoWrapper::ClassLoader_method_findLibrary_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassLoader_methods_findLibrary2_INLRString__LRString__arg_libname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "libname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassLoader_methods_findLibrary2_INLRString__LRString__args[] = 
{
  &ClassLoader_methods_findLibrary2_INLRString__LRString__arg_libname,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassLoader_methods_findLibrary2_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassLoader_method_findLibrary2_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findLibrary2", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_7_findLibrary2", // alternative name of method
  -1, // altlabelHashCode
  ClassLoader_methods_findLibrary2_INLRString__LRString__args, // the arguments
  0, //arguments count
  ClassLoader_methods_findLibrary2_INLRString__LRString__exceptions, // the declared exceptions
  ClassLoader_MetainfoWrapper::ClassLoader_method_findLibrary2_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassLoader_methods_findLoadedClass_INLRString_Z_LRClass__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassLoader_methods_findLoadedClass_INLRString_Z_LRClass__arg_nothrow = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "nothrow", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassLoader_methods_findLoadedClass_INLRString_Z_LRClass__args[] = 
{
  &ClassLoader_methods_findLoadedClass_INLRString_Z_LRClass__arg_name,
  &ClassLoader_methods_findLoadedClass_INLRString_Z_LRClass__arg_nothrow,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassLoader_methods_findLoadedClass_INLRString_Z_LRClass__exceptions[] =
{
  RClassNotFoundException::clazzInfo(), 
  0
};

void ClassLoader_findLoadedClass_INLRString_Z_LRClass__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ClassNotFoundException) == true)
    THROW_INSTANCE( RClassNotFoundException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ClassLoader_method_findLoadedClass_INLRString_Z_LRClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findLoadedClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(), // return type
  "_8_findLoadedClass", // alternative name of method
  -1, // altlabelHashCode
  ClassLoader_methods_findLoadedClass_INLRString_Z_LRClass__args, // the arguments
  0, //arguments count
  ClassLoader_methods_findLoadedClass_INLRString_Z_LRClass__exceptions, // the declared exceptions
  ClassLoader_MetainfoWrapper::ClassLoader_method_findLoadedClass_INLRString_Z_LRClass__dispatch, // invoke this method
  ClassLoader_findLoadedClass_INLRString_Z_LRClass__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassLoader_methods_findLoadedClass_INLRString__LRClass__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassLoader_methods_findLoadedClass_INLRString__LRClass__args[] = 
{
  &ClassLoader_methods_findLoadedClass_INLRString__LRClass__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassLoader_methods_findLoadedClass_INLRString__LRClass__exceptions[] =
{
  RClassNotFoundException::clazzInfo(), 
  0
};

void ClassLoader_findLoadedClass_INLRString__LRClass__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ClassNotFoundException) == true)
    THROW_INSTANCE( RClassNotFoundException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ClassLoader_method_findLoadedClass_INLRString__LRClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "findLoadedClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(), // return type
  "_9_findLoadedClass", // alternative name of method
  -1, // altlabelHashCode
  ClassLoader_methods_findLoadedClass_INLRString__LRClass__args, // the arguments
  0, //arguments count
  ClassLoader_methods_findLoadedClass_INLRString__LRClass__exceptions, // the declared exceptions
  ClassLoader_MetainfoWrapper::ClassLoader_method_findLoadedClass_INLRString__LRClass__dispatch, // invoke this method
  ClassLoader_findLoadedClass_INLRString__LRClass__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassLoader_methods_findResource_INLRString__Lacdk_io_RFile__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassLoader_methods_findResource_INLRString__Lacdk_io_RFile__args[] = 
{
  &ClassLoader_methods_findResource_INLRString__Lacdk_io_RFile__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassLoader_methods_findResource_INLRString__Lacdk_io_RFile__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassLoader_method_findResource_INLRString__Lacdk_io_RFile_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findResource", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RFile::clazzInfo(), // return type
  "_e_findResource", // alternative name of method
  -1, // altlabelHashCode
  ClassLoader_methods_findResource_INLRString__Lacdk_io_RFile__args, // the arguments
  0, //arguments count
  ClassLoader_methods_findResource_INLRString__Lacdk_io_RFile__exceptions, // the declared exceptions
  ClassLoader_MetainfoWrapper::ClassLoader_method_findResource_INLRString__Lacdk_io_RFile__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassLoader_methods_findResources_INLRString__Lacdk_util_RIterator__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassLoader_methods_findResources_INLRString__Lacdk_util_RIterator__args[] = 
{
  &ClassLoader_methods_findResources_INLRString__Lacdk_util_RIterator__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassLoader_methods_findResources_INLRString__Lacdk_util_RIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassLoader_method_findResources_INLRString__Lacdk_util_RIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findResources", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RIterator::clazzInfo(), // return type
  "_f_findResources", // alternative name of method
  -1, // altlabelHashCode
  ClassLoader_methods_findResources_INLRString__Lacdk_util_RIterator__args, // the arguments
  0, //arguments count
  ClassLoader_methods_findResources_INLRString__Lacdk_util_RIterator__exceptions, // the declared exceptions
  ClassLoader_MetainfoWrapper::ClassLoader_method_findResources_INLRString__Lacdk_util_RIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassLoader_methods_findSystemClass_INLRString__LRClass__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassLoader_methods_findSystemClass_INLRString__LRClass__args[] = 
{
  &ClassLoader_methods_findSystemClass_INLRString__LRClass__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassLoader_methods_findSystemClass_INLRString__LRClass__exceptions[] =
{
  RClassNotFoundException::clazzInfo(), 
  0
};

void ClassLoader_findSystemClass_INLRString__LRClass__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ClassNotFoundException) == true)
    THROW_INSTANCE( RClassNotFoundException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ClassLoader_method_findSystemClass_INLRString__LRClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findSystemClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(), // return type
  "_a_findSystemClass", // alternative name of method
  -1, // altlabelHashCode
  ClassLoader_methods_findSystemClass_INLRString__LRClass__args, // the arguments
  0, //arguments count
  ClassLoader_methods_findSystemClass_INLRString__LRClass__exceptions, // the declared exceptions
  ClassLoader_MetainfoWrapper::ClassLoader_method_findSystemClass_INLRString__LRClass__dispatch, // invoke this method
  ClassLoader_findSystemClass_INLRString__LRClass__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassLoader_methods_getPackage_INLRString__LRPackage__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassLoader_methods_getPackage_INLRString__LRPackage__args[] = 
{
  &ClassLoader_methods_getPackage_INLRString__LRPackage__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassLoader_methods_getPackage_INLRString__LRPackage__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassLoader_method_getPackage_INLRString__LRPackage_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPackage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPackage::clazzInfo(), // return type
  "_b_getPackage", // alternative name of method
  -1, // altlabelHashCode
  ClassLoader_methods_getPackage_INLRString__LRPackage__args, // the arguments
  0, //arguments count
  ClassLoader_methods_getPackage_INLRString__LRPackage__exceptions, // the declared exceptions
  ClassLoader_MetainfoWrapper::ClassLoader_method_getPackage_INLRString__LRPackage__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassLoader_methods_getPackages__LRPackageArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ClassLoader_methods_getPackages__LRPackageArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassLoader_method_getPackages__LRPackageArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPackages", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPackageArray::clazzInfo(), // return type
  "_c_getPackages", // alternative name of method
  -1, // altlabelHashCode
  ClassLoader_methods_getPackages__LRPackageArray__args, // the arguments
  0, //arguments count
  ClassLoader_methods_getPackages__LRPackageArray__exceptions, // the declared exceptions
  ClassLoader_MetainfoWrapper::ClassLoader_method_getPackages__LRPackageArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassLoader_methods_getParent__LRClassLoader__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ClassLoader_methods_getParent__LRClassLoader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassLoader_method_getParent__LRClassLoader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getParent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClassLoader::clazzInfo(), // return type
  "_d_getParent", // alternative name of method
  -1, // altlabelHashCode
  ClassLoader_methods_getParent__LRClassLoader__args, // the arguments
  0, //arguments count
  ClassLoader_methods_getParent__LRClassLoader__exceptions, // the declared exceptions
  ClassLoader_MetainfoWrapper::ClassLoader_method_getParent__LRClassLoader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassLoader_methods_getResource_INLRString__Lacdk_io_RFile__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassLoader_methods_getResource_INLRString__Lacdk_io_RFile__args[] = 
{
  &ClassLoader_methods_getResource_INLRString__Lacdk_io_RFile__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassLoader_methods_getResource_INLRString__Lacdk_io_RFile__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassLoader_method_getResource_INLRString__Lacdk_io_RFile_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getResource", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RFile::clazzInfo(), // return type
  "_g_getResource", // alternative name of method
  -1, // altlabelHashCode
  ClassLoader_methods_getResource_INLRString__Lacdk_io_RFile__args, // the arguments
  0, //arguments count
  ClassLoader_methods_getResource_INLRString__Lacdk_io_RFile__exceptions, // the declared exceptions
  ClassLoader_MetainfoWrapper::ClassLoader_method_getResource_INLRString__Lacdk_io_RFile__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassLoader_methods_getResourceAsStream_INLRString__Lacdk_io_RReader__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassLoader_methods_getResourceAsStream_INLRString__Lacdk_io_RReader__args[] = 
{
  &ClassLoader_methods_getResourceAsStream_INLRString__Lacdk_io_RReader__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassLoader_methods_getResourceAsStream_INLRString__Lacdk_io_RReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassLoader_method_getResourceAsStream_INLRString__Lacdk_io_RReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getResourceAsStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo(), // return type
  "_h_getResourceAsStream", // alternative name of method
  -1, // altlabelHashCode
  ClassLoader_methods_getResourceAsStream_INLRString__Lacdk_io_RReader__args, // the arguments
  0, //arguments count
  ClassLoader_methods_getResourceAsStream_INLRString__Lacdk_io_RReader__exceptions, // the declared exceptions
  ClassLoader_MetainfoWrapper::ClassLoader_method_getResourceAsStream_INLRString__Lacdk_io_RReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassLoader_methods_getResources_INLRString__Lacdk_util_RIterator__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassLoader_methods_getResources_INLRString__Lacdk_util_RIterator__args[] = 
{
  &ClassLoader_methods_getResources_INLRString__Lacdk_util_RIterator__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassLoader_methods_getResources_INLRString__Lacdk_util_RIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassLoader_method_getResources_INLRString__Lacdk_util_RIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getResources", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RIterator::clazzInfo(), // return type
  "_l_getResources", // alternative name of method
  -1, // altlabelHashCode
  ClassLoader_methods_getResources_INLRString__Lacdk_util_RIterator__args, // the arguments
  0, //arguments count
  ClassLoader_methods_getResources_INLRString__Lacdk_util_RIterator__exceptions, // the declared exceptions
  ClassLoader_MetainfoWrapper::ClassLoader_method_getResources_INLRString__Lacdk_util_RIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassLoader_methods_getSystemClassLoader__LRClassLoader__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ClassLoader_methods_getSystemClassLoader__LRClassLoader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassLoader_method_getSystemClassLoader__LRClassLoader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSystemClassLoader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClassLoader::clazzInfo(), // return type
  "_m_getSystemClassLoader", // alternative name of method
  -1, // altlabelHashCode
  ClassLoader_methods_getSystemClassLoader__LRClassLoader__args, // the arguments
  0, //arguments count
  ClassLoader_methods_getSystemClassLoader__LRClassLoader__exceptions, // the declared exceptions
  ClassLoader_MetainfoWrapper::ClassLoader_method_getSystemClassLoader__LRClassLoader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassLoader_methods_getSystemResource_INLRString__Lacdk_io_RFile__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassLoader_methods_getSystemResource_INLRString__Lacdk_io_RFile__args[] = 
{
  &ClassLoader_methods_getSystemResource_INLRString__Lacdk_io_RFile__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassLoader_methods_getSystemResource_INLRString__Lacdk_io_RFile__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassLoader_method_getSystemResource_INLRString__Lacdk_io_RFile_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSystemResource", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RFile::clazzInfo(), // return type
  "_i_getSystemResource", // alternative name of method
  -1, // altlabelHashCode
  ClassLoader_methods_getSystemResource_INLRString__Lacdk_io_RFile__args, // the arguments
  0, //arguments count
  ClassLoader_methods_getSystemResource_INLRString__Lacdk_io_RFile__exceptions, // the declared exceptions
  ClassLoader_MetainfoWrapper::ClassLoader_method_getSystemResource_INLRString__Lacdk_io_RFile__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassLoader_methods_getSystemResourceAsStream_INLRString__Lacdk_io_RReader__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassLoader_methods_getSystemResourceAsStream_INLRString__Lacdk_io_RReader__args[] = 
{
  &ClassLoader_methods_getSystemResourceAsStream_INLRString__Lacdk_io_RReader__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassLoader_methods_getSystemResourceAsStream_INLRString__Lacdk_io_RReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassLoader_method_getSystemResourceAsStream_INLRString__Lacdk_io_RReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSystemResourceAsStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo(), // return type
  "_j_getSystemResourceAsStream", // alternative name of method
  -1, // altlabelHashCode
  ClassLoader_methods_getSystemResourceAsStream_INLRString__Lacdk_io_RReader__args, // the arguments
  0, //arguments count
  ClassLoader_methods_getSystemResourceAsStream_INLRString__Lacdk_io_RReader__exceptions, // the declared exceptions
  ClassLoader_MetainfoWrapper::ClassLoader_method_getSystemResourceAsStream_INLRString__Lacdk_io_RReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassLoader_methods_getSystemResources_INLRString__Lacdk_util_RIterator__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassLoader_methods_getSystemResources_INLRString__Lacdk_util_RIterator__args[] = 
{
  &ClassLoader_methods_getSystemResources_INLRString__Lacdk_util_RIterator__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassLoader_methods_getSystemResources_INLRString__Lacdk_util_RIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassLoader_method_getSystemResources_INLRString__Lacdk_util_RIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSystemResources", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RIterator::clazzInfo(), // return type
  "_k_getSystemResources", // alternative name of method
  -1, // altlabelHashCode
  ClassLoader_methods_getSystemResources_INLRString__Lacdk_util_RIterator__args, // the arguments
  0, //arguments count
  ClassLoader_methods_getSystemResources_INLRString__Lacdk_util_RIterator__exceptions, // the declared exceptions
  ClassLoader_MetainfoWrapper::ClassLoader_method_getSystemResources_INLRString__Lacdk_util_RIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassLoader_methods_loadClass_INLRString__LRClass__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassLoader_methods_loadClass_INLRString__LRClass__args[] = 
{
  &ClassLoader_methods_loadClass_INLRString__LRClass__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassLoader_methods_loadClass_INLRString__LRClass__exceptions[] =
{
  RClassNotFoundException::clazzInfo(), 
  0
};

void ClassLoader_loadClass_INLRString__LRClass__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ClassNotFoundException) == true)
    THROW_INSTANCE( RClassNotFoundException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ClassLoader_method_loadClass_INLRString__LRClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "loadClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(), // return type
  "_n_loadClass", // alternative name of method
  -1, // altlabelHashCode
  ClassLoader_methods_loadClass_INLRString__LRClass__args, // the arguments
  0, //arguments count
  ClassLoader_methods_loadClass_INLRString__LRClass__exceptions, // the declared exceptions
  ClassLoader_MetainfoWrapper::ClassLoader_method_loadClass_INLRString__LRClass__dispatch, // invoke this method
  ClassLoader_loadClass_INLRString__LRClass__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassLoader_methods_loadClass_INLRString_Z_LRClass__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassLoader_methods_loadClass_INLRString_Z_LRClass__arg_resolve = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "resolve", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassLoader_methods_loadClass_INLRString_Z_LRClass__args[] = 
{
  &ClassLoader_methods_loadClass_INLRString_Z_LRClass__arg_name,
  &ClassLoader_methods_loadClass_INLRString_Z_LRClass__arg_resolve,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassLoader_methods_loadClass_INLRString_Z_LRClass__exceptions[] =
{
  RClassNotFoundException::clazzInfo(), 
  0
};

void ClassLoader_loadClass_INLRString_Z_LRClass__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ClassNotFoundException) == true)
    THROW_INSTANCE( RClassNotFoundException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ClassLoader_method_loadClass_INLRString_Z_LRClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "loadClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(), // return type
  "_o_loadClass", // alternative name of method
  -1, // altlabelHashCode
  ClassLoader_methods_loadClass_INLRString_Z_LRClass__args, // the arguments
  0, //arguments count
  ClassLoader_methods_loadClass_INLRString_Z_LRClass__exceptions, // the declared exceptions
  ClassLoader_MetainfoWrapper::ClassLoader_method_loadClass_INLRString_Z_LRClass__dispatch, // invoke this method
  ClassLoader_loadClass_INLRString_Z_LRClass__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassLoader_methods_loadClassLibrary_INLRString__Z_arg_classname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "classname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassLoader_methods_loadClassLibrary_INLRString__Z_args[] = 
{
  &ClassLoader_methods_loadClassLibrary_INLRString__Z_arg_classname,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassLoader_methods_loadClassLibrary_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassLoader_method_loadClassLibrary_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "loadClassLibrary", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_loadClassLibrary", // alternative name of method
  -1, // altlabelHashCode
  ClassLoader_methods_loadClassLibrary_INLRString__Z_args, // the arguments
  0, //arguments count
  ClassLoader_methods_loadClassLibrary_INLRString__Z_exceptions, // the declared exceptions
  ClassLoader_MetainfoWrapper::ClassLoader_method_loadClassLibrary_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassLoader_methods_loadDmiProxyLibrary_INLRString__Z_arg_classname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "classname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassLoader_methods_loadDmiProxyLibrary_INLRString__Z_args[] = 
{
  &ClassLoader_methods_loadDmiProxyLibrary_INLRString__Z_arg_classname,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassLoader_methods_loadDmiProxyLibrary_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassLoader_method_loadDmiProxyLibrary_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "loadDmiProxyLibrary", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_r_loadDmiProxyLibrary", // alternative name of method
  -1, // altlabelHashCode
  ClassLoader_methods_loadDmiProxyLibrary_INLRString__Z_args, // the arguments
  0, //arguments count
  ClassLoader_methods_loadDmiProxyLibrary_INLRString__Z_exceptions, // the declared exceptions
  ClassLoader_MetainfoWrapper::ClassLoader_method_loadDmiProxyLibrary_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassLoader_methods_loadExtInfoLibrary_INLRString_INLRString__Z_arg_classname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "classname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassLoader_methods_loadExtInfoLibrary_INLRString_INLRString__Z_arg_sufix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sufix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassLoader_methods_loadExtInfoLibrary_INLRString_INLRString__Z_args[] = 
{
  &ClassLoader_methods_loadExtInfoLibrary_INLRString_INLRString__Z_arg_classname,
  &ClassLoader_methods_loadExtInfoLibrary_INLRString_INLRString__Z_arg_sufix,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassLoader_methods_loadExtInfoLibrary_INLRString_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassLoader_method_loadExtInfoLibrary_INLRString_INLRString__Z = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "loadExtInfoLibrary", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_v_loadExtInfoLibrary", // alternative name of method
  -1, // altlabelHashCode
  ClassLoader_methods_loadExtInfoLibrary_INLRString_INLRString__Z_args, // the arguments
  0, //arguments count
  ClassLoader_methods_loadExtInfoLibrary_INLRString_INLRString__Z_exceptions, // the declared exceptions
  ClassLoader_MetainfoWrapper::ClassLoader_method_loadExtInfoLibrary_INLRString_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassLoader_methods_loadMetaInfoLibrary_INLRString__Z_arg_classname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "classname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassLoader_methods_loadMetaInfoLibrary_INLRString__Z_args[] = 
{
  &ClassLoader_methods_loadMetaInfoLibrary_INLRString__Z_arg_classname,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassLoader_methods_loadMetaInfoLibrary_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassLoader_method_loadMetaInfoLibrary_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "loadMetaInfoLibrary", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_q_loadMetaInfoLibrary", // alternative name of method
  -1, // altlabelHashCode
  ClassLoader_methods_loadMetaInfoLibrary_INLRString__Z_args, // the arguments
  0, //arguments count
  ClassLoader_methods_loadMetaInfoLibrary_INLRString__Z_exceptions, // the declared exceptions
  ClassLoader_MetainfoWrapper::ClassLoader_method_loadMetaInfoLibrary_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassLoader_methods_loadUnit_INLRString__Lacdk_lang_reflect_RUnit__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassLoader_methods_loadUnit_INLRString__Lacdk_lang_reflect_RUnit__args[] = 
{
  &ClassLoader_methods_loadUnit_INLRString__Lacdk_lang_reflect_RUnit__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassLoader_methods_loadUnit_INLRString__Lacdk_lang_reflect_RUnit__exceptions[] =
{
  RClassNotFoundException::clazzInfo(), 
  0
};

void ClassLoader_loadUnit_INLRString__Lacdk_lang_reflect_RUnit__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ClassNotFoundException) == true)
    THROW_INSTANCE( RClassNotFoundException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ClassLoader_method_loadUnit_INLRString__Lacdk_lang_reflect_RUnit_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "loadUnit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::reflect::RUnit::clazzInfo(), // return type
  "_p_loadUnit", // alternative name of method
  -1, // altlabelHashCode
  ClassLoader_methods_loadUnit_INLRString__Lacdk_lang_reflect_RUnit__args, // the arguments
  0, //arguments count
  ClassLoader_methods_loadUnit_INLRString__Lacdk_lang_reflect_RUnit__exceptions, // the declared exceptions
  ClassLoader_MetainfoWrapper::ClassLoader_method_loadUnit_INLRString__Lacdk_lang_reflect_RUnit__dispatch, // invoke this method
  ClassLoader_loadUnit_INLRString__Lacdk_lang_reflect_RUnit__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassLoader_methods_registerClassLoader_INLRClassLoader__V_arg_classLoader = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "classLoader", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClassLoader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassLoader_methods_registerClassLoader_INLRClassLoader__V_args[] = 
{
  &ClassLoader_methods_registerClassLoader_INLRClassLoader__V_arg_classLoader,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassLoader_methods_registerClassLoader_INLRClassLoader__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassLoader_method_registerClassLoader_INLRClassLoader__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "registerClassLoader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_u_registerClassLoader", // alternative name of method
  -1, // altlabelHashCode
  ClassLoader_methods_registerClassLoader_INLRClassLoader__V_args, // the arguments
  0, //arguments count
  ClassLoader_methods_registerClassLoader_INLRClassLoader__V_exceptions, // the declared exceptions
  ClassLoader_MetainfoWrapper::ClassLoader_method_registerClassLoader_INLRClassLoader__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassLoader_methods_resolveClass_INLRClass__V_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassLoader_methods_resolveClass_INLRClass__V_args[] = 
{
  &ClassLoader_methods_resolveClass_INLRClass__V_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassLoader_methods_resolveClass_INLRClass__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassLoader_method_resolveClass_INLRClass__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "resolveClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_s_resolveClass", // alternative name of method
  -1, // altlabelHashCode
  ClassLoader_methods_resolveClass_INLRClass__V_args, // the arguments
  0, //arguments count
  ClassLoader_methods_resolveClass_INLRClass__V_exceptions, // the declared exceptions
  ClassLoader_MetainfoWrapper::ClassLoader_method_resolveClass_INLRClass__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassLoader_methods_setSigners_INLRClass_INLRObjectArray__V_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassLoader_methods_setSigners_INLRClass_INLRObjectArray__V_arg_signers = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "signers", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassLoader_methods_setSigners_INLRClass_INLRObjectArray__V_args[] = 
{
  &ClassLoader_methods_setSigners_INLRClass_INLRObjectArray__V_arg_c,
  &ClassLoader_methods_setSigners_INLRClass_INLRObjectArray__V_arg_signers,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassLoader_methods_setSigners_INLRClass_INLRObjectArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassLoader_method_setSigners_INLRClass_INLRObjectArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSigners", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_t_setSigners", // alternative name of method
  -1, // altlabelHashCode
  ClassLoader_methods_setSigners_INLRClass_INLRObjectArray__V_args, // the arguments
  0, //arguments count
  ClassLoader_methods_setSigners_INLRClass_INLRObjectArray__V_exceptions, // the declared exceptions
  ClassLoader_MetainfoWrapper::ClassLoader_method_setSigners_INLRClass_INLRObjectArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ClassLoader_methods[] = 
{
  &ClassLoader_method_ClassLoader__LRClassLoader_,
  &ClassLoader_method_ClassLoader_INLRClassLoader__LRClassLoader_,
  &ClassLoader_method_GetClass__L_acdk_lang_RClass_,
  &ClassLoader_method_defineClass_INLRString_INLRbyteArray_II_LRClass_,
  &ClassLoader_method_findClass_INLRString_Z_LRClass_,
  &ClassLoader_method_findClass_INLRString__LRClass_,
  &ClassLoader_method_findLibrary_INLRString__LRString_,
  &ClassLoader_method_findLibrary2_INLRString__LRString_,
  &ClassLoader_method_findLoadedClass_INLRString_Z_LRClass_,
  &ClassLoader_method_findLoadedClass_INLRString__LRClass_,
  &ClassLoader_method_findResource_INLRString__Lacdk_io_RFile_,
  &ClassLoader_method_findResources_INLRString__Lacdk_util_RIterator_,
  &ClassLoader_method_findSystemClass_INLRString__LRClass_,
  &ClassLoader_method_getPackage_INLRString__LRPackage_,
  &ClassLoader_method_getPackages__LRPackageArray_,
  &ClassLoader_method_getParent__LRClassLoader_,
  &ClassLoader_method_getResource_INLRString__Lacdk_io_RFile_,
  &ClassLoader_method_getResourceAsStream_INLRString__Lacdk_io_RReader_,
  &ClassLoader_method_getResources_INLRString__Lacdk_util_RIterator_,
  &ClassLoader_method_getSystemClassLoader__LRClassLoader_,
  &ClassLoader_method_getSystemResource_INLRString__Lacdk_io_RFile_,
  &ClassLoader_method_getSystemResourceAsStream_INLRString__Lacdk_io_RReader_,
  &ClassLoader_method_getSystemResources_INLRString__Lacdk_util_RIterator_,
  &ClassLoader_method_loadClass_INLRString__LRClass_,
  &ClassLoader_method_loadClass_INLRString_Z_LRClass_,
  &ClassLoader_method_loadClassLibrary_INLRString__Z,
  &ClassLoader_method_loadDmiProxyLibrary_INLRString__Z,
  &ClassLoader_method_loadExtInfoLibrary_INLRString_INLRString__Z,
  &ClassLoader_method_loadMetaInfoLibrary_INLRString__Z,
  &ClassLoader_method_loadUnit_INLRString__Lacdk_lang_reflect_RUnit_,
  &ClassLoader_method_registerClassLoader_INLRClassLoader__V,
  &ClassLoader_method_resolveClass_INLRClass__V,
  &ClassLoader_method_setSigners_INLRClass_INLRObjectArray__V,
  0
};


struct ClassLoader_MetaInfoInitializer
{  ClassLoader_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ClassLoader::clazzInfo();
    ci->fields =  _ClassLoader_fields;
    ci->methods =  _ClassLoader_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ClassLoader_MetaInfoInitializer ClassLoader_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
ClassNotFoundException_create_array(int length)
{
  return new ObjectArrayImpl<RClassNotFoundException>(length);
}

//static
::acdk::lang::RObject
ClassNotFoundException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ClassNotFoundException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassNotFoundException_method_ClassNotFoundException__LRClassNotFoundException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ClassNotFoundException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassNotFoundException_method_ClassNotFoundException_INLRString__LRClassNotFoundException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ClassNotFoundException(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassNotFoundException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ClassNotFoundException::GetClass();
    return methinf;
  }
};


void ThrowException_ClassNotFoundException(IN(::acdk::lang::RThrowable) ex)
{
  throw RClassNotFoundException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _ClassNotFoundException_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassNotFoundException_methods_ClassNotFoundException__LRClassNotFoundException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ClassNotFoundException_methods_ClassNotFoundException__LRClassNotFoundException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassNotFoundException_method_ClassNotFoundException__LRClassNotFoundException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ClassNotFoundException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ClassNotFoundException::clazzInfo(), // return type
  "_0_ClassNotFoundException", // alternative name of method
  -1, // altlabelHashCode
  ClassNotFoundException_methods_ClassNotFoundException__LRClassNotFoundException__args, // the arguments
  0, //arguments count
  ClassNotFoundException_methods_ClassNotFoundException__LRClassNotFoundException__exceptions, // the declared exceptions
  ClassNotFoundException_MetainfoWrapper::ClassNotFoundException_method_ClassNotFoundException__LRClassNotFoundException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassNotFoundException_methods_ClassNotFoundException_INLRString__LRClassNotFoundException__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassNotFoundException_methods_ClassNotFoundException_INLRString__LRClassNotFoundException__args[] = 
{
  &ClassNotFoundException_methods_ClassNotFoundException_INLRString__LRClassNotFoundException__arg_what,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassNotFoundException_methods_ClassNotFoundException_INLRString__LRClassNotFoundException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassNotFoundException_method_ClassNotFoundException_INLRString__LRClassNotFoundException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ClassNotFoundException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ClassNotFoundException::clazzInfo(), // return type
  "_1_ClassNotFoundException", // alternative name of method
  -1, // altlabelHashCode
  ClassNotFoundException_methods_ClassNotFoundException_INLRString__LRClassNotFoundException__args, // the arguments
  0, //arguments count
  ClassNotFoundException_methods_ClassNotFoundException_INLRString__LRClassNotFoundException__exceptions, // the declared exceptions
  ClassNotFoundException_MetainfoWrapper::ClassNotFoundException_method_ClassNotFoundException_INLRString__LRClassNotFoundException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassNotFoundException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ClassNotFoundException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassNotFoundException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ClassNotFoundException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ClassNotFoundException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ClassNotFoundException_MetainfoWrapper::ClassNotFoundException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ClassNotFoundException_methods[] = 
{
  &ClassNotFoundException_method_ClassNotFoundException__LRClassNotFoundException_,
  &ClassNotFoundException_method_ClassNotFoundException_INLRString__LRClassNotFoundException_,
  &ClassNotFoundException_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct ClassNotFoundException_MetaInfoInitializer
{  ClassNotFoundException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ClassNotFoundException::clazzInfo();
    ci->fields =  _ClassNotFoundException_fields;
    ci->methods =  _ClassNotFoundException_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ClassNotFoundException_MetaInfoInitializer ClassNotFoundException_MetaInfoInitializer_staticinstance__;


struct ClassNotFoundException_clazzInfo_ClazzAttributesResInitializer14
{
  ClassNotFoundException_clazzInfo_ClazzAttributesResInitializer14()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)ClassNotFoundException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_ClassNotFoundException));
  }
};

ClassNotFoundException_clazzInfo_ClazzAttributesResInitializer14 ClassNotFoundException_clazzInfo_ClazzAttributesResInitializer14_instance;



} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
Cloneable_create_array(int length)
{
  return new ObjectArrayImpl<RCloneable>(length);
}

//static
::acdk::lang::RObject
Cloneable_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Cloneable_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Cloneable_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Cloneable::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Cloneable_method_clone__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Cloneable* This = dmi_cast<Cloneable>(This_);
    ret = (::acdk::lang::RObject)This->clone();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Cloneable_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Cloneable_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Cloneable_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Cloneable_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Cloneable_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Cloneable_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Cloneable_MetainfoWrapper::Cloneable_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Cloneable_methods_clone__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Cloneable_methods_clone__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Cloneable_method_clone__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_0_clone", // alternative name of method
  -1, // altlabelHashCode
  Cloneable_methods_clone__LRObject__args, // the arguments
  0, //arguments count
  Cloneable_methods_clone__LRObject__exceptions, // the declared exceptions
  Cloneable_MetainfoWrapper::Cloneable_method_clone__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Cloneable_methods[] = 
{
  &Cloneable_method_GetClass__L_acdk_lang_RClass_,
  &Cloneable_method_clone__LRObject_,
  0
};


struct Cloneable_MetaInfoInitializer
{  Cloneable_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Cloneable::clazzInfo();
    ci->fields =  _Cloneable_fields;
    ci->methods =  _Cloneable_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Cloneable_MetaInfoInitializer Cloneable_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
CloneNotSupportedException_create_array(int length)
{
  return new ObjectArrayImpl<RCloneNotSupportedException>(length);
}

//static
::acdk::lang::RObject
CloneNotSupportedException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class CloneNotSupportedException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CloneNotSupportedException_method_CloneNotSupportedException__LRCloneNotSupportedException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CloneNotSupportedException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CloneNotSupportedException_method_CloneNotSupportedException_INLRString__LRCloneNotSupportedException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CloneNotSupportedException(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CloneNotSupportedException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)CloneNotSupportedException::GetClass();
    return methinf;
  }
};


void ThrowException_CloneNotSupportedException(IN(::acdk::lang::RThrowable) ex)
{
  throw RCloneNotSupportedException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _CloneNotSupportedException_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* CloneNotSupportedException_methods_CloneNotSupportedException__LRCloneNotSupportedException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CloneNotSupportedException_methods_CloneNotSupportedException__LRCloneNotSupportedException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CloneNotSupportedException_method_CloneNotSupportedException__LRCloneNotSupportedException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "CloneNotSupportedException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CloneNotSupportedException::clazzInfo(), // return type
  "_0_CloneNotSupportedException", // alternative name of method
  -1, // altlabelHashCode
  CloneNotSupportedException_methods_CloneNotSupportedException__LRCloneNotSupportedException__args, // the arguments
  0, //arguments count
  CloneNotSupportedException_methods_CloneNotSupportedException__LRCloneNotSupportedException__exceptions, // the declared exceptions
  CloneNotSupportedException_MetainfoWrapper::CloneNotSupportedException_method_CloneNotSupportedException__LRCloneNotSupportedException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CloneNotSupportedException_methods_CloneNotSupportedException_INLRString__LRCloneNotSupportedException__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CloneNotSupportedException_methods_CloneNotSupportedException_INLRString__LRCloneNotSupportedException__args[] = 
{
  &CloneNotSupportedException_methods_CloneNotSupportedException_INLRString__LRCloneNotSupportedException__arg_what,
  0
};

::acdk::lang::dmi::ClazzInfo* CloneNotSupportedException_methods_CloneNotSupportedException_INLRString__LRCloneNotSupportedException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CloneNotSupportedException_method_CloneNotSupportedException_INLRString__LRCloneNotSupportedException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "CloneNotSupportedException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CloneNotSupportedException::clazzInfo(), // return type
  "_1_CloneNotSupportedException", // alternative name of method
  -1, // altlabelHashCode
  CloneNotSupportedException_methods_CloneNotSupportedException_INLRString__LRCloneNotSupportedException__args, // the arguments
  0, //arguments count
  CloneNotSupportedException_methods_CloneNotSupportedException_INLRString__LRCloneNotSupportedException__exceptions, // the declared exceptions
  CloneNotSupportedException_MetainfoWrapper::CloneNotSupportedException_method_CloneNotSupportedException_INLRString__LRCloneNotSupportedException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CloneNotSupportedException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CloneNotSupportedException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CloneNotSupportedException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  CloneNotSupportedException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  CloneNotSupportedException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  CloneNotSupportedException_MetainfoWrapper::CloneNotSupportedException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _CloneNotSupportedException_methods[] = 
{
  &CloneNotSupportedException_method_CloneNotSupportedException__LRCloneNotSupportedException_,
  &CloneNotSupportedException_method_CloneNotSupportedException_INLRString__LRCloneNotSupportedException_,
  &CloneNotSupportedException_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct CloneNotSupportedException_MetaInfoInitializer
{  CloneNotSupportedException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = CloneNotSupportedException::clazzInfo();
    ci->fields =  _CloneNotSupportedException_fields;
    ci->methods =  _CloneNotSupportedException_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
CloneNotSupportedException_MetaInfoInitializer CloneNotSupportedException_MetaInfoInitializer_staticinstance__;


struct CloneNotSupportedException_clazzInfo_ClazzAttributesResInitializer15
{
  CloneNotSupportedException_clazzInfo_ClazzAttributesResInitializer15()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)CloneNotSupportedException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_CloneNotSupportedException));
  }
};

CloneNotSupportedException_clazzInfo_ClazzAttributesResInitializer15 CloneNotSupportedException_clazzInfo_ClazzAttributesResInitializer15_instance;



} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
CmdLineOption_create_array(int length)
{
  return new ObjectArrayImpl<RCmdLineOption>(length);
}

//static
::acdk::lang::RObject
CmdLineOption_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class CmdLineOption_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CmdLineOption_method_CmdLineOption_INLRString_INLRString_ZINLRString_Z_LRCmdLineOption__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CmdLineOption(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< bool>(args[2], dc), ::acdk::lang::dmi::castTo< RString>(args[3], dc), ::acdk::lang::dmi::castTo< bool>(args[4], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CmdLineOption_method_CmdLineOption_INLRString_INLRString_ZINLRString__LRCmdLineOption__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CmdLineOption(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< bool>(args[2], dc), ::acdk::lang::dmi::castTo< RString>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CmdLineOption_method_CmdLineOption_INLRString_INLRString_INLRString_ZINLRString_Z_LRCmdLineOption__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CmdLineOption(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc), ::acdk::lang::dmi::castTo< bool>(args[3], dc), ::acdk::lang::dmi::castTo< RString>(args[4], dc), ::acdk::lang::dmi::castTo< bool>(args[5], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CmdLineOption_method_CmdLineOption_INLRString_INLRString_INLRString_ZINLRString__LRCmdLineOption__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CmdLineOption(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc), ::acdk::lang::dmi::castTo< bool>(args[3], dc), ::acdk::lang::dmi::castTo< RString>(args[4], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CmdLineOption_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)CmdLineOption::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CmdLineOption_method_printOn_INL_acdk_io_RPrintWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CmdLineOption* This = dmi_cast<CmdLineOption>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CmdLineOption::printOn(::acdk::lang::dmi::castTo< ::acdk::io::RPrintWriter>(args[0], dc));
    else
        This->printOn(::acdk::lang::dmi::castTo< ::acdk::io::RPrintWriter>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CmdLineOption_fields__alias_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CmdLineOption* This = dmi_cast<CmdLineOption>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_alias, flags);
    else
      This->_alias = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CmdLineOption_fields__docText_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CmdLineOption* This = dmi_cast<CmdLineOption>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_docText, flags);
    else
      This->_docText = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CmdLineOption_fields__expectArg_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CmdLineOption* This = dmi_cast<CmdLineOption>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_expectArg, flags);
    else
      This->_expectArg = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CmdLineOption_fields__option_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CmdLineOption* This = dmi_cast<CmdLineOption>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_option, flags);
    else
      This->_option = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CmdLineOption_fields__parsed_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CmdLineOption* This = dmi_cast<CmdLineOption>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_parsed, flags);
    else
      This->_parsed = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CmdLineOption_fields__required_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CmdLineOption* This = dmi_cast<CmdLineOption>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_required, flags);
    else
      This->_required = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CmdLineOption_fields__shortOption_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CmdLineOption* This = dmi_cast<CmdLineOption>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_shortOption, flags);
    else
      This->_shortOption = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo CmdLineOption_fields__alias = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_alias", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  CmdLineOption_MetainfoWrapper::CmdLineOption_fields__alias_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CmdLineOption_fields__docText = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_docText", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  CmdLineOption_MetainfoWrapper::CmdLineOption_fields__docText_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CmdLineOption_fields__expectArg = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_expectArg", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  CmdLineOption_MetainfoWrapper::CmdLineOption_fields__expectArg_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CmdLineOption_fields__option = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_option", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  CmdLineOption_MetainfoWrapper::CmdLineOption_fields__option_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CmdLineOption_fields__parsed = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_parsed", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  CmdLineOption_MetainfoWrapper::CmdLineOption_fields__parsed_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CmdLineOption_fields__required = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_required", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  CmdLineOption_MetainfoWrapper::CmdLineOption_fields__required_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CmdLineOption_fields__shortOption = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_shortOption", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  CmdLineOption_MetainfoWrapper::CmdLineOption_fields__shortOption_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _CmdLineOption_fields[] = 
{
  &CmdLineOption_fields__alias,
  &CmdLineOption_fields__docText,
  &CmdLineOption_fields__expectArg,
  &CmdLineOption_fields__option,
  &CmdLineOption_fields__parsed,
  &CmdLineOption_fields__required,
  &CmdLineOption_fields__shortOption,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineOption_methods_CmdLineOption_INLRString_INLRString_ZINLRString_Z_LRCmdLineOption__arg_option = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "option", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineOption_methods_CmdLineOption_INLRString_INLRString_ZINLRString_Z_LRCmdLineOption__arg_alias = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "alias", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineOption_methods_CmdLineOption_INLRString_INLRString_ZINLRString_Z_LRCmdLineOption__arg_expectArg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "expectArg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineOption_methods_CmdLineOption_INLRString_INLRString_ZINLRString_Z_LRCmdLineOption__arg_help = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "help", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineOption_methods_CmdLineOption_INLRString_INLRString_ZINLRString_Z_LRCmdLineOption__arg_required = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "required", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CmdLineOption_methods_CmdLineOption_INLRString_INLRString_ZINLRString_Z_LRCmdLineOption__args[] = 
{
  &CmdLineOption_methods_CmdLineOption_INLRString_INLRString_ZINLRString_Z_LRCmdLineOption__arg_option,
  &CmdLineOption_methods_CmdLineOption_INLRString_INLRString_ZINLRString_Z_LRCmdLineOption__arg_alias,
  &CmdLineOption_methods_CmdLineOption_INLRString_INLRString_ZINLRString_Z_LRCmdLineOption__arg_expectArg,
  &CmdLineOption_methods_CmdLineOption_INLRString_INLRString_ZINLRString_Z_LRCmdLineOption__arg_help,
  &CmdLineOption_methods_CmdLineOption_INLRString_INLRString_ZINLRString_Z_LRCmdLineOption__arg_required,
  0
};

::acdk::lang::dmi::ClazzInfo* CmdLineOption_methods_CmdLineOption_INLRString_INLRString_ZINLRString_Z_LRCmdLineOption__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CmdLineOption_method_CmdLineOption_INLRString_INLRString_ZINLRString_Z_LRCmdLineOption_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "CmdLineOption", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CmdLineOption::clazzInfo(), // return type
  "_0_CmdLineOption", // alternative name of method
  -1, // altlabelHashCode
  CmdLineOption_methods_CmdLineOption_INLRString_INLRString_ZINLRString_Z_LRCmdLineOption__args, // the arguments
  0, //arguments count
  CmdLineOption_methods_CmdLineOption_INLRString_INLRString_ZINLRString_Z_LRCmdLineOption__exceptions, // the declared exceptions
  CmdLineOption_MetainfoWrapper::CmdLineOption_method_CmdLineOption_INLRString_INLRString_ZINLRString_Z_LRCmdLineOption__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineOption_methods_CmdLineOption_INLRString_INLRString_ZINLRString__LRCmdLineOption__arg_option = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "option", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineOption_methods_CmdLineOption_INLRString_INLRString_ZINLRString__LRCmdLineOption__arg_alias = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "alias", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineOption_methods_CmdLineOption_INLRString_INLRString_ZINLRString__LRCmdLineOption__arg_expectArg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "expectArg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineOption_methods_CmdLineOption_INLRString_INLRString_ZINLRString__LRCmdLineOption__arg_help = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "help", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CmdLineOption_methods_CmdLineOption_INLRString_INLRString_ZINLRString__LRCmdLineOption__args[] = 
{
  &CmdLineOption_methods_CmdLineOption_INLRString_INLRString_ZINLRString__LRCmdLineOption__arg_option,
  &CmdLineOption_methods_CmdLineOption_INLRString_INLRString_ZINLRString__LRCmdLineOption__arg_alias,
  &CmdLineOption_methods_CmdLineOption_INLRString_INLRString_ZINLRString__LRCmdLineOption__arg_expectArg,
  &CmdLineOption_methods_CmdLineOption_INLRString_INLRString_ZINLRString__LRCmdLineOption__arg_help,
  0
};

::acdk::lang::dmi::ClazzInfo* CmdLineOption_methods_CmdLineOption_INLRString_INLRString_ZINLRString__LRCmdLineOption__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CmdLineOption_method_CmdLineOption_INLRString_INLRString_ZINLRString__LRCmdLineOption_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "CmdLineOption", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CmdLineOption::clazzInfo(), // return type
  "_1_CmdLineOption", // alternative name of method
  -1, // altlabelHashCode
  CmdLineOption_methods_CmdLineOption_INLRString_INLRString_ZINLRString__LRCmdLineOption__args, // the arguments
  0, //arguments count
  CmdLineOption_methods_CmdLineOption_INLRString_INLRString_ZINLRString__LRCmdLineOption__exceptions, // the declared exceptions
  CmdLineOption_MetainfoWrapper::CmdLineOption_method_CmdLineOption_INLRString_INLRString_ZINLRString__LRCmdLineOption__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineOption_methods_CmdLineOption_INLRString_INLRString_INLRString_ZINLRString_Z_LRCmdLineOption__arg_option = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "option", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineOption_methods_CmdLineOption_INLRString_INLRString_INLRString_ZINLRString_Z_LRCmdLineOption__arg_shortoption = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "shortoption", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineOption_methods_CmdLineOption_INLRString_INLRString_INLRString_ZINLRString_Z_LRCmdLineOption__arg_alias = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "alias", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineOption_methods_CmdLineOption_INLRString_INLRString_INLRString_ZINLRString_Z_LRCmdLineOption__arg_expectArg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "expectArg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineOption_methods_CmdLineOption_INLRString_INLRString_INLRString_ZINLRString_Z_LRCmdLineOption__arg_help = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "help", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineOption_methods_CmdLineOption_INLRString_INLRString_INLRString_ZINLRString_Z_LRCmdLineOption__arg_required = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "required", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CmdLineOption_methods_CmdLineOption_INLRString_INLRString_INLRString_ZINLRString_Z_LRCmdLineOption__args[] = 
{
  &CmdLineOption_methods_CmdLineOption_INLRString_INLRString_INLRString_ZINLRString_Z_LRCmdLineOption__arg_option,
  &CmdLineOption_methods_CmdLineOption_INLRString_INLRString_INLRString_ZINLRString_Z_LRCmdLineOption__arg_shortoption,
  &CmdLineOption_methods_CmdLineOption_INLRString_INLRString_INLRString_ZINLRString_Z_LRCmdLineOption__arg_alias,
  &CmdLineOption_methods_CmdLineOption_INLRString_INLRString_INLRString_ZINLRString_Z_LRCmdLineOption__arg_expectArg,
  &CmdLineOption_methods_CmdLineOption_INLRString_INLRString_INLRString_ZINLRString_Z_LRCmdLineOption__arg_help,
  &CmdLineOption_methods_CmdLineOption_INLRString_INLRString_INLRString_ZINLRString_Z_LRCmdLineOption__arg_required,
  0
};

::acdk::lang::dmi::ClazzInfo* CmdLineOption_methods_CmdLineOption_INLRString_INLRString_INLRString_ZINLRString_Z_LRCmdLineOption__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CmdLineOption_method_CmdLineOption_INLRString_INLRString_INLRString_ZINLRString_Z_LRCmdLineOption_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "CmdLineOption", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CmdLineOption::clazzInfo(), // return type
  "_2_CmdLineOption", // alternative name of method
  -1, // altlabelHashCode
  CmdLineOption_methods_CmdLineOption_INLRString_INLRString_INLRString_ZINLRString_Z_LRCmdLineOption__args, // the arguments
  0, //arguments count
  CmdLineOption_methods_CmdLineOption_INLRString_INLRString_INLRString_ZINLRString_Z_LRCmdLineOption__exceptions, // the declared exceptions
  CmdLineOption_MetainfoWrapper::CmdLineOption_method_CmdLineOption_INLRString_INLRString_INLRString_ZINLRString_Z_LRCmdLineOption__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineOption_methods_CmdLineOption_INLRString_INLRString_INLRString_ZINLRString__LRCmdLineOption__arg_option = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "option", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineOption_methods_CmdLineOption_INLRString_INLRString_INLRString_ZINLRString__LRCmdLineOption__arg_shortoption = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "shortoption", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineOption_methods_CmdLineOption_INLRString_INLRString_INLRString_ZINLRString__LRCmdLineOption__arg_alias = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "alias", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineOption_methods_CmdLineOption_INLRString_INLRString_INLRString_ZINLRString__LRCmdLineOption__arg_expectArg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "expectArg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineOption_methods_CmdLineOption_INLRString_INLRString_INLRString_ZINLRString__LRCmdLineOption__arg_help = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "help", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CmdLineOption_methods_CmdLineOption_INLRString_INLRString_INLRString_ZINLRString__LRCmdLineOption__args[] = 
{
  &CmdLineOption_methods_CmdLineOption_INLRString_INLRString_INLRString_ZINLRString__LRCmdLineOption__arg_option,
  &CmdLineOption_methods_CmdLineOption_INLRString_INLRString_INLRString_ZINLRString__LRCmdLineOption__arg_shortoption,
  &CmdLineOption_methods_CmdLineOption_INLRString_INLRString_INLRString_ZINLRString__LRCmdLineOption__arg_alias,
  &CmdLineOption_methods_CmdLineOption_INLRString_INLRString_INLRString_ZINLRString__LRCmdLineOption__arg_expectArg,
  &CmdLineOption_methods_CmdLineOption_INLRString_INLRString_INLRString_ZINLRString__LRCmdLineOption__arg_help,
  0
};

::acdk::lang::dmi::ClazzInfo* CmdLineOption_methods_CmdLineOption_INLRString_INLRString_INLRString_ZINLRString__LRCmdLineOption__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CmdLineOption_method_CmdLineOption_INLRString_INLRString_INLRString_ZINLRString__LRCmdLineOption_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "CmdLineOption", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CmdLineOption::clazzInfo(), // return type
  "_3_CmdLineOption", // alternative name of method
  -1, // altlabelHashCode
  CmdLineOption_methods_CmdLineOption_INLRString_INLRString_INLRString_ZINLRString__LRCmdLineOption__args, // the arguments
  0, //arguments count
  CmdLineOption_methods_CmdLineOption_INLRString_INLRString_INLRString_ZINLRString__LRCmdLineOption__exceptions, // the declared exceptions
  CmdLineOption_MetainfoWrapper::CmdLineOption_method_CmdLineOption_INLRString_INLRString_INLRString_ZINLRString__LRCmdLineOption__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CmdLineOption_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CmdLineOption_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CmdLineOption_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  CmdLineOption_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  CmdLineOption_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  CmdLineOption_MetainfoWrapper::CmdLineOption_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineOption_methods_printOn_INL_acdk_io_RPrintWriter__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::RPrintWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CmdLineOption_methods_printOn_INL_acdk_io_RPrintWriter__V_args[] = 
{
  &CmdLineOption_methods_printOn_INL_acdk_io_RPrintWriter__V_arg_out,
  0
};

::acdk::lang::dmi::ClazzInfo* CmdLineOption_methods_printOn_INL_acdk_io_RPrintWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CmdLineOption_method_printOn_INL_acdk_io_RPrintWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "printOn", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_printOn", // alternative name of method
  -1, // altlabelHashCode
  CmdLineOption_methods_printOn_INL_acdk_io_RPrintWriter__V_args, // the arguments
  0, //arguments count
  CmdLineOption_methods_printOn_INL_acdk_io_RPrintWriter__V_exceptions, // the declared exceptions
  CmdLineOption_MetainfoWrapper::CmdLineOption_method_printOn_INL_acdk_io_RPrintWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _CmdLineOption_methods[] = 
{
  &CmdLineOption_method_CmdLineOption_INLRString_INLRString_ZINLRString_Z_LRCmdLineOption_,
  &CmdLineOption_method_CmdLineOption_INLRString_INLRString_ZINLRString__LRCmdLineOption_,
  &CmdLineOption_method_CmdLineOption_INLRString_INLRString_INLRString_ZINLRString_Z_LRCmdLineOption_,
  &CmdLineOption_method_CmdLineOption_INLRString_INLRString_INLRString_ZINLRString__LRCmdLineOption_,
  &CmdLineOption_method_GetClass__L_acdk_lang_RClass_,
  &CmdLineOption_method_printOn_INL_acdk_io_RPrintWriter__V,
  0
};


struct CmdLineOption_MetaInfoInitializer
{  CmdLineOption_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = CmdLineOption::clazzInfo();
    ci->fields =  _CmdLineOption_fields;
    ci->methods =  _CmdLineOption_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
CmdLineOption_MetaInfoInitializer CmdLineOption_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
CmdLineParseException_create_array(int length)
{
  return new ObjectArrayImpl<RCmdLineParseException>(length);
}

//static
::acdk::lang::RObject
CmdLineParseException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class CmdLineParseException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CmdLineParseException_method_CmdLineParseException_INLRString_INLRStringArray_INLRCmdLineParser__LRCmdLineParseException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CmdLineParseException(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RStringArray>(args[1], dc), ::acdk::lang::dmi::castTo< RCmdLineParser>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CmdLineParseException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)CmdLineParseException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CmdLineParseException_fields__cmdline_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CmdLineParseException* This = dmi_cast<CmdLineParseException>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_cmdline, flags);
    else
      This->_cmdline = ::acdk::lang::dmi::castTo< RStringArray>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CmdLineParseException_fields__parser_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CmdLineParseException* This = dmi_cast<CmdLineParseException>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_parser, flags);
    else
      This->_parser = ::acdk::lang::dmi::castTo< RCmdLineParser>(var, dc);
    return fieldinf;
  }
};


void ThrowException_CmdLineParseException(IN(::acdk::lang::RThrowable) ex)
{
  throw RCmdLineParseException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo CmdLineParseException_fields__cmdline = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_cmdline", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(),
  CmdLineParseException_MetainfoWrapper::CmdLineParseException_fields__cmdline_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CmdLineParseException_fields__parser = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_parser", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCmdLineParser::clazzInfo(),
  CmdLineParseException_MetainfoWrapper::CmdLineParseException_fields__parser_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _CmdLineParseException_fields[] = 
{
  &CmdLineParseException_fields__cmdline,
  &CmdLineParseException_fields__parser,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineParseException_methods_CmdLineParseException_INLRString_INLRStringArray_INLRCmdLineParser__LRCmdLineParseException__arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineParseException_methods_CmdLineParseException_INLRString_INLRStringArray_INLRCmdLineParser__LRCmdLineParseException__arg_cmdlines = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cmdlines", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineParseException_methods_CmdLineParseException_INLRString_INLRStringArray_INLRCmdLineParser__LRCmdLineParseException__arg_cparser = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cparser", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCmdLineParser::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CmdLineParseException_methods_CmdLineParseException_INLRString_INLRStringArray_INLRCmdLineParser__LRCmdLineParseException__args[] = 
{
  &CmdLineParseException_methods_CmdLineParseException_INLRString_INLRStringArray_INLRCmdLineParser__LRCmdLineParseException__arg_msg,
  &CmdLineParseException_methods_CmdLineParseException_INLRString_INLRStringArray_INLRCmdLineParser__LRCmdLineParseException__arg_cmdlines,
  &CmdLineParseException_methods_CmdLineParseException_INLRString_INLRStringArray_INLRCmdLineParser__LRCmdLineParseException__arg_cparser,
  0
};

::acdk::lang::dmi::ClazzInfo* CmdLineParseException_methods_CmdLineParseException_INLRString_INLRStringArray_INLRCmdLineParser__LRCmdLineParseException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CmdLineParseException_method_CmdLineParseException_INLRString_INLRStringArray_INLRCmdLineParser__LRCmdLineParseException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "CmdLineParseException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CmdLineParseException::clazzInfo(), // return type
  "_0_CmdLineParseException", // alternative name of method
  -1, // altlabelHashCode
  CmdLineParseException_methods_CmdLineParseException_INLRString_INLRStringArray_INLRCmdLineParser__LRCmdLineParseException__args, // the arguments
  0, //arguments count
  CmdLineParseException_methods_CmdLineParseException_INLRString_INLRStringArray_INLRCmdLineParser__LRCmdLineParseException__exceptions, // the declared exceptions
  CmdLineParseException_MetainfoWrapper::CmdLineParseException_method_CmdLineParseException_INLRString_INLRStringArray_INLRCmdLineParser__LRCmdLineParseException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CmdLineParseException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CmdLineParseException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CmdLineParseException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  CmdLineParseException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  CmdLineParseException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  CmdLineParseException_MetainfoWrapper::CmdLineParseException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _CmdLineParseException_methods[] = 
{
  &CmdLineParseException_method_CmdLineParseException_INLRString_INLRStringArray_INLRCmdLineParser__LRCmdLineParseException_,
  &CmdLineParseException_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct CmdLineParseException_MetaInfoInitializer
{  CmdLineParseException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = CmdLineParseException::clazzInfo();
    ci->fields =  _CmdLineParseException_fields;
    ci->methods =  _CmdLineParseException_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
CmdLineParseException_MetaInfoInitializer CmdLineParseException_MetaInfoInitializer_staticinstance__;


struct CmdLineParseException_clazzInfo_ClazzAttributesResInitializer16
{
  CmdLineParseException_clazzInfo_ClazzAttributesResInitializer16()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)CmdLineParseException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_CmdLineParseException));
  }
};

CmdLineParseException_clazzInfo_ClazzAttributesResInitializer16 CmdLineParseException_clazzInfo_ClazzAttributesResInitializer16_instance;



} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
CmdLineParser_create_array(int length)
{
  return new ObjectArrayImpl<RCmdLineParser>(length);
}

//static
::acdk::lang::RObject
CmdLineParser_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class CmdLineParser_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CmdLineParser_method_CmdLineParser__LRCmdLineParser__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CmdLineParser();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CmdLineParser_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)CmdLineParser::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CmdLineParser_method_addOption_INLRCmdLineOption__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CmdLineParser* This = dmi_cast<CmdLineParser>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CmdLineParser::addOption(::acdk::lang::dmi::castTo< RCmdLineOption>(args[0], dc));
    else
        This->addOption(::acdk::lang::dmi::castTo< RCmdLineOption>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CmdLineParser_method_addOption_INLRString_INLRString_ZINLRString_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CmdLineParser* This = dmi_cast<CmdLineParser>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CmdLineParser::addOption(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< bool>(args[2], dc), ::acdk::lang::dmi::castTo< RString>(args[3], dc), ::acdk::lang::dmi::castTo< bool>(args[4], dc));
    else
        This->addOption(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< bool>(args[2], dc), ::acdk::lang::dmi::castTo< RString>(args[3], dc), ::acdk::lang::dmi::castTo< bool>(args[4], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CmdLineParser_method_addOption_INLRString_INLRString_ZINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CmdLineParser* This = dmi_cast<CmdLineParser>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CmdLineParser::addOption(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< bool>(args[2], dc), ::acdk::lang::dmi::castTo< RString>(args[3], dc));
    else
        This->addOption(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< bool>(args[2], dc), ::acdk::lang::dmi::castTo< RString>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CmdLineParser_method_addOption_INLRString_INLRString_INLRString_ZINLRString_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CmdLineParser* This = dmi_cast<CmdLineParser>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CmdLineParser::addOption(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc), ::acdk::lang::dmi::castTo< bool>(args[3], dc), ::acdk::lang::dmi::castTo< RString>(args[4], dc), ::acdk::lang::dmi::castTo< bool>(args[5], dc));
    else
        This->addOption(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc), ::acdk::lang::dmi::castTo< bool>(args[3], dc), ::acdk::lang::dmi::castTo< RString>(args[4], dc), ::acdk::lang::dmi::castTo< bool>(args[5], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CmdLineParser_method_addOption_INLRString_INLRString_INLRString_ZINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CmdLineParser* This = dmi_cast<CmdLineParser>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CmdLineParser::addOption(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc), ::acdk::lang::dmi::castTo< bool>(args[3], dc), ::acdk::lang::dmi::castTo< RString>(args[4], dc));
    else
        This->addOption(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc), ::acdk::lang::dmi::castTo< bool>(args[3], dc), ::acdk::lang::dmi::castTo< RString>(args[4], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CmdLineParser_method_parse_INLRStringArray_ZZ_L_acdk_util_RProperties__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CmdLineParser* This = dmi_cast<CmdLineParser>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->CmdLineParser::parse(::acdk::lang::dmi::castTo< RStringArray>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc), ::acdk::lang::dmi::castTo< bool>(args[2], dc));
    else
        ret = (::acdk::lang::RObject)This->parse(::acdk::lang::dmi::castTo< RStringArray>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc), ::acdk::lang::dmi::castTo< bool>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CmdLineParser_method_parse_INL_acdk_util_RProperties_INLRStringArray_Z_L_acdk_util_RProperties__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CmdLineParser* This = dmi_cast<CmdLineParser>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->CmdLineParser::parse(::acdk::lang::dmi::castTo< ::acdk::util::RProperties>(args[0], dc), ::acdk::lang::dmi::castTo< RStringArray>(args[1], dc), ::acdk::lang::dmi::castTo< bool>(args[2], dc));
    else
        ret = (::acdk::lang::RObject)This->parse(::acdk::lang::dmi::castTo< ::acdk::util::RProperties>(args[0], dc), ::acdk::lang::dmi::castTo< RStringArray>(args[1], dc), ::acdk::lang::dmi::castTo< bool>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CmdLineParser_method_parse_INLRStringArray__L_acdk_util_RProperties__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CmdLineParser* This = dmi_cast<CmdLineParser>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->CmdLineParser::parse(::acdk::lang::dmi::castTo< RStringArray>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->parse(::acdk::lang::dmi::castTo< RStringArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CmdLineParser_method_parse_INLRStringArray_Z_L_acdk_util_RProperties__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CmdLineParser* This = dmi_cast<CmdLineParser>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->CmdLineParser::parse(::acdk::lang::dmi::castTo< RStringArray>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->parse(::acdk::lang::dmi::castTo< RStringArray>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CmdLineParser_method_parse_INL_acdk_util_RProperties_INLRStringArray_ZZ_L_acdk_util_RProperties__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CmdLineParser* This = dmi_cast<CmdLineParser>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->CmdLineParser::parse(::acdk::lang::dmi::castTo< ::acdk::util::RProperties>(args[0], dc), ::acdk::lang::dmi::castTo< RStringArray>(args[1], dc), ::acdk::lang::dmi::castTo< bool>(args[2], dc), ::acdk::lang::dmi::castTo< bool>(args[3], dc));
    else
        ret = (::acdk::lang::RObject)This->parse(::acdk::lang::dmi::castTo< ::acdk::util::RProperties>(args[0], dc), ::acdk::lang::dmi::castTo< RStringArray>(args[1], dc), ::acdk::lang::dmi::castTo< bool>(args[2], dc), ::acdk::lang::dmi::castTo< bool>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CmdLineParser_method_parse_INL_acdk_util_RProperties_INLRStringArray__L_acdk_util_RProperties__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CmdLineParser* This = dmi_cast<CmdLineParser>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->CmdLineParser::parse(::acdk::lang::dmi::castTo< ::acdk::util::RProperties>(args[0], dc), ::acdk::lang::dmi::castTo< RStringArray>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->parse(::acdk::lang::dmi::castTo< ::acdk::util::RProperties>(args[0], dc), ::acdk::lang::dmi::castTo< RStringArray>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CmdLineParser_method_printHelp_INL_acdk_io_RPrintWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CmdLineParser* This = dmi_cast<CmdLineParser>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CmdLineParser::printHelp(::acdk::lang::dmi::castTo< ::acdk::io::RPrintWriter>(args[0], dc));
    else
        This->printHelp(::acdk::lang::dmi::castTo< ::acdk::io::RPrintWriter>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CmdLineParser_fields__helpDetail_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CmdLineParser* This = dmi_cast<CmdLineParser>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_helpDetail, flags);
    else
      This->_helpDetail = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CmdLineParser_fields__helpHeader_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CmdLineParser* This = dmi_cast<CmdLineParser>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_helpHeader, flags);
    else
      This->_helpHeader = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CmdLineParser_fields__map_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CmdLineParser* This = dmi_cast<CmdLineParser>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_map, flags);
    else
      This->_map = ::acdk::lang::dmi::castTo< ::acdk::util::RHashMap>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo CmdLineParser_fields__helpDetail = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_helpDetail", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  CmdLineParser_MetainfoWrapper::CmdLineParser_fields__helpDetail_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CmdLineParser_fields__helpHeader = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_helpHeader", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  CmdLineParser_MetainfoWrapper::CmdLineParser_fields__helpHeader_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CmdLineParser_fields__map = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_map", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::RHashMap::clazzInfo(),
  CmdLineParser_MetainfoWrapper::CmdLineParser_fields__map_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _CmdLineParser_fields[] = 
{
  &CmdLineParser_fields__helpDetail,
  &CmdLineParser_fields__helpHeader,
  &CmdLineParser_fields__map,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* CmdLineParser_methods_CmdLineParser__LRCmdLineParser__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CmdLineParser_methods_CmdLineParser__LRCmdLineParser__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CmdLineParser_method_CmdLineParser__LRCmdLineParser_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "CmdLineParser", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CmdLineParser::clazzInfo(), // return type
  "_0_CmdLineParser", // alternative name of method
  -1, // altlabelHashCode
  CmdLineParser_methods_CmdLineParser__LRCmdLineParser__args, // the arguments
  0, //arguments count
  CmdLineParser_methods_CmdLineParser__LRCmdLineParser__exceptions, // the declared exceptions
  CmdLineParser_MetainfoWrapper::CmdLineParser_method_CmdLineParser__LRCmdLineParser__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CmdLineParser_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CmdLineParser_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CmdLineParser_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_d_GetClass", // alternative name of method
  -1, // altlabelHashCode
  CmdLineParser_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  CmdLineParser_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  CmdLineParser_MetainfoWrapper::CmdLineParser_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineParser_methods_addOption_INLRCmdLineOption__V_arg_opt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "opt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCmdLineOption::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CmdLineParser_methods_addOption_INLRCmdLineOption__V_args[] = 
{
  &CmdLineParser_methods_addOption_INLRCmdLineOption__V_arg_opt,
  0
};

::acdk::lang::dmi::ClazzInfo* CmdLineParser_methods_addOption_INLRCmdLineOption__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CmdLineParser_method_addOption_INLRCmdLineOption__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addOption", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_addOption", // alternative name of method
  -1, // altlabelHashCode
  CmdLineParser_methods_addOption_INLRCmdLineOption__V_args, // the arguments
  0, //arguments count
  CmdLineParser_methods_addOption_INLRCmdLineOption__V_exceptions, // the declared exceptions
  CmdLineParser_MetainfoWrapper::CmdLineParser_method_addOption_INLRCmdLineOption__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineParser_methods_addOption_INLRString_INLRString_ZINLRString_Z_V_arg_option = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "option", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineParser_methods_addOption_INLRString_INLRString_ZINLRString_Z_V_arg_alias = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "alias", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineParser_methods_addOption_INLRString_INLRString_ZINLRString_Z_V_arg_expectArg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "expectArg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineParser_methods_addOption_INLRString_INLRString_ZINLRString_Z_V_arg_help = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "help", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineParser_methods_addOption_INLRString_INLRString_ZINLRString_Z_V_arg_required = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "required", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CmdLineParser_methods_addOption_INLRString_INLRString_ZINLRString_Z_V_args[] = 
{
  &CmdLineParser_methods_addOption_INLRString_INLRString_ZINLRString_Z_V_arg_option,
  &CmdLineParser_methods_addOption_INLRString_INLRString_ZINLRString_Z_V_arg_alias,
  &CmdLineParser_methods_addOption_INLRString_INLRString_ZINLRString_Z_V_arg_expectArg,
  &CmdLineParser_methods_addOption_INLRString_INLRString_ZINLRString_Z_V_arg_help,
  &CmdLineParser_methods_addOption_INLRString_INLRString_ZINLRString_Z_V_arg_required,
  0
};

::acdk::lang::dmi::ClazzInfo* CmdLineParser_methods_addOption_INLRString_INLRString_ZINLRString_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CmdLineParser_method_addOption_INLRString_INLRString_ZINLRString_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addOption", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_addOption", // alternative name of method
  -1, // altlabelHashCode
  CmdLineParser_methods_addOption_INLRString_INLRString_ZINLRString_Z_V_args, // the arguments
  0, //arguments count
  CmdLineParser_methods_addOption_INLRString_INLRString_ZINLRString_Z_V_exceptions, // the declared exceptions
  CmdLineParser_MetainfoWrapper::CmdLineParser_method_addOption_INLRString_INLRString_ZINLRString_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineParser_methods_addOption_INLRString_INLRString_ZINLRString__V_arg_option = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "option", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineParser_methods_addOption_INLRString_INLRString_ZINLRString__V_arg_alias = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "alias", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineParser_methods_addOption_INLRString_INLRString_ZINLRString__V_arg_expectArg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "expectArg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineParser_methods_addOption_INLRString_INLRString_ZINLRString__V_arg_help = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "help", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CmdLineParser_methods_addOption_INLRString_INLRString_ZINLRString__V_args[] = 
{
  &CmdLineParser_methods_addOption_INLRString_INLRString_ZINLRString__V_arg_option,
  &CmdLineParser_methods_addOption_INLRString_INLRString_ZINLRString__V_arg_alias,
  &CmdLineParser_methods_addOption_INLRString_INLRString_ZINLRString__V_arg_expectArg,
  &CmdLineParser_methods_addOption_INLRString_INLRString_ZINLRString__V_arg_help,
  0
};

::acdk::lang::dmi::ClazzInfo* CmdLineParser_methods_addOption_INLRString_INLRString_ZINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CmdLineParser_method_addOption_INLRString_INLRString_ZINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "addOption", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_addOption", // alternative name of method
  -1, // altlabelHashCode
  CmdLineParser_methods_addOption_INLRString_INLRString_ZINLRString__V_args, // the arguments
  0, //arguments count
  CmdLineParser_methods_addOption_INLRString_INLRString_ZINLRString__V_exceptions, // the declared exceptions
  CmdLineParser_MetainfoWrapper::CmdLineParser_method_addOption_INLRString_INLRString_ZINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineParser_methods_addOption_INLRString_INLRString_INLRString_ZINLRString_Z_V_arg_option = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "option", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineParser_methods_addOption_INLRString_INLRString_INLRString_ZINLRString_Z_V_arg_shortoption = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "shortoption", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineParser_methods_addOption_INLRString_INLRString_INLRString_ZINLRString_Z_V_arg_alias = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "alias", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineParser_methods_addOption_INLRString_INLRString_INLRString_ZINLRString_Z_V_arg_expectArg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "expectArg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineParser_methods_addOption_INLRString_INLRString_INLRString_ZINLRString_Z_V_arg_help = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "help", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineParser_methods_addOption_INLRString_INLRString_INLRString_ZINLRString_Z_V_arg_required = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "required", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CmdLineParser_methods_addOption_INLRString_INLRString_INLRString_ZINLRString_Z_V_args[] = 
{
  &CmdLineParser_methods_addOption_INLRString_INLRString_INLRString_ZINLRString_Z_V_arg_option,
  &CmdLineParser_methods_addOption_INLRString_INLRString_INLRString_ZINLRString_Z_V_arg_shortoption,
  &CmdLineParser_methods_addOption_INLRString_INLRString_INLRString_ZINLRString_Z_V_arg_alias,
  &CmdLineParser_methods_addOption_INLRString_INLRString_INLRString_ZINLRString_Z_V_arg_expectArg,
  &CmdLineParser_methods_addOption_INLRString_INLRString_INLRString_ZINLRString_Z_V_arg_help,
  &CmdLineParser_methods_addOption_INLRString_INLRString_INLRString_ZINLRString_Z_V_arg_required,
  0
};

::acdk::lang::dmi::ClazzInfo* CmdLineParser_methods_addOption_INLRString_INLRString_INLRString_ZINLRString_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CmdLineParser_method_addOption_INLRString_INLRString_INLRString_ZINLRString_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addOption", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_addOption", // alternative name of method
  -1, // altlabelHashCode
  CmdLineParser_methods_addOption_INLRString_INLRString_INLRString_ZINLRString_Z_V_args, // the arguments
  0, //arguments count
  CmdLineParser_methods_addOption_INLRString_INLRString_INLRString_ZINLRString_Z_V_exceptions, // the declared exceptions
  CmdLineParser_MetainfoWrapper::CmdLineParser_method_addOption_INLRString_INLRString_INLRString_ZINLRString_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineParser_methods_addOption_INLRString_INLRString_INLRString_ZINLRString__V_arg_option = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "option", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineParser_methods_addOption_INLRString_INLRString_INLRString_ZINLRString__V_arg_shortoption = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "shortoption", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineParser_methods_addOption_INLRString_INLRString_INLRString_ZINLRString__V_arg_alias = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "alias", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineParser_methods_addOption_INLRString_INLRString_INLRString_ZINLRString__V_arg_expectArg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "expectArg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineParser_methods_addOption_INLRString_INLRString_INLRString_ZINLRString__V_arg_help = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "help", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CmdLineParser_methods_addOption_INLRString_INLRString_INLRString_ZINLRString__V_args[] = 
{
  &CmdLineParser_methods_addOption_INLRString_INLRString_INLRString_ZINLRString__V_arg_option,
  &CmdLineParser_methods_addOption_INLRString_INLRString_INLRString_ZINLRString__V_arg_shortoption,
  &CmdLineParser_methods_addOption_INLRString_INLRString_INLRString_ZINLRString__V_arg_alias,
  &CmdLineParser_methods_addOption_INLRString_INLRString_INLRString_ZINLRString__V_arg_expectArg,
  &CmdLineParser_methods_addOption_INLRString_INLRString_INLRString_ZINLRString__V_arg_help,
  0
};

::acdk::lang::dmi::ClazzInfo* CmdLineParser_methods_addOption_INLRString_INLRString_INLRString_ZINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CmdLineParser_method_addOption_INLRString_INLRString_INLRString_ZINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "addOption", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_addOption", // alternative name of method
  -1, // altlabelHashCode
  CmdLineParser_methods_addOption_INLRString_INLRString_INLRString_ZINLRString__V_args, // the arguments
  0, //arguments count
  CmdLineParser_methods_addOption_INLRString_INLRString_INLRString_ZINLRString__V_exceptions, // the declared exceptions
  CmdLineParser_MetainfoWrapper::CmdLineParser_method_addOption_INLRString_INLRString_INLRString_ZINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineParser_methods_parse_INLRStringArray_ZZ_L_acdk_util_RProperties__arg_args = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "args", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineParser_methods_parse_INLRStringArray_ZZ_L_acdk_util_RProperties__arg_ignoreUnknown = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "ignoreUnknown", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineParser_methods_parse_INLRStringArray_ZZ_L_acdk_util_RProperties__arg_stripDetected = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "stripDetected", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CmdLineParser_methods_parse_INLRStringArray_ZZ_L_acdk_util_RProperties__args[] = 
{
  &CmdLineParser_methods_parse_INLRStringArray_ZZ_L_acdk_util_RProperties__arg_args,
  &CmdLineParser_methods_parse_INLRStringArray_ZZ_L_acdk_util_RProperties__arg_ignoreUnknown,
  &CmdLineParser_methods_parse_INLRStringArray_ZZ_L_acdk_util_RProperties__arg_stripDetected,
  0
};

::acdk::lang::dmi::ClazzInfo* CmdLineParser_methods_parse_INLRStringArray_ZZ_L_acdk_util_RProperties__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CmdLineParser_method_parse_INLRStringArray_ZZ_L_acdk_util_RProperties_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::RProperties::clazzInfo(), // return type
  "_7_parse", // alternative name of method
  -1, // altlabelHashCode
  CmdLineParser_methods_parse_INLRStringArray_ZZ_L_acdk_util_RProperties__args, // the arguments
  0, //arguments count
  CmdLineParser_methods_parse_INLRStringArray_ZZ_L_acdk_util_RProperties__exceptions, // the declared exceptions
  CmdLineParser_MetainfoWrapper::CmdLineParser_method_parse_INLRStringArray_ZZ_L_acdk_util_RProperties__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineParser_methods_parse_INL_acdk_util_RProperties_INLRStringArray_Z_L_acdk_util_RProperties__arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::RProperties::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineParser_methods_parse_INL_acdk_util_RProperties_INLRStringArray_Z_L_acdk_util_RProperties__arg_args = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "args", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineParser_methods_parse_INL_acdk_util_RProperties_INLRStringArray_Z_L_acdk_util_RProperties__arg_ignoreUnknown = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "ignoreUnknown", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CmdLineParser_methods_parse_INL_acdk_util_RProperties_INLRStringArray_Z_L_acdk_util_RProperties__args[] = 
{
  &CmdLineParser_methods_parse_INL_acdk_util_RProperties_INLRStringArray_Z_L_acdk_util_RProperties__arg_props,
  &CmdLineParser_methods_parse_INL_acdk_util_RProperties_INLRStringArray_Z_L_acdk_util_RProperties__arg_args,
  &CmdLineParser_methods_parse_INL_acdk_util_RProperties_INLRStringArray_Z_L_acdk_util_RProperties__arg_ignoreUnknown,
  0
};

::acdk::lang::dmi::ClazzInfo* CmdLineParser_methods_parse_INL_acdk_util_RProperties_INLRStringArray_Z_L_acdk_util_RProperties__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CmdLineParser_method_parse_INL_acdk_util_RProperties_INLRStringArray_Z_L_acdk_util_RProperties_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "parse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::RProperties::clazzInfo(), // return type
  "_c_parse", // alternative name of method
  -1, // altlabelHashCode
  CmdLineParser_methods_parse_INL_acdk_util_RProperties_INLRStringArray_Z_L_acdk_util_RProperties__args, // the arguments
  0, //arguments count
  CmdLineParser_methods_parse_INL_acdk_util_RProperties_INLRStringArray_Z_L_acdk_util_RProperties__exceptions, // the declared exceptions
  CmdLineParser_MetainfoWrapper::CmdLineParser_method_parse_INL_acdk_util_RProperties_INLRStringArray_Z_L_acdk_util_RProperties__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineParser_methods_parse_INLRStringArray__L_acdk_util_RProperties__arg_args = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "args", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CmdLineParser_methods_parse_INLRStringArray__L_acdk_util_RProperties__args[] = 
{
  &CmdLineParser_methods_parse_INLRStringArray__L_acdk_util_RProperties__arg_args,
  0
};

::acdk::lang::dmi::ClazzInfo* CmdLineParser_methods_parse_INLRStringArray__L_acdk_util_RProperties__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CmdLineParser_method_parse_INLRStringArray__L_acdk_util_RProperties_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "parse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::RProperties::clazzInfo(), // return type
  "_8_parse", // alternative name of method
  -1, // altlabelHashCode
  CmdLineParser_methods_parse_INLRStringArray__L_acdk_util_RProperties__args, // the arguments
  0, //arguments count
  CmdLineParser_methods_parse_INLRStringArray__L_acdk_util_RProperties__exceptions, // the declared exceptions
  CmdLineParser_MetainfoWrapper::CmdLineParser_method_parse_INLRStringArray__L_acdk_util_RProperties__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineParser_methods_parse_INLRStringArray_Z_L_acdk_util_RProperties__arg_args = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "args", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineParser_methods_parse_INLRStringArray_Z_L_acdk_util_RProperties__arg_ignoreUnknown = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "ignoreUnknown", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CmdLineParser_methods_parse_INLRStringArray_Z_L_acdk_util_RProperties__args[] = 
{
  &CmdLineParser_methods_parse_INLRStringArray_Z_L_acdk_util_RProperties__arg_args,
  &CmdLineParser_methods_parse_INLRStringArray_Z_L_acdk_util_RProperties__arg_ignoreUnknown,
  0
};

::acdk::lang::dmi::ClazzInfo* CmdLineParser_methods_parse_INLRStringArray_Z_L_acdk_util_RProperties__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CmdLineParser_method_parse_INLRStringArray_Z_L_acdk_util_RProperties_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "parse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::RProperties::clazzInfo(), // return type
  "_9_parse", // alternative name of method
  -1, // altlabelHashCode
  CmdLineParser_methods_parse_INLRStringArray_Z_L_acdk_util_RProperties__args, // the arguments
  0, //arguments count
  CmdLineParser_methods_parse_INLRStringArray_Z_L_acdk_util_RProperties__exceptions, // the declared exceptions
  CmdLineParser_MetainfoWrapper::CmdLineParser_method_parse_INLRStringArray_Z_L_acdk_util_RProperties__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineParser_methods_parse_INL_acdk_util_RProperties_INLRStringArray_ZZ_L_acdk_util_RProperties__arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::RProperties::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineParser_methods_parse_INL_acdk_util_RProperties_INLRStringArray_ZZ_L_acdk_util_RProperties__arg_args = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "args", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineParser_methods_parse_INL_acdk_util_RProperties_INLRStringArray_ZZ_L_acdk_util_RProperties__arg_ignoreUnknown = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "ignoreUnknown", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineParser_methods_parse_INL_acdk_util_RProperties_INLRStringArray_ZZ_L_acdk_util_RProperties__arg_stripDetected = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "stripDetected", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CmdLineParser_methods_parse_INL_acdk_util_RProperties_INLRStringArray_ZZ_L_acdk_util_RProperties__args[] = 
{
  &CmdLineParser_methods_parse_INL_acdk_util_RProperties_INLRStringArray_ZZ_L_acdk_util_RProperties__arg_props,
  &CmdLineParser_methods_parse_INL_acdk_util_RProperties_INLRStringArray_ZZ_L_acdk_util_RProperties__arg_args,
  &CmdLineParser_methods_parse_INL_acdk_util_RProperties_INLRStringArray_ZZ_L_acdk_util_RProperties__arg_ignoreUnknown,
  &CmdLineParser_methods_parse_INL_acdk_util_RProperties_INLRStringArray_ZZ_L_acdk_util_RProperties__arg_stripDetected,
  0
};

::acdk::lang::dmi::ClazzInfo* CmdLineParser_methods_parse_INL_acdk_util_RProperties_INLRStringArray_ZZ_L_acdk_util_RProperties__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CmdLineParser_method_parse_INL_acdk_util_RProperties_INLRStringArray_ZZ_L_acdk_util_RProperties_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::RProperties::clazzInfo(), // return type
  "_a_parse", // alternative name of method
  -1, // altlabelHashCode
  CmdLineParser_methods_parse_INL_acdk_util_RProperties_INLRStringArray_ZZ_L_acdk_util_RProperties__args, // the arguments
  0, //arguments count
  CmdLineParser_methods_parse_INL_acdk_util_RProperties_INLRStringArray_ZZ_L_acdk_util_RProperties__exceptions, // the declared exceptions
  CmdLineParser_MetainfoWrapper::CmdLineParser_method_parse_INL_acdk_util_RProperties_INLRStringArray_ZZ_L_acdk_util_RProperties__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineParser_methods_parse_INL_acdk_util_RProperties_INLRStringArray__L_acdk_util_RProperties__arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::RProperties::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineParser_methods_parse_INL_acdk_util_RProperties_INLRStringArray__L_acdk_util_RProperties__arg_args = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "args", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CmdLineParser_methods_parse_INL_acdk_util_RProperties_INLRStringArray__L_acdk_util_RProperties__args[] = 
{
  &CmdLineParser_methods_parse_INL_acdk_util_RProperties_INLRStringArray__L_acdk_util_RProperties__arg_props,
  &CmdLineParser_methods_parse_INL_acdk_util_RProperties_INLRStringArray__L_acdk_util_RProperties__arg_args,
  0
};

::acdk::lang::dmi::ClazzInfo* CmdLineParser_methods_parse_INL_acdk_util_RProperties_INLRStringArray__L_acdk_util_RProperties__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CmdLineParser_method_parse_INL_acdk_util_RProperties_INLRStringArray__L_acdk_util_RProperties_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "parse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::RProperties::clazzInfo(), // return type
  "_b_parse", // alternative name of method
  -1, // altlabelHashCode
  CmdLineParser_methods_parse_INL_acdk_util_RProperties_INLRStringArray__L_acdk_util_RProperties__args, // the arguments
  0, //arguments count
  CmdLineParser_methods_parse_INL_acdk_util_RProperties_INLRStringArray__L_acdk_util_RProperties__exceptions, // the declared exceptions
  CmdLineParser_MetainfoWrapper::CmdLineParser_method_parse_INL_acdk_util_RProperties_INLRStringArray__L_acdk_util_RProperties__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CmdLineParser_methods_printHelp_INL_acdk_io_RPrintWriter__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::RPrintWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CmdLineParser_methods_printHelp_INL_acdk_io_RPrintWriter__V_args[] = 
{
  &CmdLineParser_methods_printHelp_INL_acdk_io_RPrintWriter__V_arg_out,
  0
};

::acdk::lang::dmi::ClazzInfo* CmdLineParser_methods_printHelp_INL_acdk_io_RPrintWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CmdLineParser_method_printHelp_INL_acdk_io_RPrintWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "printHelp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_printHelp", // alternative name of method
  -1, // altlabelHashCode
  CmdLineParser_methods_printHelp_INL_acdk_io_RPrintWriter__V_args, // the arguments
  0, //arguments count
  CmdLineParser_methods_printHelp_INL_acdk_io_RPrintWriter__V_exceptions, // the declared exceptions
  CmdLineParser_MetainfoWrapper::CmdLineParser_method_printHelp_INL_acdk_io_RPrintWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _CmdLineParser_methods[] = 
{
  &CmdLineParser_method_CmdLineParser__LRCmdLineParser_,
  &CmdLineParser_method_GetClass__L_acdk_lang_RClass_,
  &CmdLineParser_method_addOption_INLRCmdLineOption__V,
  &CmdLineParser_method_addOption_INLRString_INLRString_ZINLRString_Z_V,
  &CmdLineParser_method_addOption_INLRString_INLRString_ZINLRString__V,
  &CmdLineParser_method_addOption_INLRString_INLRString_INLRString_ZINLRString_Z_V,
  &CmdLineParser_method_addOption_INLRString_INLRString_INLRString_ZINLRString__V,
  &CmdLineParser_method_parse_INLRStringArray_ZZ_L_acdk_util_RProperties_,
  &CmdLineParser_method_parse_INL_acdk_util_RProperties_INLRStringArray_Z_L_acdk_util_RProperties_,
  &CmdLineParser_method_parse_INLRStringArray__L_acdk_util_RProperties_,
  &CmdLineParser_method_parse_INLRStringArray_Z_L_acdk_util_RProperties_,
  &CmdLineParser_method_parse_INL_acdk_util_RProperties_INLRStringArray_ZZ_L_acdk_util_RProperties_,
  &CmdLineParser_method_parse_INL_acdk_util_RProperties_INLRStringArray__L_acdk_util_RProperties_,
  &CmdLineParser_method_printHelp_INL_acdk_io_RPrintWriter__V,
  0
};


struct CmdLineParser_MetaInfoInitializer
{  CmdLineParser_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = CmdLineParser::clazzInfo();
    ci->fields =  _CmdLineParser_fields;
    ci->methods =  _CmdLineParser_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
CmdLineParser_MetaInfoInitializer CmdLineParser_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
Comparable_create_array(int length)
{
  return new ObjectArrayImpl<RComparable>(length);
}

//static
::acdk::lang::RObject
Comparable_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Comparable_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Comparable_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Comparable::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Comparable_method_compareTo_INLRObject__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Comparable* This = dmi_cast<Comparable>(This_);
  ret = This->compareTo(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Comparable_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Comparable_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Comparable_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Comparable_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Comparable_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Comparable_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Comparable_MetainfoWrapper::Comparable_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Comparable_methods_compareTo_INLRObject__I_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Comparable_methods_compareTo_INLRObject__I_args[] = 
{
  &Comparable_methods_compareTo_INLRObject__I_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* Comparable_methods_compareTo_INLRObject__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Comparable_method_compareTo_INLRObject__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "compareTo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_0_compareTo", // alternative name of method
  -1, // altlabelHashCode
  Comparable_methods_compareTo_INLRObject__I_args, // the arguments
  0, //arguments count
  Comparable_methods_compareTo_INLRObject__I_exceptions, // the declared exceptions
  Comparable_MetainfoWrapper::Comparable_method_compareTo_INLRObject__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Comparable_methods[] = 
{
  &Comparable_method_GetClass__L_acdk_lang_RClass_,
  &Comparable_method_compareTo_INLRObject__I,
  0
};


struct Comparable_MetaInfoInitializer
{  Comparable_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Comparable::clazzInfo();
    ci->fields =  _Comparable_fields;
    ci->methods =  _Comparable_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Comparable_MetaInfoInitializer Comparable_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
DmiException_create_array(int length)
{
  return new ObjectArrayImpl<RDmiException>(length);
}

//static
::acdk::lang::RObject
DmiException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DmiException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiException_method_DmiException__LRDmiException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiException_method_DmiException_INLRString__LRDmiException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiException(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DmiException::GetClass();
    return methinf;
  }
};


void ThrowException_DmiException(IN(::acdk::lang::RThrowable) ex)
{
  throw RDmiException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _DmiException_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiException_methods_DmiException__LRDmiException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiException_methods_DmiException__LRDmiException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiException_method_DmiException__LRDmiException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiException::clazzInfo(), // return type
  "_0_DmiException", // alternative name of method
  -1, // altlabelHashCode
  DmiException_methods_DmiException__LRDmiException__args, // the arguments
  0, //arguments count
  DmiException_methods_DmiException__LRDmiException__exceptions, // the declared exceptions
  DmiException_MetainfoWrapper::DmiException_method_DmiException__LRDmiException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiException_methods_DmiException_INLRString__LRDmiException__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiException_methods_DmiException_INLRString__LRDmiException__args[] = 
{
  &DmiException_methods_DmiException_INLRString__LRDmiException__arg_what,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiException_methods_DmiException_INLRString__LRDmiException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiException_method_DmiException_INLRString__LRDmiException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiException::clazzInfo(), // return type
  "_1_DmiException", // alternative name of method
  -1, // altlabelHashCode
  DmiException_methods_DmiException_INLRString__LRDmiException__args, // the arguments
  0, //arguments count
  DmiException_methods_DmiException_INLRString__LRDmiException__exceptions, // the declared exceptions
  DmiException_MetainfoWrapper::DmiException_method_DmiException_INLRString__LRDmiException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DmiException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DmiException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DmiException_MetainfoWrapper::DmiException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DmiException_methods[] = 
{
  &DmiException_method_DmiException__LRDmiException_,
  &DmiException_method_DmiException_INLRString__LRDmiException_,
  &DmiException_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct DmiException_MetaInfoInitializer
{  DmiException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DmiException::clazzInfo();
    ci->fields =  _DmiException_fields;
    ci->methods =  _DmiException_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DmiException_MetaInfoInitializer DmiException_MetaInfoInitializer_staticinstance__;


struct DmiException_clazzInfo_ClazzAttributesResInitializer17
{
  DmiException_clazzInfo_ClazzAttributesResInitializer17()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)DmiException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_DmiException));
  }
};

DmiException_clazzInfo_ClazzAttributesResInitializer17 DmiException_clazzInfo_ClazzAttributesResInitializer17_instance;



} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
DmiTypeConversionException_create_array(int length)
{
  return new ObjectArrayImpl<RDmiTypeConversionException>(length);
}

//static
::acdk::lang::RObject
DmiTypeConversionException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DmiTypeConversionException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTypeConversionException_method_DmiTypeConversionException__LRDmiTypeConversionException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiTypeConversionException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTypeConversionException_method_DmiTypeConversionException_INLRString__LRDmiTypeConversionException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiTypeConversionException(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTypeConversionException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DmiTypeConversionException::GetClass();
    return methinf;
  }
};


void ThrowException_DmiTypeConversionException(IN(::acdk::lang::RThrowable) ex)
{
  throw RDmiTypeConversionException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _DmiTypeConversionException_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTypeConversionException_methods_DmiTypeConversionException__LRDmiTypeConversionException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTypeConversionException_methods_DmiTypeConversionException__LRDmiTypeConversionException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTypeConversionException_method_DmiTypeConversionException__LRDmiTypeConversionException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiTypeConversionException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiTypeConversionException::clazzInfo(), // return type
  "_0_DmiTypeConversionException", // alternative name of method
  -1, // altlabelHashCode
  DmiTypeConversionException_methods_DmiTypeConversionException__LRDmiTypeConversionException__args, // the arguments
  0, //arguments count
  DmiTypeConversionException_methods_DmiTypeConversionException__LRDmiTypeConversionException__exceptions, // the declared exceptions
  DmiTypeConversionException_MetainfoWrapper::DmiTypeConversionException_method_DmiTypeConversionException__LRDmiTypeConversionException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTypeConversionException_methods_DmiTypeConversionException_INLRString__LRDmiTypeConversionException__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTypeConversionException_methods_DmiTypeConversionException_INLRString__LRDmiTypeConversionException__args[] = 
{
  &DmiTypeConversionException_methods_DmiTypeConversionException_INLRString__LRDmiTypeConversionException__arg_what,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTypeConversionException_methods_DmiTypeConversionException_INLRString__LRDmiTypeConversionException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTypeConversionException_method_DmiTypeConversionException_INLRString__LRDmiTypeConversionException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiTypeConversionException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiTypeConversionException::clazzInfo(), // return type
  "_1_DmiTypeConversionException", // alternative name of method
  -1, // altlabelHashCode
  DmiTypeConversionException_methods_DmiTypeConversionException_INLRString__LRDmiTypeConversionException__args, // the arguments
  0, //arguments count
  DmiTypeConversionException_methods_DmiTypeConversionException_INLRString__LRDmiTypeConversionException__exceptions, // the declared exceptions
  DmiTypeConversionException_MetainfoWrapper::DmiTypeConversionException_method_DmiTypeConversionException_INLRString__LRDmiTypeConversionException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTypeConversionException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTypeConversionException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTypeConversionException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DmiTypeConversionException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DmiTypeConversionException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DmiTypeConversionException_MetainfoWrapper::DmiTypeConversionException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DmiTypeConversionException_methods[] = 
{
  &DmiTypeConversionException_method_DmiTypeConversionException__LRDmiTypeConversionException_,
  &DmiTypeConversionException_method_DmiTypeConversionException_INLRString__LRDmiTypeConversionException_,
  &DmiTypeConversionException_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct DmiTypeConversionException_MetaInfoInitializer
{  DmiTypeConversionException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DmiTypeConversionException::clazzInfo();
    ci->fields =  _DmiTypeConversionException_fields;
    ci->methods =  _DmiTypeConversionException_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DmiTypeConversionException_MetaInfoInitializer DmiTypeConversionException_MetaInfoInitializer_staticinstance__;


struct DmiTypeConversionException_clazzInfo_ClazzAttributesResInitializer18
{
  DmiTypeConversionException_clazzInfo_ClazzAttributesResInitializer18()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)DmiTypeConversionException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_DmiTypeConversionException));
  }
};

DmiTypeConversionException_clazzInfo_ClazzAttributesResInitializer18 DmiTypeConversionException_clazzInfo_ClazzAttributesResInitializer18_instance;



} // namespace acdk
} // namespace lang


namespace acdk { 
namespace lang { 


//static
::acdk::lang::RObject
Double_create_array(int length)
{
  return new ObjectArrayImpl<RDouble>(length);
}

//static
::acdk::lang::RObject
Double_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Double_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Double_method_Double_D_LRDouble__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Double(::acdk::lang::dmi::castTo< double>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Double_method_Double_INLRString_INLacdk_util_RLocale__LRDouble__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Double(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< acdk::util::RLocale>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Double_method_Double__LRDouble__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Double();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Double_method_Double_INLRString__LRDouble__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Double(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Double_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Double::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Double_method_compareTo_INLRDouble__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Double* This = dmi_cast<Double>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Double::compareTo(::acdk::lang::dmi::castTo< RDouble>(args[0], dc));
    else
      ret = This->compareTo(::acdk::lang::dmi::castTo< RDouble>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Double_method_compareTo_D_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Double* This = dmi_cast<Double>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Double::compareTo(::acdk::lang::dmi::castTo< double>(args[0], dc));
    else
      ret = This->compareTo(::acdk::lang::dmi::castTo< double>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Double_method_create_instance__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Double::create_instance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Double_method_doubleToRawLongBits_D_J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Double::doubleToRawLongBits(::acdk::lang::dmi::castTo< double>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Double_method_equals_INLRDouble__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Double* This = dmi_cast<Double>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Double::equals(::acdk::lang::dmi::castTo< RDouble>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< RDouble>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Double_method_equals_D_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Double* This = dmi_cast<Double>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Double::equals(::acdk::lang::dmi::castTo< double>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< double>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Double_method_getTYPE__LRClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Double::getTYPE();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Double_method_hashCode_D_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Double::hashCode(::acdk::lang::dmi::castTo< double>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Double_method_isInfinite__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Double* This = dmi_cast<Double>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Double::isInfinite();
    else
      ret = This->isInfinite();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Double_method_isInfinite_D_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Double::isInfinite(::acdk::lang::dmi::castTo< double>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Double_method_isNaN__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Double* This = dmi_cast<Double>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Double::isNaN();
    else
      ret = This->isNaN();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Double_method_isNaN_D_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Double::isNaN(::acdk::lang::dmi::castTo< double>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Double_method_longBitsToDouble_J_D_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Double::longBitsToDouble(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Double_method_parseDouble_INLRString_INLacdk_util_RLocale__D_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Double::parseDouble(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< acdk::util::RLocale>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Double_method_parseDouble_INLRString__D_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Double::parseDouble(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Double_method_toString_DINLacdk_util_RLocale__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Double::toString(::acdk::lang::dmi::castTo< double>(args[0], dc), ::acdk::lang::dmi::castTo< acdk::util::RLocale>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Double_method_toString_D_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Double::toString(::acdk::lang::dmi::castTo< double>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Double_method_valueOf_INLRString__LRDouble__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Double::valueOf(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Double_fields_MAX_VALUE_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Double::MAX_VALUE, flags);
    else
      Double::MAX_VALUE = ::acdk::lang::dmi::castTo< double>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Double_fields_MIN_VALUE_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Double::MIN_VALUE, flags);
    else
      Double::MIN_VALUE = ::acdk::lang::dmi::castTo< double>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Double_fields_NEGATIVE_INFINITY_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Double::NEGATIVE_INFINITY, flags);
    else
      Double::NEGATIVE_INFINITY = ::acdk::lang::dmi::castTo< double>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Double_fields_NaN_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Double::NaN, flags);
    else
      Double::NaN = ::acdk::lang::dmi::castTo< double>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Double_fields_POSITIVE_INFINITY_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Double::POSITIVE_INFINITY, flags);
    else
      Double::POSITIVE_INFINITY = ::acdk::lang::dmi::castTo< double>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Double_fields_value_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Double* This = dmi_cast<Double>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->value, flags);
    else
      This->value = ::acdk::lang::dmi::castTo< double>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo Double_fields_MAX_VALUE = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "MAX_VALUE", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(),
  Double_MetainfoWrapper::Double_fields_MAX_VALUE_accessor, // read/write access to this fields
  (void*)&Double::MAX_VALUE // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Double_fields_MIN_VALUE = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "MIN_VALUE", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(),
  Double_MetainfoWrapper::Double_fields_MIN_VALUE_accessor, // read/write access to this fields
  (void*)&Double::MIN_VALUE // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Double_fields_NEGATIVE_INFINITY = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "NEGATIVE_INFINITY", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(),
  Double_MetainfoWrapper::Double_fields_NEGATIVE_INFINITY_accessor, // read/write access to this fields
  (void*)&Double::NEGATIVE_INFINITY // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Double_fields_NaN = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "NaN", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(),
  Double_MetainfoWrapper::Double_fields_NaN_accessor, // read/write access to this fields
  (void*)&Double::NaN // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Double_fields_POSITIVE_INFINITY = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "POSITIVE_INFINITY", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(),
  Double_MetainfoWrapper::Double_fields_POSITIVE_INFINITY_accessor, // read/write access to this fields
  (void*)&Double::POSITIVE_INFINITY // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Double_fields_value = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "value", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(),
  Double_MetainfoWrapper::Double_fields_value_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _Double_fields[] = 
{
  &Double_fields_MAX_VALUE,
  &Double_fields_MIN_VALUE,
  &Double_fields_NEGATIVE_INFINITY,
  &Double_fields_NaN,
  &Double_fields_POSITIVE_INFINITY,
  &Double_fields_value,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo Double_methods_Double_D_LRDouble__arg_d = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "d", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Double_methods_Double_D_LRDouble__args[] = 
{
  &Double_methods_Double_D_LRDouble__arg_d,
  0
};

::acdk::lang::dmi::ClazzInfo* Double_methods_Double_D_LRDouble__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Double_method_Double_D_LRDouble_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Double", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Double::clazzInfo(), // return type
  "_2_Double", // alternative name of method
  -1, // altlabelHashCode
  Double_methods_Double_D_LRDouble__args, // the arguments
  0, //arguments count
  Double_methods_Double_D_LRDouble__exceptions, // the declared exceptions
  Double_MetainfoWrapper::Double_method_Double_D_LRDouble__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Double_methods_Double_INLRString_INLacdk_util_RLocale__LRDouble__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Double_methods_Double_INLRString_INLacdk_util_RLocale__LRDouble__arg_locale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "locale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RLocale::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Double_methods_Double_INLRString_INLacdk_util_RLocale__LRDouble__args[] = 
{
  &Double_methods_Double_INLRString_INLacdk_util_RLocale__LRDouble__arg_str,
  &Double_methods_Double_INLRString_INLacdk_util_RLocale__LRDouble__arg_locale,
  0
};

::acdk::lang::dmi::ClazzInfo* Double_methods_Double_INLRString_INLacdk_util_RLocale__LRDouble__exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Double_Double_INLRString_INLacdk_util_RLocale__LRDouble__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Double_method_Double_INLRString_INLacdk_util_RLocale__LRDouble_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Double", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Double::clazzInfo(), // return type
  "_3_Double", // alternative name of method
  -1, // altlabelHashCode
  Double_methods_Double_INLRString_INLacdk_util_RLocale__LRDouble__args, // the arguments
  0, //arguments count
  Double_methods_Double_INLRString_INLacdk_util_RLocale__LRDouble__exceptions, // the declared exceptions
  Double_MetainfoWrapper::Double_method_Double_INLRString_INLacdk_util_RLocale__LRDouble__dispatch, // invoke this method
  Double_Double_INLRString_INLacdk_util_RLocale__LRDouble__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Double_methods_Double__LRDouble__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Double_methods_Double__LRDouble__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Double_method_Double__LRDouble_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Double", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Double::clazzInfo(), // return type
  "_1_Double", // alternative name of method
  -1, // altlabelHashCode
  Double_methods_Double__LRDouble__args, // the arguments
  0, //arguments count
  Double_methods_Double__LRDouble__exceptions, // the declared exceptions
  Double_MetainfoWrapper::Double_method_Double__LRDouble__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Double_methods_Double_INLRString__LRDouble__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Double_methods_Double_INLRString__LRDouble__args[] = 
{
  &Double_methods_Double_INLRString__LRDouble__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* Double_methods_Double_INLRString__LRDouble__exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Double_Double_INLRString__LRDouble__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Double_method_Double_INLRString__LRDouble_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Double", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Double::clazzInfo(), // return type
  "_4_Double", // alternative name of method
  -1, // altlabelHashCode
  Double_methods_Double_INLRString__LRDouble__args, // the arguments
  0, //arguments count
  Double_methods_Double_INLRString__LRDouble__exceptions, // the declared exceptions
  Double_MetainfoWrapper::Double_method_Double_INLRString__LRDouble__dispatch, // invoke this method
  Double_Double_INLRString__LRDouble__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Double_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Double_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Double_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_m_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Double_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Double_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Double_MetainfoWrapper::Double_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Double_methods_compareTo_INLRDouble__I_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDouble::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Double_methods_compareTo_INLRDouble__I_args[] = 
{
  &Double_methods_compareTo_INLRDouble__I_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* Double_methods_compareTo_INLRDouble__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Double_method_compareTo_INLRDouble__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "compareTo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_compareTo", // alternative name of method
  -1, // altlabelHashCode
  Double_methods_compareTo_INLRDouble__I_args, // the arguments
  0, //arguments count
  Double_methods_compareTo_INLRDouble__I_exceptions, // the declared exceptions
  Double_MetainfoWrapper::Double_method_compareTo_INLRDouble__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Double_methods_compareTo_D_I_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Double_methods_compareTo_D_I_args[] = 
{
  &Double_methods_compareTo_D_I_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* Double_methods_compareTo_D_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Double_method_compareTo_D_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "compareTo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_compareTo", // alternative name of method
  -1, // altlabelHashCode
  Double_methods_compareTo_D_I_args, // the arguments
  0, //arguments count
  Double_methods_compareTo_D_I_exceptions, // the declared exceptions
  Double_MetainfoWrapper::Double_method_compareTo_D_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Double_methods_create_instance__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Double_methods_create_instance__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Double_method_create_instance__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create_instance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_0_create_instance", // alternative name of method
  -1, // altlabelHashCode
  Double_methods_create_instance__LRObject__args, // the arguments
  0, //arguments count
  Double_methods_create_instance__LRObject__exceptions, // the declared exceptions
  Double_MetainfoWrapper::Double_method_create_instance__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Double_methods_doubleToRawLongBits_D_J_arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Double_methods_doubleToRawLongBits_D_J_args[] = 
{
  &Double_methods_doubleToRawLongBits_D_J_arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* Double_methods_doubleToRawLongBits_D_J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Double_method_doubleToRawLongBits_D_J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "doubleToRawLongBits", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_h_doubleToRawLongBits", // alternative name of method
  -1, // altlabelHashCode
  Double_methods_doubleToRawLongBits_D_J_args, // the arguments
  0, //arguments count
  Double_methods_doubleToRawLongBits_D_J_exceptions, // the declared exceptions
  Double_MetainfoWrapper::Double_method_doubleToRawLongBits_D_J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Double_methods_equals_INLRDouble__Z_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDouble::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Double_methods_equals_INLRDouble__Z_args[] = 
{
  &Double_methods_equals_INLRDouble__Z_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* Double_methods_equals_INLRDouble__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Double_method_equals_INLRDouble__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_equals", // alternative name of method
  -1, // altlabelHashCode
  Double_methods_equals_INLRDouble__Z_args, // the arguments
  0, //arguments count
  Double_methods_equals_INLRDouble__Z_exceptions, // the declared exceptions
  Double_MetainfoWrapper::Double_method_equals_INLRDouble__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Double_methods_equals_D_Z_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Double_methods_equals_D_Z_args[] = 
{
  &Double_methods_equals_D_Z_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* Double_methods_equals_D_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Double_method_equals_D_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_8_equals", // alternative name of method
  -1, // altlabelHashCode
  Double_methods_equals_D_Z_args, // the arguments
  0, //arguments count
  Double_methods_equals_D_Z_exceptions, // the declared exceptions
  Double_MetainfoWrapper::Double_method_equals_D_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Double_methods_getTYPE__LRClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Double_methods_getTYPE__LRClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Double_method_getTYPE__LRClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTYPE", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(), // return type
  "_f_getTYPE", // alternative name of method
  -1, // altlabelHashCode
  Double_methods_getTYPE__LRClass__args, // the arguments
  0, //arguments count
  Double_methods_getTYPE__LRClass__exceptions, // the declared exceptions
  Double_MetainfoWrapper::Double_method_getTYPE__LRClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Double_methods_hashCode_D_I_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Double_methods_hashCode_D_I_args[] = 
{
  &Double_methods_hashCode_D_I_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* Double_methods_hashCode_D_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Double_method_hashCode_D_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hashCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_b_hashCode", // alternative name of method
  -1, // altlabelHashCode
  Double_methods_hashCode_D_I_args, // the arguments
  0, //arguments count
  Double_methods_hashCode_D_I_exceptions, // the declared exceptions
  Double_MetainfoWrapper::Double_method_hashCode_D_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Double_methods_isInfinite__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Double_methods_isInfinite__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Double_method_isInfinite__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isInfinite", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_k_isInfinite", // alternative name of method
  -1, // altlabelHashCode
  Double_methods_isInfinite__Z_args, // the arguments
  0, //arguments count
  Double_methods_isInfinite__Z_exceptions, // the declared exceptions
  Double_MetainfoWrapper::Double_method_isInfinite__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Double_methods_isInfinite_D_Z_arg_v = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "v", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Double_methods_isInfinite_D_Z_args[] = 
{
  &Double_methods_isInfinite_D_Z_arg_v,
  0
};

::acdk::lang::dmi::ClazzInfo* Double_methods_isInfinite_D_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Double_method_isInfinite_D_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isInfinite", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_l_isInfinite", // alternative name of method
  -1, // altlabelHashCode
  Double_methods_isInfinite_D_Z_args, // the arguments
  0, //arguments count
  Double_methods_isInfinite_D_Z_exceptions, // the declared exceptions
  Double_MetainfoWrapper::Double_method_isInfinite_D_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Double_methods_isNaN__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Double_methods_isNaN__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Double_method_isNaN__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isNaN", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_i_isNaN", // alternative name of method
  -1, // altlabelHashCode
  Double_methods_isNaN__Z_args, // the arguments
  0, //arguments count
  Double_methods_isNaN__Z_exceptions, // the declared exceptions
  Double_MetainfoWrapper::Double_method_isNaN__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Double_methods_isNaN_D_Z_arg_v = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "v", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Double_methods_isNaN_D_Z_args[] = 
{
  &Double_methods_isNaN_D_Z_arg_v,
  0
};

::acdk::lang::dmi::ClazzInfo* Double_methods_isNaN_D_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Double_method_isNaN_D_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isNaN", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_j_isNaN", // alternative name of method
  -1, // altlabelHashCode
  Double_methods_isNaN_D_Z_args, // the arguments
  0, //arguments count
  Double_methods_isNaN_D_Z_exceptions, // the declared exceptions
  Double_MetainfoWrapper::Double_method_isNaN_D_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Double_methods_longBitsToDouble_J_D_arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Double_methods_longBitsToDouble_J_D_args[] = 
{
  &Double_methods_longBitsToDouble_J_D_arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* Double_methods_longBitsToDouble_J_D_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Double_method_longBitsToDouble_J_D = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "longBitsToDouble", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(), // return type
  "_g_longBitsToDouble", // alternative name of method
  -1, // altlabelHashCode
  Double_methods_longBitsToDouble_J_D_args, // the arguments
  0, //arguments count
  Double_methods_longBitsToDouble_J_D_exceptions, // the declared exceptions
  Double_MetainfoWrapper::Double_method_longBitsToDouble_J_D_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Double_methods_parseDouble_INLRString_INLacdk_util_RLocale__D_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Double_methods_parseDouble_INLRString_INLacdk_util_RLocale__D_arg_locale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "locale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RLocale::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Double_methods_parseDouble_INLRString_INLacdk_util_RLocale__D_args[] = 
{
  &Double_methods_parseDouble_INLRString_INLacdk_util_RLocale__D_arg_s,
  &Double_methods_parseDouble_INLRString_INLacdk_util_RLocale__D_arg_locale,
  0
};

::acdk::lang::dmi::ClazzInfo* Double_methods_parseDouble_INLRString_INLacdk_util_RLocale__D_exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Double_parseDouble_INLRString_INLacdk_util_RLocale__D_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Double_method_parseDouble_INLRString_INLacdk_util_RLocale__D = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parseDouble", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(), // return type
  "_9_parseDouble", // alternative name of method
  -1, // altlabelHashCode
  Double_methods_parseDouble_INLRString_INLacdk_util_RLocale__D_args, // the arguments
  0, //arguments count
  Double_methods_parseDouble_INLRString_INLacdk_util_RLocale__D_exceptions, // the declared exceptions
  Double_MetainfoWrapper::Double_method_parseDouble_INLRString_INLacdk_util_RLocale__D_dispatch, // invoke this method
  Double_parseDouble_INLRString_INLacdk_util_RLocale__D_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Double_methods_parseDouble_INLRString__D_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Double_methods_parseDouble_INLRString__D_args[] = 
{
  &Double_methods_parseDouble_INLRString__D_arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* Double_methods_parseDouble_INLRString__D_exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Double_parseDouble_INLRString__D_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Double_method_parseDouble_INLRString__D = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "parseDouble", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(), // return type
  "_a_parseDouble", // alternative name of method
  -1, // altlabelHashCode
  Double_methods_parseDouble_INLRString__D_args, // the arguments
  0, //arguments count
  Double_methods_parseDouble_INLRString__D_exceptions, // the declared exceptions
  Double_MetainfoWrapper::Double_method_parseDouble_INLRString__D_dispatch, // invoke this method
  Double_parseDouble_INLRString__D_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Double_methods_toString_DINLacdk_util_RLocale__LRString__arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Double_methods_toString_DINLacdk_util_RLocale__LRString__arg_locale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "locale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RLocale::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Double_methods_toString_DINLacdk_util_RLocale__LRString__args[] = 
{
  &Double_methods_toString_DINLacdk_util_RLocale__LRString__arg_i,
  &Double_methods_toString_DINLacdk_util_RLocale__LRString__arg_locale,
  0
};

::acdk::lang::dmi::ClazzInfo* Double_methods_toString_DINLacdk_util_RLocale__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Double_method_toString_DINLacdk_util_RLocale__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_c_toString", // alternative name of method
  -1, // altlabelHashCode
  Double_methods_toString_DINLacdk_util_RLocale__LRString__args, // the arguments
  0, //arguments count
  Double_methods_toString_DINLacdk_util_RLocale__LRString__exceptions, // the declared exceptions
  Double_MetainfoWrapper::Double_method_toString_DINLacdk_util_RLocale__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Double_methods_toString_D_LRString__arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Double_methods_toString_D_LRString__args[] = 
{
  &Double_methods_toString_D_LRString__arg_i,
  0
};

::acdk::lang::dmi::ClazzInfo* Double_methods_toString_D_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Double_method_toString_D_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_d_toString", // alternative name of method
  -1, // altlabelHashCode
  Double_methods_toString_D_LRString__args, // the arguments
  0, //arguments count
  Double_methods_toString_D_LRString__exceptions, // the declared exceptions
  Double_MetainfoWrapper::Double_method_toString_D_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Double_methods_valueOf_INLRString__LRDouble__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Double_methods_valueOf_INLRString__LRDouble__args[] = 
{
  &Double_methods_valueOf_INLRString__LRDouble__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* Double_methods_valueOf_INLRString__LRDouble__exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  0
};

void Double_valueOf_INLRString__LRDouble__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Double_method_valueOf_INLRString__LRDouble_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "valueOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDouble::clazzInfo(), // return type
  "_e_valueOf", // alternative name of method
  -1, // altlabelHashCode
  Double_methods_valueOf_INLRString__LRDouble__args, // the arguments
  0, //arguments count
  Double_methods_valueOf_INLRString__LRDouble__exceptions, // the declared exceptions
  Double_MetainfoWrapper::Double_method_valueOf_INLRString__LRDouble__dispatch, // invoke this method
  Double_valueOf_INLRString__LRDouble__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Double_methods[] = 
{
  &Double_method_Double_D_LRDouble_,
  &Double_method_Double_INLRString_INLacdk_util_RLocale__LRDouble_,
  &Double_method_Double__LRDouble_,
  &Double_method_Double_INLRString__LRDouble_,
  &Double_method_GetClass__L_acdk_lang_RClass_,
  &Double_method_compareTo_INLRDouble__I,
  &Double_method_compareTo_D_I,
  &Double_method_create_instance__LRObject_,
  &Double_method_doubleToRawLongBits_D_J,
  &Double_method_equals_INLRDouble__Z,
  &Double_method_equals_D_Z,
  &Double_method_getTYPE__LRClass_,
  &Double_method_hashCode_D_I,
  &Double_method_isInfinite__Z,
  &Double_method_isInfinite_D_Z,
  &Double_method_isNaN__Z,
  &Double_method_isNaN_D_Z,
  &Double_method_longBitsToDouble_J_D,
  &Double_method_parseDouble_INLRString_INLacdk_util_RLocale__D,
  &Double_method_parseDouble_INLRString__D,
  &Double_method_toString_DINLacdk_util_RLocale__LRString_,
  &Double_method_toString_D_LRString_,
  &Double_method_valueOf_INLRString__LRDouble_,
  0
};


struct Double_MetaInfoInitializer
{  Double_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Double::clazzInfo();
    ci->fields =  _Double_fields;
    ci->methods =  _Double_methods;
    ci->_scopeParent = acdk_lang_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Double_MetaInfoInitializer Double_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang

