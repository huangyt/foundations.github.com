// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "NotifyObjectEvent.h"
#include "PhantomReference.h"
#include "ref.h"
#include "Reference.h"
#include "ReferenceQueue.h"
#include "SharedOwning.h"
#include "SoftReference.h"
#include "WeakReference.h"

namespace acdk { 
namespace lang { 
namespace ref { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo* _NotifyObjectEventListener_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* NotifyObjectEventListener::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "NotifyObjectEventListener", // name of class
  -1, // hashCode
  "acdk/lang/ref", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _NotifyObjectEventListener_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    NotifyObjectEventListener::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_NotifyObjectEventListener(NotifyObjectEventListener::clazzInfo());

::acdk::lang::RClass
NotifyObjectEventListener::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
NotifyObjectEventListener::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace lang
} // namespace ref


namespace acdk { 
namespace lang { 
namespace ref { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _PhantomReference_super_Reference =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Reference::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _PhantomReference_interfaces[] =
{
  &_PhantomReference_super_Reference,
  0
};

::acdk::lang::dmi::ClazzInfo* PhantomReference::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "PhantomReference", // name of class
  -1, // hashCode
  "acdk/lang/ref", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _PhantomReference_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    PhantomReference::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_PhantomReference(PhantomReference::clazzInfo());

::acdk::lang::RClass
PhantomReference::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
PhantomReference::getCollectableFields(FieldReferences& fields)
{
  Reference::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang
} // namespace ref


namespace acdk { 
namespace lang { 
namespace ref { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _Reference_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Reference_super_NotifyObjectEventListener =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  NotifyObjectEventListener::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Reference_interfaces[] =
{
  &_Reference_super___acdk__lang__Object,
  &_Reference_super_NotifyObjectEventListener,
  0
};

::acdk::lang::dmi::ClazzInfo* Reference::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "Reference", // name of class
  -1, // hashCode
  "acdk/lang/ref", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Reference_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Reference::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Reference(Reference::clazzInfo());

::acdk::lang::RClass
Reference::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Reference::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_next._ref_this()); // RReference _next 
  fields.push_back((::acdk::lang::RObject*)this->_queue._ref_this()); // RReferenceQueue _queue 
}


} // namespace acdk
} // namespace lang
} // namespace ref


namespace acdk { 
namespace lang { 
namespace ref { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _ReferenceQueue_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ReferenceQueue_interfaces[] =
{
  &_ReferenceQueue_super___acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* ReferenceQueue::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ReferenceQueue", // name of class
  -1, // hashCode
  "acdk/lang/ref", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ReferenceQueue_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ReferenceQueue::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ReferenceQueue(ReferenceQueue::clazzInfo());

::acdk::lang::RClass
ReferenceQueue::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ReferenceQueue::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_first._ref_this()); // RReference _first 
}


} // namespace acdk
} // namespace lang
} // namespace ref


namespace acdk { 
namespace lang { 
namespace ref { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _SoftReference_super_Reference =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Reference::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SoftReference_interfaces[] =
{
  &_SoftReference_super_Reference,
  0
};

::acdk::lang::dmi::ClazzInfo* SoftReference::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "SoftReference", // name of class
  -1, // hashCode
  "acdk/lang/ref", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SoftReference_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SoftReference::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SoftReference(SoftReference::clazzInfo());

::acdk::lang::RClass
SoftReference::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SoftReference::getCollectableFields(FieldReferences& fields)
{
  Reference::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang
} // namespace ref


namespace acdk { 
namespace lang { 
namespace ref { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _WeakReference_super_Reference =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Reference::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _WeakReference_interfaces[] =
{
  &_WeakReference_super_Reference,
  0
};

::acdk::lang::dmi::ClazzInfo* WeakReference::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "WeakReference", // name of class
  -1, // hashCode
  "acdk/lang/ref", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _WeakReference_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    WeakReference::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_WeakReference(WeakReference::clazzInfo());

::acdk::lang::RClass
WeakReference::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
WeakReference::getCollectableFields(FieldReferences& fields)
{
  Reference::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lang
} // namespace ref

