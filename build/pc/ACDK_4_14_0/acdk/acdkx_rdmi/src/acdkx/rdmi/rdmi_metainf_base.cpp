// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "BinaryProtocol.h"
#include "Config.h"
#include "Connection.h"
#include "LocalObjectRepository.h"
#include "Protocol.h"
#include "ProtocolImpl.h"
#include "rdmi.h"
#include "RemoteDmiProxy.h"
#include "RemoteDmiServer.h"
#include "ServerImpl.h"
#include "TcpServer.h"

namespace acdkx { 
namespace rdmi { 

::acdk::lang::dmi::ClazzSuperInfo _BinaryProtocol_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _BinaryProtocol_super_ProtocolImpl =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ProtocolImpl::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _BinaryProtocol_interfaces[] =
{
  &_BinaryProtocol_super_acdk__lang__Object,
  &_BinaryProtocol_super_ProtocolImpl,
  0
};

::acdk::lang::dmi::ClazzInfo* BinaryProtocol::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "BinaryProtocol", // name of class
  -1, // hashCode
  "acdkx/rdmi", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _BinaryProtocol_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    BinaryProtocol::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_BinaryProtocol(BinaryProtocol::clazzInfo());

::acdk::lang::RClass
BinaryProtocol::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
BinaryProtocol::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdkx
} // namespace rdmi


namespace acdkx { 
namespace rdmi { 

::acdk::lang::dmi::ClazzSuperInfo* _Connection_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* Connection::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "Connection", // name of class
  -1, // hashCode
  "acdkx/rdmi", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Connection_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Connection::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Connection(Connection::clazzInfo());

::acdk::lang::RClass
Connection::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Connection::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdkx
} // namespace rdmi


namespace acdkx { 
namespace rdmi { 

::acdk::lang::dmi::ClazzSuperInfo _RemoteObjectId_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _RemoteObjectId_interfaces[] =
{
  &_RemoteObjectId_super_acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* RemoteObjectId::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "RemoteObjectId", // name of class
  -1, // hashCode
  "acdkx/rdmi", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _RemoteObjectId_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    RemoteObjectId::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_RemoteObjectId(RemoteObjectId::clazzInfo());

::acdk::lang::RClass
RemoteObjectId::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
RemoteObjectId::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdkx
} // namespace rdmi


namespace acdkx { 
namespace rdmi { 

::acdk::lang::dmi::ClazzSuperInfo _ConnectionRefs_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ConnectionRefs_interfaces[] =
{
  &_ConnectionRefs_super_acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* ConnectionRefs::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ConnectionRefs", // name of class
  -1, // hashCode
  "acdkx/rdmi", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ConnectionRefs_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ConnectionRefs::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ConnectionRefs(ConnectionRefs::clazzInfo());

::acdk::lang::RClass
ConnectionRefs::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ConnectionRefs::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_connection._ref_this()); // RConnection _connection 
}


} // namespace acdkx
} // namespace rdmi


namespace acdkx { 
namespace rdmi { 

::acdk::lang::dmi::ClazzSuperInfo _RemoteObjectReferences_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _RemoteObjectReferences_interfaces[] =
{
  &_RemoteObjectReferences_super_acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* RemoteObjectReferences::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "RemoteObjectReferences", // name of class
  -1, // hashCode
  "acdkx/rdmi", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _RemoteObjectReferences_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    RemoteObjectReferences::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_RemoteObjectReferences(RemoteObjectReferences::clazzInfo());

::acdk::lang::RClass
RemoteObjectReferences::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
RemoteObjectReferences::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_connections._ref_this()); // RConnectionRefsArray _connections 
  fields.push_back((::acdk::lang::RObject*)this->_object._ref_this()); // RObject _object 
}


} // namespace acdkx
} // namespace rdmi


namespace acdkx { 
namespace rdmi { 

::acdk::lang::dmi::ClazzSuperInfo _LocalObjectRepository_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _LocalObjectRepository_interfaces[] =
{
  &_LocalObjectRepository_super_acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* LocalObjectRepository::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "LocalObjectRepository", // name of class
  -1, // hashCode
  "acdkx/rdmi", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _LocalObjectRepository_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    LocalObjectRepository::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_LocalObjectRepository(LocalObjectRepository::clazzInfo());

::acdk::lang::RClass
LocalObjectRepository::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
LocalObjectRepository::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdkx
} // namespace rdmi


namespace acdkx { 
namespace rdmi { 


::acdk::lang::dmi::ClazzEnumValueInfo InvokeCmd_Unexpected = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "Unexpected", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdkx::rdmi::Unexpected, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo InvokeCmd_AddRef = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "AddRef", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdkx::rdmi::AddRef, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo InvokeCmd_ReleaseRef = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ReleaseRef", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdkx::rdmi::ReleaseRef, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo InvokeCmd_NewObject = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "NewObject", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdkx::rdmi::NewObject, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo InvokeCmd_Invoke = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "Invoke", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdkx::rdmi::Invoke, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo InvokeCmd_InvokeStatic = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "InvokeStatic", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdkx::rdmi::InvokeStatic, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo InvokeCmd_Peek = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "Peek", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdkx::rdmi::Peek, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo InvokeCmd_PeekStatic = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "PeekStatic", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdkx::rdmi::PeekStatic, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo InvokeCmd_Poke = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "Poke", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdkx::rdmi::Poke, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo InvokeCmd_PokeStatic = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "PokeStatic", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdkx::rdmi::PokeStatic, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo InvokeCmd_ReturnValue = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ReturnValue", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdkx::rdmi::ReturnValue, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo InvokeCmd_ReturnVoid = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ReturnVoid", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdkx::rdmi::ReturnVoid, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo InvokeCmd_ReturnException = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ReturnException", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdkx::rdmi::ReturnException, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo InvokeCmd_AddPersistentRef = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "AddPersistentRef", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdkx::rdmi::AddPersistentRef, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo InvokeCmd_ReleasePersistentRef = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ReleasePersistentRef", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdkx::rdmi::ReleasePersistentRef, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo InvokeCmd_SetServerId = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SetServerId", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdkx::rdmi::SetServerId, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo InvokeCmd_ShutDown = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ShutDown", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdkx::rdmi::ShutDown, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo InvokeCmd_NoData = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "NoData", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdkx::rdmi::NoData, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo InvokeCmd_ConnectionClosed = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ConnectionClosed", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdkx::rdmi::ConnectionClosed, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* InvokeCmd_enumValues[] = {
  &InvokeCmd_Unexpected,
  &InvokeCmd_AddRef,
  &InvokeCmd_ReleaseRef,
  &InvokeCmd_NewObject,
  &InvokeCmd_Invoke,
  &InvokeCmd_InvokeStatic,
  &InvokeCmd_Peek,
  &InvokeCmd_PeekStatic,
  &InvokeCmd_Poke,
  &InvokeCmd_PokeStatic,
  &InvokeCmd_ReturnValue,
  &InvokeCmd_ReturnVoid,
  &InvokeCmd_ReturnException,
  &InvokeCmd_AddPersistentRef,
  &InvokeCmd_ReleasePersistentRef,
  &InvokeCmd_SetServerId,
  &InvokeCmd_ShutDown,
  &InvokeCmd_NoData,
  &InvokeCmd_ConnectionClosed,
0
};

::acdk::lang::dmi::ClazzEnumInfo* InvokeCmdMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo InvokeCmd_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "InvokeCmd", // name
  -1, // hashCode
  "acdkx/rdmi", // ns
  0, // _scopeParent
  0, // _nextSibling
  InvokeCmd_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_InvokeCmd(&InvokeCmd_enumInfo);

  return &InvokeCmd_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_InvokeCmdEnumInfo(InvokeCmdMetaInf::GetEnumInfo());


} // namespace acdkx
} // namespace rdmi


namespace acdkx { 
namespace rdmi { 


::acdk::lang::dmi::ClazzEnumValueInfo RemoteFlags_WeakInvoke = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "WeakInvoke", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdkx::rdmi::WeakInvoke, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* RemoteFlags_enumValues[] = {
  &RemoteFlags_WeakInvoke,
0
};

::acdk::lang::dmi::ClazzEnumInfo* RemoteFlagsMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo RemoteFlags_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "RemoteFlags", // name
  -1, // hashCode
  "acdkx/rdmi", // ns
  0, // _scopeParent
  0, // _nextSibling
  RemoteFlags_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_RemoteFlags(&RemoteFlags_enumInfo);

  return &RemoteFlags_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_RemoteFlagsEnumInfo(RemoteFlagsMetaInf::GetEnumInfo());


} // namespace acdkx
} // namespace rdmi


namespace acdkx { 
namespace rdmi { 


::acdk::lang::dmi::ClazzEnumValueInfo RemoteArgType_RemoteUnsetType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "RemoteUnsetType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdkx::rdmi::RemoteUnsetType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo RemoteArgType_RemoteIdType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "RemoteIdType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdkx::rdmi::RemoteIdType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo RemoteArgType_RemoteSerializedType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "RemoteSerializedType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdkx::rdmi::RemoteSerializedType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo RemoteArgType_RemoteStringType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "RemoteStringType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdkx::rdmi::RemoteStringType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo RemoteArgType_RemoteIntValueType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "RemoteIntValueType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdkx::rdmi::RemoteIntValueType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo RemoteArgType_RemoteBoolValueType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "RemoteBoolValueType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdkx::rdmi::RemoteBoolValueType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo RemoteArgType_RemoteShortValueType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "RemoteShortValueType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdkx::rdmi::RemoteShortValueType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo RemoteArgType_RemoteByteValueType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "RemoteByteValueType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdkx::rdmi::RemoteByteValueType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo RemoteArgType_RemoteCharValueType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "RemoteCharValueType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdkx::rdmi::RemoteCharValueType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo RemoteArgType_RemoteUcCharValueType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "RemoteUcCharValueType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdkx::rdmi::RemoteUcCharValueType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo RemoteArgType_RemoteLongValueType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "RemoteLongValueType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdkx::rdmi::RemoteLongValueType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo RemoteArgType_RemoteFloatValueType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "RemoteFloatValueType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdkx::rdmi::RemoteFloatValueType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo RemoteArgType_RemoteDoubleValueType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "RemoteDoubleValueType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdkx::rdmi::RemoteDoubleValueType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo RemoteArgType_RemoteArrayValueType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "RemoteArrayValueType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdkx::rdmi::RemoteArrayValueType, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* RemoteArgType_enumValues[] = {
  &RemoteArgType_RemoteUnsetType,
  &RemoteArgType_RemoteIdType,
  &RemoteArgType_RemoteSerializedType,
  &RemoteArgType_RemoteStringType,
  &RemoteArgType_RemoteIntValueType,
  &RemoteArgType_RemoteBoolValueType,
  &RemoteArgType_RemoteShortValueType,
  &RemoteArgType_RemoteByteValueType,
  &RemoteArgType_RemoteCharValueType,
  &RemoteArgType_RemoteUcCharValueType,
  &RemoteArgType_RemoteLongValueType,
  &RemoteArgType_RemoteFloatValueType,
  &RemoteArgType_RemoteDoubleValueType,
  &RemoteArgType_RemoteArrayValueType,
0
};

::acdk::lang::dmi::ClazzEnumInfo* RemoteArgTypeMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo RemoteArgType_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "RemoteArgType", // name
  -1, // hashCode
  "acdkx/rdmi", // ns
  0, // _scopeParent
  0, // _nextSibling
  RemoteArgType_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_RemoteArgType(&RemoteArgType_enumInfo);

  return &RemoteArgType_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_RemoteArgTypeEnumInfo(RemoteArgTypeMetaInf::GetEnumInfo());


} // namespace acdkx
} // namespace rdmi


namespace acdkx { 
namespace rdmi { 

::acdk::lang::dmi::ClazzSuperInfo _RemoteArg_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _RemoteArg_super_acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _RemoteArg_interfaces[] =
{
  &_RemoteArg_super_acdk__lang__Object,
  &_RemoteArg_super_acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* RemoteArg::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "RemoteArg", // name of class
  -1, // hashCode
  "acdkx/rdmi", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _RemoteArg_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    RemoteArg::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_RemoteArg(RemoteArg::clazzInfo());

::acdk::lang::RClass
RemoteArg::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
RemoteArg::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->name._ref_this()); // RString name 
  fields.push_back((::acdk::lang::RObject*)this->serverId._ref_this()); // RString serverId 
}


} // namespace acdkx
} // namespace rdmi


namespace acdkx { 
namespace rdmi { 

::acdk::lang::dmi::ClazzSuperInfo* _ProtocolImpl_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* ProtocolImpl::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "ProtocolImpl", // name of class
  -1, // hashCode
  "acdkx/rdmi", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ProtocolImpl_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ProtocolImpl::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ProtocolImpl(ProtocolImpl::clazzInfo());

::acdk::lang::RClass
ProtocolImpl::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ProtocolImpl::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdkx
} // namespace rdmi


namespace acdkx { 
namespace rdmi { 

::acdk::lang::dmi::ClazzSuperInfo _RemoteDmiServer_super_acdk__lang__Thread =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Thread::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _RemoteDmiServer_interfaces[] =
{
  &_RemoteDmiServer_super_acdk__lang__Thread,
  0
};

::acdk::lang::dmi::ClazzInfo* RemoteDmiServer::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "RemoteDmiServer", // name of class
  -1, // hashCode
  "acdkx/rdmi", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _RemoteDmiServer_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    RemoteDmiServer::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_RemoteDmiServer(RemoteDmiServer::clazzInfo());

::acdk::lang::RClass
RemoteDmiServer::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
RemoteDmiServer::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Thread)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_protocol._ref_this()); // RProtocolImpl _protocol 
  fields.push_back((::acdk::lang::RObject*)this->_server._ref_this()); // RServerImpl _server 
}


} // namespace acdkx
} // namespace rdmi


namespace acdkx { 
namespace rdmi { 

::acdk::lang::dmi::ClazzSuperInfo _ThreadedConnectionHandler_super_acdk__lang__Thread =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Thread::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ThreadedConnectionHandler_interfaces[] =
{
  &_ThreadedConnectionHandler_super_acdk__lang__Thread,
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadedConnectionHandler::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ThreadedConnectionHandler", // name of class
  -1, // hashCode
  "acdkx/rdmi", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ThreadedConnectionHandler_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ThreadedConnectionHandler::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ThreadedConnectionHandler(ThreadedConnectionHandler::clazzInfo());

::acdk::lang::RClass
ThreadedConnectionHandler::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ThreadedConnectionHandler::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Thread)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_connection._ref_this()); // RConnection _connection 
  fields.push_back((::acdk::lang::RObject*)this->_server._ref_this()); // RRemoteDmiServer _server 
}


} // namespace acdkx
} // namespace rdmi


namespace acdkx { 
namespace rdmi { 

::acdk::lang::dmi::ClazzSuperInfo* _ServerImpl_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* ServerImpl::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "ServerImpl", // name of class
  -1, // hashCode
  "acdkx/rdmi", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ServerImpl_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ServerImpl::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ServerImpl(ServerImpl::clazzInfo());

::acdk::lang::RClass
ServerImpl::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ServerImpl::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdkx
} // namespace rdmi


namespace acdkx { 
namespace rdmi { 

::acdk::lang::dmi::ClazzSuperInfo _TcpServerConnection_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _TcpServerConnection_super_Connection =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Connection::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TcpServerConnection_interfaces[] =
{
  &_TcpServerConnection_super_acdk__lang__Object,
  &_TcpServerConnection_super_Connection,
  0
};

::acdk::lang::dmi::ClazzInfo* TcpServerConnection::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "TcpServerConnection", // name of class
  -1, // hashCode
  "acdkx/rdmi", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TcpServerConnection_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TcpServerConnection::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TcpServerConnection(TcpServerConnection::clazzInfo());

::acdk::lang::RClass
TcpServerConnection::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TcpServerConnection::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_socket._ref_this()); // acdk::net::RSocket _socket 
}


} // namespace acdkx
} // namespace rdmi


namespace acdkx { 
namespace rdmi { 

::acdk::lang::dmi::ClazzSuperInfo _TcpServer_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _TcpServer_super_ServerImpl =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ServerImpl::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TcpServer_interfaces[] =
{
  &_TcpServer_super_acdk__lang__Object,
  &_TcpServer_super_ServerImpl,
  0
};

::acdk::lang::dmi::ClazzInfo* TcpServer::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "TcpServer", // name of class
  -1, // hashCode
  "acdkx/rdmi", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TcpServer_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 4, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TcpServer::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TcpServer(TcpServer::clazzInfo());

::acdk::lang::RClass
TcpServer::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TcpServer::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_address._ref_this()); // acdk::net::RInetAddress _address 
  fields.push_back((::acdk::lang::RObject*)this->_clientSocket._ref_this()); // acdk::net::RSocket _clientSocket 
  fields.push_back((::acdk::lang::RObject*)this->_host._ref_this()); // RString _host 
  fields.push_back((::acdk::lang::RObject*)this->_serverSocket._ref_this()); // acdk::net::RServerSocket _serverSocket 
}


} // namespace acdkx
} // namespace rdmi

