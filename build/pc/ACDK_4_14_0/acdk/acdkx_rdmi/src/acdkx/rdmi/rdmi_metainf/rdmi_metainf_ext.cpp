// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../rdmi.h"
#include "../BinaryProtocol.h"
#include "../Config.h"
#include "../Connection.h"
#include "../LocalObjectRepository.h"
#include "../Protocol.h"
#include "../ProtocolImpl.h"
#include "../rdmi.h"
#include "../RemoteDmiProxy.h"
#include "../RemoteDmiServer.h"
#include "../ServerImpl.h"
#include "../TcpServer.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdkx { 
namespace rdmi { 


//static
::acdk::lang::RObject
BinaryProtocol_create_array(int length)
{
  return new ObjectArrayImpl<RBinaryProtocol>(length);
}

//static
::acdk::lang::RObject
BinaryProtocol_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class BinaryProtocol_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BinaryProtocol_method_BinaryProtocol__LRBinaryProtocol__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new BinaryProtocol();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BinaryProtocol_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)BinaryProtocol::GetClass();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _BinaryProtocol_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* BinaryProtocol_methods_BinaryProtocol__LRBinaryProtocol__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BinaryProtocol_methods_BinaryProtocol__LRBinaryProtocol__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BinaryProtocol_method_BinaryProtocol__LRBinaryProtocol_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "BinaryProtocol", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  BinaryProtocol::clazzInfo(), // return type
  "_0_BinaryProtocol", // alternative name of method
  -1, // altlabelHashCode
  BinaryProtocol_methods_BinaryProtocol__LRBinaryProtocol__args, // the arguments
  0, //arguments count
  BinaryProtocol_methods_BinaryProtocol__LRBinaryProtocol__exceptions, // the declared exceptions
  BinaryProtocol_MetainfoWrapper::BinaryProtocol_method_BinaryProtocol__LRBinaryProtocol__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BinaryProtocol_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BinaryProtocol_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BinaryProtocol_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  BinaryProtocol_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  BinaryProtocol_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  BinaryProtocol_MetainfoWrapper::BinaryProtocol_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _BinaryProtocol_methods[] = 
{
  &BinaryProtocol_method_BinaryProtocol__LRBinaryProtocol_,
  &BinaryProtocol_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct BinaryProtocol_MetaInfoInitializer
{  BinaryProtocol_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = BinaryProtocol::clazzInfo();
    ci->fields =  _BinaryProtocol_fields;
    ci->methods =  _BinaryProtocol_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
BinaryProtocol_MetaInfoInitializer BinaryProtocol_MetaInfoInitializer_staticinstance__;


} // namespace acdkx
} // namespace rdmi


namespace acdkx { 
namespace rdmi { 


//static
::acdk::lang::RObject
Connection_create_array(int length)
{
  return new ObjectArrayImpl<RConnection>(length);
}

//static
::acdk::lang::RObject
Connection_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Connection_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Connection_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Connection::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Connection_method_close__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Connection* This = dmi_cast<Connection>(This_);
    This->close();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Connection_method_dataAvailable__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Connection* This = dmi_cast<Connection>(This_);
  ret = This->dataAvailable();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Connection_method_endReadMessage__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Connection* This = dmi_cast<Connection>(This_);
    This->endReadMessage();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Connection_method_endWriteMessage__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Connection* This = dmi_cast<Connection>(This_);
    This->endWriteMessage();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Connection_method_getLocalServerId__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Connection* This = dmi_cast<Connection>(This_);
    ret = (::acdk::lang::RObject)This->getLocalServerId();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Connection_method_getReader__Lacdk_io_RReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Connection* This = dmi_cast<Connection>(This_);
    ret = (::acdk::lang::RObject)This->getReader();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Connection_method_getRemoteServerId__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Connection* This = dmi_cast<Connection>(This_);
    ret = (::acdk::lang::RObject)This->getRemoteServerId();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Connection_method_getWriter__Lacdk_io_RWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Connection* This = dmi_cast<Connection>(This_);
    ret = (::acdk::lang::RObject)This->getWriter();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Connection_method_isClosed__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Connection* This = dmi_cast<Connection>(This_);
  ret = This->isClosed();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Connection_method_startReadMessage__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Connection* This = dmi_cast<Connection>(This_);
    This->startReadMessage();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Connection_method_startWriteMessage__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Connection* This = dmi_cast<Connection>(This_);
    This->startWriteMessage();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Connection_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Connection_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Connection_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Connection_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_b_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Connection_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Connection_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Connection_MetainfoWrapper::Connection_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Connection_methods_close__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Connection_methods_close__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Connection_method_close__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "close", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_close", // alternative name of method
  -1, // altlabelHashCode
  Connection_methods_close__V_args, // the arguments
  0, //arguments count
  Connection_methods_close__V_exceptions, // the declared exceptions
  Connection_MetainfoWrapper::Connection_method_close__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Connection_methods_dataAvailable__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Connection_methods_dataAvailable__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Connection_method_dataAvailable__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "dataAvailable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_a_dataAvailable", // alternative name of method
  -1, // altlabelHashCode
  Connection_methods_dataAvailable__Z_args, // the arguments
  0, //arguments count
  Connection_methods_dataAvailable__Z_exceptions, // the declared exceptions
  Connection_MetainfoWrapper::Connection_method_dataAvailable__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Connection_methods_endReadMessage__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Connection_methods_endReadMessage__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Connection_method_endReadMessage__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "endReadMessage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_endReadMessage", // alternative name of method
  -1, // altlabelHashCode
  Connection_methods_endReadMessage__V_args, // the arguments
  0, //arguments count
  Connection_methods_endReadMessage__V_exceptions, // the declared exceptions
  Connection_MetainfoWrapper::Connection_method_endReadMessage__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Connection_methods_endWriteMessage__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Connection_methods_endWriteMessage__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Connection_method_endWriteMessage__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "endWriteMessage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_endWriteMessage", // alternative name of method
  -1, // altlabelHashCode
  Connection_methods_endWriteMessage__V_args, // the arguments
  0, //arguments count
  Connection_methods_endWriteMessage__V_exceptions, // the declared exceptions
  Connection_MetainfoWrapper::Connection_method_endWriteMessage__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Connection_methods_getLocalServerId__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Connection_methods_getLocalServerId__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Connection_method_getLocalServerId__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLocalServerId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_getLocalServerId", // alternative name of method
  -1, // altlabelHashCode
  Connection_methods_getLocalServerId__LRString__args, // the arguments
  0, //arguments count
  Connection_methods_getLocalServerId__LRString__exceptions, // the declared exceptions
  Connection_MetainfoWrapper::Connection_method_getLocalServerId__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Connection_methods_getReader__Lacdk_io_RReader__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Connection_methods_getReader__Lacdk_io_RReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Connection_method_getReader__Lacdk_io_RReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo(), // return type
  "_2_getReader", // alternative name of method
  -1, // altlabelHashCode
  Connection_methods_getReader__Lacdk_io_RReader__args, // the arguments
  0, //arguments count
  Connection_methods_getReader__Lacdk_io_RReader__exceptions, // the declared exceptions
  Connection_MetainfoWrapper::Connection_method_getReader__Lacdk_io_RReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Connection_methods_getRemoteServerId__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Connection_methods_getRemoteServerId__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Connection_method_getRemoteServerId__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRemoteServerId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_0_getRemoteServerId", // alternative name of method
  -1, // altlabelHashCode
  Connection_methods_getRemoteServerId__LRString__args, // the arguments
  0, //arguments count
  Connection_methods_getRemoteServerId__LRString__exceptions, // the declared exceptions
  Connection_MetainfoWrapper::Connection_method_getRemoteServerId__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Connection_methods_getWriter__Lacdk_io_RWriter__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Connection_methods_getWriter__Lacdk_io_RWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Connection_method_getWriter__Lacdk_io_RWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RWriter::clazzInfo(), // return type
  "_3_getWriter", // alternative name of method
  -1, // altlabelHashCode
  Connection_methods_getWriter__Lacdk_io_RWriter__args, // the arguments
  0, //arguments count
  Connection_methods_getWriter__Lacdk_io_RWriter__exceptions, // the declared exceptions
  Connection_MetainfoWrapper::Connection_method_getWriter__Lacdk_io_RWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Connection_methods_isClosed__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Connection_methods_isClosed__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Connection_method_isClosed__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isClosed", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_9_isClosed", // alternative name of method
  -1, // altlabelHashCode
  Connection_methods_isClosed__Z_args, // the arguments
  0, //arguments count
  Connection_methods_isClosed__Z_exceptions, // the declared exceptions
  Connection_MetainfoWrapper::Connection_method_isClosed__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Connection_methods_startReadMessage__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Connection_methods_startReadMessage__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Connection_method_startReadMessage__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "startReadMessage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_startReadMessage", // alternative name of method
  -1, // altlabelHashCode
  Connection_methods_startReadMessage__V_args, // the arguments
  0, //arguments count
  Connection_methods_startReadMessage__V_exceptions, // the declared exceptions
  Connection_MetainfoWrapper::Connection_method_startReadMessage__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Connection_methods_startWriteMessage__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Connection_methods_startWriteMessage__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Connection_method_startWriteMessage__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "startWriteMessage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_startWriteMessage", // alternative name of method
  -1, // altlabelHashCode
  Connection_methods_startWriteMessage__V_args, // the arguments
  0, //arguments count
  Connection_methods_startWriteMessage__V_exceptions, // the declared exceptions
  Connection_MetainfoWrapper::Connection_method_startWriteMessage__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Connection_methods[] = 
{
  &Connection_method_GetClass__L_acdk_lang_RClass_,
  &Connection_method_close__V,
  &Connection_method_dataAvailable__Z,
  &Connection_method_endReadMessage__V,
  &Connection_method_endWriteMessage__V,
  &Connection_method_getLocalServerId__LRString_,
  &Connection_method_getReader__Lacdk_io_RReader_,
  &Connection_method_getRemoteServerId__LRString_,
  &Connection_method_getWriter__Lacdk_io_RWriter_,
  &Connection_method_isClosed__Z,
  &Connection_method_startReadMessage__V,
  &Connection_method_startWriteMessage__V,
  0
};


struct Connection_MetaInfoInitializer
{  Connection_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Connection::clazzInfo();
    ci->fields =  _Connection_fields;
    ci->methods =  _Connection_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Connection_MetaInfoInitializer Connection_MetaInfoInitializer_staticinstance__;


} // namespace acdkx
} // namespace rdmi


namespace acdkx { 
namespace rdmi { 


//static
::acdk::lang::RObject
RemoteObjectId_create_array(int length)
{
  return new ObjectArrayImpl<RRemoteObjectId>(length);
}

//static
::acdk::lang::RObject
RemoteObjectId_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class RemoteObjectId_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RemoteObjectId_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)RemoteObjectId::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RemoteObjectId_method_RemoteObjectId_I_LRRemoteObjectId__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RemoteObjectId(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RemoteObjectId_method_RemoteObjectId__LRRemoteObjectId__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RemoteObjectId();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RemoteObjectId_method_createId_INLRObject__LRRemoteObjectId__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)RemoteObjectId::createId((RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RemoteObjectId_method_equals_INLRRemoteObjectId__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RemoteObjectId* This = dmi_cast<RemoteObjectId>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->RemoteObjectId::equals((RRemoteObjectId)args[0].getObjectVar());
    else
      ret = This->equals((RRemoteObjectId)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RemoteObjectId_method_equals_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RemoteObjectId* This = dmi_cast<RemoteObjectId>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->RemoteObjectId::equals((RObject)args[0].getObjectVar());
    else
      ret = This->equals((RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RemoteObjectId_method_hashCode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RemoteObjectId* This = dmi_cast<RemoteObjectId>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->RemoteObjectId::hashCode();
    else
      ret = This->hashCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RemoteObjectId_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RemoteObjectId* This = dmi_cast<RemoteObjectId>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->RemoteObjectId::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  RemoteObjectId_fields__id_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    RemoteObjectId* This = dmi_cast<RemoteObjectId>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_id, flags);
    else
      This->_id = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo RemoteObjectId_fields__id = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_id", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  RemoteObjectId_MetainfoWrapper::RemoteObjectId_fields__id_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _RemoteObjectId_fields[] = 
{
  &RemoteObjectId_fields__id,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* RemoteObjectId_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RemoteObjectId_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RemoteObjectId_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_7_GetClass", // alternative name of method
  -1, // altlabelHashCode
  RemoteObjectId_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  RemoteObjectId_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  RemoteObjectId_MetainfoWrapper::RemoteObjectId_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RemoteObjectId_methods_RemoteObjectId_I_LRRemoteObjectId__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RemoteObjectId_methods_RemoteObjectId_I_LRRemoteObjectId__args[] = 
{
  &RemoteObjectId_methods_RemoteObjectId_I_LRRemoteObjectId__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* RemoteObjectId_methods_RemoteObjectId_I_LRRemoteObjectId__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RemoteObjectId_method_RemoteObjectId_I_LRRemoteObjectId_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "RemoteObjectId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RemoteObjectId::clazzInfo(), // return type
  "_0_RemoteObjectId", // alternative name of method
  -1, // altlabelHashCode
  RemoteObjectId_methods_RemoteObjectId_I_LRRemoteObjectId__args, // the arguments
  0, //arguments count
  RemoteObjectId_methods_RemoteObjectId_I_LRRemoteObjectId__exceptions, // the declared exceptions
  RemoteObjectId_MetainfoWrapper::RemoteObjectId_method_RemoteObjectId_I_LRRemoteObjectId__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* RemoteObjectId_methods_RemoteObjectId__LRRemoteObjectId__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RemoteObjectId_methods_RemoteObjectId__LRRemoteObjectId__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RemoteObjectId_method_RemoteObjectId__LRRemoteObjectId_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "RemoteObjectId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RemoteObjectId::clazzInfo(), // return type
  "_1_RemoteObjectId", // alternative name of method
  -1, // altlabelHashCode
  RemoteObjectId_methods_RemoteObjectId__LRRemoteObjectId__args, // the arguments
  0, //arguments count
  RemoteObjectId_methods_RemoteObjectId__LRRemoteObjectId__exceptions, // the declared exceptions
  RemoteObjectId_MetainfoWrapper::RemoteObjectId_method_RemoteObjectId__LRRemoteObjectId__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RemoteObjectId_methods_createId_INLRObject__LRRemoteObjectId__arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RemoteObjectId_methods_createId_INLRObject__LRRemoteObjectId__args[] = 
{
  &RemoteObjectId_methods_createId_INLRObject__LRRemoteObjectId__arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* RemoteObjectId_methods_createId_INLRObject__LRRemoteObjectId__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RemoteObjectId_method_createId_INLRObject__LRRemoteObjectId_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRemoteObjectId::clazzInfo(), // return type
  "_6_createId", // alternative name of method
  -1, // altlabelHashCode
  RemoteObjectId_methods_createId_INLRObject__LRRemoteObjectId__args, // the arguments
  0, //arguments count
  RemoteObjectId_methods_createId_INLRObject__LRRemoteObjectId__exceptions, // the declared exceptions
  RemoteObjectId_MetainfoWrapper::RemoteObjectId_method_createId_INLRObject__LRRemoteObjectId__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RemoteObjectId_methods_equals_INLRRemoteObjectId__Z_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRemoteObjectId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RemoteObjectId_methods_equals_INLRRemoteObjectId__Z_args[] = 
{
  &RemoteObjectId_methods_equals_INLRRemoteObjectId__Z_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* RemoteObjectId_methods_equals_INLRRemoteObjectId__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RemoteObjectId_method_equals_INLRRemoteObjectId__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_equals", // alternative name of method
  -1, // altlabelHashCode
  RemoteObjectId_methods_equals_INLRRemoteObjectId__Z_args, // the arguments
  0, //arguments count
  RemoteObjectId_methods_equals_INLRRemoteObjectId__Z_exceptions, // the declared exceptions
  RemoteObjectId_MetainfoWrapper::RemoteObjectId_method_equals_INLRRemoteObjectId__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RemoteObjectId_methods_equals_INLRObject__Z_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RemoteObjectId_methods_equals_INLRObject__Z_args[] = 
{
  &RemoteObjectId_methods_equals_INLRObject__Z_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* RemoteObjectId_methods_equals_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RemoteObjectId_method_equals_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_equals", // alternative name of method
  -1, // altlabelHashCode
  RemoteObjectId_methods_equals_INLRObject__Z_args, // the arguments
  0, //arguments count
  RemoteObjectId_methods_equals_INLRObject__Z_exceptions, // the declared exceptions
  RemoteObjectId_MetainfoWrapper::RemoteObjectId_method_equals_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* RemoteObjectId_methods_hashCode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RemoteObjectId_methods_hashCode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RemoteObjectId_method_hashCode__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hashCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2_hashCode", // alternative name of method
  -1, // altlabelHashCode
  RemoteObjectId_methods_hashCode__I_args, // the arguments
  0, //arguments count
  RemoteObjectId_methods_hashCode__I_exceptions, // the declared exceptions
  RemoteObjectId_MetainfoWrapper::RemoteObjectId_method_hashCode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* RemoteObjectId_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RemoteObjectId_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RemoteObjectId_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_5_toString", // alternative name of method
  -1, // altlabelHashCode
  RemoteObjectId_methods_toString__LRString__args, // the arguments
  0, //arguments count
  RemoteObjectId_methods_toString__LRString__exceptions, // the declared exceptions
  RemoteObjectId_MetainfoWrapper::RemoteObjectId_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _RemoteObjectId_methods[] = 
{
  &RemoteObjectId_method_GetClass__L_acdk_lang_RClass_,
  &RemoteObjectId_method_RemoteObjectId_I_LRRemoteObjectId_,
  &RemoteObjectId_method_RemoteObjectId__LRRemoteObjectId_,
  &RemoteObjectId_method_createId_INLRObject__LRRemoteObjectId_,
  &RemoteObjectId_method_equals_INLRRemoteObjectId__Z,
  &RemoteObjectId_method_equals_INLRObject__Z,
  &RemoteObjectId_method_hashCode__I,
  &RemoteObjectId_method_toString__LRString_,
  0
};


struct RemoteObjectId_MetaInfoInitializer
{  RemoteObjectId_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = RemoteObjectId::clazzInfo();
    ci->fields =  _RemoteObjectId_fields;
    ci->methods =  _RemoteObjectId_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
RemoteObjectId_MetaInfoInitializer RemoteObjectId_MetaInfoInitializer_staticinstance__;


} // namespace acdkx
} // namespace rdmi


namespace acdkx { 
namespace rdmi { 


//static
::acdk::lang::RObject
ConnectionRefs_create_array(int length)
{
  return new ObjectArrayImpl<RConnectionRefs>(length);
}

//static
::acdk::lang::RObject
ConnectionRefs_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ConnectionRefs_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ConnectionRefs_method_ConnectionRefs_INLRConnection_I_LRConnectionRefs__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ConnectionRefs((RConnection)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ConnectionRefs_method_ConnectionRefs_INLRConnection__LRConnectionRefs__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ConnectionRefs((RConnection)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ConnectionRefs_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ConnectionRefs::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ConnectionRefs_fields__connection_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ConnectionRefs* This = dmi_cast<ConnectionRefs>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_connection, flags);
    else
      This->_connection = (RConnection)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ConnectionRefs_fields__count_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ConnectionRefs* This = dmi_cast<ConnectionRefs>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_count, flags);
    else
      This->_count = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ConnectionRefs_fields__connection = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_connection", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RConnection::clazzInfo(),
  ConnectionRefs_MetainfoWrapper::ConnectionRefs_fields__connection_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ConnectionRefs_fields__count = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_count", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ConnectionRefs_MetainfoWrapper::ConnectionRefs_fields__count_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ConnectionRefs_fields[] = 
{
  &ConnectionRefs_fields__connection,
  &ConnectionRefs_fields__count,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo ConnectionRefs_methods_ConnectionRefs_INLRConnection_I_LRConnectionRefs__arg_con = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "con", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RConnection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ConnectionRefs_methods_ConnectionRefs_INLRConnection_I_LRConnectionRefs__arg_count = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "count", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ConnectionRefs_methods_ConnectionRefs_INLRConnection_I_LRConnectionRefs__args[] = 
{
  &ConnectionRefs_methods_ConnectionRefs_INLRConnection_I_LRConnectionRefs__arg_con,
  &ConnectionRefs_methods_ConnectionRefs_INLRConnection_I_LRConnectionRefs__arg_count,
  0
};

::acdk::lang::dmi::ClazzInfo* ConnectionRefs_methods_ConnectionRefs_INLRConnection_I_LRConnectionRefs__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ConnectionRefs_method_ConnectionRefs_INLRConnection_I_LRConnectionRefs_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ConnectionRefs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ConnectionRefs::clazzInfo(), // return type
  "_0_ConnectionRefs", // alternative name of method
  -1, // altlabelHashCode
  ConnectionRefs_methods_ConnectionRefs_INLRConnection_I_LRConnectionRefs__args, // the arguments
  0, //arguments count
  ConnectionRefs_methods_ConnectionRefs_INLRConnection_I_LRConnectionRefs__exceptions, // the declared exceptions
  ConnectionRefs_MetainfoWrapper::ConnectionRefs_method_ConnectionRefs_INLRConnection_I_LRConnectionRefs__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ConnectionRefs_methods_ConnectionRefs_INLRConnection__LRConnectionRefs__arg_con = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "con", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RConnection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ConnectionRefs_methods_ConnectionRefs_INLRConnection__LRConnectionRefs__args[] = 
{
  &ConnectionRefs_methods_ConnectionRefs_INLRConnection__LRConnectionRefs__arg_con,
  0
};

::acdk::lang::dmi::ClazzInfo* ConnectionRefs_methods_ConnectionRefs_INLRConnection__LRConnectionRefs__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ConnectionRefs_method_ConnectionRefs_INLRConnection__LRConnectionRefs_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ConnectionRefs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ConnectionRefs::clazzInfo(), // return type
  "_1_ConnectionRefs", // alternative name of method
  -1, // altlabelHashCode
  ConnectionRefs_methods_ConnectionRefs_INLRConnection__LRConnectionRefs__args, // the arguments
  0, //arguments count
  ConnectionRefs_methods_ConnectionRefs_INLRConnection__LRConnectionRefs__exceptions, // the declared exceptions
  ConnectionRefs_MetainfoWrapper::ConnectionRefs_method_ConnectionRefs_INLRConnection__LRConnectionRefs__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ConnectionRefs_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ConnectionRefs_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ConnectionRefs_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ConnectionRefs_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ConnectionRefs_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ConnectionRefs_MetainfoWrapper::ConnectionRefs_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ConnectionRefs_methods[] = 
{
  &ConnectionRefs_method_ConnectionRefs_INLRConnection_I_LRConnectionRefs_,
  &ConnectionRefs_method_ConnectionRefs_INLRConnection__LRConnectionRefs_,
  &ConnectionRefs_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct ConnectionRefs_MetaInfoInitializer
{  ConnectionRefs_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ConnectionRefs::clazzInfo();
    ci->fields =  _ConnectionRefs_fields;
    ci->methods =  _ConnectionRefs_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ConnectionRefs_MetaInfoInitializer ConnectionRefs_MetaInfoInitializer_staticinstance__;


} // namespace acdkx
} // namespace rdmi


namespace acdkx { 
namespace rdmi { 


//static
::acdk::lang::RObject
RemoteObjectReferences_create_array(int length)
{
  return new ObjectArrayImpl<RRemoteObjectReferences>(length);
}

//static
::acdk::lang::RObject
RemoteObjectReferences_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class RemoteObjectReferences_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RemoteObjectReferences_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)RemoteObjectReferences::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RemoteObjectReferences_method_RemoteObjectReferences_INLRObject__LRRemoteObjectReferences__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RemoteObjectReferences((RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  RemoteObjectReferences_fields__connections_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    RemoteObjectReferences* This = dmi_cast<RemoteObjectReferences>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_connections, flags);
    else
      This->_connections = (RConnectionRefsArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  RemoteObjectReferences_fields__object_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    RemoteObjectReferences* This = dmi_cast<RemoteObjectReferences>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_object, flags);
    else
      This->_object = (RObject)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  RemoteObjectReferences_fields__persitentCount_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    RemoteObjectReferences* This = dmi_cast<RemoteObjectReferences>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_persitentCount, flags);
    else
      This->_persitentCount = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo RemoteObjectReferences_fields__connections = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_connections", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RConnectionRefsArray::clazzInfo(),
  RemoteObjectReferences_MetainfoWrapper::RemoteObjectReferences_fields__connections_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo RemoteObjectReferences_fields__object = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_object", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(),
  RemoteObjectReferences_MetainfoWrapper::RemoteObjectReferences_fields__object_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo RemoteObjectReferences_fields__persitentCount = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_persitentCount", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  RemoteObjectReferences_MetainfoWrapper::RemoteObjectReferences_fields__persitentCount_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _RemoteObjectReferences_fields[] = 
{
  &RemoteObjectReferences_fields__connections,
  &RemoteObjectReferences_fields__object,
  &RemoteObjectReferences_fields__persitentCount,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* RemoteObjectReferences_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RemoteObjectReferences_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RemoteObjectReferences_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  RemoteObjectReferences_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  RemoteObjectReferences_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  RemoteObjectReferences_MetainfoWrapper::RemoteObjectReferences_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RemoteObjectReferences_methods_RemoteObjectReferences_INLRObject__LRRemoteObjectReferences__arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RemoteObjectReferences_methods_RemoteObjectReferences_INLRObject__LRRemoteObjectReferences__args[] = 
{
  &RemoteObjectReferences_methods_RemoteObjectReferences_INLRObject__LRRemoteObjectReferences__arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* RemoteObjectReferences_methods_RemoteObjectReferences_INLRObject__LRRemoteObjectReferences__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RemoteObjectReferences_method_RemoteObjectReferences_INLRObject__LRRemoteObjectReferences_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "RemoteObjectReferences", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RemoteObjectReferences::clazzInfo(), // return type
  "_0_RemoteObjectReferences", // alternative name of method
  -1, // altlabelHashCode
  RemoteObjectReferences_methods_RemoteObjectReferences_INLRObject__LRRemoteObjectReferences__args, // the arguments
  0, //arguments count
  RemoteObjectReferences_methods_RemoteObjectReferences_INLRObject__LRRemoteObjectReferences__exceptions, // the declared exceptions
  RemoteObjectReferences_MetainfoWrapper::RemoteObjectReferences_method_RemoteObjectReferences_INLRObject__LRRemoteObjectReferences__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _RemoteObjectReferences_methods[] = 
{
  &RemoteObjectReferences_method_GetClass__L_acdk_lang_RClass_,
  &RemoteObjectReferences_method_RemoteObjectReferences_INLRObject__LRRemoteObjectReferences_,
  0
};


struct RemoteObjectReferences_MetaInfoInitializer
{  RemoteObjectReferences_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = RemoteObjectReferences::clazzInfo();
    ci->fields =  _RemoteObjectReferences_fields;
    ci->methods =  _RemoteObjectReferences_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
RemoteObjectReferences_MetaInfoInitializer RemoteObjectReferences_MetaInfoInitializer_staticinstance__;


} // namespace acdkx
} // namespace rdmi


namespace acdkx { 
namespace rdmi { 


//static
::acdk::lang::RObject
LocalObjectRepository_create_array(int length)
{
  return new ObjectArrayImpl<RLocalObjectRepository>(length);
}

//static
::acdk::lang::RObject
LocalObjectRepository_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LocalObjectRepository_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LocalObjectRepository_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LocalObjectRepository::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LocalObjectRepository_method_LocalObjectRepository__LRLocalObjectRepository__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LocalObjectRepository();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LocalObjectRepository_method__getExistant_INLRRemoteObjectId__LRRemoteObjectReferences__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LocalObjectRepository* This = dmi_cast<LocalObjectRepository>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LocalObjectRepository::_getExistant((RRemoteObjectId)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->_getExistant((RRemoteObjectId)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LocalObjectRepository_method_addConnectionRef_INLRRemoteObjectId_INLRConnection__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LocalObjectRepository* This = dmi_cast<LocalObjectRepository>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LocalObjectRepository::addConnectionRef((RRemoteObjectId)args[0].getObjectVar(), (RConnection)args[1].getObjectVar());
    else
        This->addConnectionRef((RRemoteObjectId)args[0].getObjectVar(), (RConnection)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LocalObjectRepository_method_addCreateConnectionRef_INLRObject_INLRConnection__LRRemoteObjectId__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LocalObjectRepository* This = dmi_cast<LocalObjectRepository>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LocalObjectRepository::addCreateConnectionRef((RObject)args[0].getObjectVar(), (RConnection)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->addCreateConnectionRef((RObject)args[0].getObjectVar(), (RConnection)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LocalObjectRepository_method_addPersistentRef_INLRRemoteObjectId__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LocalObjectRepository* This = dmi_cast<LocalObjectRepository>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LocalObjectRepository::addPersistentRef((RRemoteObjectId)args[0].getObjectVar());
    else
        This->addPersistentRef((RRemoteObjectId)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LocalObjectRepository_method_disconnetConnectionObjects_INLRConnection__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LocalObjectRepository* This = dmi_cast<LocalObjectRepository>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LocalObjectRepository::disconnetConnectionObjects((RConnection)args[0].getObjectVar());
    else
        This->disconnetConnectionObjects((RConnection)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LocalObjectRepository_method_get__LRLocalObjectRepository__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LocalObjectRepository::get();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LocalObjectRepository_method_getLocalRef_INLRRemoteObjectId__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LocalObjectRepository* This = dmi_cast<LocalObjectRepository>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LocalObjectRepository::getLocalRef((RRemoteObjectId)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getLocalRef((RRemoteObjectId)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LocalObjectRepository_method_hasLocalRef_INLRRemoteObjectId__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LocalObjectRepository* This = dmi_cast<LocalObjectRepository>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LocalObjectRepository::hasLocalRef((RRemoteObjectId)args[0].getObjectVar());
    else
      ret = This->hasLocalRef((RRemoteObjectId)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LocalObjectRepository_method_releaseConnectionRef_INLRObject_INLRConnection__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LocalObjectRepository* This = dmi_cast<LocalObjectRepository>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LocalObjectRepository::releaseConnectionRef((RObject)args[0].getObjectVar(), (RConnection)args[1].getObjectVar());
    else
        This->releaseConnectionRef((RObject)args[0].getObjectVar(), (RConnection)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LocalObjectRepository_method_releaseConnectionRef_INLRRemoteObjectId_INLRConnection__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LocalObjectRepository* This = dmi_cast<LocalObjectRepository>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LocalObjectRepository::releaseConnectionRef((RRemoteObjectId)args[0].getObjectVar(), (RConnection)args[1].getObjectVar());
    else
        This->releaseConnectionRef((RRemoteObjectId)args[0].getObjectVar(), (RConnection)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LocalObjectRepository_method_releasePersistentRef_INLRRemoteObjectId__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LocalObjectRepository* This = dmi_cast<LocalObjectRepository>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LocalObjectRepository::releasePersistentRef((RRemoteObjectId)args[0].getObjectVar());
    else
        This->releasePersistentRef((RRemoteObjectId)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _LocalObjectRepository_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LocalObjectRepository_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LocalObjectRepository_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LocalObjectRepository_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_c_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LocalObjectRepository_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LocalObjectRepository_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LocalObjectRepository_MetainfoWrapper::LocalObjectRepository_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LocalObjectRepository_methods_LocalObjectRepository__LRLocalObjectRepository__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LocalObjectRepository_methods_LocalObjectRepository__LRLocalObjectRepository__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LocalObjectRepository_method_LocalObjectRepository__LRLocalObjectRepository_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "LocalObjectRepository", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LocalObjectRepository::clazzInfo(), // return type
  "_0_LocalObjectRepository", // alternative name of method
  -1, // altlabelHashCode
  LocalObjectRepository_methods_LocalObjectRepository__LRLocalObjectRepository__args, // the arguments
  0, //arguments count
  LocalObjectRepository_methods_LocalObjectRepository__LRLocalObjectRepository__exceptions, // the declared exceptions
  LocalObjectRepository_MetainfoWrapper::LocalObjectRepository_method_LocalObjectRepository__LRLocalObjectRepository__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LocalObjectRepository_methods__getExistant_INLRRemoteObjectId__LRRemoteObjectReferences__arg_roi = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "roi", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRemoteObjectId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LocalObjectRepository_methods__getExistant_INLRRemoteObjectId__LRRemoteObjectReferences__args[] = 
{
  &LocalObjectRepository_methods__getExistant_INLRRemoteObjectId__LRRemoteObjectReferences__arg_roi,
  0
};

::acdk::lang::dmi::ClazzInfo* LocalObjectRepository_methods__getExistant_INLRRemoteObjectId__LRRemoteObjectReferences__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LocalObjectRepository_method__getExistant_INLRRemoteObjectId__LRRemoteObjectReferences_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_getExistant", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRemoteObjectReferences::clazzInfo(), // return type
  "_b__getExistant", // alternative name of method
  -1, // altlabelHashCode
  LocalObjectRepository_methods__getExistant_INLRRemoteObjectId__LRRemoteObjectReferences__args, // the arguments
  0, //arguments count
  LocalObjectRepository_methods__getExistant_INLRRemoteObjectId__LRRemoteObjectReferences__exceptions, // the declared exceptions
  LocalObjectRepository_MetainfoWrapper::LocalObjectRepository_method__getExistant_INLRRemoteObjectId__LRRemoteObjectReferences__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LocalObjectRepository_methods_addConnectionRef_INLRRemoteObjectId_INLRConnection__V_arg_oid = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "oid", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRemoteObjectId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LocalObjectRepository_methods_addConnectionRef_INLRRemoteObjectId_INLRConnection__V_arg_conn = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "conn", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RConnection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LocalObjectRepository_methods_addConnectionRef_INLRRemoteObjectId_INLRConnection__V_args[] = 
{
  &LocalObjectRepository_methods_addConnectionRef_INLRRemoteObjectId_INLRConnection__V_arg_oid,
  &LocalObjectRepository_methods_addConnectionRef_INLRRemoteObjectId_INLRConnection__V_arg_conn,
  0
};

::acdk::lang::dmi::ClazzInfo* LocalObjectRepository_methods_addConnectionRef_INLRRemoteObjectId_INLRConnection__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LocalObjectRepository_method_addConnectionRef_INLRRemoteObjectId_INLRConnection__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addConnectionRef", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_addConnectionRef", // alternative name of method
  -1, // altlabelHashCode
  LocalObjectRepository_methods_addConnectionRef_INLRRemoteObjectId_INLRConnection__V_args, // the arguments
  0, //arguments count
  LocalObjectRepository_methods_addConnectionRef_INLRRemoteObjectId_INLRConnection__V_exceptions, // the declared exceptions
  LocalObjectRepository_MetainfoWrapper::LocalObjectRepository_method_addConnectionRef_INLRRemoteObjectId_INLRConnection__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LocalObjectRepository_methods_addCreateConnectionRef_INLRObject_INLRConnection__LRRemoteObjectId__arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LocalObjectRepository_methods_addCreateConnectionRef_INLRObject_INLRConnection__LRRemoteObjectId__arg_conn = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "conn", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RConnection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LocalObjectRepository_methods_addCreateConnectionRef_INLRObject_INLRConnection__LRRemoteObjectId__args[] = 
{
  &LocalObjectRepository_methods_addCreateConnectionRef_INLRObject_INLRConnection__LRRemoteObjectId__arg_o,
  &LocalObjectRepository_methods_addCreateConnectionRef_INLRObject_INLRConnection__LRRemoteObjectId__arg_conn,
  0
};

::acdk::lang::dmi::ClazzInfo* LocalObjectRepository_methods_addCreateConnectionRef_INLRObject_INLRConnection__LRRemoteObjectId__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LocalObjectRepository_method_addCreateConnectionRef_INLRObject_INLRConnection__LRRemoteObjectId_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addCreateConnectionRef", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRemoteObjectId::clazzInfo(), // return type
  "_4_addCreateConnectionRef", // alternative name of method
  -1, // altlabelHashCode
  LocalObjectRepository_methods_addCreateConnectionRef_INLRObject_INLRConnection__LRRemoteObjectId__args, // the arguments
  0, //arguments count
  LocalObjectRepository_methods_addCreateConnectionRef_INLRObject_INLRConnection__LRRemoteObjectId__exceptions, // the declared exceptions
  LocalObjectRepository_MetainfoWrapper::LocalObjectRepository_method_addCreateConnectionRef_INLRObject_INLRConnection__LRRemoteObjectId__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LocalObjectRepository_methods_addPersistentRef_INLRRemoteObjectId__V_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRemoteObjectId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LocalObjectRepository_methods_addPersistentRef_INLRRemoteObjectId__V_args[] = 
{
  &LocalObjectRepository_methods_addPersistentRef_INLRRemoteObjectId__V_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* LocalObjectRepository_methods_addPersistentRef_INLRRemoteObjectId__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LocalObjectRepository_method_addPersistentRef_INLRRemoteObjectId__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addPersistentRef", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_addPersistentRef", // alternative name of method
  -1, // altlabelHashCode
  LocalObjectRepository_methods_addPersistentRef_INLRRemoteObjectId__V_args, // the arguments
  0, //arguments count
  LocalObjectRepository_methods_addPersistentRef_INLRRemoteObjectId__V_exceptions, // the declared exceptions
  LocalObjectRepository_MetainfoWrapper::LocalObjectRepository_method_addPersistentRef_INLRRemoteObjectId__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LocalObjectRepository_methods_disconnetConnectionObjects_INLRConnection__V_arg_conn = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "conn", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RConnection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LocalObjectRepository_methods_disconnetConnectionObjects_INLRConnection__V_args[] = 
{
  &LocalObjectRepository_methods_disconnetConnectionObjects_INLRConnection__V_arg_conn,
  0
};

::acdk::lang::dmi::ClazzInfo* LocalObjectRepository_methods_disconnetConnectionObjects_INLRConnection__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LocalObjectRepository_method_disconnetConnectionObjects_INLRConnection__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "disconnetConnectionObjects", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_disconnetConnectionObjects", // alternative name of method
  -1, // altlabelHashCode
  LocalObjectRepository_methods_disconnetConnectionObjects_INLRConnection__V_args, // the arguments
  0, //arguments count
  LocalObjectRepository_methods_disconnetConnectionObjects_INLRConnection__V_exceptions, // the declared exceptions
  LocalObjectRepository_MetainfoWrapper::LocalObjectRepository_method_disconnetConnectionObjects_INLRConnection__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LocalObjectRepository_methods_get__LRLocalObjectRepository__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LocalObjectRepository_methods_get__LRLocalObjectRepository__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LocalObjectRepository_method_get__LRLocalObjectRepository_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "get", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocalObjectRepository::clazzInfo(), // return type
  "_1_get", // alternative name of method
  -1, // altlabelHashCode
  LocalObjectRepository_methods_get__LRLocalObjectRepository__args, // the arguments
  0, //arguments count
  LocalObjectRepository_methods_get__LRLocalObjectRepository__exceptions, // the declared exceptions
  LocalObjectRepository_MetainfoWrapper::LocalObjectRepository_method_get__LRLocalObjectRepository__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LocalObjectRepository_methods_getLocalRef_INLRRemoteObjectId__LRObject__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRemoteObjectId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LocalObjectRepository_methods_getLocalRef_INLRRemoteObjectId__LRObject__args[] = 
{
  &LocalObjectRepository_methods_getLocalRef_INLRRemoteObjectId__LRObject__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* LocalObjectRepository_methods_getLocalRef_INLRRemoteObjectId__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LocalObjectRepository_method_getLocalRef_INLRRemoteObjectId__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLocalRef", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_3_getLocalRef", // alternative name of method
  -1, // altlabelHashCode
  LocalObjectRepository_methods_getLocalRef_INLRRemoteObjectId__LRObject__args, // the arguments
  0, //arguments count
  LocalObjectRepository_methods_getLocalRef_INLRRemoteObjectId__LRObject__exceptions, // the declared exceptions
  LocalObjectRepository_MetainfoWrapper::LocalObjectRepository_method_getLocalRef_INLRRemoteObjectId__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LocalObjectRepository_methods_hasLocalRef_INLRRemoteObjectId__Z_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRemoteObjectId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LocalObjectRepository_methods_hasLocalRef_INLRRemoteObjectId__Z_args[] = 
{
  &LocalObjectRepository_methods_hasLocalRef_INLRRemoteObjectId__Z_arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* LocalObjectRepository_methods_hasLocalRef_INLRRemoteObjectId__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LocalObjectRepository_method_hasLocalRef_INLRRemoteObjectId__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasLocalRef", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_hasLocalRef", // alternative name of method
  -1, // altlabelHashCode
  LocalObjectRepository_methods_hasLocalRef_INLRRemoteObjectId__Z_args, // the arguments
  0, //arguments count
  LocalObjectRepository_methods_hasLocalRef_INLRRemoteObjectId__Z_exceptions, // the declared exceptions
  LocalObjectRepository_MetainfoWrapper::LocalObjectRepository_method_hasLocalRef_INLRRemoteObjectId__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LocalObjectRepository_methods_releaseConnectionRef_INLRObject_INLRConnection__V_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LocalObjectRepository_methods_releaseConnectionRef_INLRObject_INLRConnection__V_arg_conn = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "conn", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RConnection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LocalObjectRepository_methods_releaseConnectionRef_INLRObject_INLRConnection__V_args[] = 
{
  &LocalObjectRepository_methods_releaseConnectionRef_INLRObject_INLRConnection__V_arg_o,
  &LocalObjectRepository_methods_releaseConnectionRef_INLRObject_INLRConnection__V_arg_conn,
  0
};

::acdk::lang::dmi::ClazzInfo* LocalObjectRepository_methods_releaseConnectionRef_INLRObject_INLRConnection__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LocalObjectRepository_method_releaseConnectionRef_INLRObject_INLRConnection__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "releaseConnectionRef", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_releaseConnectionRef", // alternative name of method
  -1, // altlabelHashCode
  LocalObjectRepository_methods_releaseConnectionRef_INLRObject_INLRConnection__V_args, // the arguments
  0, //arguments count
  LocalObjectRepository_methods_releaseConnectionRef_INLRObject_INLRConnection__V_exceptions, // the declared exceptions
  LocalObjectRepository_MetainfoWrapper::LocalObjectRepository_method_releaseConnectionRef_INLRObject_INLRConnection__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LocalObjectRepository_methods_releaseConnectionRef_INLRRemoteObjectId_INLRConnection__V_arg_oid = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "oid", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRemoteObjectId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LocalObjectRepository_methods_releaseConnectionRef_INLRRemoteObjectId_INLRConnection__V_arg_conn = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "conn", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RConnection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LocalObjectRepository_methods_releaseConnectionRef_INLRRemoteObjectId_INLRConnection__V_args[] = 
{
  &LocalObjectRepository_methods_releaseConnectionRef_INLRRemoteObjectId_INLRConnection__V_arg_oid,
  &LocalObjectRepository_methods_releaseConnectionRef_INLRRemoteObjectId_INLRConnection__V_arg_conn,
  0
};

::acdk::lang::dmi::ClazzInfo* LocalObjectRepository_methods_releaseConnectionRef_INLRRemoteObjectId_INLRConnection__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LocalObjectRepository_method_releaseConnectionRef_INLRRemoteObjectId_INLRConnection__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "releaseConnectionRef", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_releaseConnectionRef", // alternative name of method
  -1, // altlabelHashCode
  LocalObjectRepository_methods_releaseConnectionRef_INLRRemoteObjectId_INLRConnection__V_args, // the arguments
  0, //arguments count
  LocalObjectRepository_methods_releaseConnectionRef_INLRRemoteObjectId_INLRConnection__V_exceptions, // the declared exceptions
  LocalObjectRepository_MetainfoWrapper::LocalObjectRepository_method_releaseConnectionRef_INLRRemoteObjectId_INLRConnection__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LocalObjectRepository_methods_releasePersistentRef_INLRRemoteObjectId__V_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRemoteObjectId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LocalObjectRepository_methods_releasePersistentRef_INLRRemoteObjectId__V_args[] = 
{
  &LocalObjectRepository_methods_releasePersistentRef_INLRRemoteObjectId__V_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* LocalObjectRepository_methods_releasePersistentRef_INLRRemoteObjectId__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LocalObjectRepository_method_releasePersistentRef_INLRRemoteObjectId__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "releasePersistentRef", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_releasePersistentRef", // alternative name of method
  -1, // altlabelHashCode
  LocalObjectRepository_methods_releasePersistentRef_INLRRemoteObjectId__V_args, // the arguments
  0, //arguments count
  LocalObjectRepository_methods_releasePersistentRef_INLRRemoteObjectId__V_exceptions, // the declared exceptions
  LocalObjectRepository_MetainfoWrapper::LocalObjectRepository_method_releasePersistentRef_INLRRemoteObjectId__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LocalObjectRepository_methods[] = 
{
  &LocalObjectRepository_method_GetClass__L_acdk_lang_RClass_,
  &LocalObjectRepository_method_LocalObjectRepository__LRLocalObjectRepository_,
  &LocalObjectRepository_method__getExistant_INLRRemoteObjectId__LRRemoteObjectReferences_,
  &LocalObjectRepository_method_addConnectionRef_INLRRemoteObjectId_INLRConnection__V,
  &LocalObjectRepository_method_addCreateConnectionRef_INLRObject_INLRConnection__LRRemoteObjectId_,
  &LocalObjectRepository_method_addPersistentRef_INLRRemoteObjectId__V,
  &LocalObjectRepository_method_disconnetConnectionObjects_INLRConnection__V,
  &LocalObjectRepository_method_get__LRLocalObjectRepository_,
  &LocalObjectRepository_method_getLocalRef_INLRRemoteObjectId__LRObject_,
  &LocalObjectRepository_method_hasLocalRef_INLRRemoteObjectId__Z,
  &LocalObjectRepository_method_releaseConnectionRef_INLRObject_INLRConnection__V,
  &LocalObjectRepository_method_releaseConnectionRef_INLRRemoteObjectId_INLRConnection__V,
  &LocalObjectRepository_method_releasePersistentRef_INLRRemoteObjectId__V,
  0
};


struct LocalObjectRepository_MetaInfoInitializer
{  LocalObjectRepository_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LocalObjectRepository::clazzInfo();
    ci->fields =  _LocalObjectRepository_fields;
    ci->methods =  _LocalObjectRepository_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LocalObjectRepository_MetaInfoInitializer LocalObjectRepository_MetaInfoInitializer_staticinstance__;


} // namespace acdkx
} // namespace rdmi


namespace acdkx { 
namespace rdmi { 


//static
::acdk::lang::RObject
RemoteArg_create_array(int length)
{
  return new ObjectArrayImpl<RRemoteArg>(length);
}

//static
::acdk::lang::RObject
RemoteArg_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class RemoteArg_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RemoteArg_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)RemoteArg::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RemoteArg_method_RemoteArg_I_LRRemoteArg__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RemoteArg((RemoteArgType)args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RemoteArg_method_RemoteArg__LRRemoteArg__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RemoteArg();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RemoteArg_method_readObject_INLacdk_io_RObjectReader__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RemoteArg* This = dmi_cast<RemoteArg>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->RemoteArg::readObject((acdk::io::RObjectReader)args[0].getObjectVar());
    else
        This->readObject((acdk::io::RObjectReader)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RemoteArg_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RemoteArg* This = dmi_cast<RemoteArg>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->RemoteArg::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RemoteArg_method_writeObject_INLacdk_io_RObjectWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RemoteArg* This = dmi_cast<RemoteArg>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->RemoteArg::writeObject((acdk::io::RObjectWriter)args[0].getObjectVar());
    else
        This->writeObject((acdk::io::RObjectWriter)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  RemoteArg_fields_argType_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    RemoteArg* This = dmi_cast<RemoteArg>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->argType), flags);
    else
      This->argType = (RemoteArgType)var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  RemoteArg_fields_name_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    RemoteArg* This = dmi_cast<RemoteArg>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->name, flags);
    else
      This->name = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  RemoteArg_fields_serverId_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    RemoteArg* This = dmi_cast<RemoteArg>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->serverId, flags);
    else
      This->serverId = (RString)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo RemoteArg_fields_argType = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "argType", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  RemoteArg_MetainfoWrapper::RemoteArg_fields_argType_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo RemoteArg_fields_name = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "name", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  RemoteArg_MetainfoWrapper::RemoteArg_fields_name_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo RemoteArg_fields_serverId = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "serverId", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  RemoteArg_MetainfoWrapper::RemoteArg_fields_serverId_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _RemoteArg_fields[] = 
{
  &RemoteArg_fields_argType,
  &RemoteArg_fields_name,
  &RemoteArg_fields_serverId,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* RemoteArg_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RemoteArg_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RemoteArg_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  RemoteArg_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  RemoteArg_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  RemoteArg_MetainfoWrapper::RemoteArg_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RemoteArg_methods_RemoteArg_I_LRRemoteArg__arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RemoteArg_methods_RemoteArg_I_LRRemoteArg__args[] = 
{
  &RemoteArg_methods_RemoteArg_I_LRRemoteArg__arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* RemoteArg_methods_RemoteArg_I_LRRemoteArg__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RemoteArg_method_RemoteArg_I_LRRemoteArg_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "RemoteArg", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RemoteArg::clazzInfo(), // return type
  "_0_RemoteArg", // alternative name of method
  -1, // altlabelHashCode
  RemoteArg_methods_RemoteArg_I_LRRemoteArg__args, // the arguments
  0, //arguments count
  RemoteArg_methods_RemoteArg_I_LRRemoteArg__exceptions, // the declared exceptions
  RemoteArg_MetainfoWrapper::RemoteArg_method_RemoteArg_I_LRRemoteArg__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* RemoteArg_methods_RemoteArg__LRRemoteArg__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RemoteArg_methods_RemoteArg__LRRemoteArg__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RemoteArg_method_RemoteArg__LRRemoteArg_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "RemoteArg", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RemoteArg::clazzInfo(), // return type
  "_1_RemoteArg", // alternative name of method
  -1, // altlabelHashCode
  RemoteArg_methods_RemoteArg__LRRemoteArg__args, // the arguments
  0, //arguments count
  RemoteArg_methods_RemoteArg__LRRemoteArg__exceptions, // the declared exceptions
  RemoteArg_MetainfoWrapper::RemoteArg_method_RemoteArg__LRRemoteArg__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RemoteArg_methods_readObject_INLacdk_io_RObjectReader__V_arg_in = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "in", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RObjectReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RemoteArg_methods_readObject_INLacdk_io_RObjectReader__V_args[] = 
{
  &RemoteArg_methods_readObject_INLacdk_io_RObjectReader__V_arg_in,
  0
};

::acdk::lang::dmi::ClazzInfo* RemoteArg_methods_readObject_INLacdk_io_RObjectReader__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RemoteArg_method_readObject_INLacdk_io_RObjectReader__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_readObject", // alternative name of method
  -1, // altlabelHashCode
  RemoteArg_methods_readObject_INLacdk_io_RObjectReader__V_args, // the arguments
  0, //arguments count
  RemoteArg_methods_readObject_INLacdk_io_RObjectReader__V_exceptions, // the declared exceptions
  RemoteArg_MetainfoWrapper::RemoteArg_method_readObject_INLacdk_io_RObjectReader__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* RemoteArg_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RemoteArg_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RemoteArg_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_toString", // alternative name of method
  -1, // altlabelHashCode
  RemoteArg_methods_toString__LRString__args, // the arguments
  0, //arguments count
  RemoteArg_methods_toString__LRString__exceptions, // the declared exceptions
  RemoteArg_MetainfoWrapper::RemoteArg_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RemoteArg_methods_writeObject_INLacdk_io_RObjectWriter__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RObjectWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RemoteArg_methods_writeObject_INLacdk_io_RObjectWriter__V_args[] = 
{
  &RemoteArg_methods_writeObject_INLacdk_io_RObjectWriter__V_arg_out,
  0
};

::acdk::lang::dmi::ClazzInfo* RemoteArg_methods_writeObject_INLacdk_io_RObjectWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RemoteArg_method_writeObject_INLacdk_io_RObjectWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_writeObject", // alternative name of method
  -1, // altlabelHashCode
  RemoteArg_methods_writeObject_INLacdk_io_RObjectWriter__V_args, // the arguments
  0, //arguments count
  RemoteArg_methods_writeObject_INLacdk_io_RObjectWriter__V_exceptions, // the declared exceptions
  RemoteArg_MetainfoWrapper::RemoteArg_method_writeObject_INLacdk_io_RObjectWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _RemoteArg_methods[] = 
{
  &RemoteArg_method_GetClass__L_acdk_lang_RClass_,
  &RemoteArg_method_RemoteArg_I_LRRemoteArg_,
  &RemoteArg_method_RemoteArg__LRRemoteArg_,
  &RemoteArg_method_readObject_INLacdk_io_RObjectReader__V,
  &RemoteArg_method_toString__LRString_,
  &RemoteArg_method_writeObject_INLacdk_io_RObjectWriter__V,
  0
};


struct RemoteArg_MetaInfoInitializer
{  RemoteArg_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = RemoteArg::clazzInfo();
    ci->fields =  _RemoteArg_fields;
    ci->methods =  _RemoteArg_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
RemoteArg_MetaInfoInitializer RemoteArg_MetaInfoInitializer_staticinstance__;


struct RemoteArg_clazzInfo_ClazzAttributesResInitializer1
{
  RemoteArg_clazzInfo_ClazzAttributesResInitializer1()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&RemoteArg_methods_RemoteArg_I_LRRemoteArg__arg_type, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)RemoteArgTypeMetaInf::GetEnumInfo()));
  }
};

RemoteArg_clazzInfo_ClazzAttributesResInitializer1 RemoteArg_clazzInfo_ClazzAttributesResInitializer1_instance;



} // namespace acdkx
} // namespace rdmi


namespace acdkx { 
namespace rdmi { 


//static
::acdk::lang::RObject
ProtocolImpl_create_array(int length)
{
  return new ObjectArrayImpl<RProtocolImpl>(length);
}

//static
::acdk::lang::RObject
ProtocolImpl_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ProtocolImpl_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ProtocolImpl_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ProtocolImpl::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ProtocolImpl_method_readCmd_INLacdk_io_RReader__LInvokeCmd__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ProtocolImpl* This = dmi_cast<ProtocolImpl>(This_);
  ret = (InvokeCmd)This->readCmd((acdk::io::RReader)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ProtocolImpl_method_receive_INLacdk_io_RReader_INLRRemoteArgArray_I_LInvokeCmd__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ProtocolImpl* This = dmi_cast<ProtocolImpl>(This_);
  ret = (InvokeCmd)This->receive((acdk::io::RReader)args[0].getObjectVar(), (RRemoteArgArray)args[1].getObjectVar(), (InvokeCmd)args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ProtocolImpl_method_send_INLacdk_io_RWriter_IINLRRemoteArgArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ProtocolImpl* This = dmi_cast<ProtocolImpl>(This_);
    This->send((acdk::io::RWriter)args[0].getObjectVar(), (InvokeCmd)args[1].getIntVar(), (RRemoteArgArray)args[2].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ProtocolImpl_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ProtocolImpl_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ProtocolImpl_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ProtocolImpl_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ProtocolImpl_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ProtocolImpl_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ProtocolImpl_MetainfoWrapper::ProtocolImpl_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ProtocolImpl_methods_readCmd_INLacdk_io_RReader__LInvokeCmd__arg_in = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "in", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ProtocolImpl_methods_readCmd_INLacdk_io_RReader__LInvokeCmd__args[] = 
{
  &ProtocolImpl_methods_readCmd_INLacdk_io_RReader__LInvokeCmd__arg_in,
  0
};

::acdk::lang::dmi::ClazzInfo* ProtocolImpl_methods_readCmd_INLacdk_io_RReader__LInvokeCmd__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ProtocolImpl_method_readCmd_INLacdk_io_RReader__LInvokeCmd_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readCmd", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1_readCmd", // alternative name of method
  -1, // altlabelHashCode
  ProtocolImpl_methods_readCmd_INLacdk_io_RReader__LInvokeCmd__args, // the arguments
  0, //arguments count
  ProtocolImpl_methods_readCmd_INLacdk_io_RReader__LInvokeCmd__exceptions, // the declared exceptions
  ProtocolImpl_MetainfoWrapper::ProtocolImpl_method_readCmd_INLacdk_io_RReader__LInvokeCmd__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ProtocolImpl_methods_receive_INLacdk_io_RReader_INLRRemoteArgArray_I_LInvokeCmd__arg_in = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "in", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ProtocolImpl_methods_receive_INLacdk_io_RReader_INLRRemoteArgArray_I_LInvokeCmd__arg_args = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "args", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRemoteArgArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ProtocolImpl_methods_receive_INLacdk_io_RReader_INLRRemoteArgArray_I_LInvokeCmd__arg_cmd = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "cmd", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ProtocolImpl_methods_receive_INLacdk_io_RReader_INLRRemoteArgArray_I_LInvokeCmd__args[] = 
{
  &ProtocolImpl_methods_receive_INLacdk_io_RReader_INLRRemoteArgArray_I_LInvokeCmd__arg_in,
  &ProtocolImpl_methods_receive_INLacdk_io_RReader_INLRRemoteArgArray_I_LInvokeCmd__arg_args,
  &ProtocolImpl_methods_receive_INLacdk_io_RReader_INLRRemoteArgArray_I_LInvokeCmd__arg_cmd,
  0
};

::acdk::lang::dmi::ClazzInfo* ProtocolImpl_methods_receive_INLacdk_io_RReader_INLRRemoteArgArray_I_LInvokeCmd__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ProtocolImpl_method_receive_INLacdk_io_RReader_INLRRemoteArgArray_I_LInvokeCmd_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "receive", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2_receive", // alternative name of method
  -1, // altlabelHashCode
  ProtocolImpl_methods_receive_INLacdk_io_RReader_INLRRemoteArgArray_I_LInvokeCmd__args, // the arguments
  0, //arguments count
  ProtocolImpl_methods_receive_INLacdk_io_RReader_INLRRemoteArgArray_I_LInvokeCmd__exceptions, // the declared exceptions
  ProtocolImpl_MetainfoWrapper::ProtocolImpl_method_receive_INLacdk_io_RReader_INLRRemoteArgArray_I_LInvokeCmd__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ProtocolImpl_methods_send_INLacdk_io_RWriter_IINLRRemoteArgArray__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ProtocolImpl_methods_send_INLacdk_io_RWriter_IINLRRemoteArgArray__V_arg_cmd = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "cmd", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ProtocolImpl_methods_send_INLacdk_io_RWriter_IINLRRemoteArgArray__V_arg_args = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "args", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRemoteArgArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ProtocolImpl_methods_send_INLacdk_io_RWriter_IINLRRemoteArgArray__V_args[] = 
{
  &ProtocolImpl_methods_send_INLacdk_io_RWriter_IINLRRemoteArgArray__V_arg_out,
  &ProtocolImpl_methods_send_INLacdk_io_RWriter_IINLRRemoteArgArray__V_arg_cmd,
  &ProtocolImpl_methods_send_INLacdk_io_RWriter_IINLRRemoteArgArray__V_arg_args,
  0
};

::acdk::lang::dmi::ClazzInfo* ProtocolImpl_methods_send_INLacdk_io_RWriter_IINLRRemoteArgArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ProtocolImpl_method_send_INLacdk_io_RWriter_IINLRRemoteArgArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "send", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0_send", // alternative name of method
  -1, // altlabelHashCode
  ProtocolImpl_methods_send_INLacdk_io_RWriter_IINLRRemoteArgArray__V_args, // the arguments
  0, //arguments count
  ProtocolImpl_methods_send_INLacdk_io_RWriter_IINLRRemoteArgArray__V_exceptions, // the declared exceptions
  ProtocolImpl_MetainfoWrapper::ProtocolImpl_method_send_INLacdk_io_RWriter_IINLRRemoteArgArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ProtocolImpl_methods[] = 
{
  &ProtocolImpl_method_GetClass__L_acdk_lang_RClass_,
  &ProtocolImpl_method_readCmd_INLacdk_io_RReader__LInvokeCmd_,
  &ProtocolImpl_method_receive_INLacdk_io_RReader_INLRRemoteArgArray_I_LInvokeCmd_,
  &ProtocolImpl_method_send_INLacdk_io_RWriter_IINLRRemoteArgArray__V,
  0
};


struct ProtocolImpl_MetaInfoInitializer
{  ProtocolImpl_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ProtocolImpl::clazzInfo();
    ci->fields =  _ProtocolImpl_fields;
    ci->methods =  _ProtocolImpl_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ProtocolImpl_MetaInfoInitializer ProtocolImpl_MetaInfoInitializer_staticinstance__;


struct ProtocolImpl_clazzInfo_ClazzAttributesResInitializer2
{
  ProtocolImpl_clazzInfo_ClazzAttributesResInitializer2()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&ProtocolImpl_methods_send_INLacdk_io_RWriter_IINLRRemoteArgArray__V_arg_cmd, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)InvokeCmdMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&ProtocolImpl_method_readCmd_INLacdk_io_RReader__LInvokeCmd_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)InvokeCmdMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&ProtocolImpl_methods_receive_INLacdk_io_RReader_INLRRemoteArgArray_I_LInvokeCmd__arg_cmd, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)InvokeCmdMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&ProtocolImpl_method_receive_INLacdk_io_RReader_INLRRemoteArgArray_I_LInvokeCmd_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)InvokeCmdMetaInf::GetEnumInfo()));
  }
};

ProtocolImpl_clazzInfo_ClazzAttributesResInitializer2 ProtocolImpl_clazzInfo_ClazzAttributesResInitializer2_instance;



} // namespace acdkx
} // namespace rdmi


namespace acdkx { 
namespace rdmi { 


//static
::acdk::lang::RObject
RemoteDmiServer_create_array(int length)
{
  return new ObjectArrayImpl<RRemoteDmiServer>(length);
}

//static
::acdk::lang::RObject
RemoteDmiServer_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class RemoteDmiServer_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RemoteDmiServer_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)RemoteDmiServer::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RemoteDmiServer_method_RemoteDmiServer_INLRServerImpl_INLRProtocolImpl__LRRemoteDmiServer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RemoteDmiServer((RServerImpl)args[0].getObjectVar(), (RProtocolImpl)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RemoteDmiServer_method_createRemote_INLRString_INLacdk_lang_dmi_RDmiObjectArray__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RemoteDmiServer* This = dmi_cast<RemoteDmiServer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->RemoteDmiServer::createRemote((RString)args[0].getObjectVar(), (acdk::lang::dmi::RDmiObjectArray)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->createRemote((RString)args[0].getObjectVar(), (acdk::lang::dmi::RDmiObjectArray)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RemoteDmiServer_method_createRemoteAs_INLRString_INLRString_INLacdk_lang_dmi_RDmiObjectArray__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RemoteDmiServer* This = dmi_cast<RemoteDmiServer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->RemoteDmiServer::createRemoteAs((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (acdk::lang::dmi::RDmiObjectArray)args[2].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->createRemoteAs((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (acdk::lang::dmi::RDmiObjectArray)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RemoteDmiServer_method_invokeStaticRemote_INLRString_INLRString_INLacdk_lang_dmi_RDmiObjectArray__Lacdk_lang_dmi_RDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RemoteDmiServer* This = dmi_cast<RemoteDmiServer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->RemoteDmiServer::invokeStaticRemote((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (acdk::lang::dmi::RDmiObjectArray)args[2].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->invokeStaticRemote((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (acdk::lang::dmi::RDmiObjectArray)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RemoteDmiServer_method_invokeStaticRemoteAs_INLRString_INLRString_INLRString_IINLacdk_lang_dmi_RDmiObjectArray__Lacdk_lang_dmi_RDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RemoteDmiServer* This = dmi_cast<RemoteDmiServer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->RemoteDmiServer::invokeStaticRemoteAs((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), args[3].getIntVar(), (acdk::lang::dmi::RDmiObjectArray)args[4].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->invokeStaticRemoteAs((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), args[3].getIntVar(), (acdk::lang::dmi::RDmiObjectArray)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RemoteDmiServer_method_peekStaticRemote_INLRString_INLRString_INLRString_I_Lacdk_lang_dmi_RDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RemoteDmiServer* This = dmi_cast<RemoteDmiServer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->RemoteDmiServer::peekStaticRemote((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), args[3].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->peekStaticRemote((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RemoteDmiServer_method_peekStaticRemote_INLRString_INLRString__Lacdk_lang_dmi_RDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RemoteDmiServer* This = dmi_cast<RemoteDmiServer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->RemoteDmiServer::peekStaticRemote((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->peekStaticRemote((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RemoteDmiServer_method_peekStaticRemote_INLRString_INLRString_INLRString__Lacdk_lang_dmi_RDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RemoteDmiServer* This = dmi_cast<RemoteDmiServer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->RemoteDmiServer::peekStaticRemote((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->peekStaticRemote((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RemoteDmiServer_method_readWrite_INLRConnection_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RemoteDmiServer* This = dmi_cast<RemoteDmiServer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->RemoteDmiServer::readWrite((RConnection)args[0].getObjectVar(), (InvokeCmd)args[1].getIntVar());
    else
        This->readWrite((RConnection)args[0].getObjectVar(), (InvokeCmd)args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RemoteDmiServer_method_readWrite_INLRConnection__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RemoteDmiServer* This = dmi_cast<RemoteDmiServer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->RemoteDmiServer::readWrite((RConnection)args[0].getObjectVar());
    else
        This->readWrite((RConnection)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RemoteDmiServer_method_run__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RemoteDmiServer* This = dmi_cast<RemoteDmiServer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->RemoteDmiServer::run();
    else
        This->run();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RemoteDmiServer_method_shutdown__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RemoteDmiServer* This = dmi_cast<RemoteDmiServer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->RemoteDmiServer::shutdown();
    else
        This->shutdown();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RemoteDmiServer_method_shutdownRemote__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RemoteDmiServer* This = dmi_cast<RemoteDmiServer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->RemoteDmiServer::shutdownRemote();
    else
        This->shutdownRemote();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RemoteDmiServer_method_startInBackground__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RemoteDmiServer* This = dmi_cast<RemoteDmiServer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->RemoteDmiServer::startInBackground();
    else
        This->startInBackground();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RemoteDmiServer_method_startInFront__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RemoteDmiServer* This = dmi_cast<RemoteDmiServer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->RemoteDmiServer::startInFront();
    else
        This->startInFront();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  RemoteDmiServer_fields__isServer_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    RemoteDmiServer* This = dmi_cast<RemoteDmiServer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_isServer, flags);
    else
      This->_isServer = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  RemoteDmiServer_fields__protocol_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    RemoteDmiServer* This = dmi_cast<RemoteDmiServer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_protocol, flags);
    else
      This->_protocol = (RProtocolImpl)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  RemoteDmiServer_fields__server_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    RemoteDmiServer* This = dmi_cast<RemoteDmiServer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_server, flags);
    else
      This->_server = (RServerImpl)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo RemoteDmiServer_fields__isServer = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_isServer", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  RemoteDmiServer_MetainfoWrapper::RemoteDmiServer_fields__isServer_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo RemoteDmiServer_fields__protocol = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_protocol", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProtocolImpl::clazzInfo(),
  RemoteDmiServer_MetainfoWrapper::RemoteDmiServer_fields__protocol_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo RemoteDmiServer_fields__server = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_server", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RServerImpl::clazzInfo(),
  RemoteDmiServer_MetainfoWrapper::RemoteDmiServer_fields__server_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _RemoteDmiServer_fields[] = 
{
  &RemoteDmiServer_fields__isServer,
  &RemoteDmiServer_fields__protocol,
  &RemoteDmiServer_fields__server,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* RemoteDmiServer_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RemoteDmiServer_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RemoteDmiServer_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_i_GetClass", // alternative name of method
  -1, // altlabelHashCode
  RemoteDmiServer_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  RemoteDmiServer_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  RemoteDmiServer_MetainfoWrapper::RemoteDmiServer_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RemoteDmiServer_methods_RemoteDmiServer_INLRServerImpl_INLRProtocolImpl__LRRemoteDmiServer__arg_server = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "server", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RServerImpl::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RemoteDmiServer_methods_RemoteDmiServer_INLRServerImpl_INLRProtocolImpl__LRRemoteDmiServer__arg_protocol = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "protocol", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProtocolImpl::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RemoteDmiServer_methods_RemoteDmiServer_INLRServerImpl_INLRProtocolImpl__LRRemoteDmiServer__args[] = 
{
  &RemoteDmiServer_methods_RemoteDmiServer_INLRServerImpl_INLRProtocolImpl__LRRemoteDmiServer__arg_server,
  &RemoteDmiServer_methods_RemoteDmiServer_INLRServerImpl_INLRProtocolImpl__LRRemoteDmiServer__arg_protocol,
  0
};

::acdk::lang::dmi::ClazzInfo* RemoteDmiServer_methods_RemoteDmiServer_INLRServerImpl_INLRProtocolImpl__LRRemoteDmiServer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RemoteDmiServer_method_RemoteDmiServer_INLRServerImpl_INLRProtocolImpl__LRRemoteDmiServer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "RemoteDmiServer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RemoteDmiServer::clazzInfo(), // return type
  "_0_RemoteDmiServer", // alternative name of method
  -1, // altlabelHashCode
  RemoteDmiServer_methods_RemoteDmiServer_INLRServerImpl_INLRProtocolImpl__LRRemoteDmiServer__args, // the arguments
  0, //arguments count
  RemoteDmiServer_methods_RemoteDmiServer_INLRServerImpl_INLRProtocolImpl__LRRemoteDmiServer__exceptions, // the declared exceptions
  RemoteDmiServer_MetainfoWrapper::RemoteDmiServer_method_RemoteDmiServer_INLRServerImpl_INLRProtocolImpl__LRRemoteDmiServer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RemoteDmiServer_methods_createRemote_INLRString_INLacdk_lang_dmi_RDmiObjectArray__LRObject__arg_remoteClass = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "remoteClass", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RemoteDmiServer_methods_createRemote_INLRString_INLacdk_lang_dmi_RDmiObjectArray__LRObject__arg_rest = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rest", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::dmi::RDmiObjectArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RemoteDmiServer_methods_createRemote_INLRString_INLacdk_lang_dmi_RDmiObjectArray__LRObject__args[] = 
{
  &RemoteDmiServer_methods_createRemote_INLRString_INLacdk_lang_dmi_RDmiObjectArray__LRObject__arg_remoteClass,
  &RemoteDmiServer_methods_createRemote_INLRString_INLacdk_lang_dmi_RDmiObjectArray__LRObject__arg_rest,
  0
};

::acdk::lang::dmi::ClazzInfo* RemoteDmiServer_methods_createRemote_INLRString_INLacdk_lang_dmi_RDmiObjectArray__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RemoteDmiServer_method_createRemote_INLRString_INLacdk_lang_dmi_RDmiObjectArray__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createRemote", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_5_createRemote", // alternative name of method
  -1, // altlabelHashCode
  RemoteDmiServer_methods_createRemote_INLRString_INLacdk_lang_dmi_RDmiObjectArray__LRObject__args, // the arguments
  0, //arguments count
  RemoteDmiServer_methods_createRemote_INLRString_INLacdk_lang_dmi_RDmiObjectArray__LRObject__exceptions, // the declared exceptions
  RemoteDmiServer_MetainfoWrapper::RemoteDmiServer_method_createRemote_INLRString_INLacdk_lang_dmi_RDmiObjectArray__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RemoteDmiServer_methods_createRemoteAs_INLRString_INLRString_INLacdk_lang_dmi_RDmiObjectArray__LRObject__arg_remoteClass = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "remoteClass", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RemoteDmiServer_methods_createRemoteAs_INLRString_INLRString_INLacdk_lang_dmi_RDmiObjectArray__LRObject__arg_localInterface = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "localInterface", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RemoteDmiServer_methods_createRemoteAs_INLRString_INLRString_INLacdk_lang_dmi_RDmiObjectArray__LRObject__arg_rest = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rest", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::dmi::RDmiObjectArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RemoteDmiServer_methods_createRemoteAs_INLRString_INLRString_INLacdk_lang_dmi_RDmiObjectArray__LRObject__args[] = 
{
  &RemoteDmiServer_methods_createRemoteAs_INLRString_INLRString_INLacdk_lang_dmi_RDmiObjectArray__LRObject__arg_remoteClass,
  &RemoteDmiServer_methods_createRemoteAs_INLRString_INLRString_INLacdk_lang_dmi_RDmiObjectArray__LRObject__arg_localInterface,
  &RemoteDmiServer_methods_createRemoteAs_INLRString_INLRString_INLacdk_lang_dmi_RDmiObjectArray__LRObject__arg_rest,
  0
};

::acdk::lang::dmi::ClazzInfo* RemoteDmiServer_methods_createRemoteAs_INLRString_INLRString_INLacdk_lang_dmi_RDmiObjectArray__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RemoteDmiServer_method_createRemoteAs_INLRString_INLRString_INLacdk_lang_dmi_RDmiObjectArray__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createRemoteAs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_6_createRemoteAs", // alternative name of method
  -1, // altlabelHashCode
  RemoteDmiServer_methods_createRemoteAs_INLRString_INLRString_INLacdk_lang_dmi_RDmiObjectArray__LRObject__args, // the arguments
  0, //arguments count
  RemoteDmiServer_methods_createRemoteAs_INLRString_INLRString_INLacdk_lang_dmi_RDmiObjectArray__LRObject__exceptions, // the declared exceptions
  RemoteDmiServer_MetainfoWrapper::RemoteDmiServer_method_createRemoteAs_INLRString_INLRString_INLacdk_lang_dmi_RDmiObjectArray__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RemoteDmiServer_methods_invokeStaticRemote_INLRString_INLRString_INLacdk_lang_dmi_RDmiObjectArray__Lacdk_lang_dmi_RDmiObject__arg_className = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "className", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RemoteDmiServer_methods_invokeStaticRemote_INLRString_INLRString_INLacdk_lang_dmi_RDmiObjectArray__Lacdk_lang_dmi_RDmiObject__arg_methodName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "methodName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RemoteDmiServer_methods_invokeStaticRemote_INLRString_INLRString_INLacdk_lang_dmi_RDmiObjectArray__Lacdk_lang_dmi_RDmiObject__arg_rest = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rest", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::dmi::RDmiObjectArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RemoteDmiServer_methods_invokeStaticRemote_INLRString_INLRString_INLacdk_lang_dmi_RDmiObjectArray__Lacdk_lang_dmi_RDmiObject__args[] = 
{
  &RemoteDmiServer_methods_invokeStaticRemote_INLRString_INLRString_INLacdk_lang_dmi_RDmiObjectArray__Lacdk_lang_dmi_RDmiObject__arg_className,
  &RemoteDmiServer_methods_invokeStaticRemote_INLRString_INLRString_INLacdk_lang_dmi_RDmiObjectArray__Lacdk_lang_dmi_RDmiObject__arg_methodName,
  &RemoteDmiServer_methods_invokeStaticRemote_INLRString_INLRString_INLacdk_lang_dmi_RDmiObjectArray__Lacdk_lang_dmi_RDmiObject__arg_rest,
  0
};

::acdk::lang::dmi::ClazzInfo* RemoteDmiServer_methods_invokeStaticRemote_INLRString_INLRString_INLacdk_lang_dmi_RDmiObjectArray__Lacdk_lang_dmi_RDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RemoteDmiServer_method_invokeStaticRemote_INLRString_INLRString_INLacdk_lang_dmi_RDmiObjectArray__Lacdk_lang_dmi_RDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "invokeStaticRemote", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::dmi::RDmiObject::clazzInfo(), // return type
  "_7_invokeStaticRemote", // alternative name of method
  -1, // altlabelHashCode
  RemoteDmiServer_methods_invokeStaticRemote_INLRString_INLRString_INLacdk_lang_dmi_RDmiObjectArray__Lacdk_lang_dmi_RDmiObject__args, // the arguments
  0, //arguments count
  RemoteDmiServer_methods_invokeStaticRemote_INLRString_INLRString_INLacdk_lang_dmi_RDmiObjectArray__Lacdk_lang_dmi_RDmiObject__exceptions, // the declared exceptions
  RemoteDmiServer_MetainfoWrapper::RemoteDmiServer_method_invokeStaticRemote_INLRString_INLRString_INLacdk_lang_dmi_RDmiObjectArray__Lacdk_lang_dmi_RDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RemoteDmiServer_methods_invokeStaticRemoteAs_INLRString_INLRString_INLRString_IINLacdk_lang_dmi_RDmiObjectArray__Lacdk_lang_dmi_RDmiObject__arg_className = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "className", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RemoteDmiServer_methods_invokeStaticRemoteAs_INLRString_INLRString_INLRString_IINLacdk_lang_dmi_RDmiObjectArray__Lacdk_lang_dmi_RDmiObject__arg_methodName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "methodName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RemoteDmiServer_methods_invokeStaticRemoteAs_INLRString_INLRString_INLRString_IINLacdk_lang_dmi_RDmiObjectArray__Lacdk_lang_dmi_RDmiObject__arg_returnAsType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "returnAsType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RemoteDmiServer_methods_invokeStaticRemoteAs_INLRString_INLRString_INLRString_IINLacdk_lang_dmi_RDmiObjectArray__Lacdk_lang_dmi_RDmiObject__arg_returnTypeFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "returnTypeFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RemoteDmiServer_methods_invokeStaticRemoteAs_INLRString_INLRString_INLRString_IINLacdk_lang_dmi_RDmiObjectArray__Lacdk_lang_dmi_RDmiObject__arg_rest = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rest", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::dmi::RDmiObjectArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RemoteDmiServer_methods_invokeStaticRemoteAs_INLRString_INLRString_INLRString_IINLacdk_lang_dmi_RDmiObjectArray__Lacdk_lang_dmi_RDmiObject__args[] = 
{
  &RemoteDmiServer_methods_invokeStaticRemoteAs_INLRString_INLRString_INLRString_IINLacdk_lang_dmi_RDmiObjectArray__Lacdk_lang_dmi_RDmiObject__arg_className,
  &RemoteDmiServer_methods_invokeStaticRemoteAs_INLRString_INLRString_INLRString_IINLacdk_lang_dmi_RDmiObjectArray__Lacdk_lang_dmi_RDmiObject__arg_methodName,
  &RemoteDmiServer_methods_invokeStaticRemoteAs_INLRString_INLRString_INLRString_IINLacdk_lang_dmi_RDmiObjectArray__Lacdk_lang_dmi_RDmiObject__arg_returnAsType,
  &RemoteDmiServer_methods_invokeStaticRemoteAs_INLRString_INLRString_INLRString_IINLacdk_lang_dmi_RDmiObjectArray__Lacdk_lang_dmi_RDmiObject__arg_returnTypeFlags,
  &RemoteDmiServer_methods_invokeStaticRemoteAs_INLRString_INLRString_INLRString_IINLacdk_lang_dmi_RDmiObjectArray__Lacdk_lang_dmi_RDmiObject__arg_rest,
  0
};

::acdk::lang::dmi::ClazzInfo* RemoteDmiServer_methods_invokeStaticRemoteAs_INLRString_INLRString_INLRString_IINLacdk_lang_dmi_RDmiObjectArray__Lacdk_lang_dmi_RDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RemoteDmiServer_method_invokeStaticRemoteAs_INLRString_INLRString_INLRString_IINLacdk_lang_dmi_RDmiObjectArray__Lacdk_lang_dmi_RDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "invokeStaticRemoteAs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::dmi::RDmiObject::clazzInfo(), // return type
  "_8_invokeStaticRemoteAs", // alternative name of method
  -1, // altlabelHashCode
  RemoteDmiServer_methods_invokeStaticRemoteAs_INLRString_INLRString_INLRString_IINLacdk_lang_dmi_RDmiObjectArray__Lacdk_lang_dmi_RDmiObject__args, // the arguments
  0, //arguments count
  RemoteDmiServer_methods_invokeStaticRemoteAs_INLRString_INLRString_INLRString_IINLacdk_lang_dmi_RDmiObjectArray__Lacdk_lang_dmi_RDmiObject__exceptions, // the declared exceptions
  RemoteDmiServer_MetainfoWrapper::RemoteDmiServer_method_invokeStaticRemoteAs_INLRString_INLRString_INLRString_IINLacdk_lang_dmi_RDmiObjectArray__Lacdk_lang_dmi_RDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RemoteDmiServer_methods_peekStaticRemote_INLRString_INLRString_INLRString_I_Lacdk_lang_dmi_RDmiObject__arg_className = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "className", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RemoteDmiServer_methods_peekStaticRemote_INLRString_INLRString_INLRString_I_Lacdk_lang_dmi_RDmiObject__arg_memberName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "memberName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RemoteDmiServer_methods_peekStaticRemote_INLRString_INLRString_INLRString_I_Lacdk_lang_dmi_RDmiObject__arg_interfaceName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "interfaceName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RemoteDmiServer_methods_peekStaticRemote_INLRString_INLRString_INLRString_I_Lacdk_lang_dmi_RDmiObject__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RemoteDmiServer_methods_peekStaticRemote_INLRString_INLRString_INLRString_I_Lacdk_lang_dmi_RDmiObject__args[] = 
{
  &RemoteDmiServer_methods_peekStaticRemote_INLRString_INLRString_INLRString_I_Lacdk_lang_dmi_RDmiObject__arg_className,
  &RemoteDmiServer_methods_peekStaticRemote_INLRString_INLRString_INLRString_I_Lacdk_lang_dmi_RDmiObject__arg_memberName,
  &RemoteDmiServer_methods_peekStaticRemote_INLRString_INLRString_INLRString_I_Lacdk_lang_dmi_RDmiObject__arg_interfaceName,
  &RemoteDmiServer_methods_peekStaticRemote_INLRString_INLRString_INLRString_I_Lacdk_lang_dmi_RDmiObject__arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* RemoteDmiServer_methods_peekStaticRemote_INLRString_INLRString_INLRString_I_Lacdk_lang_dmi_RDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RemoteDmiServer_method_peekStaticRemote_INLRString_INLRString_INLRString_I_Lacdk_lang_dmi_RDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "peekStaticRemote", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::dmi::RDmiObject::clazzInfo(), // return type
  "_c_peekStaticRemote", // alternative name of method
  -1, // altlabelHashCode
  RemoteDmiServer_methods_peekStaticRemote_INLRString_INLRString_INLRString_I_Lacdk_lang_dmi_RDmiObject__args, // the arguments
  0, //arguments count
  RemoteDmiServer_methods_peekStaticRemote_INLRString_INLRString_INLRString_I_Lacdk_lang_dmi_RDmiObject__exceptions, // the declared exceptions
  RemoteDmiServer_MetainfoWrapper::RemoteDmiServer_method_peekStaticRemote_INLRString_INLRString_INLRString_I_Lacdk_lang_dmi_RDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RemoteDmiServer_methods_peekStaticRemote_INLRString_INLRString__Lacdk_lang_dmi_RDmiObject__arg_className = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "className", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RemoteDmiServer_methods_peekStaticRemote_INLRString_INLRString__Lacdk_lang_dmi_RDmiObject__arg_memberName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "memberName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RemoteDmiServer_methods_peekStaticRemote_INLRString_INLRString__Lacdk_lang_dmi_RDmiObject__args[] = 
{
  &RemoteDmiServer_methods_peekStaticRemote_INLRString_INLRString__Lacdk_lang_dmi_RDmiObject__arg_className,
  &RemoteDmiServer_methods_peekStaticRemote_INLRString_INLRString__Lacdk_lang_dmi_RDmiObject__arg_memberName,
  0
};

::acdk::lang::dmi::ClazzInfo* RemoteDmiServer_methods_peekStaticRemote_INLRString_INLRString__Lacdk_lang_dmi_RDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RemoteDmiServer_method_peekStaticRemote_INLRString_INLRString__Lacdk_lang_dmi_RDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "peekStaticRemote", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::dmi::RDmiObject::clazzInfo(), // return type
  "_d_peekStaticRemote", // alternative name of method
  -1, // altlabelHashCode
  RemoteDmiServer_methods_peekStaticRemote_INLRString_INLRString__Lacdk_lang_dmi_RDmiObject__args, // the arguments
  0, //arguments count
  RemoteDmiServer_methods_peekStaticRemote_INLRString_INLRString__Lacdk_lang_dmi_RDmiObject__exceptions, // the declared exceptions
  RemoteDmiServer_MetainfoWrapper::RemoteDmiServer_method_peekStaticRemote_INLRString_INLRString__Lacdk_lang_dmi_RDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RemoteDmiServer_methods_peekStaticRemote_INLRString_INLRString_INLRString__Lacdk_lang_dmi_RDmiObject__arg_className = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "className", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RemoteDmiServer_methods_peekStaticRemote_INLRString_INLRString_INLRString__Lacdk_lang_dmi_RDmiObject__arg_memberName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "memberName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RemoteDmiServer_methods_peekStaticRemote_INLRString_INLRString_INLRString__Lacdk_lang_dmi_RDmiObject__arg_interfaceName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "interfaceName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RemoteDmiServer_methods_peekStaticRemote_INLRString_INLRString_INLRString__Lacdk_lang_dmi_RDmiObject__args[] = 
{
  &RemoteDmiServer_methods_peekStaticRemote_INLRString_INLRString_INLRString__Lacdk_lang_dmi_RDmiObject__arg_className,
  &RemoteDmiServer_methods_peekStaticRemote_INLRString_INLRString_INLRString__Lacdk_lang_dmi_RDmiObject__arg_memberName,
  &RemoteDmiServer_methods_peekStaticRemote_INLRString_INLRString_INLRString__Lacdk_lang_dmi_RDmiObject__arg_interfaceName,
  0
};

::acdk::lang::dmi::ClazzInfo* RemoteDmiServer_methods_peekStaticRemote_INLRString_INLRString_INLRString__Lacdk_lang_dmi_RDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RemoteDmiServer_method_peekStaticRemote_INLRString_INLRString_INLRString__Lacdk_lang_dmi_RDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "peekStaticRemote", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::dmi::RDmiObject::clazzInfo(), // return type
  "_e_peekStaticRemote", // alternative name of method
  -1, // altlabelHashCode
  RemoteDmiServer_methods_peekStaticRemote_INLRString_INLRString_INLRString__Lacdk_lang_dmi_RDmiObject__args, // the arguments
  0, //arguments count
  RemoteDmiServer_methods_peekStaticRemote_INLRString_INLRString_INLRString__Lacdk_lang_dmi_RDmiObject__exceptions, // the declared exceptions
  RemoteDmiServer_MetainfoWrapper::RemoteDmiServer_method_peekStaticRemote_INLRString_INLRString_INLRString__Lacdk_lang_dmi_RDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RemoteDmiServer_methods_readWrite_INLRConnection_I_V_arg_con = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "con", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RConnection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RemoteDmiServer_methods_readWrite_INLRConnection_I_V_arg_initCmd = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "initCmd", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RemoteDmiServer_methods_readWrite_INLRConnection_I_V_args[] = 
{
  &RemoteDmiServer_methods_readWrite_INLRConnection_I_V_arg_con,
  &RemoteDmiServer_methods_readWrite_INLRConnection_I_V_arg_initCmd,
  0
};

::acdk::lang::dmi::ClazzInfo* RemoteDmiServer_methods_readWrite_INLRConnection_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RemoteDmiServer_method_readWrite_INLRConnection_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readWrite", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_readWrite", // alternative name of method
  -1, // altlabelHashCode
  RemoteDmiServer_methods_readWrite_INLRConnection_I_V_args, // the arguments
  0, //arguments count
  RemoteDmiServer_methods_readWrite_INLRConnection_I_V_exceptions, // the declared exceptions
  RemoteDmiServer_MetainfoWrapper::RemoteDmiServer_method_readWrite_INLRConnection_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RemoteDmiServer_methods_readWrite_INLRConnection__V_arg_con = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "con", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RConnection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RemoteDmiServer_methods_readWrite_INLRConnection__V_args[] = 
{
  &RemoteDmiServer_methods_readWrite_INLRConnection__V_arg_con,
  0
};

::acdk::lang::dmi::ClazzInfo* RemoteDmiServer_methods_readWrite_INLRConnection__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RemoteDmiServer_method_readWrite_INLRConnection__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "readWrite", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_h_readWrite", // alternative name of method
  -1, // altlabelHashCode
  RemoteDmiServer_methods_readWrite_INLRConnection__V_args, // the arguments
  0, //arguments count
  RemoteDmiServer_methods_readWrite_INLRConnection__V_exceptions, // the declared exceptions
  RemoteDmiServer_MetainfoWrapper::RemoteDmiServer_method_readWrite_INLRConnection__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* RemoteDmiServer_methods_run__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RemoteDmiServer_methods_run__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RemoteDmiServer_method_run__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "run", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_run", // alternative name of method
  -1, // altlabelHashCode
  RemoteDmiServer_methods_run__V_args, // the arguments
  0, //arguments count
  RemoteDmiServer_methods_run__V_exceptions, // the declared exceptions
  RemoteDmiServer_MetainfoWrapper::RemoteDmiServer_method_run__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* RemoteDmiServer_methods_shutdown__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RemoteDmiServer_methods_shutdown__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RemoteDmiServer_method_shutdown__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "shutdown", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_shutdown", // alternative name of method
  -1, // altlabelHashCode
  RemoteDmiServer_methods_shutdown__V_args, // the arguments
  0, //arguments count
  RemoteDmiServer_methods_shutdown__V_exceptions, // the declared exceptions
  RemoteDmiServer_MetainfoWrapper::RemoteDmiServer_method_shutdown__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* RemoteDmiServer_methods_shutdownRemote__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RemoteDmiServer_methods_shutdownRemote__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RemoteDmiServer_method_shutdownRemote__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "shutdownRemote", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_shutdownRemote", // alternative name of method
  -1, // altlabelHashCode
  RemoteDmiServer_methods_shutdownRemote__V_args, // the arguments
  0, //arguments count
  RemoteDmiServer_methods_shutdownRemote__V_exceptions, // the declared exceptions
  RemoteDmiServer_MetainfoWrapper::RemoteDmiServer_method_shutdownRemote__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* RemoteDmiServer_methods_startInBackground__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RemoteDmiServer_methods_startInBackground__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RemoteDmiServer_method_startInBackground__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "startInBackground", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_startInBackground", // alternative name of method
  -1, // altlabelHashCode
  RemoteDmiServer_methods_startInBackground__V_args, // the arguments
  0, //arguments count
  RemoteDmiServer_methods_startInBackground__V_exceptions, // the declared exceptions
  RemoteDmiServer_MetainfoWrapper::RemoteDmiServer_method_startInBackground__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* RemoteDmiServer_methods_startInFront__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RemoteDmiServer_methods_startInFront__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RemoteDmiServer_method_startInFront__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "startInFront", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_startInFront", // alternative name of method
  -1, // altlabelHashCode
  RemoteDmiServer_methods_startInFront__V_args, // the arguments
  0, //arguments count
  RemoteDmiServer_methods_startInFront__V_exceptions, // the declared exceptions
  RemoteDmiServer_MetainfoWrapper::RemoteDmiServer_method_startInFront__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _RemoteDmiServer_methods[] = 
{
  &RemoteDmiServer_method_GetClass__L_acdk_lang_RClass_,
  &RemoteDmiServer_method_RemoteDmiServer_INLRServerImpl_INLRProtocolImpl__LRRemoteDmiServer_,
  &RemoteDmiServer_method_createRemote_INLRString_INLacdk_lang_dmi_RDmiObjectArray__LRObject_,
  &RemoteDmiServer_method_createRemoteAs_INLRString_INLRString_INLacdk_lang_dmi_RDmiObjectArray__LRObject_,
  &RemoteDmiServer_method_invokeStaticRemote_INLRString_INLRString_INLacdk_lang_dmi_RDmiObjectArray__Lacdk_lang_dmi_RDmiObject_,
  &RemoteDmiServer_method_invokeStaticRemoteAs_INLRString_INLRString_INLRString_IINLacdk_lang_dmi_RDmiObjectArray__Lacdk_lang_dmi_RDmiObject_,
  &RemoteDmiServer_method_peekStaticRemote_INLRString_INLRString_INLRString_I_Lacdk_lang_dmi_RDmiObject_,
  &RemoteDmiServer_method_peekStaticRemote_INLRString_INLRString__Lacdk_lang_dmi_RDmiObject_,
  &RemoteDmiServer_method_peekStaticRemote_INLRString_INLRString_INLRString__Lacdk_lang_dmi_RDmiObject_,
  &RemoteDmiServer_method_readWrite_INLRConnection_I_V,
  &RemoteDmiServer_method_readWrite_INLRConnection__V,
  &RemoteDmiServer_method_run__V,
  &RemoteDmiServer_method_shutdown__V,
  &RemoteDmiServer_method_shutdownRemote__V,
  &RemoteDmiServer_method_startInBackground__V,
  &RemoteDmiServer_method_startInFront__V,
  0
};


struct RemoteDmiServer_MetaInfoInitializer
{  RemoteDmiServer_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = RemoteDmiServer::clazzInfo();
    ci->fields =  _RemoteDmiServer_fields;
    ci->methods =  _RemoteDmiServer_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
RemoteDmiServer_MetaInfoInitializer RemoteDmiServer_MetaInfoInitializer_staticinstance__;


struct RemoteDmiServer_clazzInfo_ClazzAttributesResInitializer3
{
  RemoteDmiServer_clazzInfo_ClazzAttributesResInitializer3()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&RemoteDmiServer_methods_readWrite_INLRConnection_I_V_arg_initCmd, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)InvokeCmdMetaInf::GetEnumInfo()));
  }
};

RemoteDmiServer_clazzInfo_ClazzAttributesResInitializer3 RemoteDmiServer_clazzInfo_ClazzAttributesResInitializer3_instance;



} // namespace acdkx
} // namespace rdmi


namespace acdkx { 
namespace rdmi { 


//static
::acdk::lang::RObject
ThreadedConnectionHandler_create_array(int length)
{
  return new ObjectArrayImpl<RThreadedConnectionHandler>(length);
}

//static
::acdk::lang::RObject
ThreadedConnectionHandler_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ThreadedConnectionHandler_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadedConnectionHandler_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ThreadedConnectionHandler::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadedConnectionHandler_method_ThreadedConnectionHandler_INLRRemoteDmiServer_INLRConnection__LRThreadedConnectionHandler__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ThreadedConnectionHandler((RRemoteDmiServer)args[0].getObjectVar(), (RConnection)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadedConnectionHandler_method_readFirstCmd__LInvokeCmd__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ThreadedConnectionHandler* This = dmi_cast<ThreadedConnectionHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = (InvokeCmd)This->ThreadedConnectionHandler::readFirstCmd();
    else
      ret = (InvokeCmd)This->readFirstCmd();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadedConnectionHandler_method_run__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ThreadedConnectionHandler* This = dmi_cast<ThreadedConnectionHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ThreadedConnectionHandler::run();
    else
        This->run();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ThreadedConnectionHandler_fields__connection_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ThreadedConnectionHandler* This = dmi_cast<ThreadedConnectionHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_connection, flags);
    else
      This->_connection = (RConnection)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ThreadedConnectionHandler_fields__initCmd_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ThreadedConnectionHandler* This = dmi_cast<ThreadedConnectionHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->_initCmd), flags);
    else
      This->_initCmd = (InvokeCmd)var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ThreadedConnectionHandler_fields__server_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ThreadedConnectionHandler* This = dmi_cast<ThreadedConnectionHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_server, flags);
    else
      This->_server = (RRemoteDmiServer)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ThreadedConnectionHandler_fields__connection = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_connection", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RConnection::clazzInfo(),
  ThreadedConnectionHandler_MetainfoWrapper::ThreadedConnectionHandler_fields__connection_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ThreadedConnectionHandler_fields__initCmd = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_initCmd", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ThreadedConnectionHandler_MetainfoWrapper::ThreadedConnectionHandler_fields__initCmd_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ThreadedConnectionHandler_fields__server = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_server", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRemoteDmiServer::clazzInfo(),
  ThreadedConnectionHandler_MetainfoWrapper::ThreadedConnectionHandler_fields__server_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ThreadedConnectionHandler_fields[] = 
{
  &ThreadedConnectionHandler_fields__connection,
  &ThreadedConnectionHandler_fields__initCmd,
  &ThreadedConnectionHandler_fields__server,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadedConnectionHandler_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadedConnectionHandler_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadedConnectionHandler_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ThreadedConnectionHandler_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ThreadedConnectionHandler_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ThreadedConnectionHandler_MetainfoWrapper::ThreadedConnectionHandler_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ThreadedConnectionHandler_methods_ThreadedConnectionHandler_INLRRemoteDmiServer_INLRConnection__LRThreadedConnectionHandler__arg_server = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "server", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRemoteDmiServer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ThreadedConnectionHandler_methods_ThreadedConnectionHandler_INLRRemoteDmiServer_INLRConnection__LRThreadedConnectionHandler__arg_con = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "con", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RConnection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadedConnectionHandler_methods_ThreadedConnectionHandler_INLRRemoteDmiServer_INLRConnection__LRThreadedConnectionHandler__args[] = 
{
  &ThreadedConnectionHandler_methods_ThreadedConnectionHandler_INLRRemoteDmiServer_INLRConnection__LRThreadedConnectionHandler__arg_server,
  &ThreadedConnectionHandler_methods_ThreadedConnectionHandler_INLRRemoteDmiServer_INLRConnection__LRThreadedConnectionHandler__arg_con,
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadedConnectionHandler_methods_ThreadedConnectionHandler_INLRRemoteDmiServer_INLRConnection__LRThreadedConnectionHandler__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadedConnectionHandler_method_ThreadedConnectionHandler_INLRRemoteDmiServer_INLRConnection__LRThreadedConnectionHandler_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ThreadedConnectionHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ThreadedConnectionHandler::clazzInfo(), // return type
  "_0_ThreadedConnectionHandler", // alternative name of method
  -1, // altlabelHashCode
  ThreadedConnectionHandler_methods_ThreadedConnectionHandler_INLRRemoteDmiServer_INLRConnection__LRThreadedConnectionHandler__args, // the arguments
  0, //arguments count
  ThreadedConnectionHandler_methods_ThreadedConnectionHandler_INLRRemoteDmiServer_INLRConnection__LRThreadedConnectionHandler__exceptions, // the declared exceptions
  ThreadedConnectionHandler_MetainfoWrapper::ThreadedConnectionHandler_method_ThreadedConnectionHandler_INLRRemoteDmiServer_INLRConnection__LRThreadedConnectionHandler__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadedConnectionHandler_methods_readFirstCmd__LInvokeCmd__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadedConnectionHandler_methods_readFirstCmd__LInvokeCmd__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadedConnectionHandler_method_readFirstCmd__LInvokeCmd_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readFirstCmd", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1_readFirstCmd", // alternative name of method
  -1, // altlabelHashCode
  ThreadedConnectionHandler_methods_readFirstCmd__LInvokeCmd__args, // the arguments
  0, //arguments count
  ThreadedConnectionHandler_methods_readFirstCmd__LInvokeCmd__exceptions, // the declared exceptions
  ThreadedConnectionHandler_MetainfoWrapper::ThreadedConnectionHandler_method_readFirstCmd__LInvokeCmd__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadedConnectionHandler_methods_run__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadedConnectionHandler_methods_run__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadedConnectionHandler_method_run__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "run", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_run", // alternative name of method
  -1, // altlabelHashCode
  ThreadedConnectionHandler_methods_run__V_args, // the arguments
  0, //arguments count
  ThreadedConnectionHandler_methods_run__V_exceptions, // the declared exceptions
  ThreadedConnectionHandler_MetainfoWrapper::ThreadedConnectionHandler_method_run__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ThreadedConnectionHandler_methods[] = 
{
  &ThreadedConnectionHandler_method_GetClass__L_acdk_lang_RClass_,
  &ThreadedConnectionHandler_method_ThreadedConnectionHandler_INLRRemoteDmiServer_INLRConnection__LRThreadedConnectionHandler_,
  &ThreadedConnectionHandler_method_readFirstCmd__LInvokeCmd_,
  &ThreadedConnectionHandler_method_run__V,
  0
};


struct ThreadedConnectionHandler_MetaInfoInitializer
{  ThreadedConnectionHandler_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ThreadedConnectionHandler::clazzInfo();
    ci->fields =  _ThreadedConnectionHandler_fields;
    ci->methods =  _ThreadedConnectionHandler_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ThreadedConnectionHandler_MetaInfoInitializer ThreadedConnectionHandler_MetaInfoInitializer_staticinstance__;


struct ThreadedConnectionHandler_clazzInfo_ClazzAttributesResInitializer4
{
  ThreadedConnectionHandler_clazzInfo_ClazzAttributesResInitializer4()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&ThreadedConnectionHandler_method_readFirstCmd__LInvokeCmd_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)InvokeCmdMetaInf::GetEnumInfo()));
  }
};

ThreadedConnectionHandler_clazzInfo_ClazzAttributesResInitializer4 ThreadedConnectionHandler_clazzInfo_ClazzAttributesResInitializer4_instance;



} // namespace acdkx
} // namespace rdmi


namespace acdkx { 
namespace rdmi { 


//static
::acdk::lang::RObject
ServerImpl_create_array(int length)
{
  return new ObjectArrayImpl<RServerImpl>(length);
}

//static
::acdk::lang::RObject
ServerImpl_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ServerImpl_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerImpl_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ServerImpl::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerImpl_method_accept__LRConnection__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerImpl* This = dmi_cast<ServerImpl>(This_);
    ret = (::acdk::lang::RObject)This->accept();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerImpl_method_allowThreading__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerImpl* This = dmi_cast<ServerImpl>(This_);
  ret = This->allowThreading();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerImpl_method_getClientConnection__LRConnection__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerImpl* This = dmi_cast<ServerImpl>(This_);
    ret = (::acdk::lang::RObject)This->getClientConnection();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerImpl_method_getLocalServerConnection__LRConnection__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerImpl* This = dmi_cast<ServerImpl>(This_);
    ret = (::acdk::lang::RObject)This->getLocalServerConnection();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerImpl_method_getLocalServerId__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerImpl* This = dmi_cast<ServerImpl>(This_);
    ret = (::acdk::lang::RObject)This->getLocalServerId();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerImpl_method_shutdown__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerImpl* This = dmi_cast<ServerImpl>(This_);
    This->shutdown();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ServerImpl_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerImpl_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ServerImpl_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerImpl_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ServerImpl_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ServerImpl_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ServerImpl_MetainfoWrapper::ServerImpl_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerImpl_methods_accept__LRConnection__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ServerImpl_methods_accept__LRConnection__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerImpl_method_accept__LRConnection_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "accept", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RConnection::clazzInfo(), // return type
  "_3_accept", // alternative name of method
  -1, // altlabelHashCode
  ServerImpl_methods_accept__LRConnection__args, // the arguments
  0, //arguments count
  ServerImpl_methods_accept__LRConnection__exceptions, // the declared exceptions
  ServerImpl_MetainfoWrapper::ServerImpl_method_accept__LRConnection__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerImpl_methods_allowThreading__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ServerImpl_methods_allowThreading__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerImpl_method_allowThreading__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "allowThreading", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_allowThreading", // alternative name of method
  -1, // altlabelHashCode
  ServerImpl_methods_allowThreading__Z_args, // the arguments
  0, //arguments count
  ServerImpl_methods_allowThreading__Z_exceptions, // the declared exceptions
  ServerImpl_MetainfoWrapper::ServerImpl_method_allowThreading__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerImpl_methods_getClientConnection__LRConnection__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ServerImpl_methods_getClientConnection__LRConnection__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerImpl_method_getClientConnection__LRConnection_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getClientConnection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RConnection::clazzInfo(), // return type
  "_1_getClientConnection", // alternative name of method
  -1, // altlabelHashCode
  ServerImpl_methods_getClientConnection__LRConnection__args, // the arguments
  0, //arguments count
  ServerImpl_methods_getClientConnection__LRConnection__exceptions, // the declared exceptions
  ServerImpl_MetainfoWrapper::ServerImpl_method_getClientConnection__LRConnection__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerImpl_methods_getLocalServerConnection__LRConnection__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ServerImpl_methods_getLocalServerConnection__LRConnection__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerImpl_method_getLocalServerConnection__LRConnection_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLocalServerConnection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RConnection::clazzInfo(), // return type
  "_2_getLocalServerConnection", // alternative name of method
  -1, // altlabelHashCode
  ServerImpl_methods_getLocalServerConnection__LRConnection__args, // the arguments
  0, //arguments count
  ServerImpl_methods_getLocalServerConnection__LRConnection__exceptions, // the declared exceptions
  ServerImpl_MetainfoWrapper::ServerImpl_method_getLocalServerConnection__LRConnection__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerImpl_methods_getLocalServerId__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ServerImpl_methods_getLocalServerId__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerImpl_method_getLocalServerId__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLocalServerId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_0_getLocalServerId", // alternative name of method
  -1, // altlabelHashCode
  ServerImpl_methods_getLocalServerId__LRString__args, // the arguments
  0, //arguments count
  ServerImpl_methods_getLocalServerId__LRString__exceptions, // the declared exceptions
  ServerImpl_MetainfoWrapper::ServerImpl_method_getLocalServerId__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerImpl_methods_shutdown__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ServerImpl_methods_shutdown__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerImpl_method_shutdown__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "shutdown", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_shutdown", // alternative name of method
  -1, // altlabelHashCode
  ServerImpl_methods_shutdown__V_args, // the arguments
  0, //arguments count
  ServerImpl_methods_shutdown__V_exceptions, // the declared exceptions
  ServerImpl_MetainfoWrapper::ServerImpl_method_shutdown__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ServerImpl_methods[] = 
{
  &ServerImpl_method_GetClass__L_acdk_lang_RClass_,
  &ServerImpl_method_accept__LRConnection_,
  &ServerImpl_method_allowThreading__Z,
  &ServerImpl_method_getClientConnection__LRConnection_,
  &ServerImpl_method_getLocalServerConnection__LRConnection_,
  &ServerImpl_method_getLocalServerId__LRString_,
  &ServerImpl_method_shutdown__V,
  0
};


struct ServerImpl_MetaInfoInitializer
{  ServerImpl_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ServerImpl::clazzInfo();
    ci->fields =  _ServerImpl_fields;
    ci->methods =  _ServerImpl_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ServerImpl_MetaInfoInitializer ServerImpl_MetaInfoInitializer_staticinstance__;


} // namespace acdkx
} // namespace rdmi


namespace acdkx { 
namespace rdmi { 


//static
::acdk::lang::RObject
TcpServerConnection_create_array(int length)
{
  return new ObjectArrayImpl<RTcpServerConnection>(length);
}

//static
::acdk::lang::RObject
TcpServerConnection_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TcpServerConnection_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TcpServerConnection_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TcpServerConnection::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TcpServerConnection_method_TcpServerConnection_INLacdk_net_RSocket__LRTcpServerConnection__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TcpServerConnection((acdk::net::RSocket)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TcpServerConnection_method_close__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TcpServerConnection* This = dmi_cast<TcpServerConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TcpServerConnection::close();
    else
        This->close();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TcpServerConnection_method_dataAvailable__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TcpServerConnection* This = dmi_cast<TcpServerConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TcpServerConnection::dataAvailable();
    else
      ret = This->dataAvailable();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TcpServerConnection_method_endReadMessage__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TcpServerConnection* This = dmi_cast<TcpServerConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TcpServerConnection::endReadMessage();
    else
        This->endReadMessage();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TcpServerConnection_method_endWriteMessage__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TcpServerConnection* This = dmi_cast<TcpServerConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TcpServerConnection::endWriteMessage();
    else
        This->endWriteMessage();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TcpServerConnection_method_getLocalServerId__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TcpServerConnection* This = dmi_cast<TcpServerConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TcpServerConnection::getLocalServerId();
    else
        ret = (::acdk::lang::RObject)This->getLocalServerId();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TcpServerConnection_method_getReader__Lacdk_io_RReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TcpServerConnection* This = dmi_cast<TcpServerConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TcpServerConnection::getReader();
    else
        ret = (::acdk::lang::RObject)This->getReader();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TcpServerConnection_method_getRemoteServerId__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TcpServerConnection* This = dmi_cast<TcpServerConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TcpServerConnection::getRemoteServerId();
    else
        ret = (::acdk::lang::RObject)This->getRemoteServerId();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TcpServerConnection_method_getWriter__Lacdk_io_RWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TcpServerConnection* This = dmi_cast<TcpServerConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TcpServerConnection::getWriter();
    else
        ret = (::acdk::lang::RObject)This->getWriter();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TcpServerConnection_method_isClosed__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TcpServerConnection* This = dmi_cast<TcpServerConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TcpServerConnection::isClosed();
    else
      ret = This->isClosed();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TcpServerConnection_method_startReadMessage__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TcpServerConnection* This = dmi_cast<TcpServerConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TcpServerConnection::startReadMessage();
    else
        This->startReadMessage();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TcpServerConnection_method_startWriteMessage__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TcpServerConnection* This = dmi_cast<TcpServerConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TcpServerConnection::startWriteMessage();
    else
        This->startWriteMessage();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TcpServerConnection_fields__socket_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TcpServerConnection* This = dmi_cast<TcpServerConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_socket, flags);
    else
      This->_socket = (acdk::net::RSocket)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo TcpServerConnection_fields__socket = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_socket", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::net::RSocket::clazzInfo(),
  TcpServerConnection_MetainfoWrapper::TcpServerConnection_fields__socket_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _TcpServerConnection_fields[] = 
{
  &TcpServerConnection_fields__socket,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TcpServerConnection_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TcpServerConnection_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TcpServerConnection_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_c_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TcpServerConnection_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TcpServerConnection_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TcpServerConnection_MetainfoWrapper::TcpServerConnection_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TcpServerConnection_methods_TcpServerConnection_INLacdk_net_RSocket__LRTcpServerConnection__arg_socket = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "socket", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::net::RSocket::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TcpServerConnection_methods_TcpServerConnection_INLacdk_net_RSocket__LRTcpServerConnection__args[] = 
{
  &TcpServerConnection_methods_TcpServerConnection_INLacdk_net_RSocket__LRTcpServerConnection__arg_socket,
  0
};

::acdk::lang::dmi::ClazzInfo* TcpServerConnection_methods_TcpServerConnection_INLacdk_net_RSocket__LRTcpServerConnection__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TcpServerConnection_method_TcpServerConnection_INLacdk_net_RSocket__LRTcpServerConnection_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TcpServerConnection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TcpServerConnection::clazzInfo(), // return type
  "_0_TcpServerConnection", // alternative name of method
  -1, // altlabelHashCode
  TcpServerConnection_methods_TcpServerConnection_INLacdk_net_RSocket__LRTcpServerConnection__args, // the arguments
  0, //arguments count
  TcpServerConnection_methods_TcpServerConnection_INLacdk_net_RSocket__LRTcpServerConnection__exceptions, // the declared exceptions
  TcpServerConnection_MetainfoWrapper::TcpServerConnection_method_TcpServerConnection_INLacdk_net_RSocket__LRTcpServerConnection__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TcpServerConnection_methods_close__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TcpServerConnection_methods_close__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TcpServerConnection_method_close__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "close", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_close", // alternative name of method
  -1, // altlabelHashCode
  TcpServerConnection_methods_close__V_args, // the arguments
  0, //arguments count
  TcpServerConnection_methods_close__V_exceptions, // the declared exceptions
  TcpServerConnection_MetainfoWrapper::TcpServerConnection_method_close__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TcpServerConnection_methods_dataAvailable__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TcpServerConnection_methods_dataAvailable__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TcpServerConnection_method_dataAvailable__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "dataAvailable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_b_dataAvailable", // alternative name of method
  -1, // altlabelHashCode
  TcpServerConnection_methods_dataAvailable__Z_args, // the arguments
  0, //arguments count
  TcpServerConnection_methods_dataAvailable__Z_exceptions, // the declared exceptions
  TcpServerConnection_MetainfoWrapper::TcpServerConnection_method_dataAvailable__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TcpServerConnection_methods_endReadMessage__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TcpServerConnection_methods_endReadMessage__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TcpServerConnection_method_endReadMessage__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "endReadMessage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_endReadMessage", // alternative name of method
  -1, // altlabelHashCode
  TcpServerConnection_methods_endReadMessage__V_args, // the arguments
  0, //arguments count
  TcpServerConnection_methods_endReadMessage__V_exceptions, // the declared exceptions
  TcpServerConnection_MetainfoWrapper::TcpServerConnection_method_endReadMessage__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TcpServerConnection_methods_endWriteMessage__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TcpServerConnection_methods_endWriteMessage__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TcpServerConnection_method_endWriteMessage__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "endWriteMessage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_endWriteMessage", // alternative name of method
  -1, // altlabelHashCode
  TcpServerConnection_methods_endWriteMessage__V_args, // the arguments
  0, //arguments count
  TcpServerConnection_methods_endWriteMessage__V_exceptions, // the declared exceptions
  TcpServerConnection_MetainfoWrapper::TcpServerConnection_method_endWriteMessage__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TcpServerConnection_methods_getLocalServerId__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TcpServerConnection_methods_getLocalServerId__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TcpServerConnection_method_getLocalServerId__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLocalServerId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_getLocalServerId", // alternative name of method
  -1, // altlabelHashCode
  TcpServerConnection_methods_getLocalServerId__LRString__args, // the arguments
  0, //arguments count
  TcpServerConnection_methods_getLocalServerId__LRString__exceptions, // the declared exceptions
  TcpServerConnection_MetainfoWrapper::TcpServerConnection_method_getLocalServerId__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TcpServerConnection_methods_getReader__Lacdk_io_RReader__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TcpServerConnection_methods_getReader__Lacdk_io_RReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TcpServerConnection_method_getReader__Lacdk_io_RReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo(), // return type
  "_3_getReader", // alternative name of method
  -1, // altlabelHashCode
  TcpServerConnection_methods_getReader__Lacdk_io_RReader__args, // the arguments
  0, //arguments count
  TcpServerConnection_methods_getReader__Lacdk_io_RReader__exceptions, // the declared exceptions
  TcpServerConnection_MetainfoWrapper::TcpServerConnection_method_getReader__Lacdk_io_RReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TcpServerConnection_methods_getRemoteServerId__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TcpServerConnection_methods_getRemoteServerId__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TcpServerConnection_method_getRemoteServerId__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRemoteServerId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_getRemoteServerId", // alternative name of method
  -1, // altlabelHashCode
  TcpServerConnection_methods_getRemoteServerId__LRString__args, // the arguments
  0, //arguments count
  TcpServerConnection_methods_getRemoteServerId__LRString__exceptions, // the declared exceptions
  TcpServerConnection_MetainfoWrapper::TcpServerConnection_method_getRemoteServerId__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TcpServerConnection_methods_getWriter__Lacdk_io_RWriter__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TcpServerConnection_methods_getWriter__Lacdk_io_RWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TcpServerConnection_method_getWriter__Lacdk_io_RWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RWriter::clazzInfo(), // return type
  "_4_getWriter", // alternative name of method
  -1, // altlabelHashCode
  TcpServerConnection_methods_getWriter__Lacdk_io_RWriter__args, // the arguments
  0, //arguments count
  TcpServerConnection_methods_getWriter__Lacdk_io_RWriter__exceptions, // the declared exceptions
  TcpServerConnection_MetainfoWrapper::TcpServerConnection_method_getWriter__Lacdk_io_RWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TcpServerConnection_methods_isClosed__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TcpServerConnection_methods_isClosed__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TcpServerConnection_method_isClosed__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isClosed", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_a_isClosed", // alternative name of method
  -1, // altlabelHashCode
  TcpServerConnection_methods_isClosed__Z_args, // the arguments
  0, //arguments count
  TcpServerConnection_methods_isClosed__Z_exceptions, // the declared exceptions
  TcpServerConnection_MetainfoWrapper::TcpServerConnection_method_isClosed__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TcpServerConnection_methods_startReadMessage__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TcpServerConnection_methods_startReadMessage__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TcpServerConnection_method_startReadMessage__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "startReadMessage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_startReadMessage", // alternative name of method
  -1, // altlabelHashCode
  TcpServerConnection_methods_startReadMessage__V_args, // the arguments
  0, //arguments count
  TcpServerConnection_methods_startReadMessage__V_exceptions, // the declared exceptions
  TcpServerConnection_MetainfoWrapper::TcpServerConnection_method_startReadMessage__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TcpServerConnection_methods_startWriteMessage__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TcpServerConnection_methods_startWriteMessage__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TcpServerConnection_method_startWriteMessage__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "startWriteMessage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_startWriteMessage", // alternative name of method
  -1, // altlabelHashCode
  TcpServerConnection_methods_startWriteMessage__V_args, // the arguments
  0, //arguments count
  TcpServerConnection_methods_startWriteMessage__V_exceptions, // the declared exceptions
  TcpServerConnection_MetainfoWrapper::TcpServerConnection_method_startWriteMessage__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TcpServerConnection_methods[] = 
{
  &TcpServerConnection_method_GetClass__L_acdk_lang_RClass_,
  &TcpServerConnection_method_TcpServerConnection_INLacdk_net_RSocket__LRTcpServerConnection_,
  &TcpServerConnection_method_close__V,
  &TcpServerConnection_method_dataAvailable__Z,
  &TcpServerConnection_method_endReadMessage__V,
  &TcpServerConnection_method_endWriteMessage__V,
  &TcpServerConnection_method_getLocalServerId__LRString_,
  &TcpServerConnection_method_getReader__Lacdk_io_RReader_,
  &TcpServerConnection_method_getRemoteServerId__LRString_,
  &TcpServerConnection_method_getWriter__Lacdk_io_RWriter_,
  &TcpServerConnection_method_isClosed__Z,
  &TcpServerConnection_method_startReadMessage__V,
  &TcpServerConnection_method_startWriteMessage__V,
  0
};


struct TcpServerConnection_MetaInfoInitializer
{  TcpServerConnection_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TcpServerConnection::clazzInfo();
    ci->fields =  _TcpServerConnection_fields;
    ci->methods =  _TcpServerConnection_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TcpServerConnection_MetaInfoInitializer TcpServerConnection_MetaInfoInitializer_staticinstance__;


} // namespace acdkx
} // namespace rdmi


namespace acdkx { 
namespace rdmi { 


//static
::acdk::lang::RObject
TcpServer_create_array(int length)
{
  return new ObjectArrayImpl<RTcpServer>(length);
}

//static
::acdk::lang::RObject
TcpServer_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TcpServer_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TcpServer_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TcpServer::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TcpServer_method_TcpServer_I_LRTcpServer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TcpServer(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TcpServer_method_TcpServer_INLRString_I_LRTcpServer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TcpServer((RString)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TcpServer_method_TcpServer_INLacdk_net_RInetAddress_I_LRTcpServer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TcpServer((acdk::net::RInetAddress)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TcpServer_method_accept__LRConnection__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TcpServer* This = dmi_cast<TcpServer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TcpServer::accept();
    else
        ret = (::acdk::lang::RObject)This->accept();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TcpServer_method_allowThreading__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TcpServer* This = dmi_cast<TcpServer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TcpServer::allowThreading();
    else
      ret = This->allowThreading();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TcpServer_method_getClientConnection__LRConnection__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TcpServer* This = dmi_cast<TcpServer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TcpServer::getClientConnection();
    else
        ret = (::acdk::lang::RObject)This->getClientConnection();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TcpServer_method_getLocalServerConnection__LRConnection__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TcpServer* This = dmi_cast<TcpServer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TcpServer::getLocalServerConnection();
    else
        ret = (::acdk::lang::RObject)This->getLocalServerConnection();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TcpServer_method_getLocalServerId__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TcpServer* This = dmi_cast<TcpServer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TcpServer::getLocalServerId();
    else
        ret = (::acdk::lang::RObject)This->getLocalServerId();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TcpServer_method_shutdown__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TcpServer* This = dmi_cast<TcpServer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TcpServer::shutdown();
    else
        This->shutdown();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TcpServer_fields__address_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TcpServer* This = dmi_cast<TcpServer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_address, flags);
    else
      This->_address = (acdk::net::RInetAddress)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TcpServer_fields__clientSocket_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TcpServer* This = dmi_cast<TcpServer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_clientSocket, flags);
    else
      This->_clientSocket = (acdk::net::RSocket)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TcpServer_fields__host_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TcpServer* This = dmi_cast<TcpServer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_host, flags);
    else
      This->_host = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TcpServer_fields__port_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TcpServer* This = dmi_cast<TcpServer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_port, flags);
    else
      This->_port = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TcpServer_fields__serverSocket_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TcpServer* This = dmi_cast<TcpServer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_serverSocket, flags);
    else
      This->_serverSocket = (acdk::net::RServerSocket)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo TcpServer_fields__address = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_address", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::net::RInetAddress::clazzInfo(),
  TcpServer_MetainfoWrapper::TcpServer_fields__address_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TcpServer_fields__clientSocket = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_clientSocket", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::net::RSocket::clazzInfo(),
  TcpServer_MetainfoWrapper::TcpServer_fields__clientSocket_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TcpServer_fields__host = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_host", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  TcpServer_MetainfoWrapper::TcpServer_fields__host_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TcpServer_fields__port = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_port", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TcpServer_MetainfoWrapper::TcpServer_fields__port_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TcpServer_fields__serverSocket = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_serverSocket", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::net::RServerSocket::clazzInfo(),
  TcpServer_MetainfoWrapper::TcpServer_fields__serverSocket_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _TcpServer_fields[] = 
{
  &TcpServer_fields__address,
  &TcpServer_fields__clientSocket,
  &TcpServer_fields__host,
  &TcpServer_fields__port,
  &TcpServer_fields__serverSocket,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TcpServer_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TcpServer_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TcpServer_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_9_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TcpServer_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TcpServer_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TcpServer_MetainfoWrapper::TcpServer_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TcpServer_methods_TcpServer_I_LRTcpServer__arg_portNo = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "portNo", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TcpServer_methods_TcpServer_I_LRTcpServer__args[] = 
{
  &TcpServer_methods_TcpServer_I_LRTcpServer__arg_portNo,
  0
};

::acdk::lang::dmi::ClazzInfo* TcpServer_methods_TcpServer_I_LRTcpServer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TcpServer_method_TcpServer_I_LRTcpServer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TcpServer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TcpServer::clazzInfo(), // return type
  "_0_TcpServer", // alternative name of method
  -1, // altlabelHashCode
  TcpServer_methods_TcpServer_I_LRTcpServer__args, // the arguments
  0, //arguments count
  TcpServer_methods_TcpServer_I_LRTcpServer__exceptions, // the declared exceptions
  TcpServer_MetainfoWrapper::TcpServer_method_TcpServer_I_LRTcpServer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TcpServer_methods_TcpServer_INLRString_I_LRTcpServer__arg_host = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "host", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TcpServer_methods_TcpServer_INLRString_I_LRTcpServer__arg_portNo = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "portNo", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TcpServer_methods_TcpServer_INLRString_I_LRTcpServer__args[] = 
{
  &TcpServer_methods_TcpServer_INLRString_I_LRTcpServer__arg_host,
  &TcpServer_methods_TcpServer_INLRString_I_LRTcpServer__arg_portNo,
  0
};

::acdk::lang::dmi::ClazzInfo* TcpServer_methods_TcpServer_INLRString_I_LRTcpServer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TcpServer_method_TcpServer_INLRString_I_LRTcpServer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TcpServer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TcpServer::clazzInfo(), // return type
  "_1_TcpServer", // alternative name of method
  -1, // altlabelHashCode
  TcpServer_methods_TcpServer_INLRString_I_LRTcpServer__args, // the arguments
  0, //arguments count
  TcpServer_methods_TcpServer_INLRString_I_LRTcpServer__exceptions, // the declared exceptions
  TcpServer_MetainfoWrapper::TcpServer_method_TcpServer_INLRString_I_LRTcpServer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TcpServer_methods_TcpServer_INLacdk_net_RInetAddress_I_LRTcpServer__arg_address = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "address", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::net::RInetAddress::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TcpServer_methods_TcpServer_INLacdk_net_RInetAddress_I_LRTcpServer__arg_portNo = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "portNo", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TcpServer_methods_TcpServer_INLacdk_net_RInetAddress_I_LRTcpServer__args[] = 
{
  &TcpServer_methods_TcpServer_INLacdk_net_RInetAddress_I_LRTcpServer__arg_address,
  &TcpServer_methods_TcpServer_INLacdk_net_RInetAddress_I_LRTcpServer__arg_portNo,
  0
};

::acdk::lang::dmi::ClazzInfo* TcpServer_methods_TcpServer_INLacdk_net_RInetAddress_I_LRTcpServer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TcpServer_method_TcpServer_INLacdk_net_RInetAddress_I_LRTcpServer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TcpServer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TcpServer::clazzInfo(), // return type
  "_2_TcpServer", // alternative name of method
  -1, // altlabelHashCode
  TcpServer_methods_TcpServer_INLacdk_net_RInetAddress_I_LRTcpServer__args, // the arguments
  0, //arguments count
  TcpServer_methods_TcpServer_INLacdk_net_RInetAddress_I_LRTcpServer__exceptions, // the declared exceptions
  TcpServer_MetainfoWrapper::TcpServer_method_TcpServer_INLacdk_net_RInetAddress_I_LRTcpServer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TcpServer_methods_accept__LRConnection__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TcpServer_methods_accept__LRConnection__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TcpServer_method_accept__LRConnection_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "accept", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RConnection::clazzInfo(), // return type
  "_4_accept", // alternative name of method
  -1, // altlabelHashCode
  TcpServer_methods_accept__LRConnection__args, // the arguments
  0, //arguments count
  TcpServer_methods_accept__LRConnection__exceptions, // the declared exceptions
  TcpServer_MetainfoWrapper::TcpServer_method_accept__LRConnection__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TcpServer_methods_allowThreading__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TcpServer_methods_allowThreading__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TcpServer_method_allowThreading__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "allowThreading", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_8_allowThreading", // alternative name of method
  -1, // altlabelHashCode
  TcpServer_methods_allowThreading__Z_args, // the arguments
  0, //arguments count
  TcpServer_methods_allowThreading__Z_exceptions, // the declared exceptions
  TcpServer_MetainfoWrapper::TcpServer_method_allowThreading__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TcpServer_methods_getClientConnection__LRConnection__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TcpServer_methods_getClientConnection__LRConnection__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TcpServer_method_getClientConnection__LRConnection_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getClientConnection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RConnection::clazzInfo(), // return type
  "_5_getClientConnection", // alternative name of method
  -1, // altlabelHashCode
  TcpServer_methods_getClientConnection__LRConnection__args, // the arguments
  0, //arguments count
  TcpServer_methods_getClientConnection__LRConnection__exceptions, // the declared exceptions
  TcpServer_MetainfoWrapper::TcpServer_method_getClientConnection__LRConnection__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TcpServer_methods_getLocalServerConnection__LRConnection__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TcpServer_methods_getLocalServerConnection__LRConnection__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TcpServer_method_getLocalServerConnection__LRConnection_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLocalServerConnection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RConnection::clazzInfo(), // return type
  "_6_getLocalServerConnection", // alternative name of method
  -1, // altlabelHashCode
  TcpServer_methods_getLocalServerConnection__LRConnection__args, // the arguments
  0, //arguments count
  TcpServer_methods_getLocalServerConnection__LRConnection__exceptions, // the declared exceptions
  TcpServer_MetainfoWrapper::TcpServer_method_getLocalServerConnection__LRConnection__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TcpServer_methods_getLocalServerId__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TcpServer_methods_getLocalServerId__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TcpServer_method_getLocalServerId__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLocalServerId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_getLocalServerId", // alternative name of method
  -1, // altlabelHashCode
  TcpServer_methods_getLocalServerId__LRString__args, // the arguments
  0, //arguments count
  TcpServer_methods_getLocalServerId__LRString__exceptions, // the declared exceptions
  TcpServer_MetainfoWrapper::TcpServer_method_getLocalServerId__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TcpServer_methods_shutdown__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TcpServer_methods_shutdown__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TcpServer_method_shutdown__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "shutdown", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_shutdown", // alternative name of method
  -1, // altlabelHashCode
  TcpServer_methods_shutdown__V_args, // the arguments
  0, //arguments count
  TcpServer_methods_shutdown__V_exceptions, // the declared exceptions
  TcpServer_MetainfoWrapper::TcpServer_method_shutdown__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TcpServer_methods[] = 
{
  &TcpServer_method_GetClass__L_acdk_lang_RClass_,
  &TcpServer_method_TcpServer_I_LRTcpServer_,
  &TcpServer_method_TcpServer_INLRString_I_LRTcpServer_,
  &TcpServer_method_TcpServer_INLacdk_net_RInetAddress_I_LRTcpServer_,
  &TcpServer_method_accept__LRConnection_,
  &TcpServer_method_allowThreading__Z,
  &TcpServer_method_getClientConnection__LRConnection_,
  &TcpServer_method_getLocalServerConnection__LRConnection_,
  &TcpServer_method_getLocalServerId__LRString_,
  &TcpServer_method_shutdown__V,
  0
};


struct TcpServer_MetaInfoInitializer
{  TcpServer_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TcpServer::clazzInfo();
    ci->fields =  _TcpServer_fields;
    ci->methods =  _TcpServer_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TcpServer_MetaInfoInitializer TcpServer_MetaInfoInitializer_staticinstance__;


} // namespace acdkx
} // namespace rdmi


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) rdmi_dummyExportFunc() {}
#endif

