// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../portable.h"
#include "../ApplicationException.h"
#include "../Delegate.h"
#include "../InputStream.h"
#include "../InvokeHandler.h"
#include "../ObjectImpl.h"
#include "../OutputStream.h"
#include "../portable.h"
#include "../RemarshalException.h"
#include "../ResponseHandler.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>


struct acdk::lang::dmi::UnitInfo org_omg_CORBA_portable_unitInfo = {
  ::acdk::lang::dmi::MiUnitInfo, // flags
  0, //attributeRes
  "portable", // name of unit
  -1, // hashCode
  "org/omg/CORBA", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  0 // _firstChild first ClazzInfo of this unit
};

static ::acdk::lang::dmi::RegisterUnitInfo _register_org_omg_CORBA_portable_unitInfo(&org_omg_CORBA_portable_unitInfo);


namespace org { 
namespace omg { 
namespace CORBA { 
namespace portable { 


//static
::acdk::lang::RObject
ApplicationException_create_array(int length)
{
  return new ObjectArrayImpl<RApplicationException>(length);
}

//static
::acdk::lang::RObject
ApplicationException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ApplicationException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ApplicationException_method_ApplicationException__LRApplicationException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ApplicationException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ApplicationException_method_ApplicationException_INLRInputStream_INLRString__LRApplicationException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ApplicationException((RInputStream)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ApplicationException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ApplicationException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ApplicationException_method_getId__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ApplicationException* This = dmi_cast<ApplicationException>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ApplicationException::getId();
    else
        ret = (::acdk::lang::RObject)This->getId();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ApplicationException_method_getInputStream__LRInputStream__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ApplicationException* This = dmi_cast<ApplicationException>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ApplicationException::getInputStream();
    else
        ret = (::acdk::lang::RObject)This->getInputStream();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ApplicationException_method_getUserExceptionClass__LRClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ApplicationException* This = dmi_cast<ApplicationException>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ApplicationException::getUserExceptionClass();
    else
        ret = (::acdk::lang::RObject)This->getUserExceptionClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ApplicationException_fields__in_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ApplicationException* This = dmi_cast<ApplicationException>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_in, flags);
    else
      This->_in = (RInputStream)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ApplicationException_fields__userExceptionClassName_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ApplicationException* This = dmi_cast<ApplicationException>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_userExceptionClassName, flags);
    else
      This->_userExceptionClassName = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ApplicationException_fields__userclazz_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ApplicationException* This = dmi_cast<ApplicationException>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_userclazz, flags);
    else
      This->_userclazz = (RClass)var.getObjectVar();
    return fieldinf;
  }
};


void ThrowException_ApplicationException(IN(::acdk::lang::RThrowable) ex)
{
  throw RApplicationException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo ApplicationException_fields__in = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_in", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInputStream::clazzInfo(),
  ApplicationException_MetainfoWrapper::ApplicationException_fields__in_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ApplicationException_fields__userExceptionClassName = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_userExceptionClassName", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ApplicationException_MetainfoWrapper::ApplicationException_fields__userExceptionClassName_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ApplicationException_fields__userclazz = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_userclazz", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(),
  ApplicationException_MetainfoWrapper::ApplicationException_fields__userclazz_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ApplicationException_fields[] = 
{
  &ApplicationException_fields__in,
  &ApplicationException_fields__userExceptionClassName,
  &ApplicationException_fields__userclazz,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ApplicationException_methods_ApplicationException__LRApplicationException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ApplicationException_methods_ApplicationException__LRApplicationException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ApplicationException_method_ApplicationException__LRApplicationException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ApplicationException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ApplicationException::clazzInfo(), // return type
  "_0_ApplicationException", // alternative name of method
  -1, // altlabelHashCode
  ApplicationException_methods_ApplicationException__LRApplicationException__args, // the arguments
  0, //arguments count
  ApplicationException_methods_ApplicationException__LRApplicationException__exceptions, // the declared exceptions
  ApplicationException_MetainfoWrapper::ApplicationException_method_ApplicationException__LRApplicationException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ApplicationException_methods_ApplicationException_INLRInputStream_INLRString__LRApplicationException__arg_in = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "in", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInputStream::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ApplicationException_methods_ApplicationException_INLRInputStream_INLRString__LRApplicationException__arg_exname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "exname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ApplicationException_methods_ApplicationException_INLRInputStream_INLRString__LRApplicationException__args[] = 
{
  &ApplicationException_methods_ApplicationException_INLRInputStream_INLRString__LRApplicationException__arg_in,
  &ApplicationException_methods_ApplicationException_INLRInputStream_INLRString__LRApplicationException__arg_exname,
  0
};

::acdk::lang::dmi::ClazzInfo* ApplicationException_methods_ApplicationException_INLRInputStream_INLRString__LRApplicationException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ApplicationException_method_ApplicationException_INLRInputStream_INLRString__LRApplicationException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ApplicationException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ApplicationException::clazzInfo(), // return type
  "_1_ApplicationException", // alternative name of method
  -1, // altlabelHashCode
  ApplicationException_methods_ApplicationException_INLRInputStream_INLRString__LRApplicationException__args, // the arguments
  0, //arguments count
  ApplicationException_methods_ApplicationException_INLRInputStream_INLRString__LRApplicationException__exceptions, // the declared exceptions
  ApplicationException_MetainfoWrapper::ApplicationException_method_ApplicationException_INLRInputStream_INLRString__LRApplicationException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ApplicationException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ApplicationException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ApplicationException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ApplicationException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ApplicationException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ApplicationException_MetainfoWrapper::ApplicationException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ApplicationException_methods_getId__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ApplicationException_methods_getId__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ApplicationException_method_getId__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_getId", // alternative name of method
  -1, // altlabelHashCode
  ApplicationException_methods_getId__LRString__args, // the arguments
  0, //arguments count
  ApplicationException_methods_getId__LRString__exceptions, // the declared exceptions
  ApplicationException_MetainfoWrapper::ApplicationException_method_getId__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ApplicationException_methods_getInputStream__LRInputStream__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ApplicationException_methods_getInputStream__LRInputStream__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ApplicationException_method_getInputStream__LRInputStream_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInputStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInputStream::clazzInfo(), // return type
  "_3_getInputStream", // alternative name of method
  -1, // altlabelHashCode
  ApplicationException_methods_getInputStream__LRInputStream__args, // the arguments
  0, //arguments count
  ApplicationException_methods_getInputStream__LRInputStream__exceptions, // the declared exceptions
  ApplicationException_MetainfoWrapper::ApplicationException_method_getInputStream__LRInputStream__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ApplicationException_methods_getUserExceptionClass__LRClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ApplicationException_methods_getUserExceptionClass__LRClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ApplicationException_method_getUserExceptionClass__LRClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getUserExceptionClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(), // return type
  "_4_getUserExceptionClass", // alternative name of method
  -1, // altlabelHashCode
  ApplicationException_methods_getUserExceptionClass__LRClass__args, // the arguments
  0, //arguments count
  ApplicationException_methods_getUserExceptionClass__LRClass__exceptions, // the declared exceptions
  ApplicationException_MetainfoWrapper::ApplicationException_method_getUserExceptionClass__LRClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ApplicationException_methods[] = 
{
  &ApplicationException_method_ApplicationException__LRApplicationException_,
  &ApplicationException_method_ApplicationException_INLRInputStream_INLRString__LRApplicationException_,
  &ApplicationException_method_GetClass__L_acdk_lang_RClass_,
  &ApplicationException_method_getId__LRString_,
  &ApplicationException_method_getInputStream__LRInputStream_,
  &ApplicationException_method_getUserExceptionClass__LRClass_,
  0
};


struct ApplicationException_MetaInfoInitializer
{  ApplicationException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ApplicationException::clazzInfo();
    ci->fields =  _ApplicationException_fields;
    ci->methods =  _ApplicationException_methods;
    ci->_scopeParent = org_omg_CORBA_portable_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ApplicationException_MetaInfoInitializer ApplicationException_MetaInfoInitializer_staticinstance__;


struct ApplicationException_clazzInfo_ClazzAttributesResInitializer1
{
  ApplicationException_clazzInfo_ClazzAttributesResInitializer1()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)ApplicationException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_ApplicationException));
  }
};

ApplicationException_clazzInfo_ClazzAttributesResInitializer1 ApplicationException_clazzInfo_ClazzAttributesResInitializer1_instance;



} // namespace org
} // namespace omg
} // namespace CORBA
} // namespace portable


namespace org { 
namespace omg { 
namespace CORBA { 
namespace portable { 


//static
::acdk::lang::RObject
Delegate_create_array(int length)
{
  return new ObjectArrayImpl<RDelegate>(length);
}

//static
::acdk::lang::RObject
Delegate_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Delegate_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Delegate_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Delegate::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Delegate_method_duplicate_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Delegate* This = dmi_cast<Delegate>(This_);
    ret = (::acdk::lang::RObject)This->duplicate((::org::omg::CORBA::RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Delegate_method_equals_INL_org_omg_CORBA_RObject_INLacdk_lang_RObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Delegate* This = dmi_cast<Delegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Delegate::equals((::org::omg::CORBA::RObject)args[0].getObjectVar(), (acdk::lang::RObject)args[1].getObjectVar());
    else
      ret = This->equals((::org::omg::CORBA::RObject)args[0].getObjectVar(), (acdk::lang::RObject)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Delegate_method_get_interface_def_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Delegate* This = dmi_cast<Delegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Delegate::get_interface_def((::org::omg::CORBA::RObject)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->get_interface_def((::org::omg::CORBA::RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Delegate_method_hash_INL_org_omg_CORBA_RObject_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Delegate* This = dmi_cast<Delegate>(This_);
  ret = This->hash((::org::omg::CORBA::RObject)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Delegate_method_hashCode_INL_org_omg_CORBA_RObject__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Delegate* This = dmi_cast<Delegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Delegate::hashCode((::org::omg::CORBA::RObject)args[0].getObjectVar());
    else
      ret = This->hashCode((::org::omg::CORBA::RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Delegate_method_is_a_INL_org_omg_CORBA_RObject_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Delegate* This = dmi_cast<Delegate>(This_);
  ret = This->is_a((::org::omg::CORBA::RObject)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Delegate_method_is_equivalent_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_RObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Delegate* This = dmi_cast<Delegate>(This_);
  ret = This->is_equivalent((::org::omg::CORBA::RObject)args[0].getObjectVar(), (::org::omg::CORBA::RObject)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Delegate_method_is_local_L_org_omg_CORBA_RObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Delegate* This = dmi_cast<Delegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Delegate::is_local((::org::omg::CORBA::RObject)args[0].getObjectVar());
    else
      ret = This->is_local((::org::omg::CORBA::RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Delegate_method_is_nil__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Delegate* This = dmi_cast<Delegate>(This_);
  ret = This->is_nil();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Delegate_method_non_existent_INL_org_omg_CORBA_RObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Delegate* This = dmi_cast<Delegate>(This_);
  ret = This->non_existent((::org::omg::CORBA::RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Delegate_method_orb_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RORB__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Delegate* This = dmi_cast<Delegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Delegate::orb((::org::omg::CORBA::RObject)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->orb((::org::omg::CORBA::RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Delegate_method_orb_invoke_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_ROutputStream__L_org_omg_CORBA_portable_RInputStream__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Delegate* This = dmi_cast<Delegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Delegate::orb_invoke((::org::omg::CORBA::RObject)args[0].getObjectVar(), (::org::omg::CORBA::portable::ROutputStream)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->orb_invoke((::org::omg::CORBA::RObject)args[0].getObjectVar(), (::org::omg::CORBA::portable::ROutputStream)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Delegate_method_release_INL_org_omg_CORBA_RObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Delegate* This = dmi_cast<Delegate>(This_);
    This->release((::org::omg::CORBA::RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Delegate_method_releaseReply_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_RInputStream__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Delegate* This = dmi_cast<Delegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Delegate::releaseReply((::org::omg::CORBA::RObject)args[0].getObjectVar(), (::org::omg::CORBA::portable::RInputStream)args[1].getObjectVar());
    else
        This->releaseReply((::org::omg::CORBA::RObject)args[0].getObjectVar(), (::org::omg::CORBA::portable::RInputStream)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Delegate_method_request_INL_org_omg_CORBA_RObject_INLRString_Z_L_org_omg_CORBA_portable_ROutputStream__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Delegate* This = dmi_cast<Delegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Delegate::request((::org::omg::CORBA::RObject)args[0].getObjectVar(), (RString)args[1].getObjectVar(), args[2].getBoolVar());
    else
        ret = (::acdk::lang::RObject)This->request((::org::omg::CORBA::RObject)args[0].getObjectVar(), (RString)args[1].getObjectVar(), args[2].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Delegate_method_toString_INL_org_omg_CORBA_RObject__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Delegate* This = dmi_cast<Delegate>(This_);
    ret = (::acdk::lang::RObject)This->toString((::org::omg::CORBA::RObject)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Delegate_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Delegate_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Delegate_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Delegate_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_g_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Delegate_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Delegate_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Delegate_MetainfoWrapper::Delegate_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Delegate_methods_duplicate_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RObject__arg_self = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "self", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Delegate_methods_duplicate_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RObject__args[] = 
{
  &Delegate_methods_duplicate_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RObject__arg_self,
  0
};

::acdk::lang::dmi::ClazzInfo* Delegate_methods_duplicate_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Delegate_method_duplicate_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "duplicate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo(), // return type
  "_2_duplicate", // alternative name of method
  -1, // altlabelHashCode
  Delegate_methods_duplicate_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RObject__args, // the arguments
  0, //arguments count
  Delegate_methods_duplicate_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RObject__exceptions, // the declared exceptions
  Delegate_MetainfoWrapper::Delegate_method_duplicate_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Delegate_methods_equals_INL_org_omg_CORBA_RObject_INLacdk_lang_RObject__Z_arg_self = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "self", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Delegate_methods_equals_INL_org_omg_CORBA_RObject_INLacdk_lang_RObject__Z_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Delegate_methods_equals_INL_org_omg_CORBA_RObject_INLacdk_lang_RObject__Z_args[] = 
{
  &Delegate_methods_equals_INL_org_omg_CORBA_RObject_INLacdk_lang_RObject__Z_arg_self,
  &Delegate_methods_equals_INL_org_omg_CORBA_RObject_INLacdk_lang_RObject__Z_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* Delegate_methods_equals_INL_org_omg_CORBA_RObject_INLacdk_lang_RObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Delegate_method_equals_INL_org_omg_CORBA_RObject_INLacdk_lang_RObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_f_equals", // alternative name of method
  -1, // altlabelHashCode
  Delegate_methods_equals_INL_org_omg_CORBA_RObject_INLacdk_lang_RObject__Z_args, // the arguments
  0, //arguments count
  Delegate_methods_equals_INL_org_omg_CORBA_RObject_INLacdk_lang_RObject__Z_exceptions, // the declared exceptions
  Delegate_MetainfoWrapper::Delegate_method_equals_INL_org_omg_CORBA_RObject_INLacdk_lang_RObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Delegate_methods_get_interface_def_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RObject__arg_self = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "self", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Delegate_methods_get_interface_def_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RObject__args[] = 
{
  &Delegate_methods_get_interface_def_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RObject__arg_self,
  0
};

::acdk::lang::dmi::ClazzInfo* Delegate_methods_get_interface_def_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Delegate_method_get_interface_def_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "get_interface_def", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo(), // return type
  "_0_get_interface_def", // alternative name of method
  -1, // altlabelHashCode
  Delegate_methods_get_interface_def_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RObject__args, // the arguments
  0, //arguments count
  Delegate_methods_get_interface_def_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RObject__exceptions, // the declared exceptions
  Delegate_MetainfoWrapper::Delegate_method_get_interface_def_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Delegate_methods_hash_INL_org_omg_CORBA_RObject_I_I_arg_self = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "self", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Delegate_methods_hash_INL_org_omg_CORBA_RObject_I_I_arg_max = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "max", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Delegate_methods_hash_INL_org_omg_CORBA_RObject_I_I_args[] = 
{
  &Delegate_methods_hash_INL_org_omg_CORBA_RObject_I_I_arg_self,
  &Delegate_methods_hash_INL_org_omg_CORBA_RObject_I_I_arg_max,
  0
};

::acdk::lang::dmi::ClazzInfo* Delegate_methods_hash_INL_org_omg_CORBA_RObject_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Delegate_method_hash_INL_org_omg_CORBA_RObject_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hash", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_hash", // alternative name of method
  -1, // altlabelHashCode
  Delegate_methods_hash_INL_org_omg_CORBA_RObject_I_I_args, // the arguments
  0, //arguments count
  Delegate_methods_hash_INL_org_omg_CORBA_RObject_I_I_exceptions, // the declared exceptions
  Delegate_MetainfoWrapper::Delegate_method_hash_INL_org_omg_CORBA_RObject_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Delegate_methods_hashCode_INL_org_omg_CORBA_RObject__I_arg_self = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "self", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Delegate_methods_hashCode_INL_org_omg_CORBA_RObject__I_args[] = 
{
  &Delegate_methods_hashCode_INL_org_omg_CORBA_RObject__I_arg_self,
  0
};

::acdk::lang::dmi::ClazzInfo* Delegate_methods_hashCode_INL_org_omg_CORBA_RObject__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Delegate_method_hashCode_INL_org_omg_CORBA_RObject__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hashCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_e_hashCode", // alternative name of method
  -1, // altlabelHashCode
  Delegate_methods_hashCode_INL_org_omg_CORBA_RObject__I_args, // the arguments
  0, //arguments count
  Delegate_methods_hashCode_INL_org_omg_CORBA_RObject__I_exceptions, // the declared exceptions
  Delegate_MetainfoWrapper::Delegate_method_hashCode_INL_org_omg_CORBA_RObject__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Delegate_methods_is_a_INL_org_omg_CORBA_RObject_INLRString__Z_arg_self = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "self", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Delegate_methods_is_a_INL_org_omg_CORBA_RObject_INLRString__Z_arg_repository_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "repository_id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Delegate_methods_is_a_INL_org_omg_CORBA_RObject_INLRString__Z_args[] = 
{
  &Delegate_methods_is_a_INL_org_omg_CORBA_RObject_INLRString__Z_arg_self,
  &Delegate_methods_is_a_INL_org_omg_CORBA_RObject_INLRString__Z_arg_repository_id,
  0
};

::acdk::lang::dmi::ClazzInfo* Delegate_methods_is_a_INL_org_omg_CORBA_RObject_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Delegate_method_is_a_INL_org_omg_CORBA_RObject_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "is_a", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_is_a", // alternative name of method
  -1, // altlabelHashCode
  Delegate_methods_is_a_INL_org_omg_CORBA_RObject_INLRString__Z_args, // the arguments
  0, //arguments count
  Delegate_methods_is_a_INL_org_omg_CORBA_RObject_INLRString__Z_exceptions, // the declared exceptions
  Delegate_MetainfoWrapper::Delegate_method_is_a_INL_org_omg_CORBA_RObject_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Delegate_methods_is_equivalent_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_RObject__Z_arg_self = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "self", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Delegate_methods_is_equivalent_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_RObject__Z_arg_rhs = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rhs", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Delegate_methods_is_equivalent_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_RObject__Z_args[] = 
{
  &Delegate_methods_is_equivalent_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_RObject__Z_arg_self,
  &Delegate_methods_is_equivalent_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_RObject__Z_arg_rhs,
  0
};

::acdk::lang::dmi::ClazzInfo* Delegate_methods_is_equivalent_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_RObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Delegate_method_is_equivalent_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_RObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "is_equivalent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_is_equivalent", // alternative name of method
  -1, // altlabelHashCode
  Delegate_methods_is_equivalent_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_RObject__Z_args, // the arguments
  0, //arguments count
  Delegate_methods_is_equivalent_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_RObject__Z_exceptions, // the declared exceptions
  Delegate_MetainfoWrapper::Delegate_method_is_equivalent_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_RObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Delegate_methods_is_local_L_org_omg_CORBA_RObject__Z_arg_self = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "self", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Delegate_methods_is_local_L_org_omg_CORBA_RObject__Z_args[] = 
{
  &Delegate_methods_is_local_L_org_omg_CORBA_RObject__Z_arg_self,
  0
};

::acdk::lang::dmi::ClazzInfo* Delegate_methods_is_local_L_org_omg_CORBA_RObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Delegate_method_is_local_L_org_omg_CORBA_RObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "is_local", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_c_is_local", // alternative name of method
  -1, // altlabelHashCode
  Delegate_methods_is_local_L_org_omg_CORBA_RObject__Z_args, // the arguments
  0, //arguments count
  Delegate_methods_is_local_L_org_omg_CORBA_RObject__Z_exceptions, // the declared exceptions
  Delegate_MetainfoWrapper::Delegate_method_is_local_L_org_omg_CORBA_RObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Delegate_methods_is_nil__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Delegate_methods_is_nil__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Delegate_method_is_nil__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "is_nil", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_is_nil", // alternative name of method
  -1, // altlabelHashCode
  Delegate_methods_is_nil__Z_args, // the arguments
  0, //arguments count
  Delegate_methods_is_nil__Z_exceptions, // the declared exceptions
  Delegate_MetainfoWrapper::Delegate_method_is_nil__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Delegate_methods_non_existent_INL_org_omg_CORBA_RObject__Z_arg_self = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "self", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Delegate_methods_non_existent_INL_org_omg_CORBA_RObject__Z_args[] = 
{
  &Delegate_methods_non_existent_INL_org_omg_CORBA_RObject__Z_arg_self,
  0
};

::acdk::lang::dmi::ClazzInfo* Delegate_methods_non_existent_INL_org_omg_CORBA_RObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Delegate_method_non_existent_INL_org_omg_CORBA_RObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "non_existent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_non_existent", // alternative name of method
  -1, // altlabelHashCode
  Delegate_methods_non_existent_INL_org_omg_CORBA_RObject__Z_args, // the arguments
  0, //arguments count
  Delegate_methods_non_existent_INL_org_omg_CORBA_RObject__Z_exceptions, // the declared exceptions
  Delegate_MetainfoWrapper::Delegate_method_non_existent_INL_org_omg_CORBA_RObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Delegate_methods_orb_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RORB__arg_self = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "self", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Delegate_methods_orb_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RORB__args[] = 
{
  &Delegate_methods_orb_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RORB__arg_self,
  0
};

::acdk::lang::dmi::ClazzInfo* Delegate_methods_orb_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RORB__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Delegate_method_orb_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RORB_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "orb", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RORB::clazzInfo(), // return type
  "_b_orb", // alternative name of method
  -1, // altlabelHashCode
  Delegate_methods_orb_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RORB__args, // the arguments
  0, //arguments count
  Delegate_methods_orb_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RORB__exceptions, // the declared exceptions
  Delegate_MetainfoWrapper::Delegate_method_orb_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RORB__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Delegate_methods_orb_invoke_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_ROutputStream__L_org_omg_CORBA_portable_RInputStream__arg_self = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "self", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Delegate_methods_orb_invoke_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_ROutputStream__L_org_omg_CORBA_portable_RInputStream__arg_os = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "os", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::portable::ROutputStream::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Delegate_methods_orb_invoke_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_ROutputStream__L_org_omg_CORBA_portable_RInputStream__args[] = 
{
  &Delegate_methods_orb_invoke_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_ROutputStream__L_org_omg_CORBA_portable_RInputStream__arg_self,
  &Delegate_methods_orb_invoke_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_ROutputStream__L_org_omg_CORBA_portable_RInputStream__arg_os,
  0
};

::acdk::lang::dmi::ClazzInfo* Delegate_methods_orb_invoke_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_ROutputStream__L_org_omg_CORBA_portable_RInputStream__exceptions[] =
{
  RApplicationException::clazzInfo(), 
  RRemarshalException::clazzInfo(), 
  0
};

void Delegate_orb_invoke_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_ROutputStream__L_org_omg_CORBA_portable_RInputStream__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ApplicationException) == true)
    THROW_INSTANCE( RApplicationException(ex));
 if (instanceof(ex, RemarshalException) == true)
    THROW_INSTANCE( RRemarshalException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Delegate_method_orb_invoke_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_ROutputStream__L_org_omg_CORBA_portable_RInputStream_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "orb_invoke", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::portable::RInputStream::clazzInfo(), // return type
  "_9_orb_invoke", // alternative name of method
  -1, // altlabelHashCode
  Delegate_methods_orb_invoke_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_ROutputStream__L_org_omg_CORBA_portable_RInputStream__args, // the arguments
  0, //arguments count
  Delegate_methods_orb_invoke_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_ROutputStream__L_org_omg_CORBA_portable_RInputStream__exceptions, // the declared exceptions
  Delegate_MetainfoWrapper::Delegate_method_orb_invoke_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_ROutputStream__L_org_omg_CORBA_portable_RInputStream__dispatch, // invoke this method
  Delegate_orb_invoke_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_ROutputStream__L_org_omg_CORBA_portable_RInputStream__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Delegate_methods_release_INL_org_omg_CORBA_RObject__V_arg_self = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "self", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Delegate_methods_release_INL_org_omg_CORBA_RObject__V_args[] = 
{
  &Delegate_methods_release_INL_org_omg_CORBA_RObject__V_arg_self,
  0
};

::acdk::lang::dmi::ClazzInfo* Delegate_methods_release_INL_org_omg_CORBA_RObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Delegate_method_release_INL_org_omg_CORBA_RObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "release", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_release", // alternative name of method
  -1, // altlabelHashCode
  Delegate_methods_release_INL_org_omg_CORBA_RObject__V_args, // the arguments
  0, //arguments count
  Delegate_methods_release_INL_org_omg_CORBA_RObject__V_exceptions, // the declared exceptions
  Delegate_MetainfoWrapper::Delegate_method_release_INL_org_omg_CORBA_RObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Delegate_methods_releaseReply_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_RInputStream__V_arg_self = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "self", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Delegate_methods_releaseReply_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_RInputStream__V_arg_is = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "is", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::portable::RInputStream::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Delegate_methods_releaseReply_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_RInputStream__V_args[] = 
{
  &Delegate_methods_releaseReply_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_RInputStream__V_arg_self,
  &Delegate_methods_releaseReply_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_RInputStream__V_arg_is,
  0
};

::acdk::lang::dmi::ClazzInfo* Delegate_methods_releaseReply_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_RInputStream__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Delegate_method_releaseReply_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_RInputStream__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "releaseReply", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_releaseReply", // alternative name of method
  -1, // altlabelHashCode
  Delegate_methods_releaseReply_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_RInputStream__V_args, // the arguments
  0, //arguments count
  Delegate_methods_releaseReply_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_RInputStream__V_exceptions, // the declared exceptions
  Delegate_MetainfoWrapper::Delegate_method_releaseReply_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_RInputStream__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Delegate_methods_request_INL_org_omg_CORBA_RObject_INLRString_Z_L_org_omg_CORBA_portable_ROutputStream__arg_self = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "self", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Delegate_methods_request_INL_org_omg_CORBA_RObject_INLRString_Z_L_org_omg_CORBA_portable_ROutputStream__arg_operation = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "operation", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Delegate_methods_request_INL_org_omg_CORBA_RObject_INLRString_Z_L_org_omg_CORBA_portable_ROutputStream__arg_responseExpected = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "responseExpected", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Delegate_methods_request_INL_org_omg_CORBA_RObject_INLRString_Z_L_org_omg_CORBA_portable_ROutputStream__args[] = 
{
  &Delegate_methods_request_INL_org_omg_CORBA_RObject_INLRString_Z_L_org_omg_CORBA_portable_ROutputStream__arg_self,
  &Delegate_methods_request_INL_org_omg_CORBA_RObject_INLRString_Z_L_org_omg_CORBA_portable_ROutputStream__arg_operation,
  &Delegate_methods_request_INL_org_omg_CORBA_RObject_INLRString_Z_L_org_omg_CORBA_portable_ROutputStream__arg_responseExpected,
  0
};

::acdk::lang::dmi::ClazzInfo* Delegate_methods_request_INL_org_omg_CORBA_RObject_INLRString_Z_L_org_omg_CORBA_portable_ROutputStream__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Delegate_method_request_INL_org_omg_CORBA_RObject_INLRString_Z_L_org_omg_CORBA_portable_ROutputStream_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "request", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::portable::ROutputStream::clazzInfo(), // return type
  "_8_request", // alternative name of method
  -1, // altlabelHashCode
  Delegate_methods_request_INL_org_omg_CORBA_RObject_INLRString_Z_L_org_omg_CORBA_portable_ROutputStream__args, // the arguments
  0, //arguments count
  Delegate_methods_request_INL_org_omg_CORBA_RObject_INLRString_Z_L_org_omg_CORBA_portable_ROutputStream__exceptions, // the declared exceptions
  Delegate_MetainfoWrapper::Delegate_method_request_INL_org_omg_CORBA_RObject_INLRString_Z_L_org_omg_CORBA_portable_ROutputStream__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Delegate_methods_toString_INL_org_omg_CORBA_RObject__LRString__arg_self = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "self", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Delegate_methods_toString_INL_org_omg_CORBA_RObject__LRString__args[] = 
{
  &Delegate_methods_toString_INL_org_omg_CORBA_RObject__LRString__arg_self,
  0
};

::acdk::lang::dmi::ClazzInfo* Delegate_methods_toString_INL_org_omg_CORBA_RObject__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Delegate_method_toString_INL_org_omg_CORBA_RObject__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_d_toString", // alternative name of method
  -1, // altlabelHashCode
  Delegate_methods_toString_INL_org_omg_CORBA_RObject__LRString__args, // the arguments
  0, //arguments count
  Delegate_methods_toString_INL_org_omg_CORBA_RObject__LRString__exceptions, // the declared exceptions
  Delegate_MetainfoWrapper::Delegate_method_toString_INL_org_omg_CORBA_RObject__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Delegate_methods[] = 
{
  &Delegate_method_GetClass__L_acdk_lang_RClass_,
  &Delegate_method_duplicate_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RObject_,
  &Delegate_method_equals_INL_org_omg_CORBA_RObject_INLacdk_lang_RObject__Z,
  &Delegate_method_get_interface_def_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RObject_,
  &Delegate_method_hash_INL_org_omg_CORBA_RObject_I_I,
  &Delegate_method_hashCode_INL_org_omg_CORBA_RObject__I,
  &Delegate_method_is_a_INL_org_omg_CORBA_RObject_INLRString__Z,
  &Delegate_method_is_equivalent_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_RObject__Z,
  &Delegate_method_is_local_L_org_omg_CORBA_RObject__Z,
  &Delegate_method_is_nil__Z,
  &Delegate_method_non_existent_INL_org_omg_CORBA_RObject__Z,
  &Delegate_method_orb_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RORB_,
  &Delegate_method_orb_invoke_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_ROutputStream__L_org_omg_CORBA_portable_RInputStream_,
  &Delegate_method_release_INL_org_omg_CORBA_RObject__V,
  &Delegate_method_releaseReply_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_RInputStream__V,
  &Delegate_method_request_INL_org_omg_CORBA_RObject_INLRString_Z_L_org_omg_CORBA_portable_ROutputStream_,
  &Delegate_method_toString_INL_org_omg_CORBA_RObject__LRString_,
  0
};


struct Delegate_MetaInfoInitializer
{  Delegate_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Delegate::clazzInfo();
    ci->fields =  _Delegate_fields;
    ci->methods =  _Delegate_methods;
    ci->_scopeParent = org_omg_CORBA_portable_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Delegate_MetaInfoInitializer Delegate_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace omg
} // namespace CORBA
} // namespace portable


namespace org { 
namespace omg { 
namespace CORBA { 
namespace portable { 


//static
::acdk::lang::RObject
InputStream_create_array(int length)
{
  return new ObjectArrayImpl<RInputStream>(length);
}

//static
::acdk::lang::RObject
InputStream_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class InputStream_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InputStream_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)InputStream::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InputStream_method_endian__LEndian__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InputStream* This = dmi_cast<InputStream>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = (Endian)This->InputStream::endian();
    else
      ret = (Endian)This->endian();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InputStream_method_orb__Lorg_omg_CORBA_RORB__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InputStream* This = dmi_cast<InputStream>(This_);
    ret = (::acdk::lang::RObject)This->orb();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InputStream_method_read_Object__L_org_omg_CORBA_RObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InputStream* This = dmi_cast<InputStream>(This_);
    ret = (::acdk::lang::RObject)This->read_Object();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InputStream_method_read_Object_INL_acdk_lang_RClass__L_org_omg_CORBA_RObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InputStream* This = dmi_cast<InputStream>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->InputStream::read_Object((::acdk::lang::RClass)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->read_Object((::acdk::lang::RClass)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InputStream_method_read_abstract_interface__L_acdk_lang_RObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InputStream* This = dmi_cast<InputStream>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->InputStream::read_abstract_interface();
    else
        ret = (::acdk::lang::RObject)This->read_abstract_interface();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InputStream_method_read_abstract_interface_INL_acdk_lang_RClass__L_acdk_lang_RObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InputStream* This = dmi_cast<InputStream>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->InputStream::read_abstract_interface((::acdk::lang::RClass)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->read_abstract_interface((::acdk::lang::RClass)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InputStream_method_read_acdk_object_INL_acdk_lang_RClass__L_acdk_lang_RObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InputStream* This = dmi_cast<InputStream>(This_);
    ret = (::acdk::lang::RObject)This->read_acdk_object((::acdk::lang::RClass)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InputStream_method_read_boolean__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InputStream* This = dmi_cast<InputStream>(This_);
  ret = This->read_boolean();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InputStream_method_read_char__C_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InputStream* This = dmi_cast<InputStream>(This_);
  ret = This->read_char();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InputStream_method_read_double__D_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InputStream* This = dmi_cast<InputStream>(This_);
  ret = This->read_double();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InputStream_method_read_float__F_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InputStream* This = dmi_cast<InputStream>(This_);
  ret = This->read_float();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InputStream_method_read_fq_object_I_L_acdk_lang_RObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InputStream* This = dmi_cast<InputStream>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->InputStream::read_fq_object(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->read_fq_object(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InputStream_method_read_long__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InputStream* This = dmi_cast<InputStream>(This_);
  ret = This->read_long();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InputStream_method_read_longlong__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InputStream* This = dmi_cast<InputStream>(This_);
  ret = This->read_longlong();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InputStream_method_read_octet__B_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InputStream* This = dmi_cast<InputStream>(This_);
  ret = This->read_octet();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InputStream_method_read_short__S_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InputStream* This = dmi_cast<InputStream>(This_);
  ret = This->read_short();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InputStream_method_read_string__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InputStream* This = dmi_cast<InputStream>(This_);
    ret = (::acdk::lang::RObject)This->read_string();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InputStream_method_read_ulong__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InputStream* This = dmi_cast<InputStream>(This_);
  ret = This->read_ulong();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InputStream_method_read_ushort__S_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InputStream* This = dmi_cast<InputStream>(This_);
  ret = This->read_ushort();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InputStream_method_read_value__L_acdk_lang_RObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InputStream* This = dmi_cast<InputStream>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->InputStream::read_value();
    else
        ret = (::acdk::lang::RObject)This->read_value();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InputStream_method_read_value_INL_acdk_lang_RString__L_acdk_lang_RObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InputStream* This = dmi_cast<InputStream>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->InputStream::read_value((::acdk::lang::RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->read_value((::acdk::lang::RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InputStream_method_read_value_INL_acdk_lang_RClass__L_acdk_lang_RObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InputStream* This = dmi_cast<InputStream>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->InputStream::read_value((::acdk::lang::RClass)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->read_value((::acdk::lang::RClass)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InputStream_method_read_value_INL_acdk_lang_RObject__L_acdk_lang_RObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InputStream* This = dmi_cast<InputStream>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->InputStream::read_value((::acdk::lang::RObject)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->read_value((::acdk::lang::RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InputStream_method_read_wchar__C_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InputStream* This = dmi_cast<InputStream>(This_);
  ret = This->read_wchar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InputStream_method_setEndian_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InputStream* This = dmi_cast<InputStream>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->InputStream::setEndian((Endian)args[0].getIntVar());
    else
        This->setEndian((Endian)args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  InputStream_fields__endian_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    InputStream* This = dmi_cast<InputStream>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->_endian), flags);
    else
      This->_endian = (Endian)var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo InputStream_fields__endian = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_endian", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  InputStream_MetainfoWrapper::InputStream_fields__endian_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _InputStream_fields[] = 
{
  &InputStream_fields__endian,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* InputStream_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InputStream_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InputStream_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_s_GetClass", // alternative name of method
  -1, // altlabelHashCode
  InputStream_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  InputStream_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  InputStream_MetainfoWrapper::InputStream_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InputStream_methods_InputStream__LRInputStream__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InputStream_methods_InputStream__LRInputStream__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InputStream_method_InputStream__LRInputStream_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "InputStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  InputStream::clazzInfo(), // return type
  "_0_InputStream", // alternative name of method
  -1, // altlabelHashCode
  InputStream_methods_InputStream__LRInputStream__args, // the arguments
  0, //arguments count
  InputStream_methods_InputStream__LRInputStream__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InputStream_methods_endian__LEndian__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InputStream_methods_endian__LEndian__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InputStream_method_endian__LEndian_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "endian", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1_endian", // alternative name of method
  -1, // altlabelHashCode
  InputStream_methods_endian__LEndian__args, // the arguments
  0, //arguments count
  InputStream_methods_endian__LEndian__exceptions, // the declared exceptions
  InputStream_MetainfoWrapper::InputStream_method_endian__LEndian__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InputStream_methods_orb__Lorg_omg_CORBA_RORB__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InputStream_methods_orb__Lorg_omg_CORBA_RORB__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InputStream_method_orb__Lorg_omg_CORBA_RORB_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "orb", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::omg::CORBA::RORB::clazzInfo(), // return type
  "_3_orb", // alternative name of method
  -1, // altlabelHashCode
  InputStream_methods_orb__Lorg_omg_CORBA_RORB__args, // the arguments
  0, //arguments count
  InputStream_methods_orb__Lorg_omg_CORBA_RORB__exceptions, // the declared exceptions
  InputStream_MetainfoWrapper::InputStream_method_orb__Lorg_omg_CORBA_RORB__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InputStream_methods_read_Object__L_org_omg_CORBA_RObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InputStream_methods_read_Object__L_org_omg_CORBA_RObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InputStream_method_read_Object__L_org_omg_CORBA_RObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "read_Object", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo(), // return type
  "_i_read_Object", // alternative name of method
  -1, // altlabelHashCode
  InputStream_methods_read_Object__L_org_omg_CORBA_RObject__args, // the arguments
  0, //arguments count
  InputStream_methods_read_Object__L_org_omg_CORBA_RObject__exceptions, // the declared exceptions
  InputStream_MetainfoWrapper::InputStream_method_read_Object__L_org_omg_CORBA_RObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo InputStream_methods_read_Object_INL_acdk_lang_RClass__L_org_omg_CORBA_RObject__arg_clz = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "clz", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* InputStream_methods_read_Object_INL_acdk_lang_RClass__L_org_omg_CORBA_RObject__args[] = 
{
  &InputStream_methods_read_Object_INL_acdk_lang_RClass__L_org_omg_CORBA_RObject__arg_clz,
  0
};

::acdk::lang::dmi::ClazzInfo* InputStream_methods_read_Object_INL_acdk_lang_RClass__L_org_omg_CORBA_RObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InputStream_method_read_Object_INL_acdk_lang_RClass__L_org_omg_CORBA_RObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "read_Object", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo(), // return type
  "_j_read_Object", // alternative name of method
  -1, // altlabelHashCode
  InputStream_methods_read_Object_INL_acdk_lang_RClass__L_org_omg_CORBA_RObject__args, // the arguments
  0, //arguments count
  InputStream_methods_read_Object_INL_acdk_lang_RClass__L_org_omg_CORBA_RObject__exceptions, // the declared exceptions
  InputStream_MetainfoWrapper::InputStream_method_read_Object_INL_acdk_lang_RClass__L_org_omg_CORBA_RObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InputStream_methods_read_abstract_interface__L_acdk_lang_RObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InputStream_methods_read_abstract_interface__L_acdk_lang_RObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InputStream_method_read_abstract_interface__L_acdk_lang_RObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "read_abstract_interface", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RObject::clazzInfo(), // return type
  "_k_read_abstract_interface", // alternative name of method
  -1, // altlabelHashCode
  InputStream_methods_read_abstract_interface__L_acdk_lang_RObject__args, // the arguments
  0, //arguments count
  InputStream_methods_read_abstract_interface__L_acdk_lang_RObject__exceptions, // the declared exceptions
  InputStream_MetainfoWrapper::InputStream_method_read_abstract_interface__L_acdk_lang_RObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo InputStream_methods_read_abstract_interface_INL_acdk_lang_RClass__L_acdk_lang_RObject__arg_clz = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "clz", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* InputStream_methods_read_abstract_interface_INL_acdk_lang_RClass__L_acdk_lang_RObject__args[] = 
{
  &InputStream_methods_read_abstract_interface_INL_acdk_lang_RClass__L_acdk_lang_RObject__arg_clz,
  0
};

::acdk::lang::dmi::ClazzInfo* InputStream_methods_read_abstract_interface_INL_acdk_lang_RClass__L_acdk_lang_RObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InputStream_method_read_abstract_interface_INL_acdk_lang_RClass__L_acdk_lang_RObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "read_abstract_interface", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RObject::clazzInfo(), // return type
  "_l_read_abstract_interface", // alternative name of method
  -1, // altlabelHashCode
  InputStream_methods_read_abstract_interface_INL_acdk_lang_RClass__L_acdk_lang_RObject__args, // the arguments
  0, //arguments count
  InputStream_methods_read_abstract_interface_INL_acdk_lang_RClass__L_acdk_lang_RObject__exceptions, // the declared exceptions
  InputStream_MetainfoWrapper::InputStream_method_read_abstract_interface_INL_acdk_lang_RClass__L_acdk_lang_RObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo InputStream_methods_read_acdk_object_INL_acdk_lang_RClass__L_acdk_lang_RObject__arg_clz = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "clz", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* InputStream_methods_read_acdk_object_INL_acdk_lang_RClass__L_acdk_lang_RObject__args[] = 
{
  &InputStream_methods_read_acdk_object_INL_acdk_lang_RClass__L_acdk_lang_RObject__arg_clz,
  0
};

::acdk::lang::dmi::ClazzInfo* InputStream_methods_read_acdk_object_INL_acdk_lang_RClass__L_acdk_lang_RObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InputStream_method_read_acdk_object_INL_acdk_lang_RClass__L_acdk_lang_RObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "read_acdk_object", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RObject::clazzInfo(), // return type
  "_h_read_acdk_object", // alternative name of method
  -1, // altlabelHashCode
  InputStream_methods_read_acdk_object_INL_acdk_lang_RClass__L_acdk_lang_RObject__args, // the arguments
  0, //arguments count
  InputStream_methods_read_acdk_object_INL_acdk_lang_RClass__L_acdk_lang_RObject__exceptions, // the declared exceptions
  InputStream_MetainfoWrapper::InputStream_method_read_acdk_object_INL_acdk_lang_RClass__L_acdk_lang_RObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InputStream_methods_read_boolean__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InputStream_methods_read_boolean__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InputStream_method_read_boolean__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "read_boolean", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_read_boolean", // alternative name of method
  -1, // altlabelHashCode
  InputStream_methods_read_boolean__Z_args, // the arguments
  0, //arguments count
  InputStream_methods_read_boolean__Z_exceptions, // the declared exceptions
  InputStream_MetainfoWrapper::InputStream_method_read_boolean__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InputStream_methods_read_char__C_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InputStream_methods_read_char__C_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InputStream_method_read_char__C = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "read_char", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz(), // return type
  "_5_read_char", // alternative name of method
  -1, // altlabelHashCode
  InputStream_methods_read_char__C_args, // the arguments
  0, //arguments count
  InputStream_methods_read_char__C_exceptions, // the declared exceptions
  InputStream_MetainfoWrapper::InputStream_method_read_char__C_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InputStream_methods_read_double__D_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InputStream_methods_read_double__D_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InputStream_method_read_double__D = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "read_double", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(), // return type
  "_f_read_double", // alternative name of method
  -1, // altlabelHashCode
  InputStream_methods_read_double__D_args, // the arguments
  0, //arguments count
  InputStream_methods_read_double__D_exceptions, // the declared exceptions
  InputStream_MetainfoWrapper::InputStream_method_read_double__D_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InputStream_methods_read_float__F_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InputStream_methods_read_float__F_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InputStream_method_read_float__F = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "read_float", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz(), // return type
  "_e_read_float", // alternative name of method
  -1, // altlabelHashCode
  InputStream_methods_read_float__F_args, // the arguments
  0, //arguments count
  InputStream_methods_read_float__F_exceptions, // the declared exceptions
  InputStream_MetainfoWrapper::InputStream_method_read_float__F_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo InputStream_methods_read_fq_object_I_L_acdk_lang_RObject__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* InputStream_methods_read_fq_object_I_L_acdk_lang_RObject__args[] = 
{
  &InputStream_methods_read_fq_object_I_L_acdk_lang_RObject__arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* InputStream_methods_read_fq_object_I_L_acdk_lang_RObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InputStream_method_read_fq_object_I_L_acdk_lang_RObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "read_fq_object", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RObject::clazzInfo(), // return type
  "_r_read_fq_object", // alternative name of method
  -1, // altlabelHashCode
  InputStream_methods_read_fq_object_I_L_acdk_lang_RObject__args, // the arguments
  0, //arguments count
  InputStream_methods_read_fq_object_I_L_acdk_lang_RObject__exceptions, // the declared exceptions
  InputStream_MetainfoWrapper::InputStream_method_read_fq_object_I_L_acdk_lang_RObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InputStream_methods_read_long__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InputStream_methods_read_long__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InputStream_method_read_long__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "read_long", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_a_read_long", // alternative name of method
  -1, // altlabelHashCode
  InputStream_methods_read_long__I_args, // the arguments
  0, //arguments count
  InputStream_methods_read_long__I_exceptions, // the declared exceptions
  InputStream_MetainfoWrapper::InputStream_method_read_long__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InputStream_methods_read_longlong__J_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InputStream_methods_read_longlong__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InputStream_method_read_longlong__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "read_longlong", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_c_read_longlong", // alternative name of method
  -1, // altlabelHashCode
  InputStream_methods_read_longlong__J_args, // the arguments
  0, //arguments count
  InputStream_methods_read_longlong__J_exceptions, // the declared exceptions
  InputStream_MetainfoWrapper::InputStream_method_read_longlong__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InputStream_methods_read_octet__B_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InputStream_methods_read_octet__B_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InputStream_method_read_octet__B = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "read_octet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz(), // return type
  "_7_read_octet", // alternative name of method
  -1, // altlabelHashCode
  InputStream_methods_read_octet__B_args, // the arguments
  0, //arguments count
  InputStream_methods_read_octet__B_exceptions, // the declared exceptions
  InputStream_MetainfoWrapper::InputStream_method_read_octet__B_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InputStream_methods_read_short__S_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InputStream_methods_read_short__S_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InputStream_method_read_short__S = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "read_short", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(), // return type
  "_8_read_short", // alternative name of method
  -1, // altlabelHashCode
  InputStream_methods_read_short__S_args, // the arguments
  0, //arguments count
  InputStream_methods_read_short__S_exceptions, // the declared exceptions
  InputStream_MetainfoWrapper::InputStream_method_read_short__S_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InputStream_methods_read_string__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InputStream_methods_read_string__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InputStream_method_read_string__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "read_string", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_g_read_string", // alternative name of method
  -1, // altlabelHashCode
  InputStream_methods_read_string__LRString__args, // the arguments
  0, //arguments count
  InputStream_methods_read_string__LRString__exceptions, // the declared exceptions
  InputStream_MetainfoWrapper::InputStream_method_read_string__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InputStream_methods_read_ulong__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InputStream_methods_read_ulong__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InputStream_method_read_ulong__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "read_ulong", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_b_read_ulong", // alternative name of method
  -1, // altlabelHashCode
  InputStream_methods_read_ulong__I_args, // the arguments
  0, //arguments count
  InputStream_methods_read_ulong__I_exceptions, // the declared exceptions
  InputStream_MetainfoWrapper::InputStream_method_read_ulong__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InputStream_methods_read_ushort__S_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InputStream_methods_read_ushort__S_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InputStream_method_read_ushort__S = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "read_ushort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(), // return type
  "_9_read_ushort", // alternative name of method
  -1, // altlabelHashCode
  InputStream_methods_read_ushort__S_args, // the arguments
  0, //arguments count
  InputStream_methods_read_ushort__S_exceptions, // the declared exceptions
  InputStream_MetainfoWrapper::InputStream_method_read_ushort__S_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InputStream_methods_read_value__L_acdk_lang_RObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InputStream_methods_read_value__L_acdk_lang_RObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InputStream_method_read_value__L_acdk_lang_RObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "read_value", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RObject::clazzInfo(), // return type
  "_m_read_value", // alternative name of method
  -1, // altlabelHashCode
  InputStream_methods_read_value__L_acdk_lang_RObject__args, // the arguments
  0, //arguments count
  InputStream_methods_read_value__L_acdk_lang_RObject__exceptions, // the declared exceptions
  InputStream_MetainfoWrapper::InputStream_method_read_value__L_acdk_lang_RObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo InputStream_methods_read_value_INL_acdk_lang_RString__L_acdk_lang_RObject__arg_rep_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rep_id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* InputStream_methods_read_value_INL_acdk_lang_RString__L_acdk_lang_RObject__args[] = 
{
  &InputStream_methods_read_value_INL_acdk_lang_RString__L_acdk_lang_RObject__arg_rep_id,
  0
};

::acdk::lang::dmi::ClazzInfo* InputStream_methods_read_value_INL_acdk_lang_RString__L_acdk_lang_RObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InputStream_method_read_value_INL_acdk_lang_RString__L_acdk_lang_RObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "read_value", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RObject::clazzInfo(), // return type
  "_n_read_value", // alternative name of method
  -1, // altlabelHashCode
  InputStream_methods_read_value_INL_acdk_lang_RString__L_acdk_lang_RObject__args, // the arguments
  0, //arguments count
  InputStream_methods_read_value_INL_acdk_lang_RString__L_acdk_lang_RObject__exceptions, // the declared exceptions
  InputStream_MetainfoWrapper::InputStream_method_read_value_INL_acdk_lang_RString__L_acdk_lang_RObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo InputStream_methods_read_value_INL_acdk_lang_RClass__L_acdk_lang_RObject__arg_clz = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "clz", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* InputStream_methods_read_value_INL_acdk_lang_RClass__L_acdk_lang_RObject__args[] = 
{
  &InputStream_methods_read_value_INL_acdk_lang_RClass__L_acdk_lang_RObject__arg_clz,
  0
};

::acdk::lang::dmi::ClazzInfo* InputStream_methods_read_value_INL_acdk_lang_RClass__L_acdk_lang_RObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InputStream_method_read_value_INL_acdk_lang_RClass__L_acdk_lang_RObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "read_value", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RObject::clazzInfo(), // return type
  "_o_read_value", // alternative name of method
  -1, // altlabelHashCode
  InputStream_methods_read_value_INL_acdk_lang_RClass__L_acdk_lang_RObject__args, // the arguments
  0, //arguments count
  InputStream_methods_read_value_INL_acdk_lang_RClass__L_acdk_lang_RObject__exceptions, // the declared exceptions
  InputStream_MetainfoWrapper::InputStream_method_read_value_INL_acdk_lang_RClass__L_acdk_lang_RObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo InputStream_methods_read_value_INL_acdk_lang_RObject__L_acdk_lang_RObject__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* InputStream_methods_read_value_INL_acdk_lang_RObject__L_acdk_lang_RObject__args[] = 
{
  &InputStream_methods_read_value_INL_acdk_lang_RObject__L_acdk_lang_RObject__arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* InputStream_methods_read_value_INL_acdk_lang_RObject__L_acdk_lang_RObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InputStream_method_read_value_INL_acdk_lang_RObject__L_acdk_lang_RObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "read_value", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RObject::clazzInfo(), // return type
  "_p_read_value", // alternative name of method
  -1, // altlabelHashCode
  InputStream_methods_read_value_INL_acdk_lang_RObject__L_acdk_lang_RObject__args, // the arguments
  0, //arguments count
  InputStream_methods_read_value_INL_acdk_lang_RObject__L_acdk_lang_RObject__exceptions, // the declared exceptions
  InputStream_MetainfoWrapper::InputStream_method_read_value_INL_acdk_lang_RObject__L_acdk_lang_RObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InputStream_methods_read_wchar__C_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InputStream_methods_read_wchar__C_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InputStream_method_read_wchar__C = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "read_wchar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz(), // return type
  "_6_read_wchar", // alternative name of method
  -1, // altlabelHashCode
  InputStream_methods_read_wchar__C_args, // the arguments
  0, //arguments count
  InputStream_methods_read_wchar__C_exceptions, // the declared exceptions
  InputStream_MetainfoWrapper::InputStream_method_read_wchar__C_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo InputStream_methods_setEndian_I_V_arg_en = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "en", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* InputStream_methods_setEndian_I_V_args[] = 
{
  &InputStream_methods_setEndian_I_V_arg_en,
  0
};

::acdk::lang::dmi::ClazzInfo* InputStream_methods_setEndian_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InputStream_method_setEndian_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setEndian", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_setEndian", // alternative name of method
  -1, // altlabelHashCode
  InputStream_methods_setEndian_I_V_args, // the arguments
  0, //arguments count
  InputStream_methods_setEndian_I_V_exceptions, // the declared exceptions
  InputStream_MetainfoWrapper::InputStream_method_setEndian_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _InputStream_methods[] = 
{
  &InputStream_method_GetClass__L_acdk_lang_RClass_,
  &InputStream_method_InputStream__LRInputStream_,
  &InputStream_method_endian__LEndian_,
  &InputStream_method_orb__Lorg_omg_CORBA_RORB_,
  &InputStream_method_read_Object__L_org_omg_CORBA_RObject_,
  &InputStream_method_read_Object_INL_acdk_lang_RClass__L_org_omg_CORBA_RObject_,
  &InputStream_method_read_abstract_interface__L_acdk_lang_RObject_,
  &InputStream_method_read_abstract_interface_INL_acdk_lang_RClass__L_acdk_lang_RObject_,
  &InputStream_method_read_acdk_object_INL_acdk_lang_RClass__L_acdk_lang_RObject_,
  &InputStream_method_read_boolean__Z,
  &InputStream_method_read_char__C,
  &InputStream_method_read_double__D,
  &InputStream_method_read_float__F,
  &InputStream_method_read_fq_object_I_L_acdk_lang_RObject_,
  &InputStream_method_read_long__I,
  &InputStream_method_read_longlong__J,
  &InputStream_method_read_octet__B,
  &InputStream_method_read_short__S,
  &InputStream_method_read_string__LRString_,
  &InputStream_method_read_ulong__I,
  &InputStream_method_read_ushort__S,
  &InputStream_method_read_value__L_acdk_lang_RObject_,
  &InputStream_method_read_value_INL_acdk_lang_RString__L_acdk_lang_RObject_,
  &InputStream_method_read_value_INL_acdk_lang_RClass__L_acdk_lang_RObject_,
  &InputStream_method_read_value_INL_acdk_lang_RObject__L_acdk_lang_RObject_,
  &InputStream_method_read_wchar__C,
  &InputStream_method_setEndian_I_V,
  0
};


struct InputStream_MetaInfoInitializer
{  InputStream_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = InputStream::clazzInfo();
    ci->fields =  _InputStream_fields;
    ci->methods =  _InputStream_methods;
    ci->_scopeParent = org_omg_CORBA_portable_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
InputStream_MetaInfoInitializer InputStream_MetaInfoInitializer_staticinstance__;


struct InputStream_clazzInfo_ClazzAttributesResInitializer2
{
  InputStream_clazzInfo_ClazzAttributesResInitializer2()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&InputStream_method_endian__LEndian_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)EndianMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&InputStream_methods_setEndian_I_V_arg_en, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)EndianMetaInf::GetEnumInfo()));
  }
};

InputStream_clazzInfo_ClazzAttributesResInitializer2 InputStream_clazzInfo_ClazzAttributesResInitializer2_instance;



} // namespace org
} // namespace omg
} // namespace CORBA
} // namespace portable


namespace org { 
namespace omg { 
namespace CORBA { 
namespace portable { 


//static
::acdk::lang::RObject
InvokeHandler_create_array(int length)
{
  return new ObjectArrayImpl<RInvokeHandler>(length);
}

//static
::acdk::lang::RObject
InvokeHandler_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class InvokeHandler_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InvokeHandler_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)InvokeHandler::GetClass();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _InvokeHandler_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* InvokeHandler_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InvokeHandler_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InvokeHandler_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_0_GetClass", // alternative name of method
  -1, // altlabelHashCode
  InvokeHandler_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  InvokeHandler_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  InvokeHandler_MetainfoWrapper::InvokeHandler_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _InvokeHandler_methods[] = 
{
  &InvokeHandler_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct InvokeHandler_MetaInfoInitializer
{  InvokeHandler_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = InvokeHandler::clazzInfo();
    ci->fields =  _InvokeHandler_fields;
    ci->methods =  _InvokeHandler_methods;
    ci->_scopeParent = org_omg_CORBA_portable_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
InvokeHandler_MetaInfoInitializer InvokeHandler_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace omg
} // namespace CORBA
} // namespace portable


namespace org { 
namespace omg { 
namespace CORBA { 
namespace portable { 


//static
::acdk::lang::RObject
ObjectImpl_create_array(int length)
{
  return new ObjectArrayImpl<RObjectImpl>(length);
}

//static
::acdk::lang::RObject
ObjectImpl_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ObjectImpl_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectImpl_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ObjectImpl::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectImpl_method_ObjectImpl__LRObjectImpl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ObjectImpl();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectImpl_method__get_delegate__LRDelegate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectImpl* This = dmi_cast<ObjectImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ObjectImpl::_get_delegate();
    else
        ret = (::acdk::lang::RObject)This->_get_delegate();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectImpl_method__invoke_INLROutputStream__LRInputStream__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectImpl* This = dmi_cast<ObjectImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ObjectImpl::_invoke((ROutputStream)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->_invoke((ROutputStream)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectImpl_method__releaseReply_INL_org_omg_CORBA_portable_RInputStream__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectImpl* This = dmi_cast<ObjectImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ObjectImpl::_releaseReply((::org::omg::CORBA::portable::RInputStream)args[0].getObjectVar());
    else
        This->_releaseReply((::org::omg::CORBA::portable::RInputStream)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectImpl_method__request_INLRString_Z_LROutputStream__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectImpl* This = dmi_cast<ObjectImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ObjectImpl::_request((RString)args[0].getObjectVar(), args[1].getBoolVar());
    else
        ret = (::acdk::lang::RObject)This->_request((RString)args[0].getObjectVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectImpl_method__set_delegate_INLRDelegate__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectImpl* This = dmi_cast<ObjectImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ObjectImpl::_set_delegate((RDelegate)args[0].getObjectVar());
    else
        This->_set_delegate((RDelegate)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectImpl_method_duplicate__L_org_omg_CORBA_RObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectImpl* This = dmi_cast<ObjectImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ObjectImpl::duplicate();
    else
        ret = (::acdk::lang::RObject)This->duplicate();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectImpl_method_hash_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectImpl* This = dmi_cast<ObjectImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ObjectImpl::hash(args[0].getIntVar());
    else
      ret = This->hash(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectImpl_method_is_a_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectImpl* This = dmi_cast<ObjectImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ObjectImpl::is_a((RString)args[0].getObjectVar());
    else
      ret = This->is_a((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectImpl_method_is_equivalent_INL_org_omg_CORBA_RObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectImpl* This = dmi_cast<ObjectImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ObjectImpl::is_equivalent((::org::omg::CORBA::RObject)args[0].getObjectVar());
    else
      ret = This->is_equivalent((::org::omg::CORBA::RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectImpl_method_is_local__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectImpl* This = dmi_cast<ObjectImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ObjectImpl::is_local();
    else
      ret = This->is_local();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectImpl_method_is_nil__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectImpl* This = dmi_cast<ObjectImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ObjectImpl::is_nil();
    else
      ret = This->is_nil();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectImpl_method_non_existent__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectImpl* This = dmi_cast<ObjectImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ObjectImpl::non_existent();
    else
      ret = This->non_existent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectImpl_method_release__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectImpl* This = dmi_cast<ObjectImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ObjectImpl::release();
    else
        This->release();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ObjectImpl_fields__delegate_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ObjectImpl* This = dmi_cast<ObjectImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_delegate, flags);
    else
      This->_delegate = (RDelegate)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ObjectImpl_fields__orb_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ObjectImpl* This = dmi_cast<ObjectImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_orb, flags);
    else
      This->_orb = (::org::omg::CORBA::RORB)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ObjectImpl_fields__delegate = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo | 0x200000,
  0, //AttributesRes
  "_delegate", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDelegate::clazzInfo(),
  ObjectImpl_MetainfoWrapper::ObjectImpl_fields__delegate_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ObjectImpl_fields__orb = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_orb", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RORB::clazzInfo(),
  ObjectImpl_MetainfoWrapper::ObjectImpl_fields__orb_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ObjectImpl_fields[] = 
{
  &ObjectImpl_fields__delegate,
  &ObjectImpl_fields__orb,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectImpl_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectImpl_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectImpl_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_e_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ObjectImpl_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ObjectImpl_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ObjectImpl_MetainfoWrapper::ObjectImpl_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectImpl_methods_ObjectImpl__LRObjectImpl__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectImpl_methods_ObjectImpl__LRObjectImpl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectImpl_method_ObjectImpl__LRObjectImpl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ObjectImpl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ObjectImpl::clazzInfo(), // return type
  "_0_ObjectImpl", // alternative name of method
  -1, // altlabelHashCode
  ObjectImpl_methods_ObjectImpl__LRObjectImpl__args, // the arguments
  0, //arguments count
  ObjectImpl_methods_ObjectImpl__LRObjectImpl__exceptions, // the declared exceptions
  ObjectImpl_MetainfoWrapper::ObjectImpl_method_ObjectImpl__LRObjectImpl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectImpl_methods__get_delegate__LRDelegate__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectImpl_methods__get_delegate__LRDelegate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectImpl_method__get_delegate__LRDelegate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_get_delegate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDelegate::clazzInfo(), // return type
  "_1__get_delegate", // alternative name of method
  -1, // altlabelHashCode
  ObjectImpl_methods__get_delegate__LRDelegate__args, // the arguments
  0, //arguments count
  ObjectImpl_methods__get_delegate__LRDelegate__exceptions, // the declared exceptions
  ObjectImpl_MetainfoWrapper::ObjectImpl_method__get_delegate__LRDelegate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectImpl_methods__invoke_INLROutputStream__LRInputStream__arg_output = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "output", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ROutputStream::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectImpl_methods__invoke_INLROutputStream__LRInputStream__args[] = 
{
  &ObjectImpl_methods__invoke_INLROutputStream__LRInputStream__arg_output,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectImpl_methods__invoke_INLROutputStream__LRInputStream__exceptions[] =
{
  RApplicationException::clazzInfo(), 
  RRemarshalException::clazzInfo(), 
  0
};

void ObjectImpl__invoke_INLROutputStream__LRInputStream__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ApplicationException) == true)
    THROW_INSTANCE( RApplicationException(ex));
 if (instanceof(ex, RemarshalException) == true)
    THROW_INSTANCE( RRemarshalException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ObjectImpl_method__invoke_INLROutputStream__LRInputStream_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_invoke", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInputStream::clazzInfo(), // return type
  "_b__invoke", // alternative name of method
  -1, // altlabelHashCode
  ObjectImpl_methods__invoke_INLROutputStream__LRInputStream__args, // the arguments
  0, //arguments count
  ObjectImpl_methods__invoke_INLROutputStream__LRInputStream__exceptions, // the declared exceptions
  ObjectImpl_MetainfoWrapper::ObjectImpl_method__invoke_INLROutputStream__LRInputStream__dispatch, // invoke this method
  ObjectImpl__invoke_INLROutputStream__LRInputStream__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectImpl_methods__releaseReply_INL_org_omg_CORBA_portable_RInputStream__V_arg_input = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "input", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::portable::RInputStream::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectImpl_methods__releaseReply_INL_org_omg_CORBA_portable_RInputStream__V_args[] = 
{
  &ObjectImpl_methods__releaseReply_INL_org_omg_CORBA_portable_RInputStream__V_arg_input,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectImpl_methods__releaseReply_INL_org_omg_CORBA_portable_RInputStream__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectImpl_method__releaseReply_INL_org_omg_CORBA_portable_RInputStream__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_releaseReply", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c__releaseReply", // alternative name of method
  -1, // altlabelHashCode
  ObjectImpl_methods__releaseReply_INL_org_omg_CORBA_portable_RInputStream__V_args, // the arguments
  0, //arguments count
  ObjectImpl_methods__releaseReply_INL_org_omg_CORBA_portable_RInputStream__V_exceptions, // the declared exceptions
  ObjectImpl_MetainfoWrapper::ObjectImpl_method__releaseReply_INL_org_omg_CORBA_portable_RInputStream__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectImpl_methods__request_INLRString_Z_LROutputStream__arg_operation = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "operation", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectImpl_methods__request_INLRString_Z_LROutputStream__arg_responseExpected = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "responseExpected", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectImpl_methods__request_INLRString_Z_LROutputStream__args[] = 
{
  &ObjectImpl_methods__request_INLRString_Z_LROutputStream__arg_operation,
  &ObjectImpl_methods__request_INLRString_Z_LROutputStream__arg_responseExpected,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectImpl_methods__request_INLRString_Z_LROutputStream__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectImpl_method__request_INLRString_Z_LROutputStream_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_request", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ROutputStream::clazzInfo(), // return type
  "_a__request", // alternative name of method
  -1, // altlabelHashCode
  ObjectImpl_methods__request_INLRString_Z_LROutputStream__args, // the arguments
  0, //arguments count
  ObjectImpl_methods__request_INLRString_Z_LROutputStream__exceptions, // the declared exceptions
  ObjectImpl_MetainfoWrapper::ObjectImpl_method__request_INLRString_Z_LROutputStream__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectImpl_methods__set_delegate_INLRDelegate__V_arg_del = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "del", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDelegate::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectImpl_methods__set_delegate_INLRDelegate__V_args[] = 
{
  &ObjectImpl_methods__set_delegate_INLRDelegate__V_arg_del,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectImpl_methods__set_delegate_INLRDelegate__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectImpl_method__set_delegate_INLRDelegate__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_set_delegate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2__set_delegate", // alternative name of method
  -1, // altlabelHashCode
  ObjectImpl_methods__set_delegate_INLRDelegate__V_args, // the arguments
  0, //arguments count
  ObjectImpl_methods__set_delegate_INLRDelegate__V_exceptions, // the declared exceptions
  ObjectImpl_MetainfoWrapper::ObjectImpl_method__set_delegate_INLRDelegate__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectImpl_methods_duplicate__L_org_omg_CORBA_RObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectImpl_methods_duplicate__L_org_omg_CORBA_RObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectImpl_method_duplicate__L_org_omg_CORBA_RObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "duplicate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo(), // return type
  "_4_duplicate", // alternative name of method
  -1, // altlabelHashCode
  ObjectImpl_methods_duplicate__L_org_omg_CORBA_RObject__args, // the arguments
  0, //arguments count
  ObjectImpl_methods_duplicate__L_org_omg_CORBA_RObject__exceptions, // the declared exceptions
  ObjectImpl_MetainfoWrapper::ObjectImpl_method_duplicate__L_org_omg_CORBA_RObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectImpl_methods_hash_I_I_arg_maximum = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "maximum", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectImpl_methods_hash_I_I_args[] = 
{
  &ObjectImpl_methods_hash_I_I_arg_maximum,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectImpl_methods_hash_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectImpl_method_hash_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hash", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_9_hash", // alternative name of method
  -1, // altlabelHashCode
  ObjectImpl_methods_hash_I_I_args, // the arguments
  0, //arguments count
  ObjectImpl_methods_hash_I_I_exceptions, // the declared exceptions
  ObjectImpl_MetainfoWrapper::ObjectImpl_method_hash_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectImpl_methods_is_a_INLRString__Z_arg_logical_type_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "logical_type_id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectImpl_methods_is_a_INLRString__Z_args[] = 
{
  &ObjectImpl_methods_is_a_INLRString__Z_arg_logical_type_id,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectImpl_methods_is_a_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectImpl_method_is_a_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "is_a", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_is_a", // alternative name of method
  -1, // altlabelHashCode
  ObjectImpl_methods_is_a_INLRString__Z_args, // the arguments
  0, //arguments count
  ObjectImpl_methods_is_a_INLRString__Z_exceptions, // the declared exceptions
  ObjectImpl_MetainfoWrapper::ObjectImpl_method_is_a_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectImpl_methods_is_equivalent_INL_org_omg_CORBA_RObject__Z_arg_other_object = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other_object", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectImpl_methods_is_equivalent_INL_org_omg_CORBA_RObject__Z_args[] = 
{
  &ObjectImpl_methods_is_equivalent_INL_org_omg_CORBA_RObject__Z_arg_other_object,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectImpl_methods_is_equivalent_INL_org_omg_CORBA_RObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectImpl_method_is_equivalent_INL_org_omg_CORBA_RObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "is_equivalent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_8_is_equivalent", // alternative name of method
  -1, // altlabelHashCode
  ObjectImpl_methods_is_equivalent_INL_org_omg_CORBA_RObject__Z_args, // the arguments
  0, //arguments count
  ObjectImpl_methods_is_equivalent_INL_org_omg_CORBA_RObject__Z_exceptions, // the declared exceptions
  ObjectImpl_MetainfoWrapper::ObjectImpl_method_is_equivalent_INL_org_omg_CORBA_RObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectImpl_methods_is_local__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectImpl_methods_is_local__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectImpl_method_is_local__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "is_local", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_d_is_local", // alternative name of method
  -1, // altlabelHashCode
  ObjectImpl_methods_is_local__Z_args, // the arguments
  0, //arguments count
  ObjectImpl_methods_is_local__Z_exceptions, // the declared exceptions
  ObjectImpl_MetainfoWrapper::ObjectImpl_method_is_local__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectImpl_methods_is_nil__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectImpl_methods_is_nil__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectImpl_method_is_nil__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "is_nil", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_is_nil", // alternative name of method
  -1, // altlabelHashCode
  ObjectImpl_methods_is_nil__Z_args, // the arguments
  0, //arguments count
  ObjectImpl_methods_is_nil__Z_exceptions, // the declared exceptions
  ObjectImpl_MetainfoWrapper::ObjectImpl_method_is_nil__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectImpl_methods_non_existent__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectImpl_methods_non_existent__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectImpl_method_non_existent__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "non_existent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_non_existent", // alternative name of method
  -1, // altlabelHashCode
  ObjectImpl_methods_non_existent__Z_args, // the arguments
  0, //arguments count
  ObjectImpl_methods_non_existent__Z_exceptions, // the declared exceptions
  ObjectImpl_MetainfoWrapper::ObjectImpl_method_non_existent__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectImpl_methods_release__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectImpl_methods_release__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectImpl_method_release__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "release", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_release", // alternative name of method
  -1, // altlabelHashCode
  ObjectImpl_methods_release__V_args, // the arguments
  0, //arguments count
  ObjectImpl_methods_release__V_exceptions, // the declared exceptions
  ObjectImpl_MetainfoWrapper::ObjectImpl_method_release__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ObjectImpl_methods[] = 
{
  &ObjectImpl_method_GetClass__L_acdk_lang_RClass_,
  &ObjectImpl_method_ObjectImpl__LRObjectImpl_,
  &ObjectImpl_method__get_delegate__LRDelegate_,
  &ObjectImpl_method__invoke_INLROutputStream__LRInputStream_,
  &ObjectImpl_method__releaseReply_INL_org_omg_CORBA_portable_RInputStream__V,
  &ObjectImpl_method__request_INLRString_Z_LROutputStream_,
  &ObjectImpl_method__set_delegate_INLRDelegate__V,
  &ObjectImpl_method_duplicate__L_org_omg_CORBA_RObject_,
  &ObjectImpl_method_hash_I_I,
  &ObjectImpl_method_is_a_INLRString__Z,
  &ObjectImpl_method_is_equivalent_INL_org_omg_CORBA_RObject__Z,
  &ObjectImpl_method_is_local__Z,
  &ObjectImpl_method_is_nil__Z,
  &ObjectImpl_method_non_existent__Z,
  &ObjectImpl_method_release__V,
  0
};


struct ObjectImpl_MetaInfoInitializer
{  ObjectImpl_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ObjectImpl::clazzInfo();
    ci->fields =  _ObjectImpl_fields;
    ci->methods =  _ObjectImpl_methods;
    ci->_scopeParent = org_omg_CORBA_portable_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ObjectImpl_MetaInfoInitializer ObjectImpl_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace omg
} // namespace CORBA
} // namespace portable


namespace org { 
namespace omg { 
namespace CORBA { 
namespace portable { 


//static
::acdk::lang::RObject
OutputStream_create_array(int length)
{
  return new ObjectArrayImpl<ROutputStream>(length);
}

//static
::acdk::lang::RObject
OutputStream_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class OutputStream_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OutputStream_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)OutputStream::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OutputStream_method_create_input_stream__LRInputStream__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OutputStream* This = dmi_cast<OutputStream>(This_);
    ret = (::acdk::lang::RObject)This->create_input_stream();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OutputStream_method_orb__L_org_omg_CORBA_RORB__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OutputStream* This = dmi_cast<OutputStream>(This_);
    ret = (::acdk::lang::RObject)This->orb();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OutputStream_method_write_Object_INL_org_omg_CORBA_RObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OutputStream* This = dmi_cast<OutputStream>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->OutputStream::write_Object((::org::omg::CORBA::RObject)args[0].getObjectVar());
    else
        This->write_Object((::org::omg::CORBA::RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OutputStream_method_write_abstract_interface_INL_acdk_lang_RObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OutputStream* This = dmi_cast<OutputStream>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->OutputStream::write_abstract_interface((::acdk::lang::RObject)args[0].getObjectVar());
    else
        This->write_abstract_interface((::acdk::lang::RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OutputStream_method_write_acdk_object_INL_acdk_lang_RObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OutputStream* This = dmi_cast<OutputStream>(This_);
    This->write_acdk_object((::acdk::lang::RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OutputStream_method_write_boolean_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OutputStream* This = dmi_cast<OutputStream>(This_);
    This->write_boolean(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OutputStream_method_write_char_C_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OutputStream* This = dmi_cast<OutputStream>(This_);
    This->write_char(args[0].getCharVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OutputStream_method_write_double_D_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OutputStream* This = dmi_cast<OutputStream>(This_);
    This->write_double(args[0].getDoubleVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OutputStream_method_write_exception_INLRThrowable__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OutputStream* This = dmi_cast<OutputStream>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->OutputStream::write_exception((RThrowable)args[0].getObjectVar());
    else
        This->write_exception((RThrowable)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OutputStream_method_write_float_F_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OutputStream* This = dmi_cast<OutputStream>(This_);
    This->write_float(args[0].getFloatVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OutputStream_method_write_fq_object_INL_acdk_lang_RObject_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OutputStream* This = dmi_cast<OutputStream>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->OutputStream::write_fq_object((::acdk::lang::RObject)args[0].getObjectVar(), args[1].getIntVar());
    else
        This->write_fq_object((::acdk::lang::RObject)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OutputStream_method_write_long_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OutputStream* This = dmi_cast<OutputStream>(This_);
    This->write_long(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OutputStream_method_write_longlong_J_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OutputStream* This = dmi_cast<OutputStream>(This_);
    This->write_longlong(args[0].getLongVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OutputStream_method_write_octet_B_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OutputStream* This = dmi_cast<OutputStream>(This_);
    This->write_octet(args[0].getByteVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OutputStream_method_write_short_S_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OutputStream* This = dmi_cast<OutputStream>(This_);
    This->write_short(args[0].getShortVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OutputStream_method_write_string_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OutputStream* This = dmi_cast<OutputStream>(This_);
    This->write_string((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OutputStream_method_write_ulong_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OutputStream* This = dmi_cast<OutputStream>(This_);
    This->write_ulong(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OutputStream_method_write_ulonglong_J_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OutputStream* This = dmi_cast<OutputStream>(This_);
    This->write_ulonglong(args[0].getLongVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OutputStream_method_write_ushort_S_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OutputStream* This = dmi_cast<OutputStream>(This_);
    This->write_ushort(args[0].getShortVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OutputStream_method_write_value_INL_acdk_io_RSerializable__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OutputStream* This = dmi_cast<OutputStream>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->OutputStream::write_value((::acdk::io::RSerializable)args[0].getObjectVar());
    else
        This->write_value((::acdk::io::RSerializable)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OutputStream_method_write_value_INL_acdk_io_RSerializable_L_acdk_lang_RString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OutputStream* This = dmi_cast<OutputStream>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->OutputStream::write_value((::acdk::io::RSerializable)args[0].getObjectVar(), (::acdk::lang::RString)args[1].getObjectVar());
    else
        This->write_value((::acdk::io::RSerializable)args[0].getObjectVar(), (::acdk::lang::RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OutputStream_method_write_value_INL_acdk_io_RSerializable_L_acdk_lang_RClass__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OutputStream* This = dmi_cast<OutputStream>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->OutputStream::write_value((::acdk::io::RSerializable)args[0].getObjectVar(), (::acdk::lang::RClass)args[1].getObjectVar());
    else
        This->write_value((::acdk::io::RSerializable)args[0].getObjectVar(), (::acdk::lang::RClass)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OutputStream_method_write_wchar_C_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OutputStream* This = dmi_cast<OutputStream>(This_);
    This->write_wchar(args[0].getCharVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OutputStream_method_write_wstring_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OutputStream* This = dmi_cast<OutputStream>(This_);
    This->write_wstring((RString)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _OutputStream_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* OutputStream_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* OutputStream_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OutputStream_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_t_GetClass", // alternative name of method
  -1, // altlabelHashCode
  OutputStream_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  OutputStream_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  OutputStream_MetainfoWrapper::OutputStream_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* OutputStream_methods_create_input_stream__LRInputStream__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* OutputStream_methods_create_input_stream__LRInputStream__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OutputStream_method_create_input_stream__LRInputStream_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create_input_stream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInputStream::clazzInfo(), // return type
  "_5_create_input_stream", // alternative name of method
  -1, // altlabelHashCode
  OutputStream_methods_create_input_stream__LRInputStream__args, // the arguments
  0, //arguments count
  OutputStream_methods_create_input_stream__LRInputStream__exceptions, // the declared exceptions
  OutputStream_MetainfoWrapper::OutputStream_method_create_input_stream__LRInputStream__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* OutputStream_methods_orb__L_org_omg_CORBA_RORB__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* OutputStream_methods_orb__L_org_omg_CORBA_RORB__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OutputStream_method_orb__L_org_omg_CORBA_RORB_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "orb", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RORB::clazzInfo(), // return type
  "_4_orb", // alternative name of method
  -1, // altlabelHashCode
  OutputStream_methods_orb__L_org_omg_CORBA_RORB__args, // the arguments
  0, //arguments count
  OutputStream_methods_orb__L_org_omg_CORBA_RORB__exceptions, // the declared exceptions
  OutputStream_MetainfoWrapper::OutputStream_method_orb__L_org_omg_CORBA_RORB__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OutputStream_methods_write_Object_INL_org_omg_CORBA_RObject__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OutputStream_methods_write_Object_INL_org_omg_CORBA_RObject__V_args[] = 
{
  &OutputStream_methods_write_Object_INL_org_omg_CORBA_RObject__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* OutputStream_methods_write_Object_INL_org_omg_CORBA_RObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OutputStream_method_write_Object_INL_org_omg_CORBA_RObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "write_Object", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_l_write_Object", // alternative name of method
  -1, // altlabelHashCode
  OutputStream_methods_write_Object_INL_org_omg_CORBA_RObject__V_args, // the arguments
  0, //arguments count
  OutputStream_methods_write_Object_INL_org_omg_CORBA_RObject__V_exceptions, // the declared exceptions
  OutputStream_MetainfoWrapper::OutputStream_method_write_Object_INL_org_omg_CORBA_RObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OutputStream_methods_write_abstract_interface_INL_acdk_lang_RObject__V_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OutputStream_methods_write_abstract_interface_INL_acdk_lang_RObject__V_args[] = 
{
  &OutputStream_methods_write_abstract_interface_INL_acdk_lang_RObject__V_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* OutputStream_methods_write_abstract_interface_INL_acdk_lang_RObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OutputStream_method_write_abstract_interface_INL_acdk_lang_RObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "write_abstract_interface", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_q_write_abstract_interface", // alternative name of method
  -1, // altlabelHashCode
  OutputStream_methods_write_abstract_interface_INL_acdk_lang_RObject__V_args, // the arguments
  0, //arguments count
  OutputStream_methods_write_abstract_interface_INL_acdk_lang_RObject__V_exceptions, // the declared exceptions
  OutputStream_MetainfoWrapper::OutputStream_method_write_abstract_interface_INL_acdk_lang_RObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OutputStream_methods_write_acdk_object_INL_acdk_lang_RObject__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OutputStream_methods_write_acdk_object_INL_acdk_lang_RObject__V_args[] = 
{
  &OutputStream_methods_write_acdk_object_INL_acdk_lang_RObject__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* OutputStream_methods_write_acdk_object_INL_acdk_lang_RObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OutputStream_method_write_acdk_object_INL_acdk_lang_RObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "write_acdk_object", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_k_write_acdk_object", // alternative name of method
  -1, // altlabelHashCode
  OutputStream_methods_write_acdk_object_INL_acdk_lang_RObject__V_args, // the arguments
  0, //arguments count
  OutputStream_methods_write_acdk_object_INL_acdk_lang_RObject__V_exceptions, // the declared exceptions
  OutputStream_MetainfoWrapper::OutputStream_method_write_acdk_object_INL_acdk_lang_RObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OutputStream_methods_write_boolean_Z_V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OutputStream_methods_write_boolean_Z_V_args[] = 
{
  &OutputStream_methods_write_boolean_Z_V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* OutputStream_methods_write_boolean_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OutputStream_method_write_boolean_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "write_boolean", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_write_boolean", // alternative name of method
  -1, // altlabelHashCode
  OutputStream_methods_write_boolean_Z_V_args, // the arguments
  0, //arguments count
  OutputStream_methods_write_boolean_Z_V_exceptions, // the declared exceptions
  OutputStream_MetainfoWrapper::OutputStream_method_write_boolean_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OutputStream_methods_write_char_C_V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OutputStream_methods_write_char_C_V_args[] = 
{
  &OutputStream_methods_write_char_C_V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* OutputStream_methods_write_char_C_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OutputStream_method_write_char_C_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "write_char", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_write_char", // alternative name of method
  -1, // altlabelHashCode
  OutputStream_methods_write_char_C_V_args, // the arguments
  0, //arguments count
  OutputStream_methods_write_char_C_V_exceptions, // the declared exceptions
  OutputStream_MetainfoWrapper::OutputStream_method_write_char_C_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OutputStream_methods_write_double_D_V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OutputStream_methods_write_double_D_V_args[] = 
{
  &OutputStream_methods_write_double_D_V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* OutputStream_methods_write_double_D_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OutputStream_method_write_double_D_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "write_double", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_h_write_double", // alternative name of method
  -1, // altlabelHashCode
  OutputStream_methods_write_double_D_V_args, // the arguments
  0, //arguments count
  OutputStream_methods_write_double_D_V_exceptions, // the declared exceptions
  OutputStream_MetainfoWrapper::OutputStream_method_write_double_D_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OutputStream_methods_write_exception_INLRThrowable__V_arg_ex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThrowable::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OutputStream_methods_write_exception_INLRThrowable__V_args[] = 
{
  &OutputStream_methods_write_exception_INLRThrowable__V_arg_ex,
  0
};

::acdk::lang::dmi::ClazzInfo* OutputStream_methods_write_exception_INLRThrowable__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OutputStream_method_write_exception_INLRThrowable__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "write_exception", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_m_write_exception", // alternative name of method
  -1, // altlabelHashCode
  OutputStream_methods_write_exception_INLRThrowable__V_args, // the arguments
  0, //arguments count
  OutputStream_methods_write_exception_INLRThrowable__V_exceptions, // the declared exceptions
  OutputStream_MetainfoWrapper::OutputStream_method_write_exception_INLRThrowable__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OutputStream_methods_write_float_F_V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OutputStream_methods_write_float_F_V_args[] = 
{
  &OutputStream_methods_write_float_F_V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* OutputStream_methods_write_float_F_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OutputStream_method_write_float_F_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "write_float", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_write_float", // alternative name of method
  -1, // altlabelHashCode
  OutputStream_methods_write_float_F_V_args, // the arguments
  0, //arguments count
  OutputStream_methods_write_float_F_V_exceptions, // the declared exceptions
  OutputStream_MetainfoWrapper::OutputStream_method_write_float_F_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OutputStream_methods_write_fq_object_INL_acdk_lang_RObject_I_V_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo OutputStream_methods_write_fq_object_INL_acdk_lang_RObject_I_V_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OutputStream_methods_write_fq_object_INL_acdk_lang_RObject_I_V_args[] = 
{
  &OutputStream_methods_write_fq_object_INL_acdk_lang_RObject_I_V_arg_obj,
  &OutputStream_methods_write_fq_object_INL_acdk_lang_RObject_I_V_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* OutputStream_methods_write_fq_object_INL_acdk_lang_RObject_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OutputStream_method_write_fq_object_INL_acdk_lang_RObject_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "write_fq_object", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_s_write_fq_object", // alternative name of method
  -1, // altlabelHashCode
  OutputStream_methods_write_fq_object_INL_acdk_lang_RObject_I_V_args, // the arguments
  0, //arguments count
  OutputStream_methods_write_fq_object_INL_acdk_lang_RObject_I_V_exceptions, // the declared exceptions
  OutputStream_MetainfoWrapper::OutputStream_method_write_fq_object_INL_acdk_lang_RObject_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OutputStream_methods_write_long_I_V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OutputStream_methods_write_long_I_V_args[] = 
{
  &OutputStream_methods_write_long_I_V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* OutputStream_methods_write_long_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OutputStream_method_write_long_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "write_long", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_write_long", // alternative name of method
  -1, // altlabelHashCode
  OutputStream_methods_write_long_I_V_args, // the arguments
  0, //arguments count
  OutputStream_methods_write_long_I_V_exceptions, // the declared exceptions
  OutputStream_MetainfoWrapper::OutputStream_method_write_long_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OutputStream_methods_write_longlong_J_V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OutputStream_methods_write_longlong_J_V_args[] = 
{
  &OutputStream_methods_write_longlong_J_V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* OutputStream_methods_write_longlong_J_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OutputStream_method_write_longlong_J_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "write_longlong", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_write_longlong", // alternative name of method
  -1, // altlabelHashCode
  OutputStream_methods_write_longlong_J_V_args, // the arguments
  0, //arguments count
  OutputStream_methods_write_longlong_J_V_exceptions, // the declared exceptions
  OutputStream_MetainfoWrapper::OutputStream_method_write_longlong_J_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OutputStream_methods_write_octet_B_V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OutputStream_methods_write_octet_B_V_args[] = 
{
  &OutputStream_methods_write_octet_B_V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* OutputStream_methods_write_octet_B_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OutputStream_method_write_octet_B_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "write_octet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_write_octet", // alternative name of method
  -1, // altlabelHashCode
  OutputStream_methods_write_octet_B_V_args, // the arguments
  0, //arguments count
  OutputStream_methods_write_octet_B_V_exceptions, // the declared exceptions
  OutputStream_MetainfoWrapper::OutputStream_method_write_octet_B_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OutputStream_methods_write_short_S_V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OutputStream_methods_write_short_S_V_args[] = 
{
  &OutputStream_methods_write_short_S_V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* OutputStream_methods_write_short_S_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OutputStream_method_write_short_S_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "write_short", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_write_short", // alternative name of method
  -1, // altlabelHashCode
  OutputStream_methods_write_short_S_V_args, // the arguments
  0, //arguments count
  OutputStream_methods_write_short_S_V_exceptions, // the declared exceptions
  OutputStream_MetainfoWrapper::OutputStream_method_write_short_S_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OutputStream_methods_write_string_INLRString__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OutputStream_methods_write_string_INLRString__V_args[] = 
{
  &OutputStream_methods_write_string_INLRString__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* OutputStream_methods_write_string_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OutputStream_method_write_string_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "write_string", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_i_write_string", // alternative name of method
  -1, // altlabelHashCode
  OutputStream_methods_write_string_INLRString__V_args, // the arguments
  0, //arguments count
  OutputStream_methods_write_string_INLRString__V_exceptions, // the declared exceptions
  OutputStream_MetainfoWrapper::OutputStream_method_write_string_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OutputStream_methods_write_ulong_I_V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OutputStream_methods_write_ulong_I_V_args[] = 
{
  &OutputStream_methods_write_ulong_I_V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* OutputStream_methods_write_ulong_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OutputStream_method_write_ulong_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "write_ulong", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_write_ulong", // alternative name of method
  -1, // altlabelHashCode
  OutputStream_methods_write_ulong_I_V_args, // the arguments
  0, //arguments count
  OutputStream_methods_write_ulong_I_V_exceptions, // the declared exceptions
  OutputStream_MetainfoWrapper::OutputStream_method_write_ulong_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OutputStream_methods_write_ulonglong_J_V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OutputStream_methods_write_ulonglong_J_V_args[] = 
{
  &OutputStream_methods_write_ulonglong_J_V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* OutputStream_methods_write_ulonglong_J_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OutputStream_method_write_ulonglong_J_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "write_ulonglong", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_write_ulonglong", // alternative name of method
  -1, // altlabelHashCode
  OutputStream_methods_write_ulonglong_J_V_args, // the arguments
  0, //arguments count
  OutputStream_methods_write_ulonglong_J_V_exceptions, // the declared exceptions
  OutputStream_MetainfoWrapper::OutputStream_method_write_ulonglong_J_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OutputStream_methods_write_ushort_S_V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OutputStream_methods_write_ushort_S_V_args[] = 
{
  &OutputStream_methods_write_ushort_S_V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* OutputStream_methods_write_ushort_S_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OutputStream_method_write_ushort_S_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "write_ushort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_write_ushort", // alternative name of method
  -1, // altlabelHashCode
  OutputStream_methods_write_ushort_S_V_args, // the arguments
  0, //arguments count
  OutputStream_methods_write_ushort_S_V_exceptions, // the declared exceptions
  OutputStream_MetainfoWrapper::OutputStream_method_write_ushort_S_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OutputStream_methods_write_value_INL_acdk_io_RSerializable__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::RSerializable::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OutputStream_methods_write_value_INL_acdk_io_RSerializable__V_args[] = 
{
  &OutputStream_methods_write_value_INL_acdk_io_RSerializable__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* OutputStream_methods_write_value_INL_acdk_io_RSerializable__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OutputStream_method_write_value_INL_acdk_io_RSerializable__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "write_value", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_n_write_value", // alternative name of method
  -1, // altlabelHashCode
  OutputStream_methods_write_value_INL_acdk_io_RSerializable__V_args, // the arguments
  0, //arguments count
  OutputStream_methods_write_value_INL_acdk_io_RSerializable__V_exceptions, // the declared exceptions
  OutputStream_MetainfoWrapper::OutputStream_method_write_value_INL_acdk_io_RSerializable__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OutputStream_methods_write_value_INL_acdk_io_RSerializable_L_acdk_lang_RString__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::RSerializable::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo OutputStream_methods_write_value_INL_acdk_io_RSerializable_L_acdk_lang_RString__V_arg_rep_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "rep_id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OutputStream_methods_write_value_INL_acdk_io_RSerializable_L_acdk_lang_RString__V_args[] = 
{
  &OutputStream_methods_write_value_INL_acdk_io_RSerializable_L_acdk_lang_RString__V_arg_value,
  &OutputStream_methods_write_value_INL_acdk_io_RSerializable_L_acdk_lang_RString__V_arg_rep_id,
  0
};

::acdk::lang::dmi::ClazzInfo* OutputStream_methods_write_value_INL_acdk_io_RSerializable_L_acdk_lang_RString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OutputStream_method_write_value_INL_acdk_io_RSerializable_L_acdk_lang_RString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "write_value", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_o_write_value", // alternative name of method
  -1, // altlabelHashCode
  OutputStream_methods_write_value_INL_acdk_io_RSerializable_L_acdk_lang_RString__V_args, // the arguments
  0, //arguments count
  OutputStream_methods_write_value_INL_acdk_io_RSerializable_L_acdk_lang_RString__V_exceptions, // the declared exceptions
  OutputStream_MetainfoWrapper::OutputStream_method_write_value_INL_acdk_io_RSerializable_L_acdk_lang_RString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OutputStream_methods_write_value_INL_acdk_io_RSerializable_L_acdk_lang_RClass__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::RSerializable::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo OutputStream_methods_write_value_INL_acdk_io_RSerializable_L_acdk_lang_RClass__V_arg_clz = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "clz", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OutputStream_methods_write_value_INL_acdk_io_RSerializable_L_acdk_lang_RClass__V_args[] = 
{
  &OutputStream_methods_write_value_INL_acdk_io_RSerializable_L_acdk_lang_RClass__V_arg_value,
  &OutputStream_methods_write_value_INL_acdk_io_RSerializable_L_acdk_lang_RClass__V_arg_clz,
  0
};

::acdk::lang::dmi::ClazzInfo* OutputStream_methods_write_value_INL_acdk_io_RSerializable_L_acdk_lang_RClass__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OutputStream_method_write_value_INL_acdk_io_RSerializable_L_acdk_lang_RClass__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "write_value", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_p_write_value", // alternative name of method
  -1, // altlabelHashCode
  OutputStream_methods_write_value_INL_acdk_io_RSerializable_L_acdk_lang_RClass__V_args, // the arguments
  0, //arguments count
  OutputStream_methods_write_value_INL_acdk_io_RSerializable_L_acdk_lang_RClass__V_exceptions, // the declared exceptions
  OutputStream_MetainfoWrapper::OutputStream_method_write_value_INL_acdk_io_RSerializable_L_acdk_lang_RClass__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OutputStream_methods_write_wchar_C_V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OutputStream_methods_write_wchar_C_V_args[] = 
{
  &OutputStream_methods_write_wchar_C_V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* OutputStream_methods_write_wchar_C_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OutputStream_method_write_wchar_C_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "write_wchar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_write_wchar", // alternative name of method
  -1, // altlabelHashCode
  OutputStream_methods_write_wchar_C_V_args, // the arguments
  0, //arguments count
  OutputStream_methods_write_wchar_C_V_exceptions, // the declared exceptions
  OutputStream_MetainfoWrapper::OutputStream_method_write_wchar_C_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OutputStream_methods_write_wstring_INLRString__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OutputStream_methods_write_wstring_INLRString__V_args[] = 
{
  &OutputStream_methods_write_wstring_INLRString__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* OutputStream_methods_write_wstring_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OutputStream_method_write_wstring_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "write_wstring", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_j_write_wstring", // alternative name of method
  -1, // altlabelHashCode
  OutputStream_methods_write_wstring_INLRString__V_args, // the arguments
  0, //arguments count
  OutputStream_methods_write_wstring_INLRString__V_exceptions, // the declared exceptions
  OutputStream_MetainfoWrapper::OutputStream_method_write_wstring_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _OutputStream_methods[] = 
{
  &OutputStream_method_GetClass__L_acdk_lang_RClass_,
  &OutputStream_method_create_input_stream__LRInputStream_,
  &OutputStream_method_orb__L_org_omg_CORBA_RORB_,
  &OutputStream_method_write_Object_INL_org_omg_CORBA_RObject__V,
  &OutputStream_method_write_abstract_interface_INL_acdk_lang_RObject__V,
  &OutputStream_method_write_acdk_object_INL_acdk_lang_RObject__V,
  &OutputStream_method_write_boolean_Z_V,
  &OutputStream_method_write_char_C_V,
  &OutputStream_method_write_double_D_V,
  &OutputStream_method_write_exception_INLRThrowable__V,
  &OutputStream_method_write_float_F_V,
  &OutputStream_method_write_fq_object_INL_acdk_lang_RObject_I_V,
  &OutputStream_method_write_long_I_V,
  &OutputStream_method_write_longlong_J_V,
  &OutputStream_method_write_octet_B_V,
  &OutputStream_method_write_short_S_V,
  &OutputStream_method_write_string_INLRString__V,
  &OutputStream_method_write_ulong_I_V,
  &OutputStream_method_write_ulonglong_J_V,
  &OutputStream_method_write_ushort_S_V,
  &OutputStream_method_write_value_INL_acdk_io_RSerializable__V,
  &OutputStream_method_write_value_INL_acdk_io_RSerializable_L_acdk_lang_RString__V,
  &OutputStream_method_write_value_INL_acdk_io_RSerializable_L_acdk_lang_RClass__V,
  &OutputStream_method_write_wchar_C_V,
  &OutputStream_method_write_wstring_INLRString__V,
  0
};


struct OutputStream_MetaInfoInitializer
{  OutputStream_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = OutputStream::clazzInfo();
    ci->fields =  _OutputStream_fields;
    ci->methods =  _OutputStream_methods;
    ci->_scopeParent = org_omg_CORBA_portable_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
OutputStream_MetaInfoInitializer OutputStream_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace omg
} // namespace CORBA
} // namespace portable


namespace org { 
namespace omg { 
namespace CORBA { 
namespace portable { 


//static
::acdk::lang::RObject
RemarshalException_create_array(int length)
{
  return new ObjectArrayImpl<RRemarshalException>(length);
}

//static
::acdk::lang::RObject
RemarshalException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class RemarshalException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RemarshalException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)RemarshalException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RemarshalException_method_RemarshalException__LRRemarshalException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RemarshalException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RemarshalException_method_RemarshalException_INLRString__LRRemarshalException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RemarshalException((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RemarshalException_method_RemarshalException_INL_acdk_lang_RObject_Z_LRRemarshalException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RemarshalException((::acdk::lang::RObject)args[0].getObjectVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RemarshalException_method_objectKey__L_acdk_lang_RObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RemarshalException* This = dmi_cast<RemarshalException>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->RemarshalException::objectKey();
    else
        ret = (::acdk::lang::RObject)This->objectKey();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RemarshalException_method_replaceObjectKey__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RemarshalException* This = dmi_cast<RemarshalException>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->RemarshalException::replaceObjectKey();
    else
      ret = This->replaceObjectKey();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  RemarshalException_fields___newObjectKey_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    RemarshalException* This = dmi_cast<RemarshalException>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->__newObjectKey, flags);
    else
      This->__newObjectKey = (::acdk::lang::RObject)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  RemarshalException_fields__replaceObjectKey_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    RemarshalException* This = dmi_cast<RemarshalException>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_replaceObjectKey, flags);
    else
      This->_replaceObjectKey = var.getBoolVar();
    return fieldinf;
  }
};


void ThrowException_RemarshalException(IN(::acdk::lang::RThrowable) ex)
{
  throw RRemarshalException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo RemarshalException_fields___newObjectKey = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "__newObjectKey", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RObject::clazzInfo(),
  RemarshalException_MetainfoWrapper::RemarshalException_fields___newObjectKey_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo RemarshalException_fields__replaceObjectKey = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_replaceObjectKey", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  RemarshalException_MetainfoWrapper::RemarshalException_fields__replaceObjectKey_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _RemarshalException_fields[] = 
{
  &RemarshalException_fields___newObjectKey,
  &RemarshalException_fields__replaceObjectKey,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* RemarshalException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RemarshalException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RemarshalException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  RemarshalException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  RemarshalException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  RemarshalException_MetainfoWrapper::RemarshalException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* RemarshalException_methods_RemarshalException__LRRemarshalException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RemarshalException_methods_RemarshalException__LRRemarshalException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RemarshalException_method_RemarshalException__LRRemarshalException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "RemarshalException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RemarshalException::clazzInfo(), // return type
  "_0_RemarshalException", // alternative name of method
  -1, // altlabelHashCode
  RemarshalException_methods_RemarshalException__LRRemarshalException__args, // the arguments
  0, //arguments count
  RemarshalException_methods_RemarshalException__LRRemarshalException__exceptions, // the declared exceptions
  RemarshalException_MetainfoWrapper::RemarshalException_method_RemarshalException__LRRemarshalException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RemarshalException_methods_RemarshalException_INLRString__LRRemarshalException__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RemarshalException_methods_RemarshalException_INLRString__LRRemarshalException__args[] = 
{
  &RemarshalException_methods_RemarshalException_INLRString__LRRemarshalException__arg_what,
  0
};

::acdk::lang::dmi::ClazzInfo* RemarshalException_methods_RemarshalException_INLRString__LRRemarshalException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RemarshalException_method_RemarshalException_INLRString__LRRemarshalException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "RemarshalException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RemarshalException::clazzInfo(), // return type
  "_1_RemarshalException", // alternative name of method
  -1, // altlabelHashCode
  RemarshalException_methods_RemarshalException_INLRString__LRRemarshalException__args, // the arguments
  0, //arguments count
  RemarshalException_methods_RemarshalException_INLRString__LRRemarshalException__exceptions, // the declared exceptions
  RemarshalException_MetainfoWrapper::RemarshalException_method_RemarshalException_INLRString__LRRemarshalException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RemarshalException_methods_RemarshalException_INL_acdk_lang_RObject_Z_LRRemarshalException__arg_objkey = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "objkey", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RemarshalException_methods_RemarshalException_INL_acdk_lang_RObject_Z_LRRemarshalException__arg_replace = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "replace", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RemarshalException_methods_RemarshalException_INL_acdk_lang_RObject_Z_LRRemarshalException__args[] = 
{
  &RemarshalException_methods_RemarshalException_INL_acdk_lang_RObject_Z_LRRemarshalException__arg_objkey,
  &RemarshalException_methods_RemarshalException_INL_acdk_lang_RObject_Z_LRRemarshalException__arg_replace,
  0
};

::acdk::lang::dmi::ClazzInfo* RemarshalException_methods_RemarshalException_INL_acdk_lang_RObject_Z_LRRemarshalException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RemarshalException_method_RemarshalException_INL_acdk_lang_RObject_Z_LRRemarshalException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "RemarshalException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RemarshalException::clazzInfo(), // return type
  "_2_RemarshalException", // alternative name of method
  -1, // altlabelHashCode
  RemarshalException_methods_RemarshalException_INL_acdk_lang_RObject_Z_LRRemarshalException__args, // the arguments
  0, //arguments count
  RemarshalException_methods_RemarshalException_INL_acdk_lang_RObject_Z_LRRemarshalException__exceptions, // the declared exceptions
  RemarshalException_MetainfoWrapper::RemarshalException_method_RemarshalException_INL_acdk_lang_RObject_Z_LRRemarshalException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* RemarshalException_methods_objectKey__L_acdk_lang_RObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RemarshalException_methods_objectKey__L_acdk_lang_RObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RemarshalException_method_objectKey__L_acdk_lang_RObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "objectKey", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RObject::clazzInfo(), // return type
  "_3_objectKey", // alternative name of method
  -1, // altlabelHashCode
  RemarshalException_methods_objectKey__L_acdk_lang_RObject__args, // the arguments
  0, //arguments count
  RemarshalException_methods_objectKey__L_acdk_lang_RObject__exceptions, // the declared exceptions
  RemarshalException_MetainfoWrapper::RemarshalException_method_objectKey__L_acdk_lang_RObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* RemarshalException_methods_replaceObjectKey__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RemarshalException_methods_replaceObjectKey__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RemarshalException_method_replaceObjectKey__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "replaceObjectKey", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_replaceObjectKey", // alternative name of method
  -1, // altlabelHashCode
  RemarshalException_methods_replaceObjectKey__Z_args, // the arguments
  0, //arguments count
  RemarshalException_methods_replaceObjectKey__Z_exceptions, // the declared exceptions
  RemarshalException_MetainfoWrapper::RemarshalException_method_replaceObjectKey__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _RemarshalException_methods[] = 
{
  &RemarshalException_method_GetClass__L_acdk_lang_RClass_,
  &RemarshalException_method_RemarshalException__LRRemarshalException_,
  &RemarshalException_method_RemarshalException_INLRString__LRRemarshalException_,
  &RemarshalException_method_RemarshalException_INL_acdk_lang_RObject_Z_LRRemarshalException_,
  &RemarshalException_method_objectKey__L_acdk_lang_RObject_,
  &RemarshalException_method_replaceObjectKey__Z,
  0
};


struct RemarshalException_MetaInfoInitializer
{  RemarshalException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = RemarshalException::clazzInfo();
    ci->fields =  _RemarshalException_fields;
    ci->methods =  _RemarshalException_methods;
    ci->_scopeParent = org_omg_CORBA_portable_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
RemarshalException_MetaInfoInitializer RemarshalException_MetaInfoInitializer_staticinstance__;


struct RemarshalException_clazzInfo_ClazzAttributesResInitializer3
{
  RemarshalException_clazzInfo_ClazzAttributesResInitializer3()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)RemarshalException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_RemarshalException));
  }
};

RemarshalException_clazzInfo_ClazzAttributesResInitializer3 RemarshalException_clazzInfo_ClazzAttributesResInitializer3_instance;



} // namespace org
} // namespace omg
} // namespace CORBA
} // namespace portable


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) portable_dummyExportFunc() {}
#endif

