// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "Any.h"
#include "AttributeDef.h"
#include "Contained.h"
#include "Container.h"
#include "Context.h"
#include "CORBA.h"
#include "ExceptionDef.h"
#include "IDLType.h"
#include "InterfaceDef.h"
#include "IRObject.h"
#include "ModuleDef.h"
#include "Object.h"
#include "OperationDef.h"
#include "ORB.h"
#include "OrbExceptions.h"
#include "PrimitiveDef.h"
#include "Repository.h"
#include "SequenceDef.h"
#include "ServerRequest.h"
#include "StringDef.h"
#include "StructDef.h"
#include "TypeCode.h"

namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo _Any_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Any_super___acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Any_interfaces[] =
{
  &_Any_super___acdk__lang__Object,
  &_Any_super___acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* Any::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "Any", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Any_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Any::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Any(Any::clazzInfo());

::acdk::lang::RClass
Any::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Any::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


::acdk::lang::dmi::ClazzEnumValueInfo AttributeMode_ATTR_NORMAL = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ATTR_NORMAL", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::ATTR_NORMAL, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo AttributeMode_ATTR_READONLY = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ATTR_READONLY", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::ATTR_READONLY, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* AttributeMode_enumValues[] = {
  &AttributeMode_ATTR_NORMAL,
  &AttributeMode_ATTR_READONLY,
0
};

::acdk::lang::dmi::ClazzEnumInfo* AttributeModeMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo AttributeMode_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "AttributeMode", // name
  -1, // hashCode
  "org/omg/CORBA", // ns
  0, // _scopeParent
  0, // _nextSibling
  AttributeMode_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_AttributeMode(&AttributeMode_enumInfo);

  return &AttributeMode_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_AttributeModeEnumInfo(AttributeModeMetaInf::GetEnumInfo());


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo _AttributeDef_super___org__omg__CORBA__IDLType =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::org::omg::CORBA::IDLType::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _AttributeDef_interfaces[] =
{
  &_AttributeDef_super___org__omg__CORBA__IDLType,
  0
};

::acdk::lang::dmi::ClazzInfo* AttributeDef::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface, // clazz-flags
  0, //AttributesRes
  "AttributeDef", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _AttributeDef_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    AttributeDef::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_AttributeDef(AttributeDef::clazzInfo());

::acdk::lang::RClass
AttributeDef::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
AttributeDef::getCollectableFields(FieldReferences& fields)
{
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo _AttributeDescription_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _AttributeDescription_interfaces[] =
{
  &_AttributeDescription_super___acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* AttributeDescription::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "AttributeDescription", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _AttributeDescription_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 5, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    AttributeDescription::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_AttributeDescription(AttributeDescription::clazzInfo());

::acdk::lang::RClass
AttributeDescription::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
AttributeDescription::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->defined_in._ref_this()); // RString defined_in 
  fields.push_back((::acdk::lang::RObject*)this->id._ref_this()); // RString id 
  fields.push_back((::acdk::lang::RObject*)this->name._ref_this()); // RString name 
  fields.push_back((::acdk::lang::RObject*)this->type._ref_this()); // RTypeCode type 
  fields.push_back((::acdk::lang::RObject*)this->version._ref_this()); // RString version 
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo _Description_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Description_interfaces[] =
{
  &_Description_super___acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* Description::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface, // clazz-flags
  0, //AttributesRes
  "Description", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Description_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Description::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Description(Description::clazzInfo());

::acdk::lang::RClass
Description::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Description::getCollectableFields(FieldReferences& fields)
{
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo _Contained_super___org__omg__CORBA__IRObject =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::org::omg::CORBA::IRObject::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Contained_interfaces[] =
{
  &_Contained_super___org__omg__CORBA__IRObject,
  0
};

::acdk::lang::dmi::ClazzInfo* Contained::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface, // clazz-flags
  0, //AttributesRes
  "Contained", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Contained_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 5, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Contained::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Contained(Contained::clazzInfo());

::acdk::lang::RClass
Contained::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Contained::getCollectableFields(FieldReferences& fields)
{
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo _Container_super___org__omg__CORBA__IRObject =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::org::omg::CORBA::IRObject::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Container_interfaces[] =
{
  &_Container_super___org__omg__CORBA__IRObject,
  0
};

::acdk::lang::dmi::ClazzInfo* Container::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface, // clazz-flags
  0, //AttributesRes
  "Container", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Container_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Container::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Container(Container::clazzInfo());

::acdk::lang::RClass
Container::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Container::getCollectableFields(FieldReferences& fields)
{
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo _ExceptionDef_super___org__omg__CORBA__Contained =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::org::omg::CORBA::Contained::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _ExceptionDef_super___org__omg__CORBA__Container =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::org::omg::CORBA::Container::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ExceptionDef_interfaces[] =
{
  &_ExceptionDef_super___org__omg__CORBA__Contained,
  &_ExceptionDef_super___org__omg__CORBA__Container,
  0
};

::acdk::lang::dmi::ClazzInfo* ExceptionDef::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface, // clazz-flags
  0, //AttributesRes
  "ExceptionDef", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ExceptionDef_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ExceptionDef::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ExceptionDef(ExceptionDef::clazzInfo());

::acdk::lang::RClass
ExceptionDef::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ExceptionDef::getCollectableFields(FieldReferences& fields)
{
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo _ExceptionDescription_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ExceptionDescription_interfaces[] =
{
  &_ExceptionDescription_super___acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* ExceptionDescription::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ExceptionDescription", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ExceptionDescription_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 5, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ExceptionDescription::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ExceptionDescription(ExceptionDescription::clazzInfo());

::acdk::lang::RClass
ExceptionDescription::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ExceptionDescription::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->defined_in._ref_this()); // RString defined_in 
  fields.push_back((::acdk::lang::RObject*)this->id._ref_this()); // RString id 
  fields.push_back((::acdk::lang::RObject*)this->name._ref_this()); // RString name 
  fields.push_back((::acdk::lang::RObject*)this->type._ref_this()); // RTypeCode type 
  fields.push_back((::acdk::lang::RObject*)this->version._ref_this()); // RString version 
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo _IDLType_super___org__omg__CORBA__IRObject =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::org::omg::CORBA::IRObject::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _IDLType_interfaces[] =
{
  &_IDLType_super___org__omg__CORBA__IRObject,
  0
};

::acdk::lang::dmi::ClazzInfo* IDLType::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface, // clazz-flags
  0, //AttributesRes
  "IDLType", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _IDLType_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    IDLType::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_IDLType(IDLType::clazzInfo());

::acdk::lang::RClass
IDLType::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
IDLType::getCollectableFields(FieldReferences& fields)
{
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo _FullInterfaceDescription_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _FullInterfaceDescription_interfaces[] =
{
  &_FullInterfaceDescription_super___acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* FullInterfaceDescription::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "FullInterfaceDescription", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _FullInterfaceDescription_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 8, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    FullInterfaceDescription::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_FullInterfaceDescription(FullInterfaceDescription::clazzInfo());

::acdk::lang::RClass
FullInterfaceDescription::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
FullInterfaceDescription::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->attributes._ref_this()); // RAttributeDescriptionArray attributes 
  fields.push_back((::acdk::lang::RObject*)this->base_interfaces._ref_this()); // RStringArray base_interfaces 
  fields.push_back((::acdk::lang::RObject*)this->defined_in._ref_this()); // RString defined_in 
  fields.push_back((::acdk::lang::RObject*)this->id._ref_this()); // RString id 
  fields.push_back((::acdk::lang::RObject*)this->name._ref_this()); // RString name 
  fields.push_back((::acdk::lang::RObject*)this->operations._ref_this()); // RParameterDescriptionArray operations 
  fields.push_back((::acdk::lang::RObject*)this->type._ref_this()); // RTypeCode type 
  fields.push_back((::acdk::lang::RObject*)this->version._ref_this()); // RString version 
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo _InterfaceDescription_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _InterfaceDescription_interfaces[] =
{
  &_InterfaceDescription_super___acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* InterfaceDescription::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "InterfaceDescription", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _InterfaceDescription_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 5, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    InterfaceDescription::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_InterfaceDescription(InterfaceDescription::clazzInfo());

::acdk::lang::RClass
InterfaceDescription::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
InterfaceDescription::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->base_interfaces._ref_this()); // RStringArray base_interfaces 
  fields.push_back((::acdk::lang::RObject*)this->defined_in._ref_this()); // RString defined_in 
  fields.push_back((::acdk::lang::RObject*)this->id._ref_this()); // RString id 
  fields.push_back((::acdk::lang::RObject*)this->name._ref_this()); // RString name 
  fields.push_back((::acdk::lang::RObject*)this->version._ref_this()); // RString version 
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo _InterfaceDef_super___org__omg__CORBA__Contained =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::org::omg::CORBA::Contained::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _InterfaceDef_super___org__omg__CORBA__Container =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::org::omg::CORBA::Container::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _InterfaceDef_super___org__omg__CORBA__IDLType =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::org::omg::CORBA::IDLType::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _InterfaceDef_interfaces[] =
{
  &_InterfaceDef_super___org__omg__CORBA__Contained,
  &_InterfaceDef_super___org__omg__CORBA__Container,
  &_InterfaceDef_super___org__omg__CORBA__IDLType,
  0
};

::acdk::lang::dmi::ClazzInfo* InterfaceDef::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface, // clazz-flags
  0, //AttributesRes
  "InterfaceDef", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _InterfaceDef_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    InterfaceDef::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_InterfaceDef(InterfaceDef::clazzInfo());

::acdk::lang::RClass
InterfaceDef::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
InterfaceDef::getCollectableFields(FieldReferences& fields)
{
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


::acdk::lang::dmi::ClazzEnumValueInfo DefinitionKind_dk_none = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "dk_none", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::dk_none, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DefinitionKind_dk_all = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "dk_all", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::dk_all, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DefinitionKind_dk_Attribute = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "dk_Attribute", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::dk_Attribute, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DefinitionKind_dk_Constant = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "dk_Constant", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::dk_Constant, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DefinitionKind_dk_Exception = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "dk_Exception", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::dk_Exception, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DefinitionKind_dk_Interface = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "dk_Interface", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::dk_Interface, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DefinitionKind_dk_Module = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "dk_Module", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::dk_Module, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DefinitionKind_dk_Operation = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "dk_Operation", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::dk_Operation, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DefinitionKind_dk_Typedef = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "dk_Typedef", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::dk_Typedef, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DefinitionKind_dk_Alias = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "dk_Alias", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::dk_Alias, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DefinitionKind_dk_Struct = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "dk_Struct", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::dk_Struct, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DefinitionKind_dk_Union = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "dk_Union", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::dk_Union, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DefinitionKind_dk_Enum = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "dk_Enum", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::dk_Enum, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DefinitionKind_dk_Primitive = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "dk_Primitive", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::dk_Primitive, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DefinitionKind_dk_String = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "dk_String", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::dk_String, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DefinitionKind_dk_Sequence = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "dk_Sequence", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::dk_Sequence, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DefinitionKind_dk_Array = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "dk_Array", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::dk_Array, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DefinitionKind_dk_Repository = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "dk_Repository", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::dk_Repository, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DefinitionKind_dk_Wstring = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "dk_Wstring", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::dk_Wstring, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DefinitionKind_dk_Fixed = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "dk_Fixed", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::dk_Fixed, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DefinitionKind_dk_Value = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "dk_Value", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::dk_Value, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DefinitionKind_dk_ValueBox = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "dk_ValueBox", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::dk_ValueBox, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DefinitionKind_dk_ValueMember = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "dk_ValueMember", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::dk_ValueMember, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DefinitionKind_dk_Native = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "dk_Native", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::dk_Native, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DefinitionKind_dk_AbstractInterface = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "dk_AbstractInterface", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::dk_AbstractInterface, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DefinitionKind_dk_LocalInterface = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "dk_LocalInterface", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::dk_LocalInterface, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* DefinitionKind_enumValues[] = {
  &DefinitionKind_dk_none,
  &DefinitionKind_dk_all,
  &DefinitionKind_dk_Attribute,
  &DefinitionKind_dk_Constant,
  &DefinitionKind_dk_Exception,
  &DefinitionKind_dk_Interface,
  &DefinitionKind_dk_Module,
  &DefinitionKind_dk_Operation,
  &DefinitionKind_dk_Typedef,
  &DefinitionKind_dk_Alias,
  &DefinitionKind_dk_Struct,
  &DefinitionKind_dk_Union,
  &DefinitionKind_dk_Enum,
  &DefinitionKind_dk_Primitive,
  &DefinitionKind_dk_String,
  &DefinitionKind_dk_Sequence,
  &DefinitionKind_dk_Array,
  &DefinitionKind_dk_Repository,
  &DefinitionKind_dk_Wstring,
  &DefinitionKind_dk_Fixed,
  &DefinitionKind_dk_Value,
  &DefinitionKind_dk_ValueBox,
  &DefinitionKind_dk_ValueMember,
  &DefinitionKind_dk_Native,
  &DefinitionKind_dk_AbstractInterface,
  &DefinitionKind_dk_LocalInterface,
0
};

::acdk::lang::dmi::ClazzEnumInfo* DefinitionKindMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo DefinitionKind_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "DefinitionKind", // name
  -1, // hashCode
  "org/omg/CORBA", // ns
  0, // _scopeParent
  0, // _nextSibling
  DefinitionKind_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_DefinitionKind(&DefinitionKind_enumInfo);

  return &DefinitionKind_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_DefinitionKindEnumInfo(DefinitionKindMetaInf::GetEnumInfo());


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo* _IRObject_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* IRObject::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface, // clazz-flags
  0, //AttributesRes
  "IRObject", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _IRObject_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    IRObject::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_IRObject(IRObject::clazzInfo());

::acdk::lang::RClass
IRObject::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
IRObject::getCollectableFields(FieldReferences& fields)
{
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo _ModuleDescription_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ModuleDescription_interfaces[] =
{
  &_ModuleDescription_super___acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* ModuleDescription::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ModuleDescription", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ModuleDescription_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 4, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ModuleDescription::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ModuleDescription(ModuleDescription::clazzInfo());

::acdk::lang::RClass
ModuleDescription::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ModuleDescription::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->defined_in._ref_this()); // RString defined_in 
  fields.push_back((::acdk::lang::RObject*)this->id._ref_this()); // RString id 
  fields.push_back((::acdk::lang::RObject*)this->name._ref_this()); // RString name 
  fields.push_back((::acdk::lang::RObject*)this->version._ref_this()); // RString version 
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo _ModuleDef_super___org__omg__CORBA__Container =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::org::omg::CORBA::Container::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _ModuleDef_super___org__omg__CORBA__Contained =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::org::omg::CORBA::Contained::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ModuleDef_interfaces[] =
{
  &_ModuleDef_super___org__omg__CORBA__Container,
  &_ModuleDef_super___org__omg__CORBA__Contained,
  0
};

::acdk::lang::dmi::ClazzInfo* ModuleDef::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface, // clazz-flags
  0, //AttributesRes
  "ModuleDef", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ModuleDef_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ModuleDef::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ModuleDef(ModuleDef::clazzInfo());

::acdk::lang::RClass
ModuleDef::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ModuleDef::getCollectableFields(FieldReferences& fields)
{
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo* _Object_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* Object::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "Object", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Object_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Object::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Object(Object::clazzInfo());

::acdk::lang::RClass
Object::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Object::getCollectableFields(FieldReferences& fields)
{
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


::acdk::lang::dmi::ClazzEnumValueInfo OperationMode_OP_NORMAL = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "OP_NORMAL", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::OP_NORMAL, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo OperationMode_OP_ONEWAY = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "OP_ONEWAY", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::OP_ONEWAY, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* OperationMode_enumValues[] = {
  &OperationMode_OP_NORMAL,
  &OperationMode_OP_ONEWAY,
0
};

::acdk::lang::dmi::ClazzEnumInfo* OperationModeMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo OperationMode_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "OperationMode", // name
  -1, // hashCode
  "org/omg/CORBA", // ns
  0, // _scopeParent
  0, // _nextSibling
  OperationMode_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_OperationMode(&OperationMode_enumInfo);

  return &OperationMode_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_OperationModeEnumInfo(OperationModeMetaInf::GetEnumInfo());


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


::acdk::lang::dmi::ClazzEnumValueInfo ParameterMode_PARAM_IN = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "PARAM_IN", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::PARAM_IN, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo ParameterMode_PARAM_OUT = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "PARAM_OUT", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::PARAM_OUT, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo ParameterMode_PARAM_INOUT = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "PARAM_INOUT", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::PARAM_INOUT, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* ParameterMode_enumValues[] = {
  &ParameterMode_PARAM_IN,
  &ParameterMode_PARAM_OUT,
  &ParameterMode_PARAM_INOUT,
0
};

::acdk::lang::dmi::ClazzEnumInfo* ParameterModeMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo ParameterMode_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "ParameterMode", // name
  -1, // hashCode
  "org/omg/CORBA", // ns
  0, // _scopeParent
  0, // _nextSibling
  ParameterMode_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_ParameterMode(&ParameterMode_enumInfo);

  return &ParameterMode_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_ParameterModeEnumInfo(ParameterModeMetaInf::GetEnumInfo());


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo _ParameterDescription_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ParameterDescription_interfaces[] =
{
  &_ParameterDescription_super___acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* ParameterDescription::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ParameterDescription", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ParameterDescription_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 3, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ParameterDescription::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ParameterDescription(ParameterDescription::clazzInfo());

::acdk::lang::RClass
ParameterDescription::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ParameterDescription::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->name._ref_this()); // RString name 
  fields.push_back((::acdk::lang::RObject*)this->type._ref_this()); // RTypeCode type 
  fields.push_back((::acdk::lang::RObject*)this->type_def._ref_this()); // RIDLType type_def 
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo _OperationDef_super___org__omg__CORBA__Contained =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::org::omg::CORBA::Contained::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _OperationDef_interfaces[] =
{
  &_OperationDef_super___org__omg__CORBA__Contained,
  0
};

::acdk::lang::dmi::ClazzInfo* OperationDef::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface, // clazz-flags
  0, //AttributesRes
  "OperationDef", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _OperationDef_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 5, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    OperationDef::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_OperationDef(OperationDef::clazzInfo());

::acdk::lang::RClass
OperationDef::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
OperationDef::getCollectableFields(FieldReferences& fields)
{
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo _OperationDescription_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _OperationDescription_interfaces[] =
{
  &_OperationDescription_super___acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* OperationDescription::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "OperationDescription", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _OperationDescription_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 8, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    OperationDescription::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_OperationDescription(OperationDescription::clazzInfo());

::acdk::lang::RClass
OperationDescription::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
OperationDescription::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->contexts._ref_this()); // RStringArray contexts 
  fields.push_back((::acdk::lang::RObject*)this->defined_in._ref_this()); // RString defined_in 
  fields.push_back((::acdk::lang::RObject*)this->exceptions._ref_this()); // RExceptionDescriptionArray exceptions 
  fields.push_back((::acdk::lang::RObject*)this->id._ref_this()); // RString id 
  fields.push_back((::acdk::lang::RObject*)this->name._ref_this()); // RString name 
  fields.push_back((::acdk::lang::RObject*)this->parameters._ref_this()); // RParameterDescriptionArray parameters 
  fields.push_back((::acdk::lang::RObject*)this->result._ref_this()); // RTypeCode result 
  fields.push_back((::acdk::lang::RObject*)this->version._ref_this()); // RString version 
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo* _ORB_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* ORB::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "ORB", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ORB_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ORB::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ORB(ORB::clazzInfo());

::acdk::lang::RClass
ORB::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ORB::getCollectableFields(FieldReferences& fields)
{
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


::acdk::lang::dmi::ClazzEnumValueInfo CompletionStatus_COMPLETED_YES = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "COMPLETED_YES", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::COMPLETED_YES, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo CompletionStatus_COMPLETED_NO = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "COMPLETED_NO", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::COMPLETED_NO, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo CompletionStatus_COMPLETED_MAYBE = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "COMPLETED_MAYBE", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::COMPLETED_MAYBE, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* CompletionStatus_enumValues[] = {
  &CompletionStatus_COMPLETED_YES,
  &CompletionStatus_COMPLETED_NO,
  &CompletionStatus_COMPLETED_MAYBE,
0
};

::acdk::lang::dmi::ClazzEnumInfo* CompletionStatusMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo CompletionStatus_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "CompletionStatus", // name
  -1, // hashCode
  "org/omg/CORBA", // ns
  0, // _scopeParent
  0, // _nextSibling
  CompletionStatus_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_CompletionStatus(&CompletionStatus_enumInfo);

  return &CompletionStatus_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_CompletionStatusEnumInfo(CompletionStatusMetaInf::GetEnumInfo());


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo _SystemException_super___acdk__lang__RuntimeException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::RuntimeException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SystemException_interfaces[] =
{
  &_SystemException_super___acdk__lang__RuntimeException,
  0
};

::acdk::lang::dmi::ClazzInfo* SystemException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "SystemException", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SystemException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SystemException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SystemException(SystemException::clazzInfo());

::acdk::lang::RClass
SystemException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SystemException::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, RuntimeException)::getCollectableFields(fields);
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo _COMM_FAILURE_super___org__omg__CORBA__SystemException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::org::omg::CORBA::SystemException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _COMM_FAILURE_interfaces[] =
{
  &_COMM_FAILURE_super___org__omg__CORBA__SystemException,
  0
};

::acdk::lang::dmi::ClazzInfo* COMM_FAILURE::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "COMM_FAILURE", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _COMM_FAILURE_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    COMM_FAILURE::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_COMM_FAILURE(COMM_FAILURE::clazzInfo());

::acdk::lang::RClass
COMM_FAILURE::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
COMM_FAILURE::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::org::omg::CORBA::, SystemException)::getCollectableFields(fields);
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo _InvalidName_super___acdkx__orb__OrbException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdkx::orb::OrbException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _InvalidName_interfaces[] =
{
  &_InvalidName_super___acdkx__orb__OrbException,
  0
};

::acdk::lang::dmi::ClazzInfo* InvalidName::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "InvalidName", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _InvalidName_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    InvalidName::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_InvalidName(InvalidName::clazzInfo());

::acdk::lang::RClass
InvalidName::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
InvalidName::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdkx::orb::, OrbException)::getCollectableFields(fields);
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo _NO_IMPLEMENT_super___org__omg__CORBA__SystemException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::org::omg::CORBA::SystemException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _NO_IMPLEMENT_interfaces[] =
{
  &_NO_IMPLEMENT_super___org__omg__CORBA__SystemException,
  0
};

::acdk::lang::dmi::ClazzInfo* NO_IMPLEMENT::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "NO_IMPLEMENT", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _NO_IMPLEMENT_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    NO_IMPLEMENT::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_NO_IMPLEMENT(NO_IMPLEMENT::clazzInfo());

::acdk::lang::RClass
NO_IMPLEMENT::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
NO_IMPLEMENT::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::org::omg::CORBA::, SystemException)::getCollectableFields(fields);
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo _BAD_OPERATION_super___org__omg__CORBA__SystemException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::org::omg::CORBA::SystemException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _BAD_OPERATION_interfaces[] =
{
  &_BAD_OPERATION_super___org__omg__CORBA__SystemException,
  0
};

::acdk::lang::dmi::ClazzInfo* BAD_OPERATION::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "BAD_OPERATION", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _BAD_OPERATION_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    BAD_OPERATION::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_BAD_OPERATION(BAD_OPERATION::clazzInfo());

::acdk::lang::RClass
BAD_OPERATION::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
BAD_OPERATION::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::org::omg::CORBA::, SystemException)::getCollectableFields(fields);
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo _UNKNOWN_super___org__omg__CORBA__SystemException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::org::omg::CORBA::SystemException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _UNKNOWN_interfaces[] =
{
  &_UNKNOWN_super___org__omg__CORBA__SystemException,
  0
};

::acdk::lang::dmi::ClazzInfo* UNKNOWN::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "UNKNOWN", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _UNKNOWN_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    UNKNOWN::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_UNKNOWN(UNKNOWN::clazzInfo());

::acdk::lang::RClass
UNKNOWN::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
UNKNOWN::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::org::omg::CORBA::, SystemException)::getCollectableFields(fields);
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo _MARSHAL_super___org__omg__CORBA__SystemException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::org::omg::CORBA::SystemException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _MARSHAL_interfaces[] =
{
  &_MARSHAL_super___org__omg__CORBA__SystemException,
  0
};

::acdk::lang::dmi::ClazzInfo* MARSHAL::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "MARSHAL", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _MARSHAL_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    MARSHAL::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_MARSHAL(MARSHAL::clazzInfo());

::acdk::lang::RClass
MARSHAL::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
MARSHAL::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::org::omg::CORBA::, SystemException)::getCollectableFields(fields);
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo _BAD_CONTEXT_super___org__omg__CORBA__SystemException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::org::omg::CORBA::SystemException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _BAD_CONTEXT_interfaces[] =
{
  &_BAD_CONTEXT_super___org__omg__CORBA__SystemException,
  0
};

::acdk::lang::dmi::ClazzInfo* BAD_CONTEXT::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "BAD_CONTEXT", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _BAD_CONTEXT_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    BAD_CONTEXT::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_BAD_CONTEXT(BAD_CONTEXT::clazzInfo());

::acdk::lang::RClass
BAD_CONTEXT::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
BAD_CONTEXT::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::org::omg::CORBA::, SystemException)::getCollectableFields(fields);
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo _NO_MEMORY_super___org__omg__CORBA__SystemException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::org::omg::CORBA::SystemException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _NO_MEMORY_interfaces[] =
{
  &_NO_MEMORY_super___org__omg__CORBA__SystemException,
  0
};

::acdk::lang::dmi::ClazzInfo* NO_MEMORY::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "NO_MEMORY", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _NO_MEMORY_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    NO_MEMORY::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_NO_MEMORY(NO_MEMORY::clazzInfo());

::acdk::lang::RClass
NO_MEMORY::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
NO_MEMORY::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::org::omg::CORBA::, SystemException)::getCollectableFields(fields);
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo _NO_PERMISSION_super___org__omg__CORBA__SystemException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::org::omg::CORBA::SystemException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _NO_PERMISSION_interfaces[] =
{
  &_NO_PERMISSION_super___org__omg__CORBA__SystemException,
  0
};

::acdk::lang::dmi::ClazzInfo* NO_PERMISSION::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "NO_PERMISSION", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _NO_PERMISSION_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    NO_PERMISSION::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_NO_PERMISSION(NO_PERMISSION::clazzInfo());

::acdk::lang::RClass
NO_PERMISSION::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
NO_PERMISSION::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::org::omg::CORBA::, SystemException)::getCollectableFields(fields);
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo _NO_RESOURCES_super___org__omg__CORBA__SystemException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::org::omg::CORBA::SystemException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _NO_RESOURCES_interfaces[] =
{
  &_NO_RESOURCES_super___org__omg__CORBA__SystemException,
  0
};

::acdk::lang::dmi::ClazzInfo* NO_RESOURCES::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "NO_RESOURCES", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _NO_RESOURCES_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    NO_RESOURCES::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_NO_RESOURCES(NO_RESOURCES::clazzInfo());

::acdk::lang::RClass
NO_RESOURCES::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
NO_RESOURCES::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::org::omg::CORBA::, SystemException)::getCollectableFields(fields);
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo _NO_RESPONSE_super___org__omg__CORBA__SystemException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::org::omg::CORBA::SystemException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _NO_RESPONSE_interfaces[] =
{
  &_NO_RESPONSE_super___org__omg__CORBA__SystemException,
  0
};

::acdk::lang::dmi::ClazzInfo* NO_RESPONSE::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "NO_RESPONSE", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _NO_RESPONSE_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    NO_RESPONSE::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_NO_RESPONSE(NO_RESPONSE::clazzInfo());

::acdk::lang::RClass
NO_RESPONSE::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
NO_RESPONSE::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::org::omg::CORBA::, SystemException)::getCollectableFields(fields);
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo _OBJ_ADAPTER_super___org__omg__CORBA__SystemException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::org::omg::CORBA::SystemException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _OBJ_ADAPTER_interfaces[] =
{
  &_OBJ_ADAPTER_super___org__omg__CORBA__SystemException,
  0
};

::acdk::lang::dmi::ClazzInfo* OBJ_ADAPTER::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "OBJ_ADAPTER", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _OBJ_ADAPTER_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    OBJ_ADAPTER::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_OBJ_ADAPTER(OBJ_ADAPTER::clazzInfo());

::acdk::lang::RClass
OBJ_ADAPTER::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
OBJ_ADAPTER::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::org::omg::CORBA::, SystemException)::getCollectableFields(fields);
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo _OBJECT_NOT_EXIST_super___org__omg__CORBA__SystemException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::org::omg::CORBA::SystemException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _OBJECT_NOT_EXIST_interfaces[] =
{
  &_OBJECT_NOT_EXIST_super___org__omg__CORBA__SystemException,
  0
};

::acdk::lang::dmi::ClazzInfo* OBJECT_NOT_EXIST::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "OBJECT_NOT_EXIST", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _OBJECT_NOT_EXIST_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    OBJECT_NOT_EXIST::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_OBJECT_NOT_EXIST(OBJECT_NOT_EXIST::clazzInfo());

::acdk::lang::RClass
OBJECT_NOT_EXIST::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
OBJECT_NOT_EXIST::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::org::omg::CORBA::, SystemException)::getCollectableFields(fields);
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo _PERSIST_STORE_super___org__omg__CORBA__SystemException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::org::omg::CORBA::SystemException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _PERSIST_STORE_interfaces[] =
{
  &_PERSIST_STORE_super___org__omg__CORBA__SystemException,
  0
};

::acdk::lang::dmi::ClazzInfo* PERSIST_STORE::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "PERSIST_STORE", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _PERSIST_STORE_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    PERSIST_STORE::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_PERSIST_STORE(PERSIST_STORE::clazzInfo());

::acdk::lang::RClass
PERSIST_STORE::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
PERSIST_STORE::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::org::omg::CORBA::, SystemException)::getCollectableFields(fields);
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo _TRANSACTION_REQUIRED_super___org__omg__CORBA__SystemException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::org::omg::CORBA::SystemException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TRANSACTION_REQUIRED_interfaces[] =
{
  &_TRANSACTION_REQUIRED_super___org__omg__CORBA__SystemException,
  0
};

::acdk::lang::dmi::ClazzInfo* TRANSACTION_REQUIRED::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "TRANSACTION_REQUIRED", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TRANSACTION_REQUIRED_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TRANSACTION_REQUIRED::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TRANSACTION_REQUIRED(TRANSACTION_REQUIRED::clazzInfo());

::acdk::lang::RClass
TRANSACTION_REQUIRED::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TRANSACTION_REQUIRED::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::org::omg::CORBA::, SystemException)::getCollectableFields(fields);
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo _TRANSACTION_ROLLEDBACK_super___org__omg__CORBA__SystemException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::org::omg::CORBA::SystemException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TRANSACTION_ROLLEDBACK_interfaces[] =
{
  &_TRANSACTION_ROLLEDBACK_super___org__omg__CORBA__SystemException,
  0
};

::acdk::lang::dmi::ClazzInfo* TRANSACTION_ROLLEDBACK::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "TRANSACTION_ROLLEDBACK", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TRANSACTION_ROLLEDBACK_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TRANSACTION_ROLLEDBACK::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TRANSACTION_ROLLEDBACK(TRANSACTION_ROLLEDBACK::clazzInfo());

::acdk::lang::RClass
TRANSACTION_ROLLEDBACK::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TRANSACTION_ROLLEDBACK::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::org::omg::CORBA::, SystemException)::getCollectableFields(fields);
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo _TRANSIENT_super___org__omg__CORBA__SystemException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::org::omg::CORBA::SystemException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TRANSIENT_interfaces[] =
{
  &_TRANSIENT_super___org__omg__CORBA__SystemException,
  0
};

::acdk::lang::dmi::ClazzInfo* TRANSIENT::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "TRANSIENT", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TRANSIENT_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TRANSIENT::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TRANSIENT(TRANSIENT::clazzInfo());

::acdk::lang::RClass
TRANSIENT::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TRANSIENT::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::org::omg::CORBA::, SystemException)::getCollectableFields(fields);
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo _INV_OBJREF_super___org__omg__CORBA__SystemException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::org::omg::CORBA::SystemException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _INV_OBJREF_interfaces[] =
{
  &_INV_OBJREF_super___org__omg__CORBA__SystemException,
  0
};

::acdk::lang::dmi::ClazzInfo* INV_OBJREF::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "INV_OBJREF", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _INV_OBJREF_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    INV_OBJREF::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_INV_OBJREF(INV_OBJREF::clazzInfo());

::acdk::lang::RClass
INV_OBJREF::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
INV_OBJREF::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::org::omg::CORBA::, SystemException)::getCollectableFields(fields);
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo _BAD_PARAM_super___org__omg__CORBA__SystemException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::org::omg::CORBA::SystemException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _BAD_PARAM_interfaces[] =
{
  &_BAD_PARAM_super___org__omg__CORBA__SystemException,
  0
};

::acdk::lang::dmi::ClazzInfo* BAD_PARAM::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "BAD_PARAM", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _BAD_PARAM_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    BAD_PARAM::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_BAD_PARAM(BAD_PARAM::clazzInfo());

::acdk::lang::RClass
BAD_PARAM::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
BAD_PARAM::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::org::omg::CORBA::, SystemException)::getCollectableFields(fields);
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo _BAD_INV_ORDER_super___org__omg__CORBA__SystemException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::org::omg::CORBA::SystemException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _BAD_INV_ORDER_interfaces[] =
{
  &_BAD_INV_ORDER_super___org__omg__CORBA__SystemException,
  0
};

::acdk::lang::dmi::ClazzInfo* BAD_INV_ORDER::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "BAD_INV_ORDER", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _BAD_INV_ORDER_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    BAD_INV_ORDER::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_BAD_INV_ORDER(BAD_INV_ORDER::clazzInfo());

::acdk::lang::RClass
BAD_INV_ORDER::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
BAD_INV_ORDER::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::org::omg::CORBA::, SystemException)::getCollectableFields(fields);
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


::acdk::lang::dmi::ClazzEnumValueInfo PrimitiveKind_pk_null = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "pk_null", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::pk_null, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo PrimitiveKind_pk_void = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "pk_void", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::pk_void, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo PrimitiveKind_pk_short = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "pk_short", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::pk_short, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo PrimitiveKind_pk_long = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "pk_long", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::pk_long, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo PrimitiveKind_pk_ushort = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "pk_ushort", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::pk_ushort, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo PrimitiveKind_pk_ulong = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "pk_ulong", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::pk_ulong, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo PrimitiveKind_pk_float = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "pk_float", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::pk_float, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo PrimitiveKind_pk_double = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "pk_double", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::pk_double, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo PrimitiveKind_pk_boolean = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "pk_boolean", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::pk_boolean, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo PrimitiveKind_pk_char = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "pk_char", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::pk_char, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo PrimitiveKind_pk_octet = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "pk_octet", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::pk_octet, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo PrimitiveKind_pk_any = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "pk_any", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::pk_any, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo PrimitiveKind_pk_TypeCode = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "pk_TypeCode", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::pk_TypeCode, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo PrimitiveKind_pk_Principal = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "pk_Principal", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::pk_Principal, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo PrimitiveKind_pk_string = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "pk_string", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::pk_string, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo PrimitiveKind_pk_objref = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "pk_objref", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::pk_objref, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo PrimitiveKind_pk_longlong = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "pk_longlong", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::pk_longlong, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo PrimitiveKind_pk_ulonglong = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "pk_ulonglong", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::pk_ulonglong, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo PrimitiveKind_pk_longdouble = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "pk_longdouble", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::pk_longdouble, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo PrimitiveKind_pk_wchar = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "pk_wchar", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::pk_wchar, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo PrimitiveKind_pk_wstring = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "pk_wstring", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::pk_wstring, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* PrimitiveKind_enumValues[] = {
  &PrimitiveKind_pk_null,
  &PrimitiveKind_pk_void,
  &PrimitiveKind_pk_short,
  &PrimitiveKind_pk_long,
  &PrimitiveKind_pk_ushort,
  &PrimitiveKind_pk_ulong,
  &PrimitiveKind_pk_float,
  &PrimitiveKind_pk_double,
  &PrimitiveKind_pk_boolean,
  &PrimitiveKind_pk_char,
  &PrimitiveKind_pk_octet,
  &PrimitiveKind_pk_any,
  &PrimitiveKind_pk_TypeCode,
  &PrimitiveKind_pk_Principal,
  &PrimitiveKind_pk_string,
  &PrimitiveKind_pk_objref,
  &PrimitiveKind_pk_longlong,
  &PrimitiveKind_pk_ulonglong,
  &PrimitiveKind_pk_longdouble,
  &PrimitiveKind_pk_wchar,
  &PrimitiveKind_pk_wstring,
0
};

::acdk::lang::dmi::ClazzEnumInfo* PrimitiveKindMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo PrimitiveKind_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "PrimitiveKind", // name
  -1, // hashCode
  "org/omg/CORBA", // ns
  0, // _scopeParent
  0, // _nextSibling
  PrimitiveKind_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_PrimitiveKind(&PrimitiveKind_enumInfo);

  return &PrimitiveKind_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_PrimitiveKindEnumInfo(PrimitiveKindMetaInf::GetEnumInfo());


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo _PrimitiveDef_super___org__omg__CORBA__IDLType =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::org::omg::CORBA::IDLType::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _PrimitiveDef_interfaces[] =
{
  &_PrimitiveDef_super___org__omg__CORBA__IDLType,
  0
};

::acdk::lang::dmi::ClazzInfo* PrimitiveDef::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface, // clazz-flags
  0, //AttributesRes
  "PrimitiveDef", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _PrimitiveDef_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    PrimitiveDef::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_PrimitiveDef(PrimitiveDef::clazzInfo());

::acdk::lang::RClass
PrimitiveDef::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
PrimitiveDef::getCollectableFields(FieldReferences& fields)
{
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo _Repository_super___org__omg__CORBA__Container =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::org::omg::CORBA::Container::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Repository_interfaces[] =
{
  &_Repository_super___org__omg__CORBA__Container,
  0
};

::acdk::lang::dmi::ClazzInfo* Repository::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface, // clazz-flags
  0, //AttributesRes
  "Repository", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Repository_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Repository::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Repository(Repository::clazzInfo());

::acdk::lang::RClass
Repository::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Repository::getCollectableFields(FieldReferences& fields)
{
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo _SequenceDef_super___org__omg__CORBA__IDLType =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::org::omg::CORBA::IDLType::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SequenceDef_interfaces[] =
{
  &_SequenceDef_super___org__omg__CORBA__IDLType,
  0
};

::acdk::lang::dmi::ClazzInfo* SequenceDef::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface, // clazz-flags
  0, //AttributesRes
  "SequenceDef", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SequenceDef_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SequenceDef::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SequenceDef(SequenceDef::clazzInfo());

::acdk::lang::RClass
SequenceDef::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SequenceDef::getCollectableFields(FieldReferences& fields)
{
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo _StringDef_super___org__omg__CORBA__IDLType =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::org::omg::CORBA::IDLType::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _StringDef_interfaces[] =
{
  &_StringDef_super___org__omg__CORBA__IDLType,
  0
};

::acdk::lang::dmi::ClazzInfo* StringDef::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface, // clazz-flags
  0, //AttributesRes
  "StringDef", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _StringDef_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    StringDef::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_StringDef(StringDef::clazzInfo());

::acdk::lang::RClass
StringDef::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
StringDef::getCollectableFields(FieldReferences& fields)
{
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo _StructMember_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _StructMember_interfaces[] =
{
  &_StructMember_super___acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* StructMember::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "StructMember", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _StructMember_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 3, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    StructMember::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_StructMember(StructMember::clazzInfo());

::acdk::lang::RClass
StructMember::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
StructMember::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->name._ref_this()); // RString name 
  fields.push_back((::acdk::lang::RObject*)this->type._ref_this()); // RTypeCode type 
  fields.push_back((::acdk::lang::RObject*)this->type_def._ref_this()); // RIDLType type_def 
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo _StructDef_super___org__omg__CORBA__IDLType =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::org::omg::CORBA::IDLType::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _StructDef_interfaces[] =
{
  &_StructDef_super___org__omg__CORBA__IDLType,
  0
};

::acdk::lang::dmi::ClazzInfo* StructDef::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface, // clazz-flags
  0, //AttributesRes
  "StructDef", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _StructDef_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    StructDef::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_StructDef(StructDef::clazzInfo());

::acdk::lang::RClass
StructDef::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
StructDef::getCollectableFields(FieldReferences& fields)
{
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


::acdk::lang::dmi::ClazzEnumValueInfo TCKind_tk_null = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "tk_null", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::tk_null, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TCKind_tk_void = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "tk_void", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::tk_void, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TCKind_tk_short = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "tk_short", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::tk_short, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TCKind_tk_long = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "tk_long", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::tk_long, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TCKind_tk_ushort = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "tk_ushort", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::tk_ushort, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TCKind_tk_ulong = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "tk_ulong", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::tk_ulong, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TCKind_tk_float = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "tk_float", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::tk_float, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TCKind_tk_double = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "tk_double", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::tk_double, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TCKind_tk_boolean = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "tk_boolean", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::tk_boolean, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TCKind_tk_char = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "tk_char", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::tk_char, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TCKind_tk_octet = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "tk_octet", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::tk_octet, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TCKind_tk_any = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "tk_any", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::tk_any, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TCKind_tk_TypeCode = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "tk_TypeCode", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::tk_TypeCode, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TCKind_tk_Principal = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "tk_Principal", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::tk_Principal, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TCKind_tk_objref = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "tk_objref", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::tk_objref, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TCKind_tk_struct = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "tk_struct", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::tk_struct, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TCKind_tk_union = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "tk_union", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::tk_union, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TCKind_tk_enum = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "tk_enum", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::tk_enum, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TCKind_tk_string = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "tk_string", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::tk_string, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TCKind_tk_sequence = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "tk_sequence", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::tk_sequence, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TCKind_tk_array = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "tk_array", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::tk_array, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TCKind_tk_alias = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "tk_alias", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::tk_alias, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TCKind_tk_except = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "tk_except", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::tk_except, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TCKind_tk_longlong = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "tk_longlong", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::tk_longlong, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TCKind_tk_ulonglong = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "tk_ulonglong", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::tk_ulonglong, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TCKind_tk_longdouble = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "tk_longdouble", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::tk_longdouble, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TCKind_tk_wchar = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "tk_wchar", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::tk_wchar, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TCKind_tk_wstring = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "tk_wstring", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::tk_wstring, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TCKind_tk_fixed = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "tk_fixed", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::tk_fixed, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TCKind_tk_value = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "tk_value", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::tk_value, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TCKind_tk_value_box = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "tk_value_box", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::tk_value_box, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TCKind_tk_native = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "tk_native", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::tk_native, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TCKind_tk_abstract_interface = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "tk_abstract_interface", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::tk_abstract_interface, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* TCKind_enumValues[] = {
  &TCKind_tk_null,
  &TCKind_tk_void,
  &TCKind_tk_short,
  &TCKind_tk_long,
  &TCKind_tk_ushort,
  &TCKind_tk_ulong,
  &TCKind_tk_float,
  &TCKind_tk_double,
  &TCKind_tk_boolean,
  &TCKind_tk_char,
  &TCKind_tk_octet,
  &TCKind_tk_any,
  &TCKind_tk_TypeCode,
  &TCKind_tk_Principal,
  &TCKind_tk_objref,
  &TCKind_tk_struct,
  &TCKind_tk_union,
  &TCKind_tk_enum,
  &TCKind_tk_string,
  &TCKind_tk_sequence,
  &TCKind_tk_array,
  &TCKind_tk_alias,
  &TCKind_tk_except,
  &TCKind_tk_longlong,
  &TCKind_tk_ulonglong,
  &TCKind_tk_longdouble,
  &TCKind_tk_wchar,
  &TCKind_tk_wstring,
  &TCKind_tk_fixed,
  &TCKind_tk_value,
  &TCKind_tk_value_box,
  &TCKind_tk_native,
  &TCKind_tk_abstract_interface,
0
};

::acdk::lang::dmi::ClazzEnumInfo* TCKindMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo TCKind_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "TCKind", // name
  -1, // hashCode
  "org/omg/CORBA", // ns
  0, // _scopeParent
  0, // _nextSibling
  TCKind_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_TCKind(&TCKind_enumInfo);

  return &TCKind_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_TCKindEnumInfo(TCKindMetaInf::GetEnumInfo());


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 

::acdk::lang::dmi::ClazzSuperInfo _TypeCode_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TypeCode_interfaces[] =
{
  &_TypeCode_super___acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* TypeCode::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "TypeCode", // name of class
  -1, // hashCode
  "org/omg/CORBA", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TypeCode_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TypeCode::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TypeCode(TypeCode::clazzInfo());

::acdk::lang::RClass
TypeCode::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TypeCode::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace org
} // namespace omg
} // namespace CORBA

