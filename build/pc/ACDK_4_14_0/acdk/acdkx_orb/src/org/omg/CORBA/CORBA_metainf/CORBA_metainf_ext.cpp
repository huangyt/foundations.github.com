// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../CORBA.h"
#include "../Any.h"
#include "../AttributeDef.h"
#include "../Contained.h"
#include <acdkx/orb/AORB.h>
#include "../Container.h"
#include "../Context.h"
#include "../CORBA.h"
#include "../ExceptionDef.h"
#include "../IDLType.h"
#include "../InterfaceDef.h"
#include <acdkx/orb/AORB.h>
#include "../IRObject.h"
#include "../ModuleDef.h"
#include <acdkx/orb/AORB.h>
#include "../Object.h"
#include "../OperationDef.h"
#include "../ORB.h"
#include "../OrbExceptions.h"
#include "../PrimitiveDef.h"
#include "../Repository.h"
#include "../SequenceDef.h"
#include "../ServerRequest.h"
#include "../StringDef.h"
#include "../StructDef.h"
#include "../TypeCode.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>


struct acdk::lang::dmi::UnitInfo org_omg_CORBA_unitInfo = {
  ::acdk::lang::dmi::MiUnitInfo, // flags
  0, //attributeRes
  "CORBA", // name of unit
  -1, // hashCode
  "org/omg", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  0 // _firstChild first ClazzInfo of this unit
};

static ::acdk::lang::dmi::RegisterUnitInfo _register_org_omg_CORBA_unitInfo(&org_omg_CORBA_unitInfo);


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
Any_create_array(int length)
{
  return new ObjectArrayImpl<RAny>(length);
}

//static
::acdk::lang::RObject
Any_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Any_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Any_method_Any__LRAny__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Any();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Any_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Any::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Any_method_equal_INLRAny__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Any* This = dmi_cast<Any>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Any::equal((RAny)args[0].getObjectVar());
    else
      ret = This->equal((RAny)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Any_method_extract_Object__L_org_omg_CORBA_RObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Any* This = dmi_cast<Any>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Any::extract_Object();
    else
        ret = (::acdk::lang::RObject)This->extract_Object();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Any_method_extract_TypeCode__LRTypeCode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Any* This = dmi_cast<Any>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Any::extract_TypeCode();
    else
        ret = (::acdk::lang::RObject)This->extract_TypeCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Any_method_extract_Value__L_acdk_io_RSerializable__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Any* This = dmi_cast<Any>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Any::extract_Value();
    else
        ret = (::acdk::lang::RObject)This->extract_Value();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Any_method_extract_any__LRAny__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Any* This = dmi_cast<Any>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Any::extract_any();
    else
        ret = (::acdk::lang::RObject)This->extract_any();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Any_method_extract_boolean__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Any* This = dmi_cast<Any>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Any::extract_boolean();
    else
      ret = This->extract_boolean();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Any_method_extract_char__C_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Any* This = dmi_cast<Any>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Any::extract_char();
    else
      ret = This->extract_char();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Any_method_extract_double__D_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Any* This = dmi_cast<Any>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Any::extract_double();
    else
      ret = This->extract_double();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Any_method_extract_float__F_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Any* This = dmi_cast<Any>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Any::extract_float();
    else
      ret = This->extract_float();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Any_method_extract_long__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Any* This = dmi_cast<Any>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Any::extract_long();
    else
      ret = This->extract_long();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Any_method_extract_longlong__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Any* This = dmi_cast<Any>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Any::extract_longlong();
    else
      ret = This->extract_longlong();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Any_method_extract_octet__B_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Any* This = dmi_cast<Any>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Any::extract_octet();
    else
      ret = This->extract_octet();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Any_method_extract_short__S_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Any* This = dmi_cast<Any>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Any::extract_short();
    else
      ret = This->extract_short();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Any_method_extract_string__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Any* This = dmi_cast<Any>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Any::extract_string();
    else
        ret = (::acdk::lang::RObject)This->extract_string();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Any_method_extract_ulong__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Any* This = dmi_cast<Any>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Any::extract_ulong();
    else
      ret = This->extract_ulong();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Any_method_extract_ulonglong__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Any* This = dmi_cast<Any>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Any::extract_ulonglong();
    else
      ret = This->extract_ulonglong();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Any_method_extract_ushort__S_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Any* This = dmi_cast<Any>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Any::extract_ushort();
    else
      ret = This->extract_ushort();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Any_method_insert_Object_INL_org_omg_CORBA_RObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Any* This = dmi_cast<Any>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Any::insert_Object((::org::omg::CORBA::RObject)args[0].getObjectVar());
    else
        This->insert_Object((::org::omg::CORBA::RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Any_method_insert_Object_INL_org_omg_CORBA_RObject_INLRTypeCode__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Any* This = dmi_cast<Any>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Any::insert_Object((::org::omg::CORBA::RObject)args[0].getObjectVar(), (RTypeCode)args[1].getObjectVar());
    else
        This->insert_Object((::org::omg::CORBA::RObject)args[0].getObjectVar(), (RTypeCode)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Any_method_insert_TypeCode_INLRTypeCode__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Any* This = dmi_cast<Any>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Any::insert_TypeCode((RTypeCode)args[0].getObjectVar());
    else
        This->insert_TypeCode((RTypeCode)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Any_method_insert_Value_INL_acdk_io_RSerializable__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Any* This = dmi_cast<Any>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Any::insert_Value((::acdk::io::RSerializable)args[0].getObjectVar());
    else
        This->insert_Value((::acdk::io::RSerializable)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Any_method_insert_Value_INL_acdk_io_RSerializable_INLRTypeCode__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Any* This = dmi_cast<Any>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Any::insert_Value((::acdk::io::RSerializable)args[0].getObjectVar(), (RTypeCode)args[1].getObjectVar());
    else
        This->insert_Value((::acdk::io::RSerializable)args[0].getObjectVar(), (RTypeCode)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Any_method_insert_any_INLRAny__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Any* This = dmi_cast<Any>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Any::insert_any((RAny)args[0].getObjectVar());
    else
        This->insert_any((RAny)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Any_method_insert_boolean_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Any* This = dmi_cast<Any>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Any::insert_boolean(args[0].getBoolVar());
    else
        This->insert_boolean(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Any_method_insert_char_C_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Any* This = dmi_cast<Any>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Any::insert_char(args[0].getCharVar());
    else
        This->insert_char(args[0].getCharVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Any_method_insert_double_D_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Any* This = dmi_cast<Any>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Any::insert_double(args[0].getDoubleVar());
    else
        This->insert_double(args[0].getDoubleVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Any_method_insert_float_F_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Any* This = dmi_cast<Any>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Any::insert_float(args[0].getFloatVar());
    else
        This->insert_float(args[0].getFloatVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Any_method_insert_long_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Any* This = dmi_cast<Any>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Any::insert_long(args[0].getIntVar());
    else
        This->insert_long(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Any_method_insert_longlong_J_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Any* This = dmi_cast<Any>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Any::insert_longlong(args[0].getLongVar());
    else
        This->insert_longlong(args[0].getLongVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Any_method_insert_octet_B_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Any* This = dmi_cast<Any>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Any::insert_octet(args[0].getByteVar());
    else
        This->insert_octet(args[0].getByteVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Any_method_insert_short_S_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Any* This = dmi_cast<Any>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Any::insert_short(args[0].getShortVar());
    else
        This->insert_short(args[0].getShortVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Any_method_insert_string_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Any* This = dmi_cast<Any>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Any::insert_string((RString)args[0].getObjectVar());
    else
        This->insert_string((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Any_method_insert_ulong_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Any* This = dmi_cast<Any>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Any::insert_ulong(args[0].getIntVar());
    else
        This->insert_ulong(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Any_method_insert_ulonglong_J_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Any* This = dmi_cast<Any>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Any::insert_ulonglong(args[0].getLongVar());
    else
        This->insert_ulonglong(args[0].getLongVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Any_method_insert_ushort_S_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Any* This = dmi_cast<Any>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Any::insert_ushort(args[0].getShortVar());
    else
        This->insert_ushort(args[0].getShortVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Any_method_read_value_INL_org_omg_CORBA_portable_RInputStream_INLRTypeCode__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Any* This = dmi_cast<Any>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Any::read_value((::org::omg::CORBA::portable::RInputStream)args[0].getObjectVar(), (RTypeCode)args[1].getObjectVar());
    else
        This->read_value((::org::omg::CORBA::portable::RInputStream)args[0].getObjectVar(), (RTypeCode)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Any_method_tckind__LTCKind__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Any* This = dmi_cast<Any>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = (TCKind)This->Any::tckind();
    else
      ret = (TCKind)This->tckind();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Any_method_type__LRTypeCode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Any* This = dmi_cast<Any>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Any::type();
    else
        ret = (::acdk::lang::RObject)This->type();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Any_method_type_INLRTypeCode__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Any* This = dmi_cast<Any>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Any::type((RTypeCode)args[0].getObjectVar());
    else
        This->type((RTypeCode)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Any_method_write_value_INL_org_omg_CORBA_portable_ROutputStream__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Any* This = dmi_cast<Any>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Any::write_value((::org::omg::CORBA::portable::ROutputStream)args[0].getObjectVar());
    else
        This->write_value((::org::omg::CORBA::portable::ROutputStream)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Any_fields__type_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Any* This = dmi_cast<Any>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->_type), flags);
    else
      This->_type = (TCKind)var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo Any_fields__type = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_type", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Any_MetainfoWrapper::Any_fields__type_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _Any_fields[] = 
{
  &Any_fields__type,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Any_methods_Any__LRAny__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Any_methods_Any__LRAny__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Any_method_Any__LRAny_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Any", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Any::clazzInfo(), // return type
  "_0_Any", // alternative name of method
  -1, // altlabelHashCode
  Any_methods_Any__LRAny__args, // the arguments
  0, //arguments count
  Any_methods_Any__LRAny__exceptions, // the declared exceptions
  Any_MetainfoWrapper::Any_method_Any__LRAny__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Any_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Any_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Any_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_F_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Any_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Any_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Any_MetainfoWrapper::Any_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Any_methods_equal_INLRAny__Z_arg_a = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "a", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAny::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Any_methods_equal_INLRAny__Z_args[] = 
{
  &Any_methods_equal_INLRAny__Z_arg_a,
  0
};

::acdk::lang::dmi::ClazzInfo* Any_methods_equal_INLRAny__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Any_method_equal_INLRAny__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_equal", // alternative name of method
  -1, // altlabelHashCode
  Any_methods_equal_INLRAny__Z_args, // the arguments
  0, //arguments count
  Any_methods_equal_INLRAny__Z_exceptions, // the declared exceptions
  Any_MetainfoWrapper::Any_method_equal_INLRAny__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Any_methods_extract_Object__L_org_omg_CORBA_RObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Any_methods_extract_Object__L_org_omg_CORBA_RObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Any_method_extract_Object__L_org_omg_CORBA_RObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "extract_Object", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo(), // return type
  "_a_extract_Object", // alternative name of method
  -1, // altlabelHashCode
  Any_methods_extract_Object__L_org_omg_CORBA_RObject__args, // the arguments
  0, //arguments count
  Any_methods_extract_Object__L_org_omg_CORBA_RObject__exceptions, // the declared exceptions
  Any_MetainfoWrapper::Any_method_extract_Object__L_org_omg_CORBA_RObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Any_methods_extract_TypeCode__LRTypeCode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Any_methods_extract_TypeCode__LRTypeCode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Any_method_extract_TypeCode__LRTypeCode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "extract_TypeCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTypeCode::clazzInfo(), // return type
  "_e_extract_TypeCode", // alternative name of method
  -1, // altlabelHashCode
  Any_methods_extract_TypeCode__LRTypeCode__args, // the arguments
  0, //arguments count
  Any_methods_extract_TypeCode__LRTypeCode__exceptions, // the declared exceptions
  Any_MetainfoWrapper::Any_method_extract_TypeCode__LRTypeCode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Any_methods_extract_Value__L_acdk_io_RSerializable__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Any_methods_extract_Value__L_acdk_io_RSerializable__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Any_method_extract_Value__L_acdk_io_RSerializable_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "extract_Value", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::RSerializable::clazzInfo(), // return type
  "_i_extract_Value", // alternative name of method
  -1, // altlabelHashCode
  Any_methods_extract_Value__L_acdk_io_RSerializable__args, // the arguments
  0, //arguments count
  Any_methods_extract_Value__L_acdk_io_RSerializable__exceptions, // the declared exceptions
  Any_MetainfoWrapper::Any_method_extract_Value__L_acdk_io_RSerializable__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Any_methods_extract_any__LRAny__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Any_methods_extract_any__LRAny__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Any_method_extract_any__LRAny_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "extract_any", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAny::clazzInfo(), // return type
  "_3_extract_any", // alternative name of method
  -1, // altlabelHashCode
  Any_methods_extract_any__LRAny__args, // the arguments
  0, //arguments count
  Any_methods_extract_any__LRAny__exceptions, // the declared exceptions
  Any_MetainfoWrapper::Any_method_extract_any__LRAny__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Any_methods_extract_boolean__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Any_methods_extract_boolean__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Any_method_extract_boolean__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "extract_boolean", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_extract_boolean", // alternative name of method
  -1, // altlabelHashCode
  Any_methods_extract_boolean__Z_args, // the arguments
  0, //arguments count
  Any_methods_extract_boolean__Z_exceptions, // the declared exceptions
  Any_MetainfoWrapper::Any_method_extract_boolean__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Any_methods_extract_char__C_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Any_methods_extract_char__C_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Any_method_extract_char__C = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "extract_char", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz(), // return type
  "_5_extract_char", // alternative name of method
  -1, // altlabelHashCode
  Any_methods_extract_char__C_args, // the arguments
  0, //arguments count
  Any_methods_extract_char__C_exceptions, // the declared exceptions
  Any_MetainfoWrapper::Any_method_extract_char__C_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Any_methods_extract_double__D_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Any_methods_extract_double__D_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Any_method_extract_double__D = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "extract_double", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(), // return type
  "_6_extract_double", // alternative name of method
  -1, // altlabelHashCode
  Any_methods_extract_double__D_args, // the arguments
  0, //arguments count
  Any_methods_extract_double__D_exceptions, // the declared exceptions
  Any_MetainfoWrapper::Any_method_extract_double__D_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Any_methods_extract_float__F_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Any_methods_extract_float__F_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Any_method_extract_float__F = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "extract_float", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz(), // return type
  "_7_extract_float", // alternative name of method
  -1, // altlabelHashCode
  Any_methods_extract_float__F_args, // the arguments
  0, //arguments count
  Any_methods_extract_float__F_exceptions, // the declared exceptions
  Any_MetainfoWrapper::Any_method_extract_float__F_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Any_methods_extract_long__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Any_methods_extract_long__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Any_method_extract_long__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "extract_long", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_8_extract_long", // alternative name of method
  -1, // altlabelHashCode
  Any_methods_extract_long__I_args, // the arguments
  0, //arguments count
  Any_methods_extract_long__I_exceptions, // the declared exceptions
  Any_MetainfoWrapper::Any_method_extract_long__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Any_methods_extract_longlong__J_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Any_methods_extract_longlong__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Any_method_extract_longlong__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "extract_longlong", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_9_extract_longlong", // alternative name of method
  -1, // altlabelHashCode
  Any_methods_extract_longlong__J_args, // the arguments
  0, //arguments count
  Any_methods_extract_longlong__J_exceptions, // the declared exceptions
  Any_MetainfoWrapper::Any_method_extract_longlong__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Any_methods_extract_octet__B_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Any_methods_extract_octet__B_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Any_method_extract_octet__B = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "extract_octet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz(), // return type
  "_b_extract_octet", // alternative name of method
  -1, // altlabelHashCode
  Any_methods_extract_octet__B_args, // the arguments
  0, //arguments count
  Any_methods_extract_octet__B_exceptions, // the declared exceptions
  Any_MetainfoWrapper::Any_method_extract_octet__B_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Any_methods_extract_short__S_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Any_methods_extract_short__S_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Any_method_extract_short__S = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "extract_short", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(), // return type
  "_c_extract_short", // alternative name of method
  -1, // altlabelHashCode
  Any_methods_extract_short__S_args, // the arguments
  0, //arguments count
  Any_methods_extract_short__S_exceptions, // the declared exceptions
  Any_MetainfoWrapper::Any_method_extract_short__S_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Any_methods_extract_string__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Any_methods_extract_string__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Any_method_extract_string__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "extract_string", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_d_extract_string", // alternative name of method
  -1, // altlabelHashCode
  Any_methods_extract_string__LRString__args, // the arguments
  0, //arguments count
  Any_methods_extract_string__LRString__exceptions, // the declared exceptions
  Any_MetainfoWrapper::Any_method_extract_string__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Any_methods_extract_ulong__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Any_methods_extract_ulong__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Any_method_extract_ulong__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "extract_ulong", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_f_extract_ulong", // alternative name of method
  -1, // altlabelHashCode
  Any_methods_extract_ulong__I_args, // the arguments
  0, //arguments count
  Any_methods_extract_ulong__I_exceptions, // the declared exceptions
  Any_MetainfoWrapper::Any_method_extract_ulong__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Any_methods_extract_ulonglong__J_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Any_methods_extract_ulonglong__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Any_method_extract_ulonglong__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "extract_ulonglong", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_g_extract_ulonglong", // alternative name of method
  -1, // altlabelHashCode
  Any_methods_extract_ulonglong__J_args, // the arguments
  0, //arguments count
  Any_methods_extract_ulonglong__J_exceptions, // the declared exceptions
  Any_MetainfoWrapper::Any_method_extract_ulonglong__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Any_methods_extract_ushort__S_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Any_methods_extract_ushort__S_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Any_method_extract_ushort__S = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "extract_ushort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(), // return type
  "_h_extract_ushort", // alternative name of method
  -1, // altlabelHashCode
  Any_methods_extract_ushort__S_args, // the arguments
  0, //arguments count
  Any_methods_extract_ushort__S_exceptions, // the declared exceptions
  Any_MetainfoWrapper::Any_method_extract_ushort__S_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Any_methods_insert_Object_INL_org_omg_CORBA_RObject__V_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Any_methods_insert_Object_INL_org_omg_CORBA_RObject__V_args[] = 
{
  &Any_methods_insert_Object_INL_org_omg_CORBA_RObject__V_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* Any_methods_insert_Object_INL_org_omg_CORBA_RObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Any_method_insert_Object_INL_org_omg_CORBA_RObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insert_Object", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_q_insert_Object", // alternative name of method
  -1, // altlabelHashCode
  Any_methods_insert_Object_INL_org_omg_CORBA_RObject__V_args, // the arguments
  0, //arguments count
  Any_methods_insert_Object_INL_org_omg_CORBA_RObject__V_exceptions, // the declared exceptions
  Any_MetainfoWrapper::Any_method_insert_Object_INL_org_omg_CORBA_RObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Any_methods_insert_Object_INL_org_omg_CORBA_RObject_INLRTypeCode__V_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Any_methods_insert_Object_INL_org_omg_CORBA_RObject_INLRTypeCode__V_arg_t = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "t", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTypeCode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Any_methods_insert_Object_INL_org_omg_CORBA_RObject_INLRTypeCode__V_args[] = 
{
  &Any_methods_insert_Object_INL_org_omg_CORBA_RObject_INLRTypeCode__V_arg_o,
  &Any_methods_insert_Object_INL_org_omg_CORBA_RObject_INLRTypeCode__V_arg_t,
  0
};

::acdk::lang::dmi::ClazzInfo* Any_methods_insert_Object_INL_org_omg_CORBA_RObject_INLRTypeCode__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Any_method_insert_Object_INL_org_omg_CORBA_RObject_INLRTypeCode__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insert_Object", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_r_insert_Object", // alternative name of method
  -1, // altlabelHashCode
  Any_methods_insert_Object_INL_org_omg_CORBA_RObject_INLRTypeCode__V_args, // the arguments
  0, //arguments count
  Any_methods_insert_Object_INL_org_omg_CORBA_RObject_INLRTypeCode__V_exceptions, // the declared exceptions
  Any_MetainfoWrapper::Any_method_insert_Object_INL_org_omg_CORBA_RObject_INLRTypeCode__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Any_methods_insert_TypeCode_INLRTypeCode__V_arg_t = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "t", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTypeCode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Any_methods_insert_TypeCode_INLRTypeCode__V_args[] = 
{
  &Any_methods_insert_TypeCode_INLRTypeCode__V_arg_t,
  0
};

::acdk::lang::dmi::ClazzInfo* Any_methods_insert_TypeCode_INLRTypeCode__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Any_method_insert_TypeCode_INLRTypeCode__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insert_TypeCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_v_insert_TypeCode", // alternative name of method
  -1, // altlabelHashCode
  Any_methods_insert_TypeCode_INLRTypeCode__V_args, // the arguments
  0, //arguments count
  Any_methods_insert_TypeCode_INLRTypeCode__V_exceptions, // the declared exceptions
  Any_MetainfoWrapper::Any_method_insert_TypeCode_INLRTypeCode__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Any_methods_insert_Value_INL_acdk_io_RSerializable__V_arg_v = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "v", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::RSerializable::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Any_methods_insert_Value_INL_acdk_io_RSerializable__V_args[] = 
{
  &Any_methods_insert_Value_INL_acdk_io_RSerializable__V_arg_v,
  0
};

::acdk::lang::dmi::ClazzInfo* Any_methods_insert_Value_INL_acdk_io_RSerializable__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Any_method_insert_Value_INL_acdk_io_RSerializable__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insert_Value", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_z_insert_Value", // alternative name of method
  -1, // altlabelHashCode
  Any_methods_insert_Value_INL_acdk_io_RSerializable__V_args, // the arguments
  0, //arguments count
  Any_methods_insert_Value_INL_acdk_io_RSerializable__V_exceptions, // the declared exceptions
  Any_MetainfoWrapper::Any_method_insert_Value_INL_acdk_io_RSerializable__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Any_methods_insert_Value_INL_acdk_io_RSerializable_INLRTypeCode__V_arg_v = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "v", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::RSerializable::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Any_methods_insert_Value_INL_acdk_io_RSerializable_INLRTypeCode__V_arg_t = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "t", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTypeCode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Any_methods_insert_Value_INL_acdk_io_RSerializable_INLRTypeCode__V_args[] = 
{
  &Any_methods_insert_Value_INL_acdk_io_RSerializable_INLRTypeCode__V_arg_v,
  &Any_methods_insert_Value_INL_acdk_io_RSerializable_INLRTypeCode__V_arg_t,
  0
};

::acdk::lang::dmi::ClazzInfo* Any_methods_insert_Value_INL_acdk_io_RSerializable_INLRTypeCode__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Any_method_insert_Value_INL_acdk_io_RSerializable_INLRTypeCode__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insert_Value", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_A_insert_Value", // alternative name of method
  -1, // altlabelHashCode
  Any_methods_insert_Value_INL_acdk_io_RSerializable_INLRTypeCode__V_args, // the arguments
  0, //arguments count
  Any_methods_insert_Value_INL_acdk_io_RSerializable_INLRTypeCode__V_exceptions, // the declared exceptions
  Any_MetainfoWrapper::Any_method_insert_Value_INL_acdk_io_RSerializable_INLRTypeCode__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Any_methods_insert_any_INLRAny__V_arg_a = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "a", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAny::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Any_methods_insert_any_INLRAny__V_args[] = 
{
  &Any_methods_insert_any_INLRAny__V_arg_a,
  0
};

::acdk::lang::dmi::ClazzInfo* Any_methods_insert_any_INLRAny__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Any_method_insert_any_INLRAny__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insert_any", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_j_insert_any", // alternative name of method
  -1, // altlabelHashCode
  Any_methods_insert_any_INLRAny__V_args, // the arguments
  0, //arguments count
  Any_methods_insert_any_INLRAny__V_exceptions, // the declared exceptions
  Any_MetainfoWrapper::Any_method_insert_any_INLRAny__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Any_methods_insert_boolean_Z_V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Any_methods_insert_boolean_Z_V_args[] = 
{
  &Any_methods_insert_boolean_Z_V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* Any_methods_insert_boolean_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Any_method_insert_boolean_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insert_boolean", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_k_insert_boolean", // alternative name of method
  -1, // altlabelHashCode
  Any_methods_insert_boolean_Z_V_args, // the arguments
  0, //arguments count
  Any_methods_insert_boolean_Z_V_exceptions, // the declared exceptions
  Any_MetainfoWrapper::Any_method_insert_boolean_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Any_methods_insert_char_C_V_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Any_methods_insert_char_C_V_args[] = 
{
  &Any_methods_insert_char_C_V_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Any_methods_insert_char_C_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Any_method_insert_char_C_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insert_char", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_l_insert_char", // alternative name of method
  -1, // altlabelHashCode
  Any_methods_insert_char_C_V_args, // the arguments
  0, //arguments count
  Any_methods_insert_char_C_V_exceptions, // the declared exceptions
  Any_MetainfoWrapper::Any_method_insert_char_C_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Any_methods_insert_double_D_V_arg_d = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "d", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Any_methods_insert_double_D_V_args[] = 
{
  &Any_methods_insert_double_D_V_arg_d,
  0
};

::acdk::lang::dmi::ClazzInfo* Any_methods_insert_double_D_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Any_method_insert_double_D_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insert_double", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_m_insert_double", // alternative name of method
  -1, // altlabelHashCode
  Any_methods_insert_double_D_V_args, // the arguments
  0, //arguments count
  Any_methods_insert_double_D_V_exceptions, // the declared exceptions
  Any_MetainfoWrapper::Any_method_insert_double_D_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Any_methods_insert_float_F_V_arg_f = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "f", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Any_methods_insert_float_F_V_args[] = 
{
  &Any_methods_insert_float_F_V_arg_f,
  0
};

::acdk::lang::dmi::ClazzInfo* Any_methods_insert_float_F_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Any_method_insert_float_F_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insert_float", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_n_insert_float", // alternative name of method
  -1, // altlabelHashCode
  Any_methods_insert_float_F_V_args, // the arguments
  0, //arguments count
  Any_methods_insert_float_F_V_exceptions, // the declared exceptions
  Any_MetainfoWrapper::Any_method_insert_float_F_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Any_methods_insert_long_I_V_arg_l = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "l", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Any_methods_insert_long_I_V_args[] = 
{
  &Any_methods_insert_long_I_V_arg_l,
  0
};

::acdk::lang::dmi::ClazzInfo* Any_methods_insert_long_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Any_method_insert_long_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insert_long", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_o_insert_long", // alternative name of method
  -1, // altlabelHashCode
  Any_methods_insert_long_I_V_args, // the arguments
  0, //arguments count
  Any_methods_insert_long_I_V_exceptions, // the declared exceptions
  Any_MetainfoWrapper::Any_method_insert_long_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Any_methods_insert_longlong_J_V_arg_l = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "l", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Any_methods_insert_longlong_J_V_args[] = 
{
  &Any_methods_insert_longlong_J_V_arg_l,
  0
};

::acdk::lang::dmi::ClazzInfo* Any_methods_insert_longlong_J_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Any_method_insert_longlong_J_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insert_longlong", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_p_insert_longlong", // alternative name of method
  -1, // altlabelHashCode
  Any_methods_insert_longlong_J_V_args, // the arguments
  0, //arguments count
  Any_methods_insert_longlong_J_V_exceptions, // the declared exceptions
  Any_MetainfoWrapper::Any_method_insert_longlong_J_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Any_methods_insert_octet_B_V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Any_methods_insert_octet_B_V_args[] = 
{
  &Any_methods_insert_octet_B_V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* Any_methods_insert_octet_B_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Any_method_insert_octet_B_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insert_octet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_s_insert_octet", // alternative name of method
  -1, // altlabelHashCode
  Any_methods_insert_octet_B_V_args, // the arguments
  0, //arguments count
  Any_methods_insert_octet_B_V_exceptions, // the declared exceptions
  Any_MetainfoWrapper::Any_method_insert_octet_B_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Any_methods_insert_short_S_V_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Any_methods_insert_short_S_V_args[] = 
{
  &Any_methods_insert_short_S_V_arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* Any_methods_insert_short_S_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Any_method_insert_short_S_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insert_short", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_t_insert_short", // alternative name of method
  -1, // altlabelHashCode
  Any_methods_insert_short_S_V_args, // the arguments
  0, //arguments count
  Any_methods_insert_short_S_V_exceptions, // the declared exceptions
  Any_MetainfoWrapper::Any_method_insert_short_S_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Any_methods_insert_string_INLRString__V_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Any_methods_insert_string_INLRString__V_args[] = 
{
  &Any_methods_insert_string_INLRString__V_arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* Any_methods_insert_string_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Any_method_insert_string_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insert_string", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_u_insert_string", // alternative name of method
  -1, // altlabelHashCode
  Any_methods_insert_string_INLRString__V_args, // the arguments
  0, //arguments count
  Any_methods_insert_string_INLRString__V_exceptions, // the declared exceptions
  Any_MetainfoWrapper::Any_method_insert_string_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Any_methods_insert_ulong_I_V_arg_l = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "l", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Any_methods_insert_ulong_I_V_args[] = 
{
  &Any_methods_insert_ulong_I_V_arg_l,
  0
};

::acdk::lang::dmi::ClazzInfo* Any_methods_insert_ulong_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Any_method_insert_ulong_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insert_ulong", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_w_insert_ulong", // alternative name of method
  -1, // altlabelHashCode
  Any_methods_insert_ulong_I_V_args, // the arguments
  0, //arguments count
  Any_methods_insert_ulong_I_V_exceptions, // the declared exceptions
  Any_MetainfoWrapper::Any_method_insert_ulong_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Any_methods_insert_ulonglong_J_V_arg_l = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "l", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Any_methods_insert_ulonglong_J_V_args[] = 
{
  &Any_methods_insert_ulonglong_J_V_arg_l,
  0
};

::acdk::lang::dmi::ClazzInfo* Any_methods_insert_ulonglong_J_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Any_method_insert_ulonglong_J_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insert_ulonglong", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_x_insert_ulonglong", // alternative name of method
  -1, // altlabelHashCode
  Any_methods_insert_ulonglong_J_V_args, // the arguments
  0, //arguments count
  Any_methods_insert_ulonglong_J_V_exceptions, // the declared exceptions
  Any_MetainfoWrapper::Any_method_insert_ulonglong_J_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Any_methods_insert_ushort_S_V_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Any_methods_insert_ushort_S_V_args[] = 
{
  &Any_methods_insert_ushort_S_V_arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* Any_methods_insert_ushort_S_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Any_method_insert_ushort_S_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insert_ushort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_y_insert_ushort", // alternative name of method
  -1, // altlabelHashCode
  Any_methods_insert_ushort_S_V_args, // the arguments
  0, //arguments count
  Any_methods_insert_ushort_S_V_exceptions, // the declared exceptions
  Any_MetainfoWrapper::Any_method_insert_ushort_S_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Any_methods_read_value_INL_org_omg_CORBA_portable_RInputStream_INLRTypeCode__V_arg_is = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "is", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::portable::RInputStream::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Any_methods_read_value_INL_org_omg_CORBA_portable_RInputStream_INLRTypeCode__V_arg_t = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "t", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTypeCode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Any_methods_read_value_INL_org_omg_CORBA_portable_RInputStream_INLRTypeCode__V_args[] = 
{
  &Any_methods_read_value_INL_org_omg_CORBA_portable_RInputStream_INLRTypeCode__V_arg_is,
  &Any_methods_read_value_INL_org_omg_CORBA_portable_RInputStream_INLRTypeCode__V_arg_t,
  0
};

::acdk::lang::dmi::ClazzInfo* Any_methods_read_value_INL_org_omg_CORBA_portable_RInputStream_INLRTypeCode__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Any_method_read_value_INL_org_omg_CORBA_portable_RInputStream_INLRTypeCode__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "read_value", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_B_read_value", // alternative name of method
  -1, // altlabelHashCode
  Any_methods_read_value_INL_org_omg_CORBA_portable_RInputStream_INLRTypeCode__V_args, // the arguments
  0, //arguments count
  Any_methods_read_value_INL_org_omg_CORBA_portable_RInputStream_INLRTypeCode__V_exceptions, // the declared exceptions
  Any_MetainfoWrapper::Any_method_read_value_INL_org_omg_CORBA_portable_RInputStream_INLRTypeCode__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Any_methods_tckind__LTCKind__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Any_methods_tckind__LTCKind__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Any_method_tckind__LTCKind_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "tckind", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1_tckind", // alternative name of method
  -1, // altlabelHashCode
  Any_methods_tckind__LTCKind__args, // the arguments
  0, //arguments count
  Any_methods_tckind__LTCKind__exceptions, // the declared exceptions
  Any_MetainfoWrapper::Any_method_tckind__LTCKind__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Any_methods_type__LRTypeCode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Any_methods_type__LRTypeCode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Any_method_type__LRTypeCode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "type", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTypeCode::clazzInfo(), // return type
  "_C_type", // alternative name of method
  -1, // altlabelHashCode
  Any_methods_type__LRTypeCode__args, // the arguments
  0, //arguments count
  Any_methods_type__LRTypeCode__exceptions, // the declared exceptions
  Any_MetainfoWrapper::Any_method_type__LRTypeCode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Any_methods_type_INLRTypeCode__V_arg_t = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "t", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTypeCode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Any_methods_type_INLRTypeCode__V_args[] = 
{
  &Any_methods_type_INLRTypeCode__V_arg_t,
  0
};

::acdk::lang::dmi::ClazzInfo* Any_methods_type_INLRTypeCode__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Any_method_type_INLRTypeCode__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "type", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_D_type", // alternative name of method
  -1, // altlabelHashCode
  Any_methods_type_INLRTypeCode__V_args, // the arguments
  0, //arguments count
  Any_methods_type_INLRTypeCode__V_exceptions, // the declared exceptions
  Any_MetainfoWrapper::Any_method_type_INLRTypeCode__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Any_methods_write_value_INL_org_omg_CORBA_portable_ROutputStream__V_arg_os = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "os", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::portable::ROutputStream::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Any_methods_write_value_INL_org_omg_CORBA_portable_ROutputStream__V_args[] = 
{
  &Any_methods_write_value_INL_org_omg_CORBA_portable_ROutputStream__V_arg_os,
  0
};

::acdk::lang::dmi::ClazzInfo* Any_methods_write_value_INL_org_omg_CORBA_portable_ROutputStream__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Any_method_write_value_INL_org_omg_CORBA_portable_ROutputStream__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "write_value", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_E_write_value", // alternative name of method
  -1, // altlabelHashCode
  Any_methods_write_value_INL_org_omg_CORBA_portable_ROutputStream__V_args, // the arguments
  0, //arguments count
  Any_methods_write_value_INL_org_omg_CORBA_portable_ROutputStream__V_exceptions, // the declared exceptions
  Any_MetainfoWrapper::Any_method_write_value_INL_org_omg_CORBA_portable_ROutputStream__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Any_methods[] = 
{
  &Any_method_Any__LRAny_,
  &Any_method_GetClass__L_acdk_lang_RClass_,
  &Any_method_equal_INLRAny__Z,
  &Any_method_extract_Object__L_org_omg_CORBA_RObject_,
  &Any_method_extract_TypeCode__LRTypeCode_,
  &Any_method_extract_Value__L_acdk_io_RSerializable_,
  &Any_method_extract_any__LRAny_,
  &Any_method_extract_boolean__Z,
  &Any_method_extract_char__C,
  &Any_method_extract_double__D,
  &Any_method_extract_float__F,
  &Any_method_extract_long__I,
  &Any_method_extract_longlong__J,
  &Any_method_extract_octet__B,
  &Any_method_extract_short__S,
  &Any_method_extract_string__LRString_,
  &Any_method_extract_ulong__I,
  &Any_method_extract_ulonglong__J,
  &Any_method_extract_ushort__S,
  &Any_method_insert_Object_INL_org_omg_CORBA_RObject__V,
  &Any_method_insert_Object_INL_org_omg_CORBA_RObject_INLRTypeCode__V,
  &Any_method_insert_TypeCode_INLRTypeCode__V,
  &Any_method_insert_Value_INL_acdk_io_RSerializable__V,
  &Any_method_insert_Value_INL_acdk_io_RSerializable_INLRTypeCode__V,
  &Any_method_insert_any_INLRAny__V,
  &Any_method_insert_boolean_Z_V,
  &Any_method_insert_char_C_V,
  &Any_method_insert_double_D_V,
  &Any_method_insert_float_F_V,
  &Any_method_insert_long_I_V,
  &Any_method_insert_longlong_J_V,
  &Any_method_insert_octet_B_V,
  &Any_method_insert_short_S_V,
  &Any_method_insert_string_INLRString__V,
  &Any_method_insert_ulong_I_V,
  &Any_method_insert_ulonglong_J_V,
  &Any_method_insert_ushort_S_V,
  &Any_method_read_value_INL_org_omg_CORBA_portable_RInputStream_INLRTypeCode__V,
  &Any_method_tckind__LTCKind_,
  &Any_method_type__LRTypeCode_,
  &Any_method_type_INLRTypeCode__V,
  &Any_method_write_value_INL_org_omg_CORBA_portable_ROutputStream__V,
  0
};


struct Any_MetaInfoInitializer
{  Any_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Any::clazzInfo();
    ci->fields =  _Any_fields;
    ci->methods =  _Any_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Any_MetaInfoInitializer Any_MetaInfoInitializer_staticinstance__;


struct Any_clazzInfo_ClazzAttributesResInitializer1
{
  Any_clazzInfo_ClazzAttributesResInitializer1()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Any_method_tckind__LTCKind_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)TCKindMetaInf::GetEnumInfo()));
  }
};

Any_clazzInfo_ClazzAttributesResInitializer1 Any_clazzInfo_ClazzAttributesResInitializer1_instance;



} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
AttributeDef_create_array(int length)
{
  return new ObjectArrayImpl<RAttributeDef>(length);
}

//static
::acdk::lang::RObject
AttributeDef_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class AttributeDef_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AttributeDef_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AttributeDef::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AttributeDef_fields_mode_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AttributeDef* This = dmi_cast<AttributeDef>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->mode), flags);
    else
      This->mode = (AttributeMode)var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AttributeDef_fields_type_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AttributeDef* This = dmi_cast<AttributeDef>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->type, flags);
    else
      This->type = (RTypeCode)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AttributeDef_fields_type_def_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AttributeDef* This = dmi_cast<AttributeDef>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->type_def, flags);
    else
      This->type_def = (RIDLType)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo AttributeDef_fields_mode = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "mode", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  AttributeDef_MetainfoWrapper::AttributeDef_fields_mode_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AttributeDef_fields_type = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "type", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTypeCode::clazzInfo(),
  AttributeDef_MetainfoWrapper::AttributeDef_fields_type_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AttributeDef_fields_type_def = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "type_def", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIDLType::clazzInfo(),
  AttributeDef_MetainfoWrapper::AttributeDef_fields_type_def_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _AttributeDef_fields[] = 
{
  &AttributeDef_fields_mode,
  &AttributeDef_fields_type,
  &AttributeDef_fields_type_def,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* AttributeDef_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AttributeDef_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AttributeDef_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_0_GetClass", // alternative name of method
  -1, // altlabelHashCode
  AttributeDef_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  AttributeDef_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  AttributeDef_MetainfoWrapper::AttributeDef_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _AttributeDef_methods[] = 
{
  &AttributeDef_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct AttributeDef_MetaInfoInitializer
{  AttributeDef_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = AttributeDef::clazzInfo();
    ci->fields =  _AttributeDef_fields;
    ci->methods =  _AttributeDef_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
AttributeDef_MetaInfoInitializer AttributeDef_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
AttributeDescription_create_array(int length)
{
  return new ObjectArrayImpl<RAttributeDescription>(length);
}

//static
::acdk::lang::RObject
AttributeDescription_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class AttributeDescription_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AttributeDescription_method_AttributeDescription__LRAttributeDescription__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AttributeDescription();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AttributeDescription_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AttributeDescription::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AttributeDescription_fields_defined_in_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AttributeDescription* This = dmi_cast<AttributeDescription>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->defined_in, flags);
    else
      This->defined_in = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AttributeDescription_fields_id_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AttributeDescription* This = dmi_cast<AttributeDescription>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->id, flags);
    else
      This->id = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AttributeDescription_fields_mode_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AttributeDescription* This = dmi_cast<AttributeDescription>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->mode), flags);
    else
      This->mode = (AttributeMode)var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AttributeDescription_fields_name_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AttributeDescription* This = dmi_cast<AttributeDescription>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->name, flags);
    else
      This->name = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AttributeDescription_fields_type_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AttributeDescription* This = dmi_cast<AttributeDescription>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->type, flags);
    else
      This->type = (RTypeCode)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AttributeDescription_fields_version_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AttributeDescription* This = dmi_cast<AttributeDescription>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->version, flags);
    else
      This->version = (RString)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo AttributeDescription_fields_defined_in = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "defined_in", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  AttributeDescription_MetainfoWrapper::AttributeDescription_fields_defined_in_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AttributeDescription_fields_id = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "id", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  AttributeDescription_MetainfoWrapper::AttributeDescription_fields_id_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AttributeDescription_fields_mode = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "mode", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  AttributeDescription_MetainfoWrapper::AttributeDescription_fields_mode_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AttributeDescription_fields_name = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "name", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  AttributeDescription_MetainfoWrapper::AttributeDescription_fields_name_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AttributeDescription_fields_type = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "type", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTypeCode::clazzInfo(),
  AttributeDescription_MetainfoWrapper::AttributeDescription_fields_type_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AttributeDescription_fields_version = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "version", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  AttributeDescription_MetainfoWrapper::AttributeDescription_fields_version_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _AttributeDescription_fields[] = 
{
  &AttributeDescription_fields_defined_in,
  &AttributeDescription_fields_id,
  &AttributeDescription_fields_mode,
  &AttributeDescription_fields_name,
  &AttributeDescription_fields_type,
  &AttributeDescription_fields_version,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* AttributeDescription_methods_AttributeDescription__LRAttributeDescription__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AttributeDescription_methods_AttributeDescription__LRAttributeDescription__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AttributeDescription_method_AttributeDescription__LRAttributeDescription_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "AttributeDescription", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AttributeDescription::clazzInfo(), // return type
  "_0_AttributeDescription", // alternative name of method
  -1, // altlabelHashCode
  AttributeDescription_methods_AttributeDescription__LRAttributeDescription__args, // the arguments
  0, //arguments count
  AttributeDescription_methods_AttributeDescription__LRAttributeDescription__exceptions, // the declared exceptions
  AttributeDescription_MetainfoWrapper::AttributeDescription_method_AttributeDescription__LRAttributeDescription__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AttributeDescription_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AttributeDescription_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AttributeDescription_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  AttributeDescription_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  AttributeDescription_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  AttributeDescription_MetainfoWrapper::AttributeDescription_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _AttributeDescription_methods[] = 
{
  &AttributeDescription_method_AttributeDescription__LRAttributeDescription_,
  &AttributeDescription_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct AttributeDescription_MetaInfoInitializer
{  AttributeDescription_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = AttributeDescription::clazzInfo();
    ci->fields =  _AttributeDescription_fields;
    ci->methods =  _AttributeDescription_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
AttributeDescription_MetaInfoInitializer AttributeDescription_MetaInfoInitializer_staticinstance__;


struct AttributeDescription_clazzInfo_ClazzAttributesResInitializer2
{
  AttributeDescription_clazzInfo_ClazzAttributesResInitializer2()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)AttributeDescription::clazzInfo(), "acdkx_orb_StructType", ::acdk::lang::dmi::ClazzAttributeResValue::makeStringRes("", false));
  }
};

AttributeDescription_clazzInfo_ClazzAttributesResInitializer2 AttributeDescription_clazzInfo_ClazzAttributesResInitializer2_instance;



} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
Description_create_array(int length)
{
  return new ObjectArrayImpl<RDescription>(length);
}

//static
::acdk::lang::RObject
Description_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Description_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Description_method_Description__LRDescription__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Description();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Description_method_Description_IINLRAny__LRDescription__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Description((DefinitionKind)args[0].getIntVar(), (RAny)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Description_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Description::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Description_fields_kind_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Description* This = dmi_cast<Description>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->kind), flags);
    else
      This->kind = (DefinitionKind)var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Description_fields_value_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Description* This = dmi_cast<Description>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->value, flags);
    else
      This->value = (RAny)var.getObjectVar();
    return fieldinf;
  }
};


::acdkx::orb::RegisterRepId _register_Description_repId(Description::clazzInfo(), "org/omg/CORBA/Contained/Description", 1, 0);
::acdk::lang::dmi::ClazzFieldInfo Description_fields_kind = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "kind", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Description_MetainfoWrapper::Description_fields_kind_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Description_fields_value = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "value", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAny::clazzInfo(),
  Description_MetainfoWrapper::Description_fields_value_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _Description_fields[] = 
{
  &Description_fields_kind,
  &Description_fields_value,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Description_methods_Description__LRDescription__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Description_methods_Description__LRDescription__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Description_method_Description__LRDescription_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Description", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Description::clazzInfo(), // return type
  "_0_Description", // alternative name of method
  -1, // altlabelHashCode
  Description_methods_Description__LRDescription__args, // the arguments
  0, //arguments count
  Description_methods_Description__LRDescription__exceptions, // the declared exceptions
  Description_MetainfoWrapper::Description_method_Description__LRDescription__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Description_methods_Description_IINLRAny__LRDescription__arg_kind_ = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "kind_", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Description_methods_Description_IINLRAny__LRDescription__arg_value_ = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value_", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAny::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Description_methods_Description_IINLRAny__LRDescription__args[] = 
{
  &Description_methods_Description_IINLRAny__LRDescription__arg_kind_,
  &Description_methods_Description_IINLRAny__LRDescription__arg_value_,
  0
};

::acdk::lang::dmi::ClazzInfo* Description_methods_Description_IINLRAny__LRDescription__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Description_method_Description_IINLRAny__LRDescription_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Description", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Description::clazzInfo(), // return type
  "_1_Description", // alternative name of method
  -1, // altlabelHashCode
  Description_methods_Description_IINLRAny__LRDescription__args, // the arguments
  0, //arguments count
  Description_methods_Description_IINLRAny__LRDescription__exceptions, // the declared exceptions
  Description_MetainfoWrapper::Description_method_Description_IINLRAny__LRDescription__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Description_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Description_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Description_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Description_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Description_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Description_MetainfoWrapper::Description_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Description_methods[] = 
{
  &Description_method_Description__LRDescription_,
  &Description_method_Description_IINLRAny__LRDescription_,
  &Description_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct Description_MetaInfoInitializer
{  Description_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Description::clazzInfo();
    ci->fields =  _Description_fields;
    ci->methods =  _Description_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Description_MetaInfoInitializer Description_MetaInfoInitializer_staticinstance__;


struct Description_clazzInfo_ClazzAttributesResInitializer3
{
  Description_clazzInfo_ClazzAttributesResInitializer3()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Description_methods_Description_IINLRAny__LRDescription__arg_kind_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)DefinitionKindMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)Description::clazzInfo(), "acdkx_orb_StructType", ::acdk::lang::dmi::ClazzAttributeResValue::makeStringRes("", false));
  }
};

Description_clazzInfo_ClazzAttributesResInitializer3 Description_clazzInfo_ClazzAttributesResInitializer3_instance;



} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
Contained_create_array(int length)
{
  return new ObjectArrayImpl<RContained>(length);
}

//static
::acdk::lang::RObject
Contained_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Contained_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Contained_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Contained::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Contained_method_describe__LRDescription__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Contained* This = dmi_cast<Contained>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Contained::describe();
    else
        ret = (::acdk::lang::RObject)This->describe();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Contained_method_move_INLRContainer_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Contained* This = dmi_cast<Contained>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Contained::move((RContainer)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    else
        This->move((RContainer)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Contained_fields_absolute_name_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Contained* This = dmi_cast<Contained>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->absolute_name, flags);
    else
      This->absolute_name = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Contained_fields_containing_repository_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Contained* This = dmi_cast<Contained>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->containing_repository, flags);
    else
      This->containing_repository = (RRepository)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Contained_fields_defined_in_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Contained* This = dmi_cast<Contained>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->defined_in, flags);
    else
      This->defined_in = (RContainer)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Contained_fields_id_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Contained* This = dmi_cast<Contained>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->id, flags);
    else
      This->id = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Contained_fields_version_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Contained* This = dmi_cast<Contained>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->version, flags);
    else
      This->version = (RString)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo Contained_fields_absolute_name = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "absolute_name", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  Contained_MetainfoWrapper::Contained_fields_absolute_name_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Contained_fields_containing_repository = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "containing_repository", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRepository::clazzInfo(),
  Contained_MetainfoWrapper::Contained_fields_containing_repository_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Contained_fields_defined_in = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "defined_in", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RContainer::clazzInfo(),
  Contained_MetainfoWrapper::Contained_fields_defined_in_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Contained_fields_id = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "id", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  Contained_MetainfoWrapper::Contained_fields_id_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Contained_fields_version = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "version", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  Contained_MetainfoWrapper::Contained_fields_version_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _Contained_fields[] = 
{
  &Contained_fields_absolute_name,
  &Contained_fields_containing_repository,
  &Contained_fields_defined_in,
  &Contained_fields_id,
  &Contained_fields_version,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Contained_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Contained_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Contained_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Contained_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Contained_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Contained_MetainfoWrapper::Contained_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Contained_methods_describe__LRDescription__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Contained_methods_describe__LRDescription__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Contained_method_describe__LRDescription_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "describe", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDescription::clazzInfo(), // return type
  "_0_describe", // alternative name of method
  -1, // altlabelHashCode
  Contained_methods_describe__LRDescription__args, // the arguments
  0, //arguments count
  Contained_methods_describe__LRDescription__exceptions, // the declared exceptions
  Contained_MetainfoWrapper::Contained_method_describe__LRDescription__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Contained_methods_move_INLRContainer_INLRString_INLRString__V_arg_new_container = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "new_container", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RContainer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Contained_methods_move_INLRContainer_INLRString_INLRString__V_arg_new_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "new_name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Contained_methods_move_INLRContainer_INLRString_INLRString__V_arg_new_version = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "new_version", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Contained_methods_move_INLRContainer_INLRString_INLRString__V_args[] = 
{
  &Contained_methods_move_INLRContainer_INLRString_INLRString__V_arg_new_container,
  &Contained_methods_move_INLRContainer_INLRString_INLRString__V_arg_new_name,
  &Contained_methods_move_INLRContainer_INLRString_INLRString__V_arg_new_version,
  0
};

::acdk::lang::dmi::ClazzInfo* Contained_methods_move_INLRContainer_INLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Contained_method_move_INLRContainer_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "move", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_move", // alternative name of method
  -1, // altlabelHashCode
  Contained_methods_move_INLRContainer_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  Contained_methods_move_INLRContainer_INLRString_INLRString__V_exceptions, // the declared exceptions
  Contained_MetainfoWrapper::Contained_method_move_INLRContainer_INLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Contained_methods[] = 
{
  &Contained_method_GetClass__L_acdk_lang_RClass_,
  &Contained_method_describe__LRDescription_,
  &Contained_method_move_INLRContainer_INLRString_INLRString__V,
  0
};


struct Contained_MetaInfoInitializer
{  Contained_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Contained::clazzInfo();
    ci->fields =  _Contained_fields;
    ci->methods =  _Contained_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Contained_MetaInfoInitializer Contained_MetaInfoInitializer_staticinstance__;


struct Contained_clazzInfo_ClazzAttributesResInitializer4
{
  Contained_clazzInfo_ClazzAttributesResInitializer4()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Contained_fields_absolute_name, "acdkx_orb_readonly", ::acdk::lang::dmi::ClazzAttributeResValue::makeStringRes("", false));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Contained_fields_containing_repository, "acdkx_orb_readonly", ::acdk::lang::dmi::ClazzAttributeResValue::makeStringRes("", false));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Contained_fields_defined_in, "acdkx_orb_readonly", ::acdk::lang::dmi::ClazzAttributeResValue::makeStringRes("", false));
  }
};

Contained_clazzInfo_ClazzAttributesResInitializer4 Contained_clazzInfo_ClazzAttributesResInitializer4_instance;


RDescription
Contained::describe()
{
  ::acdk::lang::dmi::ScriptVar __acdk_retval;
  ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
  const ::acdk::lang::dmi::ClazzInfo* ci__ = getClazzInfo();
  ::acdk::lang::Object* targetObj__ = getDmiTarget(ci__);
  targetObj__->standardDispatch("describe", __acdk_retval, __acdk_args, targetObj__->getDmiClient(), Nil, 0, targetObj__->getClazzInfo(), &Contained_method_describe__LRDescription_);
  return (RDescription)(::acdk::lang::RObject)__acdk_retval;
}

void
Contained::move(IN(RContainer) new_container, IN(RString) new_name, IN(RString) new_version)
{
  ::acdk::lang::dmi::ScriptVar __acdk_retval;
  ::acdk::lang::dmi::ScriptVarArray __acdk_args(3);
  __acdk_args[0] = inOf(new_container);
  __acdk_args[1] = inOf(new_name);
  __acdk_args[2] = inOf(new_version);
  const ::acdk::lang::dmi::ClazzInfo* ci__ = getClazzInfo();
  ::acdk::lang::Object* targetObj__ = getDmiTarget(ci__);
  targetObj__->standardDispatch("move", __acdk_retval, __acdk_args, targetObj__->getDmiClient(), Nil, 0, targetObj__->getClazzInfo(), &Contained_method_move_INLRContainer_INLRString_INLRString__V);
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
Container_create_array(int length)
{
  return new ObjectArrayImpl<RContainer>(length);
}

//static
::acdk::lang::RObject
Container_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Container_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Container_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Container::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Container_method_contents_INIZ_LRContainedArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Container* This = dmi_cast<Container>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Container::contents((DefinitionKind)args[0].getIntVar(), args[1].getBoolVar());
    else
        ret = (::acdk::lang::RObject)This->contents((DefinitionKind)args[0].getIntVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Container_method_describe_contents_IZI_LRDescriptionArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Container* This = dmi_cast<Container>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Container::describe_contents((DefinitionKind)args[0].getIntVar(), args[1].getBoolVar(), args[2].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->describe_contents((DefinitionKind)args[0].getIntVar(), args[1].getBoolVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Container_method_lookup_INLRString__LRContained__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Container* This = dmi_cast<Container>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Container::lookup((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->lookup((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Container_method_lookup_name_INLRString_IIZ_LRContainedArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Container* This = dmi_cast<Container>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Container::lookup_name((RString)args[0].getObjectVar(), args[1].getIntVar(), (DefinitionKind)args[2].getIntVar(), args[3].getBoolVar());
    else
        ret = (::acdk::lang::RObject)This->lookup_name((RString)args[0].getObjectVar(), args[1].getIntVar(), (DefinitionKind)args[2].getIntVar(), args[3].getBoolVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Container_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Container_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Container_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Container_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Container_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Container_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Container_MetainfoWrapper::Container_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Container_methods_contents_INIZ_LRContainedArray__arg_limit_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "limit_type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Container_methods_contents_INIZ_LRContainedArray__arg_exclude_inherited = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "exclude_inherited", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Container_methods_contents_INIZ_LRContainedArray__args[] = 
{
  &Container_methods_contents_INIZ_LRContainedArray__arg_limit_type,
  &Container_methods_contents_INIZ_LRContainedArray__arg_exclude_inherited,
  0
};

::acdk::lang::dmi::ClazzInfo* Container_methods_contents_INIZ_LRContainedArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Container_method_contents_INIZ_LRContainedArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "contents", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RContainedArray::clazzInfo(), // return type
  "_1_contents", // alternative name of method
  -1, // altlabelHashCode
  Container_methods_contents_INIZ_LRContainedArray__args, // the arguments
  0, //arguments count
  Container_methods_contents_INIZ_LRContainedArray__exceptions, // the declared exceptions
  Container_MetainfoWrapper::Container_method_contents_INIZ_LRContainedArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Container_methods_describe_contents_IZI_LRDescriptionArray__arg_limit_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "limit_type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Container_methods_describe_contents_IZI_LRDescriptionArray__arg_exclude_inherited = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "exclude_inherited", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Container_methods_describe_contents_IZI_LRDescriptionArray__arg_max_returned_objs = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "max_returned_objs", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Container_methods_describe_contents_IZI_LRDescriptionArray__args[] = 
{
  &Container_methods_describe_contents_IZI_LRDescriptionArray__arg_limit_type,
  &Container_methods_describe_contents_IZI_LRDescriptionArray__arg_exclude_inherited,
  &Container_methods_describe_contents_IZI_LRDescriptionArray__arg_max_returned_objs,
  0
};

::acdk::lang::dmi::ClazzInfo* Container_methods_describe_contents_IZI_LRDescriptionArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Container_method_describe_contents_IZI_LRDescriptionArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "describe_contents", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDescriptionArray::clazzInfo(), // return type
  "_3_describe_contents", // alternative name of method
  -1, // altlabelHashCode
  Container_methods_describe_contents_IZI_LRDescriptionArray__args, // the arguments
  0, //arguments count
  Container_methods_describe_contents_IZI_LRDescriptionArray__exceptions, // the declared exceptions
  Container_MetainfoWrapper::Container_method_describe_contents_IZI_LRDescriptionArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Container_methods_lookup_INLRString__LRContained__arg_search_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "search_name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Container_methods_lookup_INLRString__LRContained__args[] = 
{
  &Container_methods_lookup_INLRString__LRContained__arg_search_name,
  0
};

::acdk::lang::dmi::ClazzInfo* Container_methods_lookup_INLRString__LRContained__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Container_method_lookup_INLRString__LRContained_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lookup", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RContained::clazzInfo(), // return type
  "_0_lookup", // alternative name of method
  -1, // altlabelHashCode
  Container_methods_lookup_INLRString__LRContained__args, // the arguments
  0, //arguments count
  Container_methods_lookup_INLRString__LRContained__exceptions, // the declared exceptions
  Container_MetainfoWrapper::Container_method_lookup_INLRString__LRContained__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Container_methods_lookup_name_INLRString_IIZ_LRContainedArray__arg_search_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "search_name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Container_methods_lookup_name_INLRString_IIZ_LRContainedArray__arg_levels_to_search = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "levels_to_search", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Container_methods_lookup_name_INLRString_IIZ_LRContainedArray__arg_limit_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "limit_type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Container_methods_lookup_name_INLRString_IIZ_LRContainedArray__arg_exclude_inherited = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "exclude_inherited", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Container_methods_lookup_name_INLRString_IIZ_LRContainedArray__args[] = 
{
  &Container_methods_lookup_name_INLRString_IIZ_LRContainedArray__arg_search_name,
  &Container_methods_lookup_name_INLRString_IIZ_LRContainedArray__arg_levels_to_search,
  &Container_methods_lookup_name_INLRString_IIZ_LRContainedArray__arg_limit_type,
  &Container_methods_lookup_name_INLRString_IIZ_LRContainedArray__arg_exclude_inherited,
  0
};

::acdk::lang::dmi::ClazzInfo* Container_methods_lookup_name_INLRString_IIZ_LRContainedArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Container_method_lookup_name_INLRString_IIZ_LRContainedArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lookup_name", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RContainedArray::clazzInfo(), // return type
  "_2_lookup_name", // alternative name of method
  -1, // altlabelHashCode
  Container_methods_lookup_name_INLRString_IIZ_LRContainedArray__args, // the arguments
  0, //arguments count
  Container_methods_lookup_name_INLRString_IIZ_LRContainedArray__exceptions, // the declared exceptions
  Container_MetainfoWrapper::Container_method_lookup_name_INLRString_IIZ_LRContainedArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Container_methods[] = 
{
  &Container_method_GetClass__L_acdk_lang_RClass_,
  &Container_method_contents_INIZ_LRContainedArray_,
  &Container_method_describe_contents_IZI_LRDescriptionArray_,
  &Container_method_lookup_INLRString__LRContained_,
  &Container_method_lookup_name_INLRString_IIZ_LRContainedArray_,
  0
};


struct Container_MetaInfoInitializer
{  Container_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Container::clazzInfo();
    ci->fields =  _Container_fields;
    ci->methods =  _Container_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Container_MetaInfoInitializer Container_MetaInfoInitializer_staticinstance__;


struct Container_clazzInfo_ClazzAttributesResInitializer5
{
  Container_clazzInfo_ClazzAttributesResInitializer5()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Container_methods_contents_INIZ_LRContainedArray__arg_limit_type, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)DefinitionKindMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Container_methods_lookup_name_INLRString_IIZ_LRContainedArray__arg_limit_type, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)DefinitionKindMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Container_methods_describe_contents_IZI_LRDescriptionArray__arg_limit_type, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)DefinitionKindMetaInf::GetEnumInfo()));
  }
};

Container_clazzInfo_ClazzAttributesResInitializer5 Container_clazzInfo_ClazzAttributesResInitializer5_instance;


RContained
Container::lookup(IN(RString) search_name)
{
  ::acdk::lang::dmi::ScriptVar __acdk_retval;
  ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
  __acdk_args[0] = inOf(search_name);
  const ::acdk::lang::dmi::ClazzInfo* ci__ = getClazzInfo();
  ::acdk::lang::Object* targetObj__ = getDmiTarget(ci__);
  targetObj__->standardDispatch("lookup", __acdk_retval, __acdk_args, targetObj__->getDmiClient(), Nil, 0, targetObj__->getClazzInfo(), &Container_method_lookup_INLRString__LRContained_);
  return (RContained)(::acdk::lang::RObject)__acdk_retval;
}

RContainedArray
Container::contents(IN(DefinitionKind) limit_type, bool exclude_inherited)
{
  ::acdk::lang::dmi::ScriptVar __acdk_retval;
  ::acdk::lang::dmi::ScriptVarArray __acdk_args(2);
  __acdk_args[0] = inOf(limit_type);
  __acdk_args[1] = inOf(exclude_inherited);
  const ::acdk::lang::dmi::ClazzInfo* ci__ = getClazzInfo();
  ::acdk::lang::Object* targetObj__ = getDmiTarget(ci__);
  targetObj__->standardDispatch("contents", __acdk_retval, __acdk_args, targetObj__->getDmiClient(), Nil, 0, targetObj__->getClazzInfo(), &Container_method_contents_INIZ_LRContainedArray_);
  return (RContainedArray)(::acdk::lang::RObject)__acdk_retval;
}

RContainedArray
Container::lookup_name(IN(RString) search_name, int levels_to_search, DefinitionKind limit_type, bool exclude_inherited)
{
  ::acdk::lang::dmi::ScriptVar __acdk_retval;
  ::acdk::lang::dmi::ScriptVarArray __acdk_args(4);
  __acdk_args[0] = inOf(search_name);
  __acdk_args[1] = inOf(levels_to_search);
  __acdk_args[2] = inOf(limit_type);
  __acdk_args[3] = inOf(exclude_inherited);
  const ::acdk::lang::dmi::ClazzInfo* ci__ = getClazzInfo();
  ::acdk::lang::Object* targetObj__ = getDmiTarget(ci__);
  targetObj__->standardDispatch("lookup_name", __acdk_retval, __acdk_args, targetObj__->getDmiClient(), Nil, 0, targetObj__->getClazzInfo(), &Container_method_lookup_name_INLRString_IIZ_LRContainedArray_);
  return (RContainedArray)(::acdk::lang::RObject)__acdk_retval;
}

RDescriptionArray
Container::describe_contents(DefinitionKind limit_type, bool exclude_inherited, int max_returned_objs)
{
  ::acdk::lang::dmi::ScriptVar __acdk_retval;
  ::acdk::lang::dmi::ScriptVarArray __acdk_args(3);
  __acdk_args[0] = inOf(limit_type);
  __acdk_args[1] = inOf(exclude_inherited);
  __acdk_args[2] = inOf(max_returned_objs);
  const ::acdk::lang::dmi::ClazzInfo* ci__ = getClazzInfo();
  ::acdk::lang::Object* targetObj__ = getDmiTarget(ci__);
  targetObj__->standardDispatch("describe_contents", __acdk_retval, __acdk_args, targetObj__->getDmiClient(), Nil, 0, targetObj__->getClazzInfo(), &Container_method_describe_contents_IZI_LRDescriptionArray_);
  return (RDescriptionArray)(::acdk::lang::RObject)__acdk_retval;
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
ExceptionDef_create_array(int length)
{
  return new ObjectArrayImpl<RExceptionDef>(length);
}

//static
::acdk::lang::RObject
ExceptionDef_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ExceptionDef_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExceptionDef_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ExceptionDef::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ExceptionDef_fields_members_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ExceptionDef* This = dmi_cast<ExceptionDef>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->members, flags);
    else
      This->members = (RStructMemberArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ExceptionDef_fields_type_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ExceptionDef* This = dmi_cast<ExceptionDef>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->type, flags);
    else
      This->type = (RTypeCode)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ExceptionDef_fields_members = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "members", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStructMemberArray::clazzInfo(),
  ExceptionDef_MetainfoWrapper::ExceptionDef_fields_members_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ExceptionDef_fields_type = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "type", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTypeCode::clazzInfo(),
  ExceptionDef_MetainfoWrapper::ExceptionDef_fields_type_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ExceptionDef_fields[] = 
{
  &ExceptionDef_fields_members,
  &ExceptionDef_fields_type,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExceptionDef_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ExceptionDef_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExceptionDef_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_0_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ExceptionDef_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ExceptionDef_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ExceptionDef_MetainfoWrapper::ExceptionDef_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ExceptionDef_methods[] = 
{
  &ExceptionDef_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct ExceptionDef_MetaInfoInitializer
{  ExceptionDef_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ExceptionDef::clazzInfo();
    ci->fields =  _ExceptionDef_fields;
    ci->methods =  _ExceptionDef_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ExceptionDef_MetaInfoInitializer ExceptionDef_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
ExceptionDescription_create_array(int length)
{
  return new ObjectArrayImpl<RExceptionDescription>(length);
}

//static
::acdk::lang::RObject
ExceptionDescription_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ExceptionDescription_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExceptionDescription_method_ExceptionDescription__LRExceptionDescription__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ExceptionDescription();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExceptionDescription_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ExceptionDescription::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ExceptionDescription_fields_defined_in_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ExceptionDescription* This = dmi_cast<ExceptionDescription>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->defined_in, flags);
    else
      This->defined_in = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ExceptionDescription_fields_id_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ExceptionDescription* This = dmi_cast<ExceptionDescription>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->id, flags);
    else
      This->id = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ExceptionDescription_fields_name_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ExceptionDescription* This = dmi_cast<ExceptionDescription>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->name, flags);
    else
      This->name = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ExceptionDescription_fields_type_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ExceptionDescription* This = dmi_cast<ExceptionDescription>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->type, flags);
    else
      This->type = (RTypeCode)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ExceptionDescription_fields_version_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ExceptionDescription* This = dmi_cast<ExceptionDescription>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->version, flags);
    else
      This->version = (RString)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ExceptionDescription_fields_defined_in = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "defined_in", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ExceptionDescription_MetainfoWrapper::ExceptionDescription_fields_defined_in_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ExceptionDescription_fields_id = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "id", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ExceptionDescription_MetainfoWrapper::ExceptionDescription_fields_id_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ExceptionDescription_fields_name = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "name", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ExceptionDescription_MetainfoWrapper::ExceptionDescription_fields_name_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ExceptionDescription_fields_type = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "type", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTypeCode::clazzInfo(),
  ExceptionDescription_MetainfoWrapper::ExceptionDescription_fields_type_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ExceptionDescription_fields_version = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "version", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ExceptionDescription_MetainfoWrapper::ExceptionDescription_fields_version_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ExceptionDescription_fields[] = 
{
  &ExceptionDescription_fields_defined_in,
  &ExceptionDescription_fields_id,
  &ExceptionDescription_fields_name,
  &ExceptionDescription_fields_type,
  &ExceptionDescription_fields_version,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExceptionDescription_methods_ExceptionDescription__LRExceptionDescription__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ExceptionDescription_methods_ExceptionDescription__LRExceptionDescription__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExceptionDescription_method_ExceptionDescription__LRExceptionDescription_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ExceptionDescription", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ExceptionDescription::clazzInfo(), // return type
  "_0_ExceptionDescription", // alternative name of method
  -1, // altlabelHashCode
  ExceptionDescription_methods_ExceptionDescription__LRExceptionDescription__args, // the arguments
  0, //arguments count
  ExceptionDescription_methods_ExceptionDescription__LRExceptionDescription__exceptions, // the declared exceptions
  ExceptionDescription_MetainfoWrapper::ExceptionDescription_method_ExceptionDescription__LRExceptionDescription__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExceptionDescription_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ExceptionDescription_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExceptionDescription_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ExceptionDescription_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ExceptionDescription_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ExceptionDescription_MetainfoWrapper::ExceptionDescription_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ExceptionDescription_methods[] = 
{
  &ExceptionDescription_method_ExceptionDescription__LRExceptionDescription_,
  &ExceptionDescription_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct ExceptionDescription_MetaInfoInitializer
{  ExceptionDescription_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ExceptionDescription::clazzInfo();
    ci->fields =  _ExceptionDescription_fields;
    ci->methods =  _ExceptionDescription_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ExceptionDescription_MetaInfoInitializer ExceptionDescription_MetaInfoInitializer_staticinstance__;


struct ExceptionDescription_clazzInfo_ClazzAttributesResInitializer6
{
  ExceptionDescription_clazzInfo_ClazzAttributesResInitializer6()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)ExceptionDescription::clazzInfo(), "acdkx_orb_StructType", ::acdk::lang::dmi::ClazzAttributeResValue::makeStringRes("", false));
  }
};

ExceptionDescription_clazzInfo_ClazzAttributesResInitializer6 ExceptionDescription_clazzInfo_ClazzAttributesResInitializer6_instance;



} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
IDLType_create_array(int length)
{
  return new ObjectArrayImpl<RIDLType>(length);
}

//static
::acdk::lang::RObject
IDLType_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class IDLType_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IDLType_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)IDLType::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  IDLType_fields_type_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    IDLType* This = dmi_cast<IDLType>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->type, flags);
    else
      This->type = (RTypeCode)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo IDLType_fields_type = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "type", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTypeCode::clazzInfo(),
  IDLType_MetainfoWrapper::IDLType_fields_type_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _IDLType_fields[] = 
{
  &IDLType_fields_type,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* IDLType_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IDLType_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IDLType_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_0_GetClass", // alternative name of method
  -1, // altlabelHashCode
  IDLType_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  IDLType_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  IDLType_MetainfoWrapper::IDLType_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _IDLType_methods[] = 
{
  &IDLType_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct IDLType_MetaInfoInitializer
{  IDLType_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = IDLType::clazzInfo();
    ci->fields =  _IDLType_fields;
    ci->methods =  _IDLType_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
IDLType_MetaInfoInitializer IDLType_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
FullInterfaceDescription_create_array(int length)
{
  return new ObjectArrayImpl<RFullInterfaceDescription>(length);
}

//static
::acdk::lang::RObject
FullInterfaceDescription_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class FullInterfaceDescription_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FullInterfaceDescription_method_FullInterfaceDescription__LRFullInterfaceDescription__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FullInterfaceDescription();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FullInterfaceDescription_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)FullInterfaceDescription::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FullInterfaceDescription_fields_attributes_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    FullInterfaceDescription* This = dmi_cast<FullInterfaceDescription>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->attributes, flags);
    else
      This->attributes = (RAttributeDescriptionArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FullInterfaceDescription_fields_base_interfaces_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    FullInterfaceDescription* This = dmi_cast<FullInterfaceDescription>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->base_interfaces, flags);
    else
      This->base_interfaces = (RStringArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FullInterfaceDescription_fields_defined_in_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    FullInterfaceDescription* This = dmi_cast<FullInterfaceDescription>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->defined_in, flags);
    else
      This->defined_in = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FullInterfaceDescription_fields_id_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    FullInterfaceDescription* This = dmi_cast<FullInterfaceDescription>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->id, flags);
    else
      This->id = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FullInterfaceDescription_fields_name_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    FullInterfaceDescription* This = dmi_cast<FullInterfaceDescription>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->name, flags);
    else
      This->name = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FullInterfaceDescription_fields_operations_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    FullInterfaceDescription* This = dmi_cast<FullInterfaceDescription>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->operations, flags);
    else
      This->operations = (RParameterDescriptionArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FullInterfaceDescription_fields_type_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    FullInterfaceDescription* This = dmi_cast<FullInterfaceDescription>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->type, flags);
    else
      This->type = (RTypeCode)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FullInterfaceDescription_fields_version_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    FullInterfaceDescription* This = dmi_cast<FullInterfaceDescription>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->version, flags);
    else
      This->version = (RString)var.getObjectVar();
    return fieldinf;
  }
};


::acdkx::orb::RegisterRepId _register_FullInterfaceDescription_repId(FullInterfaceDescription::clazzInfo(), "org/omg/CORBA/InterfaceDef/FullInterfaceDescription", 1, 0);
::acdk::lang::dmi::ClazzFieldInfo FullInterfaceDescription_fields_attributes = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "attributes", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAttributeDescriptionArray::clazzInfo(),
  FullInterfaceDescription_MetainfoWrapper::FullInterfaceDescription_fields_attributes_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo FullInterfaceDescription_fields_base_interfaces = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "base_interfaces", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(),
  FullInterfaceDescription_MetainfoWrapper::FullInterfaceDescription_fields_base_interfaces_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo FullInterfaceDescription_fields_defined_in = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "defined_in", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  FullInterfaceDescription_MetainfoWrapper::FullInterfaceDescription_fields_defined_in_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo FullInterfaceDescription_fields_id = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "id", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  FullInterfaceDescription_MetainfoWrapper::FullInterfaceDescription_fields_id_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo FullInterfaceDescription_fields_name = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "name", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  FullInterfaceDescription_MetainfoWrapper::FullInterfaceDescription_fields_name_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo FullInterfaceDescription_fields_operations = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "operations", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RParameterDescriptionArray::clazzInfo(),
  FullInterfaceDescription_MetainfoWrapper::FullInterfaceDescription_fields_operations_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo FullInterfaceDescription_fields_type = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "type", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTypeCode::clazzInfo(),
  FullInterfaceDescription_MetainfoWrapper::FullInterfaceDescription_fields_type_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo FullInterfaceDescription_fields_version = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "version", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  FullInterfaceDescription_MetainfoWrapper::FullInterfaceDescription_fields_version_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _FullInterfaceDescription_fields[] = 
{
  &FullInterfaceDescription_fields_attributes,
  &FullInterfaceDescription_fields_base_interfaces,
  &FullInterfaceDescription_fields_defined_in,
  &FullInterfaceDescription_fields_id,
  &FullInterfaceDescription_fields_name,
  &FullInterfaceDescription_fields_operations,
  &FullInterfaceDescription_fields_type,
  &FullInterfaceDescription_fields_version,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* FullInterfaceDescription_methods_FullInterfaceDescription__LRFullInterfaceDescription__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FullInterfaceDescription_methods_FullInterfaceDescription__LRFullInterfaceDescription__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FullInterfaceDescription_method_FullInterfaceDescription__LRFullInterfaceDescription_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "FullInterfaceDescription", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FullInterfaceDescription::clazzInfo(), // return type
  "_0_FullInterfaceDescription", // alternative name of method
  -1, // altlabelHashCode
  FullInterfaceDescription_methods_FullInterfaceDescription__LRFullInterfaceDescription__args, // the arguments
  0, //arguments count
  FullInterfaceDescription_methods_FullInterfaceDescription__LRFullInterfaceDescription__exceptions, // the declared exceptions
  FullInterfaceDescription_MetainfoWrapper::FullInterfaceDescription_method_FullInterfaceDescription__LRFullInterfaceDescription__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FullInterfaceDescription_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FullInterfaceDescription_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FullInterfaceDescription_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  FullInterfaceDescription_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  FullInterfaceDescription_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  FullInterfaceDescription_MetainfoWrapper::FullInterfaceDescription_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _FullInterfaceDescription_methods[] = 
{
  &FullInterfaceDescription_method_FullInterfaceDescription__LRFullInterfaceDescription_,
  &FullInterfaceDescription_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct FullInterfaceDescription_MetaInfoInitializer
{  FullInterfaceDescription_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = FullInterfaceDescription::clazzInfo();
    ci->fields =  _FullInterfaceDescription_fields;
    ci->methods =  _FullInterfaceDescription_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
FullInterfaceDescription_MetaInfoInitializer FullInterfaceDescription_MetaInfoInitializer_staticinstance__;


struct FullInterfaceDescription_clazzInfo_ClazzAttributesResInitializer7
{
  FullInterfaceDescription_clazzInfo_ClazzAttributesResInitializer7()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)FullInterfaceDescription::clazzInfo(), "acdkx_orb_StructType", ::acdk::lang::dmi::ClazzAttributeResValue::makeStringRes("", false));
  }
};

FullInterfaceDescription_clazzInfo_ClazzAttributesResInitializer7 FullInterfaceDescription_clazzInfo_ClazzAttributesResInitializer7_instance;



} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
InterfaceDescription_create_array(int length)
{
  return new ObjectArrayImpl<RInterfaceDescription>(length);
}

//static
::acdk::lang::RObject
InterfaceDescription_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class InterfaceDescription_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InterfaceDescription_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)InterfaceDescription::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InterfaceDescription_method_InterfaceDescription__LRInterfaceDescription__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new InterfaceDescription();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  InterfaceDescription_fields_base_interfaces_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    InterfaceDescription* This = dmi_cast<InterfaceDescription>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->base_interfaces, flags);
    else
      This->base_interfaces = (RStringArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  InterfaceDescription_fields_defined_in_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    InterfaceDescription* This = dmi_cast<InterfaceDescription>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->defined_in, flags);
    else
      This->defined_in = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  InterfaceDescription_fields_id_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    InterfaceDescription* This = dmi_cast<InterfaceDescription>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->id, flags);
    else
      This->id = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  InterfaceDescription_fields_name_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    InterfaceDescription* This = dmi_cast<InterfaceDescription>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->name, flags);
    else
      This->name = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  InterfaceDescription_fields_version_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    InterfaceDescription* This = dmi_cast<InterfaceDescription>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->version, flags);
    else
      This->version = (RString)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo InterfaceDescription_fields_base_interfaces = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "base_interfaces", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(),
  InterfaceDescription_MetainfoWrapper::InterfaceDescription_fields_base_interfaces_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo InterfaceDescription_fields_defined_in = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "defined_in", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  InterfaceDescription_MetainfoWrapper::InterfaceDescription_fields_defined_in_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo InterfaceDescription_fields_id = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "id", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  InterfaceDescription_MetainfoWrapper::InterfaceDescription_fields_id_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo InterfaceDescription_fields_name = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "name", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  InterfaceDescription_MetainfoWrapper::InterfaceDescription_fields_name_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo InterfaceDescription_fields_version = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "version", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  InterfaceDescription_MetainfoWrapper::InterfaceDescription_fields_version_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _InterfaceDescription_fields[] = 
{
  &InterfaceDescription_fields_base_interfaces,
  &InterfaceDescription_fields_defined_in,
  &InterfaceDescription_fields_id,
  &InterfaceDescription_fields_name,
  &InterfaceDescription_fields_version,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* InterfaceDescription_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InterfaceDescription_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InterfaceDescription_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  InterfaceDescription_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  InterfaceDescription_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  InterfaceDescription_MetainfoWrapper::InterfaceDescription_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InterfaceDescription_methods_InterfaceDescription__LRInterfaceDescription__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InterfaceDescription_methods_InterfaceDescription__LRInterfaceDescription__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InterfaceDescription_method_InterfaceDescription__LRInterfaceDescription_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "InterfaceDescription", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  InterfaceDescription::clazzInfo(), // return type
  "_0_InterfaceDescription", // alternative name of method
  -1, // altlabelHashCode
  InterfaceDescription_methods_InterfaceDescription__LRInterfaceDescription__args, // the arguments
  0, //arguments count
  InterfaceDescription_methods_InterfaceDescription__LRInterfaceDescription__exceptions, // the declared exceptions
  InterfaceDescription_MetainfoWrapper::InterfaceDescription_method_InterfaceDescription__LRInterfaceDescription__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _InterfaceDescription_methods[] = 
{
  &InterfaceDescription_method_GetClass__L_acdk_lang_RClass_,
  &InterfaceDescription_method_InterfaceDescription__LRInterfaceDescription_,
  0
};


struct InterfaceDescription_MetaInfoInitializer
{  InterfaceDescription_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = InterfaceDescription::clazzInfo();
    ci->fields =  _InterfaceDescription_fields;
    ci->methods =  _InterfaceDescription_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
InterfaceDescription_MetaInfoInitializer InterfaceDescription_MetaInfoInitializer_staticinstance__;


struct InterfaceDescription_clazzInfo_ClazzAttributesResInitializer8
{
  InterfaceDescription_clazzInfo_ClazzAttributesResInitializer8()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)InterfaceDescription::clazzInfo(), "acdkx_orb_StructType", ::acdk::lang::dmi::ClazzAttributeResValue::makeStringRes("", false));
  }
};

InterfaceDescription_clazzInfo_ClazzAttributesResInitializer8 InterfaceDescription_clazzInfo_ClazzAttributesResInitializer8_instance;



} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
InterfaceDef_create_array(int length)
{
  return new ObjectArrayImpl<RInterfaceDef>(length);
}

//static
::acdk::lang::RObject
InterfaceDef_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class InterfaceDef_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InterfaceDef_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)InterfaceDef::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InterfaceDef_method_create_attribute_INLRString_INLRString_INLRString_INLRIDLType_I_LRAttributeDef__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InterfaceDef* This = dmi_cast<InterfaceDef>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->InterfaceDef::create_attribute((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RIDLType)args[3].getObjectVar(), (AttributeMode)args[4].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->create_attribute((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RIDLType)args[3].getObjectVar(), (AttributeMode)args[4].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InterfaceDef_method_create_operation_INLRString_INLRString_INLRString_INLRIDLType_IINLROperationDescriptionArray_INLRExceptionDescriptionArray_INLRStringArray__LROperationDef__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InterfaceDef* This = dmi_cast<InterfaceDef>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->InterfaceDef::create_operation((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RIDLType)args[3].getObjectVar(), (OperationMode)args[4].getIntVar(), (ROperationDescriptionArray)args[5].getObjectVar(), (RExceptionDescriptionArray)args[6].getObjectVar(), (RStringArray)args[7].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->create_operation((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RIDLType)args[3].getObjectVar(), (OperationMode)args[4].getIntVar(), (ROperationDescriptionArray)args[5].getObjectVar(), (RExceptionDescriptionArray)args[6].getObjectVar(), (RStringArray)args[7].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InterfaceDef_method_describe_interface__LRFullInterfaceDescription__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InterfaceDef* This = dmi_cast<InterfaceDef>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->InterfaceDef::describe_interface();
    else
        ret = (::acdk::lang::RObject)This->describe_interface();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InterfaceDef_method_is_a_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InterfaceDef* This = dmi_cast<InterfaceDef>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->InterfaceDef::is_a((RString)args[0].getObjectVar());
    else
      ret = This->is_a((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  InterfaceDef_fields_base_interfaces_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    InterfaceDef* This = dmi_cast<InterfaceDef>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->base_interfaces, flags);
    else
      This->base_interfaces = (RInterfaceDefArray)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo InterfaceDef_fields_base_interfaces = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "base_interfaces", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInterfaceDefArray::clazzInfo(),
  InterfaceDef_MetainfoWrapper::InterfaceDef_fields_base_interfaces_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _InterfaceDef_fields[] = 
{
  &InterfaceDef_fields_base_interfaces,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* InterfaceDef_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InterfaceDef_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InterfaceDef_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  InterfaceDef_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  InterfaceDef_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  InterfaceDef_MetainfoWrapper::InterfaceDef_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo InterfaceDef_methods_create_attribute_INLRString_INLRString_INLRString_INLRIDLType_I_LRAttributeDef__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo InterfaceDef_methods_create_attribute_INLRString_INLRString_INLRString_INLRIDLType_I_LRAttributeDef__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo InterfaceDef_methods_create_attribute_INLRString_INLRString_INLRString_INLRIDLType_I_LRAttributeDef__arg_version = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "version", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo InterfaceDef_methods_create_attribute_INLRString_INLRString_INLRString_INLRIDLType_I_LRAttributeDef__arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIDLType::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo InterfaceDef_methods_create_attribute_INLRString_INLRString_INLRString_INLRIDLType_I_LRAttributeDef__arg_mode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "mode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* InterfaceDef_methods_create_attribute_INLRString_INLRString_INLRString_INLRIDLType_I_LRAttributeDef__args[] = 
{
  &InterfaceDef_methods_create_attribute_INLRString_INLRString_INLRString_INLRIDLType_I_LRAttributeDef__arg_id,
  &InterfaceDef_methods_create_attribute_INLRString_INLRString_INLRString_INLRIDLType_I_LRAttributeDef__arg_name,
  &InterfaceDef_methods_create_attribute_INLRString_INLRString_INLRString_INLRIDLType_I_LRAttributeDef__arg_version,
  &InterfaceDef_methods_create_attribute_INLRString_INLRString_INLRString_INLRIDLType_I_LRAttributeDef__arg_type,
  &InterfaceDef_methods_create_attribute_INLRString_INLRString_INLRString_INLRIDLType_I_LRAttributeDef__arg_mode,
  0
};

::acdk::lang::dmi::ClazzInfo* InterfaceDef_methods_create_attribute_INLRString_INLRString_INLRString_INLRIDLType_I_LRAttributeDef__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InterfaceDef_method_create_attribute_INLRString_INLRString_INLRString_INLRIDLType_I_LRAttributeDef_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create_attribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAttributeDef::clazzInfo(), // return type
  "_2_create_attribute", // alternative name of method
  -1, // altlabelHashCode
  InterfaceDef_methods_create_attribute_INLRString_INLRString_INLRString_INLRIDLType_I_LRAttributeDef__args, // the arguments
  0, //arguments count
  InterfaceDef_methods_create_attribute_INLRString_INLRString_INLRString_INLRIDLType_I_LRAttributeDef__exceptions, // the declared exceptions
  InterfaceDef_MetainfoWrapper::InterfaceDef_method_create_attribute_INLRString_INLRString_INLRString_INLRIDLType_I_LRAttributeDef__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo InterfaceDef_methods_create_operation_INLRString_INLRString_INLRString_INLRIDLType_IINLROperationDescriptionArray_INLRExceptionDescriptionArray_INLRStringArray__LROperationDef__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo InterfaceDef_methods_create_operation_INLRString_INLRString_INLRString_INLRIDLType_IINLROperationDescriptionArray_INLRExceptionDescriptionArray_INLRStringArray__LROperationDef__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo InterfaceDef_methods_create_operation_INLRString_INLRString_INLRString_INLRIDLType_IINLROperationDescriptionArray_INLRExceptionDescriptionArray_INLRStringArray__LROperationDef__arg_version = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "version", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo InterfaceDef_methods_create_operation_INLRString_INLRString_INLRString_INLRIDLType_IINLROperationDescriptionArray_INLRExceptionDescriptionArray_INLRStringArray__LROperationDef__arg_result = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "result", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIDLType::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo InterfaceDef_methods_create_operation_INLRString_INLRString_INLRString_INLRIDLType_IINLROperationDescriptionArray_INLRExceptionDescriptionArray_INLRStringArray__LROperationDef__arg_mode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "mode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo InterfaceDef_methods_create_operation_INLRString_INLRString_INLRString_INLRIDLType_IINLROperationDescriptionArray_INLRExceptionDescriptionArray_INLRStringArray__LROperationDef__arg_params = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "params", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ROperationDescriptionArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo InterfaceDef_methods_create_operation_INLRString_INLRString_INLRString_INLRIDLType_IINLROperationDescriptionArray_INLRExceptionDescriptionArray_INLRStringArray__LROperationDef__arg_exceptions = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "exceptions", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RExceptionDescriptionArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo InterfaceDef_methods_create_operation_INLRString_INLRString_INLRString_INLRIDLType_IINLROperationDescriptionArray_INLRExceptionDescriptionArray_INLRStringArray__LROperationDef__arg_contexts = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "contexts", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* InterfaceDef_methods_create_operation_INLRString_INLRString_INLRString_INLRIDLType_IINLROperationDescriptionArray_INLRExceptionDescriptionArray_INLRStringArray__LROperationDef__args[] = 
{
  &InterfaceDef_methods_create_operation_INLRString_INLRString_INLRString_INLRIDLType_IINLROperationDescriptionArray_INLRExceptionDescriptionArray_INLRStringArray__LROperationDef__arg_id,
  &InterfaceDef_methods_create_operation_INLRString_INLRString_INLRString_INLRIDLType_IINLROperationDescriptionArray_INLRExceptionDescriptionArray_INLRStringArray__LROperationDef__arg_name,
  &InterfaceDef_methods_create_operation_INLRString_INLRString_INLRString_INLRIDLType_IINLROperationDescriptionArray_INLRExceptionDescriptionArray_INLRStringArray__LROperationDef__arg_version,
  &InterfaceDef_methods_create_operation_INLRString_INLRString_INLRString_INLRIDLType_IINLROperationDescriptionArray_INLRExceptionDescriptionArray_INLRStringArray__LROperationDef__arg_result,
  &InterfaceDef_methods_create_operation_INLRString_INLRString_INLRString_INLRIDLType_IINLROperationDescriptionArray_INLRExceptionDescriptionArray_INLRStringArray__LROperationDef__arg_mode,
  &InterfaceDef_methods_create_operation_INLRString_INLRString_INLRString_INLRIDLType_IINLROperationDescriptionArray_INLRExceptionDescriptionArray_INLRStringArray__LROperationDef__arg_params,
  &InterfaceDef_methods_create_operation_INLRString_INLRString_INLRString_INLRIDLType_IINLROperationDescriptionArray_INLRExceptionDescriptionArray_INLRStringArray__LROperationDef__arg_exceptions,
  &InterfaceDef_methods_create_operation_INLRString_INLRString_INLRString_INLRIDLType_IINLROperationDescriptionArray_INLRExceptionDescriptionArray_INLRStringArray__LROperationDef__arg_contexts,
  0
};

::acdk::lang::dmi::ClazzInfo* InterfaceDef_methods_create_operation_INLRString_INLRString_INLRString_INLRIDLType_IINLROperationDescriptionArray_INLRExceptionDescriptionArray_INLRStringArray__LROperationDef__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InterfaceDef_method_create_operation_INLRString_INLRString_INLRString_INLRIDLType_IINLROperationDescriptionArray_INLRExceptionDescriptionArray_INLRStringArray__LROperationDef_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create_operation", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ROperationDef::clazzInfo(), // return type
  "_3_create_operation", // alternative name of method
  -1, // altlabelHashCode
  InterfaceDef_methods_create_operation_INLRString_INLRString_INLRString_INLRIDLType_IINLROperationDescriptionArray_INLRExceptionDescriptionArray_INLRStringArray__LROperationDef__args, // the arguments
  0, //arguments count
  InterfaceDef_methods_create_operation_INLRString_INLRString_INLRString_INLRIDLType_IINLROperationDescriptionArray_INLRExceptionDescriptionArray_INLRStringArray__LROperationDef__exceptions, // the declared exceptions
  InterfaceDef_MetainfoWrapper::InterfaceDef_method_create_operation_INLRString_INLRString_INLRString_INLRIDLType_IINLROperationDescriptionArray_INLRExceptionDescriptionArray_INLRStringArray__LROperationDef__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InterfaceDef_methods_describe_interface__LRFullInterfaceDescription__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InterfaceDef_methods_describe_interface__LRFullInterfaceDescription__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InterfaceDef_method_describe_interface__LRFullInterfaceDescription_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "describe_interface", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFullInterfaceDescription::clazzInfo(), // return type
  "_1_describe_interface", // alternative name of method
  -1, // altlabelHashCode
  InterfaceDef_methods_describe_interface__LRFullInterfaceDescription__args, // the arguments
  0, //arguments count
  InterfaceDef_methods_describe_interface__LRFullInterfaceDescription__exceptions, // the declared exceptions
  InterfaceDef_MetainfoWrapper::InterfaceDef_method_describe_interface__LRFullInterfaceDescription__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo InterfaceDef_methods_is_a_INLRString__Z_arg_interface_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "interface_id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* InterfaceDef_methods_is_a_INLRString__Z_args[] = 
{
  &InterfaceDef_methods_is_a_INLRString__Z_arg_interface_id,
  0
};

::acdk::lang::dmi::ClazzInfo* InterfaceDef_methods_is_a_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InterfaceDef_method_is_a_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "is_a", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_0_is_a", // alternative name of method
  -1, // altlabelHashCode
  InterfaceDef_methods_is_a_INLRString__Z_args, // the arguments
  0, //arguments count
  InterfaceDef_methods_is_a_INLRString__Z_exceptions, // the declared exceptions
  InterfaceDef_MetainfoWrapper::InterfaceDef_method_is_a_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _InterfaceDef_methods[] = 
{
  &InterfaceDef_method_GetClass__L_acdk_lang_RClass_,
  &InterfaceDef_method_create_attribute_INLRString_INLRString_INLRString_INLRIDLType_I_LRAttributeDef_,
  &InterfaceDef_method_create_operation_INLRString_INLRString_INLRString_INLRIDLType_IINLROperationDescriptionArray_INLRExceptionDescriptionArray_INLRStringArray__LROperationDef_,
  &InterfaceDef_method_describe_interface__LRFullInterfaceDescription_,
  &InterfaceDef_method_is_a_INLRString__Z,
  0
};


struct InterfaceDef_MetaInfoInitializer
{  InterfaceDef_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = InterfaceDef::clazzInfo();
    ci->fields =  _InterfaceDef_fields;
    ci->methods =  _InterfaceDef_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
InterfaceDef_MetaInfoInitializer InterfaceDef_MetaInfoInitializer_staticinstance__;


struct InterfaceDef_clazzInfo_ClazzAttributesResInitializer9
{
  InterfaceDef_clazzInfo_ClazzAttributesResInitializer9()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&InterfaceDef_methods_create_attribute_INLRString_INLRString_INLRString_INLRIDLType_I_LRAttributeDef__arg_mode, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)AttributeModeMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&InterfaceDef_methods_create_operation_INLRString_INLRString_INLRString_INLRIDLType_IINLROperationDescriptionArray_INLRExceptionDescriptionArray_INLRStringArray__LROperationDef__arg_mode, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)OperationModeMetaInf::GetEnumInfo()));
  }
};

InterfaceDef_clazzInfo_ClazzAttributesResInitializer9 InterfaceDef_clazzInfo_ClazzAttributesResInitializer9_instance;


bool
InterfaceDef::is_a(IN(RString) interface_id)
{
  ::acdk::lang::dmi::ScriptVar __acdk_retval;
  ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
  __acdk_args[0] = inOf(interface_id);
  const ::acdk::lang::dmi::ClazzInfo* ci__ = getClazzInfo();
  ::acdk::lang::Object* targetObj__ = getDmiTarget(ci__);
  targetObj__->standardDispatch("is_a", __acdk_retval, __acdk_args, targetObj__->getDmiClient(), Nil, 0, targetObj__->getClazzInfo(), &InterfaceDef_method_is_a_INLRString__Z);
  return __acdk_retval;
}

RFullInterfaceDescription
InterfaceDef::describe_interface()
{
  ::acdk::lang::dmi::ScriptVar __acdk_retval;
  ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
  const ::acdk::lang::dmi::ClazzInfo* ci__ = getClazzInfo();
  ::acdk::lang::Object* targetObj__ = getDmiTarget(ci__);
  targetObj__->standardDispatch("describe_interface", __acdk_retval, __acdk_args, targetObj__->getDmiClient(), Nil, 0, targetObj__->getClazzInfo(), &InterfaceDef_method_describe_interface__LRFullInterfaceDescription_);
  return (RFullInterfaceDescription)(::acdk::lang::RObject)__acdk_retval;
}

RAttributeDef
InterfaceDef::create_attribute(IN(RString) id, IN(RString) name, IN(RString) version, IN(RIDLType) type, AttributeMode mode)
{
  ::acdk::lang::dmi::ScriptVar __acdk_retval;
  ::acdk::lang::dmi::ScriptVarArray __acdk_args(5);
  __acdk_args[0] = inOf(id);
  __acdk_args[1] = inOf(name);
  __acdk_args[2] = inOf(version);
  __acdk_args[3] = inOf(type);
  __acdk_args[4] = inOf(mode);
  const ::acdk::lang::dmi::ClazzInfo* ci__ = getClazzInfo();
  ::acdk::lang::Object* targetObj__ = getDmiTarget(ci__);
  targetObj__->standardDispatch("create_attribute", __acdk_retval, __acdk_args, targetObj__->getDmiClient(), Nil, 0, targetObj__->getClazzInfo(), &InterfaceDef_method_create_attribute_INLRString_INLRString_INLRString_INLRIDLType_I_LRAttributeDef_);
  return (RAttributeDef)(::acdk::lang::RObject)__acdk_retval;
}

ROperationDef
InterfaceDef::create_operation(IN(RString) id, IN(RString) name, IN(RString) version, IN(RIDLType) result, OperationMode mode, IN(ROperationDescriptionArray) params, IN(RExceptionDescriptionArray) exceptions, IN(RStringArray) contexts)
{
  ::acdk::lang::dmi::ScriptVar __acdk_retval;
  ::acdk::lang::dmi::ScriptVarArray __acdk_args(8);
  __acdk_args[0] = inOf(id);
  __acdk_args[1] = inOf(name);
  __acdk_args[2] = inOf(version);
  __acdk_args[3] = inOf(result);
  __acdk_args[4] = inOf(mode);
  __acdk_args[5] = inOf(params);
  __acdk_args[6] = inOf(exceptions);
  __acdk_args[7] = inOf(contexts);
  const ::acdk::lang::dmi::ClazzInfo* ci__ = getClazzInfo();
  ::acdk::lang::Object* targetObj__ = getDmiTarget(ci__);
  targetObj__->standardDispatch("create_operation", __acdk_retval, __acdk_args, targetObj__->getDmiClient(), Nil, 0, targetObj__->getClazzInfo(), &InterfaceDef_method_create_operation_INLRString_INLRString_INLRString_INLRIDLType_IINLROperationDescriptionArray_INLRExceptionDescriptionArray_INLRStringArray__LROperationDef_);
  return (ROperationDef)(::acdk::lang::RObject)__acdk_retval;
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
IRObject_create_array(int length)
{
  return new ObjectArrayImpl<RIRObject>(length);
}

//static
::acdk::lang::RObject
IRObject_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class IRObject_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IRObject_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)IRObject::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IRObject_method_destroy__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IRObject* This = dmi_cast<IRObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->IRObject::destroy();
    else
        This->destroy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IRObject_method_get_def_kind__LDefinitionKind__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IRObject* This = dmi_cast<IRObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = (DefinitionKind)This->IRObject::get_def_kind();
    else
      ret = (DefinitionKind)This->get_def_kind();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  IRObject_fields_def_kind_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    IRObject* This = dmi_cast<IRObject>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->def_kind), flags);
    else
      This->def_kind = (DefinitionKind)var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo IRObject_fields_def_kind = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "def_kind", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  IRObject_MetainfoWrapper::IRObject_fields_def_kind_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _IRObject_fields[] = 
{
  &IRObject_fields_def_kind,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* IRObject_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IRObject_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IRObject_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  IRObject_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  IRObject_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  IRObject_MetainfoWrapper::IRObject_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* IRObject_methods_destroy__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IRObject_methods_destroy__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IRObject_method_destroy__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "destroy", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_destroy", // alternative name of method
  -1, // altlabelHashCode
  IRObject_methods_destroy__V_args, // the arguments
  0, //arguments count
  IRObject_methods_destroy__V_exceptions, // the declared exceptions
  IRObject_MetainfoWrapper::IRObject_method_destroy__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* IRObject_methods_get_def_kind__LDefinitionKind__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IRObject_methods_get_def_kind__LDefinitionKind__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IRObject_method_get_def_kind__LDefinitionKind_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "get_def_kind", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_0_get_def_kind", // alternative name of method
  -1, // altlabelHashCode
  IRObject_methods_get_def_kind__LDefinitionKind__args, // the arguments
  0, //arguments count
  IRObject_methods_get_def_kind__LDefinitionKind__exceptions, // the declared exceptions
  IRObject_MetainfoWrapper::IRObject_method_get_def_kind__LDefinitionKind__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _IRObject_methods[] = 
{
  &IRObject_method_GetClass__L_acdk_lang_RClass_,
  &IRObject_method_destroy__V,
  &IRObject_method_get_def_kind__LDefinitionKind_,
  0
};


struct IRObject_MetaInfoInitializer
{  IRObject_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = IRObject::clazzInfo();
    ci->fields =  _IRObject_fields;
    ci->methods =  _IRObject_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
IRObject_MetaInfoInitializer IRObject_MetaInfoInitializer_staticinstance__;


struct IRObject_clazzInfo_ClazzAttributesResInitializer10
{
  IRObject_clazzInfo_ClazzAttributesResInitializer10()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&IRObject_method_get_def_kind__LDefinitionKind_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)DefinitionKindMetaInf::GetEnumInfo()));
  }
};

IRObject_clazzInfo_ClazzAttributesResInitializer10 IRObject_clazzInfo_ClazzAttributesResInitializer10_instance;



} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
ModuleDescription_create_array(int length)
{
  return new ObjectArrayImpl<RModuleDescription>(length);
}

//static
::acdk::lang::RObject
ModuleDescription_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ModuleDescription_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ModuleDescription_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ModuleDescription::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ModuleDescription_method_ModuleDescription__LRModuleDescription__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ModuleDescription();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ModuleDescription_fields_defined_in_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ModuleDescription* This = dmi_cast<ModuleDescription>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->defined_in, flags);
    else
      This->defined_in = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ModuleDescription_fields_id_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ModuleDescription* This = dmi_cast<ModuleDescription>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->id, flags);
    else
      This->id = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ModuleDescription_fields_name_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ModuleDescription* This = dmi_cast<ModuleDescription>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->name, flags);
    else
      This->name = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ModuleDescription_fields_version_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ModuleDescription* This = dmi_cast<ModuleDescription>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->version, flags);
    else
      This->version = (RString)var.getObjectVar();
    return fieldinf;
  }
};


::acdkx::orb::RegisterRepId _register_ModuleDescription_repId(ModuleDescription::clazzInfo(), "org/omg/CORBA/ModuleDescription", 1, 0);
::acdk::lang::dmi::ClazzFieldInfo ModuleDescription_fields_defined_in = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "defined_in", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ModuleDescription_MetainfoWrapper::ModuleDescription_fields_defined_in_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ModuleDescription_fields_id = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "id", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ModuleDescription_MetainfoWrapper::ModuleDescription_fields_id_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ModuleDescription_fields_name = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "name", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ModuleDescription_MetainfoWrapper::ModuleDescription_fields_name_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ModuleDescription_fields_version = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "version", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ModuleDescription_MetainfoWrapper::ModuleDescription_fields_version_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ModuleDescription_fields[] = 
{
  &ModuleDescription_fields_defined_in,
  &ModuleDescription_fields_id,
  &ModuleDescription_fields_name,
  &ModuleDescription_fields_version,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ModuleDescription_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ModuleDescription_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ModuleDescription_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ModuleDescription_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ModuleDescription_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ModuleDescription_MetainfoWrapper::ModuleDescription_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ModuleDescription_methods_ModuleDescription__LRModuleDescription__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ModuleDescription_methods_ModuleDescription__LRModuleDescription__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ModuleDescription_method_ModuleDescription__LRModuleDescription_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ModuleDescription", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ModuleDescription::clazzInfo(), // return type
  "_0_ModuleDescription", // alternative name of method
  -1, // altlabelHashCode
  ModuleDescription_methods_ModuleDescription__LRModuleDescription__args, // the arguments
  0, //arguments count
  ModuleDescription_methods_ModuleDescription__LRModuleDescription__exceptions, // the declared exceptions
  ModuleDescription_MetainfoWrapper::ModuleDescription_method_ModuleDescription__LRModuleDescription__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ModuleDescription_methods[] = 
{
  &ModuleDescription_method_GetClass__L_acdk_lang_RClass_,
  &ModuleDescription_method_ModuleDescription__LRModuleDescription_,
  0
};


struct ModuleDescription_MetaInfoInitializer
{  ModuleDescription_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ModuleDescription::clazzInfo();
    ci->fields =  _ModuleDescription_fields;
    ci->methods =  _ModuleDescription_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ModuleDescription_MetaInfoInitializer ModuleDescription_MetaInfoInitializer_staticinstance__;


struct ModuleDescription_clazzInfo_ClazzAttributesResInitializer11
{
  ModuleDescription_clazzInfo_ClazzAttributesResInitializer11()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)ModuleDescription::clazzInfo(), "acdkx_orb_StructType", ::acdk::lang::dmi::ClazzAttributeResValue::makeStringRes("", false));
  }
};

ModuleDescription_clazzInfo_ClazzAttributesResInitializer11 ModuleDescription_clazzInfo_ClazzAttributesResInitializer11_instance;



} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
ModuleDef_create_array(int length)
{
  return new ObjectArrayImpl<RModuleDef>(length);
}

//static
::acdk::lang::RObject
ModuleDef_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ModuleDef_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ModuleDef_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ModuleDef::GetClass();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ModuleDef_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ModuleDef_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ModuleDef_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ModuleDef_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_0_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ModuleDef_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ModuleDef_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ModuleDef_MetainfoWrapper::ModuleDef_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ModuleDef_methods[] = 
{
  &ModuleDef_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct ModuleDef_MetaInfoInitializer
{  ModuleDef_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ModuleDef::clazzInfo();
    ci->fields =  _ModuleDef_fields;
    ci->methods =  _ModuleDef_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ModuleDef_MetaInfoInitializer ModuleDef_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
Object_create_array(int length)
{
  return new ObjectArrayImpl<RObject>(length);
}

//static
::acdk::lang::RObject
Object_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Object_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Object_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Object::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Object_method_duplicate__L_org_omg_CORBA_RObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Object* This = dmi_cast<Object>(This_);
    ret = (::acdk::lang::RObject)This->duplicate();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Object_method_hash_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Object* This = dmi_cast<Object>(This_);
  ret = This->hash(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Object_method_is_a_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Object* This = dmi_cast<Object>(This_);
  ret = This->is_a((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Object_method_is_equivalent_INL_org_omg_CORBA_RObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Object* This = dmi_cast<Object>(This_);
  ret = This->is_equivalent((::org::omg::CORBA::RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Object_method_is_nil__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Object* This = dmi_cast<Object>(This_);
  ret = This->is_nil();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Object_method_non_existent__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Object* This = dmi_cast<Object>(This_);
  ret = This->non_existent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Object_method_release__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Object* This = dmi_cast<Object>(This_);
    This->release();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Object_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Object_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Object_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Object_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_7_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Object_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Object_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Object_MetainfoWrapper::Object_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Object_methods_duplicate__L_org_omg_CORBA_RObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Object_methods_duplicate__L_org_omg_CORBA_RObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Object_method_duplicate__L_org_omg_CORBA_RObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "duplicate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo(), // return type
  "_1_duplicate", // alternative name of method
  -1, // altlabelHashCode
  Object_methods_duplicate__L_org_omg_CORBA_RObject__args, // the arguments
  0, //arguments count
  Object_methods_duplicate__L_org_omg_CORBA_RObject__exceptions, // the declared exceptions
  Object_MetainfoWrapper::Object_method_duplicate__L_org_omg_CORBA_RObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Object_methods_hash_I_I_arg_maximum = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "maximum", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Object_methods_hash_I_I_args[] = 
{
  &Object_methods_hash_I_I_arg_maximum,
  0
};

::acdk::lang::dmi::ClazzInfo* Object_methods_hash_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Object_method_hash_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hash", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_hash", // alternative name of method
  -1, // altlabelHashCode
  Object_methods_hash_I_I_args, // the arguments
  0, //arguments count
  Object_methods_hash_I_I_exceptions, // the declared exceptions
  Object_MetainfoWrapper::Object_method_hash_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Object_methods_is_a_INLRString__Z_arg_logical_type_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "logical_type_id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Object_methods_is_a_INLRString__Z_args[] = 
{
  &Object_methods_is_a_INLRString__Z_arg_logical_type_id,
  0
};

::acdk::lang::dmi::ClazzInfo* Object_methods_is_a_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Object_method_is_a_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "is_a", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_is_a", // alternative name of method
  -1, // altlabelHashCode
  Object_methods_is_a_INLRString__Z_args, // the arguments
  0, //arguments count
  Object_methods_is_a_INLRString__Z_exceptions, // the declared exceptions
  Object_MetainfoWrapper::Object_method_is_a_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Object_methods_is_equivalent_INL_org_omg_CORBA_RObject__Z_arg_other_object = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other_object", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Object_methods_is_equivalent_INL_org_omg_CORBA_RObject__Z_args[] = 
{
  &Object_methods_is_equivalent_INL_org_omg_CORBA_RObject__Z_arg_other_object,
  0
};

::acdk::lang::dmi::ClazzInfo* Object_methods_is_equivalent_INL_org_omg_CORBA_RObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Object_method_is_equivalent_INL_org_omg_CORBA_RObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "is_equivalent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_is_equivalent", // alternative name of method
  -1, // altlabelHashCode
  Object_methods_is_equivalent_INL_org_omg_CORBA_RObject__Z_args, // the arguments
  0, //arguments count
  Object_methods_is_equivalent_INL_org_omg_CORBA_RObject__Z_exceptions, // the declared exceptions
  Object_MetainfoWrapper::Object_method_is_equivalent_INL_org_omg_CORBA_RObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Object_methods_is_nil__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Object_methods_is_nil__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Object_method_is_nil__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "is_nil", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_0_is_nil", // alternative name of method
  -1, // altlabelHashCode
  Object_methods_is_nil__Z_args, // the arguments
  0, //arguments count
  Object_methods_is_nil__Z_exceptions, // the declared exceptions
  Object_MetainfoWrapper::Object_method_is_nil__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Object_methods_non_existent__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Object_methods_non_existent__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Object_method_non_existent__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "non_existent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_non_existent", // alternative name of method
  -1, // altlabelHashCode
  Object_methods_non_existent__Z_args, // the arguments
  0, //arguments count
  Object_methods_non_existent__Z_exceptions, // the declared exceptions
  Object_MetainfoWrapper::Object_method_non_existent__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Object_methods_release__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Object_methods_release__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Object_method_release__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "release", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_release", // alternative name of method
  -1, // altlabelHashCode
  Object_methods_release__V_args, // the arguments
  0, //arguments count
  Object_methods_release__V_exceptions, // the declared exceptions
  Object_MetainfoWrapper::Object_method_release__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Object_methods[] = 
{
  &Object_method_GetClass__L_acdk_lang_RClass_,
  &Object_method_duplicate__L_org_omg_CORBA_RObject_,
  &Object_method_hash_I_I,
  &Object_method_is_a_INLRString__Z,
  &Object_method_is_equivalent_INL_org_omg_CORBA_RObject__Z,
  &Object_method_is_nil__Z,
  &Object_method_non_existent__Z,
  &Object_method_release__V,
  0
};


struct Object_MetaInfoInitializer
{  Object_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Object::clazzInfo();
    ci->fields =  _Object_fields;
    ci->methods =  _Object_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Object_MetaInfoInitializer Object_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
ParameterDescription_create_array(int length)
{
  return new ObjectArrayImpl<RParameterDescription>(length);
}

//static
::acdk::lang::RObject
ParameterDescription_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ParameterDescription_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParameterDescription_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ParameterDescription::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParameterDescription_method_ParameterDescription__LRParameterDescription__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ParameterDescription();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ParameterDescription_fields_mode_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ParameterDescription* This = dmi_cast<ParameterDescription>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->mode), flags);
    else
      This->mode = (ParameterMode)var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ParameterDescription_fields_name_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ParameterDescription* This = dmi_cast<ParameterDescription>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->name, flags);
    else
      This->name = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ParameterDescription_fields_type_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ParameterDescription* This = dmi_cast<ParameterDescription>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->type, flags);
    else
      This->type = (RTypeCode)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ParameterDescription_fields_type_def_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ParameterDescription* This = dmi_cast<ParameterDescription>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->type_def, flags);
    else
      This->type_def = (RIDLType)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ParameterDescription_fields_mode = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "mode", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ParameterDescription_MetainfoWrapper::ParameterDescription_fields_mode_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ParameterDescription_fields_name = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "name", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ParameterDescription_MetainfoWrapper::ParameterDescription_fields_name_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ParameterDescription_fields_type = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "type", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTypeCode::clazzInfo(),
  ParameterDescription_MetainfoWrapper::ParameterDescription_fields_type_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ParameterDescription_fields_type_def = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "type_def", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIDLType::clazzInfo(),
  ParameterDescription_MetainfoWrapper::ParameterDescription_fields_type_def_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ParameterDescription_fields[] = 
{
  &ParameterDescription_fields_mode,
  &ParameterDescription_fields_name,
  &ParameterDescription_fields_type,
  &ParameterDescription_fields_type_def,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParameterDescription_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ParameterDescription_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParameterDescription_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ParameterDescription_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ParameterDescription_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ParameterDescription_MetainfoWrapper::ParameterDescription_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParameterDescription_methods_ParameterDescription__LRParameterDescription__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ParameterDescription_methods_ParameterDescription__LRParameterDescription__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParameterDescription_method_ParameterDescription__LRParameterDescription_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ParameterDescription", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ParameterDescription::clazzInfo(), // return type
  "_0_ParameterDescription", // alternative name of method
  -1, // altlabelHashCode
  ParameterDescription_methods_ParameterDescription__LRParameterDescription__args, // the arguments
  0, //arguments count
  ParameterDescription_methods_ParameterDescription__LRParameterDescription__exceptions, // the declared exceptions
  ParameterDescription_MetainfoWrapper::ParameterDescription_method_ParameterDescription__LRParameterDescription__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ParameterDescription_methods[] = 
{
  &ParameterDescription_method_GetClass__L_acdk_lang_RClass_,
  &ParameterDescription_method_ParameterDescription__LRParameterDescription_,
  0
};


struct ParameterDescription_MetaInfoInitializer
{  ParameterDescription_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ParameterDescription::clazzInfo();
    ci->fields =  _ParameterDescription_fields;
    ci->methods =  _ParameterDescription_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ParameterDescription_MetaInfoInitializer ParameterDescription_MetaInfoInitializer_staticinstance__;


struct ParameterDescription_clazzInfo_ClazzAttributesResInitializer12
{
  ParameterDescription_clazzInfo_ClazzAttributesResInitializer12()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)ParameterDescription::clazzInfo(), "acdkx_orb_StructType", ::acdk::lang::dmi::ClazzAttributeResValue::makeStringRes("", false));
  }
};

ParameterDescription_clazzInfo_ClazzAttributesResInitializer12 ParameterDescription_clazzInfo_ClazzAttributesResInitializer12_instance;



} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
OperationDef_create_array(int length)
{
  return new ObjectArrayImpl<ROperationDef>(length);
}

//static
::acdk::lang::RObject
OperationDef_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class OperationDef_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OperationDef_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)OperationDef::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  OperationDef_fields_contexts_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    OperationDef* This = dmi_cast<OperationDef>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->contexts, flags);
    else
      This->contexts = (RStringArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  OperationDef_fields_exceptions_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    OperationDef* This = dmi_cast<OperationDef>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->exceptions, flags);
    else
      This->exceptions = (RExceptionDescriptionArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  OperationDef_fields_mode_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    OperationDef* This = dmi_cast<OperationDef>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->mode), flags);
    else
      This->mode = (OperationMode)var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  OperationDef_fields_params_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    OperationDef* This = dmi_cast<OperationDef>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->params, flags);
    else
      This->params = (RParameterDescriptionArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  OperationDef_fields_result_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    OperationDef* This = dmi_cast<OperationDef>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->result, flags);
    else
      This->result = (RTypeCode)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  OperationDef_fields_result_def_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    OperationDef* This = dmi_cast<OperationDef>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->result_def, flags);
    else
      This->result_def = (RIDLType)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo OperationDef_fields_contexts = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "contexts", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(),
  OperationDef_MetainfoWrapper::OperationDef_fields_contexts_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo OperationDef_fields_exceptions = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "exceptions", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RExceptionDescriptionArray::clazzInfo(),
  OperationDef_MetainfoWrapper::OperationDef_fields_exceptions_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo OperationDef_fields_mode = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "mode", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  OperationDef_MetainfoWrapper::OperationDef_fields_mode_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo OperationDef_fields_params = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "params", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RParameterDescriptionArray::clazzInfo(),
  OperationDef_MetainfoWrapper::OperationDef_fields_params_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo OperationDef_fields_result = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "result", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTypeCode::clazzInfo(),
  OperationDef_MetainfoWrapper::OperationDef_fields_result_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo OperationDef_fields_result_def = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "result_def", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIDLType::clazzInfo(),
  OperationDef_MetainfoWrapper::OperationDef_fields_result_def_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _OperationDef_fields[] = 
{
  &OperationDef_fields_contexts,
  &OperationDef_fields_exceptions,
  &OperationDef_fields_mode,
  &OperationDef_fields_params,
  &OperationDef_fields_result,
  &OperationDef_fields_result_def,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* OperationDef_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* OperationDef_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OperationDef_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_0_GetClass", // alternative name of method
  -1, // altlabelHashCode
  OperationDef_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  OperationDef_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  OperationDef_MetainfoWrapper::OperationDef_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _OperationDef_methods[] = 
{
  &OperationDef_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct OperationDef_MetaInfoInitializer
{  OperationDef_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = OperationDef::clazzInfo();
    ci->fields =  _OperationDef_fields;
    ci->methods =  _OperationDef_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
OperationDef_MetaInfoInitializer OperationDef_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
OperationDescription_create_array(int length)
{
  return new ObjectArrayImpl<ROperationDescription>(length);
}

//static
::acdk::lang::RObject
OperationDescription_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class OperationDescription_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OperationDescription_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)OperationDescription::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OperationDescription_method_OperationDescription__LROperationDescription__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new OperationDescription();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  OperationDescription_fields_contexts_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    OperationDescription* This = dmi_cast<OperationDescription>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->contexts, flags);
    else
      This->contexts = (RStringArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  OperationDescription_fields_defined_in_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    OperationDescription* This = dmi_cast<OperationDescription>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->defined_in, flags);
    else
      This->defined_in = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  OperationDescription_fields_exceptions_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    OperationDescription* This = dmi_cast<OperationDescription>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->exceptions, flags);
    else
      This->exceptions = (RExceptionDescriptionArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  OperationDescription_fields_id_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    OperationDescription* This = dmi_cast<OperationDescription>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->id, flags);
    else
      This->id = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  OperationDescription_fields_mode_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    OperationDescription* This = dmi_cast<OperationDescription>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->mode), flags);
    else
      This->mode = (OperationMode)var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  OperationDescription_fields_name_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    OperationDescription* This = dmi_cast<OperationDescription>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->name, flags);
    else
      This->name = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  OperationDescription_fields_parameters_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    OperationDescription* This = dmi_cast<OperationDescription>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->parameters, flags);
    else
      This->parameters = (RParameterDescriptionArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  OperationDescription_fields_result_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    OperationDescription* This = dmi_cast<OperationDescription>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->result, flags);
    else
      This->result = (RTypeCode)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  OperationDescription_fields_version_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    OperationDescription* This = dmi_cast<OperationDescription>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->version, flags);
    else
      This->version = (RString)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo OperationDescription_fields_contexts = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "contexts", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(),
  OperationDescription_MetainfoWrapper::OperationDescription_fields_contexts_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo OperationDescription_fields_defined_in = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "defined_in", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  OperationDescription_MetainfoWrapper::OperationDescription_fields_defined_in_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo OperationDescription_fields_exceptions = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "exceptions", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RExceptionDescriptionArray::clazzInfo(),
  OperationDescription_MetainfoWrapper::OperationDescription_fields_exceptions_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo OperationDescription_fields_id = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "id", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  OperationDescription_MetainfoWrapper::OperationDescription_fields_id_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo OperationDescription_fields_mode = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "mode", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  OperationDescription_MetainfoWrapper::OperationDescription_fields_mode_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo OperationDescription_fields_name = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "name", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  OperationDescription_MetainfoWrapper::OperationDescription_fields_name_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo OperationDescription_fields_parameters = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "parameters", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RParameterDescriptionArray::clazzInfo(),
  OperationDescription_MetainfoWrapper::OperationDescription_fields_parameters_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo OperationDescription_fields_result = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "result", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTypeCode::clazzInfo(),
  OperationDescription_MetainfoWrapper::OperationDescription_fields_result_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo OperationDescription_fields_version = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "version", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  OperationDescription_MetainfoWrapper::OperationDescription_fields_version_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _OperationDescription_fields[] = 
{
  &OperationDescription_fields_contexts,
  &OperationDescription_fields_defined_in,
  &OperationDescription_fields_exceptions,
  &OperationDescription_fields_id,
  &OperationDescription_fields_mode,
  &OperationDescription_fields_name,
  &OperationDescription_fields_parameters,
  &OperationDescription_fields_result,
  &OperationDescription_fields_version,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* OperationDescription_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* OperationDescription_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OperationDescription_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  OperationDescription_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  OperationDescription_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  OperationDescription_MetainfoWrapper::OperationDescription_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* OperationDescription_methods_OperationDescription__LROperationDescription__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* OperationDescription_methods_OperationDescription__LROperationDescription__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OperationDescription_method_OperationDescription__LROperationDescription_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "OperationDescription", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  OperationDescription::clazzInfo(), // return type
  "_0_OperationDescription", // alternative name of method
  -1, // altlabelHashCode
  OperationDescription_methods_OperationDescription__LROperationDescription__args, // the arguments
  0, //arguments count
  OperationDescription_methods_OperationDescription__LROperationDescription__exceptions, // the declared exceptions
  OperationDescription_MetainfoWrapper::OperationDescription_method_OperationDescription__LROperationDescription__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _OperationDescription_methods[] = 
{
  &OperationDescription_method_GetClass__L_acdk_lang_RClass_,
  &OperationDescription_method_OperationDescription__LROperationDescription_,
  0
};


struct OperationDescription_MetaInfoInitializer
{  OperationDescription_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = OperationDescription::clazzInfo();
    ci->fields =  _OperationDescription_fields;
    ci->methods =  _OperationDescription_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
OperationDescription_MetaInfoInitializer OperationDescription_MetaInfoInitializer_staticinstance__;


struct OperationDescription_clazzInfo_ClazzAttributesResInitializer13
{
  OperationDescription_clazzInfo_ClazzAttributesResInitializer13()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)OperationDescription::clazzInfo(), "acdkx_orb_StructType", ::acdk::lang::dmi::ClazzAttributeResValue::makeStringRes("", false));
  }
};

OperationDescription_clazzInfo_ClazzAttributesResInitializer13 OperationDescription_clazzInfo_ClazzAttributesResInitializer13_instance;



} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
ORB_create_array(int length)
{
  return new ObjectArrayImpl<RORB>(length);
}

//static
::acdk::lang::RObject
ORB_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ORB_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ORB_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ORB::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ORB_method_connect_INL_org_omg_CORBA_RObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ORB* This = dmi_cast<ORB>(This_);
    This->connect((::org::omg::CORBA::RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ORB_method_destroy__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ORB* This = dmi_cast<ORB>(This_);
    This->destroy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ORB_method_impl_is_ready_INL_acdk_lang_RObject__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ORB* This = dmi_cast<ORB>(This_);
    ret = (::acdk::lang::RObject)This->impl_is_ready((::acdk::lang::RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ORB_method_init__LRORB__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ORB::init();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ORB_method_init_INLRStringArray_INLacdk_util_RProperties__LRORB__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ORB::init((RStringArray)args[0].getObjectVar(), (acdk::util::RProperties)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ORB_method_init_INLRStringArray__LRORB__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ORB::init((RStringArray)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ORB_method_list_initial_services__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ORB* This = dmi_cast<ORB>(This_);
    ret = (::acdk::lang::RObject)This->list_initial_services();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ORB_method_object_to_string_INL_org_omg_CORBA_RObject__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ORB* This = dmi_cast<ORB>(This_);
    ret = (::acdk::lang::RObject)This->object_to_string((::org::omg::CORBA::RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ORB_method_perform_work__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ORB* This = dmi_cast<ORB>(This_);
    This->perform_work();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ORB_method_resolve_initial_references_INLRString__L_org_omg_CORBA_RObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ORB* This = dmi_cast<ORB>(This_);
    ret = (::acdk::lang::RObject)This->resolve_initial_references((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ORB_method_run__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ORB* This = dmi_cast<ORB>(This_);
    This->run();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ORB_method_shutdown_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ORB* This = dmi_cast<ORB>(This_);
    This->shutdown(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ORB_method_start__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ORB* This = dmi_cast<ORB>(This_);
    This->start();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ORB_method_string_to_object_INLRString__L_org_omg_CORBA_RObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ORB* This = dmi_cast<ORB>(This_);
    ret = (::acdk::lang::RObject)This->string_to_object((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ORB_method_work_pending__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ORB* This = dmi_cast<ORB>(This_);
  ret = This->work_pending();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ORB_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ORB_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ORB_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ORB_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_f_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ORB_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ORB_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ORB_MetainfoWrapper::ORB_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ORB_methods_connect_INL_org_omg_CORBA_RObject__V_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ORB_methods_connect_INL_org_omg_CORBA_RObject__V_args[] = 
{
  &ORB_methods_connect_INL_org_omg_CORBA_RObject__V_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* ORB_methods_connect_INL_org_omg_CORBA_RObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ORB_method_connect_INL_org_omg_CORBA_RObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "connect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_connect", // alternative name of method
  -1, // altlabelHashCode
  ORB_methods_connect_INL_org_omg_CORBA_RObject__V_args, // the arguments
  0, //arguments count
  ORB_methods_connect_INL_org_omg_CORBA_RObject__V_exceptions, // the declared exceptions
  ORB_MetainfoWrapper::ORB_method_connect_INL_org_omg_CORBA_RObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ORB_methods_destroy__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ORB_methods_destroy__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ORB_method_destroy__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "destroy", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_destroy", // alternative name of method
  -1, // altlabelHashCode
  ORB_methods_destroy__V_args, // the arguments
  0, //arguments count
  ORB_methods_destroy__V_exceptions, // the declared exceptions
  ORB_MetainfoWrapper::ORB_method_destroy__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ORB_methods_impl_is_ready_INL_acdk_lang_RObject__LRString__arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ORB_methods_impl_is_ready_INL_acdk_lang_RObject__LRString__args[] = 
{
  &ORB_methods_impl_is_ready_INL_acdk_lang_RObject__LRString__arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* ORB_methods_impl_is_ready_INL_acdk_lang_RObject__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ORB_method_impl_is_ready_INL_acdk_lang_RObject__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "impl_is_ready", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_c_impl_is_ready", // alternative name of method
  -1, // altlabelHashCode
  ORB_methods_impl_is_ready_INL_acdk_lang_RObject__LRString__args, // the arguments
  0, //arguments count
  ORB_methods_impl_is_ready_INL_acdk_lang_RObject__LRString__exceptions, // the declared exceptions
  ORB_MetainfoWrapper::ORB_method_impl_is_ready_INL_acdk_lang_RObject__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ORB_methods_init__LRORB__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ORB_methods_init__LRORB__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ORB_method_init__LRORB_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "init", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RORB::clazzInfo(), // return type
  "_9_init", // alternative name of method
  -1, // altlabelHashCode
  ORB_methods_init__LRORB__args, // the arguments
  0, //arguments count
  ORB_methods_init__LRORB__exceptions, // the declared exceptions
  ORB_MetainfoWrapper::ORB_method_init__LRORB__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ORB_methods_init_INLRStringArray_INLacdk_util_RProperties__LRORB__arg_args = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "args", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ORB_methods_init_INLRStringArray_INLacdk_util_RProperties__LRORB__arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RProperties::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ORB_methods_init_INLRStringArray_INLacdk_util_RProperties__LRORB__args[] = 
{
  &ORB_methods_init_INLRStringArray_INLacdk_util_RProperties__LRORB__arg_args,
  &ORB_methods_init_INLRStringArray_INLacdk_util_RProperties__LRORB__arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* ORB_methods_init_INLRStringArray_INLacdk_util_RProperties__LRORB__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ORB_method_init_INLRStringArray_INLacdk_util_RProperties__LRORB_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "init", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RORB::clazzInfo(), // return type
  "_a_init", // alternative name of method
  -1, // altlabelHashCode
  ORB_methods_init_INLRStringArray_INLacdk_util_RProperties__LRORB__args, // the arguments
  0, //arguments count
  ORB_methods_init_INLRStringArray_INLacdk_util_RProperties__LRORB__exceptions, // the declared exceptions
  ORB_MetainfoWrapper::ORB_method_init_INLRStringArray_INLacdk_util_RProperties__LRORB__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ORB_methods_init_INLRStringArray__LRORB__arg_args = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "args", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ORB_methods_init_INLRStringArray__LRORB__args[] = 
{
  &ORB_methods_init_INLRStringArray__LRORB__arg_args,
  0
};

::acdk::lang::dmi::ClazzInfo* ORB_methods_init_INLRStringArray__LRORB__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ORB_method_init_INLRStringArray__LRORB_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "init", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RORB::clazzInfo(), // return type
  "_b_init", // alternative name of method
  -1, // altlabelHashCode
  ORB_methods_init_INLRStringArray__LRORB__args, // the arguments
  0, //arguments count
  ORB_methods_init_INLRStringArray__LRORB__exceptions, // the declared exceptions
  ORB_MetainfoWrapper::ORB_method_init_INLRStringArray__LRORB__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ORB_methods_list_initial_services__LRStringArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ORB_methods_list_initial_services__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ORB_method_list_initial_services__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "list_initial_services", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_0_list_initial_services", // alternative name of method
  -1, // altlabelHashCode
  ORB_methods_list_initial_services__LRStringArray__args, // the arguments
  0, //arguments count
  ORB_methods_list_initial_services__LRStringArray__exceptions, // the declared exceptions
  ORB_MetainfoWrapper::ORB_method_list_initial_services__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ORB_methods_object_to_string_INL_org_omg_CORBA_RObject__LRString__arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ORB_methods_object_to_string_INL_org_omg_CORBA_RObject__LRString__args[] = 
{
  &ORB_methods_object_to_string_INL_org_omg_CORBA_RObject__LRString__arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* ORB_methods_object_to_string_INL_org_omg_CORBA_RObject__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ORB_method_object_to_string_INL_org_omg_CORBA_RObject__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "object_to_string", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_d_object_to_string", // alternative name of method
  -1, // altlabelHashCode
  ORB_methods_object_to_string_INL_org_omg_CORBA_RObject__LRString__args, // the arguments
  0, //arguments count
  ORB_methods_object_to_string_INL_org_omg_CORBA_RObject__LRString__exceptions, // the declared exceptions
  ORB_MetainfoWrapper::ORB_method_object_to_string_INL_org_omg_CORBA_RObject__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ORB_methods_perform_work__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ORB_methods_perform_work__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ORB_method_perform_work__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "perform_work", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_perform_work", // alternative name of method
  -1, // altlabelHashCode
  ORB_methods_perform_work__V_args, // the arguments
  0, //arguments count
  ORB_methods_perform_work__V_exceptions, // the declared exceptions
  ORB_MetainfoWrapper::ORB_method_perform_work__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ORB_methods_resolve_initial_references_INLRString__L_org_omg_CORBA_RObject__arg_identifier = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "identifier", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ORB_methods_resolve_initial_references_INLRString__L_org_omg_CORBA_RObject__args[] = 
{
  &ORB_methods_resolve_initial_references_INLRString__L_org_omg_CORBA_RObject__arg_identifier,
  0
};

::acdk::lang::dmi::ClazzInfo* ORB_methods_resolve_initial_references_INLRString__L_org_omg_CORBA_RObject__exceptions[] =
{
  RInvalidName::clazzInfo(), 
  0
};

void ORB_resolve_initial_references_INLRString__L_org_omg_CORBA_RObject__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, InvalidName) == true)
    THROW_INSTANCE( RInvalidName(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ORB_method_resolve_initial_references_INLRString__L_org_omg_CORBA_RObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "resolve_initial_references", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo(), // return type
  "_1_resolve_initial_references", // alternative name of method
  -1, // altlabelHashCode
  ORB_methods_resolve_initial_references_INLRString__L_org_omg_CORBA_RObject__args, // the arguments
  0, //arguments count
  ORB_methods_resolve_initial_references_INLRString__L_org_omg_CORBA_RObject__exceptions, // the declared exceptions
  ORB_MetainfoWrapper::ORB_method_resolve_initial_references_INLRString__L_org_omg_CORBA_RObject__dispatch, // invoke this method
  ORB_resolve_initial_references_INLRString__L_org_omg_CORBA_RObject__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ORB_methods_run__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ORB_methods_run__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ORB_method_run__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "run", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_run", // alternative name of method
  -1, // altlabelHashCode
  ORB_methods_run__V_args, // the arguments
  0, //arguments count
  ORB_methods_run__V_exceptions, // the declared exceptions
  ORB_MetainfoWrapper::ORB_method_run__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ORB_methods_shutdown_Z_V_arg_wait_for_completion = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "wait_for_completion", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ORB_methods_shutdown_Z_V_args[] = 
{
  &ORB_methods_shutdown_Z_V_arg_wait_for_completion,
  0
};

::acdk::lang::dmi::ClazzInfo* ORB_methods_shutdown_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ORB_method_shutdown_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "shutdown", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_shutdown", // alternative name of method
  -1, // altlabelHashCode
  ORB_methods_shutdown_Z_V_args, // the arguments
  0, //arguments count
  ORB_methods_shutdown_Z_V_exceptions, // the declared exceptions
  ORB_MetainfoWrapper::ORB_method_shutdown_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ORB_methods_start__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ORB_methods_start__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ORB_method_start__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "start", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_start", // alternative name of method
  -1, // altlabelHashCode
  ORB_methods_start__V_args, // the arguments
  0, //arguments count
  ORB_methods_start__V_exceptions, // the declared exceptions
  ORB_MetainfoWrapper::ORB_method_start__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ORB_methods_string_to_object_INLRString__L_org_omg_CORBA_RObject__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ORB_methods_string_to_object_INLRString__L_org_omg_CORBA_RObject__args[] = 
{
  &ORB_methods_string_to_object_INLRString__L_org_omg_CORBA_RObject__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* ORB_methods_string_to_object_INLRString__L_org_omg_CORBA_RObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ORB_method_string_to_object_INLRString__L_org_omg_CORBA_RObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "string_to_object", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo(), // return type
  "_e_string_to_object", // alternative name of method
  -1, // altlabelHashCode
  ORB_methods_string_to_object_INLRString__L_org_omg_CORBA_RObject__args, // the arguments
  0, //arguments count
  ORB_methods_string_to_object_INLRString__L_org_omg_CORBA_RObject__exceptions, // the declared exceptions
  ORB_MetainfoWrapper::ORB_method_string_to_object_INLRString__L_org_omg_CORBA_RObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ORB_methods_work_pending__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ORB_methods_work_pending__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ORB_method_work_pending__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "work_pending", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_work_pending", // alternative name of method
  -1, // altlabelHashCode
  ORB_methods_work_pending__Z_args, // the arguments
  0, //arguments count
  ORB_methods_work_pending__Z_exceptions, // the declared exceptions
  ORB_MetainfoWrapper::ORB_method_work_pending__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ORB_methods[] = 
{
  &ORB_method_GetClass__L_acdk_lang_RClass_,
  &ORB_method_connect_INL_org_omg_CORBA_RObject__V,
  &ORB_method_destroy__V,
  &ORB_method_impl_is_ready_INL_acdk_lang_RObject__LRString_,
  &ORB_method_init__LRORB_,
  &ORB_method_init_INLRStringArray_INLacdk_util_RProperties__LRORB_,
  &ORB_method_init_INLRStringArray__LRORB_,
  &ORB_method_list_initial_services__LRStringArray_,
  &ORB_method_object_to_string_INL_org_omg_CORBA_RObject__LRString_,
  &ORB_method_perform_work__V,
  &ORB_method_resolve_initial_references_INLRString__L_org_omg_CORBA_RObject_,
  &ORB_method_run__V,
  &ORB_method_shutdown_Z_V,
  &ORB_method_start__V,
  &ORB_method_string_to_object_INLRString__L_org_omg_CORBA_RObject_,
  &ORB_method_work_pending__Z,
  0
};


struct ORB_MetaInfoInitializer
{  ORB_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ORB::clazzInfo();
    ci->fields =  _ORB_fields;
    ci->methods =  _ORB_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ORB_MetaInfoInitializer ORB_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
SystemException_create_array(int length)
{
  return new ObjectArrayImpl<RSystemException>(length);
}

//static
::acdk::lang::RObject
SystemException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SystemException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SystemException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SystemException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SystemException_method_SystemException__LRSystemException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SystemException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SystemException_method_SystemException_INLRString__LRSystemException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SystemException((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SystemException_method_SystemException_INLRString_II_LRSystemException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SystemException((RString)args[0].getObjectVar(), args[1].getIntVar(), (CompletionStatus)args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SystemException_method_completed__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SystemException* This = dmi_cast<SystemException>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SystemException::completed();
    else
      ret = This->completed();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SystemException_method_getMessage__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SystemException* This = dmi_cast<SystemException>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SystemException::getMessage();
    else
        ret = (::acdk::lang::RObject)This->getMessage();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SystemException_method_minor__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SystemException* This = dmi_cast<SystemException>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SystemException::minor();
    else
      ret = This->minor();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SystemException_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SystemException* This = dmi_cast<SystemException>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SystemException::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SystemException_fields__completed_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SystemException* This = dmi_cast<SystemException>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->_completed), flags);
    else
      This->_completed = (CompletionStatus)var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SystemException_fields__minor_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SystemException* This = dmi_cast<SystemException>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_minor, flags);
    else
      This->_minor = var.getIntVar();
    return fieldinf;
  }
};


void ThrowException_SystemException(IN(::acdk::lang::RThrowable) ex)
{
  throw RSystemException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo SystemException_fields__completed = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_completed", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  SystemException_MetainfoWrapper::SystemException_fields__completed_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SystemException_fields__minor = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_minor", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  SystemException_MetainfoWrapper::SystemException_fields__minor_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _SystemException_fields[] = 
{
  &SystemException_fields__completed,
  &SystemException_fields__minor,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SystemException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SystemException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SystemException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_7_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SystemException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SystemException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SystemException_MetainfoWrapper::SystemException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SystemException_methods_SystemException__LRSystemException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SystemException_methods_SystemException__LRSystemException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SystemException_method_SystemException__LRSystemException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SystemException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SystemException::clazzInfo(), // return type
  "_0_SystemException", // alternative name of method
  -1, // altlabelHashCode
  SystemException_methods_SystemException__LRSystemException__args, // the arguments
  0, //arguments count
  SystemException_methods_SystemException__LRSystemException__exceptions, // the declared exceptions
  SystemException_MetainfoWrapper::SystemException_method_SystemException__LRSystemException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SystemException_methods_SystemException_INLRString__LRSystemException__arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SystemException_methods_SystemException_INLRString__LRSystemException__args[] = 
{
  &SystemException_methods_SystemException_INLRString__LRSystemException__arg_msg,
  0
};

::acdk::lang::dmi::ClazzInfo* SystemException_methods_SystemException_INLRString__LRSystemException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SystemException_method_SystemException_INLRString__LRSystemException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SystemException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SystemException::clazzInfo(), // return type
  "_1_SystemException", // alternative name of method
  -1, // altlabelHashCode
  SystemException_methods_SystemException_INLRString__LRSystemException__args, // the arguments
  0, //arguments count
  SystemException_methods_SystemException_INLRString__LRSystemException__exceptions, // the declared exceptions
  SystemException_MetainfoWrapper::SystemException_method_SystemException_INLRString__LRSystemException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SystemException_methods_SystemException_INLRString_II_LRSystemException__arg_reason = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "reason", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SystemException_methods_SystemException_INLRString_II_LRSystemException__arg_minor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SystemException_methods_SystemException_INLRString_II_LRSystemException__arg_completed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "completed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SystemException_methods_SystemException_INLRString_II_LRSystemException__args[] = 
{
  &SystemException_methods_SystemException_INLRString_II_LRSystemException__arg_reason,
  &SystemException_methods_SystemException_INLRString_II_LRSystemException__arg_minor,
  &SystemException_methods_SystemException_INLRString_II_LRSystemException__arg_completed,
  0
};

::acdk::lang::dmi::ClazzInfo* SystemException_methods_SystemException_INLRString_II_LRSystemException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SystemException_method_SystemException_INLRString_II_LRSystemException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SystemException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SystemException::clazzInfo(), // return type
  "_2_SystemException", // alternative name of method
  -1, // altlabelHashCode
  SystemException_methods_SystemException_INLRString_II_LRSystemException__args, // the arguments
  0, //arguments count
  SystemException_methods_SystemException_INLRString_II_LRSystemException__exceptions, // the declared exceptions
  SystemException_MetainfoWrapper::SystemException_method_SystemException_INLRString_II_LRSystemException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SystemException_methods_completed__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SystemException_methods_completed__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SystemException_method_completed__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "completed", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_completed", // alternative name of method
  -1, // altlabelHashCode
  SystemException_methods_completed__I_args, // the arguments
  0, //arguments count
  SystemException_methods_completed__I_exceptions, // the declared exceptions
  SystemException_MetainfoWrapper::SystemException_method_completed__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SystemException_methods_getMessage__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SystemException_methods_getMessage__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SystemException_method_getMessage__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMessage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_4_getMessage", // alternative name of method
  -1, // altlabelHashCode
  SystemException_methods_getMessage__LRString__args, // the arguments
  0, //arguments count
  SystemException_methods_getMessage__LRString__exceptions, // the declared exceptions
  SystemException_MetainfoWrapper::SystemException_method_getMessage__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SystemException_methods_minor__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SystemException_methods_minor__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SystemException_method_minor__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "minor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_minor", // alternative name of method
  -1, // altlabelHashCode
  SystemException_methods_minor__I_args, // the arguments
  0, //arguments count
  SystemException_methods_minor__I_exceptions, // the declared exceptions
  SystemException_MetainfoWrapper::SystemException_method_minor__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SystemException_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SystemException_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SystemException_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_toString", // alternative name of method
  -1, // altlabelHashCode
  SystemException_methods_toString__LRString__args, // the arguments
  0, //arguments count
  SystemException_methods_toString__LRString__exceptions, // the declared exceptions
  SystemException_MetainfoWrapper::SystemException_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SystemException_methods[] = 
{
  &SystemException_method_GetClass__L_acdk_lang_RClass_,
  &SystemException_method_SystemException__LRSystemException_,
  &SystemException_method_SystemException_INLRString__LRSystemException_,
  &SystemException_method_SystemException_INLRString_II_LRSystemException_,
  &SystemException_method_completed__I,
  &SystemException_method_getMessage__LRString_,
  &SystemException_method_minor__I,
  &SystemException_method_toString__LRString_,
  0
};


struct SystemException_MetaInfoInitializer
{  SystemException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SystemException::clazzInfo();
    ci->fields =  _SystemException_fields;
    ci->methods =  _SystemException_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SystemException_MetaInfoInitializer SystemException_MetaInfoInitializer_staticinstance__;


struct SystemException_clazzInfo_ClazzAttributesResInitializer14
{
  SystemException_clazzInfo_ClazzAttributesResInitializer14()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&SystemException_methods_SystemException_INLRString_II_LRSystemException__arg_completed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CompletionStatusMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)SystemException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_SystemException));
  }
};

SystemException_clazzInfo_ClazzAttributesResInitializer14 SystemException_clazzInfo_ClazzAttributesResInitializer14_instance;



} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
COMM_FAILURE_create_array(int length)
{
  return new ObjectArrayImpl<RCOMM_FAILURE>(length);
}

//static
::acdk::lang::RObject
COMM_FAILURE_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class COMM_FAILURE_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  COMM_FAILURE_method_COMM_FAILURE__LRCOMM_FAILURE__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new COMM_FAILURE();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  COMM_FAILURE_method_COMM_FAILURE_II_LRCOMM_FAILURE__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new COMM_FAILURE(args[0].getIntVar(), (CompletionStatus)args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  COMM_FAILURE_method_COMM_FAILURE_INLRString__LRCOMM_FAILURE__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new COMM_FAILURE((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  COMM_FAILURE_method_COMM_FAILURE_INLRString_II_LRCOMM_FAILURE__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new COMM_FAILURE((RString)args[0].getObjectVar(), args[1].getIntVar(), (CompletionStatus)args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  COMM_FAILURE_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)COMM_FAILURE::GetClass();
    return methinf;
  }
};


void ThrowException_COMM_FAILURE(IN(::acdk::lang::RThrowable) ex)
{
  throw RCOMM_FAILURE(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _COMM_FAILURE_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* COMM_FAILURE_methods_COMM_FAILURE__LRCOMM_FAILURE__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* COMM_FAILURE_methods_COMM_FAILURE__LRCOMM_FAILURE__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo COMM_FAILURE_method_COMM_FAILURE__LRCOMM_FAILURE_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "COMM_FAILURE", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  COMM_FAILURE::clazzInfo(), // return type
  "_0_COMM_FAILURE", // alternative name of method
  -1, // altlabelHashCode
  COMM_FAILURE_methods_COMM_FAILURE__LRCOMM_FAILURE__args, // the arguments
  0, //arguments count
  COMM_FAILURE_methods_COMM_FAILURE__LRCOMM_FAILURE__exceptions, // the declared exceptions
  COMM_FAILURE_MetainfoWrapper::COMM_FAILURE_method_COMM_FAILURE__LRCOMM_FAILURE__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo COMM_FAILURE_methods_COMM_FAILURE_II_LRCOMM_FAILURE__arg_minor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo COMM_FAILURE_methods_COMM_FAILURE_II_LRCOMM_FAILURE__arg_completed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "completed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* COMM_FAILURE_methods_COMM_FAILURE_II_LRCOMM_FAILURE__args[] = 
{
  &COMM_FAILURE_methods_COMM_FAILURE_II_LRCOMM_FAILURE__arg_minor,
  &COMM_FAILURE_methods_COMM_FAILURE_II_LRCOMM_FAILURE__arg_completed,
  0
};

::acdk::lang::dmi::ClazzInfo* COMM_FAILURE_methods_COMM_FAILURE_II_LRCOMM_FAILURE__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo COMM_FAILURE_method_COMM_FAILURE_II_LRCOMM_FAILURE_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "COMM_FAILURE", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  COMM_FAILURE::clazzInfo(), // return type
  "_1_COMM_FAILURE", // alternative name of method
  -1, // altlabelHashCode
  COMM_FAILURE_methods_COMM_FAILURE_II_LRCOMM_FAILURE__args, // the arguments
  0, //arguments count
  COMM_FAILURE_methods_COMM_FAILURE_II_LRCOMM_FAILURE__exceptions, // the declared exceptions
  COMM_FAILURE_MetainfoWrapper::COMM_FAILURE_method_COMM_FAILURE_II_LRCOMM_FAILURE__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo COMM_FAILURE_methods_COMM_FAILURE_INLRString__LRCOMM_FAILURE__arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* COMM_FAILURE_methods_COMM_FAILURE_INLRString__LRCOMM_FAILURE__args[] = 
{
  &COMM_FAILURE_methods_COMM_FAILURE_INLRString__LRCOMM_FAILURE__arg_msg,
  0
};

::acdk::lang::dmi::ClazzInfo* COMM_FAILURE_methods_COMM_FAILURE_INLRString__LRCOMM_FAILURE__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo COMM_FAILURE_method_COMM_FAILURE_INLRString__LRCOMM_FAILURE_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "COMM_FAILURE", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  COMM_FAILURE::clazzInfo(), // return type
  "_2_COMM_FAILURE", // alternative name of method
  -1, // altlabelHashCode
  COMM_FAILURE_methods_COMM_FAILURE_INLRString__LRCOMM_FAILURE__args, // the arguments
  0, //arguments count
  COMM_FAILURE_methods_COMM_FAILURE_INLRString__LRCOMM_FAILURE__exceptions, // the declared exceptions
  COMM_FAILURE_MetainfoWrapper::COMM_FAILURE_method_COMM_FAILURE_INLRString__LRCOMM_FAILURE__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo COMM_FAILURE_methods_COMM_FAILURE_INLRString_II_LRCOMM_FAILURE__arg_reason = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "reason", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo COMM_FAILURE_methods_COMM_FAILURE_INLRString_II_LRCOMM_FAILURE__arg_minor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo COMM_FAILURE_methods_COMM_FAILURE_INLRString_II_LRCOMM_FAILURE__arg_completed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "completed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* COMM_FAILURE_methods_COMM_FAILURE_INLRString_II_LRCOMM_FAILURE__args[] = 
{
  &COMM_FAILURE_methods_COMM_FAILURE_INLRString_II_LRCOMM_FAILURE__arg_reason,
  &COMM_FAILURE_methods_COMM_FAILURE_INLRString_II_LRCOMM_FAILURE__arg_minor,
  &COMM_FAILURE_methods_COMM_FAILURE_INLRString_II_LRCOMM_FAILURE__arg_completed,
  0
};

::acdk::lang::dmi::ClazzInfo* COMM_FAILURE_methods_COMM_FAILURE_INLRString_II_LRCOMM_FAILURE__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo COMM_FAILURE_method_COMM_FAILURE_INLRString_II_LRCOMM_FAILURE_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "COMM_FAILURE", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  COMM_FAILURE::clazzInfo(), // return type
  "_3_COMM_FAILURE", // alternative name of method
  -1, // altlabelHashCode
  COMM_FAILURE_methods_COMM_FAILURE_INLRString_II_LRCOMM_FAILURE__args, // the arguments
  0, //arguments count
  COMM_FAILURE_methods_COMM_FAILURE_INLRString_II_LRCOMM_FAILURE__exceptions, // the declared exceptions
  COMM_FAILURE_MetainfoWrapper::COMM_FAILURE_method_COMM_FAILURE_INLRString_II_LRCOMM_FAILURE__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* COMM_FAILURE_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* COMM_FAILURE_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo COMM_FAILURE_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  COMM_FAILURE_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  COMM_FAILURE_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  COMM_FAILURE_MetainfoWrapper::COMM_FAILURE_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _COMM_FAILURE_methods[] = 
{
  &COMM_FAILURE_method_COMM_FAILURE__LRCOMM_FAILURE_,
  &COMM_FAILURE_method_COMM_FAILURE_II_LRCOMM_FAILURE_,
  &COMM_FAILURE_method_COMM_FAILURE_INLRString__LRCOMM_FAILURE_,
  &COMM_FAILURE_method_COMM_FAILURE_INLRString_II_LRCOMM_FAILURE_,
  &COMM_FAILURE_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct COMM_FAILURE_MetaInfoInitializer
{  COMM_FAILURE_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = COMM_FAILURE::clazzInfo();
    ci->fields =  _COMM_FAILURE_fields;
    ci->methods =  _COMM_FAILURE_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
COMM_FAILURE_MetaInfoInitializer COMM_FAILURE_MetaInfoInitializer_staticinstance__;


struct COMM_FAILURE_clazzInfo_ClazzAttributesResInitializer15
{
  COMM_FAILURE_clazzInfo_ClazzAttributesResInitializer15()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&COMM_FAILURE_methods_COMM_FAILURE_II_LRCOMM_FAILURE__arg_completed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CompletionStatusMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&COMM_FAILURE_methods_COMM_FAILURE_INLRString_II_LRCOMM_FAILURE__arg_completed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CompletionStatusMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)COMM_FAILURE::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_COMM_FAILURE));
  }
};

COMM_FAILURE_clazzInfo_ClazzAttributesResInitializer15 COMM_FAILURE_clazzInfo_ClazzAttributesResInitializer15_instance;



} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
InvalidName_create_array(int length)
{
  return new ObjectArrayImpl<RInvalidName>(length);
}

//static
::acdk::lang::RObject
InvalidName_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class InvalidName_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InvalidName_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)InvalidName::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InvalidName_method_InvalidName__LRInvalidName__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new InvalidName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InvalidName_method_InvalidName_LRString__LRInvalidName__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new InvalidName((RString)args[0].getObjectVar());
    return methinf;
  }
};


void ThrowException_InvalidName(IN(::acdk::lang::RThrowable) ex)
{
  throw RInvalidName(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _InvalidName_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* InvalidName_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InvalidName_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InvalidName_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  InvalidName_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  InvalidName_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  InvalidName_MetainfoWrapper::InvalidName_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InvalidName_methods_InvalidName__LRInvalidName__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InvalidName_methods_InvalidName__LRInvalidName__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InvalidName_method_InvalidName__LRInvalidName_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "InvalidName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  InvalidName::clazzInfo(), // return type
  "_0_InvalidName", // alternative name of method
  -1, // altlabelHashCode
  InvalidName_methods_InvalidName__LRInvalidName__args, // the arguments
  0, //arguments count
  InvalidName_methods_InvalidName__LRInvalidName__exceptions, // the declared exceptions
  InvalidName_MetainfoWrapper::InvalidName_method_InvalidName__LRInvalidName__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo InvalidName_methods_InvalidName_LRString__LRInvalidName__arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* InvalidName_methods_InvalidName_LRString__LRInvalidName__args[] = 
{
  &InvalidName_methods_InvalidName_LRString__LRInvalidName__arg_msg,
  0
};

::acdk::lang::dmi::ClazzInfo* InvalidName_methods_InvalidName_LRString__LRInvalidName__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InvalidName_method_InvalidName_LRString__LRInvalidName_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "InvalidName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  InvalidName::clazzInfo(), // return type
  "_1_InvalidName", // alternative name of method
  -1, // altlabelHashCode
  InvalidName_methods_InvalidName_LRString__LRInvalidName__args, // the arguments
  0, //arguments count
  InvalidName_methods_InvalidName_LRString__LRInvalidName__exceptions, // the declared exceptions
  InvalidName_MetainfoWrapper::InvalidName_method_InvalidName_LRString__LRInvalidName__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _InvalidName_methods[] = 
{
  &InvalidName_method_GetClass__L_acdk_lang_RClass_,
  &InvalidName_method_InvalidName__LRInvalidName_,
  &InvalidName_method_InvalidName_LRString__LRInvalidName_,
  0
};


struct InvalidName_MetaInfoInitializer
{  InvalidName_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = InvalidName::clazzInfo();
    ci->fields =  _InvalidName_fields;
    ci->methods =  _InvalidName_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
InvalidName_MetaInfoInitializer InvalidName_MetaInfoInitializer_staticinstance__;


struct InvalidName_clazzInfo_ClazzAttributesResInitializer16
{
  InvalidName_clazzInfo_ClazzAttributesResInitializer16()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)InvalidName::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_InvalidName));
  }
};

InvalidName_clazzInfo_ClazzAttributesResInitializer16 InvalidName_clazzInfo_ClazzAttributesResInitializer16_instance;



} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
NO_IMPLEMENT_create_array(int length)
{
  return new ObjectArrayImpl<RNO_IMPLEMENT>(length);
}

//static
::acdk::lang::RObject
NO_IMPLEMENT_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class NO_IMPLEMENT_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NO_IMPLEMENT_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)NO_IMPLEMENT::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NO_IMPLEMENT_method_NO_IMPLEMENT__LRNO_IMPLEMENT__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NO_IMPLEMENT();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NO_IMPLEMENT_method_NO_IMPLEMENT_II_LRNO_IMPLEMENT__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NO_IMPLEMENT(args[0].getIntVar(), (CompletionStatus)args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NO_IMPLEMENT_method_NO_IMPLEMENT_INLRString__LRNO_IMPLEMENT__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NO_IMPLEMENT((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NO_IMPLEMENT_method_NO_IMPLEMENT_INLRString_II_LRNO_IMPLEMENT__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NO_IMPLEMENT((RString)args[0].getObjectVar(), args[1].getIntVar(), (CompletionStatus)args[2].getIntVar());
    return methinf;
  }
};


void ThrowException_NO_IMPLEMENT(IN(::acdk::lang::RThrowable) ex)
{
  throw RNO_IMPLEMENT(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _NO_IMPLEMENT_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* NO_IMPLEMENT_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NO_IMPLEMENT_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NO_IMPLEMENT_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  NO_IMPLEMENT_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  NO_IMPLEMENT_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  NO_IMPLEMENT_MetainfoWrapper::NO_IMPLEMENT_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NO_IMPLEMENT_methods_NO_IMPLEMENT__LRNO_IMPLEMENT__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NO_IMPLEMENT_methods_NO_IMPLEMENT__LRNO_IMPLEMENT__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NO_IMPLEMENT_method_NO_IMPLEMENT__LRNO_IMPLEMENT_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NO_IMPLEMENT", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NO_IMPLEMENT::clazzInfo(), // return type
  "_0_NO_IMPLEMENT", // alternative name of method
  -1, // altlabelHashCode
  NO_IMPLEMENT_methods_NO_IMPLEMENT__LRNO_IMPLEMENT__args, // the arguments
  0, //arguments count
  NO_IMPLEMENT_methods_NO_IMPLEMENT__LRNO_IMPLEMENT__exceptions, // the declared exceptions
  NO_IMPLEMENT_MetainfoWrapper::NO_IMPLEMENT_method_NO_IMPLEMENT__LRNO_IMPLEMENT__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NO_IMPLEMENT_methods_NO_IMPLEMENT_II_LRNO_IMPLEMENT__arg_minor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NO_IMPLEMENT_methods_NO_IMPLEMENT_II_LRNO_IMPLEMENT__arg_completed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "completed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NO_IMPLEMENT_methods_NO_IMPLEMENT_II_LRNO_IMPLEMENT__args[] = 
{
  &NO_IMPLEMENT_methods_NO_IMPLEMENT_II_LRNO_IMPLEMENT__arg_minor,
  &NO_IMPLEMENT_methods_NO_IMPLEMENT_II_LRNO_IMPLEMENT__arg_completed,
  0
};

::acdk::lang::dmi::ClazzInfo* NO_IMPLEMENT_methods_NO_IMPLEMENT_II_LRNO_IMPLEMENT__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NO_IMPLEMENT_method_NO_IMPLEMENT_II_LRNO_IMPLEMENT_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NO_IMPLEMENT", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NO_IMPLEMENT::clazzInfo(), // return type
  "_1_NO_IMPLEMENT", // alternative name of method
  -1, // altlabelHashCode
  NO_IMPLEMENT_methods_NO_IMPLEMENT_II_LRNO_IMPLEMENT__args, // the arguments
  0, //arguments count
  NO_IMPLEMENT_methods_NO_IMPLEMENT_II_LRNO_IMPLEMENT__exceptions, // the declared exceptions
  NO_IMPLEMENT_MetainfoWrapper::NO_IMPLEMENT_method_NO_IMPLEMENT_II_LRNO_IMPLEMENT__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NO_IMPLEMENT_methods_NO_IMPLEMENT_INLRString__LRNO_IMPLEMENT__arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NO_IMPLEMENT_methods_NO_IMPLEMENT_INLRString__LRNO_IMPLEMENT__args[] = 
{
  &NO_IMPLEMENT_methods_NO_IMPLEMENT_INLRString__LRNO_IMPLEMENT__arg_msg,
  0
};

::acdk::lang::dmi::ClazzInfo* NO_IMPLEMENT_methods_NO_IMPLEMENT_INLRString__LRNO_IMPLEMENT__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NO_IMPLEMENT_method_NO_IMPLEMENT_INLRString__LRNO_IMPLEMENT_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NO_IMPLEMENT", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NO_IMPLEMENT::clazzInfo(), // return type
  "_2_NO_IMPLEMENT", // alternative name of method
  -1, // altlabelHashCode
  NO_IMPLEMENT_methods_NO_IMPLEMENT_INLRString__LRNO_IMPLEMENT__args, // the arguments
  0, //arguments count
  NO_IMPLEMENT_methods_NO_IMPLEMENT_INLRString__LRNO_IMPLEMENT__exceptions, // the declared exceptions
  NO_IMPLEMENT_MetainfoWrapper::NO_IMPLEMENT_method_NO_IMPLEMENT_INLRString__LRNO_IMPLEMENT__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NO_IMPLEMENT_methods_NO_IMPLEMENT_INLRString_II_LRNO_IMPLEMENT__arg_reason = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "reason", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NO_IMPLEMENT_methods_NO_IMPLEMENT_INLRString_II_LRNO_IMPLEMENT__arg_minor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NO_IMPLEMENT_methods_NO_IMPLEMENT_INLRString_II_LRNO_IMPLEMENT__arg_completed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "completed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NO_IMPLEMENT_methods_NO_IMPLEMENT_INLRString_II_LRNO_IMPLEMENT__args[] = 
{
  &NO_IMPLEMENT_methods_NO_IMPLEMENT_INLRString_II_LRNO_IMPLEMENT__arg_reason,
  &NO_IMPLEMENT_methods_NO_IMPLEMENT_INLRString_II_LRNO_IMPLEMENT__arg_minor,
  &NO_IMPLEMENT_methods_NO_IMPLEMENT_INLRString_II_LRNO_IMPLEMENT__arg_completed,
  0
};

::acdk::lang::dmi::ClazzInfo* NO_IMPLEMENT_methods_NO_IMPLEMENT_INLRString_II_LRNO_IMPLEMENT__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NO_IMPLEMENT_method_NO_IMPLEMENT_INLRString_II_LRNO_IMPLEMENT_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NO_IMPLEMENT", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NO_IMPLEMENT::clazzInfo(), // return type
  "_3_NO_IMPLEMENT", // alternative name of method
  -1, // altlabelHashCode
  NO_IMPLEMENT_methods_NO_IMPLEMENT_INLRString_II_LRNO_IMPLEMENT__args, // the arguments
  0, //arguments count
  NO_IMPLEMENT_methods_NO_IMPLEMENT_INLRString_II_LRNO_IMPLEMENT__exceptions, // the declared exceptions
  NO_IMPLEMENT_MetainfoWrapper::NO_IMPLEMENT_method_NO_IMPLEMENT_INLRString_II_LRNO_IMPLEMENT__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _NO_IMPLEMENT_methods[] = 
{
  &NO_IMPLEMENT_method_GetClass__L_acdk_lang_RClass_,
  &NO_IMPLEMENT_method_NO_IMPLEMENT__LRNO_IMPLEMENT_,
  &NO_IMPLEMENT_method_NO_IMPLEMENT_II_LRNO_IMPLEMENT_,
  &NO_IMPLEMENT_method_NO_IMPLEMENT_INLRString__LRNO_IMPLEMENT_,
  &NO_IMPLEMENT_method_NO_IMPLEMENT_INLRString_II_LRNO_IMPLEMENT_,
  0
};


struct NO_IMPLEMENT_MetaInfoInitializer
{  NO_IMPLEMENT_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = NO_IMPLEMENT::clazzInfo();
    ci->fields =  _NO_IMPLEMENT_fields;
    ci->methods =  _NO_IMPLEMENT_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
NO_IMPLEMENT_MetaInfoInitializer NO_IMPLEMENT_MetaInfoInitializer_staticinstance__;


struct NO_IMPLEMENT_clazzInfo_ClazzAttributesResInitializer17
{
  NO_IMPLEMENT_clazzInfo_ClazzAttributesResInitializer17()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&NO_IMPLEMENT_methods_NO_IMPLEMENT_II_LRNO_IMPLEMENT__arg_completed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CompletionStatusMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&NO_IMPLEMENT_methods_NO_IMPLEMENT_INLRString_II_LRNO_IMPLEMENT__arg_completed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CompletionStatusMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)NO_IMPLEMENT::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_NO_IMPLEMENT));
  }
};

NO_IMPLEMENT_clazzInfo_ClazzAttributesResInitializer17 NO_IMPLEMENT_clazzInfo_ClazzAttributesResInitializer17_instance;



} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
BAD_OPERATION_create_array(int length)
{
  return new ObjectArrayImpl<RBAD_OPERATION>(length);
}

//static
::acdk::lang::RObject
BAD_OPERATION_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class BAD_OPERATION_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BAD_OPERATION_method_BAD_OPERATION__LRBAD_OPERATION__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new BAD_OPERATION();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BAD_OPERATION_method_BAD_OPERATION_II_LRBAD_OPERATION__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new BAD_OPERATION(args[0].getIntVar(), (CompletionStatus)args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BAD_OPERATION_method_BAD_OPERATION_INLRString__LRBAD_OPERATION__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new BAD_OPERATION((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BAD_OPERATION_method_BAD_OPERATION_INLRString_II_LRBAD_OPERATION__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new BAD_OPERATION((RString)args[0].getObjectVar(), args[1].getIntVar(), (CompletionStatus)args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BAD_OPERATION_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)BAD_OPERATION::GetClass();
    return methinf;
  }
};


void ThrowException_BAD_OPERATION(IN(::acdk::lang::RThrowable) ex)
{
  throw RBAD_OPERATION(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _BAD_OPERATION_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* BAD_OPERATION_methods_BAD_OPERATION__LRBAD_OPERATION__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BAD_OPERATION_methods_BAD_OPERATION__LRBAD_OPERATION__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BAD_OPERATION_method_BAD_OPERATION__LRBAD_OPERATION_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "BAD_OPERATION", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  BAD_OPERATION::clazzInfo(), // return type
  "_0_BAD_OPERATION", // alternative name of method
  -1, // altlabelHashCode
  BAD_OPERATION_methods_BAD_OPERATION__LRBAD_OPERATION__args, // the arguments
  0, //arguments count
  BAD_OPERATION_methods_BAD_OPERATION__LRBAD_OPERATION__exceptions, // the declared exceptions
  BAD_OPERATION_MetainfoWrapper::BAD_OPERATION_method_BAD_OPERATION__LRBAD_OPERATION__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BAD_OPERATION_methods_BAD_OPERATION_II_LRBAD_OPERATION__arg_minor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BAD_OPERATION_methods_BAD_OPERATION_II_LRBAD_OPERATION__arg_completed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "completed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BAD_OPERATION_methods_BAD_OPERATION_II_LRBAD_OPERATION__args[] = 
{
  &BAD_OPERATION_methods_BAD_OPERATION_II_LRBAD_OPERATION__arg_minor,
  &BAD_OPERATION_methods_BAD_OPERATION_II_LRBAD_OPERATION__arg_completed,
  0
};

::acdk::lang::dmi::ClazzInfo* BAD_OPERATION_methods_BAD_OPERATION_II_LRBAD_OPERATION__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BAD_OPERATION_method_BAD_OPERATION_II_LRBAD_OPERATION_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "BAD_OPERATION", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  BAD_OPERATION::clazzInfo(), // return type
  "_1_BAD_OPERATION", // alternative name of method
  -1, // altlabelHashCode
  BAD_OPERATION_methods_BAD_OPERATION_II_LRBAD_OPERATION__args, // the arguments
  0, //arguments count
  BAD_OPERATION_methods_BAD_OPERATION_II_LRBAD_OPERATION__exceptions, // the declared exceptions
  BAD_OPERATION_MetainfoWrapper::BAD_OPERATION_method_BAD_OPERATION_II_LRBAD_OPERATION__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BAD_OPERATION_methods_BAD_OPERATION_INLRString__LRBAD_OPERATION__arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BAD_OPERATION_methods_BAD_OPERATION_INLRString__LRBAD_OPERATION__args[] = 
{
  &BAD_OPERATION_methods_BAD_OPERATION_INLRString__LRBAD_OPERATION__arg_msg,
  0
};

::acdk::lang::dmi::ClazzInfo* BAD_OPERATION_methods_BAD_OPERATION_INLRString__LRBAD_OPERATION__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BAD_OPERATION_method_BAD_OPERATION_INLRString__LRBAD_OPERATION_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "BAD_OPERATION", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  BAD_OPERATION::clazzInfo(), // return type
  "_2_BAD_OPERATION", // alternative name of method
  -1, // altlabelHashCode
  BAD_OPERATION_methods_BAD_OPERATION_INLRString__LRBAD_OPERATION__args, // the arguments
  0, //arguments count
  BAD_OPERATION_methods_BAD_OPERATION_INLRString__LRBAD_OPERATION__exceptions, // the declared exceptions
  BAD_OPERATION_MetainfoWrapper::BAD_OPERATION_method_BAD_OPERATION_INLRString__LRBAD_OPERATION__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BAD_OPERATION_methods_BAD_OPERATION_INLRString_II_LRBAD_OPERATION__arg_reason = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "reason", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BAD_OPERATION_methods_BAD_OPERATION_INLRString_II_LRBAD_OPERATION__arg_minor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BAD_OPERATION_methods_BAD_OPERATION_INLRString_II_LRBAD_OPERATION__arg_completed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "completed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BAD_OPERATION_methods_BAD_OPERATION_INLRString_II_LRBAD_OPERATION__args[] = 
{
  &BAD_OPERATION_methods_BAD_OPERATION_INLRString_II_LRBAD_OPERATION__arg_reason,
  &BAD_OPERATION_methods_BAD_OPERATION_INLRString_II_LRBAD_OPERATION__arg_minor,
  &BAD_OPERATION_methods_BAD_OPERATION_INLRString_II_LRBAD_OPERATION__arg_completed,
  0
};

::acdk::lang::dmi::ClazzInfo* BAD_OPERATION_methods_BAD_OPERATION_INLRString_II_LRBAD_OPERATION__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BAD_OPERATION_method_BAD_OPERATION_INLRString_II_LRBAD_OPERATION_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "BAD_OPERATION", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  BAD_OPERATION::clazzInfo(), // return type
  "_3_BAD_OPERATION", // alternative name of method
  -1, // altlabelHashCode
  BAD_OPERATION_methods_BAD_OPERATION_INLRString_II_LRBAD_OPERATION__args, // the arguments
  0, //arguments count
  BAD_OPERATION_methods_BAD_OPERATION_INLRString_II_LRBAD_OPERATION__exceptions, // the declared exceptions
  BAD_OPERATION_MetainfoWrapper::BAD_OPERATION_method_BAD_OPERATION_INLRString_II_LRBAD_OPERATION__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BAD_OPERATION_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BAD_OPERATION_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BAD_OPERATION_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  BAD_OPERATION_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  BAD_OPERATION_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  BAD_OPERATION_MetainfoWrapper::BAD_OPERATION_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _BAD_OPERATION_methods[] = 
{
  &BAD_OPERATION_method_BAD_OPERATION__LRBAD_OPERATION_,
  &BAD_OPERATION_method_BAD_OPERATION_II_LRBAD_OPERATION_,
  &BAD_OPERATION_method_BAD_OPERATION_INLRString__LRBAD_OPERATION_,
  &BAD_OPERATION_method_BAD_OPERATION_INLRString_II_LRBAD_OPERATION_,
  &BAD_OPERATION_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct BAD_OPERATION_MetaInfoInitializer
{  BAD_OPERATION_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = BAD_OPERATION::clazzInfo();
    ci->fields =  _BAD_OPERATION_fields;
    ci->methods =  _BAD_OPERATION_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
BAD_OPERATION_MetaInfoInitializer BAD_OPERATION_MetaInfoInitializer_staticinstance__;


struct BAD_OPERATION_clazzInfo_ClazzAttributesResInitializer18
{
  BAD_OPERATION_clazzInfo_ClazzAttributesResInitializer18()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&BAD_OPERATION_methods_BAD_OPERATION_II_LRBAD_OPERATION__arg_completed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CompletionStatusMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&BAD_OPERATION_methods_BAD_OPERATION_INLRString_II_LRBAD_OPERATION__arg_completed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CompletionStatusMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)BAD_OPERATION::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_BAD_OPERATION));
  }
};

BAD_OPERATION_clazzInfo_ClazzAttributesResInitializer18 BAD_OPERATION_clazzInfo_ClazzAttributesResInitializer18_instance;



} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
UNKNOWN_create_array(int length)
{
  return new ObjectArrayImpl<RUNKNOWN>(length);
}

//static
::acdk::lang::RObject
UNKNOWN_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class UNKNOWN_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UNKNOWN_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)UNKNOWN::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UNKNOWN_method_UNKNOWN__LRUNKNOWN__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new UNKNOWN();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UNKNOWN_method_UNKNOWN_II_LRUNKNOWN__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new UNKNOWN(args[0].getIntVar(), (CompletionStatus)args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UNKNOWN_method_UNKNOWN_INLRString__LRUNKNOWN__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new UNKNOWN((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UNKNOWN_method_UNKNOWN_INLRString_II_LRUNKNOWN__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new UNKNOWN((RString)args[0].getObjectVar(), args[1].getIntVar(), (CompletionStatus)args[2].getIntVar());
    return methinf;
  }
};


void ThrowException_UNKNOWN(IN(::acdk::lang::RThrowable) ex)
{
  throw RUNKNOWN(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _UNKNOWN_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* UNKNOWN_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* UNKNOWN_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UNKNOWN_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  UNKNOWN_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  UNKNOWN_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  UNKNOWN_MetainfoWrapper::UNKNOWN_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* UNKNOWN_methods_UNKNOWN__LRUNKNOWN__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* UNKNOWN_methods_UNKNOWN__LRUNKNOWN__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UNKNOWN_method_UNKNOWN__LRUNKNOWN_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "UNKNOWN", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  UNKNOWN::clazzInfo(), // return type
  "_0_UNKNOWN", // alternative name of method
  -1, // altlabelHashCode
  UNKNOWN_methods_UNKNOWN__LRUNKNOWN__args, // the arguments
  0, //arguments count
  UNKNOWN_methods_UNKNOWN__LRUNKNOWN__exceptions, // the declared exceptions
  UNKNOWN_MetainfoWrapper::UNKNOWN_method_UNKNOWN__LRUNKNOWN__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UNKNOWN_methods_UNKNOWN_II_LRUNKNOWN__arg_minor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo UNKNOWN_methods_UNKNOWN_II_LRUNKNOWN__arg_completed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "completed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UNKNOWN_methods_UNKNOWN_II_LRUNKNOWN__args[] = 
{
  &UNKNOWN_methods_UNKNOWN_II_LRUNKNOWN__arg_minor,
  &UNKNOWN_methods_UNKNOWN_II_LRUNKNOWN__arg_completed,
  0
};

::acdk::lang::dmi::ClazzInfo* UNKNOWN_methods_UNKNOWN_II_LRUNKNOWN__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UNKNOWN_method_UNKNOWN_II_LRUNKNOWN_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "UNKNOWN", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  UNKNOWN::clazzInfo(), // return type
  "_1_UNKNOWN", // alternative name of method
  -1, // altlabelHashCode
  UNKNOWN_methods_UNKNOWN_II_LRUNKNOWN__args, // the arguments
  0, //arguments count
  UNKNOWN_methods_UNKNOWN_II_LRUNKNOWN__exceptions, // the declared exceptions
  UNKNOWN_MetainfoWrapper::UNKNOWN_method_UNKNOWN_II_LRUNKNOWN__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UNKNOWN_methods_UNKNOWN_INLRString__LRUNKNOWN__arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UNKNOWN_methods_UNKNOWN_INLRString__LRUNKNOWN__args[] = 
{
  &UNKNOWN_methods_UNKNOWN_INLRString__LRUNKNOWN__arg_msg,
  0
};

::acdk::lang::dmi::ClazzInfo* UNKNOWN_methods_UNKNOWN_INLRString__LRUNKNOWN__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UNKNOWN_method_UNKNOWN_INLRString__LRUNKNOWN_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "UNKNOWN", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  UNKNOWN::clazzInfo(), // return type
  "_2_UNKNOWN", // alternative name of method
  -1, // altlabelHashCode
  UNKNOWN_methods_UNKNOWN_INLRString__LRUNKNOWN__args, // the arguments
  0, //arguments count
  UNKNOWN_methods_UNKNOWN_INLRString__LRUNKNOWN__exceptions, // the declared exceptions
  UNKNOWN_MetainfoWrapper::UNKNOWN_method_UNKNOWN_INLRString__LRUNKNOWN__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UNKNOWN_methods_UNKNOWN_INLRString_II_LRUNKNOWN__arg_reason = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "reason", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo UNKNOWN_methods_UNKNOWN_INLRString_II_LRUNKNOWN__arg_minor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo UNKNOWN_methods_UNKNOWN_INLRString_II_LRUNKNOWN__arg_completed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "completed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UNKNOWN_methods_UNKNOWN_INLRString_II_LRUNKNOWN__args[] = 
{
  &UNKNOWN_methods_UNKNOWN_INLRString_II_LRUNKNOWN__arg_reason,
  &UNKNOWN_methods_UNKNOWN_INLRString_II_LRUNKNOWN__arg_minor,
  &UNKNOWN_methods_UNKNOWN_INLRString_II_LRUNKNOWN__arg_completed,
  0
};

::acdk::lang::dmi::ClazzInfo* UNKNOWN_methods_UNKNOWN_INLRString_II_LRUNKNOWN__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UNKNOWN_method_UNKNOWN_INLRString_II_LRUNKNOWN_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "UNKNOWN", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  UNKNOWN::clazzInfo(), // return type
  "_3_UNKNOWN", // alternative name of method
  -1, // altlabelHashCode
  UNKNOWN_methods_UNKNOWN_INLRString_II_LRUNKNOWN__args, // the arguments
  0, //arguments count
  UNKNOWN_methods_UNKNOWN_INLRString_II_LRUNKNOWN__exceptions, // the declared exceptions
  UNKNOWN_MetainfoWrapper::UNKNOWN_method_UNKNOWN_INLRString_II_LRUNKNOWN__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _UNKNOWN_methods[] = 
{
  &UNKNOWN_method_GetClass__L_acdk_lang_RClass_,
  &UNKNOWN_method_UNKNOWN__LRUNKNOWN_,
  &UNKNOWN_method_UNKNOWN_II_LRUNKNOWN_,
  &UNKNOWN_method_UNKNOWN_INLRString__LRUNKNOWN_,
  &UNKNOWN_method_UNKNOWN_INLRString_II_LRUNKNOWN_,
  0
};


struct UNKNOWN_MetaInfoInitializer
{  UNKNOWN_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = UNKNOWN::clazzInfo();
    ci->fields =  _UNKNOWN_fields;
    ci->methods =  _UNKNOWN_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
UNKNOWN_MetaInfoInitializer UNKNOWN_MetaInfoInitializer_staticinstance__;


struct UNKNOWN_clazzInfo_ClazzAttributesResInitializer19
{
  UNKNOWN_clazzInfo_ClazzAttributesResInitializer19()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&UNKNOWN_methods_UNKNOWN_II_LRUNKNOWN__arg_completed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CompletionStatusMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&UNKNOWN_methods_UNKNOWN_INLRString_II_LRUNKNOWN__arg_completed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CompletionStatusMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)UNKNOWN::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_UNKNOWN));
  }
};

UNKNOWN_clazzInfo_ClazzAttributesResInitializer19 UNKNOWN_clazzInfo_ClazzAttributesResInitializer19_instance;



} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
MARSHAL_create_array(int length)
{
  return new ObjectArrayImpl<RMARSHAL>(length);
}

//static
::acdk::lang::RObject
MARSHAL_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class MARSHAL_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MARSHAL_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)MARSHAL::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MARSHAL_method_MARSHAL__LRMARSHAL__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new MARSHAL();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MARSHAL_method_MARSHAL_II_LRMARSHAL__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new MARSHAL(args[0].getIntVar(), (CompletionStatus)args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MARSHAL_method_MARSHAL_INLRString__LRMARSHAL__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new MARSHAL((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MARSHAL_method_MARSHAL_INLRString_II_LRMARSHAL__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new MARSHAL((RString)args[0].getObjectVar(), args[1].getIntVar(), (CompletionStatus)args[2].getIntVar());
    return methinf;
  }
};


void ThrowException_MARSHAL(IN(::acdk::lang::RThrowable) ex)
{
  throw RMARSHAL(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _MARSHAL_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* MARSHAL_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MARSHAL_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MARSHAL_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  MARSHAL_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  MARSHAL_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  MARSHAL_MetainfoWrapper::MARSHAL_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MARSHAL_methods_MARSHAL__LRMARSHAL__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MARSHAL_methods_MARSHAL__LRMARSHAL__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MARSHAL_method_MARSHAL__LRMARSHAL_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "MARSHAL", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  MARSHAL::clazzInfo(), // return type
  "_0_MARSHAL", // alternative name of method
  -1, // altlabelHashCode
  MARSHAL_methods_MARSHAL__LRMARSHAL__args, // the arguments
  0, //arguments count
  MARSHAL_methods_MARSHAL__LRMARSHAL__exceptions, // the declared exceptions
  MARSHAL_MetainfoWrapper::MARSHAL_method_MARSHAL__LRMARSHAL__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MARSHAL_methods_MARSHAL_II_LRMARSHAL__arg_minor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MARSHAL_methods_MARSHAL_II_LRMARSHAL__arg_completed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "completed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MARSHAL_methods_MARSHAL_II_LRMARSHAL__args[] = 
{
  &MARSHAL_methods_MARSHAL_II_LRMARSHAL__arg_minor,
  &MARSHAL_methods_MARSHAL_II_LRMARSHAL__arg_completed,
  0
};

::acdk::lang::dmi::ClazzInfo* MARSHAL_methods_MARSHAL_II_LRMARSHAL__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MARSHAL_method_MARSHAL_II_LRMARSHAL_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "MARSHAL", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  MARSHAL::clazzInfo(), // return type
  "_1_MARSHAL", // alternative name of method
  -1, // altlabelHashCode
  MARSHAL_methods_MARSHAL_II_LRMARSHAL__args, // the arguments
  0, //arguments count
  MARSHAL_methods_MARSHAL_II_LRMARSHAL__exceptions, // the declared exceptions
  MARSHAL_MetainfoWrapper::MARSHAL_method_MARSHAL_II_LRMARSHAL__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MARSHAL_methods_MARSHAL_INLRString__LRMARSHAL__arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MARSHAL_methods_MARSHAL_INLRString__LRMARSHAL__args[] = 
{
  &MARSHAL_methods_MARSHAL_INLRString__LRMARSHAL__arg_msg,
  0
};

::acdk::lang::dmi::ClazzInfo* MARSHAL_methods_MARSHAL_INLRString__LRMARSHAL__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MARSHAL_method_MARSHAL_INLRString__LRMARSHAL_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "MARSHAL", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  MARSHAL::clazzInfo(), // return type
  "_2_MARSHAL", // alternative name of method
  -1, // altlabelHashCode
  MARSHAL_methods_MARSHAL_INLRString__LRMARSHAL__args, // the arguments
  0, //arguments count
  MARSHAL_methods_MARSHAL_INLRString__LRMARSHAL__exceptions, // the declared exceptions
  MARSHAL_MetainfoWrapper::MARSHAL_method_MARSHAL_INLRString__LRMARSHAL__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MARSHAL_methods_MARSHAL_INLRString_II_LRMARSHAL__arg_reason = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "reason", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MARSHAL_methods_MARSHAL_INLRString_II_LRMARSHAL__arg_minor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MARSHAL_methods_MARSHAL_INLRString_II_LRMARSHAL__arg_completed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "completed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MARSHAL_methods_MARSHAL_INLRString_II_LRMARSHAL__args[] = 
{
  &MARSHAL_methods_MARSHAL_INLRString_II_LRMARSHAL__arg_reason,
  &MARSHAL_methods_MARSHAL_INLRString_II_LRMARSHAL__arg_minor,
  &MARSHAL_methods_MARSHAL_INLRString_II_LRMARSHAL__arg_completed,
  0
};

::acdk::lang::dmi::ClazzInfo* MARSHAL_methods_MARSHAL_INLRString_II_LRMARSHAL__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MARSHAL_method_MARSHAL_INLRString_II_LRMARSHAL_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "MARSHAL", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  MARSHAL::clazzInfo(), // return type
  "_3_MARSHAL", // alternative name of method
  -1, // altlabelHashCode
  MARSHAL_methods_MARSHAL_INLRString_II_LRMARSHAL__args, // the arguments
  0, //arguments count
  MARSHAL_methods_MARSHAL_INLRString_II_LRMARSHAL__exceptions, // the declared exceptions
  MARSHAL_MetainfoWrapper::MARSHAL_method_MARSHAL_INLRString_II_LRMARSHAL__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _MARSHAL_methods[] = 
{
  &MARSHAL_method_GetClass__L_acdk_lang_RClass_,
  &MARSHAL_method_MARSHAL__LRMARSHAL_,
  &MARSHAL_method_MARSHAL_II_LRMARSHAL_,
  &MARSHAL_method_MARSHAL_INLRString__LRMARSHAL_,
  &MARSHAL_method_MARSHAL_INLRString_II_LRMARSHAL_,
  0
};


struct MARSHAL_MetaInfoInitializer
{  MARSHAL_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = MARSHAL::clazzInfo();
    ci->fields =  _MARSHAL_fields;
    ci->methods =  _MARSHAL_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
MARSHAL_MetaInfoInitializer MARSHAL_MetaInfoInitializer_staticinstance__;


struct MARSHAL_clazzInfo_ClazzAttributesResInitializer20
{
  MARSHAL_clazzInfo_ClazzAttributesResInitializer20()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&MARSHAL_methods_MARSHAL_II_LRMARSHAL__arg_completed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CompletionStatusMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&MARSHAL_methods_MARSHAL_INLRString_II_LRMARSHAL__arg_completed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CompletionStatusMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)MARSHAL::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_MARSHAL));
  }
};

MARSHAL_clazzInfo_ClazzAttributesResInitializer20 MARSHAL_clazzInfo_ClazzAttributesResInitializer20_instance;



} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
BAD_CONTEXT_create_array(int length)
{
  return new ObjectArrayImpl<RBAD_CONTEXT>(length);
}

//static
::acdk::lang::RObject
BAD_CONTEXT_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class BAD_CONTEXT_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BAD_CONTEXT_method_BAD_CONTEXT__LRBAD_CONTEXT__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new BAD_CONTEXT();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BAD_CONTEXT_method_BAD_CONTEXT_II_LRBAD_CONTEXT__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new BAD_CONTEXT(args[0].getIntVar(), (CompletionStatus)args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BAD_CONTEXT_method_BAD_CONTEXT_INLRString__LRBAD_CONTEXT__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new BAD_CONTEXT((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BAD_CONTEXT_method_BAD_CONTEXT_INLRString_II_LRBAD_CONTEXT__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new BAD_CONTEXT((RString)args[0].getObjectVar(), args[1].getIntVar(), (CompletionStatus)args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BAD_CONTEXT_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)BAD_CONTEXT::GetClass();
    return methinf;
  }
};


void ThrowException_BAD_CONTEXT(IN(::acdk::lang::RThrowable) ex)
{
  throw RBAD_CONTEXT(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _BAD_CONTEXT_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* BAD_CONTEXT_methods_BAD_CONTEXT__LRBAD_CONTEXT__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BAD_CONTEXT_methods_BAD_CONTEXT__LRBAD_CONTEXT__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BAD_CONTEXT_method_BAD_CONTEXT__LRBAD_CONTEXT_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "BAD_CONTEXT", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  BAD_CONTEXT::clazzInfo(), // return type
  "_0_BAD_CONTEXT", // alternative name of method
  -1, // altlabelHashCode
  BAD_CONTEXT_methods_BAD_CONTEXT__LRBAD_CONTEXT__args, // the arguments
  0, //arguments count
  BAD_CONTEXT_methods_BAD_CONTEXT__LRBAD_CONTEXT__exceptions, // the declared exceptions
  BAD_CONTEXT_MetainfoWrapper::BAD_CONTEXT_method_BAD_CONTEXT__LRBAD_CONTEXT__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BAD_CONTEXT_methods_BAD_CONTEXT_II_LRBAD_CONTEXT__arg_minor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BAD_CONTEXT_methods_BAD_CONTEXT_II_LRBAD_CONTEXT__arg_completed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "completed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BAD_CONTEXT_methods_BAD_CONTEXT_II_LRBAD_CONTEXT__args[] = 
{
  &BAD_CONTEXT_methods_BAD_CONTEXT_II_LRBAD_CONTEXT__arg_minor,
  &BAD_CONTEXT_methods_BAD_CONTEXT_II_LRBAD_CONTEXT__arg_completed,
  0
};

::acdk::lang::dmi::ClazzInfo* BAD_CONTEXT_methods_BAD_CONTEXT_II_LRBAD_CONTEXT__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BAD_CONTEXT_method_BAD_CONTEXT_II_LRBAD_CONTEXT_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "BAD_CONTEXT", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  BAD_CONTEXT::clazzInfo(), // return type
  "_1_BAD_CONTEXT", // alternative name of method
  -1, // altlabelHashCode
  BAD_CONTEXT_methods_BAD_CONTEXT_II_LRBAD_CONTEXT__args, // the arguments
  0, //arguments count
  BAD_CONTEXT_methods_BAD_CONTEXT_II_LRBAD_CONTEXT__exceptions, // the declared exceptions
  BAD_CONTEXT_MetainfoWrapper::BAD_CONTEXT_method_BAD_CONTEXT_II_LRBAD_CONTEXT__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BAD_CONTEXT_methods_BAD_CONTEXT_INLRString__LRBAD_CONTEXT__arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BAD_CONTEXT_methods_BAD_CONTEXT_INLRString__LRBAD_CONTEXT__args[] = 
{
  &BAD_CONTEXT_methods_BAD_CONTEXT_INLRString__LRBAD_CONTEXT__arg_msg,
  0
};

::acdk::lang::dmi::ClazzInfo* BAD_CONTEXT_methods_BAD_CONTEXT_INLRString__LRBAD_CONTEXT__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BAD_CONTEXT_method_BAD_CONTEXT_INLRString__LRBAD_CONTEXT_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "BAD_CONTEXT", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  BAD_CONTEXT::clazzInfo(), // return type
  "_2_BAD_CONTEXT", // alternative name of method
  -1, // altlabelHashCode
  BAD_CONTEXT_methods_BAD_CONTEXT_INLRString__LRBAD_CONTEXT__args, // the arguments
  0, //arguments count
  BAD_CONTEXT_methods_BAD_CONTEXT_INLRString__LRBAD_CONTEXT__exceptions, // the declared exceptions
  BAD_CONTEXT_MetainfoWrapper::BAD_CONTEXT_method_BAD_CONTEXT_INLRString__LRBAD_CONTEXT__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BAD_CONTEXT_methods_BAD_CONTEXT_INLRString_II_LRBAD_CONTEXT__arg_reason = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "reason", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BAD_CONTEXT_methods_BAD_CONTEXT_INLRString_II_LRBAD_CONTEXT__arg_minor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BAD_CONTEXT_methods_BAD_CONTEXT_INLRString_II_LRBAD_CONTEXT__arg_completed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "completed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BAD_CONTEXT_methods_BAD_CONTEXT_INLRString_II_LRBAD_CONTEXT__args[] = 
{
  &BAD_CONTEXT_methods_BAD_CONTEXT_INLRString_II_LRBAD_CONTEXT__arg_reason,
  &BAD_CONTEXT_methods_BAD_CONTEXT_INLRString_II_LRBAD_CONTEXT__arg_minor,
  &BAD_CONTEXT_methods_BAD_CONTEXT_INLRString_II_LRBAD_CONTEXT__arg_completed,
  0
};

::acdk::lang::dmi::ClazzInfo* BAD_CONTEXT_methods_BAD_CONTEXT_INLRString_II_LRBAD_CONTEXT__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BAD_CONTEXT_method_BAD_CONTEXT_INLRString_II_LRBAD_CONTEXT_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "BAD_CONTEXT", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  BAD_CONTEXT::clazzInfo(), // return type
  "_3_BAD_CONTEXT", // alternative name of method
  -1, // altlabelHashCode
  BAD_CONTEXT_methods_BAD_CONTEXT_INLRString_II_LRBAD_CONTEXT__args, // the arguments
  0, //arguments count
  BAD_CONTEXT_methods_BAD_CONTEXT_INLRString_II_LRBAD_CONTEXT__exceptions, // the declared exceptions
  BAD_CONTEXT_MetainfoWrapper::BAD_CONTEXT_method_BAD_CONTEXT_INLRString_II_LRBAD_CONTEXT__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BAD_CONTEXT_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BAD_CONTEXT_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BAD_CONTEXT_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  BAD_CONTEXT_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  BAD_CONTEXT_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  BAD_CONTEXT_MetainfoWrapper::BAD_CONTEXT_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _BAD_CONTEXT_methods[] = 
{
  &BAD_CONTEXT_method_BAD_CONTEXT__LRBAD_CONTEXT_,
  &BAD_CONTEXT_method_BAD_CONTEXT_II_LRBAD_CONTEXT_,
  &BAD_CONTEXT_method_BAD_CONTEXT_INLRString__LRBAD_CONTEXT_,
  &BAD_CONTEXT_method_BAD_CONTEXT_INLRString_II_LRBAD_CONTEXT_,
  &BAD_CONTEXT_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct BAD_CONTEXT_MetaInfoInitializer
{  BAD_CONTEXT_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = BAD_CONTEXT::clazzInfo();
    ci->fields =  _BAD_CONTEXT_fields;
    ci->methods =  _BAD_CONTEXT_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
BAD_CONTEXT_MetaInfoInitializer BAD_CONTEXT_MetaInfoInitializer_staticinstance__;


struct BAD_CONTEXT_clazzInfo_ClazzAttributesResInitializer21
{
  BAD_CONTEXT_clazzInfo_ClazzAttributesResInitializer21()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&BAD_CONTEXT_methods_BAD_CONTEXT_II_LRBAD_CONTEXT__arg_completed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CompletionStatusMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&BAD_CONTEXT_methods_BAD_CONTEXT_INLRString_II_LRBAD_CONTEXT__arg_completed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CompletionStatusMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)BAD_CONTEXT::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_BAD_CONTEXT));
  }
};

BAD_CONTEXT_clazzInfo_ClazzAttributesResInitializer21 BAD_CONTEXT_clazzInfo_ClazzAttributesResInitializer21_instance;



} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
NO_MEMORY_create_array(int length)
{
  return new ObjectArrayImpl<RNO_MEMORY>(length);
}

//static
::acdk::lang::RObject
NO_MEMORY_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class NO_MEMORY_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NO_MEMORY_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)NO_MEMORY::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NO_MEMORY_method_NO_MEMORY__LRNO_MEMORY__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NO_MEMORY();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NO_MEMORY_method_NO_MEMORY_II_LRNO_MEMORY__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NO_MEMORY(args[0].getIntVar(), (CompletionStatus)args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NO_MEMORY_method_NO_MEMORY_INLRString__LRNO_MEMORY__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NO_MEMORY((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NO_MEMORY_method_NO_MEMORY_INLRString_II_LRNO_MEMORY__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NO_MEMORY((RString)args[0].getObjectVar(), args[1].getIntVar(), (CompletionStatus)args[2].getIntVar());
    return methinf;
  }
};


void ThrowException_NO_MEMORY(IN(::acdk::lang::RThrowable) ex)
{
  throw RNO_MEMORY(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _NO_MEMORY_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* NO_MEMORY_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NO_MEMORY_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NO_MEMORY_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  NO_MEMORY_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  NO_MEMORY_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  NO_MEMORY_MetainfoWrapper::NO_MEMORY_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NO_MEMORY_methods_NO_MEMORY__LRNO_MEMORY__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NO_MEMORY_methods_NO_MEMORY__LRNO_MEMORY__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NO_MEMORY_method_NO_MEMORY__LRNO_MEMORY_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NO_MEMORY", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NO_MEMORY::clazzInfo(), // return type
  "_0_NO_MEMORY", // alternative name of method
  -1, // altlabelHashCode
  NO_MEMORY_methods_NO_MEMORY__LRNO_MEMORY__args, // the arguments
  0, //arguments count
  NO_MEMORY_methods_NO_MEMORY__LRNO_MEMORY__exceptions, // the declared exceptions
  NO_MEMORY_MetainfoWrapper::NO_MEMORY_method_NO_MEMORY__LRNO_MEMORY__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NO_MEMORY_methods_NO_MEMORY_II_LRNO_MEMORY__arg_minor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NO_MEMORY_methods_NO_MEMORY_II_LRNO_MEMORY__arg_completed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "completed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NO_MEMORY_methods_NO_MEMORY_II_LRNO_MEMORY__args[] = 
{
  &NO_MEMORY_methods_NO_MEMORY_II_LRNO_MEMORY__arg_minor,
  &NO_MEMORY_methods_NO_MEMORY_II_LRNO_MEMORY__arg_completed,
  0
};

::acdk::lang::dmi::ClazzInfo* NO_MEMORY_methods_NO_MEMORY_II_LRNO_MEMORY__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NO_MEMORY_method_NO_MEMORY_II_LRNO_MEMORY_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NO_MEMORY", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NO_MEMORY::clazzInfo(), // return type
  "_1_NO_MEMORY", // alternative name of method
  -1, // altlabelHashCode
  NO_MEMORY_methods_NO_MEMORY_II_LRNO_MEMORY__args, // the arguments
  0, //arguments count
  NO_MEMORY_methods_NO_MEMORY_II_LRNO_MEMORY__exceptions, // the declared exceptions
  NO_MEMORY_MetainfoWrapper::NO_MEMORY_method_NO_MEMORY_II_LRNO_MEMORY__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NO_MEMORY_methods_NO_MEMORY_INLRString__LRNO_MEMORY__arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NO_MEMORY_methods_NO_MEMORY_INLRString__LRNO_MEMORY__args[] = 
{
  &NO_MEMORY_methods_NO_MEMORY_INLRString__LRNO_MEMORY__arg_msg,
  0
};

::acdk::lang::dmi::ClazzInfo* NO_MEMORY_methods_NO_MEMORY_INLRString__LRNO_MEMORY__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NO_MEMORY_method_NO_MEMORY_INLRString__LRNO_MEMORY_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NO_MEMORY", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NO_MEMORY::clazzInfo(), // return type
  "_2_NO_MEMORY", // alternative name of method
  -1, // altlabelHashCode
  NO_MEMORY_methods_NO_MEMORY_INLRString__LRNO_MEMORY__args, // the arguments
  0, //arguments count
  NO_MEMORY_methods_NO_MEMORY_INLRString__LRNO_MEMORY__exceptions, // the declared exceptions
  NO_MEMORY_MetainfoWrapper::NO_MEMORY_method_NO_MEMORY_INLRString__LRNO_MEMORY__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NO_MEMORY_methods_NO_MEMORY_INLRString_II_LRNO_MEMORY__arg_reason = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "reason", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NO_MEMORY_methods_NO_MEMORY_INLRString_II_LRNO_MEMORY__arg_minor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NO_MEMORY_methods_NO_MEMORY_INLRString_II_LRNO_MEMORY__arg_completed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "completed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NO_MEMORY_methods_NO_MEMORY_INLRString_II_LRNO_MEMORY__args[] = 
{
  &NO_MEMORY_methods_NO_MEMORY_INLRString_II_LRNO_MEMORY__arg_reason,
  &NO_MEMORY_methods_NO_MEMORY_INLRString_II_LRNO_MEMORY__arg_minor,
  &NO_MEMORY_methods_NO_MEMORY_INLRString_II_LRNO_MEMORY__arg_completed,
  0
};

::acdk::lang::dmi::ClazzInfo* NO_MEMORY_methods_NO_MEMORY_INLRString_II_LRNO_MEMORY__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NO_MEMORY_method_NO_MEMORY_INLRString_II_LRNO_MEMORY_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NO_MEMORY", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NO_MEMORY::clazzInfo(), // return type
  "_3_NO_MEMORY", // alternative name of method
  -1, // altlabelHashCode
  NO_MEMORY_methods_NO_MEMORY_INLRString_II_LRNO_MEMORY__args, // the arguments
  0, //arguments count
  NO_MEMORY_methods_NO_MEMORY_INLRString_II_LRNO_MEMORY__exceptions, // the declared exceptions
  NO_MEMORY_MetainfoWrapper::NO_MEMORY_method_NO_MEMORY_INLRString_II_LRNO_MEMORY__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _NO_MEMORY_methods[] = 
{
  &NO_MEMORY_method_GetClass__L_acdk_lang_RClass_,
  &NO_MEMORY_method_NO_MEMORY__LRNO_MEMORY_,
  &NO_MEMORY_method_NO_MEMORY_II_LRNO_MEMORY_,
  &NO_MEMORY_method_NO_MEMORY_INLRString__LRNO_MEMORY_,
  &NO_MEMORY_method_NO_MEMORY_INLRString_II_LRNO_MEMORY_,
  0
};


struct NO_MEMORY_MetaInfoInitializer
{  NO_MEMORY_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = NO_MEMORY::clazzInfo();
    ci->fields =  _NO_MEMORY_fields;
    ci->methods =  _NO_MEMORY_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
NO_MEMORY_MetaInfoInitializer NO_MEMORY_MetaInfoInitializer_staticinstance__;


struct NO_MEMORY_clazzInfo_ClazzAttributesResInitializer22
{
  NO_MEMORY_clazzInfo_ClazzAttributesResInitializer22()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&NO_MEMORY_methods_NO_MEMORY_II_LRNO_MEMORY__arg_completed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CompletionStatusMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&NO_MEMORY_methods_NO_MEMORY_INLRString_II_LRNO_MEMORY__arg_completed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CompletionStatusMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)NO_MEMORY::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_NO_MEMORY));
  }
};

NO_MEMORY_clazzInfo_ClazzAttributesResInitializer22 NO_MEMORY_clazzInfo_ClazzAttributesResInitializer22_instance;



} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
NO_PERMISSION_create_array(int length)
{
  return new ObjectArrayImpl<RNO_PERMISSION>(length);
}

//static
::acdk::lang::RObject
NO_PERMISSION_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class NO_PERMISSION_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NO_PERMISSION_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)NO_PERMISSION::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NO_PERMISSION_method_NO_PERMISSION__LRNO_PERMISSION__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NO_PERMISSION();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NO_PERMISSION_method_NO_PERMISSION_II_LRNO_PERMISSION__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NO_PERMISSION(args[0].getIntVar(), (CompletionStatus)args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NO_PERMISSION_method_NO_PERMISSION_INLRString__LRNO_PERMISSION__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NO_PERMISSION((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NO_PERMISSION_method_NO_PERMISSION_INLRString_II_LRNO_PERMISSION__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NO_PERMISSION((RString)args[0].getObjectVar(), args[1].getIntVar(), (CompletionStatus)args[2].getIntVar());
    return methinf;
  }
};


void ThrowException_NO_PERMISSION(IN(::acdk::lang::RThrowable) ex)
{
  throw RNO_PERMISSION(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _NO_PERMISSION_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* NO_PERMISSION_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NO_PERMISSION_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NO_PERMISSION_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  NO_PERMISSION_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  NO_PERMISSION_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  NO_PERMISSION_MetainfoWrapper::NO_PERMISSION_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NO_PERMISSION_methods_NO_PERMISSION__LRNO_PERMISSION__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NO_PERMISSION_methods_NO_PERMISSION__LRNO_PERMISSION__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NO_PERMISSION_method_NO_PERMISSION__LRNO_PERMISSION_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NO_PERMISSION", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NO_PERMISSION::clazzInfo(), // return type
  "_0_NO_PERMISSION", // alternative name of method
  -1, // altlabelHashCode
  NO_PERMISSION_methods_NO_PERMISSION__LRNO_PERMISSION__args, // the arguments
  0, //arguments count
  NO_PERMISSION_methods_NO_PERMISSION__LRNO_PERMISSION__exceptions, // the declared exceptions
  NO_PERMISSION_MetainfoWrapper::NO_PERMISSION_method_NO_PERMISSION__LRNO_PERMISSION__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NO_PERMISSION_methods_NO_PERMISSION_II_LRNO_PERMISSION__arg_minor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NO_PERMISSION_methods_NO_PERMISSION_II_LRNO_PERMISSION__arg_completed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "completed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NO_PERMISSION_methods_NO_PERMISSION_II_LRNO_PERMISSION__args[] = 
{
  &NO_PERMISSION_methods_NO_PERMISSION_II_LRNO_PERMISSION__arg_minor,
  &NO_PERMISSION_methods_NO_PERMISSION_II_LRNO_PERMISSION__arg_completed,
  0
};

::acdk::lang::dmi::ClazzInfo* NO_PERMISSION_methods_NO_PERMISSION_II_LRNO_PERMISSION__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NO_PERMISSION_method_NO_PERMISSION_II_LRNO_PERMISSION_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NO_PERMISSION", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NO_PERMISSION::clazzInfo(), // return type
  "_1_NO_PERMISSION", // alternative name of method
  -1, // altlabelHashCode
  NO_PERMISSION_methods_NO_PERMISSION_II_LRNO_PERMISSION__args, // the arguments
  0, //arguments count
  NO_PERMISSION_methods_NO_PERMISSION_II_LRNO_PERMISSION__exceptions, // the declared exceptions
  NO_PERMISSION_MetainfoWrapper::NO_PERMISSION_method_NO_PERMISSION_II_LRNO_PERMISSION__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NO_PERMISSION_methods_NO_PERMISSION_INLRString__LRNO_PERMISSION__arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NO_PERMISSION_methods_NO_PERMISSION_INLRString__LRNO_PERMISSION__args[] = 
{
  &NO_PERMISSION_methods_NO_PERMISSION_INLRString__LRNO_PERMISSION__arg_msg,
  0
};

::acdk::lang::dmi::ClazzInfo* NO_PERMISSION_methods_NO_PERMISSION_INLRString__LRNO_PERMISSION__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NO_PERMISSION_method_NO_PERMISSION_INLRString__LRNO_PERMISSION_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NO_PERMISSION", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NO_PERMISSION::clazzInfo(), // return type
  "_2_NO_PERMISSION", // alternative name of method
  -1, // altlabelHashCode
  NO_PERMISSION_methods_NO_PERMISSION_INLRString__LRNO_PERMISSION__args, // the arguments
  0, //arguments count
  NO_PERMISSION_methods_NO_PERMISSION_INLRString__LRNO_PERMISSION__exceptions, // the declared exceptions
  NO_PERMISSION_MetainfoWrapper::NO_PERMISSION_method_NO_PERMISSION_INLRString__LRNO_PERMISSION__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NO_PERMISSION_methods_NO_PERMISSION_INLRString_II_LRNO_PERMISSION__arg_reason = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "reason", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NO_PERMISSION_methods_NO_PERMISSION_INLRString_II_LRNO_PERMISSION__arg_minor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NO_PERMISSION_methods_NO_PERMISSION_INLRString_II_LRNO_PERMISSION__arg_completed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "completed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NO_PERMISSION_methods_NO_PERMISSION_INLRString_II_LRNO_PERMISSION__args[] = 
{
  &NO_PERMISSION_methods_NO_PERMISSION_INLRString_II_LRNO_PERMISSION__arg_reason,
  &NO_PERMISSION_methods_NO_PERMISSION_INLRString_II_LRNO_PERMISSION__arg_minor,
  &NO_PERMISSION_methods_NO_PERMISSION_INLRString_II_LRNO_PERMISSION__arg_completed,
  0
};

::acdk::lang::dmi::ClazzInfo* NO_PERMISSION_methods_NO_PERMISSION_INLRString_II_LRNO_PERMISSION__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NO_PERMISSION_method_NO_PERMISSION_INLRString_II_LRNO_PERMISSION_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NO_PERMISSION", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NO_PERMISSION::clazzInfo(), // return type
  "_3_NO_PERMISSION", // alternative name of method
  -1, // altlabelHashCode
  NO_PERMISSION_methods_NO_PERMISSION_INLRString_II_LRNO_PERMISSION__args, // the arguments
  0, //arguments count
  NO_PERMISSION_methods_NO_PERMISSION_INLRString_II_LRNO_PERMISSION__exceptions, // the declared exceptions
  NO_PERMISSION_MetainfoWrapper::NO_PERMISSION_method_NO_PERMISSION_INLRString_II_LRNO_PERMISSION__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _NO_PERMISSION_methods[] = 
{
  &NO_PERMISSION_method_GetClass__L_acdk_lang_RClass_,
  &NO_PERMISSION_method_NO_PERMISSION__LRNO_PERMISSION_,
  &NO_PERMISSION_method_NO_PERMISSION_II_LRNO_PERMISSION_,
  &NO_PERMISSION_method_NO_PERMISSION_INLRString__LRNO_PERMISSION_,
  &NO_PERMISSION_method_NO_PERMISSION_INLRString_II_LRNO_PERMISSION_,
  0
};


struct NO_PERMISSION_MetaInfoInitializer
{  NO_PERMISSION_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = NO_PERMISSION::clazzInfo();
    ci->fields =  _NO_PERMISSION_fields;
    ci->methods =  _NO_PERMISSION_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
NO_PERMISSION_MetaInfoInitializer NO_PERMISSION_MetaInfoInitializer_staticinstance__;


struct NO_PERMISSION_clazzInfo_ClazzAttributesResInitializer23
{
  NO_PERMISSION_clazzInfo_ClazzAttributesResInitializer23()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&NO_PERMISSION_methods_NO_PERMISSION_II_LRNO_PERMISSION__arg_completed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CompletionStatusMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&NO_PERMISSION_methods_NO_PERMISSION_INLRString_II_LRNO_PERMISSION__arg_completed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CompletionStatusMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)NO_PERMISSION::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_NO_PERMISSION));
  }
};

NO_PERMISSION_clazzInfo_ClazzAttributesResInitializer23 NO_PERMISSION_clazzInfo_ClazzAttributesResInitializer23_instance;



} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
NO_RESOURCES_create_array(int length)
{
  return new ObjectArrayImpl<RNO_RESOURCES>(length);
}

//static
::acdk::lang::RObject
NO_RESOURCES_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class NO_RESOURCES_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NO_RESOURCES_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)NO_RESOURCES::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NO_RESOURCES_method_NO_RESOURCES__LRNO_RESOURCES__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NO_RESOURCES();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NO_RESOURCES_method_NO_RESOURCES_II_LRNO_RESOURCES__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NO_RESOURCES(args[0].getIntVar(), (CompletionStatus)args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NO_RESOURCES_method_NO_RESOURCES_INLRString__LRNO_RESOURCES__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NO_RESOURCES((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NO_RESOURCES_method_NO_RESOURCES_INLRString_II_LRNO_RESOURCES__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NO_RESOURCES((RString)args[0].getObjectVar(), args[1].getIntVar(), (CompletionStatus)args[2].getIntVar());
    return methinf;
  }
};


void ThrowException_NO_RESOURCES(IN(::acdk::lang::RThrowable) ex)
{
  throw RNO_RESOURCES(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _NO_RESOURCES_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* NO_RESOURCES_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NO_RESOURCES_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NO_RESOURCES_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  NO_RESOURCES_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  NO_RESOURCES_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  NO_RESOURCES_MetainfoWrapper::NO_RESOURCES_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NO_RESOURCES_methods_NO_RESOURCES__LRNO_RESOURCES__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NO_RESOURCES_methods_NO_RESOURCES__LRNO_RESOURCES__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NO_RESOURCES_method_NO_RESOURCES__LRNO_RESOURCES_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NO_RESOURCES", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NO_RESOURCES::clazzInfo(), // return type
  "_0_NO_RESOURCES", // alternative name of method
  -1, // altlabelHashCode
  NO_RESOURCES_methods_NO_RESOURCES__LRNO_RESOURCES__args, // the arguments
  0, //arguments count
  NO_RESOURCES_methods_NO_RESOURCES__LRNO_RESOURCES__exceptions, // the declared exceptions
  NO_RESOURCES_MetainfoWrapper::NO_RESOURCES_method_NO_RESOURCES__LRNO_RESOURCES__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NO_RESOURCES_methods_NO_RESOURCES_II_LRNO_RESOURCES__arg_minor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NO_RESOURCES_methods_NO_RESOURCES_II_LRNO_RESOURCES__arg_completed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "completed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NO_RESOURCES_methods_NO_RESOURCES_II_LRNO_RESOURCES__args[] = 
{
  &NO_RESOURCES_methods_NO_RESOURCES_II_LRNO_RESOURCES__arg_minor,
  &NO_RESOURCES_methods_NO_RESOURCES_II_LRNO_RESOURCES__arg_completed,
  0
};

::acdk::lang::dmi::ClazzInfo* NO_RESOURCES_methods_NO_RESOURCES_II_LRNO_RESOURCES__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NO_RESOURCES_method_NO_RESOURCES_II_LRNO_RESOURCES_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NO_RESOURCES", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NO_RESOURCES::clazzInfo(), // return type
  "_1_NO_RESOURCES", // alternative name of method
  -1, // altlabelHashCode
  NO_RESOURCES_methods_NO_RESOURCES_II_LRNO_RESOURCES__args, // the arguments
  0, //arguments count
  NO_RESOURCES_methods_NO_RESOURCES_II_LRNO_RESOURCES__exceptions, // the declared exceptions
  NO_RESOURCES_MetainfoWrapper::NO_RESOURCES_method_NO_RESOURCES_II_LRNO_RESOURCES__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NO_RESOURCES_methods_NO_RESOURCES_INLRString__LRNO_RESOURCES__arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NO_RESOURCES_methods_NO_RESOURCES_INLRString__LRNO_RESOURCES__args[] = 
{
  &NO_RESOURCES_methods_NO_RESOURCES_INLRString__LRNO_RESOURCES__arg_msg,
  0
};

::acdk::lang::dmi::ClazzInfo* NO_RESOURCES_methods_NO_RESOURCES_INLRString__LRNO_RESOURCES__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NO_RESOURCES_method_NO_RESOURCES_INLRString__LRNO_RESOURCES_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NO_RESOURCES", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NO_RESOURCES::clazzInfo(), // return type
  "_2_NO_RESOURCES", // alternative name of method
  -1, // altlabelHashCode
  NO_RESOURCES_methods_NO_RESOURCES_INLRString__LRNO_RESOURCES__args, // the arguments
  0, //arguments count
  NO_RESOURCES_methods_NO_RESOURCES_INLRString__LRNO_RESOURCES__exceptions, // the declared exceptions
  NO_RESOURCES_MetainfoWrapper::NO_RESOURCES_method_NO_RESOURCES_INLRString__LRNO_RESOURCES__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NO_RESOURCES_methods_NO_RESOURCES_INLRString_II_LRNO_RESOURCES__arg_reason = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "reason", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NO_RESOURCES_methods_NO_RESOURCES_INLRString_II_LRNO_RESOURCES__arg_minor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NO_RESOURCES_methods_NO_RESOURCES_INLRString_II_LRNO_RESOURCES__arg_completed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "completed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NO_RESOURCES_methods_NO_RESOURCES_INLRString_II_LRNO_RESOURCES__args[] = 
{
  &NO_RESOURCES_methods_NO_RESOURCES_INLRString_II_LRNO_RESOURCES__arg_reason,
  &NO_RESOURCES_methods_NO_RESOURCES_INLRString_II_LRNO_RESOURCES__arg_minor,
  &NO_RESOURCES_methods_NO_RESOURCES_INLRString_II_LRNO_RESOURCES__arg_completed,
  0
};

::acdk::lang::dmi::ClazzInfo* NO_RESOURCES_methods_NO_RESOURCES_INLRString_II_LRNO_RESOURCES__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NO_RESOURCES_method_NO_RESOURCES_INLRString_II_LRNO_RESOURCES_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NO_RESOURCES", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NO_RESOURCES::clazzInfo(), // return type
  "_3_NO_RESOURCES", // alternative name of method
  -1, // altlabelHashCode
  NO_RESOURCES_methods_NO_RESOURCES_INLRString_II_LRNO_RESOURCES__args, // the arguments
  0, //arguments count
  NO_RESOURCES_methods_NO_RESOURCES_INLRString_II_LRNO_RESOURCES__exceptions, // the declared exceptions
  NO_RESOURCES_MetainfoWrapper::NO_RESOURCES_method_NO_RESOURCES_INLRString_II_LRNO_RESOURCES__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _NO_RESOURCES_methods[] = 
{
  &NO_RESOURCES_method_GetClass__L_acdk_lang_RClass_,
  &NO_RESOURCES_method_NO_RESOURCES__LRNO_RESOURCES_,
  &NO_RESOURCES_method_NO_RESOURCES_II_LRNO_RESOURCES_,
  &NO_RESOURCES_method_NO_RESOURCES_INLRString__LRNO_RESOURCES_,
  &NO_RESOURCES_method_NO_RESOURCES_INLRString_II_LRNO_RESOURCES_,
  0
};


struct NO_RESOURCES_MetaInfoInitializer
{  NO_RESOURCES_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = NO_RESOURCES::clazzInfo();
    ci->fields =  _NO_RESOURCES_fields;
    ci->methods =  _NO_RESOURCES_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
NO_RESOURCES_MetaInfoInitializer NO_RESOURCES_MetaInfoInitializer_staticinstance__;


struct NO_RESOURCES_clazzInfo_ClazzAttributesResInitializer24
{
  NO_RESOURCES_clazzInfo_ClazzAttributesResInitializer24()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&NO_RESOURCES_methods_NO_RESOURCES_II_LRNO_RESOURCES__arg_completed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CompletionStatusMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&NO_RESOURCES_methods_NO_RESOURCES_INLRString_II_LRNO_RESOURCES__arg_completed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CompletionStatusMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)NO_RESOURCES::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_NO_RESOURCES));
  }
};

NO_RESOURCES_clazzInfo_ClazzAttributesResInitializer24 NO_RESOURCES_clazzInfo_ClazzAttributesResInitializer24_instance;



} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
NO_RESPONSE_create_array(int length)
{
  return new ObjectArrayImpl<RNO_RESPONSE>(length);
}

//static
::acdk::lang::RObject
NO_RESPONSE_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class NO_RESPONSE_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NO_RESPONSE_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)NO_RESPONSE::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NO_RESPONSE_method_NO_RESPONSE__LRNO_RESPONSE__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NO_RESPONSE();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NO_RESPONSE_method_NO_RESPONSE_II_LRNO_RESPONSE__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NO_RESPONSE(args[0].getIntVar(), (CompletionStatus)args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NO_RESPONSE_method_NO_RESPONSE_INLRString__LRNO_RESPONSE__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NO_RESPONSE((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NO_RESPONSE_method_NO_RESPONSE_INLRString_II_LRNO_RESPONSE__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NO_RESPONSE((RString)args[0].getObjectVar(), args[1].getIntVar(), (CompletionStatus)args[2].getIntVar());
    return methinf;
  }
};


void ThrowException_NO_RESPONSE(IN(::acdk::lang::RThrowable) ex)
{
  throw RNO_RESPONSE(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _NO_RESPONSE_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* NO_RESPONSE_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NO_RESPONSE_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NO_RESPONSE_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  NO_RESPONSE_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  NO_RESPONSE_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  NO_RESPONSE_MetainfoWrapper::NO_RESPONSE_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NO_RESPONSE_methods_NO_RESPONSE__LRNO_RESPONSE__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NO_RESPONSE_methods_NO_RESPONSE__LRNO_RESPONSE__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NO_RESPONSE_method_NO_RESPONSE__LRNO_RESPONSE_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NO_RESPONSE", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NO_RESPONSE::clazzInfo(), // return type
  "_0_NO_RESPONSE", // alternative name of method
  -1, // altlabelHashCode
  NO_RESPONSE_methods_NO_RESPONSE__LRNO_RESPONSE__args, // the arguments
  0, //arguments count
  NO_RESPONSE_methods_NO_RESPONSE__LRNO_RESPONSE__exceptions, // the declared exceptions
  NO_RESPONSE_MetainfoWrapper::NO_RESPONSE_method_NO_RESPONSE__LRNO_RESPONSE__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NO_RESPONSE_methods_NO_RESPONSE_II_LRNO_RESPONSE__arg_minor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NO_RESPONSE_methods_NO_RESPONSE_II_LRNO_RESPONSE__arg_completed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "completed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NO_RESPONSE_methods_NO_RESPONSE_II_LRNO_RESPONSE__args[] = 
{
  &NO_RESPONSE_methods_NO_RESPONSE_II_LRNO_RESPONSE__arg_minor,
  &NO_RESPONSE_methods_NO_RESPONSE_II_LRNO_RESPONSE__arg_completed,
  0
};

::acdk::lang::dmi::ClazzInfo* NO_RESPONSE_methods_NO_RESPONSE_II_LRNO_RESPONSE__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NO_RESPONSE_method_NO_RESPONSE_II_LRNO_RESPONSE_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NO_RESPONSE", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NO_RESPONSE::clazzInfo(), // return type
  "_1_NO_RESPONSE", // alternative name of method
  -1, // altlabelHashCode
  NO_RESPONSE_methods_NO_RESPONSE_II_LRNO_RESPONSE__args, // the arguments
  0, //arguments count
  NO_RESPONSE_methods_NO_RESPONSE_II_LRNO_RESPONSE__exceptions, // the declared exceptions
  NO_RESPONSE_MetainfoWrapper::NO_RESPONSE_method_NO_RESPONSE_II_LRNO_RESPONSE__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NO_RESPONSE_methods_NO_RESPONSE_INLRString__LRNO_RESPONSE__arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NO_RESPONSE_methods_NO_RESPONSE_INLRString__LRNO_RESPONSE__args[] = 
{
  &NO_RESPONSE_methods_NO_RESPONSE_INLRString__LRNO_RESPONSE__arg_msg,
  0
};

::acdk::lang::dmi::ClazzInfo* NO_RESPONSE_methods_NO_RESPONSE_INLRString__LRNO_RESPONSE__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NO_RESPONSE_method_NO_RESPONSE_INLRString__LRNO_RESPONSE_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NO_RESPONSE", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NO_RESPONSE::clazzInfo(), // return type
  "_2_NO_RESPONSE", // alternative name of method
  -1, // altlabelHashCode
  NO_RESPONSE_methods_NO_RESPONSE_INLRString__LRNO_RESPONSE__args, // the arguments
  0, //arguments count
  NO_RESPONSE_methods_NO_RESPONSE_INLRString__LRNO_RESPONSE__exceptions, // the declared exceptions
  NO_RESPONSE_MetainfoWrapper::NO_RESPONSE_method_NO_RESPONSE_INLRString__LRNO_RESPONSE__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NO_RESPONSE_methods_NO_RESPONSE_INLRString_II_LRNO_RESPONSE__arg_reason = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "reason", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NO_RESPONSE_methods_NO_RESPONSE_INLRString_II_LRNO_RESPONSE__arg_minor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NO_RESPONSE_methods_NO_RESPONSE_INLRString_II_LRNO_RESPONSE__arg_completed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "completed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NO_RESPONSE_methods_NO_RESPONSE_INLRString_II_LRNO_RESPONSE__args[] = 
{
  &NO_RESPONSE_methods_NO_RESPONSE_INLRString_II_LRNO_RESPONSE__arg_reason,
  &NO_RESPONSE_methods_NO_RESPONSE_INLRString_II_LRNO_RESPONSE__arg_minor,
  &NO_RESPONSE_methods_NO_RESPONSE_INLRString_II_LRNO_RESPONSE__arg_completed,
  0
};

::acdk::lang::dmi::ClazzInfo* NO_RESPONSE_methods_NO_RESPONSE_INLRString_II_LRNO_RESPONSE__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NO_RESPONSE_method_NO_RESPONSE_INLRString_II_LRNO_RESPONSE_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NO_RESPONSE", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NO_RESPONSE::clazzInfo(), // return type
  "_3_NO_RESPONSE", // alternative name of method
  -1, // altlabelHashCode
  NO_RESPONSE_methods_NO_RESPONSE_INLRString_II_LRNO_RESPONSE__args, // the arguments
  0, //arguments count
  NO_RESPONSE_methods_NO_RESPONSE_INLRString_II_LRNO_RESPONSE__exceptions, // the declared exceptions
  NO_RESPONSE_MetainfoWrapper::NO_RESPONSE_method_NO_RESPONSE_INLRString_II_LRNO_RESPONSE__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _NO_RESPONSE_methods[] = 
{
  &NO_RESPONSE_method_GetClass__L_acdk_lang_RClass_,
  &NO_RESPONSE_method_NO_RESPONSE__LRNO_RESPONSE_,
  &NO_RESPONSE_method_NO_RESPONSE_II_LRNO_RESPONSE_,
  &NO_RESPONSE_method_NO_RESPONSE_INLRString__LRNO_RESPONSE_,
  &NO_RESPONSE_method_NO_RESPONSE_INLRString_II_LRNO_RESPONSE_,
  0
};


struct NO_RESPONSE_MetaInfoInitializer
{  NO_RESPONSE_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = NO_RESPONSE::clazzInfo();
    ci->fields =  _NO_RESPONSE_fields;
    ci->methods =  _NO_RESPONSE_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
NO_RESPONSE_MetaInfoInitializer NO_RESPONSE_MetaInfoInitializer_staticinstance__;


struct NO_RESPONSE_clazzInfo_ClazzAttributesResInitializer25
{
  NO_RESPONSE_clazzInfo_ClazzAttributesResInitializer25()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&NO_RESPONSE_methods_NO_RESPONSE_II_LRNO_RESPONSE__arg_completed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CompletionStatusMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&NO_RESPONSE_methods_NO_RESPONSE_INLRString_II_LRNO_RESPONSE__arg_completed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CompletionStatusMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)NO_RESPONSE::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_NO_RESPONSE));
  }
};

NO_RESPONSE_clazzInfo_ClazzAttributesResInitializer25 NO_RESPONSE_clazzInfo_ClazzAttributesResInitializer25_instance;



} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
OBJ_ADAPTER_create_array(int length)
{
  return new ObjectArrayImpl<ROBJ_ADAPTER>(length);
}

//static
::acdk::lang::RObject
OBJ_ADAPTER_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class OBJ_ADAPTER_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OBJ_ADAPTER_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)OBJ_ADAPTER::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OBJ_ADAPTER_method_OBJ_ADAPTER__LROBJ_ADAPTER__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new OBJ_ADAPTER();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OBJ_ADAPTER_method_OBJ_ADAPTER_II_LROBJ_ADAPTER__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new OBJ_ADAPTER(args[0].getIntVar(), (CompletionStatus)args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OBJ_ADAPTER_method_OBJ_ADAPTER_INLRString__LROBJ_ADAPTER__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new OBJ_ADAPTER((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OBJ_ADAPTER_method_OBJ_ADAPTER_INLRString_II_LROBJ_ADAPTER__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new OBJ_ADAPTER((RString)args[0].getObjectVar(), args[1].getIntVar(), (CompletionStatus)args[2].getIntVar());
    return methinf;
  }
};


void ThrowException_OBJ_ADAPTER(IN(::acdk::lang::RThrowable) ex)
{
  throw ROBJ_ADAPTER(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _OBJ_ADAPTER_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* OBJ_ADAPTER_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* OBJ_ADAPTER_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OBJ_ADAPTER_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  OBJ_ADAPTER_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  OBJ_ADAPTER_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  OBJ_ADAPTER_MetainfoWrapper::OBJ_ADAPTER_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* OBJ_ADAPTER_methods_OBJ_ADAPTER__LROBJ_ADAPTER__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* OBJ_ADAPTER_methods_OBJ_ADAPTER__LROBJ_ADAPTER__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OBJ_ADAPTER_method_OBJ_ADAPTER__LROBJ_ADAPTER_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "OBJ_ADAPTER", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  OBJ_ADAPTER::clazzInfo(), // return type
  "_0_OBJ_ADAPTER", // alternative name of method
  -1, // altlabelHashCode
  OBJ_ADAPTER_methods_OBJ_ADAPTER__LROBJ_ADAPTER__args, // the arguments
  0, //arguments count
  OBJ_ADAPTER_methods_OBJ_ADAPTER__LROBJ_ADAPTER__exceptions, // the declared exceptions
  OBJ_ADAPTER_MetainfoWrapper::OBJ_ADAPTER_method_OBJ_ADAPTER__LROBJ_ADAPTER__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OBJ_ADAPTER_methods_OBJ_ADAPTER_II_LROBJ_ADAPTER__arg_minor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo OBJ_ADAPTER_methods_OBJ_ADAPTER_II_LROBJ_ADAPTER__arg_completed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "completed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OBJ_ADAPTER_methods_OBJ_ADAPTER_II_LROBJ_ADAPTER__args[] = 
{
  &OBJ_ADAPTER_methods_OBJ_ADAPTER_II_LROBJ_ADAPTER__arg_minor,
  &OBJ_ADAPTER_methods_OBJ_ADAPTER_II_LROBJ_ADAPTER__arg_completed,
  0
};

::acdk::lang::dmi::ClazzInfo* OBJ_ADAPTER_methods_OBJ_ADAPTER_II_LROBJ_ADAPTER__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OBJ_ADAPTER_method_OBJ_ADAPTER_II_LROBJ_ADAPTER_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "OBJ_ADAPTER", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  OBJ_ADAPTER::clazzInfo(), // return type
  "_1_OBJ_ADAPTER", // alternative name of method
  -1, // altlabelHashCode
  OBJ_ADAPTER_methods_OBJ_ADAPTER_II_LROBJ_ADAPTER__args, // the arguments
  0, //arguments count
  OBJ_ADAPTER_methods_OBJ_ADAPTER_II_LROBJ_ADAPTER__exceptions, // the declared exceptions
  OBJ_ADAPTER_MetainfoWrapper::OBJ_ADAPTER_method_OBJ_ADAPTER_II_LROBJ_ADAPTER__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OBJ_ADAPTER_methods_OBJ_ADAPTER_INLRString__LROBJ_ADAPTER__arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OBJ_ADAPTER_methods_OBJ_ADAPTER_INLRString__LROBJ_ADAPTER__args[] = 
{
  &OBJ_ADAPTER_methods_OBJ_ADAPTER_INLRString__LROBJ_ADAPTER__arg_msg,
  0
};

::acdk::lang::dmi::ClazzInfo* OBJ_ADAPTER_methods_OBJ_ADAPTER_INLRString__LROBJ_ADAPTER__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OBJ_ADAPTER_method_OBJ_ADAPTER_INLRString__LROBJ_ADAPTER_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "OBJ_ADAPTER", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  OBJ_ADAPTER::clazzInfo(), // return type
  "_2_OBJ_ADAPTER", // alternative name of method
  -1, // altlabelHashCode
  OBJ_ADAPTER_methods_OBJ_ADAPTER_INLRString__LROBJ_ADAPTER__args, // the arguments
  0, //arguments count
  OBJ_ADAPTER_methods_OBJ_ADAPTER_INLRString__LROBJ_ADAPTER__exceptions, // the declared exceptions
  OBJ_ADAPTER_MetainfoWrapper::OBJ_ADAPTER_method_OBJ_ADAPTER_INLRString__LROBJ_ADAPTER__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OBJ_ADAPTER_methods_OBJ_ADAPTER_INLRString_II_LROBJ_ADAPTER__arg_reason = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "reason", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo OBJ_ADAPTER_methods_OBJ_ADAPTER_INLRString_II_LROBJ_ADAPTER__arg_minor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo OBJ_ADAPTER_methods_OBJ_ADAPTER_INLRString_II_LROBJ_ADAPTER__arg_completed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "completed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OBJ_ADAPTER_methods_OBJ_ADAPTER_INLRString_II_LROBJ_ADAPTER__args[] = 
{
  &OBJ_ADAPTER_methods_OBJ_ADAPTER_INLRString_II_LROBJ_ADAPTER__arg_reason,
  &OBJ_ADAPTER_methods_OBJ_ADAPTER_INLRString_II_LROBJ_ADAPTER__arg_minor,
  &OBJ_ADAPTER_methods_OBJ_ADAPTER_INLRString_II_LROBJ_ADAPTER__arg_completed,
  0
};

::acdk::lang::dmi::ClazzInfo* OBJ_ADAPTER_methods_OBJ_ADAPTER_INLRString_II_LROBJ_ADAPTER__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OBJ_ADAPTER_method_OBJ_ADAPTER_INLRString_II_LROBJ_ADAPTER_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "OBJ_ADAPTER", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  OBJ_ADAPTER::clazzInfo(), // return type
  "_3_OBJ_ADAPTER", // alternative name of method
  -1, // altlabelHashCode
  OBJ_ADAPTER_methods_OBJ_ADAPTER_INLRString_II_LROBJ_ADAPTER__args, // the arguments
  0, //arguments count
  OBJ_ADAPTER_methods_OBJ_ADAPTER_INLRString_II_LROBJ_ADAPTER__exceptions, // the declared exceptions
  OBJ_ADAPTER_MetainfoWrapper::OBJ_ADAPTER_method_OBJ_ADAPTER_INLRString_II_LROBJ_ADAPTER__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _OBJ_ADAPTER_methods[] = 
{
  &OBJ_ADAPTER_method_GetClass__L_acdk_lang_RClass_,
  &OBJ_ADAPTER_method_OBJ_ADAPTER__LROBJ_ADAPTER_,
  &OBJ_ADAPTER_method_OBJ_ADAPTER_II_LROBJ_ADAPTER_,
  &OBJ_ADAPTER_method_OBJ_ADAPTER_INLRString__LROBJ_ADAPTER_,
  &OBJ_ADAPTER_method_OBJ_ADAPTER_INLRString_II_LROBJ_ADAPTER_,
  0
};


struct OBJ_ADAPTER_MetaInfoInitializer
{  OBJ_ADAPTER_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = OBJ_ADAPTER::clazzInfo();
    ci->fields =  _OBJ_ADAPTER_fields;
    ci->methods =  _OBJ_ADAPTER_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
OBJ_ADAPTER_MetaInfoInitializer OBJ_ADAPTER_MetaInfoInitializer_staticinstance__;


struct OBJ_ADAPTER_clazzInfo_ClazzAttributesResInitializer26
{
  OBJ_ADAPTER_clazzInfo_ClazzAttributesResInitializer26()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&OBJ_ADAPTER_methods_OBJ_ADAPTER_II_LROBJ_ADAPTER__arg_completed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CompletionStatusMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&OBJ_ADAPTER_methods_OBJ_ADAPTER_INLRString_II_LROBJ_ADAPTER__arg_completed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CompletionStatusMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)OBJ_ADAPTER::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_OBJ_ADAPTER));
  }
};

OBJ_ADAPTER_clazzInfo_ClazzAttributesResInitializer26 OBJ_ADAPTER_clazzInfo_ClazzAttributesResInitializer26_instance;



} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
OBJECT_NOT_EXIST_create_array(int length)
{
  return new ObjectArrayImpl<ROBJECT_NOT_EXIST>(length);
}

//static
::acdk::lang::RObject
OBJECT_NOT_EXIST_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class OBJECT_NOT_EXIST_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OBJECT_NOT_EXIST_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)OBJECT_NOT_EXIST::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OBJECT_NOT_EXIST_method_OBJECT_NOT_EXIST__LROBJECT_NOT_EXIST__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new OBJECT_NOT_EXIST();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OBJECT_NOT_EXIST_method_OBJECT_NOT_EXIST_II_LROBJECT_NOT_EXIST__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new OBJECT_NOT_EXIST(args[0].getIntVar(), (CompletionStatus)args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OBJECT_NOT_EXIST_method_OBJECT_NOT_EXIST_INLRString__LROBJECT_NOT_EXIST__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new OBJECT_NOT_EXIST((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OBJECT_NOT_EXIST_method_OBJECT_NOT_EXIST_INLRString_II_LROBJECT_NOT_EXIST__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new OBJECT_NOT_EXIST((RString)args[0].getObjectVar(), args[1].getIntVar(), (CompletionStatus)args[2].getIntVar());
    return methinf;
  }
};


void ThrowException_OBJECT_NOT_EXIST(IN(::acdk::lang::RThrowable) ex)
{
  throw ROBJECT_NOT_EXIST(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _OBJECT_NOT_EXIST_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* OBJECT_NOT_EXIST_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* OBJECT_NOT_EXIST_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OBJECT_NOT_EXIST_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  OBJECT_NOT_EXIST_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  OBJECT_NOT_EXIST_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  OBJECT_NOT_EXIST_MetainfoWrapper::OBJECT_NOT_EXIST_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* OBJECT_NOT_EXIST_methods_OBJECT_NOT_EXIST__LROBJECT_NOT_EXIST__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* OBJECT_NOT_EXIST_methods_OBJECT_NOT_EXIST__LROBJECT_NOT_EXIST__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OBJECT_NOT_EXIST_method_OBJECT_NOT_EXIST__LROBJECT_NOT_EXIST_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "OBJECT_NOT_EXIST", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  OBJECT_NOT_EXIST::clazzInfo(), // return type
  "_0_OBJECT_NOT_EXIST", // alternative name of method
  -1, // altlabelHashCode
  OBJECT_NOT_EXIST_methods_OBJECT_NOT_EXIST__LROBJECT_NOT_EXIST__args, // the arguments
  0, //arguments count
  OBJECT_NOT_EXIST_methods_OBJECT_NOT_EXIST__LROBJECT_NOT_EXIST__exceptions, // the declared exceptions
  OBJECT_NOT_EXIST_MetainfoWrapper::OBJECT_NOT_EXIST_method_OBJECT_NOT_EXIST__LROBJECT_NOT_EXIST__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OBJECT_NOT_EXIST_methods_OBJECT_NOT_EXIST_II_LROBJECT_NOT_EXIST__arg_minor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo OBJECT_NOT_EXIST_methods_OBJECT_NOT_EXIST_II_LROBJECT_NOT_EXIST__arg_completed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "completed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OBJECT_NOT_EXIST_methods_OBJECT_NOT_EXIST_II_LROBJECT_NOT_EXIST__args[] = 
{
  &OBJECT_NOT_EXIST_methods_OBJECT_NOT_EXIST_II_LROBJECT_NOT_EXIST__arg_minor,
  &OBJECT_NOT_EXIST_methods_OBJECT_NOT_EXIST_II_LROBJECT_NOT_EXIST__arg_completed,
  0
};

::acdk::lang::dmi::ClazzInfo* OBJECT_NOT_EXIST_methods_OBJECT_NOT_EXIST_II_LROBJECT_NOT_EXIST__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OBJECT_NOT_EXIST_method_OBJECT_NOT_EXIST_II_LROBJECT_NOT_EXIST_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "OBJECT_NOT_EXIST", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  OBJECT_NOT_EXIST::clazzInfo(), // return type
  "_1_OBJECT_NOT_EXIST", // alternative name of method
  -1, // altlabelHashCode
  OBJECT_NOT_EXIST_methods_OBJECT_NOT_EXIST_II_LROBJECT_NOT_EXIST__args, // the arguments
  0, //arguments count
  OBJECT_NOT_EXIST_methods_OBJECT_NOT_EXIST_II_LROBJECT_NOT_EXIST__exceptions, // the declared exceptions
  OBJECT_NOT_EXIST_MetainfoWrapper::OBJECT_NOT_EXIST_method_OBJECT_NOT_EXIST_II_LROBJECT_NOT_EXIST__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OBJECT_NOT_EXIST_methods_OBJECT_NOT_EXIST_INLRString__LROBJECT_NOT_EXIST__arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OBJECT_NOT_EXIST_methods_OBJECT_NOT_EXIST_INLRString__LROBJECT_NOT_EXIST__args[] = 
{
  &OBJECT_NOT_EXIST_methods_OBJECT_NOT_EXIST_INLRString__LROBJECT_NOT_EXIST__arg_msg,
  0
};

::acdk::lang::dmi::ClazzInfo* OBJECT_NOT_EXIST_methods_OBJECT_NOT_EXIST_INLRString__LROBJECT_NOT_EXIST__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OBJECT_NOT_EXIST_method_OBJECT_NOT_EXIST_INLRString__LROBJECT_NOT_EXIST_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "OBJECT_NOT_EXIST", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  OBJECT_NOT_EXIST::clazzInfo(), // return type
  "_2_OBJECT_NOT_EXIST", // alternative name of method
  -1, // altlabelHashCode
  OBJECT_NOT_EXIST_methods_OBJECT_NOT_EXIST_INLRString__LROBJECT_NOT_EXIST__args, // the arguments
  0, //arguments count
  OBJECT_NOT_EXIST_methods_OBJECT_NOT_EXIST_INLRString__LROBJECT_NOT_EXIST__exceptions, // the declared exceptions
  OBJECT_NOT_EXIST_MetainfoWrapper::OBJECT_NOT_EXIST_method_OBJECT_NOT_EXIST_INLRString__LROBJECT_NOT_EXIST__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OBJECT_NOT_EXIST_methods_OBJECT_NOT_EXIST_INLRString_II_LROBJECT_NOT_EXIST__arg_reason = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "reason", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo OBJECT_NOT_EXIST_methods_OBJECT_NOT_EXIST_INLRString_II_LROBJECT_NOT_EXIST__arg_minor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo OBJECT_NOT_EXIST_methods_OBJECT_NOT_EXIST_INLRString_II_LROBJECT_NOT_EXIST__arg_completed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "completed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OBJECT_NOT_EXIST_methods_OBJECT_NOT_EXIST_INLRString_II_LROBJECT_NOT_EXIST__args[] = 
{
  &OBJECT_NOT_EXIST_methods_OBJECT_NOT_EXIST_INLRString_II_LROBJECT_NOT_EXIST__arg_reason,
  &OBJECT_NOT_EXIST_methods_OBJECT_NOT_EXIST_INLRString_II_LROBJECT_NOT_EXIST__arg_minor,
  &OBJECT_NOT_EXIST_methods_OBJECT_NOT_EXIST_INLRString_II_LROBJECT_NOT_EXIST__arg_completed,
  0
};

::acdk::lang::dmi::ClazzInfo* OBJECT_NOT_EXIST_methods_OBJECT_NOT_EXIST_INLRString_II_LROBJECT_NOT_EXIST__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OBJECT_NOT_EXIST_method_OBJECT_NOT_EXIST_INLRString_II_LROBJECT_NOT_EXIST_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "OBJECT_NOT_EXIST", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  OBJECT_NOT_EXIST::clazzInfo(), // return type
  "_3_OBJECT_NOT_EXIST", // alternative name of method
  -1, // altlabelHashCode
  OBJECT_NOT_EXIST_methods_OBJECT_NOT_EXIST_INLRString_II_LROBJECT_NOT_EXIST__args, // the arguments
  0, //arguments count
  OBJECT_NOT_EXIST_methods_OBJECT_NOT_EXIST_INLRString_II_LROBJECT_NOT_EXIST__exceptions, // the declared exceptions
  OBJECT_NOT_EXIST_MetainfoWrapper::OBJECT_NOT_EXIST_method_OBJECT_NOT_EXIST_INLRString_II_LROBJECT_NOT_EXIST__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _OBJECT_NOT_EXIST_methods[] = 
{
  &OBJECT_NOT_EXIST_method_GetClass__L_acdk_lang_RClass_,
  &OBJECT_NOT_EXIST_method_OBJECT_NOT_EXIST__LROBJECT_NOT_EXIST_,
  &OBJECT_NOT_EXIST_method_OBJECT_NOT_EXIST_II_LROBJECT_NOT_EXIST_,
  &OBJECT_NOT_EXIST_method_OBJECT_NOT_EXIST_INLRString__LROBJECT_NOT_EXIST_,
  &OBJECT_NOT_EXIST_method_OBJECT_NOT_EXIST_INLRString_II_LROBJECT_NOT_EXIST_,
  0
};


struct OBJECT_NOT_EXIST_MetaInfoInitializer
{  OBJECT_NOT_EXIST_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = OBJECT_NOT_EXIST::clazzInfo();
    ci->fields =  _OBJECT_NOT_EXIST_fields;
    ci->methods =  _OBJECT_NOT_EXIST_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
OBJECT_NOT_EXIST_MetaInfoInitializer OBJECT_NOT_EXIST_MetaInfoInitializer_staticinstance__;


struct OBJECT_NOT_EXIST_clazzInfo_ClazzAttributesResInitializer27
{
  OBJECT_NOT_EXIST_clazzInfo_ClazzAttributesResInitializer27()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&OBJECT_NOT_EXIST_methods_OBJECT_NOT_EXIST_II_LROBJECT_NOT_EXIST__arg_completed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CompletionStatusMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&OBJECT_NOT_EXIST_methods_OBJECT_NOT_EXIST_INLRString_II_LROBJECT_NOT_EXIST__arg_completed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CompletionStatusMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)OBJECT_NOT_EXIST::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_OBJECT_NOT_EXIST));
  }
};

OBJECT_NOT_EXIST_clazzInfo_ClazzAttributesResInitializer27 OBJECT_NOT_EXIST_clazzInfo_ClazzAttributesResInitializer27_instance;



} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
PERSIST_STORE_create_array(int length)
{
  return new ObjectArrayImpl<RPERSIST_STORE>(length);
}

//static
::acdk::lang::RObject
PERSIST_STORE_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class PERSIST_STORE_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PERSIST_STORE_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)PERSIST_STORE::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PERSIST_STORE_method_PERSIST_STORE__LRPERSIST_STORE__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new PERSIST_STORE();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PERSIST_STORE_method_PERSIST_STORE_II_LRPERSIST_STORE__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new PERSIST_STORE(args[0].getIntVar(), (CompletionStatus)args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PERSIST_STORE_method_PERSIST_STORE_INLRString__LRPERSIST_STORE__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new PERSIST_STORE((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PERSIST_STORE_method_PERSIST_STORE_INLRString_II_LRPERSIST_STORE__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new PERSIST_STORE((RString)args[0].getObjectVar(), args[1].getIntVar(), (CompletionStatus)args[2].getIntVar());
    return methinf;
  }
};


void ThrowException_PERSIST_STORE(IN(::acdk::lang::RThrowable) ex)
{
  throw RPERSIST_STORE(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _PERSIST_STORE_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* PERSIST_STORE_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* PERSIST_STORE_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PERSIST_STORE_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  PERSIST_STORE_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  PERSIST_STORE_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  PERSIST_STORE_MetainfoWrapper::PERSIST_STORE_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* PERSIST_STORE_methods_PERSIST_STORE__LRPERSIST_STORE__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* PERSIST_STORE_methods_PERSIST_STORE__LRPERSIST_STORE__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PERSIST_STORE_method_PERSIST_STORE__LRPERSIST_STORE_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "PERSIST_STORE", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  PERSIST_STORE::clazzInfo(), // return type
  "_0_PERSIST_STORE", // alternative name of method
  -1, // altlabelHashCode
  PERSIST_STORE_methods_PERSIST_STORE__LRPERSIST_STORE__args, // the arguments
  0, //arguments count
  PERSIST_STORE_methods_PERSIST_STORE__LRPERSIST_STORE__exceptions, // the declared exceptions
  PERSIST_STORE_MetainfoWrapper::PERSIST_STORE_method_PERSIST_STORE__LRPERSIST_STORE__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PERSIST_STORE_methods_PERSIST_STORE_II_LRPERSIST_STORE__arg_minor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo PERSIST_STORE_methods_PERSIST_STORE_II_LRPERSIST_STORE__arg_completed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "completed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PERSIST_STORE_methods_PERSIST_STORE_II_LRPERSIST_STORE__args[] = 
{
  &PERSIST_STORE_methods_PERSIST_STORE_II_LRPERSIST_STORE__arg_minor,
  &PERSIST_STORE_methods_PERSIST_STORE_II_LRPERSIST_STORE__arg_completed,
  0
};

::acdk::lang::dmi::ClazzInfo* PERSIST_STORE_methods_PERSIST_STORE_II_LRPERSIST_STORE__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PERSIST_STORE_method_PERSIST_STORE_II_LRPERSIST_STORE_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "PERSIST_STORE", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  PERSIST_STORE::clazzInfo(), // return type
  "_1_PERSIST_STORE", // alternative name of method
  -1, // altlabelHashCode
  PERSIST_STORE_methods_PERSIST_STORE_II_LRPERSIST_STORE__args, // the arguments
  0, //arguments count
  PERSIST_STORE_methods_PERSIST_STORE_II_LRPERSIST_STORE__exceptions, // the declared exceptions
  PERSIST_STORE_MetainfoWrapper::PERSIST_STORE_method_PERSIST_STORE_II_LRPERSIST_STORE__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PERSIST_STORE_methods_PERSIST_STORE_INLRString__LRPERSIST_STORE__arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PERSIST_STORE_methods_PERSIST_STORE_INLRString__LRPERSIST_STORE__args[] = 
{
  &PERSIST_STORE_methods_PERSIST_STORE_INLRString__LRPERSIST_STORE__arg_msg,
  0
};

::acdk::lang::dmi::ClazzInfo* PERSIST_STORE_methods_PERSIST_STORE_INLRString__LRPERSIST_STORE__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PERSIST_STORE_method_PERSIST_STORE_INLRString__LRPERSIST_STORE_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "PERSIST_STORE", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  PERSIST_STORE::clazzInfo(), // return type
  "_2_PERSIST_STORE", // alternative name of method
  -1, // altlabelHashCode
  PERSIST_STORE_methods_PERSIST_STORE_INLRString__LRPERSIST_STORE__args, // the arguments
  0, //arguments count
  PERSIST_STORE_methods_PERSIST_STORE_INLRString__LRPERSIST_STORE__exceptions, // the declared exceptions
  PERSIST_STORE_MetainfoWrapper::PERSIST_STORE_method_PERSIST_STORE_INLRString__LRPERSIST_STORE__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PERSIST_STORE_methods_PERSIST_STORE_INLRString_II_LRPERSIST_STORE__arg_reason = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "reason", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo PERSIST_STORE_methods_PERSIST_STORE_INLRString_II_LRPERSIST_STORE__arg_minor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo PERSIST_STORE_methods_PERSIST_STORE_INLRString_II_LRPERSIST_STORE__arg_completed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "completed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PERSIST_STORE_methods_PERSIST_STORE_INLRString_II_LRPERSIST_STORE__args[] = 
{
  &PERSIST_STORE_methods_PERSIST_STORE_INLRString_II_LRPERSIST_STORE__arg_reason,
  &PERSIST_STORE_methods_PERSIST_STORE_INLRString_II_LRPERSIST_STORE__arg_minor,
  &PERSIST_STORE_methods_PERSIST_STORE_INLRString_II_LRPERSIST_STORE__arg_completed,
  0
};

::acdk::lang::dmi::ClazzInfo* PERSIST_STORE_methods_PERSIST_STORE_INLRString_II_LRPERSIST_STORE__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PERSIST_STORE_method_PERSIST_STORE_INLRString_II_LRPERSIST_STORE_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "PERSIST_STORE", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  PERSIST_STORE::clazzInfo(), // return type
  "_3_PERSIST_STORE", // alternative name of method
  -1, // altlabelHashCode
  PERSIST_STORE_methods_PERSIST_STORE_INLRString_II_LRPERSIST_STORE__args, // the arguments
  0, //arguments count
  PERSIST_STORE_methods_PERSIST_STORE_INLRString_II_LRPERSIST_STORE__exceptions, // the declared exceptions
  PERSIST_STORE_MetainfoWrapper::PERSIST_STORE_method_PERSIST_STORE_INLRString_II_LRPERSIST_STORE__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _PERSIST_STORE_methods[] = 
{
  &PERSIST_STORE_method_GetClass__L_acdk_lang_RClass_,
  &PERSIST_STORE_method_PERSIST_STORE__LRPERSIST_STORE_,
  &PERSIST_STORE_method_PERSIST_STORE_II_LRPERSIST_STORE_,
  &PERSIST_STORE_method_PERSIST_STORE_INLRString__LRPERSIST_STORE_,
  &PERSIST_STORE_method_PERSIST_STORE_INLRString_II_LRPERSIST_STORE_,
  0
};


struct PERSIST_STORE_MetaInfoInitializer
{  PERSIST_STORE_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = PERSIST_STORE::clazzInfo();
    ci->fields =  _PERSIST_STORE_fields;
    ci->methods =  _PERSIST_STORE_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
PERSIST_STORE_MetaInfoInitializer PERSIST_STORE_MetaInfoInitializer_staticinstance__;


struct PERSIST_STORE_clazzInfo_ClazzAttributesResInitializer28
{
  PERSIST_STORE_clazzInfo_ClazzAttributesResInitializer28()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&PERSIST_STORE_methods_PERSIST_STORE_II_LRPERSIST_STORE__arg_completed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CompletionStatusMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&PERSIST_STORE_methods_PERSIST_STORE_INLRString_II_LRPERSIST_STORE__arg_completed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CompletionStatusMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)PERSIST_STORE::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_PERSIST_STORE));
  }
};

PERSIST_STORE_clazzInfo_ClazzAttributesResInitializer28 PERSIST_STORE_clazzInfo_ClazzAttributesResInitializer28_instance;



} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
TRANSACTION_REQUIRED_create_array(int length)
{
  return new ObjectArrayImpl<RTRANSACTION_REQUIRED>(length);
}

//static
::acdk::lang::RObject
TRANSACTION_REQUIRED_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TRANSACTION_REQUIRED_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TRANSACTION_REQUIRED_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TRANSACTION_REQUIRED::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TRANSACTION_REQUIRED_method_TRANSACTION_REQUIRED__LRTRANSACTION_REQUIRED__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TRANSACTION_REQUIRED();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TRANSACTION_REQUIRED_method_TRANSACTION_REQUIRED_II_LRTRANSACTION_REQUIRED__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TRANSACTION_REQUIRED(args[0].getIntVar(), (CompletionStatus)args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TRANSACTION_REQUIRED_method_TRANSACTION_REQUIRED_INLRString__LRTRANSACTION_REQUIRED__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TRANSACTION_REQUIRED((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TRANSACTION_REQUIRED_method_TRANSACTION_REQUIRED_INLRString_II_LRTRANSACTION_REQUIRED__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TRANSACTION_REQUIRED((RString)args[0].getObjectVar(), args[1].getIntVar(), (CompletionStatus)args[2].getIntVar());
    return methinf;
  }
};


void ThrowException_TRANSACTION_REQUIRED(IN(::acdk::lang::RThrowable) ex)
{
  throw RTRANSACTION_REQUIRED(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _TRANSACTION_REQUIRED_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TRANSACTION_REQUIRED_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TRANSACTION_REQUIRED_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TRANSACTION_REQUIRED_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TRANSACTION_REQUIRED_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TRANSACTION_REQUIRED_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TRANSACTION_REQUIRED_MetainfoWrapper::TRANSACTION_REQUIRED_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TRANSACTION_REQUIRED_methods_TRANSACTION_REQUIRED__LRTRANSACTION_REQUIRED__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TRANSACTION_REQUIRED_methods_TRANSACTION_REQUIRED__LRTRANSACTION_REQUIRED__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TRANSACTION_REQUIRED_method_TRANSACTION_REQUIRED__LRTRANSACTION_REQUIRED_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TRANSACTION_REQUIRED", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TRANSACTION_REQUIRED::clazzInfo(), // return type
  "_0_TRANSACTION_REQUIRED", // alternative name of method
  -1, // altlabelHashCode
  TRANSACTION_REQUIRED_methods_TRANSACTION_REQUIRED__LRTRANSACTION_REQUIRED__args, // the arguments
  0, //arguments count
  TRANSACTION_REQUIRED_methods_TRANSACTION_REQUIRED__LRTRANSACTION_REQUIRED__exceptions, // the declared exceptions
  TRANSACTION_REQUIRED_MetainfoWrapper::TRANSACTION_REQUIRED_method_TRANSACTION_REQUIRED__LRTRANSACTION_REQUIRED__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TRANSACTION_REQUIRED_methods_TRANSACTION_REQUIRED_II_LRTRANSACTION_REQUIRED__arg_minor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TRANSACTION_REQUIRED_methods_TRANSACTION_REQUIRED_II_LRTRANSACTION_REQUIRED__arg_completed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "completed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TRANSACTION_REQUIRED_methods_TRANSACTION_REQUIRED_II_LRTRANSACTION_REQUIRED__args[] = 
{
  &TRANSACTION_REQUIRED_methods_TRANSACTION_REQUIRED_II_LRTRANSACTION_REQUIRED__arg_minor,
  &TRANSACTION_REQUIRED_methods_TRANSACTION_REQUIRED_II_LRTRANSACTION_REQUIRED__arg_completed,
  0
};

::acdk::lang::dmi::ClazzInfo* TRANSACTION_REQUIRED_methods_TRANSACTION_REQUIRED_II_LRTRANSACTION_REQUIRED__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TRANSACTION_REQUIRED_method_TRANSACTION_REQUIRED_II_LRTRANSACTION_REQUIRED_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TRANSACTION_REQUIRED", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TRANSACTION_REQUIRED::clazzInfo(), // return type
  "_1_TRANSACTION_REQUIRED", // alternative name of method
  -1, // altlabelHashCode
  TRANSACTION_REQUIRED_methods_TRANSACTION_REQUIRED_II_LRTRANSACTION_REQUIRED__args, // the arguments
  0, //arguments count
  TRANSACTION_REQUIRED_methods_TRANSACTION_REQUIRED_II_LRTRANSACTION_REQUIRED__exceptions, // the declared exceptions
  TRANSACTION_REQUIRED_MetainfoWrapper::TRANSACTION_REQUIRED_method_TRANSACTION_REQUIRED_II_LRTRANSACTION_REQUIRED__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TRANSACTION_REQUIRED_methods_TRANSACTION_REQUIRED_INLRString__LRTRANSACTION_REQUIRED__arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TRANSACTION_REQUIRED_methods_TRANSACTION_REQUIRED_INLRString__LRTRANSACTION_REQUIRED__args[] = 
{
  &TRANSACTION_REQUIRED_methods_TRANSACTION_REQUIRED_INLRString__LRTRANSACTION_REQUIRED__arg_msg,
  0
};

::acdk::lang::dmi::ClazzInfo* TRANSACTION_REQUIRED_methods_TRANSACTION_REQUIRED_INLRString__LRTRANSACTION_REQUIRED__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TRANSACTION_REQUIRED_method_TRANSACTION_REQUIRED_INLRString__LRTRANSACTION_REQUIRED_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TRANSACTION_REQUIRED", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TRANSACTION_REQUIRED::clazzInfo(), // return type
  "_2_TRANSACTION_REQUIRED", // alternative name of method
  -1, // altlabelHashCode
  TRANSACTION_REQUIRED_methods_TRANSACTION_REQUIRED_INLRString__LRTRANSACTION_REQUIRED__args, // the arguments
  0, //arguments count
  TRANSACTION_REQUIRED_methods_TRANSACTION_REQUIRED_INLRString__LRTRANSACTION_REQUIRED__exceptions, // the declared exceptions
  TRANSACTION_REQUIRED_MetainfoWrapper::TRANSACTION_REQUIRED_method_TRANSACTION_REQUIRED_INLRString__LRTRANSACTION_REQUIRED__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TRANSACTION_REQUIRED_methods_TRANSACTION_REQUIRED_INLRString_II_LRTRANSACTION_REQUIRED__arg_reason = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "reason", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TRANSACTION_REQUIRED_methods_TRANSACTION_REQUIRED_INLRString_II_LRTRANSACTION_REQUIRED__arg_minor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TRANSACTION_REQUIRED_methods_TRANSACTION_REQUIRED_INLRString_II_LRTRANSACTION_REQUIRED__arg_completed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "completed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TRANSACTION_REQUIRED_methods_TRANSACTION_REQUIRED_INLRString_II_LRTRANSACTION_REQUIRED__args[] = 
{
  &TRANSACTION_REQUIRED_methods_TRANSACTION_REQUIRED_INLRString_II_LRTRANSACTION_REQUIRED__arg_reason,
  &TRANSACTION_REQUIRED_methods_TRANSACTION_REQUIRED_INLRString_II_LRTRANSACTION_REQUIRED__arg_minor,
  &TRANSACTION_REQUIRED_methods_TRANSACTION_REQUIRED_INLRString_II_LRTRANSACTION_REQUIRED__arg_completed,
  0
};

::acdk::lang::dmi::ClazzInfo* TRANSACTION_REQUIRED_methods_TRANSACTION_REQUIRED_INLRString_II_LRTRANSACTION_REQUIRED__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TRANSACTION_REQUIRED_method_TRANSACTION_REQUIRED_INLRString_II_LRTRANSACTION_REQUIRED_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TRANSACTION_REQUIRED", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TRANSACTION_REQUIRED::clazzInfo(), // return type
  "_3_TRANSACTION_REQUIRED", // alternative name of method
  -1, // altlabelHashCode
  TRANSACTION_REQUIRED_methods_TRANSACTION_REQUIRED_INLRString_II_LRTRANSACTION_REQUIRED__args, // the arguments
  0, //arguments count
  TRANSACTION_REQUIRED_methods_TRANSACTION_REQUIRED_INLRString_II_LRTRANSACTION_REQUIRED__exceptions, // the declared exceptions
  TRANSACTION_REQUIRED_MetainfoWrapper::TRANSACTION_REQUIRED_method_TRANSACTION_REQUIRED_INLRString_II_LRTRANSACTION_REQUIRED__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TRANSACTION_REQUIRED_methods[] = 
{
  &TRANSACTION_REQUIRED_method_GetClass__L_acdk_lang_RClass_,
  &TRANSACTION_REQUIRED_method_TRANSACTION_REQUIRED__LRTRANSACTION_REQUIRED_,
  &TRANSACTION_REQUIRED_method_TRANSACTION_REQUIRED_II_LRTRANSACTION_REQUIRED_,
  &TRANSACTION_REQUIRED_method_TRANSACTION_REQUIRED_INLRString__LRTRANSACTION_REQUIRED_,
  &TRANSACTION_REQUIRED_method_TRANSACTION_REQUIRED_INLRString_II_LRTRANSACTION_REQUIRED_,
  0
};


struct TRANSACTION_REQUIRED_MetaInfoInitializer
{  TRANSACTION_REQUIRED_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TRANSACTION_REQUIRED::clazzInfo();
    ci->fields =  _TRANSACTION_REQUIRED_fields;
    ci->methods =  _TRANSACTION_REQUIRED_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TRANSACTION_REQUIRED_MetaInfoInitializer TRANSACTION_REQUIRED_MetaInfoInitializer_staticinstance__;


struct TRANSACTION_REQUIRED_clazzInfo_ClazzAttributesResInitializer29
{
  TRANSACTION_REQUIRED_clazzInfo_ClazzAttributesResInitializer29()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&TRANSACTION_REQUIRED_methods_TRANSACTION_REQUIRED_II_LRTRANSACTION_REQUIRED__arg_completed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CompletionStatusMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&TRANSACTION_REQUIRED_methods_TRANSACTION_REQUIRED_INLRString_II_LRTRANSACTION_REQUIRED__arg_completed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CompletionStatusMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)TRANSACTION_REQUIRED::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_TRANSACTION_REQUIRED));
  }
};

TRANSACTION_REQUIRED_clazzInfo_ClazzAttributesResInitializer29 TRANSACTION_REQUIRED_clazzInfo_ClazzAttributesResInitializer29_instance;



} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
TRANSACTION_ROLLEDBACK_create_array(int length)
{
  return new ObjectArrayImpl<RTRANSACTION_ROLLEDBACK>(length);
}

//static
::acdk::lang::RObject
TRANSACTION_ROLLEDBACK_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TRANSACTION_ROLLEDBACK_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TRANSACTION_ROLLEDBACK_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TRANSACTION_ROLLEDBACK::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TRANSACTION_ROLLEDBACK_method_TRANSACTION_ROLLEDBACK__LRTRANSACTION_ROLLEDBACK__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TRANSACTION_ROLLEDBACK();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TRANSACTION_ROLLEDBACK_method_TRANSACTION_ROLLEDBACK_II_LRTRANSACTION_ROLLEDBACK__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TRANSACTION_ROLLEDBACK(args[0].getIntVar(), (CompletionStatus)args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TRANSACTION_ROLLEDBACK_method_TRANSACTION_ROLLEDBACK_INLRString__LRTRANSACTION_ROLLEDBACK__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TRANSACTION_ROLLEDBACK((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TRANSACTION_ROLLEDBACK_method_TRANSACTION_ROLLEDBACK_INLRString_II_LRTRANSACTION_ROLLEDBACK__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TRANSACTION_ROLLEDBACK((RString)args[0].getObjectVar(), args[1].getIntVar(), (CompletionStatus)args[2].getIntVar());
    return methinf;
  }
};


void ThrowException_TRANSACTION_ROLLEDBACK(IN(::acdk::lang::RThrowable) ex)
{
  throw RTRANSACTION_ROLLEDBACK(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _TRANSACTION_ROLLEDBACK_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TRANSACTION_ROLLEDBACK_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TRANSACTION_ROLLEDBACK_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TRANSACTION_ROLLEDBACK_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TRANSACTION_ROLLEDBACK_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TRANSACTION_ROLLEDBACK_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TRANSACTION_ROLLEDBACK_MetainfoWrapper::TRANSACTION_ROLLEDBACK_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TRANSACTION_ROLLEDBACK_methods_TRANSACTION_ROLLEDBACK__LRTRANSACTION_ROLLEDBACK__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TRANSACTION_ROLLEDBACK_methods_TRANSACTION_ROLLEDBACK__LRTRANSACTION_ROLLEDBACK__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TRANSACTION_ROLLEDBACK_method_TRANSACTION_ROLLEDBACK__LRTRANSACTION_ROLLEDBACK_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TRANSACTION_ROLLEDBACK", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TRANSACTION_ROLLEDBACK::clazzInfo(), // return type
  "_0_TRANSACTION_ROLLEDBACK", // alternative name of method
  -1, // altlabelHashCode
  TRANSACTION_ROLLEDBACK_methods_TRANSACTION_ROLLEDBACK__LRTRANSACTION_ROLLEDBACK__args, // the arguments
  0, //arguments count
  TRANSACTION_ROLLEDBACK_methods_TRANSACTION_ROLLEDBACK__LRTRANSACTION_ROLLEDBACK__exceptions, // the declared exceptions
  TRANSACTION_ROLLEDBACK_MetainfoWrapper::TRANSACTION_ROLLEDBACK_method_TRANSACTION_ROLLEDBACK__LRTRANSACTION_ROLLEDBACK__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TRANSACTION_ROLLEDBACK_methods_TRANSACTION_ROLLEDBACK_II_LRTRANSACTION_ROLLEDBACK__arg_minor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TRANSACTION_ROLLEDBACK_methods_TRANSACTION_ROLLEDBACK_II_LRTRANSACTION_ROLLEDBACK__arg_completed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "completed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TRANSACTION_ROLLEDBACK_methods_TRANSACTION_ROLLEDBACK_II_LRTRANSACTION_ROLLEDBACK__args[] = 
{
  &TRANSACTION_ROLLEDBACK_methods_TRANSACTION_ROLLEDBACK_II_LRTRANSACTION_ROLLEDBACK__arg_minor,
  &TRANSACTION_ROLLEDBACK_methods_TRANSACTION_ROLLEDBACK_II_LRTRANSACTION_ROLLEDBACK__arg_completed,
  0
};

::acdk::lang::dmi::ClazzInfo* TRANSACTION_ROLLEDBACK_methods_TRANSACTION_ROLLEDBACK_II_LRTRANSACTION_ROLLEDBACK__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TRANSACTION_ROLLEDBACK_method_TRANSACTION_ROLLEDBACK_II_LRTRANSACTION_ROLLEDBACK_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TRANSACTION_ROLLEDBACK", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TRANSACTION_ROLLEDBACK::clazzInfo(), // return type
  "_1_TRANSACTION_ROLLEDBACK", // alternative name of method
  -1, // altlabelHashCode
  TRANSACTION_ROLLEDBACK_methods_TRANSACTION_ROLLEDBACK_II_LRTRANSACTION_ROLLEDBACK__args, // the arguments
  0, //arguments count
  TRANSACTION_ROLLEDBACK_methods_TRANSACTION_ROLLEDBACK_II_LRTRANSACTION_ROLLEDBACK__exceptions, // the declared exceptions
  TRANSACTION_ROLLEDBACK_MetainfoWrapper::TRANSACTION_ROLLEDBACK_method_TRANSACTION_ROLLEDBACK_II_LRTRANSACTION_ROLLEDBACK__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TRANSACTION_ROLLEDBACK_methods_TRANSACTION_ROLLEDBACK_INLRString__LRTRANSACTION_ROLLEDBACK__arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TRANSACTION_ROLLEDBACK_methods_TRANSACTION_ROLLEDBACK_INLRString__LRTRANSACTION_ROLLEDBACK__args[] = 
{
  &TRANSACTION_ROLLEDBACK_methods_TRANSACTION_ROLLEDBACK_INLRString__LRTRANSACTION_ROLLEDBACK__arg_msg,
  0
};

::acdk::lang::dmi::ClazzInfo* TRANSACTION_ROLLEDBACK_methods_TRANSACTION_ROLLEDBACK_INLRString__LRTRANSACTION_ROLLEDBACK__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TRANSACTION_ROLLEDBACK_method_TRANSACTION_ROLLEDBACK_INLRString__LRTRANSACTION_ROLLEDBACK_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TRANSACTION_ROLLEDBACK", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TRANSACTION_ROLLEDBACK::clazzInfo(), // return type
  "_2_TRANSACTION_ROLLEDBACK", // alternative name of method
  -1, // altlabelHashCode
  TRANSACTION_ROLLEDBACK_methods_TRANSACTION_ROLLEDBACK_INLRString__LRTRANSACTION_ROLLEDBACK__args, // the arguments
  0, //arguments count
  TRANSACTION_ROLLEDBACK_methods_TRANSACTION_ROLLEDBACK_INLRString__LRTRANSACTION_ROLLEDBACK__exceptions, // the declared exceptions
  TRANSACTION_ROLLEDBACK_MetainfoWrapper::TRANSACTION_ROLLEDBACK_method_TRANSACTION_ROLLEDBACK_INLRString__LRTRANSACTION_ROLLEDBACK__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TRANSACTION_ROLLEDBACK_methods_TRANSACTION_ROLLEDBACK_INLRString_II_LRTRANSACTION_ROLLEDBACK__arg_reason = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "reason", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TRANSACTION_ROLLEDBACK_methods_TRANSACTION_ROLLEDBACK_INLRString_II_LRTRANSACTION_ROLLEDBACK__arg_minor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TRANSACTION_ROLLEDBACK_methods_TRANSACTION_ROLLEDBACK_INLRString_II_LRTRANSACTION_ROLLEDBACK__arg_completed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "completed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TRANSACTION_ROLLEDBACK_methods_TRANSACTION_ROLLEDBACK_INLRString_II_LRTRANSACTION_ROLLEDBACK__args[] = 
{
  &TRANSACTION_ROLLEDBACK_methods_TRANSACTION_ROLLEDBACK_INLRString_II_LRTRANSACTION_ROLLEDBACK__arg_reason,
  &TRANSACTION_ROLLEDBACK_methods_TRANSACTION_ROLLEDBACK_INLRString_II_LRTRANSACTION_ROLLEDBACK__arg_minor,
  &TRANSACTION_ROLLEDBACK_methods_TRANSACTION_ROLLEDBACK_INLRString_II_LRTRANSACTION_ROLLEDBACK__arg_completed,
  0
};

::acdk::lang::dmi::ClazzInfo* TRANSACTION_ROLLEDBACK_methods_TRANSACTION_ROLLEDBACK_INLRString_II_LRTRANSACTION_ROLLEDBACK__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TRANSACTION_ROLLEDBACK_method_TRANSACTION_ROLLEDBACK_INLRString_II_LRTRANSACTION_ROLLEDBACK_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TRANSACTION_ROLLEDBACK", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TRANSACTION_ROLLEDBACK::clazzInfo(), // return type
  "_3_TRANSACTION_ROLLEDBACK", // alternative name of method
  -1, // altlabelHashCode
  TRANSACTION_ROLLEDBACK_methods_TRANSACTION_ROLLEDBACK_INLRString_II_LRTRANSACTION_ROLLEDBACK__args, // the arguments
  0, //arguments count
  TRANSACTION_ROLLEDBACK_methods_TRANSACTION_ROLLEDBACK_INLRString_II_LRTRANSACTION_ROLLEDBACK__exceptions, // the declared exceptions
  TRANSACTION_ROLLEDBACK_MetainfoWrapper::TRANSACTION_ROLLEDBACK_method_TRANSACTION_ROLLEDBACK_INLRString_II_LRTRANSACTION_ROLLEDBACK__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TRANSACTION_ROLLEDBACK_methods[] = 
{
  &TRANSACTION_ROLLEDBACK_method_GetClass__L_acdk_lang_RClass_,
  &TRANSACTION_ROLLEDBACK_method_TRANSACTION_ROLLEDBACK__LRTRANSACTION_ROLLEDBACK_,
  &TRANSACTION_ROLLEDBACK_method_TRANSACTION_ROLLEDBACK_II_LRTRANSACTION_ROLLEDBACK_,
  &TRANSACTION_ROLLEDBACK_method_TRANSACTION_ROLLEDBACK_INLRString__LRTRANSACTION_ROLLEDBACK_,
  &TRANSACTION_ROLLEDBACK_method_TRANSACTION_ROLLEDBACK_INLRString_II_LRTRANSACTION_ROLLEDBACK_,
  0
};


struct TRANSACTION_ROLLEDBACK_MetaInfoInitializer
{  TRANSACTION_ROLLEDBACK_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TRANSACTION_ROLLEDBACK::clazzInfo();
    ci->fields =  _TRANSACTION_ROLLEDBACK_fields;
    ci->methods =  _TRANSACTION_ROLLEDBACK_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TRANSACTION_ROLLEDBACK_MetaInfoInitializer TRANSACTION_ROLLEDBACK_MetaInfoInitializer_staticinstance__;


struct TRANSACTION_ROLLEDBACK_clazzInfo_ClazzAttributesResInitializer30
{
  TRANSACTION_ROLLEDBACK_clazzInfo_ClazzAttributesResInitializer30()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&TRANSACTION_ROLLEDBACK_methods_TRANSACTION_ROLLEDBACK_II_LRTRANSACTION_ROLLEDBACK__arg_completed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CompletionStatusMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&TRANSACTION_ROLLEDBACK_methods_TRANSACTION_ROLLEDBACK_INLRString_II_LRTRANSACTION_ROLLEDBACK__arg_completed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CompletionStatusMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)TRANSACTION_ROLLEDBACK::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_TRANSACTION_ROLLEDBACK));
  }
};

TRANSACTION_ROLLEDBACK_clazzInfo_ClazzAttributesResInitializer30 TRANSACTION_ROLLEDBACK_clazzInfo_ClazzAttributesResInitializer30_instance;



} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
TRANSIENT_create_array(int length)
{
  return new ObjectArrayImpl<RTRANSIENT>(length);
}

//static
::acdk::lang::RObject
TRANSIENT_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TRANSIENT_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TRANSIENT_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TRANSIENT::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TRANSIENT_method_TRANSIENT__LRTRANSIENT__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TRANSIENT();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TRANSIENT_method_TRANSIENT_II_LRTRANSIENT__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TRANSIENT(args[0].getIntVar(), (CompletionStatus)args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TRANSIENT_method_TRANSIENT_INLRString__LRTRANSIENT__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TRANSIENT((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TRANSIENT_method_TRANSIENT_INLRString_II_LRTRANSIENT__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TRANSIENT((RString)args[0].getObjectVar(), args[1].getIntVar(), (CompletionStatus)args[2].getIntVar());
    return methinf;
  }
};


void ThrowException_TRANSIENT(IN(::acdk::lang::RThrowable) ex)
{
  throw RTRANSIENT(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _TRANSIENT_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TRANSIENT_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TRANSIENT_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TRANSIENT_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TRANSIENT_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TRANSIENT_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TRANSIENT_MetainfoWrapper::TRANSIENT_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TRANSIENT_methods_TRANSIENT__LRTRANSIENT__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TRANSIENT_methods_TRANSIENT__LRTRANSIENT__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TRANSIENT_method_TRANSIENT__LRTRANSIENT_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TRANSIENT", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TRANSIENT::clazzInfo(), // return type
  "_0_TRANSIENT", // alternative name of method
  -1, // altlabelHashCode
  TRANSIENT_methods_TRANSIENT__LRTRANSIENT__args, // the arguments
  0, //arguments count
  TRANSIENT_methods_TRANSIENT__LRTRANSIENT__exceptions, // the declared exceptions
  TRANSIENT_MetainfoWrapper::TRANSIENT_method_TRANSIENT__LRTRANSIENT__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TRANSIENT_methods_TRANSIENT_II_LRTRANSIENT__arg_minor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TRANSIENT_methods_TRANSIENT_II_LRTRANSIENT__arg_completed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "completed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TRANSIENT_methods_TRANSIENT_II_LRTRANSIENT__args[] = 
{
  &TRANSIENT_methods_TRANSIENT_II_LRTRANSIENT__arg_minor,
  &TRANSIENT_methods_TRANSIENT_II_LRTRANSIENT__arg_completed,
  0
};

::acdk::lang::dmi::ClazzInfo* TRANSIENT_methods_TRANSIENT_II_LRTRANSIENT__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TRANSIENT_method_TRANSIENT_II_LRTRANSIENT_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TRANSIENT", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TRANSIENT::clazzInfo(), // return type
  "_1_TRANSIENT", // alternative name of method
  -1, // altlabelHashCode
  TRANSIENT_methods_TRANSIENT_II_LRTRANSIENT__args, // the arguments
  0, //arguments count
  TRANSIENT_methods_TRANSIENT_II_LRTRANSIENT__exceptions, // the declared exceptions
  TRANSIENT_MetainfoWrapper::TRANSIENT_method_TRANSIENT_II_LRTRANSIENT__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TRANSIENT_methods_TRANSIENT_INLRString__LRTRANSIENT__arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TRANSIENT_methods_TRANSIENT_INLRString__LRTRANSIENT__args[] = 
{
  &TRANSIENT_methods_TRANSIENT_INLRString__LRTRANSIENT__arg_msg,
  0
};

::acdk::lang::dmi::ClazzInfo* TRANSIENT_methods_TRANSIENT_INLRString__LRTRANSIENT__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TRANSIENT_method_TRANSIENT_INLRString__LRTRANSIENT_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TRANSIENT", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TRANSIENT::clazzInfo(), // return type
  "_2_TRANSIENT", // alternative name of method
  -1, // altlabelHashCode
  TRANSIENT_methods_TRANSIENT_INLRString__LRTRANSIENT__args, // the arguments
  0, //arguments count
  TRANSIENT_methods_TRANSIENT_INLRString__LRTRANSIENT__exceptions, // the declared exceptions
  TRANSIENT_MetainfoWrapper::TRANSIENT_method_TRANSIENT_INLRString__LRTRANSIENT__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TRANSIENT_methods_TRANSIENT_INLRString_II_LRTRANSIENT__arg_reason = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "reason", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TRANSIENT_methods_TRANSIENT_INLRString_II_LRTRANSIENT__arg_minor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TRANSIENT_methods_TRANSIENT_INLRString_II_LRTRANSIENT__arg_completed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "completed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TRANSIENT_methods_TRANSIENT_INLRString_II_LRTRANSIENT__args[] = 
{
  &TRANSIENT_methods_TRANSIENT_INLRString_II_LRTRANSIENT__arg_reason,
  &TRANSIENT_methods_TRANSIENT_INLRString_II_LRTRANSIENT__arg_minor,
  &TRANSIENT_methods_TRANSIENT_INLRString_II_LRTRANSIENT__arg_completed,
  0
};

::acdk::lang::dmi::ClazzInfo* TRANSIENT_methods_TRANSIENT_INLRString_II_LRTRANSIENT__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TRANSIENT_method_TRANSIENT_INLRString_II_LRTRANSIENT_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TRANSIENT", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TRANSIENT::clazzInfo(), // return type
  "_3_TRANSIENT", // alternative name of method
  -1, // altlabelHashCode
  TRANSIENT_methods_TRANSIENT_INLRString_II_LRTRANSIENT__args, // the arguments
  0, //arguments count
  TRANSIENT_methods_TRANSIENT_INLRString_II_LRTRANSIENT__exceptions, // the declared exceptions
  TRANSIENT_MetainfoWrapper::TRANSIENT_method_TRANSIENT_INLRString_II_LRTRANSIENT__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TRANSIENT_methods[] = 
{
  &TRANSIENT_method_GetClass__L_acdk_lang_RClass_,
  &TRANSIENT_method_TRANSIENT__LRTRANSIENT_,
  &TRANSIENT_method_TRANSIENT_II_LRTRANSIENT_,
  &TRANSIENT_method_TRANSIENT_INLRString__LRTRANSIENT_,
  &TRANSIENT_method_TRANSIENT_INLRString_II_LRTRANSIENT_,
  0
};


struct TRANSIENT_MetaInfoInitializer
{  TRANSIENT_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TRANSIENT::clazzInfo();
    ci->fields =  _TRANSIENT_fields;
    ci->methods =  _TRANSIENT_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TRANSIENT_MetaInfoInitializer TRANSIENT_MetaInfoInitializer_staticinstance__;


struct TRANSIENT_clazzInfo_ClazzAttributesResInitializer31
{
  TRANSIENT_clazzInfo_ClazzAttributesResInitializer31()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&TRANSIENT_methods_TRANSIENT_II_LRTRANSIENT__arg_completed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CompletionStatusMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&TRANSIENT_methods_TRANSIENT_INLRString_II_LRTRANSIENT__arg_completed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CompletionStatusMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)TRANSIENT::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_TRANSIENT));
  }
};

TRANSIENT_clazzInfo_ClazzAttributesResInitializer31 TRANSIENT_clazzInfo_ClazzAttributesResInitializer31_instance;



} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
INV_OBJREF_create_array(int length)
{
  return new ObjectArrayImpl<RINV_OBJREF>(length);
}

//static
::acdk::lang::RObject
INV_OBJREF_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class INV_OBJREF_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  INV_OBJREF_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)INV_OBJREF::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  INV_OBJREF_method_INV_OBJREF__LRINV_OBJREF__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new INV_OBJREF();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  INV_OBJREF_method_INV_OBJREF_II_LRINV_OBJREF__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new INV_OBJREF(args[0].getIntVar(), (CompletionStatus)args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  INV_OBJREF_method_INV_OBJREF_INLRString__LRINV_OBJREF__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new INV_OBJREF((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  INV_OBJREF_method_INV_OBJREF_INLRString_II_LRINV_OBJREF__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new INV_OBJREF((RString)args[0].getObjectVar(), args[1].getIntVar(), (CompletionStatus)args[2].getIntVar());
    return methinf;
  }
};


void ThrowException_INV_OBJREF(IN(::acdk::lang::RThrowable) ex)
{
  throw RINV_OBJREF(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _INV_OBJREF_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* INV_OBJREF_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* INV_OBJREF_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo INV_OBJREF_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  INV_OBJREF_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  INV_OBJREF_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  INV_OBJREF_MetainfoWrapper::INV_OBJREF_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* INV_OBJREF_methods_INV_OBJREF__LRINV_OBJREF__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* INV_OBJREF_methods_INV_OBJREF__LRINV_OBJREF__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo INV_OBJREF_method_INV_OBJREF__LRINV_OBJREF_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "INV_OBJREF", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  INV_OBJREF::clazzInfo(), // return type
  "_0_INV_OBJREF", // alternative name of method
  -1, // altlabelHashCode
  INV_OBJREF_methods_INV_OBJREF__LRINV_OBJREF__args, // the arguments
  0, //arguments count
  INV_OBJREF_methods_INV_OBJREF__LRINV_OBJREF__exceptions, // the declared exceptions
  INV_OBJREF_MetainfoWrapper::INV_OBJREF_method_INV_OBJREF__LRINV_OBJREF__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo INV_OBJREF_methods_INV_OBJREF_II_LRINV_OBJREF__arg_minor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo INV_OBJREF_methods_INV_OBJREF_II_LRINV_OBJREF__arg_completed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "completed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* INV_OBJREF_methods_INV_OBJREF_II_LRINV_OBJREF__args[] = 
{
  &INV_OBJREF_methods_INV_OBJREF_II_LRINV_OBJREF__arg_minor,
  &INV_OBJREF_methods_INV_OBJREF_II_LRINV_OBJREF__arg_completed,
  0
};

::acdk::lang::dmi::ClazzInfo* INV_OBJREF_methods_INV_OBJREF_II_LRINV_OBJREF__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo INV_OBJREF_method_INV_OBJREF_II_LRINV_OBJREF_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "INV_OBJREF", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  INV_OBJREF::clazzInfo(), // return type
  "_1_INV_OBJREF", // alternative name of method
  -1, // altlabelHashCode
  INV_OBJREF_methods_INV_OBJREF_II_LRINV_OBJREF__args, // the arguments
  0, //arguments count
  INV_OBJREF_methods_INV_OBJREF_II_LRINV_OBJREF__exceptions, // the declared exceptions
  INV_OBJREF_MetainfoWrapper::INV_OBJREF_method_INV_OBJREF_II_LRINV_OBJREF__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo INV_OBJREF_methods_INV_OBJREF_INLRString__LRINV_OBJREF__arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* INV_OBJREF_methods_INV_OBJREF_INLRString__LRINV_OBJREF__args[] = 
{
  &INV_OBJREF_methods_INV_OBJREF_INLRString__LRINV_OBJREF__arg_msg,
  0
};

::acdk::lang::dmi::ClazzInfo* INV_OBJREF_methods_INV_OBJREF_INLRString__LRINV_OBJREF__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo INV_OBJREF_method_INV_OBJREF_INLRString__LRINV_OBJREF_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "INV_OBJREF", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  INV_OBJREF::clazzInfo(), // return type
  "_2_INV_OBJREF", // alternative name of method
  -1, // altlabelHashCode
  INV_OBJREF_methods_INV_OBJREF_INLRString__LRINV_OBJREF__args, // the arguments
  0, //arguments count
  INV_OBJREF_methods_INV_OBJREF_INLRString__LRINV_OBJREF__exceptions, // the declared exceptions
  INV_OBJREF_MetainfoWrapper::INV_OBJREF_method_INV_OBJREF_INLRString__LRINV_OBJREF__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo INV_OBJREF_methods_INV_OBJREF_INLRString_II_LRINV_OBJREF__arg_reason = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "reason", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo INV_OBJREF_methods_INV_OBJREF_INLRString_II_LRINV_OBJREF__arg_minor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo INV_OBJREF_methods_INV_OBJREF_INLRString_II_LRINV_OBJREF__arg_completed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "completed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* INV_OBJREF_methods_INV_OBJREF_INLRString_II_LRINV_OBJREF__args[] = 
{
  &INV_OBJREF_methods_INV_OBJREF_INLRString_II_LRINV_OBJREF__arg_reason,
  &INV_OBJREF_methods_INV_OBJREF_INLRString_II_LRINV_OBJREF__arg_minor,
  &INV_OBJREF_methods_INV_OBJREF_INLRString_II_LRINV_OBJREF__arg_completed,
  0
};

::acdk::lang::dmi::ClazzInfo* INV_OBJREF_methods_INV_OBJREF_INLRString_II_LRINV_OBJREF__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo INV_OBJREF_method_INV_OBJREF_INLRString_II_LRINV_OBJREF_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "INV_OBJREF", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  INV_OBJREF::clazzInfo(), // return type
  "_3_INV_OBJREF", // alternative name of method
  -1, // altlabelHashCode
  INV_OBJREF_methods_INV_OBJREF_INLRString_II_LRINV_OBJREF__args, // the arguments
  0, //arguments count
  INV_OBJREF_methods_INV_OBJREF_INLRString_II_LRINV_OBJREF__exceptions, // the declared exceptions
  INV_OBJREF_MetainfoWrapper::INV_OBJREF_method_INV_OBJREF_INLRString_II_LRINV_OBJREF__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _INV_OBJREF_methods[] = 
{
  &INV_OBJREF_method_GetClass__L_acdk_lang_RClass_,
  &INV_OBJREF_method_INV_OBJREF__LRINV_OBJREF_,
  &INV_OBJREF_method_INV_OBJREF_II_LRINV_OBJREF_,
  &INV_OBJREF_method_INV_OBJREF_INLRString__LRINV_OBJREF_,
  &INV_OBJREF_method_INV_OBJREF_INLRString_II_LRINV_OBJREF_,
  0
};


struct INV_OBJREF_MetaInfoInitializer
{  INV_OBJREF_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = INV_OBJREF::clazzInfo();
    ci->fields =  _INV_OBJREF_fields;
    ci->methods =  _INV_OBJREF_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
INV_OBJREF_MetaInfoInitializer INV_OBJREF_MetaInfoInitializer_staticinstance__;


struct INV_OBJREF_clazzInfo_ClazzAttributesResInitializer32
{
  INV_OBJREF_clazzInfo_ClazzAttributesResInitializer32()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&INV_OBJREF_methods_INV_OBJREF_II_LRINV_OBJREF__arg_completed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CompletionStatusMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&INV_OBJREF_methods_INV_OBJREF_INLRString_II_LRINV_OBJREF__arg_completed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CompletionStatusMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)INV_OBJREF::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_INV_OBJREF));
  }
};

INV_OBJREF_clazzInfo_ClazzAttributesResInitializer32 INV_OBJREF_clazzInfo_ClazzAttributesResInitializer32_instance;



} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
BAD_PARAM_create_array(int length)
{
  return new ObjectArrayImpl<RBAD_PARAM>(length);
}

//static
::acdk::lang::RObject
BAD_PARAM_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class BAD_PARAM_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BAD_PARAM_method_BAD_PARAM__LRBAD_PARAM__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new BAD_PARAM();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BAD_PARAM_method_BAD_PARAM_II_LRBAD_PARAM__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new BAD_PARAM(args[0].getIntVar(), (CompletionStatus)args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BAD_PARAM_method_BAD_PARAM_INLRString__LRBAD_PARAM__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new BAD_PARAM((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BAD_PARAM_method_BAD_PARAM_INLRString_II_LRBAD_PARAM__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new BAD_PARAM((RString)args[0].getObjectVar(), args[1].getIntVar(), (CompletionStatus)args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BAD_PARAM_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)BAD_PARAM::GetClass();
    return methinf;
  }
};


void ThrowException_BAD_PARAM(IN(::acdk::lang::RThrowable) ex)
{
  throw RBAD_PARAM(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _BAD_PARAM_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* BAD_PARAM_methods_BAD_PARAM__LRBAD_PARAM__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BAD_PARAM_methods_BAD_PARAM__LRBAD_PARAM__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BAD_PARAM_method_BAD_PARAM__LRBAD_PARAM_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "BAD_PARAM", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  BAD_PARAM::clazzInfo(), // return type
  "_0_BAD_PARAM", // alternative name of method
  -1, // altlabelHashCode
  BAD_PARAM_methods_BAD_PARAM__LRBAD_PARAM__args, // the arguments
  0, //arguments count
  BAD_PARAM_methods_BAD_PARAM__LRBAD_PARAM__exceptions, // the declared exceptions
  BAD_PARAM_MetainfoWrapper::BAD_PARAM_method_BAD_PARAM__LRBAD_PARAM__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BAD_PARAM_methods_BAD_PARAM_II_LRBAD_PARAM__arg_minor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BAD_PARAM_methods_BAD_PARAM_II_LRBAD_PARAM__arg_completed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "completed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BAD_PARAM_methods_BAD_PARAM_II_LRBAD_PARAM__args[] = 
{
  &BAD_PARAM_methods_BAD_PARAM_II_LRBAD_PARAM__arg_minor,
  &BAD_PARAM_methods_BAD_PARAM_II_LRBAD_PARAM__arg_completed,
  0
};

::acdk::lang::dmi::ClazzInfo* BAD_PARAM_methods_BAD_PARAM_II_LRBAD_PARAM__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BAD_PARAM_method_BAD_PARAM_II_LRBAD_PARAM_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "BAD_PARAM", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  BAD_PARAM::clazzInfo(), // return type
  "_1_BAD_PARAM", // alternative name of method
  -1, // altlabelHashCode
  BAD_PARAM_methods_BAD_PARAM_II_LRBAD_PARAM__args, // the arguments
  0, //arguments count
  BAD_PARAM_methods_BAD_PARAM_II_LRBAD_PARAM__exceptions, // the declared exceptions
  BAD_PARAM_MetainfoWrapper::BAD_PARAM_method_BAD_PARAM_II_LRBAD_PARAM__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BAD_PARAM_methods_BAD_PARAM_INLRString__LRBAD_PARAM__arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BAD_PARAM_methods_BAD_PARAM_INLRString__LRBAD_PARAM__args[] = 
{
  &BAD_PARAM_methods_BAD_PARAM_INLRString__LRBAD_PARAM__arg_msg,
  0
};

::acdk::lang::dmi::ClazzInfo* BAD_PARAM_methods_BAD_PARAM_INLRString__LRBAD_PARAM__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BAD_PARAM_method_BAD_PARAM_INLRString__LRBAD_PARAM_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "BAD_PARAM", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  BAD_PARAM::clazzInfo(), // return type
  "_2_BAD_PARAM", // alternative name of method
  -1, // altlabelHashCode
  BAD_PARAM_methods_BAD_PARAM_INLRString__LRBAD_PARAM__args, // the arguments
  0, //arguments count
  BAD_PARAM_methods_BAD_PARAM_INLRString__LRBAD_PARAM__exceptions, // the declared exceptions
  BAD_PARAM_MetainfoWrapper::BAD_PARAM_method_BAD_PARAM_INLRString__LRBAD_PARAM__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BAD_PARAM_methods_BAD_PARAM_INLRString_II_LRBAD_PARAM__arg_reason = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "reason", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BAD_PARAM_methods_BAD_PARAM_INLRString_II_LRBAD_PARAM__arg_minor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BAD_PARAM_methods_BAD_PARAM_INLRString_II_LRBAD_PARAM__arg_completed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "completed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BAD_PARAM_methods_BAD_PARAM_INLRString_II_LRBAD_PARAM__args[] = 
{
  &BAD_PARAM_methods_BAD_PARAM_INLRString_II_LRBAD_PARAM__arg_reason,
  &BAD_PARAM_methods_BAD_PARAM_INLRString_II_LRBAD_PARAM__arg_minor,
  &BAD_PARAM_methods_BAD_PARAM_INLRString_II_LRBAD_PARAM__arg_completed,
  0
};

::acdk::lang::dmi::ClazzInfo* BAD_PARAM_methods_BAD_PARAM_INLRString_II_LRBAD_PARAM__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BAD_PARAM_method_BAD_PARAM_INLRString_II_LRBAD_PARAM_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "BAD_PARAM", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  BAD_PARAM::clazzInfo(), // return type
  "_3_BAD_PARAM", // alternative name of method
  -1, // altlabelHashCode
  BAD_PARAM_methods_BAD_PARAM_INLRString_II_LRBAD_PARAM__args, // the arguments
  0, //arguments count
  BAD_PARAM_methods_BAD_PARAM_INLRString_II_LRBAD_PARAM__exceptions, // the declared exceptions
  BAD_PARAM_MetainfoWrapper::BAD_PARAM_method_BAD_PARAM_INLRString_II_LRBAD_PARAM__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BAD_PARAM_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BAD_PARAM_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BAD_PARAM_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  BAD_PARAM_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  BAD_PARAM_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  BAD_PARAM_MetainfoWrapper::BAD_PARAM_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _BAD_PARAM_methods[] = 
{
  &BAD_PARAM_method_BAD_PARAM__LRBAD_PARAM_,
  &BAD_PARAM_method_BAD_PARAM_II_LRBAD_PARAM_,
  &BAD_PARAM_method_BAD_PARAM_INLRString__LRBAD_PARAM_,
  &BAD_PARAM_method_BAD_PARAM_INLRString_II_LRBAD_PARAM_,
  &BAD_PARAM_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct BAD_PARAM_MetaInfoInitializer
{  BAD_PARAM_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = BAD_PARAM::clazzInfo();
    ci->fields =  _BAD_PARAM_fields;
    ci->methods =  _BAD_PARAM_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
BAD_PARAM_MetaInfoInitializer BAD_PARAM_MetaInfoInitializer_staticinstance__;


struct BAD_PARAM_clazzInfo_ClazzAttributesResInitializer33
{
  BAD_PARAM_clazzInfo_ClazzAttributesResInitializer33()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&BAD_PARAM_methods_BAD_PARAM_II_LRBAD_PARAM__arg_completed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CompletionStatusMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&BAD_PARAM_methods_BAD_PARAM_INLRString_II_LRBAD_PARAM__arg_completed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CompletionStatusMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)BAD_PARAM::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_BAD_PARAM));
  }
};

BAD_PARAM_clazzInfo_ClazzAttributesResInitializer33 BAD_PARAM_clazzInfo_ClazzAttributesResInitializer33_instance;



} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
BAD_INV_ORDER_create_array(int length)
{
  return new ObjectArrayImpl<RBAD_INV_ORDER>(length);
}

//static
::acdk::lang::RObject
BAD_INV_ORDER_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class BAD_INV_ORDER_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BAD_INV_ORDER_method_BAD_INV_ORDER__LRBAD_INV_ORDER__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new BAD_INV_ORDER();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BAD_INV_ORDER_method_BAD_INV_ORDER_II_LRBAD_INV_ORDER__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new BAD_INV_ORDER(args[0].getIntVar(), (CompletionStatus)args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BAD_INV_ORDER_method_BAD_INV_ORDER_INLRString__LRBAD_INV_ORDER__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new BAD_INV_ORDER((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BAD_INV_ORDER_method_BAD_INV_ORDER_INLRString_II_LRBAD_INV_ORDER__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new BAD_INV_ORDER((RString)args[0].getObjectVar(), args[1].getIntVar(), (CompletionStatus)args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BAD_INV_ORDER_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)BAD_INV_ORDER::GetClass();
    return methinf;
  }
};


void ThrowException_BAD_INV_ORDER(IN(::acdk::lang::RThrowable) ex)
{
  throw RBAD_INV_ORDER(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _BAD_INV_ORDER_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* BAD_INV_ORDER_methods_BAD_INV_ORDER__LRBAD_INV_ORDER__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BAD_INV_ORDER_methods_BAD_INV_ORDER__LRBAD_INV_ORDER__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BAD_INV_ORDER_method_BAD_INV_ORDER__LRBAD_INV_ORDER_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "BAD_INV_ORDER", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  BAD_INV_ORDER::clazzInfo(), // return type
  "_0_BAD_INV_ORDER", // alternative name of method
  -1, // altlabelHashCode
  BAD_INV_ORDER_methods_BAD_INV_ORDER__LRBAD_INV_ORDER__args, // the arguments
  0, //arguments count
  BAD_INV_ORDER_methods_BAD_INV_ORDER__LRBAD_INV_ORDER__exceptions, // the declared exceptions
  BAD_INV_ORDER_MetainfoWrapper::BAD_INV_ORDER_method_BAD_INV_ORDER__LRBAD_INV_ORDER__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BAD_INV_ORDER_methods_BAD_INV_ORDER_II_LRBAD_INV_ORDER__arg_minor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BAD_INV_ORDER_methods_BAD_INV_ORDER_II_LRBAD_INV_ORDER__arg_completed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "completed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BAD_INV_ORDER_methods_BAD_INV_ORDER_II_LRBAD_INV_ORDER__args[] = 
{
  &BAD_INV_ORDER_methods_BAD_INV_ORDER_II_LRBAD_INV_ORDER__arg_minor,
  &BAD_INV_ORDER_methods_BAD_INV_ORDER_II_LRBAD_INV_ORDER__arg_completed,
  0
};

::acdk::lang::dmi::ClazzInfo* BAD_INV_ORDER_methods_BAD_INV_ORDER_II_LRBAD_INV_ORDER__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BAD_INV_ORDER_method_BAD_INV_ORDER_II_LRBAD_INV_ORDER_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "BAD_INV_ORDER", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  BAD_INV_ORDER::clazzInfo(), // return type
  "_1_BAD_INV_ORDER", // alternative name of method
  -1, // altlabelHashCode
  BAD_INV_ORDER_methods_BAD_INV_ORDER_II_LRBAD_INV_ORDER__args, // the arguments
  0, //arguments count
  BAD_INV_ORDER_methods_BAD_INV_ORDER_II_LRBAD_INV_ORDER__exceptions, // the declared exceptions
  BAD_INV_ORDER_MetainfoWrapper::BAD_INV_ORDER_method_BAD_INV_ORDER_II_LRBAD_INV_ORDER__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BAD_INV_ORDER_methods_BAD_INV_ORDER_INLRString__LRBAD_INV_ORDER__arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BAD_INV_ORDER_methods_BAD_INV_ORDER_INLRString__LRBAD_INV_ORDER__args[] = 
{
  &BAD_INV_ORDER_methods_BAD_INV_ORDER_INLRString__LRBAD_INV_ORDER__arg_msg,
  0
};

::acdk::lang::dmi::ClazzInfo* BAD_INV_ORDER_methods_BAD_INV_ORDER_INLRString__LRBAD_INV_ORDER__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BAD_INV_ORDER_method_BAD_INV_ORDER_INLRString__LRBAD_INV_ORDER_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "BAD_INV_ORDER", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  BAD_INV_ORDER::clazzInfo(), // return type
  "_2_BAD_INV_ORDER", // alternative name of method
  -1, // altlabelHashCode
  BAD_INV_ORDER_methods_BAD_INV_ORDER_INLRString__LRBAD_INV_ORDER__args, // the arguments
  0, //arguments count
  BAD_INV_ORDER_methods_BAD_INV_ORDER_INLRString__LRBAD_INV_ORDER__exceptions, // the declared exceptions
  BAD_INV_ORDER_MetainfoWrapper::BAD_INV_ORDER_method_BAD_INV_ORDER_INLRString__LRBAD_INV_ORDER__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BAD_INV_ORDER_methods_BAD_INV_ORDER_INLRString_II_LRBAD_INV_ORDER__arg_reason = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "reason", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BAD_INV_ORDER_methods_BAD_INV_ORDER_INLRString_II_LRBAD_INV_ORDER__arg_minor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BAD_INV_ORDER_methods_BAD_INV_ORDER_INLRString_II_LRBAD_INV_ORDER__arg_completed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "completed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BAD_INV_ORDER_methods_BAD_INV_ORDER_INLRString_II_LRBAD_INV_ORDER__args[] = 
{
  &BAD_INV_ORDER_methods_BAD_INV_ORDER_INLRString_II_LRBAD_INV_ORDER__arg_reason,
  &BAD_INV_ORDER_methods_BAD_INV_ORDER_INLRString_II_LRBAD_INV_ORDER__arg_minor,
  &BAD_INV_ORDER_methods_BAD_INV_ORDER_INLRString_II_LRBAD_INV_ORDER__arg_completed,
  0
};

::acdk::lang::dmi::ClazzInfo* BAD_INV_ORDER_methods_BAD_INV_ORDER_INLRString_II_LRBAD_INV_ORDER__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BAD_INV_ORDER_method_BAD_INV_ORDER_INLRString_II_LRBAD_INV_ORDER_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "BAD_INV_ORDER", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  BAD_INV_ORDER::clazzInfo(), // return type
  "_3_BAD_INV_ORDER", // alternative name of method
  -1, // altlabelHashCode
  BAD_INV_ORDER_methods_BAD_INV_ORDER_INLRString_II_LRBAD_INV_ORDER__args, // the arguments
  0, //arguments count
  BAD_INV_ORDER_methods_BAD_INV_ORDER_INLRString_II_LRBAD_INV_ORDER__exceptions, // the declared exceptions
  BAD_INV_ORDER_MetainfoWrapper::BAD_INV_ORDER_method_BAD_INV_ORDER_INLRString_II_LRBAD_INV_ORDER__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BAD_INV_ORDER_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BAD_INV_ORDER_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BAD_INV_ORDER_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  BAD_INV_ORDER_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  BAD_INV_ORDER_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  BAD_INV_ORDER_MetainfoWrapper::BAD_INV_ORDER_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _BAD_INV_ORDER_methods[] = 
{
  &BAD_INV_ORDER_method_BAD_INV_ORDER__LRBAD_INV_ORDER_,
  &BAD_INV_ORDER_method_BAD_INV_ORDER_II_LRBAD_INV_ORDER_,
  &BAD_INV_ORDER_method_BAD_INV_ORDER_INLRString__LRBAD_INV_ORDER_,
  &BAD_INV_ORDER_method_BAD_INV_ORDER_INLRString_II_LRBAD_INV_ORDER_,
  &BAD_INV_ORDER_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct BAD_INV_ORDER_MetaInfoInitializer
{  BAD_INV_ORDER_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = BAD_INV_ORDER::clazzInfo();
    ci->fields =  _BAD_INV_ORDER_fields;
    ci->methods =  _BAD_INV_ORDER_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
BAD_INV_ORDER_MetaInfoInitializer BAD_INV_ORDER_MetaInfoInitializer_staticinstance__;


struct BAD_INV_ORDER_clazzInfo_ClazzAttributesResInitializer34
{
  BAD_INV_ORDER_clazzInfo_ClazzAttributesResInitializer34()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&BAD_INV_ORDER_methods_BAD_INV_ORDER_II_LRBAD_INV_ORDER__arg_completed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CompletionStatusMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&BAD_INV_ORDER_methods_BAD_INV_ORDER_INLRString_II_LRBAD_INV_ORDER__arg_completed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CompletionStatusMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)BAD_INV_ORDER::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_BAD_INV_ORDER));
  }
};

BAD_INV_ORDER_clazzInfo_ClazzAttributesResInitializer34 BAD_INV_ORDER_clazzInfo_ClazzAttributesResInitializer34_instance;



} // namespace org
} // namespace omg
} // namespace CORBA


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) CORBA_dummyExportFunc() {}
#endif

