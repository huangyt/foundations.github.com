// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../CosNaming.h"
#include "../Config.h"
#include "../CosNaming.h"
#include <acdkx/orb/AORB.h>
#include <acdkx/orb/AORB.h>
#include <acdkx/orb/AORB.h>
#include <acdkx/orb/AORB.h>
#include <acdkx/orb/AORB.h>
#include <acdkx/orb/CorObject.h>
#include <acdkx/orb/CorObject.h>
#include <acdk/lang/dmi/ClazzInfoInternals.h>


struct acdk::lang::dmi::UnitInfo org_omg_CosNaming_unitInfo = {
  ::acdk::lang::dmi::MiUnitInfo, // flags
  0, //attributeRes
  "CosNaming", // name of unit
  -1, // hashCode
  "org/omg", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  0 // _firstChild first ClazzInfo of this unit
};

static ::acdk::lang::dmi::RegisterUnitInfo _register_org_omg_CosNaming_unitInfo(&org_omg_CosNaming_unitInfo);


namespace org { 
namespace omg { 
namespace CosNaming { 


//static
::acdk::lang::RObject
NameComponent_create_array(int length)
{
  return new ObjectArrayImpl<RNameComponent>(length);
}

//static
::acdk::lang::RObject
NameComponent_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class NameComponent_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NameComponent_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)NameComponent::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NameComponent_method_NameComponent__LRNameComponent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NameComponent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  NameComponent_fields_id_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    NameComponent* This = dmi_cast<NameComponent>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->id, flags);
    else
      This->id = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  NameComponent_fields_kind_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    NameComponent* This = dmi_cast<NameComponent>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->kind, flags);
    else
      This->kind = (RString)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo NameComponent_fields_id = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "id", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  NameComponent_MetainfoWrapper::NameComponent_fields_id_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo NameComponent_fields_kind = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "kind", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  NameComponent_MetainfoWrapper::NameComponent_fields_kind_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _NameComponent_fields[] = 
{
  &NameComponent_fields_id,
  &NameComponent_fields_kind,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* NameComponent_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NameComponent_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NameComponent_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  NameComponent_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  NameComponent_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  NameComponent_MetainfoWrapper::NameComponent_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NameComponent_methods_NameComponent__LRNameComponent__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NameComponent_methods_NameComponent__LRNameComponent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NameComponent_method_NameComponent__LRNameComponent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NameComponent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NameComponent::clazzInfo(), // return type
  "_0_NameComponent", // alternative name of method
  -1, // altlabelHashCode
  NameComponent_methods_NameComponent__LRNameComponent__args, // the arguments
  0, //arguments count
  NameComponent_methods_NameComponent__LRNameComponent__exceptions, // the declared exceptions
  NameComponent_MetainfoWrapper::NameComponent_method_NameComponent__LRNameComponent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _NameComponent_methods[] = 
{
  &NameComponent_method_GetClass__L_acdk_lang_RClass_,
  &NameComponent_method_NameComponent__LRNameComponent_,
  0
};


struct NameComponent_MetaInfoInitializer
{  NameComponent_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = NameComponent::clazzInfo();
    ci->fields =  _NameComponent_fields;
    ci->methods =  _NameComponent_methods;
    ci->_scopeParent = org_omg_CosNaming_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
NameComponent_MetaInfoInitializer NameComponent_MetaInfoInitializer_staticinstance__;


struct NameComponent_clazzInfo_ClazzAttributesResInitializer1
{
  NameComponent_clazzInfo_ClazzAttributesResInitializer1()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)NameComponent::clazzInfo(), "acdkx_orb_StructType", ::acdk::lang::dmi::ClazzAttributeResValue::makeStringRes("", false));
  }
};

NameComponent_clazzInfo_ClazzAttributesResInitializer1 NameComponent_clazzInfo_ClazzAttributesResInitializer1_instance;



} // namespace org
} // namespace omg
} // namespace CosNaming


namespace org { 
namespace omg { 
namespace CosNaming { 


//static
::acdk::lang::RObject
Binding_create_array(int length)
{
  return new ObjectArrayImpl<RBinding>(length);
}

//static
::acdk::lang::RObject
Binding_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Binding_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Binding_method_Binding__LRBinding__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Binding();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Binding_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Binding::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Binding_fields_binding_name_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Binding* This = dmi_cast<Binding>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->binding_name, flags);
    else
      This->binding_name = (RNameComponentArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Binding_fields_binding_type_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Binding* This = dmi_cast<Binding>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->binding_type), flags);
    else
      This->binding_type = (BindingType)var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo Binding_fields_binding_name = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "binding_name", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNameComponentArray::clazzInfo(),
  Binding_MetainfoWrapper::Binding_fields_binding_name_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Binding_fields_binding_type = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "binding_type", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Binding_MetainfoWrapper::Binding_fields_binding_type_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _Binding_fields[] = 
{
  &Binding_fields_binding_name,
  &Binding_fields_binding_type,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Binding_methods_Binding__LRBinding__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Binding_methods_Binding__LRBinding__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Binding_method_Binding__LRBinding_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Binding", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Binding::clazzInfo(), // return type
  "_0_Binding", // alternative name of method
  -1, // altlabelHashCode
  Binding_methods_Binding__LRBinding__args, // the arguments
  0, //arguments count
  Binding_methods_Binding__LRBinding__exceptions, // the declared exceptions
  Binding_MetainfoWrapper::Binding_method_Binding__LRBinding__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Binding_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Binding_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Binding_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Binding_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Binding_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Binding_MetainfoWrapper::Binding_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Binding_methods[] = 
{
  &Binding_method_Binding__LRBinding_,
  &Binding_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct Binding_MetaInfoInitializer
{  Binding_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Binding::clazzInfo();
    ci->fields =  _Binding_fields;
    ci->methods =  _Binding_methods;
    ci->_scopeParent = org_omg_CosNaming_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Binding_MetaInfoInitializer Binding_MetaInfoInitializer_staticinstance__;


struct Binding_clazzInfo_ClazzAttributesResInitializer2
{
  Binding_clazzInfo_ClazzAttributesResInitializer2()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)Binding::clazzInfo(), "acdkx_orb_StructType", ::acdk::lang::dmi::ClazzAttributeResValue::makeStringRes("", false));
  }
};

Binding_clazzInfo_ClazzAttributesResInitializer2 Binding_clazzInfo_ClazzAttributesResInitializer2_instance;



} // namespace org
} // namespace omg
} // namespace CosNaming


namespace org { 
namespace omg { 
namespace CosNaming { 


//static
::acdk::lang::RObject
NotFound_create_array(int length)
{
  return new ObjectArrayImpl<RNotFound>(length);
}

//static
::acdk::lang::RObject
NotFound_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class NotFound_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NotFound_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)NotFound::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NotFound_method_NotFound_LRString__LRNotFound__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NotFound((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NotFound_method_NotFound_ILRString__LRNotFound__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NotFound((NotFoundReason)args[0].getIntVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  NotFound_fields_rest_of_name_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    NotFound* This = dmi_cast<NotFound>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->rest_of_name, flags);
    else
      This->rest_of_name = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  NotFound_fields_why_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    NotFound* This = dmi_cast<NotFound>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->why), flags);
    else
      This->why = (NotFoundReason)var.getIntVar();
    return fieldinf;
  }
};


::acdkx::orb::RegisterRepId _register_NotFound_repId(NotFound::clazzInfo(), "org/omg/CosNaming/NamingContext/NotFound", 1, 0);

void ThrowException_NotFound(IN(::acdk::lang::RThrowable) ex)
{
  throw RNotFound(ex);
}

::acdk::lang::dmi::ClazzFieldInfo NotFound_fields_rest_of_name = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "rest_of_name", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  NotFound_MetainfoWrapper::NotFound_fields_rest_of_name_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo NotFound_fields_why = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "why", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  NotFound_MetainfoWrapper::NotFound_fields_why_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _NotFound_fields[] = 
{
  &NotFound_fields_rest_of_name,
  &NotFound_fields_why,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* NotFound_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NotFound_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NotFound_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  NotFound_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  NotFound_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  NotFound_MetainfoWrapper::NotFound_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NotFound_methods_NotFound_LRString__LRNotFound__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NotFound_methods_NotFound_LRString__LRNotFound__args[] = 
{
  &NotFound_methods_NotFound_LRString__LRNotFound__arg_what,
  0
};

::acdk::lang::dmi::ClazzInfo* NotFound_methods_NotFound_LRString__LRNotFound__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NotFound_method_NotFound_LRString__LRNotFound_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NotFound", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NotFound::clazzInfo(), // return type
  "_0_NotFound", // alternative name of method
  -1, // altlabelHashCode
  NotFound_methods_NotFound_LRString__LRNotFound__args, // the arguments
  0, //arguments count
  NotFound_methods_NotFound_LRString__LRNotFound__exceptions, // the declared exceptions
  NotFound_MetainfoWrapper::NotFound_method_NotFound_LRString__LRNotFound__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NotFound_methods_NotFound_ILRString__LRNotFound__arg_w = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "w", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NotFound_methods_NotFound_ILRString__LRNotFound__arg_rn = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "rn", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NotFound_methods_NotFound_ILRString__LRNotFound__args[] = 
{
  &NotFound_methods_NotFound_ILRString__LRNotFound__arg_w,
  &NotFound_methods_NotFound_ILRString__LRNotFound__arg_rn,
  0
};

::acdk::lang::dmi::ClazzInfo* NotFound_methods_NotFound_ILRString__LRNotFound__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NotFound_method_NotFound_ILRString__LRNotFound_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NotFound", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NotFound::clazzInfo(), // return type
  "_1_NotFound", // alternative name of method
  -1, // altlabelHashCode
  NotFound_methods_NotFound_ILRString__LRNotFound__args, // the arguments
  0, //arguments count
  NotFound_methods_NotFound_ILRString__LRNotFound__exceptions, // the declared exceptions
  NotFound_MetainfoWrapper::NotFound_method_NotFound_ILRString__LRNotFound__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _NotFound_methods[] = 
{
  &NotFound_method_GetClass__L_acdk_lang_RClass_,
  &NotFound_method_NotFound_LRString__LRNotFound_,
  &NotFound_method_NotFound_ILRString__LRNotFound_,
  0
};


struct NotFound_MetaInfoInitializer
{  NotFound_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = NotFound::clazzInfo();
    ci->fields =  _NotFound_fields;
    ci->methods =  _NotFound_methods;
    ci->_scopeParent = org_omg_CosNaming_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
NotFound_MetaInfoInitializer NotFound_MetaInfoInitializer_staticinstance__;


struct NotFound_clazzInfo_ClazzAttributesResInitializer3
{
  NotFound_clazzInfo_ClazzAttributesResInitializer3()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&NotFound_methods_NotFound_ILRString__LRNotFound__arg_w, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)NotFoundReasonMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)NotFound::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_NotFound));
  }
};

NotFound_clazzInfo_ClazzAttributesResInitializer3 NotFound_clazzInfo_ClazzAttributesResInitializer3_instance;



} // namespace org
} // namespace omg
} // namespace CosNaming


namespace org { 
namespace omg { 
namespace CosNaming { 


//static
::acdk::lang::RObject
CannotProceed_create_array(int length)
{
  return new ObjectArrayImpl<RCannotProceed>(length);
}

//static
::acdk::lang::RObject
CannotProceed_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class CannotProceed_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CannotProceed_method_CannotProceed_INLRNamingContext_INLRString__LRCannotProceed__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CannotProceed((RNamingContext)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CannotProceed_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)CannotProceed::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CannotProceed_fields_cxt_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CannotProceed* This = dmi_cast<CannotProceed>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->cxt, flags);
    else
      This->cxt = (RNamingContext)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CannotProceed_fields_rest_of_name_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CannotProceed* This = dmi_cast<CannotProceed>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->rest_of_name, flags);
    else
      This->rest_of_name = (RString)var.getObjectVar();
    return fieldinf;
  }
};


::acdkx::orb::RegisterRepId _register_CannotProceed_repId(CannotProceed::clazzInfo(), "org/omg/CosNaming/NamingContext/CannotProceed", 1, 0);

void ThrowException_CannotProceed(IN(::acdk::lang::RThrowable) ex)
{
  throw RCannotProceed(ex);
}

::acdk::lang::dmi::ClazzFieldInfo CannotProceed_fields_cxt = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "cxt", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNamingContext::clazzInfo(),
  CannotProceed_MetainfoWrapper::CannotProceed_fields_cxt_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CannotProceed_fields_rest_of_name = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "rest_of_name", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  CannotProceed_MetainfoWrapper::CannotProceed_fields_rest_of_name_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _CannotProceed_fields[] = 
{
  &CannotProceed_fields_cxt,
  &CannotProceed_fields_rest_of_name,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo CannotProceed_methods_CannotProceed_INLRNamingContext_INLRString__LRCannotProceed__arg_nct = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nct", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNamingContext::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CannotProceed_methods_CannotProceed_INLRNamingContext_INLRString__LRCannotProceed__arg_rn = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rn", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CannotProceed_methods_CannotProceed_INLRNamingContext_INLRString__LRCannotProceed__args[] = 
{
  &CannotProceed_methods_CannotProceed_INLRNamingContext_INLRString__LRCannotProceed__arg_nct,
  &CannotProceed_methods_CannotProceed_INLRNamingContext_INLRString__LRCannotProceed__arg_rn,
  0
};

::acdk::lang::dmi::ClazzInfo* CannotProceed_methods_CannotProceed_INLRNamingContext_INLRString__LRCannotProceed__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CannotProceed_method_CannotProceed_INLRNamingContext_INLRString__LRCannotProceed_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "CannotProceed", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CannotProceed::clazzInfo(), // return type
  "_0_CannotProceed", // alternative name of method
  -1, // altlabelHashCode
  CannotProceed_methods_CannotProceed_INLRNamingContext_INLRString__LRCannotProceed__args, // the arguments
  0, //arguments count
  CannotProceed_methods_CannotProceed_INLRNamingContext_INLRString__LRCannotProceed__exceptions, // the declared exceptions
  CannotProceed_MetainfoWrapper::CannotProceed_method_CannotProceed_INLRNamingContext_INLRString__LRCannotProceed__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CannotProceed_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CannotProceed_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CannotProceed_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  CannotProceed_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  CannotProceed_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  CannotProceed_MetainfoWrapper::CannotProceed_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _CannotProceed_methods[] = 
{
  &CannotProceed_method_CannotProceed_INLRNamingContext_INLRString__LRCannotProceed_,
  &CannotProceed_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct CannotProceed_MetaInfoInitializer
{  CannotProceed_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = CannotProceed::clazzInfo();
    ci->fields =  _CannotProceed_fields;
    ci->methods =  _CannotProceed_methods;
    ci->_scopeParent = org_omg_CosNaming_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
CannotProceed_MetaInfoInitializer CannotProceed_MetaInfoInitializer_staticinstance__;


struct CannotProceed_clazzInfo_ClazzAttributesResInitializer4
{
  CannotProceed_clazzInfo_ClazzAttributesResInitializer4()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)CannotProceed::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_CannotProceed));
  }
};

CannotProceed_clazzInfo_ClazzAttributesResInitializer4 CannotProceed_clazzInfo_ClazzAttributesResInitializer4_instance;



} // namespace org
} // namespace omg
} // namespace CosNaming


namespace org { 
namespace omg { 
namespace CosNaming { 


//static
::acdk::lang::RObject
InvalidName_create_array(int length)
{
  return new ObjectArrayImpl<RInvalidName>(length);
}

//static
::acdk::lang::RObject
InvalidName_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class InvalidName_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InvalidName_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)InvalidName::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InvalidName_method_InvalidName__LRInvalidName__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new InvalidName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InvalidName_method_InvalidName_INLRString__LRInvalidName__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new InvalidName((RString)args[0].getObjectVar());
    return methinf;
  }
};


::acdkx::orb::RegisterRepId _register_InvalidName_repId(InvalidName::clazzInfo(), "org/omg/CosNaming/NamingContext/InvalidName", 1, 0);

void ThrowException_InvalidName(IN(::acdk::lang::RThrowable) ex)
{
  throw RInvalidName(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _InvalidName_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* InvalidName_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InvalidName_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InvalidName_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  InvalidName_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  InvalidName_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  InvalidName_MetainfoWrapper::InvalidName_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InvalidName_methods_InvalidName__LRInvalidName__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InvalidName_methods_InvalidName__LRInvalidName__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InvalidName_method_InvalidName__LRInvalidName_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "InvalidName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  InvalidName::clazzInfo(), // return type
  "_0_InvalidName", // alternative name of method
  -1, // altlabelHashCode
  InvalidName_methods_InvalidName__LRInvalidName__args, // the arguments
  0, //arguments count
  InvalidName_methods_InvalidName__LRInvalidName__exceptions, // the declared exceptions
  InvalidName_MetainfoWrapper::InvalidName_method_InvalidName__LRInvalidName__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo InvalidName_methods_InvalidName_INLRString__LRInvalidName__arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* InvalidName_methods_InvalidName_INLRString__LRInvalidName__args[] = 
{
  &InvalidName_methods_InvalidName_INLRString__LRInvalidName__arg_msg,
  0
};

::acdk::lang::dmi::ClazzInfo* InvalidName_methods_InvalidName_INLRString__LRInvalidName__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InvalidName_method_InvalidName_INLRString__LRInvalidName_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "InvalidName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  InvalidName::clazzInfo(), // return type
  "_1_InvalidName", // alternative name of method
  -1, // altlabelHashCode
  InvalidName_methods_InvalidName_INLRString__LRInvalidName__args, // the arguments
  0, //arguments count
  InvalidName_methods_InvalidName_INLRString__LRInvalidName__exceptions, // the declared exceptions
  InvalidName_MetainfoWrapper::InvalidName_method_InvalidName_INLRString__LRInvalidName__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _InvalidName_methods[] = 
{
  &InvalidName_method_GetClass__L_acdk_lang_RClass_,
  &InvalidName_method_InvalidName__LRInvalidName_,
  &InvalidName_method_InvalidName_INLRString__LRInvalidName_,
  0
};


struct InvalidName_MetaInfoInitializer
{  InvalidName_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = InvalidName::clazzInfo();
    ci->fields =  _InvalidName_fields;
    ci->methods =  _InvalidName_methods;
    ci->_scopeParent = org_omg_CosNaming_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
InvalidName_MetaInfoInitializer InvalidName_MetaInfoInitializer_staticinstance__;


struct InvalidName_clazzInfo_ClazzAttributesResInitializer5
{
  InvalidName_clazzInfo_ClazzAttributesResInitializer5()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)InvalidName::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_InvalidName));
  }
};

InvalidName_clazzInfo_ClazzAttributesResInitializer5 InvalidName_clazzInfo_ClazzAttributesResInitializer5_instance;



} // namespace org
} // namespace omg
} // namespace CosNaming


namespace org { 
namespace omg { 
namespace CosNaming { 


//static
::acdk::lang::RObject
AlreadyBound_create_array(int length)
{
  return new ObjectArrayImpl<RAlreadyBound>(length);
}

//static
::acdk::lang::RObject
AlreadyBound_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class AlreadyBound_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AlreadyBound_method_AlreadyBound__LRAlreadyBound__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AlreadyBound();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AlreadyBound_method_AlreadyBound_INLRString__LRAlreadyBound__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AlreadyBound((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AlreadyBound_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AlreadyBound::GetClass();
    return methinf;
  }
};


::acdkx::orb::RegisterRepId _register_AlreadyBound_repId(AlreadyBound::clazzInfo(), "org/omg/CosNaming/NamingContext/AlreadyBound", 1, 0);

void ThrowException_AlreadyBound(IN(::acdk::lang::RThrowable) ex)
{
  throw RAlreadyBound(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _AlreadyBound_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* AlreadyBound_methods_AlreadyBound__LRAlreadyBound__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AlreadyBound_methods_AlreadyBound__LRAlreadyBound__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AlreadyBound_method_AlreadyBound__LRAlreadyBound_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "AlreadyBound", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AlreadyBound::clazzInfo(), // return type
  "_0_AlreadyBound", // alternative name of method
  -1, // altlabelHashCode
  AlreadyBound_methods_AlreadyBound__LRAlreadyBound__args, // the arguments
  0, //arguments count
  AlreadyBound_methods_AlreadyBound__LRAlreadyBound__exceptions, // the declared exceptions
  AlreadyBound_MetainfoWrapper::AlreadyBound_method_AlreadyBound__LRAlreadyBound__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AlreadyBound_methods_AlreadyBound_INLRString__LRAlreadyBound__arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AlreadyBound_methods_AlreadyBound_INLRString__LRAlreadyBound__args[] = 
{
  &AlreadyBound_methods_AlreadyBound_INLRString__LRAlreadyBound__arg_msg,
  0
};

::acdk::lang::dmi::ClazzInfo* AlreadyBound_methods_AlreadyBound_INLRString__LRAlreadyBound__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AlreadyBound_method_AlreadyBound_INLRString__LRAlreadyBound_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "AlreadyBound", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AlreadyBound::clazzInfo(), // return type
  "_1_AlreadyBound", // alternative name of method
  -1, // altlabelHashCode
  AlreadyBound_methods_AlreadyBound_INLRString__LRAlreadyBound__args, // the arguments
  0, //arguments count
  AlreadyBound_methods_AlreadyBound_INLRString__LRAlreadyBound__exceptions, // the declared exceptions
  AlreadyBound_MetainfoWrapper::AlreadyBound_method_AlreadyBound_INLRString__LRAlreadyBound__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AlreadyBound_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AlreadyBound_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AlreadyBound_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  AlreadyBound_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  AlreadyBound_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  AlreadyBound_MetainfoWrapper::AlreadyBound_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _AlreadyBound_methods[] = 
{
  &AlreadyBound_method_AlreadyBound__LRAlreadyBound_,
  &AlreadyBound_method_AlreadyBound_INLRString__LRAlreadyBound_,
  &AlreadyBound_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct AlreadyBound_MetaInfoInitializer
{  AlreadyBound_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = AlreadyBound::clazzInfo();
    ci->fields =  _AlreadyBound_fields;
    ci->methods =  _AlreadyBound_methods;
    ci->_scopeParent = org_omg_CosNaming_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
AlreadyBound_MetaInfoInitializer AlreadyBound_MetaInfoInitializer_staticinstance__;


struct AlreadyBound_clazzInfo_ClazzAttributesResInitializer6
{
  AlreadyBound_clazzInfo_ClazzAttributesResInitializer6()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)AlreadyBound::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_AlreadyBound));
  }
};

AlreadyBound_clazzInfo_ClazzAttributesResInitializer6 AlreadyBound_clazzInfo_ClazzAttributesResInitializer6_instance;



} // namespace org
} // namespace omg
} // namespace CosNaming


namespace org { 
namespace omg { 
namespace CosNaming { 


//static
::acdk::lang::RObject
NotEmpty_create_array(int length)
{
  return new ObjectArrayImpl<RNotEmpty>(length);
}

//static
::acdk::lang::RObject
NotEmpty_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class NotEmpty_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NotEmpty_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)NotEmpty::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NotEmpty_method_NotEmpty__LRNotEmpty__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NotEmpty();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NotEmpty_method_NotEmpty_INLRString__LRNotEmpty__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NotEmpty((RString)args[0].getObjectVar());
    return methinf;
  }
};


::acdkx::orb::RegisterRepId _register_NotEmpty_repId(NotEmpty::clazzInfo(), "org/omg/CosNaming/NamingContext/NotEmpty", 1, 0);

void ThrowException_NotEmpty(IN(::acdk::lang::RThrowable) ex)
{
  throw RNotEmpty(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _NotEmpty_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* NotEmpty_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NotEmpty_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NotEmpty_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  NotEmpty_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  NotEmpty_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  NotEmpty_MetainfoWrapper::NotEmpty_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NotEmpty_methods_NotEmpty__LRNotEmpty__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NotEmpty_methods_NotEmpty__LRNotEmpty__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NotEmpty_method_NotEmpty__LRNotEmpty_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NotEmpty", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NotEmpty::clazzInfo(), // return type
  "_0_NotEmpty", // alternative name of method
  -1, // altlabelHashCode
  NotEmpty_methods_NotEmpty__LRNotEmpty__args, // the arguments
  0, //arguments count
  NotEmpty_methods_NotEmpty__LRNotEmpty__exceptions, // the declared exceptions
  NotEmpty_MetainfoWrapper::NotEmpty_method_NotEmpty__LRNotEmpty__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NotEmpty_methods_NotEmpty_INLRString__LRNotEmpty__arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NotEmpty_methods_NotEmpty_INLRString__LRNotEmpty__args[] = 
{
  &NotEmpty_methods_NotEmpty_INLRString__LRNotEmpty__arg_msg,
  0
};

::acdk::lang::dmi::ClazzInfo* NotEmpty_methods_NotEmpty_INLRString__LRNotEmpty__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NotEmpty_method_NotEmpty_INLRString__LRNotEmpty_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NotEmpty", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NotEmpty::clazzInfo(), // return type
  "_1_NotEmpty", // alternative name of method
  -1, // altlabelHashCode
  NotEmpty_methods_NotEmpty_INLRString__LRNotEmpty__args, // the arguments
  0, //arguments count
  NotEmpty_methods_NotEmpty_INLRString__LRNotEmpty__exceptions, // the declared exceptions
  NotEmpty_MetainfoWrapper::NotEmpty_method_NotEmpty_INLRString__LRNotEmpty__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _NotEmpty_methods[] = 
{
  &NotEmpty_method_GetClass__L_acdk_lang_RClass_,
  &NotEmpty_method_NotEmpty__LRNotEmpty_,
  &NotEmpty_method_NotEmpty_INLRString__LRNotEmpty_,
  0
};


struct NotEmpty_MetaInfoInitializer
{  NotEmpty_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = NotEmpty::clazzInfo();
    ci->fields =  _NotEmpty_fields;
    ci->methods =  _NotEmpty_methods;
    ci->_scopeParent = org_omg_CosNaming_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
NotEmpty_MetaInfoInitializer NotEmpty_MetaInfoInitializer_staticinstance__;


struct NotEmpty_clazzInfo_ClazzAttributesResInitializer7
{
  NotEmpty_clazzInfo_ClazzAttributesResInitializer7()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)NotEmpty::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_NotEmpty));
  }
};

NotEmpty_clazzInfo_ClazzAttributesResInitializer7 NotEmpty_clazzInfo_ClazzAttributesResInitializer7_instance;



} // namespace org
} // namespace omg
} // namespace CosNaming


namespace org { 
namespace omg { 
namespace CosNaming { 


//static
::acdk::lang::RObject
BindingIterator_create_array(int length)
{
  return new ObjectArrayImpl<RBindingIterator>(length);
}

//static
::acdk::lang::RObject
BindingIterator_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class BindingIterator_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BindingIterator_method__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)BindingIterator::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BindingIterator_method_destroy__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BindingIterator* This = dmi_cast<BindingIterator>(This_);
    This->destroy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BindingIterator_method_next_n_IOUTLRBindingArray__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BindingIterator* This = dmi_cast<BindingIterator>(This_);
  ret = This->next_n(args[0].getIntVar(),  ::acdk::lang::getTypedObjectRef< RBindingArray >(args[1]));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BindingIterator_method_next_one_OUTLRBinding__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BindingIterator* This = dmi_cast<BindingIterator>(This_);
  ret = This->next_one( ::acdk::lang::getTypedObjectRef< RBinding >(args[0]));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _BindingIterator_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* BindingIterator_methods__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BindingIterator_methods__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BindingIterator_method_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  BindingIterator_methods__args, // the arguments
  0, //arguments count
  BindingIterator_methods__exceptions, // the declared exceptions
  BindingIterator_MetainfoWrapper::BindingIterator_method__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BindingIterator_methods_destroy__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BindingIterator_methods_destroy__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BindingIterator_method_destroy__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "destroy", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_destroy", // alternative name of method
  -1, // altlabelHashCode
  BindingIterator_methods_destroy__V_args, // the arguments
  0, //arguments count
  BindingIterator_methods_destroy__V_exceptions, // the declared exceptions
  BindingIterator_MetainfoWrapper::BindingIterator_method_destroy__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BindingIterator_methods_next_n_IOUTLRBindingArray__Z_arg_how_many = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "how_many", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BindingIterator_methods_next_n_IOUTLRBindingArray__Z_arg_bl = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "bl", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBindingArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BindingIterator_methods_next_n_IOUTLRBindingArray__Z_args[] = 
{
  &BindingIterator_methods_next_n_IOUTLRBindingArray__Z_arg_how_many,
  &BindingIterator_methods_next_n_IOUTLRBindingArray__Z_arg_bl,
  0
};

::acdk::lang::dmi::ClazzInfo* BindingIterator_methods_next_n_IOUTLRBindingArray__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BindingIterator_method_next_n_IOUTLRBindingArray__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "next_n", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_next_n", // alternative name of method
  -1, // altlabelHashCode
  BindingIterator_methods_next_n_IOUTLRBindingArray__Z_args, // the arguments
  0, //arguments count
  BindingIterator_methods_next_n_IOUTLRBindingArray__Z_exceptions, // the declared exceptions
  BindingIterator_MetainfoWrapper::BindingIterator_method_next_n_IOUTLRBindingArray__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BindingIterator_methods_next_one_OUTLRBinding__Z_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBinding::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BindingIterator_methods_next_one_OUTLRBinding__Z_args[] = 
{
  &BindingIterator_methods_next_one_OUTLRBinding__Z_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* BindingIterator_methods_next_one_OUTLRBinding__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BindingIterator_method_next_one_OUTLRBinding__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "next_one", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_0_next_one", // alternative name of method
  -1, // altlabelHashCode
  BindingIterator_methods_next_one_OUTLRBinding__Z_args, // the arguments
  0, //arguments count
  BindingIterator_methods_next_one_OUTLRBinding__Z_exceptions, // the declared exceptions
  BindingIterator_MetainfoWrapper::BindingIterator_method_next_one_OUTLRBinding__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _BindingIterator_methods[] = 
{
  &BindingIterator_method_,
  &BindingIterator_method_destroy__V,
  &BindingIterator_method_next_n_IOUTLRBindingArray__Z,
  &BindingIterator_method_next_one_OUTLRBinding__Z,
  0
};


struct BindingIterator_MetaInfoInitializer
{  BindingIterator_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = BindingIterator::clazzInfo();
    ci->fields =  _BindingIterator_fields;
    ci->methods =  _BindingIterator_methods;
    ci->_scopeParent = org_omg_CosNaming_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
BindingIterator_MetaInfoInitializer BindingIterator_MetaInfoInitializer_staticinstance__;


struct BindingIterator_clazzInfo_ClazzAttributesResInitializer8
{
  BindingIterator_clazzInfo_ClazzAttributesResInitializer8()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)BindingIterator::clazzInfo(), "acdkx_orb_ClassType", ::acdk::lang::dmi::ClazzAttributeResValue::makeStringRes("", false));
  }
};

BindingIterator_clazzInfo_ClazzAttributesResInitializer8 BindingIterator_clazzInfo_ClazzAttributesResInitializer8_instance;


char* _BindingIterator_Skel__ids[] = {
  "IDL:org/omg/CosNaming/BindingIterator:1.0",
  0
};

class ACDKX_ORB_PUBLIC BindingIterator_Skel
: extends ::acdkx::orb::CorObject,
  implements BindingIterator
{
public:
  char** _ids() { return _BindingIterator_Skel__ids; }
  BindingIterator_Skel() : ACDK_FQ_SUPER_QUALIFIER(::acdkx::orb::, CorObject()) { }
  BindingIterator_Skel(IN(::acdk::lang::RString) objKey) : ACDK_FQ_SUPER_QUALIFIER(::acdkx::orb::, CorObject(objKey)) { }
  static ::acdk::lang::RObject create_instance() { return new BindingIterator_Skel(); }
  virtual bool next_one(OUT(RBinding) b)
  {
    while (true) {
    if (is_local() == true) {
        bool __retvalue = dynamic_cast< BindingIterator*>(localObject())->next_one(b);
     } else { // not local
      ::org::omg::CORBA::portable::ROutputStream __output = Nil;
      ::org::omg::CORBA::portable::RInputStream __input = Nil;
      try {
        __output = _request("next_one", true);
        __input = ACDK_FQ_SUPER_QUALIFIER(::acdkx::orb::, CorObject)::_invoke(__output);
        bool __retvalue = (bool)__input->read_boolean();
        b = (RBinding) __input->read_acdk_object(Binding::GetClass());
        return __retvalue;
      } catch (::org::omg::CORBA::portable::RRemarshalException ) {
        ; //nothing continue;
      } catch (::org::omg::CORBA::portable::RApplicationException _exception ) {
         ::acdk::lang::RClass _exClass = _exception->getUserExceptionClass();
         __input = _exception->getInputStream();
           THROW1_FQ(::org::omg::CORBA::, UNKNOWN, RString("Unexpected User Exception: ") + _exClass->getName());
      } 
    } // not local
    } // while (true);
  }
  virtual bool next_n(int how_many, OUT(RBindingArray) bl)
  {
    while (true) {
    if (is_local() == true) {
        bool __retvalue = dynamic_cast< BindingIterator*>(localObject())->next_n(how_many, bl);
     } else { // not local
      ::org::omg::CORBA::portable::ROutputStream __output = Nil;
      ::org::omg::CORBA::portable::RInputStream __input = Nil;
      try {
        __output = _request("next_n", true);
        __output->write_long(how_many);
        __input = ACDK_FQ_SUPER_QUALIFIER(::acdkx::orb::, CorObject)::_invoke(__output);
        bool __retvalue = (bool)__input->read_boolean();
        bl = (RBindingArray) __input->read_acdk_object(BindingArray::GetClass());
        return __retvalue;
      } catch (::org::omg::CORBA::portable::RRemarshalException ) {
        ; //nothing continue;
      } catch (::org::omg::CORBA::portable::RApplicationException _exception ) {
         ::acdk::lang::RClass _exClass = _exception->getUserExceptionClass();
         __input = _exception->getInputStream();
           THROW1_FQ(::org::omg::CORBA::, UNKNOWN, RString("Unexpected User Exception: ") + _exClass->getName());
      } 
    } // not local
    } // while (true);
  }
  virtual void destroy()
  {
    while (true) {
    if (is_local() == true) {
        dynamic_cast< BindingIterator*>(localObject())->destroy();
        return;
     } else { // not local
      ::org::omg::CORBA::portable::ROutputStream __output = Nil;
      ::org::omg::CORBA::portable::RInputStream __input = Nil;
      try {
        __output = _request("destroy", true);
        __input = ACDK_FQ_SUPER_QUALIFIER(::acdkx::orb::, CorObject)::_invoke(__output);
        return;
      } catch (::org::omg::CORBA::portable::RRemarshalException ) {
        ; //nothing continue;
      } catch (::org::omg::CORBA::portable::RApplicationException _exception ) {
         ::acdk::lang::RClass _exClass = _exception->getUserExceptionClass();
         __input = _exception->getInputStream();
           THROW1_FQ(::org::omg::CORBA::, UNKNOWN, RString("Unexpected User Exception: ") + _exClass->getName());
      } 
    } // not local
    } // while (true);
  }
  virtual ::acdk::lang::RClass GetClass()
  {
    while (true) {
    if (is_local() == true) {
        ::acdk::lang::RClass __retvalue = dynamic_cast< BindingIterator*>(localObject())->GetClass();
     } else { // not local
      ::org::omg::CORBA::portable::ROutputStream __output = Nil;
      ::org::omg::CORBA::portable::RInputStream __input = Nil;
      try {
        __output = _request("GetClass", true);
        __input = ACDK_FQ_SUPER_QUALIFIER(::acdkx::orb::, CorObject)::_invoke(__output);
        ::acdk::lang::RClass __retvalue = (::acdk::lang::RClass)__input->read_acdk_object(::acdk::lang::Class::GetClass());
        return __retvalue;
      } catch (::org::omg::CORBA::portable::RRemarshalException ) {
        ; //nothing continue;
      } catch (::org::omg::CORBA::portable::RApplicationException _exception ) {
         ::acdk::lang::RClass _exClass = _exception->getUserExceptionClass();
         __input = _exception->getInputStream();
           THROW1_FQ(::org::omg::CORBA::, UNKNOWN, RString("Unexpected User Exception: ") + _exClass->getName());
      } 
    } // not local
    } // while (true);
  }
};

::acdkx::orb::SkelInfoClassesStruct __BindingIterator_Skel_Info = { BindingIterator::clazzInfo(), BindingIterator_Skel::create_instance, 0 };
static::acdkx::orb::RegisterSkelInfoClass _register_BindingIterator_Skel(&__BindingIterator_Skel_Info);

//static
RBindingIterator BindingIterator::GetSkel(IN(::acdk::lang::RString) objKey)
{
  return new BindingIterator_Skel(objKey);
}
//virtual
::org::omg::CORBA::portable::ROutputStream
BindingIterator:: _invoke(IN(RString) method, ::org::omg::CORBA::portable::InputStream& __input, ::org::omg::CORBA::portable::ResponseHandler& handler) THROWS1(::org::omg::CORBA::RSystemException)
{
#if defined(__BORLANDC__) // Borland 5.51 bug has to be solved
  ::acdk::lang::RThrowable ex;
#endif //defined(__BORLANDC__)
  if (method->equals("_is_a") == true) {
    try {
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createReply();
      ::acdk::lang::RString name = __input.read_string();
      for (int i = 0; _BindingIterator_Skel__ids[i]; i++) {
        if (name->equals(_BindingIterator_Skel__ids[i]) == true) {
          __output->write_boolean(true);
          return __output;
        }
      }
      __output->write_boolean(false);
      return __output;
    } catch (::acdk::lang::RThrowable ex) {
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createExceptionReply();
      __output->write_exception(ex);
      return __output;
    } catch (...) {
      throw;
    }
  }
  const ::acdk::lang::dmi::ClazzMethodInfo* methinf =  ::acdkx::orb::AORB::lookupMethod(method, clazzInfo());
  if (methinf == 0)
    THROW1(Exception, RString("Cannot find matching function for ") + method);
  if (&BindingIterator_method_next_one_OUTLRBinding__Z == methinf) {
    try {
      RBinding b;
      bool __retval = next_one(b);
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createReply();
      __output->write_boolean(__retval);
      __output->write_acdk_object((::acdk::lang::RObject)b);
      return __output;
    } catch (::acdk::lang::RThrowable ex) {
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createExceptionReply();
      __output->write_exception(ex);
      return __output;
    } catch (...) {
      throw;
    }
  }
  if (&BindingIterator_method_next_n_IOUTLRBindingArray__Z == methinf) {
    try {
      int how_many = (int)__input.read_long();
      RBindingArray bl;
      bool __retval = next_n(how_many, bl);
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createReply();
      __output->write_boolean(__retval);
      __output->write_acdk_object((::acdk::lang::RObject)bl);
      return __output;
    } catch (::acdk::lang::RThrowable ex) {
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createExceptionReply();
      __output->write_exception(ex);
      return __output;
    } catch (...) {
      throw;
    }
  }
  if (&BindingIterator_method_destroy__V == methinf) {
    try {
      destroy();
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createReply();
      return __output;
    } catch (::acdk::lang::RThrowable ex) {
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createExceptionReply();
      __output->write_exception(ex);
      return __output;
    } catch (...) {
      throw;
    }
  }
  THROW0_FQ(::org::omg::CORBA::, BAD_OPERATION);
  return Nil;
}


} // namespace org
} // namespace omg
} // namespace CosNaming


namespace org { 
namespace omg { 
namespace CosNaming { 


//static
::acdk::lang::RObject
NamingContext_create_array(int length)
{
  return new ObjectArrayImpl<RNamingContext>(length);
}

//static
::acdk::lang::RObject
NamingContext_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class NamingContext_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NamingContext_method__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)NamingContext::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NamingContext_method_bind_INLRNameComponentArray_INL_org_omg_CORBA_RObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NamingContext* This = dmi_cast<NamingContext>(This_);
    This->bind((RNameComponentArray)args[0].getObjectVar(), (::org::omg::CORBA::RObject)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NamingContext_method_bind_context_INLRNameComponentArray_INLRNamingContext__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NamingContext* This = dmi_cast<NamingContext>(This_);
    This->bind_context((RNameComponentArray)args[0].getObjectVar(), (RNamingContext)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NamingContext_method_bind_new_context_INLRNameComponentArray__LRNamingContext__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NamingContext* This = dmi_cast<NamingContext>(This_);
    ret = (::acdk::lang::RObject)This->bind_new_context((RNameComponentArray)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NamingContext_method_destroy__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NamingContext* This = dmi_cast<NamingContext>(This_);
    This->destroy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NamingContext_method_list_IOUTLRBindingArray_OUTLRBindingIterator__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NamingContext* This = dmi_cast<NamingContext>(This_);
    This->list(args[0].getIntVar(),  ::acdk::lang::getTypedObjectRef< RBindingArray >(args[1]),  ::acdk::lang::getTypedObjectRef< RBindingIterator >(args[2]));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NamingContext_method_new_context__LRNamingContext__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NamingContext* This = dmi_cast<NamingContext>(This_);
    ret = (::acdk::lang::RObject)This->new_context();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NamingContext_method_rebind_INLRNameComponentArray_INL_org_omg_CORBA_RObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NamingContext* This = dmi_cast<NamingContext>(This_);
    This->rebind((RNameComponentArray)args[0].getObjectVar(), (::org::omg::CORBA::RObject)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NamingContext_method_rebind_context_INLRNameComponentArray_INLRNamingContext__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NamingContext* This = dmi_cast<NamingContext>(This_);
    This->rebind_context((RNameComponentArray)args[0].getObjectVar(), (RNamingContext)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NamingContext_method_resolve_INLRNameComponentArray__L_org_omg_CORBA_RObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NamingContext* This = dmi_cast<NamingContext>(This_);
    ret = (::acdk::lang::RObject)This->resolve((RNameComponentArray)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NamingContext_method_unbind_INLRNameComponentArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NamingContext* This = dmi_cast<NamingContext>(This_);
    This->unbind((RNameComponentArray)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _NamingContext_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* NamingContext_methods__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NamingContext_methods__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NamingContext_method_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_a_GetClass", // alternative name of method
  -1, // altlabelHashCode
  NamingContext_methods__args, // the arguments
  0, //arguments count
  NamingContext_methods__exceptions, // the declared exceptions
  NamingContext_MetainfoWrapper::NamingContext_method__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NamingContext_methods_bind_INLRNameComponentArray_INL_org_omg_CORBA_RObject__V_arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNameComponentArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NamingContext_methods_bind_INLRNameComponentArray_INL_org_omg_CORBA_RObject__V_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NamingContext_methods_bind_INLRNameComponentArray_INL_org_omg_CORBA_RObject__V_args[] = 
{
  &NamingContext_methods_bind_INLRNameComponentArray_INL_org_omg_CORBA_RObject__V_arg_n,
  &NamingContext_methods_bind_INLRNameComponentArray_INL_org_omg_CORBA_RObject__V_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* NamingContext_methods_bind_INLRNameComponentArray_INL_org_omg_CORBA_RObject__V_exceptions[] =
{
  RNotFound::clazzInfo(), 
  RCannotProceed::clazzInfo(), 
  RInvalidName::clazzInfo(), 
  RAlreadyBound::clazzInfo(), 
  0
};

void NamingContext_bind_INLRNameComponentArray_INL_org_omg_CORBA_RObject__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NotFound) == true)
    THROW_INSTANCE( RNotFound(ex));
 if (instanceof(ex, CannotProceed) == true)
    THROW_INSTANCE( RCannotProceed(ex));
 if (instanceof(ex, InvalidName) == true)
    THROW_INSTANCE( RInvalidName(ex));
 if (instanceof(ex, AlreadyBound) == true)
    THROW_INSTANCE( RAlreadyBound(ex));
}

::acdk::lang::dmi::ClazzMethodInfo NamingContext_method_bind_INLRNameComponentArray_INL_org_omg_CORBA_RObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "bind", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0_bind", // alternative name of method
  -1, // altlabelHashCode
  NamingContext_methods_bind_INLRNameComponentArray_INL_org_omg_CORBA_RObject__V_args, // the arguments
  0, //arguments count
  NamingContext_methods_bind_INLRNameComponentArray_INL_org_omg_CORBA_RObject__V_exceptions, // the declared exceptions
  NamingContext_MetainfoWrapper::NamingContext_method_bind_INLRNameComponentArray_INL_org_omg_CORBA_RObject__V_dispatch, // invoke this method
  NamingContext_bind_INLRNameComponentArray_INL_org_omg_CORBA_RObject__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NamingContext_methods_bind_context_INLRNameComponentArray_INLRNamingContext__V_arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNameComponentArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NamingContext_methods_bind_context_INLRNameComponentArray_INLRNamingContext__V_arg_nc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNamingContext::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NamingContext_methods_bind_context_INLRNameComponentArray_INLRNamingContext__V_args[] = 
{
  &NamingContext_methods_bind_context_INLRNameComponentArray_INLRNamingContext__V_arg_n,
  &NamingContext_methods_bind_context_INLRNameComponentArray_INLRNamingContext__V_arg_nc,
  0
};

::acdk::lang::dmi::ClazzInfo* NamingContext_methods_bind_context_INLRNameComponentArray_INLRNamingContext__V_exceptions[] =
{
  RNotFound::clazzInfo(), 
  RCannotProceed::clazzInfo(), 
  RInvalidName::clazzInfo(), 
  RAlreadyBound::clazzInfo(), 
  0
};

void NamingContext_bind_context_INLRNameComponentArray_INLRNamingContext__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NotFound) == true)
    THROW_INSTANCE( RNotFound(ex));
 if (instanceof(ex, CannotProceed) == true)
    THROW_INSTANCE( RCannotProceed(ex));
 if (instanceof(ex, InvalidName) == true)
    THROW_INSTANCE( RInvalidName(ex));
 if (instanceof(ex, AlreadyBound) == true)
    THROW_INSTANCE( RAlreadyBound(ex));
}

::acdk::lang::dmi::ClazzMethodInfo NamingContext_method_bind_context_INLRNameComponentArray_INLRNamingContext__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "bind_context", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_bind_context", // alternative name of method
  -1, // altlabelHashCode
  NamingContext_methods_bind_context_INLRNameComponentArray_INLRNamingContext__V_args, // the arguments
  0, //arguments count
  NamingContext_methods_bind_context_INLRNameComponentArray_INLRNamingContext__V_exceptions, // the declared exceptions
  NamingContext_MetainfoWrapper::NamingContext_method_bind_context_INLRNameComponentArray_INLRNamingContext__V_dispatch, // invoke this method
  NamingContext_bind_context_INLRNameComponentArray_INLRNamingContext__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NamingContext_methods_bind_new_context_INLRNameComponentArray__LRNamingContext__arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNameComponentArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NamingContext_methods_bind_new_context_INLRNameComponentArray__LRNamingContext__args[] = 
{
  &NamingContext_methods_bind_new_context_INLRNameComponentArray__LRNamingContext__arg_n,
  0
};

::acdk::lang::dmi::ClazzInfo* NamingContext_methods_bind_new_context_INLRNameComponentArray__LRNamingContext__exceptions[] =
{
  RNotFound::clazzInfo(), 
  RAlreadyBound::clazzInfo(), 
  RCannotProceed::clazzInfo(), 
  RInvalidName::clazzInfo(), 
  0
};

void NamingContext_bind_new_context_INLRNameComponentArray__LRNamingContext__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NotFound) == true)
    THROW_INSTANCE( RNotFound(ex));
 if (instanceof(ex, AlreadyBound) == true)
    THROW_INSTANCE( RAlreadyBound(ex));
 if (instanceof(ex, CannotProceed) == true)
    THROW_INSTANCE( RCannotProceed(ex));
 if (instanceof(ex, InvalidName) == true)
    THROW_INSTANCE( RInvalidName(ex));
}

::acdk::lang::dmi::ClazzMethodInfo NamingContext_method_bind_new_context_INLRNameComponentArray__LRNamingContext_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "bind_new_context", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNamingContext::clazzInfo(), // return type
  "_7_bind_new_context", // alternative name of method
  -1, // altlabelHashCode
  NamingContext_methods_bind_new_context_INLRNameComponentArray__LRNamingContext__args, // the arguments
  0, //arguments count
  NamingContext_methods_bind_new_context_INLRNameComponentArray__LRNamingContext__exceptions, // the declared exceptions
  NamingContext_MetainfoWrapper::NamingContext_method_bind_new_context_INLRNameComponentArray__LRNamingContext__dispatch, // invoke this method
  NamingContext_bind_new_context_INLRNameComponentArray__LRNamingContext__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NamingContext_methods_destroy__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NamingContext_methods_destroy__V_exceptions[] =
{
  RNotEmpty::clazzInfo(), 
  0
};

void NamingContext_destroy__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NotEmpty) == true)
    THROW_INSTANCE( RNotEmpty(ex));
}

::acdk::lang::dmi::ClazzMethodInfo NamingContext_method_destroy__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "destroy", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_destroy", // alternative name of method
  -1, // altlabelHashCode
  NamingContext_methods_destroy__V_args, // the arguments
  0, //arguments count
  NamingContext_methods_destroy__V_exceptions, // the declared exceptions
  NamingContext_MetainfoWrapper::NamingContext_method_destroy__V_dispatch, // invoke this method
  NamingContext_destroy__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NamingContext_methods_list_IOUTLRBindingArray_OUTLRBindingIterator__V_arg_how_many = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "how_many", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NamingContext_methods_list_IOUTLRBindingArray_OUTLRBindingIterator__V_arg_bl = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "bl", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBindingArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NamingContext_methods_list_IOUTLRBindingArray_OUTLRBindingIterator__V_arg_bi = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "bi", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBindingIterator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NamingContext_methods_list_IOUTLRBindingArray_OUTLRBindingIterator__V_args[] = 
{
  &NamingContext_methods_list_IOUTLRBindingArray_OUTLRBindingIterator__V_arg_how_many,
  &NamingContext_methods_list_IOUTLRBindingArray_OUTLRBindingIterator__V_arg_bl,
  &NamingContext_methods_list_IOUTLRBindingArray_OUTLRBindingIterator__V_arg_bi,
  0
};

::acdk::lang::dmi::ClazzInfo* NamingContext_methods_list_IOUTLRBindingArray_OUTLRBindingIterator__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NamingContext_method_list_IOUTLRBindingArray_OUTLRBindingIterator__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "list", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_list", // alternative name of method
  -1, // altlabelHashCode
  NamingContext_methods_list_IOUTLRBindingArray_OUTLRBindingIterator__V_args, // the arguments
  0, //arguments count
  NamingContext_methods_list_IOUTLRBindingArray_OUTLRBindingIterator__V_exceptions, // the declared exceptions
  NamingContext_MetainfoWrapper::NamingContext_method_list_IOUTLRBindingArray_OUTLRBindingIterator__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NamingContext_methods_new_context__LRNamingContext__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NamingContext_methods_new_context__LRNamingContext__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NamingContext_method_new_context__LRNamingContext_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "new_context", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNamingContext::clazzInfo(), // return type
  "_6_new_context", // alternative name of method
  -1, // altlabelHashCode
  NamingContext_methods_new_context__LRNamingContext__args, // the arguments
  0, //arguments count
  NamingContext_methods_new_context__LRNamingContext__exceptions, // the declared exceptions
  NamingContext_MetainfoWrapper::NamingContext_method_new_context__LRNamingContext__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NamingContext_methods_rebind_INLRNameComponentArray_INL_org_omg_CORBA_RObject__V_arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNameComponentArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NamingContext_methods_rebind_INLRNameComponentArray_INL_org_omg_CORBA_RObject__V_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NamingContext_methods_rebind_INLRNameComponentArray_INL_org_omg_CORBA_RObject__V_args[] = 
{
  &NamingContext_methods_rebind_INLRNameComponentArray_INL_org_omg_CORBA_RObject__V_arg_n,
  &NamingContext_methods_rebind_INLRNameComponentArray_INL_org_omg_CORBA_RObject__V_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* NamingContext_methods_rebind_INLRNameComponentArray_INL_org_omg_CORBA_RObject__V_exceptions[] =
{
  RNotFound::clazzInfo(), 
  RCannotProceed::clazzInfo(), 
  RInvalidName::clazzInfo(), 
  0
};

void NamingContext_rebind_INLRNameComponentArray_INL_org_omg_CORBA_RObject__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NotFound) == true)
    THROW_INSTANCE( RNotFound(ex));
 if (instanceof(ex, CannotProceed) == true)
    THROW_INSTANCE( RCannotProceed(ex));
 if (instanceof(ex, InvalidName) == true)
    THROW_INSTANCE( RInvalidName(ex));
}

::acdk::lang::dmi::ClazzMethodInfo NamingContext_method_rebind_INLRNameComponentArray_INL_org_omg_CORBA_RObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "rebind", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_rebind", // alternative name of method
  -1, // altlabelHashCode
  NamingContext_methods_rebind_INLRNameComponentArray_INL_org_omg_CORBA_RObject__V_args, // the arguments
  0, //arguments count
  NamingContext_methods_rebind_INLRNameComponentArray_INL_org_omg_CORBA_RObject__V_exceptions, // the declared exceptions
  NamingContext_MetainfoWrapper::NamingContext_method_rebind_INLRNameComponentArray_INL_org_omg_CORBA_RObject__V_dispatch, // invoke this method
  NamingContext_rebind_INLRNameComponentArray_INL_org_omg_CORBA_RObject__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NamingContext_methods_rebind_context_INLRNameComponentArray_INLRNamingContext__V_arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNameComponentArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NamingContext_methods_rebind_context_INLRNameComponentArray_INLRNamingContext__V_arg_nc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNamingContext::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NamingContext_methods_rebind_context_INLRNameComponentArray_INLRNamingContext__V_args[] = 
{
  &NamingContext_methods_rebind_context_INLRNameComponentArray_INLRNamingContext__V_arg_n,
  &NamingContext_methods_rebind_context_INLRNameComponentArray_INLRNamingContext__V_arg_nc,
  0
};

::acdk::lang::dmi::ClazzInfo* NamingContext_methods_rebind_context_INLRNameComponentArray_INLRNamingContext__V_exceptions[] =
{
  RNotFound::clazzInfo(), 
  RCannotProceed::clazzInfo(), 
  RInvalidName::clazzInfo(), 
  0
};

void NamingContext_rebind_context_INLRNameComponentArray_INLRNamingContext__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NotFound) == true)
    THROW_INSTANCE( RNotFound(ex));
 if (instanceof(ex, CannotProceed) == true)
    THROW_INSTANCE( RCannotProceed(ex));
 if (instanceof(ex, InvalidName) == true)
    THROW_INSTANCE( RInvalidName(ex));
}

::acdk::lang::dmi::ClazzMethodInfo NamingContext_method_rebind_context_INLRNameComponentArray_INLRNamingContext__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "rebind_context", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_rebind_context", // alternative name of method
  -1, // altlabelHashCode
  NamingContext_methods_rebind_context_INLRNameComponentArray_INLRNamingContext__V_args, // the arguments
  0, //arguments count
  NamingContext_methods_rebind_context_INLRNameComponentArray_INLRNamingContext__V_exceptions, // the declared exceptions
  NamingContext_MetainfoWrapper::NamingContext_method_rebind_context_INLRNameComponentArray_INLRNamingContext__V_dispatch, // invoke this method
  NamingContext_rebind_context_INLRNameComponentArray_INLRNamingContext__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NamingContext_methods_resolve_INLRNameComponentArray__L_org_omg_CORBA_RObject__arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNameComponentArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NamingContext_methods_resolve_INLRNameComponentArray__L_org_omg_CORBA_RObject__args[] = 
{
  &NamingContext_methods_resolve_INLRNameComponentArray__L_org_omg_CORBA_RObject__arg_n,
  0
};

::acdk::lang::dmi::ClazzInfo* NamingContext_methods_resolve_INLRNameComponentArray__L_org_omg_CORBA_RObject__exceptions[] =
{
  RNotFound::clazzInfo(), 
  RCannotProceed::clazzInfo(), 
  RInvalidName::clazzInfo(), 
  0
};

void NamingContext_resolve_INLRNameComponentArray__L_org_omg_CORBA_RObject__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NotFound) == true)
    THROW_INSTANCE( RNotFound(ex));
 if (instanceof(ex, CannotProceed) == true)
    THROW_INSTANCE( RCannotProceed(ex));
 if (instanceof(ex, InvalidName) == true)
    THROW_INSTANCE( RInvalidName(ex));
}

::acdk::lang::dmi::ClazzMethodInfo NamingContext_method_resolve_INLRNameComponentArray__L_org_omg_CORBA_RObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "resolve", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo(), // return type
  "_4_resolve", // alternative name of method
  -1, // altlabelHashCode
  NamingContext_methods_resolve_INLRNameComponentArray__L_org_omg_CORBA_RObject__args, // the arguments
  0, //arguments count
  NamingContext_methods_resolve_INLRNameComponentArray__L_org_omg_CORBA_RObject__exceptions, // the declared exceptions
  NamingContext_MetainfoWrapper::NamingContext_method_resolve_INLRNameComponentArray__L_org_omg_CORBA_RObject__dispatch, // invoke this method
  NamingContext_resolve_INLRNameComponentArray__L_org_omg_CORBA_RObject__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NamingContext_methods_unbind_INLRNameComponentArray__V_arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNameComponentArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NamingContext_methods_unbind_INLRNameComponentArray__V_args[] = 
{
  &NamingContext_methods_unbind_INLRNameComponentArray__V_arg_n,
  0
};

::acdk::lang::dmi::ClazzInfo* NamingContext_methods_unbind_INLRNameComponentArray__V_exceptions[] =
{
  RNotFound::clazzInfo(), 
  RCannotProceed::clazzInfo(), 
  RInvalidName::clazzInfo(), 
  0
};

void NamingContext_unbind_INLRNameComponentArray__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NotFound) == true)
    THROW_INSTANCE( RNotFound(ex));
 if (instanceof(ex, CannotProceed) == true)
    THROW_INSTANCE( RCannotProceed(ex));
 if (instanceof(ex, InvalidName) == true)
    THROW_INSTANCE( RInvalidName(ex));
}

::acdk::lang::dmi::ClazzMethodInfo NamingContext_method_unbind_INLRNameComponentArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "unbind", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_unbind", // alternative name of method
  -1, // altlabelHashCode
  NamingContext_methods_unbind_INLRNameComponentArray__V_args, // the arguments
  0, //arguments count
  NamingContext_methods_unbind_INLRNameComponentArray__V_exceptions, // the declared exceptions
  NamingContext_MetainfoWrapper::NamingContext_method_unbind_INLRNameComponentArray__V_dispatch, // invoke this method
  NamingContext_unbind_INLRNameComponentArray__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _NamingContext_methods[] = 
{
  &NamingContext_method_,
  &NamingContext_method_bind_INLRNameComponentArray_INL_org_omg_CORBA_RObject__V,
  &NamingContext_method_bind_context_INLRNameComponentArray_INLRNamingContext__V,
  &NamingContext_method_bind_new_context_INLRNameComponentArray__LRNamingContext_,
  &NamingContext_method_destroy__V,
  &NamingContext_method_list_IOUTLRBindingArray_OUTLRBindingIterator__V,
  &NamingContext_method_new_context__LRNamingContext_,
  &NamingContext_method_rebind_INLRNameComponentArray_INL_org_omg_CORBA_RObject__V,
  &NamingContext_method_rebind_context_INLRNameComponentArray_INLRNamingContext__V,
  &NamingContext_method_resolve_INLRNameComponentArray__L_org_omg_CORBA_RObject_,
  &NamingContext_method_unbind_INLRNameComponentArray__V,
  0
};


struct NamingContext_MetaInfoInitializer
{  NamingContext_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = NamingContext::clazzInfo();
    ci->fields =  _NamingContext_fields;
    ci->methods =  _NamingContext_methods;
    ci->_scopeParent = org_omg_CosNaming_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
NamingContext_MetaInfoInitializer NamingContext_MetaInfoInitializer_staticinstance__;


struct NamingContext_clazzInfo_ClazzAttributesResInitializer9
{
  NamingContext_clazzInfo_ClazzAttributesResInitializer9()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)NamingContext::clazzInfo(), "acdkx_orb_ClassType", ::acdk::lang::dmi::ClazzAttributeResValue::makeStringRes("", false));
  }
};

NamingContext_clazzInfo_ClazzAttributesResInitializer9 NamingContext_clazzInfo_ClazzAttributesResInitializer9_instance;


char* _NamingContext_Skel__ids[] = {
  "IDL:org/omg/CosNaming/NamingContext:1.0",
  0
};

class ACDKX_ORB_PUBLIC NamingContext_Skel
: extends ::acdkx::orb::CorObject,
  implements NamingContext
{
public:
  char** _ids() { return _NamingContext_Skel__ids; }
  NamingContext_Skel() : ACDK_FQ_SUPER_QUALIFIER(::acdkx::orb::, CorObject()) { }
  NamingContext_Skel(IN(::acdk::lang::RString) objKey) : ACDK_FQ_SUPER_QUALIFIER(::acdkx::orb::, CorObject(objKey)) { }
  static ::acdk::lang::RObject create_instance() { return new NamingContext_Skel(); }
  virtual void bind(IN(RNameComponentArray) n, IN(::org::omg::CORBA::RObject) obj) THROWS4(RNotFound, RCannotProceed, RInvalidName, RAlreadyBound)
  {
    while (true) {
    if (is_local() == true) {
        dynamic_cast< NamingContext*>(localObject())->bind(n, obj);
        return;
     } else { // not local
      ::org::omg::CORBA::portable::ROutputStream __output = Nil;
      ::org::omg::CORBA::portable::RInputStream __input = Nil;
      try {
        __output = _request("bind", true);
        __output->write_acdk_object((::acdk::lang::RObject)n);
        __output->write_acdk_object((::acdk::lang::RObject)obj);
        __input = ACDK_FQ_SUPER_QUALIFIER(::acdkx::orb::, CorObject)::_invoke(__output);
        return;
      } catch (::org::omg::CORBA::portable::RRemarshalException ) {
        ; //nothing continue;
      } catch (::org::omg::CORBA::portable::RApplicationException _exception ) {
         ::acdk::lang::RClass _exClass = _exception->getUserExceptionClass();
         __input = _exception->getInputStream();
         if (_exClass == NotFound::GetClass()) {
           ::acdk::lang::RObject obj = (::acdk::lang::RObject)__input->read_acdk_object(NotFound::GetClass());
           _releaseReply(__input);
           throw (RNotFound)obj;
         }
         if (_exClass == CannotProceed::GetClass()) {
           ::acdk::lang::RObject obj = (::acdk::lang::RObject)__input->read_acdk_object(CannotProceed::GetClass());
           _releaseReply(__input);
           throw (RCannotProceed)obj;
         }
         if (_exClass == InvalidName::GetClass()) {
           ::acdk::lang::RObject obj = (::acdk::lang::RObject)__input->read_acdk_object(InvalidName::GetClass());
           _releaseReply(__input);
           throw (RInvalidName)obj;
         }
         if (_exClass == AlreadyBound::GetClass()) {
           ::acdk::lang::RObject obj = (::acdk::lang::RObject)__input->read_acdk_object(AlreadyBound::GetClass());
           _releaseReply(__input);
           throw (RAlreadyBound)obj;
         }
           THROW1_FQ(::org::omg::CORBA::, UNKNOWN, RString("Unexpected User Exception: ") + _exClass->getName());
      } 
    } // not local
    } // while (true);
  }
  virtual void rebind(IN(RNameComponentArray) n, IN(::org::omg::CORBA::RObject) obj) THROWS3(RNotFound, RCannotProceed, RInvalidName)
  {
    while (true) {
    if (is_local() == true) {
        dynamic_cast< NamingContext*>(localObject())->rebind(n, obj);
        return;
     } else { // not local
      ::org::omg::CORBA::portable::ROutputStream __output = Nil;
      ::org::omg::CORBA::portable::RInputStream __input = Nil;
      try {
        __output = _request("rebind", true);
        __output->write_acdk_object((::acdk::lang::RObject)n);
        __output->write_acdk_object((::acdk::lang::RObject)obj);
        __input = ACDK_FQ_SUPER_QUALIFIER(::acdkx::orb::, CorObject)::_invoke(__output);
        return;
      } catch (::org::omg::CORBA::portable::RRemarshalException ) {
        ; //nothing continue;
      } catch (::org::omg::CORBA::portable::RApplicationException _exception ) {
         ::acdk::lang::RClass _exClass = _exception->getUserExceptionClass();
         __input = _exception->getInputStream();
         if (_exClass == NotFound::GetClass()) {
           ::acdk::lang::RObject obj = (::acdk::lang::RObject)__input->read_acdk_object(NotFound::GetClass());
           _releaseReply(__input);
           throw (RNotFound)obj;
         }
         if (_exClass == CannotProceed::GetClass()) {
           ::acdk::lang::RObject obj = (::acdk::lang::RObject)__input->read_acdk_object(CannotProceed::GetClass());
           _releaseReply(__input);
           throw (RCannotProceed)obj;
         }
         if (_exClass == InvalidName::GetClass()) {
           ::acdk::lang::RObject obj = (::acdk::lang::RObject)__input->read_acdk_object(InvalidName::GetClass());
           _releaseReply(__input);
           throw (RInvalidName)obj;
         }
           THROW1_FQ(::org::omg::CORBA::, UNKNOWN, RString("Unexpected User Exception: ") + _exClass->getName());
      } 
    } // not local
    } // while (true);
  }
  virtual void bind_context(IN(RNameComponentArray) n, IN(RNamingContext) nc) THROWS4(RNotFound, RCannotProceed, RInvalidName, RAlreadyBound)
  {
    while (true) {
    if (is_local() == true) {
        dynamic_cast< NamingContext*>(localObject())->bind_context(n, nc);
        return;
     } else { // not local
      ::org::omg::CORBA::portable::ROutputStream __output = Nil;
      ::org::omg::CORBA::portable::RInputStream __input = Nil;
      try {
        __output = _request("bind_context", true);
        __output->write_acdk_object((::acdk::lang::RObject)n);
        __output->write_acdk_object((::acdk::lang::RObject)nc);
        __input = ACDK_FQ_SUPER_QUALIFIER(::acdkx::orb::, CorObject)::_invoke(__output);
        return;
      } catch (::org::omg::CORBA::portable::RRemarshalException ) {
        ; //nothing continue;
      } catch (::org::omg::CORBA::portable::RApplicationException _exception ) {
         ::acdk::lang::RClass _exClass = _exception->getUserExceptionClass();
         __input = _exception->getInputStream();
         if (_exClass == NotFound::GetClass()) {
           ::acdk::lang::RObject obj = (::acdk::lang::RObject)__input->read_acdk_object(NotFound::GetClass());
           _releaseReply(__input);
           throw (RNotFound)obj;
         }
         if (_exClass == CannotProceed::GetClass()) {
           ::acdk::lang::RObject obj = (::acdk::lang::RObject)__input->read_acdk_object(CannotProceed::GetClass());
           _releaseReply(__input);
           throw (RCannotProceed)obj;
         }
         if (_exClass == InvalidName::GetClass()) {
           ::acdk::lang::RObject obj = (::acdk::lang::RObject)__input->read_acdk_object(InvalidName::GetClass());
           _releaseReply(__input);
           throw (RInvalidName)obj;
         }
         if (_exClass == AlreadyBound::GetClass()) {
           ::acdk::lang::RObject obj = (::acdk::lang::RObject)__input->read_acdk_object(AlreadyBound::GetClass());
           _releaseReply(__input);
           throw (RAlreadyBound)obj;
         }
           THROW1_FQ(::org::omg::CORBA::, UNKNOWN, RString("Unexpected User Exception: ") + _exClass->getName());
      } 
    } // not local
    } // while (true);
  }
  virtual void rebind_context(IN(RNameComponentArray) n, IN(RNamingContext) nc) THROWS3(RNotFound, RCannotProceed, RInvalidName)
  {
    while (true) {
    if (is_local() == true) {
        dynamic_cast< NamingContext*>(localObject())->rebind_context(n, nc);
        return;
     } else { // not local
      ::org::omg::CORBA::portable::ROutputStream __output = Nil;
      ::org::omg::CORBA::portable::RInputStream __input = Nil;
      try {
        __output = _request("rebind_context", true);
        __output->write_acdk_object((::acdk::lang::RObject)n);
        __output->write_acdk_object((::acdk::lang::RObject)nc);
        __input = ACDK_FQ_SUPER_QUALIFIER(::acdkx::orb::, CorObject)::_invoke(__output);
        return;
      } catch (::org::omg::CORBA::portable::RRemarshalException ) {
        ; //nothing continue;
      } catch (::org::omg::CORBA::portable::RApplicationException _exception ) {
         ::acdk::lang::RClass _exClass = _exception->getUserExceptionClass();
         __input = _exception->getInputStream();
         if (_exClass == NotFound::GetClass()) {
           ::acdk::lang::RObject obj = (::acdk::lang::RObject)__input->read_acdk_object(NotFound::GetClass());
           _releaseReply(__input);
           throw (RNotFound)obj;
         }
         if (_exClass == CannotProceed::GetClass()) {
           ::acdk::lang::RObject obj = (::acdk::lang::RObject)__input->read_acdk_object(CannotProceed::GetClass());
           _releaseReply(__input);
           throw (RCannotProceed)obj;
         }
         if (_exClass == InvalidName::GetClass()) {
           ::acdk::lang::RObject obj = (::acdk::lang::RObject)__input->read_acdk_object(InvalidName::GetClass());
           _releaseReply(__input);
           throw (RInvalidName)obj;
         }
           THROW1_FQ(::org::omg::CORBA::, UNKNOWN, RString("Unexpected User Exception: ") + _exClass->getName());
      } 
    } // not local
    } // while (true);
  }
  virtual ::org::omg::CORBA::RObject resolve(IN(RNameComponentArray) n) THROWS3(RNotFound, RCannotProceed, RInvalidName)
  {
    while (true) {
    if (is_local() == true) {
        ::org::omg::CORBA::RObject __retvalue = dynamic_cast< NamingContext*>(localObject())->resolve(n);
     } else { // not local
      ::org::omg::CORBA::portable::ROutputStream __output = Nil;
      ::org::omg::CORBA::portable::RInputStream __input = Nil;
      try {
        __output = _request("resolve", true);
        __output->write_acdk_object((::acdk::lang::RObject)n);
        __input = ACDK_FQ_SUPER_QUALIFIER(::acdkx::orb::, CorObject)::_invoke(__output);
        ::org::omg::CORBA::RObject __retvalue = (::org::omg::CORBA::RObject)__input->read_acdk_object(::org::omg::CORBA::Object::GetClass());
        return __retvalue;
      } catch (::org::omg::CORBA::portable::RRemarshalException ) {
        ; //nothing continue;
      } catch (::org::omg::CORBA::portable::RApplicationException _exception ) {
         ::acdk::lang::RClass _exClass = _exception->getUserExceptionClass();
         __input = _exception->getInputStream();
         if (_exClass == NotFound::GetClass()) {
           ::acdk::lang::RObject obj = (::acdk::lang::RObject)__input->read_acdk_object(NotFound::GetClass());
           _releaseReply(__input);
           throw (RNotFound)obj;
         }
         if (_exClass == CannotProceed::GetClass()) {
           ::acdk::lang::RObject obj = (::acdk::lang::RObject)__input->read_acdk_object(CannotProceed::GetClass());
           _releaseReply(__input);
           throw (RCannotProceed)obj;
         }
         if (_exClass == InvalidName::GetClass()) {
           ::acdk::lang::RObject obj = (::acdk::lang::RObject)__input->read_acdk_object(InvalidName::GetClass());
           _releaseReply(__input);
           throw (RInvalidName)obj;
         }
           THROW1_FQ(::org::omg::CORBA::, UNKNOWN, RString("Unexpected User Exception: ") + _exClass->getName());
      } 
    } // not local
    } // while (true);
  }
  virtual void unbind(IN(RNameComponentArray) n) THROWS3(RNotFound, RCannotProceed, RInvalidName)
  {
    while (true) {
    if (is_local() == true) {
        dynamic_cast< NamingContext*>(localObject())->unbind(n);
        return;
     } else { // not local
      ::org::omg::CORBA::portable::ROutputStream __output = Nil;
      ::org::omg::CORBA::portable::RInputStream __input = Nil;
      try {
        __output = _request("unbind", true);
        __output->write_acdk_object((::acdk::lang::RObject)n);
        __input = ACDK_FQ_SUPER_QUALIFIER(::acdkx::orb::, CorObject)::_invoke(__output);
        return;
      } catch (::org::omg::CORBA::portable::RRemarshalException ) {
        ; //nothing continue;
      } catch (::org::omg::CORBA::portable::RApplicationException _exception ) {
         ::acdk::lang::RClass _exClass = _exception->getUserExceptionClass();
         __input = _exception->getInputStream();
         if (_exClass == NotFound::GetClass()) {
           ::acdk::lang::RObject obj = (::acdk::lang::RObject)__input->read_acdk_object(NotFound::GetClass());
           _releaseReply(__input);
           throw (RNotFound)obj;
         }
         if (_exClass == CannotProceed::GetClass()) {
           ::acdk::lang::RObject obj = (::acdk::lang::RObject)__input->read_acdk_object(CannotProceed::GetClass());
           _releaseReply(__input);
           throw (RCannotProceed)obj;
         }
         if (_exClass == InvalidName::GetClass()) {
           ::acdk::lang::RObject obj = (::acdk::lang::RObject)__input->read_acdk_object(InvalidName::GetClass());
           _releaseReply(__input);
           throw (RInvalidName)obj;
         }
           THROW1_FQ(::org::omg::CORBA::, UNKNOWN, RString("Unexpected User Exception: ") + _exClass->getName());
      } 
    } // not local
    } // while (true);
  }
  virtual RNamingContext new_context()
  {
    while (true) {
    if (is_local() == true) {
        RNamingContext __retvalue = dynamic_cast< NamingContext*>(localObject())->new_context();
     } else { // not local
      ::org::omg::CORBA::portable::ROutputStream __output = Nil;
      ::org::omg::CORBA::portable::RInputStream __input = Nil;
      try {
        __output = _request("new_context", true);
        __input = ACDK_FQ_SUPER_QUALIFIER(::acdkx::orb::, CorObject)::_invoke(__output);
        RNamingContext __retvalue = (RNamingContext)__input->read_acdk_object(NamingContext::GetClass());
        return __retvalue;
      } catch (::org::omg::CORBA::portable::RRemarshalException ) {
        ; //nothing continue;
      } catch (::org::omg::CORBA::portable::RApplicationException _exception ) {
         ::acdk::lang::RClass _exClass = _exception->getUserExceptionClass();
         __input = _exception->getInputStream();
           THROW1_FQ(::org::omg::CORBA::, UNKNOWN, RString("Unexpected User Exception: ") + _exClass->getName());
      } 
    } // not local
    } // while (true);
  }
  virtual RNamingContext bind_new_context(IN(RNameComponentArray) n) THROWS4(RNotFound, RAlreadyBound, RCannotProceed, RInvalidName)
  {
    while (true) {
    if (is_local() == true) {
        RNamingContext __retvalue = dynamic_cast< NamingContext*>(localObject())->bind_new_context(n);
     } else { // not local
      ::org::omg::CORBA::portable::ROutputStream __output = Nil;
      ::org::omg::CORBA::portable::RInputStream __input = Nil;
      try {
        __output = _request("bind_new_context", true);
        __output->write_acdk_object((::acdk::lang::RObject)n);
        __input = ACDK_FQ_SUPER_QUALIFIER(::acdkx::orb::, CorObject)::_invoke(__output);
        RNamingContext __retvalue = (RNamingContext)__input->read_acdk_object(NamingContext::GetClass());
        return __retvalue;
      } catch (::org::omg::CORBA::portable::RRemarshalException ) {
        ; //nothing continue;
      } catch (::org::omg::CORBA::portable::RApplicationException _exception ) {
         ::acdk::lang::RClass _exClass = _exception->getUserExceptionClass();
         __input = _exception->getInputStream();
         if (_exClass == NotFound::GetClass()) {
           ::acdk::lang::RObject obj = (::acdk::lang::RObject)__input->read_acdk_object(NotFound::GetClass());
           _releaseReply(__input);
           throw (RNotFound)obj;
         }
         if (_exClass == AlreadyBound::GetClass()) {
           ::acdk::lang::RObject obj = (::acdk::lang::RObject)__input->read_acdk_object(AlreadyBound::GetClass());
           _releaseReply(__input);
           throw (RAlreadyBound)obj;
         }
         if (_exClass == CannotProceed::GetClass()) {
           ::acdk::lang::RObject obj = (::acdk::lang::RObject)__input->read_acdk_object(CannotProceed::GetClass());
           _releaseReply(__input);
           throw (RCannotProceed)obj;
         }
         if (_exClass == InvalidName::GetClass()) {
           ::acdk::lang::RObject obj = (::acdk::lang::RObject)__input->read_acdk_object(InvalidName::GetClass());
           _releaseReply(__input);
           throw (RInvalidName)obj;
         }
           THROW1_FQ(::org::omg::CORBA::, UNKNOWN, RString("Unexpected User Exception: ") + _exClass->getName());
      } 
    } // not local
    } // while (true);
  }
  virtual void destroy() THROWS1(RNotEmpty)
  {
    while (true) {
    if (is_local() == true) {
        dynamic_cast< NamingContext*>(localObject())->destroy();
        return;
     } else { // not local
      ::org::omg::CORBA::portable::ROutputStream __output = Nil;
      ::org::omg::CORBA::portable::RInputStream __input = Nil;
      try {
        __output = _request("destroy", true);
        __input = ACDK_FQ_SUPER_QUALIFIER(::acdkx::orb::, CorObject)::_invoke(__output);
        return;
      } catch (::org::omg::CORBA::portable::RRemarshalException ) {
        ; //nothing continue;
      } catch (::org::omg::CORBA::portable::RApplicationException _exception ) {
         ::acdk::lang::RClass _exClass = _exception->getUserExceptionClass();
         __input = _exception->getInputStream();
         if (_exClass == NotEmpty::GetClass()) {
           ::acdk::lang::RObject obj = (::acdk::lang::RObject)__input->read_acdk_object(NotEmpty::GetClass());
           _releaseReply(__input);
           throw (RNotEmpty)obj;
         }
           THROW1_FQ(::org::omg::CORBA::, UNKNOWN, RString("Unexpected User Exception: ") + _exClass->getName());
      } 
    } // not local
    } // while (true);
  }
  virtual void list(int how_many, OUT(RBindingArray) bl, OUT(RBindingIterator) bi)
  {
    while (true) {
    if (is_local() == true) {
        dynamic_cast< NamingContext*>(localObject())->list(how_many, bl, bi);
        return;
     } else { // not local
      ::org::omg::CORBA::portable::ROutputStream __output = Nil;
      ::org::omg::CORBA::portable::RInputStream __input = Nil;
      try {
        __output = _request("list", true);
        __output->write_long(how_many);
        __input = ACDK_FQ_SUPER_QUALIFIER(::acdkx::orb::, CorObject)::_invoke(__output);
        bl = (RBindingArray) __input->read_acdk_object(BindingArray::GetClass());
        bi = (RBindingIterator) __input->read_acdk_object(BindingIterator::GetClass());
        return;
      } catch (::org::omg::CORBA::portable::RRemarshalException ) {
        ; //nothing continue;
      } catch (::org::omg::CORBA::portable::RApplicationException _exception ) {
         ::acdk::lang::RClass _exClass = _exception->getUserExceptionClass();
         __input = _exception->getInputStream();
           THROW1_FQ(::org::omg::CORBA::, UNKNOWN, RString("Unexpected User Exception: ") + _exClass->getName());
      } 
    } // not local
    } // while (true);
  }
  virtual ::acdk::lang::RClass GetClass()
  {
    while (true) {
    if (is_local() == true) {
        ::acdk::lang::RClass __retvalue = dynamic_cast< NamingContext*>(localObject())->GetClass();
     } else { // not local
      ::org::omg::CORBA::portable::ROutputStream __output = Nil;
      ::org::omg::CORBA::portable::RInputStream __input = Nil;
      try {
        __output = _request("GetClass", true);
        __input = ACDK_FQ_SUPER_QUALIFIER(::acdkx::orb::, CorObject)::_invoke(__output);
        ::acdk::lang::RClass __retvalue = (::acdk::lang::RClass)__input->read_acdk_object(::acdk::lang::Class::GetClass());
        return __retvalue;
      } catch (::org::omg::CORBA::portable::RRemarshalException ) {
        ; //nothing continue;
      } catch (::org::omg::CORBA::portable::RApplicationException _exception ) {
         ::acdk::lang::RClass _exClass = _exception->getUserExceptionClass();
         __input = _exception->getInputStream();
           THROW1_FQ(::org::omg::CORBA::, UNKNOWN, RString("Unexpected User Exception: ") + _exClass->getName());
      } 
    } // not local
    } // while (true);
  }
};

::acdkx::orb::SkelInfoClassesStruct __NamingContext_Skel_Info = { NamingContext::clazzInfo(), NamingContext_Skel::create_instance, 0 };
static::acdkx::orb::RegisterSkelInfoClass _register_NamingContext_Skel(&__NamingContext_Skel_Info);

//static
RNamingContext NamingContext::GetSkel(IN(::acdk::lang::RString) objKey)
{
  return new NamingContext_Skel(objKey);
}
//virtual
::org::omg::CORBA::portable::ROutputStream
NamingContext:: _invoke(IN(RString) method, ::org::omg::CORBA::portable::InputStream& __input, ::org::omg::CORBA::portable::ResponseHandler& handler) THROWS1(::org::omg::CORBA::RSystemException)
{
#if defined(__BORLANDC__) // Borland 5.51 bug has to be solved
  ::acdk::lang::RThrowable ex;
#endif //defined(__BORLANDC__)
  if (method->equals("_is_a") == true) {
    try {
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createReply();
      ::acdk::lang::RString name = __input.read_string();
      for (int i = 0; _NamingContext_Skel__ids[i]; i++) {
        if (name->equals(_NamingContext_Skel__ids[i]) == true) {
          __output->write_boolean(true);
          return __output;
        }
      }
      __output->write_boolean(false);
      return __output;
    } catch (::acdk::lang::RThrowable ex) {
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createExceptionReply();
      __output->write_exception(ex);
      return __output;
    } catch (...) {
      throw;
    }
  }
  const ::acdk::lang::dmi::ClazzMethodInfo* methinf =  ::acdkx::orb::AORB::lookupMethod(method, clazzInfo());
  if (methinf == 0)
    THROW1(Exception, RString("Cannot find matching function for ") + method);
  if (&NamingContext_method_bind_INLRNameComponentArray_INL_org_omg_CORBA_RObject__V == methinf) {
    try {
      RNameComponentArray n = (RNameComponentArray)__input.read_acdk_object(NameComponentArray::GetClass());
      ::org::omg::CORBA::RObject obj = (::org::omg::CORBA::RObject)__input.read_acdk_object(::org::omg::CORBA::Object::GetClass());
      bind(n, obj);
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createReply();
      return __output;
    } catch (::acdk::lang::RThrowable ex) {
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createExceptionReply();
      __output->write_exception(ex);
      return __output;
    } catch (...) {
      throw;
    }
  }
  if (&NamingContext_method_rebind_INLRNameComponentArray_INL_org_omg_CORBA_RObject__V == methinf) {
    try {
      RNameComponentArray n = (RNameComponentArray)__input.read_acdk_object(NameComponentArray::GetClass());
      ::org::omg::CORBA::RObject obj = (::org::omg::CORBA::RObject)__input.read_acdk_object(::org::omg::CORBA::Object::GetClass());
      rebind(n, obj);
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createReply();
      return __output;
    } catch (::acdk::lang::RThrowable ex) {
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createExceptionReply();
      __output->write_exception(ex);
      return __output;
    } catch (...) {
      throw;
    }
  }
  if (&NamingContext_method_bind_context_INLRNameComponentArray_INLRNamingContext__V == methinf) {
    try {
      RNameComponentArray n = (RNameComponentArray)__input.read_acdk_object(NameComponentArray::GetClass());
      RNamingContext nc = (RNamingContext)__input.read_acdk_object(NamingContext::GetClass());
      bind_context(n, nc);
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createReply();
      return __output;
    } catch (::acdk::lang::RThrowable ex) {
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createExceptionReply();
      __output->write_exception(ex);
      return __output;
    } catch (...) {
      throw;
    }
  }
  if (&NamingContext_method_rebind_context_INLRNameComponentArray_INLRNamingContext__V == methinf) {
    try {
      RNameComponentArray n = (RNameComponentArray)__input.read_acdk_object(NameComponentArray::GetClass());
      RNamingContext nc = (RNamingContext)__input.read_acdk_object(NamingContext::GetClass());
      rebind_context(n, nc);
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createReply();
      return __output;
    } catch (::acdk::lang::RThrowable ex) {
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createExceptionReply();
      __output->write_exception(ex);
      return __output;
    } catch (...) {
      throw;
    }
  }
  if (&NamingContext_method_resolve_INLRNameComponentArray__L_org_omg_CORBA_RObject_ == methinf) {
    try {
      RNameComponentArray n = (RNameComponentArray)__input.read_acdk_object(NameComponentArray::GetClass());
      ::org::omg::CORBA::RObject __retval = resolve(n);
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createReply();
      __output->write_acdk_object((::acdk::lang::RObject)__retval);
      return __output;
    } catch (::acdk::lang::RThrowable ex) {
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createExceptionReply();
      __output->write_exception(ex);
      return __output;
    } catch (...) {
      throw;
    }
  }
  if (&NamingContext_method_unbind_INLRNameComponentArray__V == methinf) {
    try {
      RNameComponentArray n = (RNameComponentArray)__input.read_acdk_object(NameComponentArray::GetClass());
      unbind(n);
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createReply();
      return __output;
    } catch (::acdk::lang::RThrowable ex) {
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createExceptionReply();
      __output->write_exception(ex);
      return __output;
    } catch (...) {
      throw;
    }
  }
  if (&NamingContext_method_new_context__LRNamingContext_ == methinf) {
    try {
      RNamingContext __retval = new_context();
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createReply();
      __output->write_acdk_object((::acdk::lang::RObject)__retval);
      return __output;
    } catch (::acdk::lang::RThrowable ex) {
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createExceptionReply();
      __output->write_exception(ex);
      return __output;
    } catch (...) {
      throw;
    }
  }
  if (&NamingContext_method_bind_new_context_INLRNameComponentArray__LRNamingContext_ == methinf) {
    try {
      RNameComponentArray n = (RNameComponentArray)__input.read_acdk_object(NameComponentArray::GetClass());
      RNamingContext __retval = bind_new_context(n);
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createReply();
      __output->write_acdk_object((::acdk::lang::RObject)__retval);
      return __output;
    } catch (::acdk::lang::RThrowable ex) {
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createExceptionReply();
      __output->write_exception(ex);
      return __output;
    } catch (...) {
      throw;
    }
  }
  if (&NamingContext_method_destroy__V == methinf) {
    try {
      destroy();
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createReply();
      return __output;
    } catch (::acdk::lang::RThrowable ex) {
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createExceptionReply();
      __output->write_exception(ex);
      return __output;
    } catch (...) {
      throw;
    }
  }
  if (&NamingContext_method_list_IOUTLRBindingArray_OUTLRBindingIterator__V == methinf) {
    try {
      int how_many = (int)__input.read_long();
      RBindingArray bl;
      RBindingIterator bi;
      list(how_many, bl, bi);
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createReply();
      __output->write_acdk_object((::acdk::lang::RObject)bl);
      __output->write_acdk_object((::acdk::lang::RObject)bi);
      return __output;
    } catch (::acdk::lang::RThrowable ex) {
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createExceptionReply();
      __output->write_exception(ex);
      return __output;
    } catch (...) {
      throw;
    }
  }
  THROW0_FQ(::org::omg::CORBA::, BAD_OPERATION);
  return Nil;
}


} // namespace org
} // namespace omg
} // namespace CosNaming


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) CosNaming_dummyExportFunc() {}
#endif

