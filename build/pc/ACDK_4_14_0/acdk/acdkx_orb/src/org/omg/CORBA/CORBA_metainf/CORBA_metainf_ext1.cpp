// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../CORBA.h"
#include "../Any.h"
#include "../AttributeDef.h"
#include "../Contained.h"
#include <acdkx/orb/AORB.h>
#include "../Container.h"
#include "../Context.h"
#include "../CORBA.h"
#include "../ExceptionDef.h"
#include "../IDLType.h"
#include "../InterfaceDef.h"
#include <acdkx/orb/AORB.h>
#include "../IRObject.h"
#include "../ModuleDef.h"
#include <acdkx/orb/AORB.h>
#include "../Object.h"
#include "../OperationDef.h"
#include "../ORB.h"
#include "../OrbExceptions.h"
#include "../PrimitiveDef.h"
#include "../Repository.h"
#include "../SequenceDef.h"
#include "../ServerRequest.h"
#include "../StringDef.h"
#include "../StructDef.h"
#include "../TypeCode.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
PrimitiveDef_create_array(int length)
{
  return new ObjectArrayImpl<RPrimitiveDef>(length);
}

//static
::acdk::lang::RObject
PrimitiveDef_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class PrimitiveDef_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PrimitiveDef_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)PrimitiveDef::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  PrimitiveDef_fields_kind_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    PrimitiveDef* This = dmi_cast<PrimitiveDef>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->kind), flags);
    else
      This->kind = (PrimitiveKind)var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo PrimitiveDef_fields_kind = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "kind", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  PrimitiveDef_MetainfoWrapper::PrimitiveDef_fields_kind_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _PrimitiveDef_fields[] = 
{
  &PrimitiveDef_fields_kind,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* PrimitiveDef_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* PrimitiveDef_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PrimitiveDef_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_0_GetClass", // alternative name of method
  -1, // altlabelHashCode
  PrimitiveDef_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  PrimitiveDef_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  PrimitiveDef_MetainfoWrapper::PrimitiveDef_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _PrimitiveDef_methods[] = 
{
  &PrimitiveDef_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct PrimitiveDef_MetaInfoInitializer
{  PrimitiveDef_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = PrimitiveDef::clazzInfo();
    ci->fields =  _PrimitiveDef_fields;
    ci->methods =  _PrimitiveDef_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
PrimitiveDef_MetaInfoInitializer PrimitiveDef_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
Repository_create_array(int length)
{
  return new ObjectArrayImpl<RRepository>(length);
}

//static
::acdk::lang::RObject
Repository_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Repository_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Repository_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Repository::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Repository_method_create_string_I_LRStringDef__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Repository* This = dmi_cast<Repository>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Repository::create_string(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->create_string(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Repository_method_get_canonical_typecode_INLRTypeCode__LRTypeCode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Repository* This = dmi_cast<Repository>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Repository::get_canonical_typecode((RTypeCode)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->get_canonical_typecode((RTypeCode)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Repository_method_get_primitive_I_LRPrimitiveDef__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Repository* This = dmi_cast<Repository>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Repository::get_primitive((PrimitiveKind)args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->get_primitive((PrimitiveKind)args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Repository_method_lookup_id_INLRString__LRContained__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Repository* This = dmi_cast<Repository>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Repository::lookup_id((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->lookup_id((RString)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Repository_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Repository_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Repository_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Repository_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Repository_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Repository_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Repository_MetainfoWrapper::Repository_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Repository_methods_create_string_I_LRStringDef__arg_bound = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bound", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Repository_methods_create_string_I_LRStringDef__args[] = 
{
  &Repository_methods_create_string_I_LRStringDef__arg_bound,
  0
};

::acdk::lang::dmi::ClazzInfo* Repository_methods_create_string_I_LRStringDef__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Repository_method_create_string_I_LRStringDef_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create_string", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringDef::clazzInfo(), // return type
  "_3_create_string", // alternative name of method
  -1, // altlabelHashCode
  Repository_methods_create_string_I_LRStringDef__args, // the arguments
  0, //arguments count
  Repository_methods_create_string_I_LRStringDef__exceptions, // the declared exceptions
  Repository_MetainfoWrapper::Repository_method_create_string_I_LRStringDef__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Repository_methods_get_canonical_typecode_INLRTypeCode__LRTypeCode__arg_tc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "tc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTypeCode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Repository_methods_get_canonical_typecode_INLRTypeCode__LRTypeCode__args[] = 
{
  &Repository_methods_get_canonical_typecode_INLRTypeCode__LRTypeCode__arg_tc,
  0
};

::acdk::lang::dmi::ClazzInfo* Repository_methods_get_canonical_typecode_INLRTypeCode__LRTypeCode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Repository_method_get_canonical_typecode_INLRTypeCode__LRTypeCode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "get_canonical_typecode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTypeCode::clazzInfo(), // return type
  "_1_get_canonical_typecode", // alternative name of method
  -1, // altlabelHashCode
  Repository_methods_get_canonical_typecode_INLRTypeCode__LRTypeCode__args, // the arguments
  0, //arguments count
  Repository_methods_get_canonical_typecode_INLRTypeCode__LRTypeCode__exceptions, // the declared exceptions
  Repository_MetainfoWrapper::Repository_method_get_canonical_typecode_INLRTypeCode__LRTypeCode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Repository_methods_get_primitive_I_LRPrimitiveDef__arg_kind = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "kind", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Repository_methods_get_primitive_I_LRPrimitiveDef__args[] = 
{
  &Repository_methods_get_primitive_I_LRPrimitiveDef__arg_kind,
  0
};

::acdk::lang::dmi::ClazzInfo* Repository_methods_get_primitive_I_LRPrimitiveDef__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Repository_method_get_primitive_I_LRPrimitiveDef_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "get_primitive", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPrimitiveDef::clazzInfo(), // return type
  "_2_get_primitive", // alternative name of method
  -1, // altlabelHashCode
  Repository_methods_get_primitive_I_LRPrimitiveDef__args, // the arguments
  0, //arguments count
  Repository_methods_get_primitive_I_LRPrimitiveDef__exceptions, // the declared exceptions
  Repository_MetainfoWrapper::Repository_method_get_primitive_I_LRPrimitiveDef__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Repository_methods_lookup_id_INLRString__LRContained__arg_search_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "search_id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Repository_methods_lookup_id_INLRString__LRContained__args[] = 
{
  &Repository_methods_lookup_id_INLRString__LRContained__arg_search_id,
  0
};

::acdk::lang::dmi::ClazzInfo* Repository_methods_lookup_id_INLRString__LRContained__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Repository_method_lookup_id_INLRString__LRContained_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lookup_id", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RContained::clazzInfo(), // return type
  "_0_lookup_id", // alternative name of method
  -1, // altlabelHashCode
  Repository_methods_lookup_id_INLRString__LRContained__args, // the arguments
  0, //arguments count
  Repository_methods_lookup_id_INLRString__LRContained__exceptions, // the declared exceptions
  Repository_MetainfoWrapper::Repository_method_lookup_id_INLRString__LRContained__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Repository_methods[] = 
{
  &Repository_method_GetClass__L_acdk_lang_RClass_,
  &Repository_method_create_string_I_LRStringDef_,
  &Repository_method_get_canonical_typecode_INLRTypeCode__LRTypeCode_,
  &Repository_method_get_primitive_I_LRPrimitiveDef_,
  &Repository_method_lookup_id_INLRString__LRContained_,
  0
};


struct Repository_MetaInfoInitializer
{  Repository_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Repository::clazzInfo();
    ci->fields =  _Repository_fields;
    ci->methods =  _Repository_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Repository_MetaInfoInitializer Repository_MetaInfoInitializer_staticinstance__;


struct Repository_clazzInfo_ClazzAttributesResInitializer35
{
  Repository_clazzInfo_ClazzAttributesResInitializer35()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Repository_methods_get_primitive_I_LRPrimitiveDef__arg_kind, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)PrimitiveKindMetaInf::GetEnumInfo()));
  }
};

Repository_clazzInfo_ClazzAttributesResInitializer35 Repository_clazzInfo_ClazzAttributesResInitializer35_instance;


RContained
Repository::lookup_id(IN(RString) search_id)
{
  ::acdk::lang::dmi::ScriptVar __acdk_retval;
  ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
  __acdk_args[0] = inOf(search_id);
  const ::acdk::lang::dmi::ClazzInfo* ci__ = getClazzInfo();
  ::acdk::lang::Object* targetObj__ = getDmiTarget(ci__);
  targetObj__->standardDispatch("lookup_id", __acdk_retval, __acdk_args, targetObj__->getDmiClient(), Nil, 0, targetObj__->getClazzInfo(), &Repository_method_lookup_id_INLRString__LRContained_);
  return (RContained)(::acdk::lang::RObject)__acdk_retval;
}

RTypeCode
Repository::get_canonical_typecode(IN(RTypeCode) tc)
{
  ::acdk::lang::dmi::ScriptVar __acdk_retval;
  ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
  __acdk_args[0] = inOf(tc);
  const ::acdk::lang::dmi::ClazzInfo* ci__ = getClazzInfo();
  ::acdk::lang::Object* targetObj__ = getDmiTarget(ci__);
  targetObj__->standardDispatch("get_canonical_typecode", __acdk_retval, __acdk_args, targetObj__->getDmiClient(), Nil, 0, targetObj__->getClazzInfo(), &Repository_method_get_canonical_typecode_INLRTypeCode__LRTypeCode_);
  return (RTypeCode)(::acdk::lang::RObject)__acdk_retval;
}

RPrimitiveDef
Repository::get_primitive(PrimitiveKind kind)
{
  ::acdk::lang::dmi::ScriptVar __acdk_retval;
  ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
  __acdk_args[0] = inOf(kind);
  const ::acdk::lang::dmi::ClazzInfo* ci__ = getClazzInfo();
  ::acdk::lang::Object* targetObj__ = getDmiTarget(ci__);
  targetObj__->standardDispatch("get_primitive", __acdk_retval, __acdk_args, targetObj__->getDmiClient(), Nil, 0, targetObj__->getClazzInfo(), &Repository_method_get_primitive_I_LRPrimitiveDef_);
  return (RPrimitiveDef)(::acdk::lang::RObject)__acdk_retval;
}

RStringDef
Repository::create_string(int bound)
{
  ::acdk::lang::dmi::ScriptVar __acdk_retval;
  ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
  __acdk_args[0] = inOf(bound);
  const ::acdk::lang::dmi::ClazzInfo* ci__ = getClazzInfo();
  ::acdk::lang::Object* targetObj__ = getDmiTarget(ci__);
  targetObj__->standardDispatch("create_string", __acdk_retval, __acdk_args, targetObj__->getDmiClient(), Nil, 0, targetObj__->getClazzInfo(), &Repository_method_create_string_I_LRStringDef_);
  return (RStringDef)(::acdk::lang::RObject)__acdk_retval;
}


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
SequenceDef_create_array(int length)
{
  return new ObjectArrayImpl<RSequenceDef>(length);
}

//static
::acdk::lang::RObject
SequenceDef_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SequenceDef_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SequenceDef_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SequenceDef::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SequenceDef_fields_bound_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SequenceDef* This = dmi_cast<SequenceDef>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->bound, flags);
    else
      This->bound = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SequenceDef_fields_element_type_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SequenceDef* This = dmi_cast<SequenceDef>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->element_type, flags);
    else
      This->element_type = (RTypeCode)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SequenceDef_fields_element_type_def_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SequenceDef* This = dmi_cast<SequenceDef>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->element_type_def, flags);
    else
      This->element_type_def = (RIDLType)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo SequenceDef_fields_bound = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "bound", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  SequenceDef_MetainfoWrapper::SequenceDef_fields_bound_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SequenceDef_fields_element_type = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "element_type", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTypeCode::clazzInfo(),
  SequenceDef_MetainfoWrapper::SequenceDef_fields_element_type_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SequenceDef_fields_element_type_def = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "element_type_def", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIDLType::clazzInfo(),
  SequenceDef_MetainfoWrapper::SequenceDef_fields_element_type_def_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _SequenceDef_fields[] = 
{
  &SequenceDef_fields_bound,
  &SequenceDef_fields_element_type,
  &SequenceDef_fields_element_type_def,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SequenceDef_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SequenceDef_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SequenceDef_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_0_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SequenceDef_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SequenceDef_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SequenceDef_MetainfoWrapper::SequenceDef_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SequenceDef_methods[] = 
{
  &SequenceDef_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct SequenceDef_MetaInfoInitializer
{  SequenceDef_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SequenceDef::clazzInfo();
    ci->fields =  _SequenceDef_fields;
    ci->methods =  _SequenceDef_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SequenceDef_MetaInfoInitializer SequenceDef_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
StringDef_create_array(int length)
{
  return new ObjectArrayImpl<RStringDef>(length);
}

//static
::acdk::lang::RObject
StringDef_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class StringDef_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringDef_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)StringDef::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StringDef_fields_bound_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    StringDef* This = dmi_cast<StringDef>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->bound, flags);
    else
      This->bound = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo StringDef_fields_bound = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "bound", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  StringDef_MetainfoWrapper::StringDef_fields_bound_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _StringDef_fields[] = 
{
  &StringDef_fields_bound,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringDef_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StringDef_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringDef_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_0_GetClass", // alternative name of method
  -1, // altlabelHashCode
  StringDef_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  StringDef_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  StringDef_MetainfoWrapper::StringDef_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _StringDef_methods[] = 
{
  &StringDef_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct StringDef_MetaInfoInitializer
{  StringDef_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = StringDef::clazzInfo();
    ci->fields =  _StringDef_fields;
    ci->methods =  _StringDef_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
StringDef_MetaInfoInitializer StringDef_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
StructMember_create_array(int length)
{
  return new ObjectArrayImpl<RStructMember>(length);
}

//static
::acdk::lang::RObject
StructMember_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class StructMember_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StructMember_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)StructMember::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StructMember_method_StructMember__LRStructMember__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StructMember();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StructMember_fields_name_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    StructMember* This = dmi_cast<StructMember>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->name, flags);
    else
      This->name = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StructMember_fields_type_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    StructMember* This = dmi_cast<StructMember>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->type, flags);
    else
      This->type = (RTypeCode)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StructMember_fields_type_def_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    StructMember* This = dmi_cast<StructMember>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->type_def, flags);
    else
      This->type_def = (RIDLType)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo StructMember_fields_name = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "name", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  StructMember_MetainfoWrapper::StructMember_fields_name_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StructMember_fields_type = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "type", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTypeCode::clazzInfo(),
  StructMember_MetainfoWrapper::StructMember_fields_type_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StructMember_fields_type_def = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "type_def", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIDLType::clazzInfo(),
  StructMember_MetainfoWrapper::StructMember_fields_type_def_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _StructMember_fields[] = 
{
  &StructMember_fields_name,
  &StructMember_fields_type,
  &StructMember_fields_type_def,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* StructMember_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StructMember_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StructMember_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  StructMember_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  StructMember_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  StructMember_MetainfoWrapper::StructMember_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StructMember_methods_StructMember__LRStructMember__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StructMember_methods_StructMember__LRStructMember__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StructMember_method_StructMember__LRStructMember_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "StructMember", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StructMember::clazzInfo(), // return type
  "_0_StructMember", // alternative name of method
  -1, // altlabelHashCode
  StructMember_methods_StructMember__LRStructMember__args, // the arguments
  0, //arguments count
  StructMember_methods_StructMember__LRStructMember__exceptions, // the declared exceptions
  StructMember_MetainfoWrapper::StructMember_method_StructMember__LRStructMember__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _StructMember_methods[] = 
{
  &StructMember_method_GetClass__L_acdk_lang_RClass_,
  &StructMember_method_StructMember__LRStructMember_,
  0
};


struct StructMember_MetaInfoInitializer
{  StructMember_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = StructMember::clazzInfo();
    ci->fields =  _StructMember_fields;
    ci->methods =  _StructMember_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
StructMember_MetaInfoInitializer StructMember_MetaInfoInitializer_staticinstance__;


struct StructMember_clazzInfo_ClazzAttributesResInitializer36
{
  StructMember_clazzInfo_ClazzAttributesResInitializer36()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)StructMember::clazzInfo(), "acdkx_orb_StructType", ::acdk::lang::dmi::ClazzAttributeResValue::makeStringRes("", false));
  }
};

StructMember_clazzInfo_ClazzAttributesResInitializer36 StructMember_clazzInfo_ClazzAttributesResInitializer36_instance;



} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
StructDef_create_array(int length)
{
  return new ObjectArrayImpl<RStructDef>(length);
}

//static
::acdk::lang::RObject
StructDef_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class StructDef_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StructDef_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)StructDef::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StructDef_fields_members_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    StructDef* This = dmi_cast<StructDef>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->members, flags);
    else
      This->members = (RStructMemberArray)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo StructDef_fields_members = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "members", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStructMemberArray::clazzInfo(),
  StructDef_MetainfoWrapper::StructDef_fields_members_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _StructDef_fields[] = 
{
  &StructDef_fields_members,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* StructDef_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StructDef_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StructDef_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_0_GetClass", // alternative name of method
  -1, // altlabelHashCode
  StructDef_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  StructDef_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  StructDef_MetainfoWrapper::StructDef_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _StructDef_methods[] = 
{
  &StructDef_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct StructDef_MetaInfoInitializer
{  StructDef_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = StructDef::clazzInfo();
    ci->fields =  _StructDef_fields;
    ci->methods =  _StructDef_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
StructDef_MetaInfoInitializer StructDef_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace omg
} // namespace CORBA


namespace org { 
namespace omg { 
namespace CORBA { 


//static
::acdk::lang::RObject
TypeCode_create_array(int length)
{
  return new ObjectArrayImpl<RTypeCode>(length);
}

//static
::acdk::lang::RObject
TypeCode_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TypeCode_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TypeCode_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TypeCode::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TypeCode_method_TypeCode_I_LRTypeCode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TypeCode((TCKind)args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TypeCode_method_kind__LTCKind__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TypeCode* This = dmi_cast<TypeCode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = (TCKind)This->TypeCode::kind();
    else
      ret = (TCKind)This->kind();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TypeCode_fields__type_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TypeCode* This = dmi_cast<TypeCode>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->_type), flags);
    else
      This->_type = (TCKind)var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo TypeCode_fields__type = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_type", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TypeCode_MetainfoWrapper::TypeCode_fields__type_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _TypeCode_fields[] = 
{
  &TypeCode_fields__type,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TypeCode_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TypeCode_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TypeCode_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TypeCode_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TypeCode_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TypeCode_MetainfoWrapper::TypeCode_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TypeCode_methods_TypeCode_I_LRTypeCode__arg_typ = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "typ", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TypeCode_methods_TypeCode_I_LRTypeCode__args[] = 
{
  &TypeCode_methods_TypeCode_I_LRTypeCode__arg_typ,
  0
};

::acdk::lang::dmi::ClazzInfo* TypeCode_methods_TypeCode_I_LRTypeCode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TypeCode_method_TypeCode_I_LRTypeCode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TypeCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TypeCode::clazzInfo(), // return type
  "_0_TypeCode", // alternative name of method
  -1, // altlabelHashCode
  TypeCode_methods_TypeCode_I_LRTypeCode__args, // the arguments
  0, //arguments count
  TypeCode_methods_TypeCode_I_LRTypeCode__exceptions, // the declared exceptions
  TypeCode_MetainfoWrapper::TypeCode_method_TypeCode_I_LRTypeCode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TypeCode_methods_kind__LTCKind__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TypeCode_methods_kind__LTCKind__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TypeCode_method_kind__LTCKind_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "kind", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1_kind", // alternative name of method
  -1, // altlabelHashCode
  TypeCode_methods_kind__LTCKind__args, // the arguments
  0, //arguments count
  TypeCode_methods_kind__LTCKind__exceptions, // the declared exceptions
  TypeCode_MetainfoWrapper::TypeCode_method_kind__LTCKind__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TypeCode_methods[] = 
{
  &TypeCode_method_GetClass__L_acdk_lang_RClass_,
  &TypeCode_method_TypeCode_I_LRTypeCode_,
  &TypeCode_method_kind__LTCKind_,
  0
};


struct TypeCode_MetaInfoInitializer
{  TypeCode_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TypeCode::clazzInfo();
    ci->fields =  _TypeCode_fields;
    ci->methods =  _TypeCode_methods;
    ci->_scopeParent = org_omg_CORBA_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TypeCode_MetaInfoInitializer TypeCode_MetaInfoInitializer_staticinstance__;


struct TypeCode_clazzInfo_ClazzAttributesResInitializer37
{
  TypeCode_clazzInfo_ClazzAttributesResInitializer37()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&TypeCode_methods_TypeCode_I_LRTypeCode__arg_typ, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)TCKindMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&TypeCode_method_kind__LTCKind_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)TCKindMetaInf::GetEnumInfo()));
  }
};

TypeCode_clazzInfo_ClazzAttributesResInitializer37 TypeCode_clazzInfo_ClazzAttributesResInitializer37_instance;



} // namespace org
} // namespace omg
} // namespace CORBA

