// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "ApplicationException.h"
#include "Delegate.h"
#include "InputStream.h"
#include "InvokeHandler.h"
#include "ObjectImpl.h"
#include "OutputStream.h"
#include "portable.h"
#include "RemarshalException.h"
#include "ResponseHandler.h"

namespace org { 
namespace omg { 
namespace CORBA { 
namespace portable { 

::acdk::lang::dmi::ClazzSuperInfo _ApplicationException_super___acdk__lang__Exception =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Exception::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ApplicationException_interfaces[] =
{
  &_ApplicationException_super___acdk__lang__Exception,
  0
};

::acdk::lang::dmi::ClazzInfo* ApplicationException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ApplicationException", // name of class
  -1, // hashCode
  "org/omg/CORBA/portable", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ApplicationException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 3, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ApplicationException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ApplicationException(ApplicationException::clazzInfo());

::acdk::lang::RClass
ApplicationException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ApplicationException::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Exception)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_in._ref_this()); // RInputStream _in 
  fields.push_back((::acdk::lang::RObject*)this->_userExceptionClassName._ref_this()); // RString _userExceptionClassName 
  fields.push_back((::acdk::lang::RObject*)this->_userclazz._ref_this()); // RClass _userclazz 
}


} // namespace org
} // namespace omg
} // namespace CORBA
} // namespace portable


namespace org { 
namespace omg { 
namespace CORBA { 
namespace portable { 

::acdk::lang::dmi::ClazzSuperInfo* _Delegate_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* Delegate::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "Delegate", // name of class
  -1, // hashCode
  "org/omg/CORBA/portable", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Delegate_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Delegate::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Delegate(Delegate::clazzInfo());

::acdk::lang::RClass
Delegate::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Delegate::getCollectableFields(FieldReferences& fields)
{
}


} // namespace org
} // namespace omg
} // namespace CORBA
} // namespace portable


namespace org { 
namespace omg { 
namespace CORBA { 
namespace portable { 


::acdk::lang::dmi::ClazzEnumValueInfo Endian_LittleEndian = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "LittleEndian", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::portable::LittleEndian, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo Endian_BigEndian = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "BigEndian", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::portable::BigEndian, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* Endian_enumValues[] = {
  &Endian_LittleEndian,
  &Endian_BigEndian,
0
};

::acdk::lang::dmi::ClazzEnumInfo Endian_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "Endian", // name
  -1, // hashCode
  "org/omg/CORBA/portable", // ns
  0, // _scopeParent
  0, // _nextSibling
  Endian_enumValues, // values
  0, // internal next link
};

::acdk::lang::dmi::RegisterEnumInfo _register_Endian(&Endian_enumInfo);


} // namespace org
} // namespace omg
} // namespace CORBA
} // namespace portable


namespace org { 
namespace omg { 
namespace CORBA { 
namespace portable { 


::acdk::lang::dmi::ClazzEnumValueInfo ParamCallDirection_CallerWrite = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "CallerWrite", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::portable::CallerWrite, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo ParamCallDirection_CalleeRead = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "CalleeRead", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::portable::CalleeRead, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo ParamCallDirection_CalleeWrite = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "CalleeWrite", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::portable::CalleeWrite, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo ParamCallDirection_CallerRead = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "CallerRead", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CORBA::portable::CallerRead, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* ParamCallDirection_enumValues[] = {
  &ParamCallDirection_CallerWrite,
  &ParamCallDirection_CalleeRead,
  &ParamCallDirection_CalleeWrite,
  &ParamCallDirection_CallerRead,
0
};

::acdk::lang::dmi::ClazzEnumInfo ParamCallDirection_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "ParamCallDirection", // name
  -1, // hashCode
  "org/omg/CORBA/portable", // ns
  0, // _scopeParent
  0, // _nextSibling
  ParamCallDirection_enumValues, // values
  0, // internal next link
};

::acdk::lang::dmi::RegisterEnumInfo _register_ParamCallDirection(&ParamCallDirection_enumInfo);


} // namespace org
} // namespace omg
} // namespace CORBA
} // namespace portable


namespace org { 
namespace omg { 
namespace CORBA { 
namespace portable { 

::acdk::lang::dmi::ClazzSuperInfo* _InputStream_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* InputStream::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "InputStream", // name of class
  -1, // hashCode
  "org/omg/CORBA/portable", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _InputStream_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    InputStream::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_InputStream(InputStream::clazzInfo());

::acdk::lang::RClass
InputStream::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
InputStream::getCollectableFields(FieldReferences& fields)
{
}


} // namespace org
} // namespace omg
} // namespace CORBA
} // namespace portable


namespace org { 
namespace omg { 
namespace CORBA { 
namespace portable { 

::acdk::lang::dmi::ClazzSuperInfo* _InvokeHandler_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* InvokeHandler::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "InvokeHandler", // name of class
  -1, // hashCode
  "org/omg/CORBA/portable", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _InvokeHandler_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    InvokeHandler::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_InvokeHandler(InvokeHandler::clazzInfo());

::acdk::lang::RClass
InvokeHandler::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
InvokeHandler::getCollectableFields(FieldReferences& fields)
{
}


} // namespace org
} // namespace omg
} // namespace CORBA
} // namespace portable


namespace org { 
namespace omg { 
namespace CORBA { 
namespace portable { 

::acdk::lang::dmi::ClazzSuperInfo _ObjectImpl_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _ObjectImpl_super___org__omg__CORBA__Object =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::org::omg::CORBA::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ObjectImpl_interfaces[] =
{
  &_ObjectImpl_super___acdk__lang__Object,
  &_ObjectImpl_super___org__omg__CORBA__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectImpl::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ObjectImpl", // name of class
  -1, // hashCode
  "org/omg/CORBA/portable", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ObjectImpl_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ObjectImpl::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ObjectImpl(ObjectImpl::clazzInfo());

::acdk::lang::RClass
ObjectImpl::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ObjectImpl::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_delegate._ref_this()); // RDelegate _delegate 
  fields.push_back((::acdk::lang::RObject*)this->_orb._ref_this()); // ::org::omg::CORBA::RORB _orb 
}


} // namespace org
} // namespace omg
} // namespace CORBA
} // namespace portable


namespace org { 
namespace omg { 
namespace CORBA { 
namespace portable { 

::acdk::lang::dmi::ClazzSuperInfo* _OutputStream_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* OutputStream::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "OutputStream", // name of class
  -1, // hashCode
  "org/omg/CORBA/portable", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _OutputStream_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    OutputStream::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_OutputStream(OutputStream::clazzInfo());

::acdk::lang::RClass
OutputStream::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
OutputStream::getCollectableFields(FieldReferences& fields)
{
}


} // namespace org
} // namespace omg
} // namespace CORBA
} // namespace portable


namespace org { 
namespace omg { 
namespace CORBA { 
namespace portable { 

::acdk::lang::dmi::ClazzSuperInfo _RemarshalException_super___acdk__lang__Exception =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Exception::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _RemarshalException_interfaces[] =
{
  &_RemarshalException_super___acdk__lang__Exception,
  0
};

::acdk::lang::dmi::ClazzInfo* RemarshalException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "RemarshalException", // name of class
  -1, // hashCode
  "org/omg/CORBA/portable", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _RemarshalException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    RemarshalException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_RemarshalException(RemarshalException::clazzInfo());

::acdk::lang::RClass
RemarshalException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
RemarshalException::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Exception)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->__newObjectKey._ref_this()); // ::acdk::lang::RObject __newObjectKey 
}


} // namespace org
} // namespace omg
} // namespace CORBA
} // namespace portable

