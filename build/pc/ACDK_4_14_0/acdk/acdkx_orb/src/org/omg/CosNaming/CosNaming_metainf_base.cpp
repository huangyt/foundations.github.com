// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "Config.h"
#include "CosNaming.h"

namespace org { 
namespace omg { 
namespace CosNaming { 


::acdk::lang::dmi::ClazzEnumValueInfo BindingType_nobject = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "nobject", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CosNaming::nobject, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo BindingType_ncontext = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ncontext", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CosNaming::ncontext, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* BindingType_enumValues[] = {
  &BindingType_nobject,
  &BindingType_ncontext,
0
};

::acdk::lang::dmi::ClazzEnumInfo* BindingTypeMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo BindingType_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "BindingType", // name
  -1, // hashCode
  "org/omg/CosNaming", // ns
  0, // _scopeParent
  0, // _nextSibling
  BindingType_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_BindingType(&BindingType_enumInfo);

  return &BindingType_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_BindingTypeEnumInfo(BindingTypeMetaInf::GetEnumInfo());


} // namespace org
} // namespace omg
} // namespace CosNaming


namespace org { 
namespace omg { 
namespace CosNaming { 


::acdk::lang::dmi::ClazzEnumValueInfo NotFoundReason_missing_node = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "missing_node", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CosNaming::missing_node, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo NotFoundReason_not_context = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "not_context", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CosNaming::not_context, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo NotFoundReason_not_object = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "not_object", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  org::omg::CosNaming::not_object, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* NotFoundReason_enumValues[] = {
  &NotFoundReason_missing_node,
  &NotFoundReason_not_context,
  &NotFoundReason_not_object,
0
};

::acdk::lang::dmi::ClazzEnumInfo* NotFoundReasonMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo NotFoundReason_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "NotFoundReason", // name
  -1, // hashCode
  "org/omg/CosNaming", // ns
  0, // _scopeParent
  0, // _nextSibling
  NotFoundReason_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_NotFoundReason(&NotFoundReason_enumInfo);

  return &NotFoundReason_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_NotFoundReasonEnumInfo(NotFoundReasonMetaInf::GetEnumInfo());


} // namespace org
} // namespace omg
} // namespace CosNaming


namespace org { 
namespace omg { 
namespace CosNaming { 

::acdk::lang::dmi::ClazzSuperInfo _NameComponent_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _NameComponent_super___acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _NameComponent_interfaces[] =
{
  &_NameComponent_super___acdk__lang__Object,
  &_NameComponent_super___acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* NameComponent::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "NameComponent", // name of class
  -1, // hashCode
  "org/omg/CosNaming", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _NameComponent_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    NameComponent::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_NameComponent(NameComponent::clazzInfo());

::acdk::lang::RClass
NameComponent::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
NameComponent::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->id._ref_this()); // RString id 
  fields.push_back((::acdk::lang::RObject*)this->kind._ref_this()); // RString kind 
}


} // namespace org
} // namespace omg
} // namespace CosNaming


namespace org { 
namespace omg { 
namespace CosNaming { 

::acdk::lang::dmi::ClazzSuperInfo _Binding_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Binding_super___acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Binding_interfaces[] =
{
  &_Binding_super___acdk__lang__Object,
  &_Binding_super___acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* Binding::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "Binding", // name of class
  -1, // hashCode
  "org/omg/CosNaming", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Binding_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Binding::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Binding(Binding::clazzInfo());

::acdk::lang::RClass
Binding::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Binding::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->binding_name._ref_this()); // RNameComponentArray binding_name 
}


} // namespace org
} // namespace omg
} // namespace CosNaming


namespace org { 
namespace omg { 
namespace CosNaming { 

::acdk::lang::dmi::ClazzSuperInfo _NotFound_super___acdkx__orb__OrbException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdkx::orb::OrbException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _NotFound_interfaces[] =
{
  &_NotFound_super___acdkx__orb__OrbException,
  0
};

::acdk::lang::dmi::ClazzInfo* NotFound::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "NotFound", // name of class
  -1, // hashCode
  "org/omg/CosNaming", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _NotFound_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    NotFound::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_NotFound(NotFound::clazzInfo());

::acdk::lang::RClass
NotFound::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
NotFound::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdkx::orb::, OrbException)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->rest_of_name._ref_this()); // RString rest_of_name 
}


} // namespace org
} // namespace omg
} // namespace CosNaming


namespace org { 
namespace omg { 
namespace CosNaming { 

::acdk::lang::dmi::ClazzSuperInfo _CannotProceed_super___acdkx__orb__OrbException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdkx::orb::OrbException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _CannotProceed_interfaces[] =
{
  &_CannotProceed_super___acdkx__orb__OrbException,
  0
};

::acdk::lang::dmi::ClazzInfo* CannotProceed::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "CannotProceed", // name of class
  -1, // hashCode
  "org/omg/CosNaming", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _CannotProceed_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    CannotProceed::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_CannotProceed(CannotProceed::clazzInfo());

::acdk::lang::RClass
CannotProceed::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
CannotProceed::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdkx::orb::, OrbException)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->cxt._ref_this()); // RNamingContext cxt 
  fields.push_back((::acdk::lang::RObject*)this->rest_of_name._ref_this()); // RString rest_of_name 
}


} // namespace org
} // namespace omg
} // namespace CosNaming


namespace org { 
namespace omg { 
namespace CosNaming { 

::acdk::lang::dmi::ClazzSuperInfo _InvalidName_super___acdkx__orb__OrbException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdkx::orb::OrbException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _InvalidName_interfaces[] =
{
  &_InvalidName_super___acdkx__orb__OrbException,
  0
};

::acdk::lang::dmi::ClazzInfo* InvalidName::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "InvalidName", // name of class
  -1, // hashCode
  "org/omg/CosNaming", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _InvalidName_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    InvalidName::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_InvalidName(InvalidName::clazzInfo());

::acdk::lang::RClass
InvalidName::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
InvalidName::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdkx::orb::, OrbException)::getCollectableFields(fields);
}


} // namespace org
} // namespace omg
} // namespace CosNaming


namespace org { 
namespace omg { 
namespace CosNaming { 

::acdk::lang::dmi::ClazzSuperInfo _AlreadyBound_super___acdkx__orb__OrbException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdkx::orb::OrbException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _AlreadyBound_interfaces[] =
{
  &_AlreadyBound_super___acdkx__orb__OrbException,
  0
};

::acdk::lang::dmi::ClazzInfo* AlreadyBound::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "AlreadyBound", // name of class
  -1, // hashCode
  "org/omg/CosNaming", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _AlreadyBound_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    AlreadyBound::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_AlreadyBound(AlreadyBound::clazzInfo());

::acdk::lang::RClass
AlreadyBound::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
AlreadyBound::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdkx::orb::, OrbException)::getCollectableFields(fields);
}


} // namespace org
} // namespace omg
} // namespace CosNaming


namespace org { 
namespace omg { 
namespace CosNaming { 

::acdk::lang::dmi::ClazzSuperInfo _NotEmpty_super___acdkx__orb__OrbException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdkx::orb::OrbException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _NotEmpty_interfaces[] =
{
  &_NotEmpty_super___acdkx__orb__OrbException,
  0
};

::acdk::lang::dmi::ClazzInfo* NotEmpty::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "NotEmpty", // name of class
  -1, // hashCode
  "org/omg/CosNaming", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _NotEmpty_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    NotEmpty::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_NotEmpty(NotEmpty::clazzInfo());

::acdk::lang::RClass
NotEmpty::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
NotEmpty::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdkx::orb::, OrbException)::getCollectableFields(fields);
}


} // namespace org
} // namespace omg
} // namespace CosNaming


namespace org { 
namespace omg { 
namespace CosNaming { 

::acdk::lang::dmi::ClazzSuperInfo _BindingIterator_super___org__omg__CORBA__portable__InvokeHandler =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::org::omg::CORBA::portable::InvokeHandler::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _BindingIterator_interfaces[] =
{
  &_BindingIterator_super___org__omg__CORBA__portable__InvokeHandler,
  0
};

::acdk::lang::dmi::ClazzInfo* BindingIterator::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "BindingIterator", // name of class
  -1, // hashCode
  "org/omg/CosNaming", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _BindingIterator_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    BindingIterator::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_BindingIterator(BindingIterator::clazzInfo());

::acdk::lang::RClass
BindingIterator::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
BindingIterator::getCollectableFields(FieldReferences& fields)
{
}


} // namespace org
} // namespace omg
} // namespace CosNaming


namespace org { 
namespace omg { 
namespace CosNaming { 

::acdk::lang::dmi::ClazzSuperInfo _NamingContext_super___org__omg__CORBA__portable__InvokeHandler =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::org::omg::CORBA::portable::InvokeHandler::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _NamingContext_interfaces[] =
{
  &_NamingContext_super___org__omg__CORBA__portable__InvokeHandler,
  0
};

::acdk::lang::dmi::ClazzInfo* NamingContext::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "NamingContext", // name of class
  -1, // hashCode
  "org/omg/CosNaming", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _NamingContext_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    NamingContext::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_NamingContext(NamingContext::clazzInfo());

::acdk::lang::RClass
NamingContext::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
NamingContext::getCollectableFields(FieldReferences& fields)
{
}


} // namespace org
} // namespace omg
} // namespace CosNaming

