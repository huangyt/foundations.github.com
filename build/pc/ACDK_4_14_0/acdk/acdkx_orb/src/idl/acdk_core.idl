// generated by acdkorbidl

#ifndef acdk_core_idl
#define acdk_core_idl

#include <acdk_base.idl>
module acdk{
  module io{
    interface ASCIIDataReader;
#ifndef acdk_io_ASCIIDataReader
#define acdk_io_ASCIIDataReader
    typedef sequence<ASCIIDataReader> ASCIIDataReaderArray;
    typedef sequence<ASCIIDataReaderArray> ASCIIDataReaderArrayArray;
#endif // acdk_io_ASCIIDataReader
    interface ASCIIDataWriter;
#ifndef acdk_io_ASCIIDataWriter
#define acdk_io_ASCIIDataWriter
    typedef sequence<ASCIIDataWriter> ASCIIDataWriterArray;
    typedef sequence<ASCIIDataWriterArray> ASCIIDataWriterArrayArray;
#endif // acdk_io_ASCIIDataWriter
    interface AbstractFilterReader;
#ifndef acdk_io_AbstractFilterReader
#define acdk_io_AbstractFilterReader
    typedef sequence<AbstractFilterReader> AbstractFilterReaderArray;
    typedef sequence<AbstractFilterReaderArray> AbstractFilterReaderArrayArray;
#endif // acdk_io_AbstractFilterReader
    interface AbstractFilterWriter;
#ifndef acdk_io_AbstractFilterWriter
#define acdk_io_AbstractFilterWriter
    typedef sequence<AbstractFilterWriter> AbstractFilterWriterArray;
    typedef sequence<AbstractFilterWriterArray> AbstractFilterWriterArrayArray;
#endif // acdk_io_AbstractFilterWriter
    interface AbstractObjectReader;
#ifndef acdk_io_AbstractObjectReader
#define acdk_io_AbstractObjectReader
    typedef sequence<AbstractObjectReader> AbstractObjectReaderArray;
    typedef sequence<AbstractObjectReaderArray> AbstractObjectReaderArrayArray;
#endif // acdk_io_AbstractObjectReader
    interface AbstractObjectWriter;
#ifndef acdk_io_AbstractObjectWriter
#define acdk_io_AbstractObjectWriter
    typedef sequence<AbstractObjectWriter> AbstractObjectWriterArray;
    typedef sequence<AbstractObjectWriterArray> AbstractObjectWriterArrayArray;
#endif // acdk_io_AbstractObjectWriter
    interface AbstractReader;
#ifndef acdk_io_AbstractReader
#define acdk_io_AbstractReader
    typedef sequence<AbstractReader> AbstractReaderArray;
    typedef sequence<AbstractReaderArray> AbstractReaderArrayArray;
#endif // acdk_io_AbstractReader
    interface AbstractStorageReader;
#ifndef acdk_io_AbstractStorageReader
#define acdk_io_AbstractStorageReader
    typedef sequence<AbstractStorageReader> AbstractStorageReaderArray;
    typedef sequence<AbstractStorageReaderArray> AbstractStorageReaderArrayArray;
#endif // acdk_io_AbstractStorageReader
    interface AbstractStorageWriter;
#ifndef acdk_io_AbstractStorageWriter
#define acdk_io_AbstractStorageWriter
    typedef sequence<AbstractStorageWriter> AbstractStorageWriterArray;
    typedef sequence<AbstractStorageWriterArray> AbstractStorageWriterArrayArray;
#endif // acdk_io_AbstractStorageWriter
    interface AbstractWriter;
#ifndef acdk_io_AbstractWriter
#define acdk_io_AbstractWriter
    typedef sequence<AbstractWriter> AbstractWriterArray;
    typedef sequence<AbstractWriterArray> AbstractWriterArrayArray;
#endif // acdk_io_AbstractWriter
  }; // module acdk
}; // module io
module acdk{
  module lang{
    module reflect{
      interface AccessibleObject;
#ifndef acdk_lang_reflect_AccessibleObject
#define acdk_lang_reflect_AccessibleObject
      typedef sequence<AccessibleObject> AccessibleObjectArray;
      typedef sequence<AccessibleObjectArray> AccessibleObjectArrayArray;
#endif // acdk_lang_reflect_AccessibleObject
    }; // module acdk
  }; // module lang
}; // module reflect
module acdk{
  module io{
    interface BufferedReader;
#ifndef acdk_io_BufferedReader
#define acdk_io_BufferedReader
    typedef sequence<BufferedReader> BufferedReaderArray;
    typedef sequence<BufferedReaderArray> BufferedReaderArrayArray;
#endif // acdk_io_BufferedReader
    interface BufferedWriter;
#ifndef acdk_io_BufferedWriter
#define acdk_io_BufferedWriter
    typedef sequence<BufferedWriter> BufferedWriterArray;
    typedef sequence<BufferedWriterArray> BufferedWriterArrayArray;
#endif // acdk_io_BufferedWriter
    interface CharArrayReader;
#ifndef acdk_io_CharArrayReader
#define acdk_io_CharArrayReader
    typedef sequence<CharArrayReader> CharArrayReaderArray;
    typedef sequence<CharArrayReaderArray> CharArrayReaderArrayArray;
#endif // acdk_io_CharArrayReader
    interface CharArrayWriter;
#ifndef acdk_io_CharArrayWriter
#define acdk_io_CharArrayWriter
    typedef sequence<CharArrayWriter> CharArrayWriterArray;
    typedef sequence<CharArrayWriterArray> CharArrayWriterArrayArray;
#endif // acdk_io_CharArrayWriter
    interface ConsoleReader;
#ifndef acdk_io_ConsoleReader
#define acdk_io_ConsoleReader
    typedef sequence<ConsoleReader> ConsoleReaderArray;
    typedef sequence<ConsoleReaderArray> ConsoleReaderArrayArray;
#endif // acdk_io_ConsoleReader
    interface ConsoleWriter;
#ifndef acdk_io_ConsoleWriter
#define acdk_io_ConsoleWriter
    typedef sequence<ConsoleWriter> ConsoleWriterArray;
    typedef sequence<ConsoleWriterArray> ConsoleWriterArrayArray;
#endif // acdk_io_ConsoleWriter
    interface DataReader;
#ifndef acdk_io_DataReader
#define acdk_io_DataReader
    typedef sequence<DataReader> DataReaderArray;
    typedef sequence<DataReaderArray> DataReaderArrayArray;
#endif // acdk_io_DataReader
    interface DataWriter;
#ifndef acdk_io_DataWriter
#define acdk_io_DataWriter
    typedef sequence<DataWriter> DataWriterArray;
    typedef sequence<DataWriterArray> DataWriterArrayArray;
#endif // acdk_io_DataWriter
    interface File;
#ifndef acdk_io_File
#define acdk_io_File
    typedef sequence<File> FileArray;
    typedef sequence<FileArray> FileArrayArray;
#endif // acdk_io_File
    interface FileDescriptor;
#ifndef acdk_io_FileDescriptor
#define acdk_io_FileDescriptor
    typedef sequence<FileDescriptor> FileDescriptorArray;
    typedef sequence<FileDescriptorArray> FileDescriptorArrayArray;
#endif // acdk_io_FileDescriptor
    interface FileFilter;
#ifndef acdk_io_FileFilter
#define acdk_io_FileFilter
    typedef sequence<FileFilter> FileFilterArray;
    typedef sequence<FileFilterArray> FileFilterArrayArray;
#endif // acdk_io_FileFilter
    interface FileImpl;
#ifndef acdk_io_FileImpl
#define acdk_io_FileImpl
    typedef sequence<FileImpl> FileImplArray;
    typedef sequence<FileImplArray> FileImplArrayArray;
#endif // acdk_io_FileImpl
    interface FileReader;
#ifndef acdk_io_FileReader
#define acdk_io_FileReader
    typedef sequence<FileReader> FileReaderArray;
    typedef sequence<FileReaderArray> FileReaderArrayArray;
#endif // acdk_io_FileReader
    interface FileSystem;
#ifndef acdk_io_FileSystem
#define acdk_io_FileSystem
    typedef sequence<FileSystem> FileSystemArray;
    typedef sequence<FileSystemArray> FileSystemArrayArray;
#endif // acdk_io_FileSystem
    interface FileSystemFactory;
#ifndef acdk_io_FileSystemFactory
#define acdk_io_FileSystemFactory
    typedef sequence<FileSystemFactory> FileSystemFactoryArray;
    typedef sequence<FileSystemFactoryArray> FileSystemFactoryArrayArray;
#endif // acdk_io_FileSystemFactory
    interface FileWriter;
#ifndef acdk_io_FileWriter
#define acdk_io_FileWriter
    typedef sequence<FileWriter> FileWriterArray;
    typedef sequence<FileWriterArray> FileWriterArrayArray;
#endif // acdk_io_FileWriter
    interface FilenameFilter;
#ifndef acdk_io_FilenameFilter
#define acdk_io_FilenameFilter
    typedef sequence<FilenameFilter> FilenameFilterArray;
    typedef sequence<FilenameFilterArray> FilenameFilterArrayArray;
#endif // acdk_io_FilenameFilter
    interface FilterReader;
#ifndef acdk_io_FilterReader
#define acdk_io_FilterReader
    typedef sequence<FilterReader> FilterReaderArray;
    typedef sequence<FilterReaderArray> FilterReaderArrayArray;
#endif // acdk_io_FilterReader
    interface FilterWriter;
#ifndef acdk_io_FilterWriter
#define acdk_io_FilterWriter
    typedef sequence<FilterWriter> FilterWriterArray;
    typedef sequence<FilterWriterArray> FilterWriterArrayArray;
#endif // acdk_io_FilterWriter
    interface GlobFilenameFilter;
#ifndef acdk_io_GlobFilenameFilter
#define acdk_io_GlobFilenameFilter
    typedef sequence<GlobFilenameFilter> GlobFilenameFilterArray;
    typedef sequence<GlobFilenameFilterArray> GlobFilenameFilterArrayArray;
#endif // acdk_io_GlobFilenameFilter
    interface InputReader;
#ifndef acdk_io_InputReader
#define acdk_io_InputReader
    typedef sequence<InputReader> InputReaderArray;
    typedef sequence<InputReaderArray> InputReaderArrayArray;
#endif // acdk_io_InputReader
    interface JoinedReader;
#ifndef acdk_io_JoinedReader
#define acdk_io_JoinedReader
    typedef sequence<JoinedReader> JoinedReaderArray;
    typedef sequence<JoinedReaderArray> JoinedReaderArrayArray;
#endif // acdk_io_JoinedReader
    interface LineNumberReader;
#ifndef acdk_io_LineNumberReader
#define acdk_io_LineNumberReader
    typedef sequence<LineNumberReader> LineNumberReaderArray;
    typedef sequence<LineNumberReaderArray> LineNumberReaderArrayArray;
#endif // acdk_io_LineNumberReader
    interface MemReader;
#ifndef acdk_io_MemReader
#define acdk_io_MemReader
    typedef sequence<MemReader> MemReaderArray;
    typedef sequence<MemReaderArray> MemReaderArrayArray;
#endif // acdk_io_MemReader
  }; // module acdk
}; // module io
module acdk{
  module lang{
    interface Boolean;
#ifndef acdk_lang_Boolean
#define acdk_lang_Boolean
    typedef sequence<Boolean> BooleanArray;
    typedef sequence<BooleanArray> BooleanArrayArray;
#endif // acdk_lang_Boolean
    interface Byte;
#ifndef acdk_lang_Byte
#define acdk_lang_Byte
    typedef sequence<Byte> ByteArray;
    typedef sequence<ByteArray> ByteArrayArray;
#endif // acdk_lang_Byte
    interface Character;
#ifndef acdk_lang_Character
#define acdk_lang_Character
    typedef sequence<Character> CharacterArray;
    typedef sequence<CharacterArray> CharacterArrayArray;
#endif // acdk_lang_Character
    interface Class;
#ifndef acdk_lang_Class
#define acdk_lang_Class
    typedef sequence<Class> ClassArray;
    typedef sequence<ClassArray> ClassArrayArray;
#endif // acdk_lang_Class
    interface ClassLoader;
#ifndef acdk_lang_ClassLoader
#define acdk_lang_ClassLoader
    typedef sequence<ClassLoader> ClassLoaderArray;
    typedef sequence<ClassLoaderArray> ClassLoaderArrayArray;
#endif // acdk_lang_ClassLoader
    interface Cloneable;
#ifndef acdk_lang_Cloneable
#define acdk_lang_Cloneable
    typedef sequence<Cloneable> CloneableArray;
    typedef sequence<CloneableArray> CloneableArrayArray;
#endif // acdk_lang_Cloneable
    interface CmdLineOption;
#ifndef acdk_lang_CmdLineOption
#define acdk_lang_CmdLineOption
    typedef sequence<CmdLineOption> CmdLineOptionArray;
    typedef sequence<CmdLineOptionArray> CmdLineOptionArrayArray;
#endif // acdk_lang_CmdLineOption
    interface CmdLineParser;
#ifndef acdk_lang_CmdLineParser
#define acdk_lang_CmdLineParser
    typedef sequence<CmdLineParser> CmdLineParserArray;
    typedef sequence<CmdLineParserArray> CmdLineParserArrayArray;
#endif // acdk_lang_CmdLineParser
    interface Comparable;
#ifndef acdk_lang_Comparable
#define acdk_lang_Comparable
    typedef sequence<Comparable> ComparableArray;
    typedef sequence<ComparableArray> ComparableArrayArray;
#endif // acdk_lang_Comparable
  }; // module acdk
}; // module lang
module acdk{
  module lang{
    module dmi{
      interface DmiObject;
#ifndef acdk_lang_dmi_DmiObject
#define acdk_lang_dmi_DmiObject
      typedef sequence<DmiObject> DmiObjectArray;
      typedef sequence<DmiObjectArray> DmiObjectArrayArray;
#endif // acdk_lang_dmi_DmiObject
    }; // module acdk
  }; // module lang
}; // module dmi
module acdk{
  module lang{
    module reflect{
      interface Constructor;
#ifndef acdk_lang_reflect_Constructor
#define acdk_lang_reflect_Constructor
      typedef sequence<Constructor> ConstructorArray;
      typedef sequence<ConstructorArray> ConstructorArrayArray;
#endif // acdk_lang_reflect_Constructor
    }; // module acdk
  }; // module lang
}; // module reflect
module acdk{
  module lang{
    interface Double;
#ifndef acdk_lang_Double
#define acdk_lang_Double
    typedef sequence<Double> DoubleArray;
    typedef sequence<DoubleArray> DoubleArrayArray;
#endif // acdk_lang_Double
  }; // module acdk
}; // module lang
module acdk{
  module lang{
    module reflect{
      interface Field;
#ifndef acdk_lang_reflect_Field
#define acdk_lang_reflect_Field
      typedef sequence<Field> FieldArray;
      typedef sequence<FieldArray> FieldArrayArray;
#endif // acdk_lang_reflect_Field
    }; // module acdk
  }; // module lang
}; // module reflect
module acdk{
  module lang{
    interface Float;
#ifndef acdk_lang_Float
#define acdk_lang_Float
    typedef sequence<Float> FloatArray;
    typedef sequence<FloatArray> FloatArrayArray;
#endif // acdk_lang_Float
    interface Integer;
#ifndef acdk_lang_Integer
#define acdk_lang_Integer
    typedef sequence<Integer> IntegerArray;
    typedef sequence<IntegerArray> IntegerArrayArray;
#endif // acdk_lang_Integer
    interface Long;
#ifndef acdk_lang_Long
#define acdk_lang_Long
    typedef sequence<Long> LongArray;
    typedef sequence<LongArray> LongArrayArray;
#endif // acdk_lang_Long
  }; // module acdk
}; // module lang
module acdk{
  module io{
    interface MemWriter;
#ifndef acdk_io_MemWriter
#define acdk_io_MemWriter
    typedef sequence<MemWriter> MemWriterArray;
    typedef sequence<MemWriterArray> MemWriterArrayArray;
#endif // acdk_io_MemWriter
  }; // module acdk
}; // module io
module acdk{
  module lang{
    module dmi{
      interface MetaAttribute;
#ifndef acdk_lang_dmi_MetaAttribute
#define acdk_lang_dmi_MetaAttribute
      typedef sequence<MetaAttribute> MetaAttributeArray;
      typedef sequence<MetaAttributeArray> MetaAttributeArrayArray;
#endif // acdk_lang_dmi_MetaAttribute
    }; // module acdk
  }; // module lang
}; // module dmi
module acdk{
  module lang{
    interface Number;
#ifndef acdk_lang_Number
#define acdk_lang_Number
    typedef sequence<Number> NumberArray;
    typedef sequence<NumberArray> NumberArrayArray;
#endif // acdk_lang_Number
  }; // module acdk
}; // module lang
module acdk{
  module lang{
    module reflect{
      interface Member;
#ifndef acdk_lang_reflect_Member
#define acdk_lang_reflect_Member
      typedef sequence<Member> MemberArray;
      typedef sequence<MemberArray> MemberArrayArray;
#endif // acdk_lang_reflect_Member
    }; // module acdk
  }; // module lang
}; // module reflect
module acdk{
  module lang{
    interface AObject;
#ifndef acdk_lang_AObject
#define acdk_lang_AObject
    typedef sequence<AObject> AObjectArray;
    typedef sequence<AObjectArray> AObjectArrayArray;
#endif // acdk_lang_AObject
  }; // module acdk
}; // module lang
module acdk{
  module lang{
    module dmi{
      interface MetaObject;
#ifndef acdk_lang_dmi_MetaObject
#define acdk_lang_dmi_MetaObject
      typedef sequence<MetaObject> MetaObjectArray;
      typedef sequence<MetaObjectArray> MetaObjectArrayArray;
#endif // acdk_lang_dmi_MetaObject
    }; // module acdk
  }; // module lang
}; // module dmi
module acdk{
  module lang{
    module ref{
      interface NotifyObjectEventListener;
#ifndef acdk_lang_ref_NotifyObjectEventListener
#define acdk_lang_ref_NotifyObjectEventListener
      typedef sequence<NotifyObjectEventListener> NotifyObjectEventListenerArray;
      typedef sequence<NotifyObjectEventListenerArray> NotifyObjectEventListenerArrayArray;
#endif // acdk_lang_ref_NotifyObjectEventListener
    }; // module acdk
  }; // module lang
}; // module ref
module acdk{
  module lang{
    module reflect{
      interface Method;
#ifndef acdk_lang_reflect_Method
#define acdk_lang_reflect_Method
      typedef sequence<Method> MethodArray;
      typedef sequence<MethodArray> MethodArrayArray;
#endif // acdk_lang_reflect_Method
    }; // module acdk
  }; // module lang
}; // module reflect
module acdk{
  module io{
    interface ObjectReader;
#ifndef acdk_io_ObjectReader
#define acdk_io_ObjectReader
    typedef sequence<ObjectReader> ObjectReaderArray;
    typedef sequence<ObjectReaderArray> ObjectReaderArrayArray;
#endif // acdk_io_ObjectReader
    interface ObjectWriter;
#ifndef acdk_io_ObjectWriter
#define acdk_io_ObjectWriter
    typedef sequence<ObjectWriter> ObjectWriterArray;
    typedef sequence<ObjectWriterArray> ObjectWriterArrayArray;
#endif // acdk_io_ObjectWriter
    interface PipedReader;
#ifndef acdk_io_PipedReader
#define acdk_io_PipedReader
    typedef sequence<PipedReader> PipedReaderArray;
    typedef sequence<PipedReaderArray> PipedReaderArrayArray;
#endif // acdk_io_PipedReader
    interface PipedWriter;
#ifndef acdk_io_PipedWriter
#define acdk_io_PipedWriter
    typedef sequence<PipedWriter> PipedWriterArray;
    typedef sequence<PipedWriterArray> PipedWriterArrayArray;
#endif // acdk_io_PipedWriter
    interface PrintWriter;
#ifndef acdk_io_PrintWriter
#define acdk_io_PrintWriter
    typedef sequence<PrintWriter> PrintWriterArray;
    typedef sequence<PrintWriterArray> PrintWriterArrayArray;
#endif // acdk_io_PrintWriter
    interface PushbackReader;
#ifndef acdk_io_PushbackReader
#define acdk_io_PushbackReader
    typedef sequence<PushbackReader> PushbackReaderArray;
    typedef sequence<PushbackReaderArray> PushbackReaderArrayArray;
#endif // acdk_io_PushbackReader
  }; // module acdk
}; // module io
module acdk{
  module lang{
    interface Package;
#ifndef acdk_lang_Package
#define acdk_lang_Package
    typedef sequence<Package> PackageArray;
    typedef sequence<PackageArray> PackageArrayArray;
#endif // acdk_lang_Package
  }; // module acdk
}; // module lang
module acdk{
  module lang{
    module ref{
      interface PhantomReference;
#ifndef acdk_lang_ref_PhantomReference
#define acdk_lang_ref_PhantomReference
      typedef sequence<PhantomReference> PhantomReferenceArray;
      typedef sequence<PhantomReferenceArray> PhantomReferenceArrayArray;
#endif // acdk_lang_ref_PhantomReference
    }; // module acdk
  }; // module lang
}; // module ref
module acdk{
  module lang{
    interface Process;
#ifndef acdk_lang_Process
#define acdk_lang_Process
    typedef sequence<Process> ProcessArray;
    typedef sequence<ProcessArray> ProcessArrayArray;
#endif // acdk_lang_Process
  }; // module acdk
}; // module lang
module acdk{
  module lang{
    module reflect{
      interface Parameter;
#ifndef acdk_lang_reflect_Parameter
#define acdk_lang_reflect_Parameter
      typedef sequence<Parameter> ParameterArray;
      typedef sequence<ParameterArray> ParameterArrayArray;
#endif // acdk_lang_reflect_Parameter
    }; // module acdk
  }; // module lang
}; // module reflect
module acdk{
  module io{
    interface RandomAccessFile;
#ifndef acdk_io_RandomAccessFile
#define acdk_io_RandomAccessFile
    typedef sequence<RandomAccessFile> RandomAccessFileArray;
    typedef sequence<RandomAccessFileArray> RandomAccessFileArrayArray;
#endif // acdk_io_RandomAccessFile
    interface Reader;
#ifndef acdk_io_Reader
#define acdk_io_Reader
    typedef sequence<Reader> ReaderArray;
    typedef sequence<ReaderArray> ReaderArrayArray;
#endif // acdk_io_Reader
    interface Serializable;
#ifndef acdk_io_Serializable
#define acdk_io_Serializable
    typedef sequence<Serializable> SerializableArray;
    typedef sequence<SerializableArray> SerializableArrayArray;
#endif // acdk_io_Serializable
  }; // module acdk
}; // module io
module acdk{
  module lang{
    module ref{
      interface Reference;
#ifndef acdk_lang_ref_Reference
#define acdk_lang_ref_Reference
      typedef sequence<Reference> ReferenceArray;
      typedef sequence<ReferenceArray> ReferenceArrayArray;
#endif // acdk_lang_ref_Reference
    }; // module acdk
  }; // module lang
}; // module ref
module acdk{
  module lang{
    interface Runnable;
#ifndef acdk_lang_Runnable
#define acdk_lang_Runnable
    typedef sequence<Runnable> RunnableArray;
    typedef sequence<RunnableArray> RunnableArrayArray;
#endif // acdk_lang_Runnable
    interface Runtime;
#ifndef acdk_lang_Runtime
#define acdk_lang_Runtime
    typedef sequence<Runtime> RuntimeArray;
    typedef sequence<RuntimeArray> RuntimeArrayArray;
#endif // acdk_lang_Runtime
    interface Short;
#ifndef acdk_lang_Short
#define acdk_lang_Short
    typedef sequence<Short> ShortArray;
    typedef sequence<ShortArray> ShortArrayArray;
#endif // acdk_lang_Short
    interface SignalEventHandler;
#ifndef acdk_lang_SignalEventHandler
#define acdk_lang_SignalEventHandler
    typedef sequence<SignalEventHandler> SignalEventHandlerArray;
    typedef sequence<SignalEventHandlerArray> SignalEventHandlerArrayArray;
#endif // acdk_lang_SignalEventHandler
    interface StackTraceElement;
#ifndef acdk_lang_StackTraceElement
#define acdk_lang_StackTraceElement
    typedef sequence<StackTraceElement> StackTraceElementArray;
    typedef sequence<StackTraceElementArray> StackTraceElementArrayArray;
#endif // acdk_lang_StackTraceElement
  }; // module acdk
}; // module lang
module acdk{
  module lang{
    module ref{
      interface ReferenceQueue;
#ifndef acdk_lang_ref_ReferenceQueue
#define acdk_lang_ref_ReferenceQueue
      typedef sequence<ReferenceQueue> ReferenceQueueArray;
      typedef sequence<ReferenceQueueArray> ReferenceQueueArrayArray;
#endif // acdk_lang_ref_ReferenceQueue
      interface SoftReference;
#ifndef acdk_lang_ref_SoftReference
#define acdk_lang_ref_SoftReference
      typedef sequence<SoftReference> SoftReferenceArray;
      typedef sequence<SoftReferenceArray> SoftReferenceArrayArray;
#endif // acdk_lang_ref_SoftReference
    }; // module acdk
  }; // module lang
}; // module ref
module acdk{
  module io{
    interface Storage;
#ifndef acdk_io_Storage
#define acdk_io_Storage
    typedef sequence<Storage> StorageArray;
    typedef sequence<StorageArray> StorageArrayArray;
#endif // acdk_io_Storage
    interface StreamTokenizer;
#ifndef acdk_io_StreamTokenizer
#define acdk_io_StreamTokenizer
    typedef sequence<StreamTokenizer> StreamTokenizerArray;
    typedef sequence<StreamTokenizerArray> StreamTokenizerArrayArray;
#endif // acdk_io_StreamTokenizer
    interface SubReader;
#ifndef acdk_io_SubReader
#define acdk_io_SubReader
    typedef sequence<SubReader> SubReaderArray;
    typedef sequence<SubReaderArray> SubReaderArrayArray;
#endif // acdk_io_SubReader
    interface TeeReader;
#ifndef acdk_io_TeeReader
#define acdk_io_TeeReader
    typedef sequence<TeeReader> TeeReaderArray;
    typedef sequence<TeeReaderArray> TeeReaderArrayArray;
#endif // acdk_io_TeeReader
    interface TeeWriter;
#ifndef acdk_io_TeeWriter
#define acdk_io_TeeWriter
    typedef sequence<TeeWriter> TeeWriterArray;
    typedef sequence<TeeWriterArray> TeeWriterArrayArray;
#endif // acdk_io_TeeWriter
    interface Writer;
#ifndef acdk_io_Writer
#define acdk_io_Writer
    typedef sequence<Writer> WriterArray;
    typedef sequence<WriterArray> WriterArrayArray;
#endif // acdk_io_Writer
  }; // module acdk
}; // module io
module acdk{
  module lang{
    interface StringBuffer;
#ifndef acdk_lang_StringBuffer
#define acdk_lang_StringBuffer
    typedef sequence<StringBuffer> StringBufferArray;
    typedef sequence<StringBufferArray> StringBufferArrayArray;
#endif // acdk_lang_StringBuffer
    interface SystemImpl;
#ifndef acdk_lang_SystemImpl
#define acdk_lang_SystemImpl
    typedef sequence<SystemImpl> SystemImplArray;
    typedef sequence<SystemImplArray> SystemImplArrayArray;
#endif // acdk_lang_SystemImpl
    interface Thread;
#ifndef acdk_lang_Thread
#define acdk_lang_Thread
    typedef sequence<Thread> ThreadArray;
    typedef sequence<ThreadArray> ThreadArrayArray;
#endif // acdk_lang_Thread
    interface ThreadGroup;
#ifndef acdk_lang_ThreadGroup
#define acdk_lang_ThreadGroup
    typedef sequence<ThreadGroup> ThreadGroupArray;
    typedef sequence<ThreadGroupArray> ThreadGroupArrayArray;
#endif // acdk_lang_ThreadGroup
    interface ThreadLocal;
#ifndef acdk_lang_ThreadLocal
#define acdk_lang_ThreadLocal
    typedef sequence<ThreadLocal> ThreadLocalArray;
    typedef sequence<ThreadLocalArray> ThreadLocalArrayArray;
#endif // acdk_lang_ThreadLocal
  }; // module acdk
}; // module lang
module acdk{
  module lang{
    module reflect{
      interface Unit;
#ifndef acdk_lang_reflect_Unit
#define acdk_lang_reflect_Unit
      typedef sequence<Unit> UnitArray;
      typedef sequence<UnitArray> UnitArrayArray;
#endif // acdk_lang_reflect_Unit
    }; // module acdk
  }; // module lang
}; // module reflect
module acdk{
  module lang{
    module ref{
      interface WeakReference;
#ifndef acdk_lang_ref_WeakReference
#define acdk_lang_ref_WeakReference
      typedef sequence<WeakReference> WeakReferenceArray;
      typedef sequence<WeakReferenceArray> WeakReferenceArrayArray;
#endif // acdk_lang_ref_WeakReference
    }; // module acdk
  }; // module lang
}; // module ref
module acdk{
  module util{
    interface AbstractCollection;
#ifndef acdk_util_AbstractCollection
#define acdk_util_AbstractCollection
    typedef sequence<AbstractCollection> AbstractCollectionArray;
    typedef sequence<AbstractCollectionArray> AbstractCollectionArrayArray;
#endif // acdk_util_AbstractCollection
    interface AbstractList;
#ifndef acdk_util_AbstractList
#define acdk_util_AbstractList
    typedef sequence<AbstractList> AbstractListArray;
    typedef sequence<AbstractListArray> AbstractListArrayArray;
#endif // acdk_util_AbstractList
    interface AbstractListIterator;
#ifndef acdk_util_AbstractListIterator
#define acdk_util_AbstractListIterator
    typedef sequence<AbstractListIterator> AbstractListIteratorArray;
    typedef sequence<AbstractListIteratorArray> AbstractListIteratorArrayArray;
#endif // acdk_util_AbstractListIterator
    interface AbstractListListIterator;
#ifndef acdk_util_AbstractListListIterator
#define acdk_util_AbstractListListIterator
    typedef sequence<AbstractListListIterator> AbstractListListIteratorArray;
    typedef sequence<AbstractListListIteratorArray> AbstractListListIteratorArrayArray;
#endif // acdk_util_AbstractListListIterator
    interface AbstractListSubList;
#ifndef acdk_util_AbstractListSubList
#define acdk_util_AbstractListSubList
    typedef sequence<AbstractListSubList> AbstractListSubListArray;
    typedef sequence<AbstractListSubListArray> AbstractListSubListArrayArray;
#endif // acdk_util_AbstractListSubList
    interface AbstractListSubListListIterator;
#ifndef acdk_util_AbstractListSubListListIterator
#define acdk_util_AbstractListSubListListIterator
    typedef sequence<AbstractListSubListListIterator> AbstractListSubListListIteratorArray;
    typedef sequence<AbstractListSubListListIteratorArray> AbstractListSubListListIteratorArrayArray;
#endif // acdk_util_AbstractListSubListListIterator
    interface AbstractMap;
#ifndef acdk_util_AbstractMap
#define acdk_util_AbstractMap
    typedef sequence<AbstractMap> AbstractMapArray;
    typedef sequence<AbstractMapArray> AbstractMapArrayArray;
#endif // acdk_util_AbstractMap
    interface AbstractMapCachedKeySet;
#ifndef acdk_util_AbstractMapCachedKeySet
#define acdk_util_AbstractMapCachedKeySet
    typedef sequence<AbstractMapCachedKeySet> AbstractMapCachedKeySetArray;
    typedef sequence<AbstractMapCachedKeySetArray> AbstractMapCachedKeySetArrayArray;
#endif // acdk_util_AbstractMapCachedKeySet
    interface AbstractMapCachedKeySetIterator;
#ifndef acdk_util_AbstractMapCachedKeySetIterator
#define acdk_util_AbstractMapCachedKeySetIterator
    typedef sequence<AbstractMapCachedKeySetIterator> AbstractMapCachedKeySetIteratorArray;
    typedef sequence<AbstractMapCachedKeySetIteratorArray> AbstractMapCachedKeySetIteratorArrayArray;
#endif // acdk_util_AbstractMapCachedKeySetIterator
  }; // module acdk
}; // module util
module acdk{
  module util{
    module logging{
      interface AbstractLogConsumer;
#ifndef acdk_util_logging_AbstractLogConsumer
#define acdk_util_logging_AbstractLogConsumer
      typedef sequence<AbstractLogConsumer> AbstractLogConsumerArray;
      typedef sequence<AbstractLogConsumerArray> AbstractLogConsumerArrayArray;
#endif // acdk_util_logging_AbstractLogConsumer
    }; // module acdk
  }; // module util
}; // module logging
module acdk{
  module util{
    interface AbstractMapCachedValuesCollection;
#ifndef acdk_util_AbstractMapCachedValuesCollection
#define acdk_util_AbstractMapCachedValuesCollection
    typedef sequence<AbstractMapCachedValuesCollection> AbstractMapCachedValuesCollectionArray;
    typedef sequence<AbstractMapCachedValuesCollectionArray> AbstractMapCachedValuesCollectionArrayArray;
#endif // acdk_util_AbstractMapCachedValuesCollection
    interface AbstractMapCachedValuesCollectionIterator;
#ifndef acdk_util_AbstractMapCachedValuesCollectionIterator
#define acdk_util_AbstractMapCachedValuesCollectionIterator
    typedef sequence<AbstractMapCachedValuesCollectionIterator> AbstractMapCachedValuesCollectionIteratorArray;
    typedef sequence<AbstractMapCachedValuesCollectionIteratorArray> AbstractMapCachedValuesCollectionIteratorArrayArray;
#endif // acdk_util_AbstractMapCachedValuesCollectionIterator
    interface AbstractSequentialList;
#ifndef acdk_util_AbstractSequentialList
#define acdk_util_AbstractSequentialList
    typedef sequence<AbstractSequentialList> AbstractSequentialListArray;
    typedef sequence<AbstractSequentialListArray> AbstractSequentialListArrayArray;
#endif // acdk_util_AbstractSequentialList
    interface AbstractSet;
#ifndef acdk_util_AbstractSet
#define acdk_util_AbstractSet
    typedef sequence<AbstractSet> AbstractSetArray;
    typedef sequence<AbstractSetArray> AbstractSetArrayArray;
#endif // acdk_util_AbstractSet
    interface ArrayList;
#ifndef acdk_util_ArrayList
#define acdk_util_ArrayList
    typedef sequence<ArrayList> ArrayListArray;
    typedef sequence<ArrayListArray> ArrayListArrayArray;
#endif // acdk_util_ArrayList
    interface BasicMapEntry;
#ifndef acdk_util_BasicMapEntry
#define acdk_util_BasicMapEntry
    typedef sequence<BasicMapEntry> BasicMapEntryArray;
    typedef sequence<BasicMapEntryArray> BasicMapEntryArrayArray;
#endif // acdk_util_BasicMapEntry
    interface BitSet;
#ifndef acdk_util_BitSet
#define acdk_util_BitSet
    typedef sequence<BitSet> BitSetArray;
    typedef sequence<BitSetArray> BitSetArrayArray;
#endif // acdk_util_BitSet
    interface Bucket;
#ifndef acdk_util_Bucket
#define acdk_util_Bucket
    typedef sequence<Bucket> BucketArray;
    typedef sequence<BucketArray> BucketArrayArray;
#endif // acdk_util_Bucket
    interface BucketNode;
#ifndef acdk_util_BucketNode
#define acdk_util_BucketNode
    typedef sequence<BucketNode> BucketNodeArray;
    typedef sequence<BucketNodeArray> BucketNodeArrayArray;
#endif // acdk_util_BucketNode
    interface Calendar;
#ifndef acdk_util_Calendar
#define acdk_util_Calendar
    typedef sequence<Calendar> CalendarArray;
    typedef sequence<CalendarArray> CalendarArrayArray;
#endif // acdk_util_Calendar
    interface Collection;
#ifndef acdk_util_Collection
#define acdk_util_Collection
    typedef sequence<Collection> CollectionArray;
    typedef sequence<CollectionArray> CollectionArrayArray;
#endif // acdk_util_Collection
    interface Comparator;
#ifndef acdk_util_Comparator
#define acdk_util_Comparator
    typedef sequence<Comparator> ComparatorArray;
    typedef sequence<ComparatorArray> ComparatorArrayArray;
#endif // acdk_util_Comparator
    interface Date;
#ifndef acdk_util_Date
#define acdk_util_Date
    typedef sequence<Date> DateArray;
    typedef sequence<DateArray> DateArrayArray;
#endif // acdk_util_Date
    interface Dictionary;
#ifndef acdk_util_Dictionary
#define acdk_util_Dictionary
    typedef sequence<Dictionary> DictionaryArray;
    typedef sequence<DictionaryArray> DictionaryArrayArray;
#endif // acdk_util_Dictionary
    interface DoubleIterator;
#ifndef acdk_util_DoubleIterator
#define acdk_util_DoubleIterator
    typedef sequence<DoubleIterator> DoubleIteratorArray;
    typedef sequence<DoubleIteratorArray> DoubleIteratorArrayArray;
#endif // acdk_util_DoubleIterator
  }; // module acdk
}; // module util
module acdk{
  module util{
    module logging{
      interface ConsoleConsumer;
#ifndef acdk_util_logging_ConsoleConsumer
#define acdk_util_logging_ConsoleConsumer
      typedef sequence<ConsoleConsumer> ConsoleConsumerArray;
      typedef sequence<ConsoleConsumerArray> ConsoleConsumerArrayArray;
#endif // acdk_util_logging_ConsoleConsumer
    }; // module acdk
  }; // module util
}; // module logging
module acdk{
  module util{
    interface Enumeration;
#ifndef acdk_util_Enumeration
#define acdk_util_Enumeration
    typedef sequence<Enumeration> EnumerationArray;
    typedef sequence<EnumerationArray> EnumerationArrayArray;
#endif // acdk_util_Enumeration
    interface GregorianCalendar;
#ifndef acdk_util_GregorianCalendar
#define acdk_util_GregorianCalendar
    typedef sequence<GregorianCalendar> GregorianCalendarArray;
    typedef sequence<GregorianCalendarArray> GregorianCalendarArrayArray;
#endif // acdk_util_GregorianCalendar
    interface HashMap;
#ifndef acdk_util_HashMap
#define acdk_util_HashMap
    typedef sequence<HashMap> HashMapArray;
    typedef sequence<HashMapArray> HashMapArrayArray;
#endif // acdk_util_HashMap
  }; // module acdk
}; // module util
module acdk{
  module util{
    module logging{
      interface FileConsumer;
#ifndef acdk_util_logging_FileConsumer
#define acdk_util_logging_FileConsumer
      typedef sequence<FileConsumer> FileConsumerArray;
      typedef sequence<FileConsumerArray> FileConsumerArrayArray;
#endif // acdk_util_logging_FileConsumer
    }; // module acdk
  }; // module util
}; // module logging
module acdk{
  module util{
    interface HashMapCollection;
#ifndef acdk_util_HashMapCollection
#define acdk_util_HashMapCollection
    typedef sequence<HashMapCollection> HashMapCollectionArray;
    typedef sequence<HashMapCollectionArray> HashMapCollectionArrayArray;
#endif // acdk_util_HashMapCollection
    interface HashMapKey;
#ifndef acdk_util_HashMapKey
#define acdk_util_HashMapKey
    typedef sequence<HashMapKey> HashMapKeyArray;
    typedef sequence<HashMapKeyArray> HashMapKeyArrayArray;
#endif // acdk_util_HashMapKey
    interface HashSet;
#ifndef acdk_util_HashSet
#define acdk_util_HashSet
    typedef sequence<HashSet> HashSetArray;
    typedef sequence<HashSetArray> HashSetArrayArray;
#endif // acdk_util_HashSet
    interface Hashtable;
#ifndef acdk_util_Hashtable
#define acdk_util_Hashtable
    typedef sequence<Hashtable> HashtableArray;
    typedef sequence<HashtableArray> HashtableArrayArray;
#endif // acdk_util_Hashtable
    interface Iterator;
#ifndef acdk_util_Iterator
#define acdk_util_Iterator
    typedef sequence<Iterator> IteratorArray;
    typedef sequence<IteratorArray> IteratorArrayArray;
#endif // acdk_util_Iterator
    interface IteratorEnumeration;
#ifndef acdk_util_IteratorEnumeration
#define acdk_util_IteratorEnumeration
    typedef sequence<IteratorEnumeration> IteratorEnumerationArray;
    typedef sequence<IteratorEnumerationArray> IteratorEnumerationArrayArray;
#endif // acdk_util_IteratorEnumeration
    interface LinkedList;
#ifndef acdk_util_LinkedList
#define acdk_util_LinkedList
    typedef sequence<LinkedList> LinkedListArray;
    typedef sequence<LinkedListArray> LinkedListArrayArray;
#endif // acdk_util_LinkedList
    interface LinkedListEntry;
#ifndef acdk_util_LinkedListEntry
#define acdk_util_LinkedListEntry
    typedef sequence<LinkedListEntry> LinkedListEntryArray;
    typedef sequence<LinkedListEntryArray> LinkedListEntryArrayArray;
#endif // acdk_util_LinkedListEntry
  }; // module acdk
}; // module util
module acdk{
  module util{
    module logging{
      interface Formatter;
#ifndef acdk_util_logging_Formatter
#define acdk_util_logging_Formatter
      typedef sequence<Formatter> FormatterArray;
      typedef sequence<FormatterArray> FormatterArrayArray;
#endif // acdk_util_logging_Formatter
    }; // module acdk
  }; // module util
}; // module logging
module acdk{
  module util{
    interface LinkedListIterator;
#ifndef acdk_util_LinkedListIterator
#define acdk_util_LinkedListIterator
    typedef sequence<LinkedListIterator> LinkedListIteratorArray;
    typedef sequence<LinkedListIteratorArray> LinkedListIteratorArrayArray;
#endif // acdk_util_LinkedListIterator
    interface List;
#ifndef acdk_util_List
#define acdk_util_List
    typedef sequence<List> ListArray;
    typedef sequence<ListArray> ListArrayArray;
#endif // acdk_util_List
    interface ListIterator;
#ifndef acdk_util_ListIterator
#define acdk_util_ListIterator
    typedef sequence<ListIterator> ListIteratorArray;
    typedef sequence<ListIteratorArray> ListIteratorArrayArray;
#endif // acdk_util_ListIterator
    interface ListResourceBundle;
#ifndef acdk_util_ListResourceBundle
#define acdk_util_ListResourceBundle
    typedef sequence<ListResourceBundle> ListResourceBundleArray;
    typedef sequence<ListResourceBundleArray> ListResourceBundleArrayArray;
#endif // acdk_util_ListResourceBundle
    interface Locale;
#ifndef acdk_util_Locale
#define acdk_util_Locale
    typedef sequence<Locale> LocaleArray;
    typedef sequence<LocaleArray> LocaleArrayArray;
#endif // acdk_util_Locale
  }; // module acdk
}; // module util
module acdk{
  module util{
    module logging{
      interface LogConsumer;
#ifndef acdk_util_logging_LogConsumer
#define acdk_util_logging_LogConsumer
      typedef sequence<LogConsumer> LogConsumerArray;
      typedef sequence<LogConsumerArray> LogConsumerArrayArray;
#endif // acdk_util_logging_LogConsumer
      interface LogRecord;
#ifndef acdk_util_logging_LogRecord
#define acdk_util_logging_LogRecord
      typedef sequence<LogRecord> LogRecordArray;
      typedef sequence<LogRecordArray> LogRecordArrayArray;
#endif // acdk_util_logging_LogRecord
      interface Logger;
#ifndef acdk_util_logging_Logger
#define acdk_util_logging_Logger
      typedef sequence<Logger> LoggerArray;
      typedef sequence<LoggerArray> LoggerArrayArray;
#endif // acdk_util_logging_Logger
    }; // module acdk
  }; // module util
}; // module logging
module acdk{
  module util{
    interface Map;
#ifndef acdk_util_Map
#define acdk_util_Map
    typedef sequence<Map> MapArray;
    typedef sequence<MapArray> MapArrayArray;
#endif // acdk_util_Map
    interface MapEntry;
#ifndef acdk_util_MapEntry
#define acdk_util_MapEntry
    typedef sequence<MapEntry> MapEntryArray;
    typedef sequence<MapEntryArray> MapEntryArrayArray;
#endif // acdk_util_MapEntry
    interface Properties;
#ifndef acdk_util_Properties
#define acdk_util_Properties
    typedef sequence<Properties> PropertiesArray;
    typedef sequence<PropertiesArray> PropertiesArrayArray;
#endif // acdk_util_Properties
    interface PropertiesListener;
#ifndef acdk_util_PropertiesListener
#define acdk_util_PropertiesListener
    typedef sequence<PropertiesListener> PropertiesListenerArray;
    typedef sequence<PropertiesListenerArray> PropertiesListenerArrayArray;
#endif // acdk_util_PropertiesListener
    interface PropertyResourceBundle;
#ifndef acdk_util_PropertyResourceBundle
#define acdk_util_PropertyResourceBundle
    typedef sequence<PropertyResourceBundle> PropertyResourceBundleArray;
    typedef sequence<PropertyResourceBundleArray> PropertyResourceBundleArrayArray;
#endif // acdk_util_PropertyResourceBundle
    interface Random;
#ifndef acdk_util_Random
#define acdk_util_Random
    typedef sequence<Random> RandomArray;
    typedef sequence<RandomArray> RandomArrayArray;
#endif // acdk_util_Random
    interface RedBlackNode;
#ifndef acdk_util_RedBlackNode
#define acdk_util_RedBlackNode
    typedef sequence<RedBlackNode> RedBlackNodeArray;
    typedef sequence<RedBlackNodeArray> RedBlackNodeArrayArray;
#endif // acdk_util_RedBlackNode
    interface ResourceBundle;
#ifndef acdk_util_ResourceBundle
#define acdk_util_ResourceBundle
    typedef sequence<ResourceBundle> ResourceBundleArray;
    typedef sequence<ResourceBundleArray> ResourceBundleArrayArray;
#endif // acdk_util_ResourceBundle
    interface Set;
#ifndef acdk_util_Set
#define acdk_util_Set
    typedef sequence<Set> SetArray;
    typedef sequence<SetArray> SetArrayArray;
#endif // acdk_util_Set
  }; // module acdk
}; // module util
module acdk{
  module util{
    module logging{
      interface SimpleFormatter;
#ifndef acdk_util_logging_SimpleFormatter
#define acdk_util_logging_SimpleFormatter
      typedef sequence<SimpleFormatter> SimpleFormatterArray;
      typedef sequence<SimpleFormatterArray> SimpleFormatterArrayArray;
#endif // acdk_util_logging_SimpleFormatter
    }; // module acdk
  }; // module util
}; // module logging
module acdk{
  module util{
    interface SimpleListResourceBundle;
#ifndef acdk_util_SimpleListResourceBundle
#define acdk_util_SimpleListResourceBundle
    typedef sequence<SimpleListResourceBundle> SimpleListResourceBundleArray;
    typedef sequence<SimpleListResourceBundleArray> SimpleListResourceBundleArrayArray;
#endif // acdk_util_SimpleListResourceBundle
    interface SimpleTimeZone;
#ifndef acdk_util_SimpleTimeZone
#define acdk_util_SimpleTimeZone
    typedef sequence<SimpleTimeZone> SimpleTimeZoneArray;
    typedef sequence<SimpleTimeZoneArray> SimpleTimeZoneArrayArray;
#endif // acdk_util_SimpleTimeZone
    interface SortedMap;
#ifndef acdk_util_SortedMap
#define acdk_util_SortedMap
    typedef sequence<SortedMap> SortedMapArray;
    typedef sequence<SortedMapArray> SortedMapArrayArray;
#endif // acdk_util_SortedMap
    interface SortedSet;
#ifndef acdk_util_SortedSet
#define acdk_util_SortedSet
    typedef sequence<SortedSet> SortedSetArray;
    typedef sequence<SortedSetArray> SortedSetArrayArray;
#endif // acdk_util_SortedSet
    interface StringTokenizer;
#ifndef acdk_util_StringTokenizer
#define acdk_util_StringTokenizer
    typedef sequence<StringTokenizer> StringTokenizerArray;
    typedef sequence<StringTokenizerArray> StringTokenizerArrayArray;
#endif // acdk_util_StringTokenizer
    interface SubLinkedList;
#ifndef acdk_util_SubLinkedList
#define acdk_util_SubLinkedList
    typedef sequence<SubLinkedList> SubLinkedListArray;
    typedef sequence<SubLinkedListArray> SubLinkedListArrayArray;
#endif // acdk_util_SubLinkedList
  }; // module acdk
}; // module util
module acdk{
  module util{
    module logging{
      interface StdFormatter;
#ifndef acdk_util_logging_StdFormatter
#define acdk_util_logging_StdFormatter
      typedef sequence<StdFormatter> StdFormatterArray;
      typedef sequence<StdFormatterArray> StdFormatterArrayArray;
#endif // acdk_util_logging_StdFormatter
    }; // module acdk
  }; // module util
}; // module logging
module acdk{
  module util{
    interface SubTreeMap;
#ifndef acdk_util_SubTreeMap
#define acdk_util_SubTreeMap
    typedef sequence<SubTreeMap> SubTreeMapArray;
    typedef sequence<SubTreeMapArray> SubTreeMapArrayArray;
#endif // acdk_util_SubTreeMap
    interface SynchronizedCollection;
#ifndef acdk_util_SynchronizedCollection
#define acdk_util_SynchronizedCollection
    typedef sequence<SynchronizedCollection> SynchronizedCollectionArray;
    typedef sequence<SynchronizedCollectionArray> SynchronizedCollectionArrayArray;
#endif // acdk_util_SynchronizedCollection
    interface SynchronizedIterator;
#ifndef acdk_util_SynchronizedIterator
#define acdk_util_SynchronizedIterator
    typedef sequence<SynchronizedIterator> SynchronizedIteratorArray;
    typedef sequence<SynchronizedIteratorArray> SynchronizedIteratorArrayArray;
#endif // acdk_util_SynchronizedIterator
    interface SynchronizedList;
#ifndef acdk_util_SynchronizedList
#define acdk_util_SynchronizedList
    typedef sequence<SynchronizedList> SynchronizedListArray;
    typedef sequence<SynchronizedListArray> SynchronizedListArrayArray;
#endif // acdk_util_SynchronizedList
    interface SynchronizedListIterator;
#ifndef acdk_util_SynchronizedListIterator
#define acdk_util_SynchronizedListIterator
    typedef sequence<SynchronizedListIterator> SynchronizedListIteratorArray;
    typedef sequence<SynchronizedListIteratorArray> SynchronizedListIteratorArrayArray;
#endif // acdk_util_SynchronizedListIterator
    interface SynchronizedMap;
#ifndef acdk_util_SynchronizedMap
#define acdk_util_SynchronizedMap
    typedef sequence<SynchronizedMap> SynchronizedMapArray;
    typedef sequence<SynchronizedMapArray> SynchronizedMapArrayArray;
#endif // acdk_util_SynchronizedMap
    interface SynchronizedMapEntry;
#ifndef acdk_util_SynchronizedMapEntry
#define acdk_util_SynchronizedMapEntry
    typedef sequence<SynchronizedMapEntry> SynchronizedMapEntryArray;
    typedef sequence<SynchronizedMapEntryArray> SynchronizedMapEntryArrayArray;
#endif // acdk_util_SynchronizedMapEntry
    interface SynchronizedMapEntySet;
#ifndef acdk_util_SynchronizedMapEntySet
#define acdk_util_SynchronizedMapEntySet
    typedef sequence<SynchronizedMapEntySet> SynchronizedMapEntySetArray;
    typedef sequence<SynchronizedMapEntySetArray> SynchronizedMapEntySetArrayArray;
#endif // acdk_util_SynchronizedMapEntySet
    interface SynchronizedMapEntySetIterator;
#ifndef acdk_util_SynchronizedMapEntySetIterator
#define acdk_util_SynchronizedMapEntySetIterator
    typedef sequence<SynchronizedMapEntySetIterator> SynchronizedMapEntySetIteratorArray;
    typedef sequence<SynchronizedMapEntySetIteratorArray> SynchronizedMapEntySetIteratorArrayArray;
#endif // acdk_util_SynchronizedMapEntySetIterator
    interface SynchronizedSet;
#ifndef acdk_util_SynchronizedSet
#define acdk_util_SynchronizedSet
    typedef sequence<SynchronizedSet> SynchronizedSetArray;
    typedef sequence<SynchronizedSetArray> SynchronizedSetArrayArray;
#endif // acdk_util_SynchronizedSet
    interface SynchronizedSortedMap;
#ifndef acdk_util_SynchronizedSortedMap
#define acdk_util_SynchronizedSortedMap
    typedef sequence<SynchronizedSortedMap> SynchronizedSortedMapArray;
    typedef sequence<SynchronizedSortedMapArray> SynchronizedSortedMapArrayArray;
#endif // acdk_util_SynchronizedSortedMap
    interface SynchronizedSortedSet;
#ifndef acdk_util_SynchronizedSortedSet
#define acdk_util_SynchronizedSortedSet
    typedef sequence<SynchronizedSortedSet> SynchronizedSortedSetArray;
    typedef sequence<SynchronizedSortedSetArray> SynchronizedSortedSetArrayArray;
#endif // acdk_util_SynchronizedSortedSet
    interface SysDate;
#ifndef acdk_util_SysDate
#define acdk_util_SysDate
    typedef sequence<SysDate> SysDateArray;
    typedef sequence<SysDateArray> SysDateArrayArray;
#endif // acdk_util_SysDate
    interface TimeZone;
#ifndef acdk_util_TimeZone
#define acdk_util_TimeZone
    typedef sequence<TimeZone> TimeZoneArray;
    typedef sequence<TimeZoneArray> TimeZoneArrayArray;
#endif // acdk_util_TimeZone
    interface TreeMap;
#ifndef acdk_util_TreeMap
#define acdk_util_TreeMap
    typedef sequence<TreeMap> TreeMapArray;
    typedef sequence<TreeMapArray> TreeMapArrayArray;
#endif // acdk_util_TreeMap
    interface TreeMapCollection;
#ifndef acdk_util_TreeMapCollection
#define acdk_util_TreeMapCollection
    typedef sequence<TreeMapCollection> TreeMapCollectionArray;
    typedef sequence<TreeMapCollectionArray> TreeMapCollectionArrayArray;
#endif // acdk_util_TreeMapCollection
    interface TreeMapIterator;
#ifndef acdk_util_TreeMapIterator
#define acdk_util_TreeMapIterator
    typedef sequence<TreeMapIterator> TreeMapIteratorArray;
    typedef sequence<TreeMapIteratorArray> TreeMapIteratorArrayArray;
#endif // acdk_util_TreeMapIterator
    interface TreeMapSet;
#ifndef acdk_util_TreeMapSet
#define acdk_util_TreeMapSet
    typedef sequence<TreeMapSet> TreeMapSetArray;
    typedef sequence<TreeMapSetArray> TreeMapSetArrayArray;
#endif // acdk_util_TreeMapSet
    interface TreeMapSetIterator;
#ifndef acdk_util_TreeMapSetIterator
#define acdk_util_TreeMapSetIterator
    typedef sequence<TreeMapSetIterator> TreeMapSetIteratorArray;
    typedef sequence<TreeMapSetIteratorArray> TreeMapSetIteratorArrayArray;
#endif // acdk_util_TreeMapSetIterator
    interface TreeSet;
#ifndef acdk_util_TreeSet
#define acdk_util_TreeSet
    typedef sequence<TreeSet> TreeSetArray;
    typedef sequence<TreeSetArray> TreeSetArrayArray;
#endif // acdk_util_TreeSet
    interface Vector;
#ifndef acdk_util_Vector
#define acdk_util_Vector
    typedef sequence<Vector> VectorArray;
    typedef sequence<VectorArray> VectorArrayArray;
#endif // acdk_util_Vector
    interface WeakHashMap;
#ifndef acdk_util_WeakHashMap
#define acdk_util_WeakHashMap
    typedef sequence<WeakHashMap> WeakHashMapArray;
    typedef sequence<WeakHashMapArray> WeakHashMapArrayArray;
#endif // acdk_util_WeakHashMap
    interface WeakHashMapKey;
#ifndef acdk_util_WeakHashMapKey
#define acdk_util_WeakHashMapKey
    typedef sequence<WeakHashMapKey> WeakHashMapKeyArray;
    typedef sequence<WeakHashMapKeyArray> WeakHashMapKeyArrayArray;
#endif // acdk_util_WeakHashMapKey
}; // module acdk
}; // module util
module acdk {
module lang {

exception Throwable
{
  string _what;
};

exception Exception
{
  string _what;
};

exception Error
{
  string _what;
};

exception RuntimeException
{
  string _what;
};

exception UnsupportedOperationException
{
  string _what;
};

exception DmiException
{
  string _what;
};

exception IllegalArgumentException
{
  string _what;
};

exception NullPointerException
{
  string _what;
};

exception NoSuchDmiElementException
{
  string _what;
};

exception NoSuchFieldException
{
  string _what;
};

exception NoSuchElementException
{
  string _what;
};

exception NoSuchMethodException
{
  string _what;
};

exception InterruptedException
{
  string _what;
};

exception InstantiationException
{
  string _what;
};

exception IndexOutOfBoundsException
{
  long _accessIndex;
  long _length;
  string _what;
};

exception IllegalThreadStateException
{
  string _what;
};

exception IllegalStateException
{
  string _what;
};

exception IllegalMonitorStateException
{
  string _what;
};

exception NumberFormatException
{
  string _what;
};

exception IllegalAccessException
{
  string _what;
};

exception StringIndexOutOfBoundsException
{
  long _accessIndex;
  long _length;
  string _what;
};

exception SystemError
{
  string _what;
};

exception DmiTypeConversionException
{
  string _what;
};

exception ParamsMismatchException
{
  string _what;
};

exception CmdLineParseException
{
  stringArray _cmdline;
  acdk::lang::CmdLineParser _parser;
  string _what;
};

exception CloneNotSupportedException
{
  string _what;
};

exception ClassNotFoundException
{
  string _what;
};

exception ClassCastException
{
  string _what;
};

exception ArrayIndexOutOfBoundsException
{
  long _accessIndex;
  long _length;
  string _what;
};
}; // module lang
}; // module acdk
module acdk {
module io {

exception IOException
{
  string _what;
};

exception ObjectStreamException
{
  string _what;
};

exception FileNotFoundException
{
  string _what;
};

exception EOFException
{
  string _what;
};
}; // module io
}; // module acdk
module acdk {
module util {

exception NoSuchElementException
{
  string _what;
};

exception MissingResourceException
{
  string _what;
};

exception ConcurrentModificationException
{
  string _what;
};
}; // module util
}; // module acdk
module acdk {
module lang {
module reflect {

exception InvocationTargetException
{
  string _what;
};
}; // module reflect
}; // module lang
}; // module acdk
module acdk {
module lang {
interface SignalEventHandler
{
  boolean equals(in acdk::lang::SignalEventHandler other);
  boolean handleEvent(in long event);
  long listenToEvents();
};

interface SignalEventHandlerCorFactory
{
  acdk::lang::Class GetClass();
};

interface Runnable
{
  void run();
};

interface RunnableCorFactory
{
  acdk::lang::Class GetClass();
};

interface AObject
{
  acdk::lang::AObject clone();
  long compareTo(in acdk::lang::AObject o);
  boolean equals(in acdk::lang::AObject o);
  void finalize();
  long hashCode();
  void notify();
  void notifyAll();
  acdk::lang::AObject serialized_clone(in boolean deep);
  boolean serialized_equals(in acdk::lang::AObject o, in boolean recursive_serialized);
  long serialized_hashCode(in boolean recursive_serialized);
  string toString();

  // orginal method name: wait
    void wait2(in long timeoutms);
  void wait(in long timeoutms, in long timeoutus);

  // orginal method name: wait
    void wait1();
};

interface AObjectCorFactory
{
  acdk::lang::Class GetClass();

  // orginal method name: GetClass
    acdk::lang::Class GetClass1();
  acdk::lang::AObject createCorObject();
  acdk::lang::AObject create_instance();
};

interface Comparable
{
};

interface ComparableCorFactory
{
  acdk::lang::Class GetClass();
};

interface Thread
: acdk::lang::AObject
, acdk::lang::Runnable
{
  boolean _isThisThreadCurrent();
  long countStackFrames();
  void destroy();
  long getPriority();
  acdk::lang::ThreadGroup getThreadGroup();
  void interrupt();
  boolean isAlive();
  boolean isDaemon();
  void join(in long millis, in long nanos);

  // orginal method name: join
    void join1();

  // orginal method name: join
    void join2(in long millis);
  void setDaemon(in boolean on);
  void setName(in string str);
  void setPriority(in long newPriority);
  void start();
  void stop();
  void suspend();
};

interface ThreadCorFactory
{
  acdk::lang::Thread createCorThread(in acdk::lang::Runnable target, in string name);

  // orginal method name: Thread
    acdk::lang::Thread createCorThread1();

  // orginal method name: Thread
    acdk::lang::Thread createCorThread2(in acdk::lang::Runnable target);

  // orginal method name: Thread
    acdk::lang::Thread createCorThread3(in acdk::lang::ThreadGroup group, in acdk::lang::Runnable target, in string name);

  // orginal method name: Thread
    acdk::lang::Thread createCorThread4(in acdk::lang::ThreadGroup group);

  // orginal method name: Thread
    acdk::lang::Thread createCorThread5(in acdk::lang::ThreadGroup group, in acdk::lang::Runnable target);

  // orginal method name: Thread
    acdk::lang::Thread createCorThread6(in long type, in string name);

  // orginal method name: Thread
    acdk::lang::Thread createCorThread7(in long type);
  long activeCount();
  void checkSystemThreads();
  acdk::lang::Thread currentThread();
  void dumpStack();
  long enumerate(in acdk::lang::ThreadArray tarray);
  boolean interrupted();
  void newSystemThread(in long type);

  // orginal method name: newSystemThread
    void newSystemThread1();
  void removeSystemThread();
  void sleep(in long millis, in long nanaos);

  // orginal method name: sleep
    void sleep1(in long millis);
  void yield();
};

interface Void
: acdk::lang::AObject
{
};

interface VoidCorFactory
{
  acdk::lang::Class getTYPE();
};

interface Number
: acdk::lang::AObject
{
  octet byteValue();
  double doubleValue();
  float floatValue();
  long intValue();
  longlong longValue();
  short shortValue();
};

interface System
: acdk::lang::AObject
{
};

interface SystemCorFactory
{
  attribute boolean _isInMain;
  attribute acdk::io::PrintWriter err;
  attribute acdk::io::InputReader in_;
  attribute acdk::io::PrintWriter out_;
  longlong currentTimeMillis();
  void exit(in long status);
  boolean gc();
  acdk::util::Properties getEnvironment();
  string getErrmsg();

  // orginal method name: getErrmsg
    string getErrmsg1(in long errnumber);
  long getErrno();
  string getLastError();
  string getModuleDir();
  string getModuleName();
  acdk::util::Properties getProperties();
  string getProperty(in string key);

  // orginal method name: getProperty
    string getProperty1(in string key, in string def);
  acdk::lang::SystemImpl getSystem();
  long identityHashCode(in acdk::lang::AObject obj);
  boolean isInMain();
  void loadLibrary(in string libname);
  void printStackTrace();

  // orginal method name: printStackTrace
    void printStackTrace1(in acdk::io::PrintWriter out_);
  void reinit();
  void resetErrno();
  void setErr(in acdk::io::PrintWriter newerr);
  void setIn(in acdk::io::InputReader newin);
  void setOut(in acdk::io::PrintWriter newout);
  void setProperties(in acdk::util::Properties props);
  string setProperty(in string key, in string value);
};

interface Cloneable
{
};

interface CloneableCorFactory
{
  acdk::lang::Class GetClass();
};

interface CmdLineParser
: acdk::lang::AObject
{
  attribute acdk::util::HashMap _map;
  void addOption(in acdk::lang::CmdLineOption opt);

  // orginal method name: addOption
    void addOption1(in string option, in string alias, in boolean expectArg, in string help);
  acdk::util::Properties parse(in stringArray args, in boolean ignoreUnknown, in boolean stripDetected);

  // orginal method name: parse
    acdk::util::Properties parse1(in stringArray args);

  // orginal method name: parse
    acdk::util::Properties parse2(in stringArray args, in boolean ignoreUnknown);

  // orginal method name: parse
    acdk::util::Properties parse3(in acdk::util::Properties props, in stringArray args, in boolean ignoreUnknown, in boolean stripDetected);

  // orginal method name: parse
    acdk::util::Properties parse4(in acdk::util::Properties props, in stringArray args);

  // orginal method name: parse
    acdk::util::Properties parse5(in acdk::util::Properties props, in stringArray args, in boolean ignoreUnknown);
  void printHelp(in acdk::io::PrintWriter out_);
};

interface CmdLineParserCorFactory
{
  acdk::lang::CmdLineParser createCorCmdLineParser();
};

interface SystemImpl
: acdk::lang::AObject
{
  void deinit();
  acdk::util::Properties environment();
  acdk::util::Properties properties();
  void reinit();
  void setProperties(in acdk::util::Properties props);
};

interface CmdLineOption
: acdk::lang::AObject
{
  attribute string _alias;
  attribute string _docText;
  attribute boolean _expectArg;
  attribute string _option;
  void printOn(in acdk::io::PrintWriter out_);
};

interface CmdLineOptionCorFactory
{
  acdk::lang::CmdLineOption createCorCmdLineOption(in string option, in string alias, in boolean expectArg, in string help);
};

interface ThreadLocal
: acdk::lang::AObject
{
  acdk::lang::AObject get();
  void set(in acdk::lang::AObject obj);
};

interface ThreadLocalCorFactory
{
  acdk::lang::ThreadLocal createCorThreadLocal();

  // orginal method name: ThreadLocal
    acdk::lang::ThreadLocal createCorThreadLocal1(in acdk::lang::AObject obj);
  void threadEnd();
};

interface StringBuffer
: acdk::lang::AObject
, acdk::lang::Cloneable
{
  acdk::lang::StringBuffer append(in string c);

  // orginal method name: append
    acdk::lang::StringBuffer append1(in char c);

  // orginal method name: append
    acdk::lang::StringBuffer append2(in boolean b);

  // orginal method name: append
    acdk::lang::StringBuffer append3(in long b);

  // orginal method name: append
    acdk::lang::StringBuffer append4(in longlong b);

  // orginal method name: append
    acdk::lang::StringBuffer append5(in float b);

  // orginal method name: append
    acdk::lang::StringBuffer append6(in double b);

  // orginal method name: append
    acdk::lang::StringBuffer append7(in acdk::lang::AObject b);

  // orginal method name: append
    acdk::lang::StringBuffer append8(in long offset, in long b);

  // orginal method name: append
    acdk::lang::StringBuffer append9(in long offset, in longlong b);

  // orginal method name: append
    acdk::lang::StringBuffer append10(in long offset, in float b);

  // orginal method name: append
    acdk::lang::StringBuffer append11(in long offset, in double b);

  // orginal method name: append
    acdk::lang::StringBuffer append12(in long offset, in acdk::lang::AObject b);
  long capacity();
  char charAt(in long idx);
  acdk::lang::StringBuffer deleteCharAt(in long index);
  acdk::lang::StringBuffer deleteRegion(in long start, in long end);
  void ensureCapacity(in long mincap);
  void getChars(in long srcBegin, in long srcEnd, in charArray dst, in long dstBegin);
  acdk::lang::StringBuffer insert(in long offset, in string str);

  // orginal method name: insert
    acdk::lang::StringBuffer insert1(in long offset, in char ch);

  // orginal method name: insert
    acdk::lang::StringBuffer insert2(in long offset, in acdk::lang::AObject obj);

  // orginal method name: insert
    acdk::lang::StringBuffer insert3(in long offset, in long b);

  // orginal method name: insert
    acdk::lang::StringBuffer insert4(in long offset, in longlong l);

  // orginal method name: insert
    acdk::lang::StringBuffer insert5(in long offset, in double d);

  // orginal method name: insert
    acdk::lang::StringBuffer insert6(in long offset, in float f);

  // orginal method name: insert
    acdk::lang::StringBuffer insert7(in long offset, in boolean b);
  long length();
  acdk::lang::StringBuffer replace(in long start, in long end, in string str);
  void reset();
  acdk::lang::StringBuffer reverse();
  acdk::lang::StringBuffer set(in string str);
  void setCharAt(in long idx, in char c);
  void setLength(in long newLength);
  string substring(in long start, in long end);

  // orginal method name: substring
    string substring1(in long start);
};

interface StringBufferCorFactory
{

  // orginal method name: StringBuffer
    acdk::lang::StringBuffer createCorStringBuffer2(in string str);
  acdk::lang::StringBuffer createCorStringBuffer();
};

interface Integer
: acdk::lang::Number
, acdk::lang::Comparable
, acdk::lang::Cloneable
{
};

interface IntegerCorFactory
{
  attribute long MAX_VALUE;
  attribute long MIN_VALUE;
  attribute longlong serialVersionUID;
  acdk::lang::Integer createCorInteger(in long value);

  // orginal method name: Integer
    acdk::lang::Integer createCorInteger1(in string val);
  long decode(in string nm);
  acdk::lang::Class getTYPE();

  // orginal method name: parseInt
    long parseInt2(in string s, in long radix, in boolean decode);
  long parseInt(in string s, in long radix);

  // orginal method name: parseInt
    long parseInt1(in string s);
  string toBinaryString(in long val);
  string toHexString(in long val);
  string toOctalString(in long val);

  // orginal method name: toString
    string toString1(in long value);
  acdk::lang::Integer valueOf(in string str);

  // orginal method name: valueOf
    acdk::lang::Integer valueOf1(in string str, in long radix);
};

interface ClassLoader
: acdk::lang::AObject
{
  acdk::lang::Class defineClass(in string name, in octetArray b, in long off, in long len);
  acdk::lang::Class findClass(in string name);
  string findLibrary(in string libname);
  acdk::lang::Class findLoadedClass(in string name);
  acdk::util::Iterator findResources(in string name);
  acdk::lang::Class findSystemClass(in string name);
  acdk::lang::Package getPackage(in string name);
  acdk::lang::PackageArray getPackages();
  acdk::lang::ClassLoader getParent();
  acdk::io::InputReader getResourceAsStream(in string name);
  acdk::util::Iterator getResources(in string name);
  acdk::lang::Class loadClass(in string name);

  // orginal method name: loadClass
    acdk::lang::Class loadClass1(in string name, in boolean resolve);
  acdk::lang::reflect::Unit loadUnit(in string name);
  void resolveClass(in acdk::lang::Class c);
  void setSigners(in acdk::lang::Class c, in acdk::lang::AObjectArray signers);
};

interface ClassLoaderCorFactory
{
  acdk::lang::ClassLoader createCorClassLoader();

  // orginal method name: ClassLoader
    acdk::lang::ClassLoader createCorClassLoader1(in acdk::lang::ClassLoader parent);
  acdk::lang::ClassLoader getSystemClassLoader();
  acdk::io::InputReader getSystemResourceAsStream(in string name);
  acdk::util::Iterator getSystemResources(in string name);
};

interface Initializer
{
  void afterMain();
  void beforeMain();
};

interface InitializerCorFactory
{
  acdk::lang::Class GetClass();
};

}; // module lang
}; // module acdk
module acdk {
module lang {
module dmi {
interface MetaObject
{
  acdk::lang::dmi::MetaAttribute getMetaAttribute(in string str);
  acdk::lang::dmi::MetaAttributeArray getMetaAttributes();
  void setMetaAttribute(in string str, in acdk::lang::AObject obj);
};

interface MetaObjectCorFactory
{
  acdk::lang::Class GetClass();
};

}; // module dmi
}; // module lang
}; // module acdk
module acdk {
module io {
interface Serializable
{
};

interface SerializableCorFactory
{
  acdk::lang::Class GetClass();
};

}; // module io
}; // module acdk
module acdk {
module lang {
interface Byte
: acdk::lang::Number
, acdk::lang::Comparable
, acdk::lang::Cloneable
{
};

interface ByteCorFactory
{
  attribute octet MAX_VALUE;
  attribute octet MIN_VALUE;
  acdk::lang::Byte createCorByte(in char value);

  // orginal method name: Byte
    acdk::lang::Byte createCorByte1(in string str);
  acdk::lang::Byte decode(in string str);
  acdk::lang::Class getTYPE();
  char parseByte(in string s, in long radix);

  // orginal method name: parseByte
    char parseByte1(in string s);
  acdk::lang::Byte valueOf(in string s, in long radix);

  // orginal method name: valueOf
    acdk::lang::Byte valueOf1(in string s);
};

interface Boolean
: acdk::lang::AObject
, acdk::io::Serializable
, acdk::lang::Cloneable
{
  boolean booleanValue();
};

interface BooleanCorFactory
{
  acdk::lang::Boolean createCorBoolean(in boolean value);

  // orginal method name: Boolean
    acdk::lang::Boolean createCorBoolean1(in string val);
  boolean getBoolean(in string name);
  acdk::lang::Boolean getFALSE();
  acdk::lang::Boolean getTRUE();
  acdk::lang::Class getTYPE();
  acdk::lang::Boolean valueOf(in string s);
};

interface Short
: acdk::lang::Number
, acdk::lang::Comparable
, acdk::lang::Cloneable
{
};

interface ShortCorFactory
{
  attribute short MAX_VALUE;
  attribute short MIN_VALUE;
  acdk::lang::Short createCorShort(in string str);

  // orginal method name: Short
    acdk::lang::Short createCorShort1(in short s);
  acdk::lang::Short decode(in string str);
  acdk::lang::Class getTYPE();
  short parseShort(in string str, in long radix);

  // orginal method name: parseShort
    short parseShort1(in string str);

  // orginal method name: toString
    string toString1(in short s);
  acdk::lang::Short valueOf(in string s, in long radix);

  // orginal method name: valueOf
    acdk::lang::Short valueOf1(in string s);
};

}; // module lang
}; // module acdk
module acdk {
module lang {
module dmi {
interface ScriptInterpreter
{
  acdk::lang::AObject eval(in string code);
  void interactive(in acdk::io::Reader in_, in acdk::io::Writer out_, in acdk::io::Writer err);
  void parse(in acdk::io::File file);

  // orginal method name: parse
    void parse1(in string script);
};

interface ScriptInterpreterCorFactory
{
  acdk::lang::Class GetClass();
};

}; // module dmi
}; // module lang
}; // module acdk
module acdk {
module lang {
interface Class
: acdk::lang::AObject
, acdk::lang::dmi::MetaObject
{
  acdk::lang::Class getArrayElementClass();
  acdk::lang::ClassLoader getClassLoader();
  string getClassName();
  acdk::lang::ClassArray getClasses();
  acdk::lang::Class getComponentType();
  acdk::lang::ClassArray getDeclaredClasses();
  acdk::lang::reflect::Constructor getDeclaredConstructor(in acdk::lang::ClassArray parameterTypes);
  acdk::lang::reflect::ConstructorArray getDeclaredConstructors();
  acdk::lang::reflect::Field getDeclaredField(in string name);
  acdk::lang::reflect::FieldArray getDeclaredFields();
  acdk::lang::reflect::Method getDeclaredMethod(in string name, in acdk::lang::ClassArray parameterTypes);
  acdk::lang::reflect::MethodArray getDeclaredMethods();
  acdk::lang::Class getDeclaringClass();
  acdk::lang::reflect::Field getField(in string name);
  acdk::lang::reflect::FieldArray getFields();
  acdk::lang::ClassArray getInterfaces();
  acdk::lang::reflect::Method getMethod(in string name, in acdk::lang::ClassArray parameterTypes, in stringArray namedargs);

  // orginal method name: getMethod
    acdk::lang::reflect::Method getMethod1(in string name, in acdk::lang::ClassArray parameterTypes);
  acdk::lang::reflect::MethodArray getMethods();
  long getModifiers();
  string getName();
  acdk::lang::Package getPackage();
  acdk::lang::Class getSuperclass();
  acdk::lang::reflect::Unit getUnit();
  boolean hasReadObject();
  boolean hasReadResolve();
  boolean hasWriteObject();
  boolean hasWriteReplace();
  boolean isArray();
  boolean isAssignableFrom(in acdk::lang::Class cls);
  boolean isInstance(in acdk::lang::AObject obj);
  boolean isInterface();
  boolean isPrimitive();
  boolean isSerializable();
  acdk::lang::AObject newInstance();
  void setObjectInstance(in acdk::lang::AObject obj);
};

interface ClassCorFactory
{
  acdk::lang::Class _forName(in string name);
  acdk::lang::AObject create_arrayInstance(in acdk::lang::Class component, in long length);

  // orginal method name: forName
    acdk::lang::Class forName2(in string name, in boolean initialize, in acdk::lang::ClassLoader loader);
  acdk::lang::Class forName(in string className);

  // orginal method name: forName
    acdk::lang::Class forName1(in string name, in boolean initialize);
  acdk::lang::Class getClassByJType(in string sign);
};

}; // module lang
}; // module acdk
module acdk {
module lang {
module dmi {
interface MetaAttribute
: acdk::lang::AObject
{
  attribute string name;
  attribute long type;
  attribute acdk::lang::AObject value;
};

interface MetaAttributeCorFactory
{
  acdk::lang::dmi::MetaAttribute createCorMetaAttribute(in long t, in string nam, in acdk::lang::AObject val);

  // orginal method name: MetaAttribute
    acdk::lang::dmi::MetaAttribute createCorMetaAttribute1(in long t, in string nam);
};

interface DmiObject
: acdk::lang::AObject
{
  acdk::lang::dmi::DmiObject addition(in acdk::lang::dmi::DmiObject other);

  // orginal method name: addition
    acdk::lang::dmi::DmiObject addition1(in longlong other);

  // orginal method name: addition
    acdk::lang::dmi::DmiObject addition2(in double other);
  acdk::lang::dmi::DmiObject divide(in acdk::lang::dmi::DmiObject other);

  // orginal method name: divide
    acdk::lang::dmi::DmiObject divide1(in longlong other);

  // orginal method name: divide
    acdk::lang::dmi::DmiObject divide2(in double other);

  // orginal method name: equal
    acdk::lang::dmi::DmiObject equal1(in longlong other);

  // orginal method name: equal
    acdk::lang::dmi::DmiObject equal2(in double other);
  acdk::lang::dmi::DmiObject equal(in acdk::lang::dmi::DmiObject other);

  // orginal method name: equal
    acdk::lang::dmi::DmiObject equal3(in boolean other);

  // orginal method name: equals
    boolean equals1(in acdk::lang::AObject other);
  boolean getBoolVar();
  octet getByteVar();
  char getCharVar();
  double getDoubleVar();
  long getFlags();
  float getFloatVar();
  long getIntVar();
  longlong getLongVar();
  acdk::lang::AObject getObjectVar();
  short getShortVar();
  string getStringVar();
  string getTypeInfo();
  long getVarType();
  acdk::lang::dmi::DmiObject greater_or_equal(in acdk::lang::dmi::DmiObject other);

  // orginal method name: greater_or_equal
    acdk::lang::dmi::DmiObject greater_or_equal1(in longlong other);

  // orginal method name: greater_or_equal
    acdk::lang::dmi::DmiObject greater_or_equal2(in double other);

  // orginal method name: greater_than
    acdk::lang::dmi::DmiObject greater_than1(in longlong other);

  // orginal method name: greater_than
    acdk::lang::dmi::DmiObject greater_than2(in double other);
  acdk::lang::dmi::DmiObject greater_than(in acdk::lang::dmi::DmiObject other);
  boolean isBoolean();
  boolean isInteger();
  boolean isNumber();
  boolean isObject();
  boolean isString();
  boolean isTrue();
  acdk::lang::dmi::DmiObject less_or_equal(in acdk::lang::dmi::DmiObject other);

  // orginal method name: less_or_equal
    acdk::lang::dmi::DmiObject less_or_equal1(in longlong other);

  // orginal method name: less_or_equal
    acdk::lang::dmi::DmiObject less_or_equal2(in double other);

  // orginal method name: less_than
    acdk::lang::dmi::DmiObject less_than2(in double other);
  acdk::lang::dmi::DmiObject less_than(in acdk::lang::dmi::DmiObject other);

  // orginal method name: less_than
    acdk::lang::dmi::DmiObject less_than1(in longlong other);
  acdk::lang::dmi::DmiObject logical_and(in acdk::lang::dmi::DmiObject other);

  // orginal method name: logical_and
    acdk::lang::dmi::DmiObject logical_and1(in boolean other);
  acdk::lang::dmi::DmiObject logical_not();
  acdk::lang::dmi::DmiObject logical_or(in acdk::lang::dmi::DmiObject other);

  // orginal method name: logical_or
    acdk::lang::dmi::DmiObject logical_or1(in boolean other);
  acdk::lang::dmi::DmiObject logical_xor(in acdk::lang::dmi::DmiObject other);

  // orginal method name: logical_xor
    acdk::lang::dmi::DmiObject logical_xor1(in boolean other);
  acdk::lang::dmi::DmiObject modulo(in acdk::lang::dmi::DmiObject other);

  // orginal method name: modulo
    acdk::lang::dmi::DmiObject modulo1(in longlong other);

  // orginal method name: multiply
    acdk::lang::dmi::DmiObject multiply1(in longlong other);

  // orginal method name: multiply
    acdk::lang::dmi::DmiObject multiply2(in double other);
  acdk::lang::dmi::DmiObject multiply(in acdk::lang::dmi::DmiObject other);
  acdk::lang::dmi::DmiObject not_equal(in acdk::lang::dmi::DmiObject other);

  // orginal method name: not_equal
    acdk::lang::dmi::DmiObject not_equal1(in longlong other);

  // orginal method name: not_equal
    acdk::lang::dmi::DmiObject not_equal2(in double other);

  // orginal method name: not_equal
    acdk::lang::dmi::DmiObject not_equal3(in boolean other);
  void readObject(in acdk::io::ObjectReader in_);
  acdk::lang::dmi::DmiObject subtraction(in acdk::lang::dmi::DmiObject other);

  // orginal method name: subtraction
    acdk::lang::dmi::DmiObject subtraction1(in longlong other);

  // orginal method name: subtraction
    acdk::lang::dmi::DmiObject subtraction2(in double other);
  string toCode();
  void writeObject(in acdk::io::ObjectWriter out_);
};

interface DmiObjectCorFactory
{
  acdk::lang::dmi::DmiObject createCorDmiObject();

  // orginal method name: DmiObject
    acdk::lang::dmi::DmiObject createCorDmiObject1(in boolean c, in long fl);

  // orginal method name: DmiObject
    acdk::lang::dmi::DmiObject createCorDmiObject2(in boolean c);

  // orginal method name: DmiObject
    acdk::lang::dmi::DmiObject createCorDmiObject3(out boolean c, in long fl);

  // orginal method name: DmiObject
    acdk::lang::dmi::DmiObject createCorDmiObject4(out boolean c);

  // orginal method name: DmiObject
    acdk::lang::dmi::DmiObject createCorDmiObject5(in char c, in long fl);

  // orginal method name: DmiObject
    acdk::lang::dmi::DmiObject createCorDmiObject6(in char c);

  // orginal method name: DmiObject
    acdk::lang::dmi::DmiObject createCorDmiObject7(out char c, in long fl);

  // orginal method name: DmiObject
    acdk::lang::dmi::DmiObject createCorDmiObject8(out char c);

  // orginal method name: DmiObject
    acdk::lang::dmi::DmiObject createCorDmiObject9(in octet c, in long fl);

  // orginal method name: DmiObject
    acdk::lang::dmi::DmiObject createCorDmiObject10(in octet c);

  // orginal method name: DmiObject
    acdk::lang::dmi::DmiObject createCorDmiObject11(out octet c, in long fl);

  // orginal method name: DmiObject
    acdk::lang::dmi::DmiObject createCorDmiObject12(out octet c);

  // orginal method name: DmiObject
    acdk::lang::dmi::DmiObject createCorDmiObject13(in short c, in long fl);

  // orginal method name: DmiObject
    acdk::lang::dmi::DmiObject createCorDmiObject14(in short c);

  // orginal method name: DmiObject
    acdk::lang::dmi::DmiObject createCorDmiObject15(out short c, in long fl);

  // orginal method name: DmiObject
    acdk::lang::dmi::DmiObject createCorDmiObject16(out short c);

  // orginal method name: DmiObject
    acdk::lang::dmi::DmiObject createCorDmiObject17(in long c, in long fl);

  // orginal method name: DmiObject
    acdk::lang::dmi::DmiObject createCorDmiObject18(in long c);

  // orginal method name: DmiObject
    acdk::lang::dmi::DmiObject createCorDmiObject19(out long c, in long fl);

  // orginal method name: DmiObject
    acdk::lang::dmi::DmiObject createCorDmiObject20(out long c);

  // orginal method name: DmiObject
    acdk::lang::dmi::DmiObject createCorDmiObject21(in longlong c, in long fl);

  // orginal method name: DmiObject
    acdk::lang::dmi::DmiObject createCorDmiObject22(in longlong c);

  // orginal method name: DmiObject
    acdk::lang::dmi::DmiObject createCorDmiObject23(out longlong c, in long fl);

  // orginal method name: DmiObject
    acdk::lang::dmi::DmiObject createCorDmiObject24(out longlong c);

  // orginal method name: DmiObject
    acdk::lang::dmi::DmiObject createCorDmiObject25(in float c, in long fl);

  // orginal method name: DmiObject
    acdk::lang::dmi::DmiObject createCorDmiObject26(in float c);

  // orginal method name: DmiObject
    acdk::lang::dmi::DmiObject createCorDmiObject27(out float c, in long fl);

  // orginal method name: DmiObject
    acdk::lang::dmi::DmiObject createCorDmiObject28(out float c);

  // orginal method name: DmiObject
    acdk::lang::dmi::DmiObject createCorDmiObject29(in double c, in long fl);

  // orginal method name: DmiObject
    acdk::lang::dmi::DmiObject createCorDmiObject30(in double c);

  // orginal method name: DmiObject
    acdk::lang::dmi::DmiObject createCorDmiObject31(out double c, in long fl);

  // orginal method name: DmiObject
    acdk::lang::dmi::DmiObject createCorDmiObject32(out double c);

  // orginal method name: DmiObject
    acdk::lang::dmi::DmiObject createCorDmiObject33(in acdk::lang::AObject c, in long fl);

  // orginal method name: DmiObject
    acdk::lang::dmi::DmiObject createCorDmiObject34(in acdk::lang::AObject c);

  // orginal method name: DmiObject
    acdk::lang::dmi::DmiObject createCorDmiObject35(out acdk::lang::AObject c, in long fl);

  // orginal method name: DmiObject
    acdk::lang::dmi::DmiObject createCorDmiObject36(out acdk::lang::AObject c);
};

interface DmiNamedArg
: acdk::lang::AObject
{
};

}; // module dmi
}; // module lang
}; // module acdk
module acdk {
module io {
interface Writer
{
  void closeWriter();
  void flush();
  void write(in octet c);

  // orginal method name: write
    void write1(in octetArray ch, in long offset, in long len);

  // orginal method name: write
    void write2(in octetArray ch);

  // orginal method name: write
    void write3(in octetArray ch, in long offset);
  void write_string(in string str);
};

interface WriterCorFactory
{
  acdk::lang::Class GetClass();
};

interface FilterWriter
: acdk::io::Writer
{
  acdk::io::Writer getStorageWriter();
  void setOut(in acdk::io::Writer writer);
};

interface Reader
{
  long available();
  void closeReader();
  void mark(in long readAheadLimit);
  boolean markSupported();
  long read();

  // orginal method name: read
    long read1(in octetArray buffer, in long offset, in long len);

  // orginal method name: read
    long read2(in octetArray buffer);

  // orginal method name: read
    long read3(in octetArray buffer, in long offset);
  string readIntoString();
  boolean ready();
  void reset();
  longlong seek(in long seekrel, in longlong seekpos);
  longlong skip(in longlong n);
  void trans(in acdk::io::Writer out_);
};

interface ReaderCorFactory
{
  acdk::lang::Class GetClass();
};

interface FilterReader
: acdk::io::Reader
{
  acdk::io::Storage getStorage();
  acdk::io::Reader getStorageReader();
  void setIn(in acdk::io::Reader reader);
};

interface StreamTokenizer
: acdk::lang::AObject
{
  attribute double nval;
  attribute string sval;
  attribute long ttype;
  void commentChar(in long ch);
  boolean eof();
  void eolIsSignificant(in boolean flag);
  string getDeviceName();
  string getStreamPos(in boolean withXPos);

  // orginal method name: getStreamPos
    string getStreamPos1();
  string lastReaded();
  long lineno();
  void lowerCaseMode(in boolean fl);
  long nextToken();
  void ordinaryChar(in long ch);
  void ordinaryChars(in long low, in long hi);
  void parseNumbers();
  void pushBack();

  // orginal method name: pushBack
    void pushBack1(in long typ, in string stringval, in double dval);
  void quoteChar(in long ch);
  long read();
  void readCxxIdentifier(in boolean b);

  // orginal method name: readCxxIdentifier
    boolean readCxxIdentifier1();
  void resetSyntax();
  void skipLine();
  void slashSlashComments(in boolean flag);
  void slashStarComments(in boolean flag);
  string toCode();
  void unread(in long c);

  // orginal method name: unread
    void unread1(in string str);
  boolean wantComments(in boolean b);
  boolean wantNewline(in boolean b);
  boolean wantWhiteSpace(in boolean b);
  void whitespaceChars(in long low, in long hi);
  void wordChars(in long low, in long hi);
};

interface StreamTokenizerCorFactory
{
  acdk::io::StreamTokenizer createCorStreamTokenizer(in acdk::io::Reader reader);
};

interface Storage
{
  string getDeviceName();
  boolean isReadable();
  boolean isWriteable();
};

interface StorageCorFactory
{
  acdk::lang::Class GetClass();
};

}; // module io
}; // module acdk
module acdk {
module lang {
interface Character
: acdk::lang::AObject
, acdk::lang::Comparable
, acdk::lang::Cloneable
, acdk::io::Serializable
{
  char charValue();
};

interface CharacterCorFactory
{
  attribute long MAX_RADIX;
  attribute char MAX_VALUE;
  attribute long MIN_RADIX;
  attribute char MIN_VALUE;
  acdk::lang::Character createCorCharacter(in char value);
  long digit(in char ch, in long idx);
  acdk::lang::Class getTYPE();
  boolean isDigit(in char c);
  boolean isJavaIdentifierPart(in char c);
  boolean isJavaIdentifierStart(in char c);
  boolean isLetter(in char c);
  boolean isLetterOrDigit(in char c);
  boolean isLowerCase(in char c);
  boolean isSpace(in char c);
  boolean isUnicodeIdentifierPart(in char c);
  boolean isUnicodeIdentifierStart(in char c);
  boolean isUpperCase(in char c);
  boolean isWhitespace(in char c);
  char toLowerCase(in char c);
  char toUpperCase(in char c);
};

}; // module lang
}; // module acdk
module acdk {
module io {
interface AbstractReader
: acdk::lang::AObject
, acdk::io::Reader
{
  acdk::lang::AObject getLock();
  void setLock(in acdk::lang::AObject obj);
};

interface AbstractReaderCorFactory
{
  acdk::io::AbstractReader createCorAbstractReader();

  // orginal method name: AbstractReader
    acdk::io::AbstractReader createCorAbstractReader1(in acdk::lang::AObject obj);
};

interface DataWriter
: acdk::io::FilterWriter
{
  void writeBoolean(in boolean b);
  void writeChar(in char b);
  void writeDouble(in double b);
  void writeFloat(in float b);
  void writeInt(in long b);
  void writeLong(in longlong b);
  void writeOpaque(in octetArray array);
  void writeShort(in short b);
  void writeString(in string str);
};

interface AbstractFilterReader
: acdk::io::AbstractReader
, acdk::io::FilterReader
{
};

interface AbstractFilterReaderCorFactory
{
  acdk::io::AbstractFilterReader createCorAbstractFilterReader(in acdk::io::Reader in_, in acdk::lang::AObject lock);

  // orginal method name: AbstractFilterReader
    acdk::io::AbstractFilterReader createCorAbstractFilterReader1(in acdk::io::Reader in_);
};

interface AbstractWriter
: acdk::lang::AObject
, acdk::io::Writer
{
  acdk::lang::AObject getLock();
  void setLock(in acdk::lang::AObject obj);
};

interface AbstractWriterCorFactory
{
  acdk::io::AbstractWriter createCorAbstractWriter();

  // orginal method name: AbstractWriter
    acdk::io::AbstractWriter createCorAbstractWriter1(in acdk::lang::AObject olock);
};

interface AbstractStorageWriter
: acdk::io::AbstractWriter
, acdk::io::Storage
{
};

interface AbstractStorageWriterCorFactory
{
  acdk::io::AbstractStorageWriter createCorAbstractStorageWriter();
};

interface AbstractStorageReader
: acdk::io::AbstractReader
, acdk::io::Storage
{
};

interface AbstractStorageReaderCorFactory
{
  acdk::io::AbstractStorageReader createCorAbstractStorageReader();
};

interface ObjectWriter
: acdk::io::DataWriter
{
  void writeObject(in acdk::lang::AObject obj);

  // orginal method name: writeObject
    void writeObject1(in acdk::lang::Class cls, in acdk::lang::AObject obj);
};

}; // module io
}; // module acdk
module acdk {
module lang {
interface Float
: acdk::lang::Number
, acdk::lang::Comparable
, acdk::lang::Cloneable
{

  // orginal method name: equals
    boolean equals1(in acdk::lang::AObject obj);
};

interface FloatCorFactory
{
  attribute float MAX_VALUE;
  attribute float MIN_VALUE;
  acdk::lang::Float createCorFloat(in float l);

  // orginal method name: Float
    acdk::lang::Float createCorFloat1(in string str);
  acdk::lang::Class getTYPE();
  float parseFloat(in string s);
  acdk::lang::Float valueOf(in string str);
};

}; // module lang
}; // module acdk
module acdk {
module io {
interface DataReader
: acdk::io::FilterReader
{
  boolean readBoolean();
  char readChar();
  double readDouble();
  float readFloat();
  long readInt();
  longlong readLong();
  octetArray readOpaque();
  short readShort();
  string readString();
};

interface NullWriter
: acdk::io::AbstractStorageWriter
{
};

interface MemWriter
: acdk::io::AbstractStorageWriter
{
  void ensureCapacity(in long size);
  octetArray getBuffer();
};

interface MemWriterCorFactory
{
  attribute long DefaultBufferSize;
  attribute long IncrementBufferSize;
  acdk::io::MemWriter createCorMemWriter(in long initsize);

  // orginal method name: MemWriter
    acdk::io::MemWriter createCorMemWriter1();

  // orginal method name: MemWriter
    acdk::io::MemWriter createCorMemWriter2(in octetArray buffer);
};

interface MemReader
: acdk::io::AbstractStorageReader
{
};

interface MemReaderCorFactory
{
  acdk::io::MemReader createCorMemReader(in acdk::io::MemWriter memwriter, in long offset);

  // orginal method name: MemReader
    acdk::io::MemReader createCorMemReader1(in acdk::io::MemWriter memwriter);

  // orginal method name: MemReader
    acdk::io::MemReader createCorMemReader2(in octetArray byteray, in long offset);

  // orginal method name: MemReader
    acdk::io::MemReader createCorMemReader3(in octetArray byteray);
};

interface InputReader
: acdk::io::AbstractFilterReader
{
  boolean eof();
  string readAString();
  boolean readBoolean();
  char readChar();
  double readDouble();
  long readInt();
  string readLine();
  longlong readLong();
  string readQuoted();
  string readString();
  long skipBytes(in long len);
};

interface InputReaderCorFactory
{
  acdk::io::InputReader createCorInputReader(in acdk::io::Reader in_);
};

interface JoinedReader
: acdk::io::AbstractReader
, acdk::io::FilterReader
{
  void addIn(in acdk::io::Reader in_);
  acdk::io::Reader getIn();
};

interface JoinedReaderCorFactory
{
  acdk::io::JoinedReader createCorJoinedReader(in acdk::io::Reader firstIn, in acdk::lang::AObject lock);

  // orginal method name: JoinedReader
    acdk::io::JoinedReader createCorJoinedReader1(in acdk::io::Reader firstIn);
};

}; // module io
}; // module acdk
module acdk {
module lang {
interface StackTraceElement
: acdk::lang::AObject
{
  attribute string declaringClass;
  attribute string fileName;
  attribute long lineNumber;
  attribute string methodName;
  string getClassName();
  string getFileName();
  long getLineNumber();
  string getMethodName();
  boolean isNativeMethod();
};

interface StackTraceElementCorFactory
{
  acdk::lang::StackTraceElement createCorStackTraceElement();
};

}; // module lang
}; // module acdk
module acdk {
module io {
interface LineNumberReader
: acdk::io::InputReader
{
  long getLineNumber();
  long getXPos();
  void setLineNumber(in long ln);
};

interface LineNumberReaderCorFactory
{
  acdk::io::LineNumberReader createCorLineNumberReader(in acdk::io::Reader in_, in long size);

  // orginal method name: LineNumberReader
    acdk::io::LineNumberReader createCorLineNumberReader1(in acdk::io::Reader in_);
};

interface FilenameFilter
{
  boolean accept(in acdk::io::File dir, in string name);
};

interface FilenameFilterCorFactory
{
  acdk::lang::Class GetClass();
};

interface TeeWriter
: acdk::io::AbstractWriter
, acdk::io::FilterWriter
{
};

interface TeeWriterCorFactory
{
  acdk::io::TeeWriter createCorTeeWriter(in acdk::io::Writer out1, in acdk::io::Writer out2, in acdk::lang::AObject lock);

  // orginal method name: TeeWriter
    acdk::io::TeeWriter createCorTeeWriter1(in acdk::io::Writer out1, in acdk::io::Writer out2);
};

interface SubReader
: acdk::io::AbstractFilterReader
{
};

interface SubReaderCorFactory
{
  acdk::io::SubReader createCorSubReader(in acdk::io::Reader in_, in long startoffset, in long len);
};

interface FileWriter
: acdk::io::AbstractStorageWriter
{
  longlong tell();
};

interface FileWriterCorFactory
{
  acdk::io::FileWriter createCorFileWriter(in acdk::io::File file, in boolean append, in boolean binary);

  // orginal method name: FileWriter
    acdk::io::FileWriter createCorFileWriter1(in acdk::io::File file);

  // orginal method name: FileWriter
    acdk::io::FileWriter createCorFileWriter2(in acdk::io::File file, in boolean append);

  // orginal method name: FileWriter
    acdk::io::FileWriter createCorFileWriter3(in acdk::io::FileDescriptor fd, in boolean dupl);

  // orginal method name: FileWriter
    acdk::io::FileWriter createCorFileWriter4(in acdk::io::FileDescriptor fd);

  // orginal method name: FileWriter
    acdk::io::FileWriter createCorFileWriter5(in string fileName, in boolean append, in boolean binary);

  // orginal method name: FileWriter
    acdk::io::FileWriter createCorFileWriter6(in string fileName);

  // orginal method name: FileWriter
    acdk::io::FileWriter createCorFileWriter7(in string fileName, in boolean append);
};

interface FileSystemFactory
{
  acdk::io::FileSystem create(in string file);
  long handleFile(in string file);
};

interface FileSystemFactoryCorFactory
{
  acdk::lang::Class GetClass();
};

interface FileSystem
{
  acdk::io::File file(in string path);
  acdk::io::FileImpl getFileImpl(in string fqpath);
  string getRootName();
  acdk::io::FileArray listFiles(in string directory, in long listflags);
  boolean ownsFile(in string fname);
};

interface FileSystemCorFactory
{
  acdk::io::FileSystem createCorFileSystem();
  acdk::lang::Class GetClass();
  acdk::io::FileSystem findFileSystem(in string file);
  void registerFileSystem(in acdk::io::FileSystem fs);
  void registerFileSystemFactory(in acdk::io::FileSystemFactory fsf);
};

interface FileReader
: acdk::io::AbstractStorageReader
{
  longlong fileLength();
  acdk::io::FileDescriptor getFD();
  void open(in acdk::io::File fname);
  string readLine();
  longlong tell();
};

interface FileReaderCorFactory
{
  acdk::io::FileReader createCorFileReader(in acdk::io::File file, in boolean binary);

  // orginal method name: FileReader
    acdk::io::FileReader createCorFileReader1(in acdk::io::File file);

  // orginal method name: FileReader
    acdk::io::FileReader createCorFileReader2(in string fileName, in boolean binary);

  // orginal method name: FileReader
    acdk::io::FileReader createCorFileReader3(in string fileName);

  // orginal method name: FileReader
    acdk::io::FileReader createCorFileReader4(in acdk::io::FileDescriptor fd, in boolean dupl);

  // orginal method name: FileReader
    acdk::io::FileReader createCorFileReader5(in acdk::io::FileDescriptor fd);
};

}; // module io
}; // module acdk
module acdk {
module lang {
interface Double
: acdk::lang::Number
, acdk::lang::Comparable
, acdk::lang::Cloneable
{
  boolean isInfinite();
  boolean isNaN();
};

interface DoubleCorFactory
{
  attribute double MAX_VALUE;
  attribute double MIN_VALUE;
  attribute double NEGATIVE_INFINITY;
  attribute double NaN;
  attribute double POSITIVE_INFINITY;
  acdk::lang::Double createCorDouble(in double d);

  // orginal method name: Double
    acdk::lang::Double createCorDouble1(in string str);
  longlong doubleToRawLongBits(in double val);
  acdk::lang::Class getTYPE();

  // orginal method name: isInfinite
    boolean isInfinite1(in double v);

  // orginal method name: isNaN
    boolean isNaN1(in double v);
  double longBitsToDouble(in longlong val);
  double parseDouble(in string s);
  acdk::lang::Double valueOf(in string str);
};

}; // module lang
}; // module acdk
module acdk {
module io {
interface GlobFilenameFilter
: acdk::lang::AObject
, acdk::io::FilenameFilter
{
};

interface GlobFilenameFilterCorFactory
{
  acdk::io::GlobFilenameFilter createCorGlobFilenameFilter(in string pattern);
};

interface FileImpl
{
  boolean canRead();
  boolean canWrite();
  boolean createNewFile();
  boolean deleteFile();
  boolean exists();
  longlong fileCreated();
  string getAbsolutePath();
  string getCanonicalPath();
  acdk::io::FileSystem getFileSystem();
  string getName();
  acdk::io::File getParentFile();
  string getPath();
  acdk::io::Reader getReader();
  acdk::io::Writer getWriter();
  boolean isAbsolute();
  boolean isDirectory();
  boolean isFile();
  boolean isHidden();
  longlong lastModified();
  longlong length();
  stringArray list(in acdk::io::FilenameFilter filter);

  // orginal method name: list
    stringArray list1();
  acdk::io::FileArray listFiles(in acdk::io::FileFilter filter);

  // orginal method name: listFiles
    acdk::io::FileArray listFiles1();
  acdk::io::File makeChild(in string subfile);
  boolean mkdir(in long mode);

  // orginal method name: mkdir
    boolean mkdir1();
  boolean renameTo(in acdk::io::File dest);
  boolean setFileCreated(in longlong time);
  boolean setLastModified(in longlong time);
};

interface FileImplCorFactory
{
  acdk::lang::Class GetClass();
};

interface FileFilter
{
  boolean accept(in acdk::io::File path);
};

interface FileFilterCorFactory
{
  acdk::lang::Class GetClass();
};

interface FileDescriptor
: acdk::lang::AObject
{
  long c_fd();
  boolean getCloseOnExec();
  long omode();
  void setCloseOnExec(in boolean val);
  void sync();
  boolean valid();
};

interface FileDescriptorCorFactory
{
  attribute acdk::io::FileDescriptor err;
  attribute acdk::io::FileDescriptor in_;
  attribute acdk::io::FileDescriptor out_;
  acdk::io::FileDescriptor createCorFileDescriptor(in long fd, in long omode, in boolean dupl);

  // orginal method name: FileDescriptor
    acdk::io::FileDescriptor createCorFileDescriptor1(in long fd, in long omode);

  // orginal method name: FileDescriptor
    acdk::io::FileDescriptor createCorFileDescriptor2(in acdk::io::FileDescriptor f, in boolean dupl);

  // orginal method name: FileDescriptor
    acdk::io::FileDescriptor createCorFileDescriptor3(in acdk::io::FileDescriptor f);

  // orginal method name: FileDescriptor
    acdk::io::FileDescriptor createCorFileDescriptor4();
};

interface File
: acdk::lang::AObject
, acdk::io::Serializable
, acdk::lang::Comparable
{
  boolean canRead();
  boolean canWrite();
  boolean createNewFile();
  boolean deleteFile();
  void deleteOnExit();
  boolean exists();
  longlong fileCreated();
  string getAbsolutePath();
  string getCanonicalPath();

  // orginal method name: getFileImpl
    acdk::io::FileImpl getFileImpl1();
  string getName();
  string getParent();
  acdk::io::File getParentFile();
  string getPath();
  acdk::io::Reader getReader();
  acdk::io::Writer getWriter();
  boolean isAbsolute();
  boolean isDirectory();
  boolean isFile();
  boolean isHidden();
  longlong lastModified();
  longlong length();
  stringArray list(in acdk::io::FilenameFilter filter);

  // orginal method name: list
    stringArray list1();
  acdk::io::FileArray listFiles(in acdk::io::FileFilter filter);

  // orginal method name: listFiles
    acdk::io::FileArray listFiles1();
  string loadAscii();
  octetArray loadBinary();
  acdk::io::File makeChild(in string subfile);
  boolean mkdir(in long mode);

  // orginal method name: mkdir
    boolean mkdir1();
  boolean mkdirs(in long mode);

  // orginal method name: mkdirs
    boolean mkdirs1();
  boolean renameTo(in acdk::io::File dest);
  boolean setFileCreated(in longlong time);
  boolean setLastModified(in longlong time);
  boolean setReadOnly();
};

interface FileCorFactory
{
  acdk::io::File createCorFile(in acdk::io::FileImpl fileimpl);

  // orginal method name: File
    acdk::io::File createCorFile1(in string path);

  // orginal method name: File
    acdk::io::File createCorFile2(in acdk::io::File parent, in string child);

  // orginal method name: File
    acdk::io::File createCorFile3(in string parent, in string child);
  string concat(in string parent, in string child);
  acdk::io::File createTempFile(in string prefix, in string suffix);

  // orginal method name: createTempFile
    acdk::io::File createTempFile1(in string prefix, in string suffix, in acdk::io::File directory);
  string endOfLine();
  string getCWD();
  acdk::io::File getCWDFile();
  acdk::io::FileImpl getFileImpl(in string fname);
  acdk::io::FileArray listRoots();
  string pathSeparator();
  char pathSeparatorChar();
  string separator();
  char separatorChar();
  boolean setCWD(in string newpath);
};

}; // module io
}; // module acdk
module acdk {
module lang {
interface ThreadGroup
: acdk::lang::AObject
{
  long activeCount();
  long activeGroupCount();
  void checkAccess();
  void destroy();
  long enumerate(in acdk::lang::ThreadArray list, in boolean recursive);

  // orginal method name: enumerate
    long enumerate1(in acdk::lang::ThreadArray list);

  // orginal method name: enumerate
    long enumerate2(in acdk::lang::ThreadGroupArray list, in boolean recursive);

  // orginal method name: enumerate
    long enumerate3(in acdk::lang::ThreadGroupArray list);
  long getMaxPriority();
  string getName();
  acdk::lang::ThreadGroup getParent();
  void interrupt();
  boolean isDaemon();
  boolean isDestroyed();
  void list();
  boolean parentOf(in acdk::lang::ThreadGroup group);
  void setDaemon(in boolean on);
  void setMaxPriority(in long prio);
};

interface ThreadGroupCorFactory
{
  acdk::lang::ThreadGroup createCorThreadGroup(in string name);

  // orginal method name: ThreadGroup
    acdk::lang::ThreadGroup createCorThreadGroup1(in acdk::lang::ThreadGroup parent, in string name);
  acdk::lang::ThreadGroup getRoot();
};

}; // module lang
}; // module acdk
module acdk {
module io {
interface RandomAccessFile
: acdk::lang::AObject
, acdk::io::DataReader
, acdk::io::DataWriter
, acdk::io::Storage
{
  acdk::io::FileDescriptor getFD();
  longlong getFilePointer();
  longlong length();
  void setLength(in longlong newLength);
  long skipBytes(in long n);
};

interface RandomAccessFileCorFactory
{
  acdk::io::RandomAccessFile createCorRandomAccessFile(in acdk::io::File file, in string mode, in acdk::io::DataReader dataReader, in acdk::io::DataWriter dataWriter);

  // orginal method name: RandomAccessFile
    acdk::io::RandomAccessFile createCorRandomAccessFile1(in acdk::io::File file, in string mode);

  // orginal method name: RandomAccessFile
    acdk::io::RandomAccessFile createCorRandomAccessFile2(in acdk::io::File file, in string mode, in acdk::io::DataReader dataReader);

  // orginal method name: RandomAccessFile
    acdk::io::RandomAccessFile createCorRandomAccessFile3(in string name, in string mode, in acdk::io::DataReader dataReader, in acdk::io::DataWriter dataWriter);

  // orginal method name: RandomAccessFile
    acdk::io::RandomAccessFile createCorRandomAccessFile4(in string name, in string mode);

  // orginal method name: RandomAccessFile
    acdk::io::RandomAccessFile createCorRandomAccessFile5(in string name, in string mode, in acdk::io::DataReader dataReader);
};

interface ObjectReader
: acdk::io::DataReader
{
  acdk::lang::AObject readObject();

  // orginal method name: readObject
    acdk::lang::AObject readObject1(in acdk::lang::Class cls);
};

interface ConsoleWriter
: acdk::io::AbstractStorageWriter
{
};

interface ConsoleWriterCorFactory
{
  acdk::io::ConsoleWriter createCorConsoleWriter(in long fd);

  // orginal method name: ConsoleWriter
    acdk::io::ConsoleWriter createCorConsoleWriter1();
};

interface ConsoleReader
: acdk::io::AbstractStorageReader
{
  string readLine();
  long unread(in octet ch);
};

interface ConsoleReaderCorFactory
{
  acdk::io::ConsoleReader createCorConsoleReader(in long fd);

  // orginal method name: ConsoleReader
    acdk::io::ConsoleReader createCorConsoleReader1();
};

interface CharArrayWriter
: acdk::io::AbstractStorageWriter
{
  attribute charArray _sb;
  attribute long _writePos;
  long capacity();
  void ensureCapacity(in long newSize);
  void reset();
  long size();
  charArray tocharArray();
  void writeTo(in acdk::io::Writer out_);
};

interface CharArrayWriterCorFactory
{
  acdk::io::CharArrayWriter createCorCharArrayWriter(in long initialSize);

  // orginal method name: CharArrayWriter
    acdk::io::CharArrayWriter createCorCharArrayWriter1();
};

interface CharArrayReader
: acdk::io::AbstractStorageReader
{
  attribute octetArray _buffer;
  attribute long _count;
  attribute long _markedPos;
  attribute long _pos;
};

interface CharArrayReaderCorFactory
{
  acdk::io::CharArrayReader createCorCharArrayReader(in octetArray buf, in long offset, in long length);

  // orginal method name: CharArrayReader
    acdk::io::CharArrayReader createCorCharArrayReader1(in octetArray buf);

  // orginal method name: CharArrayReader
    acdk::io::CharArrayReader createCorCharArrayReader2(in octetArray buf, in long offset);
};

interface AbstractFilterWriter
: acdk::io::AbstractWriter
, acdk::io::FilterWriter
{
};

interface AbstractFilterWriterCorFactory
{
  acdk::io::AbstractFilterWriter createCorAbstractFilterWriter(in acdk::io::Writer out_, in acdk::lang::AObject lock);

  // orginal method name: AbstractFilterWriter
    acdk::io::AbstractFilterWriter createCorAbstractFilterWriter1(in acdk::io::Writer out_);
};

interface BufferedReader
: acdk::io::AbstractFilterReader
{
};

interface BufferedReaderCorFactory
{
  acdk::io::BufferedReader createCorBufferedReader(in acdk::io::Reader in_, in long buffsize);

  // orginal method name: BufferedReader
    acdk::io::BufferedReader createCorBufferedReader1(in acdk::io::Reader in_);
};

interface BinaryDataWriter
: acdk::io::AbstractFilterWriter
, acdk::io::DataWriter
{
};

interface BinaryDataReader
: acdk::io::AbstractFilterReader
, acdk::io::DataReader
{
};

interface ASCIIDataWriter
: acdk::io::AbstractFilterWriter
, acdk::io::DataWriter
{
};

interface ASCIIDataWriterCorFactory
{
  acdk::io::ASCIIDataWriter createCorASCIIDataWriter(in acdk::io::Writer out_);
};

interface ASCIIDataReader
: acdk::io::AbstractFilterReader
, acdk::io::DataReader
{
};

interface ASCIIDataReaderCorFactory
{
  acdk::io::ASCIIDataReader createCorASCIIDataReader(in acdk::io::Reader in_);
};

interface PrintWriter
: acdk::io::AbstractFilterWriter
{
  void print(in boolean c);

  // orginal method name: print
    void print1(in char c);

  // orginal method name: print
    void print2(in long c);

  // orginal method name: print
    void print3(in longlong c);

  // orginal method name: print
    void print5(in float c);

  // orginal method name: print
    void print6(in double c);

  // orginal method name: print
    void print7(in acdk::lang::AObject c);

  // orginal method name: print
    void print8(in string str);
  void printQuoted(in string str);
  void println();

  // orginal method name: println
    void println1(in boolean c);

  // orginal method name: println
    void println2(in char c);

  // orginal method name: println
    void println3(in long c);

  // orginal method name: println
    void println9(in string str);

  // orginal method name: println
    void println5(in longlong c);

  // orginal method name: println
    void println6(in float c);

  // orginal method name: println
    void println7(in double c);

  // orginal method name: println
    void println8(in acdk::lang::AObject c);
};

interface PrintWriterCorFactory
{
  acdk::io::PrintWriter createCorPrintWriter(in acdk::io::Writer out_);
};

interface PipedWriter
: acdk::io::AbstractStorageWriter
{
  void connect(in acdk::io::PipedReader out_);
};

interface PipedWriterCorFactory
{
  acdk::io::PipedWriter createCorPipedWriter();

  // orginal method name: PipedWriter
    acdk::io::PipedWriter createCorPipedWriter1(in acdk::io::PipedReader out_);
};

interface PipedReader
: acdk::io::AbstractStorageReader
{
  void connect(in acdk::io::PipedWriter in_);
};

interface PipedReaderCorFactory
{
  acdk::io::PipedReader createCorPipedReader();

  // orginal method name: PipedReader
    acdk::io::PipedReader createCorPipedReader1(in acdk::io::PipedWriter in_);
};

interface TeeReader
: acdk::io::AbstractFilterReader
, acdk::io::FilterReader
{
};

interface TeeReaderCorFactory
{
  acdk::io::TeeReader createCorTeeReader(in acdk::io::Reader from, in acdk::io::Writer to);
};

interface AbstractObjectWriter
: acdk::io::AbstractFilterWriter
, acdk::io::ObjectWriter
{
  boolean isLabeled();
  boolean isNamed();
  boolean isReduced();
  boolean isTagged();
  boolean joinStrings();
  void resetLocalRefs();
  void writeBooleanElement(in boolean b);
  void writeCharElement(in char b);
  void writeDoubleElement(in double b);
  void writeFloatElement(in float b);
  void writeIntElement(in long b);
  void writeLongElement(in longlong b);
  void writeObjectId(in acdk::lang::AObject obj);
  void writeObjectLocalId(in long id);
  void writeShortElement(in short b);
  void writeStringElement(in string str);
  void writeTagEnd(in string key, in string value);

  // orginal method name: writeTagEnd
    void writeTagEnd1(in string key);
  void writeTagStart(in string key, in string value);

  // orginal method name: writeTagStart
    void writeTagStart1(in string key);
};

interface AbstractObjectWriterCorFactory
{
  acdk::io::AbstractObjectWriter createCorAbstractObjectWriter(in acdk::io::Writer out_, in long flags);

  // orginal method name: AbstractObjectWriter
    acdk::io::AbstractObjectWriter createCorAbstractObjectWriter1(in acdk::io::Writer out_);
};

interface AbstractObjectReader
: acdk::io::AbstractFilterReader
, acdk::io::ObjectReader
{
  boolean isLabeled();
  boolean isNamed();
  boolean isReduced();
  boolean isTagged();
  boolean joinStrings();
  boolean readBooleanElement();
  octet readByteElement();
  char readCharElement();
  double readDoubleElement();
  float readFloatElement();
  long readIntElement();
  longlong readLongElement();
  acdk::lang::Class readObjectId();
  long readObjectLocalId();
  short readShortElement();
  string readStringElement();

  // orginal method name: readTagEnd
    string readTagEnd1(in string key);
  string readTagEnd(in string key, in string expected);
  string readTagStart(in string key, in string expected);

  // orginal method name: readTagStart
    string readTagStart1(in string key);
};

interface AbstractObjectReaderCorFactory
{
  acdk::io::AbstractObjectReader createCorAbstractObjectReader(in acdk::io::Reader in_, in long flags);

  // orginal method name: AbstractObjectReader
    acdk::io::AbstractObjectReader createCorAbstractObjectReader1(in acdk::io::Reader in_);
};

interface BufferedWriter
: acdk::io::AbstractFilterWriter
{
};

interface BufferedWriterCorFactory
{
  acdk::io::BufferedWriter createCorBufferedWriter(in acdk::io::Writer writer, in long buffsize);

  // orginal method name: BufferedWriter
    acdk::io::BufferedWriter createCorBufferedWriter1(in acdk::io::Writer writer);
};

interface PushbackReader
: acdk::io::AbstractFilterReader
{
  void unread(in long b);

  // orginal method name: unread
    void unread1(in octetArray ch);
};

interface PushbackReaderCorFactory
{
  acdk::io::PushbackReader createCorPushbackReader(in acdk::io::Reader in_, in long buffsize);

  // orginal method name: PushbackReader
    acdk::io::PushbackReader createCorPushbackReader1(in acdk::io::Reader in_);
};

}; // module io
}; // module acdk
module acdk {
module util {
interface Map
{
  boolean containsKey(in acdk::lang::AObject key);
  boolean containsValue(in acdk::lang::AObject value);
  acdk::util::Set entrySet();
  acdk::lang::AObject get(in acdk::lang::AObject key);
  acdk::util::Set keySet();
  acdk::lang::AObject put(in acdk::lang::AObject key, in acdk::lang::AObject value);
  acdk::util::Collection values();
};

interface MapCorFactory
{
  acdk::lang::Class GetClass();
};

}; // module util
}; // module acdk
module acdk {
module lang {
module ref {
interface NotifyObjectEventListener
{
};

interface NotifyObjectEventListenerCorFactory
{
  acdk::lang::Class GetClass();
};

}; // module ref
}; // module lang
}; // module acdk
module acdk {
module util {
interface Collection
{
  boolean add(in acdk::lang::AObject o);
  boolean addAll(in acdk::util::Collection c);
  void clear();
  boolean contains(in acdk::lang::AObject o);
  boolean containsAll(in acdk::util::Collection c);
  boolean isEmpty();
  acdk::util::Iterator iterator();
  boolean remove(in acdk::lang::AObject o);
  boolean removeAll(in acdk::util::Collection c);
  boolean retainAll(in acdk::util::Collection c);
  long size();
  acdk::lang::AObjectArray toArray();

  // orginal method name: toArray
    acdk::lang::AObjectArray toArray1(in acdk::lang::AObjectArray array);
};

interface CollectionCorFactory
{
  acdk::lang::Class GetClass();
};

interface Set
{
};

interface SetCorFactory
{
  acdk::lang::Class GetClass();
};

interface SortedMap
: acdk::util::Map
{
  acdk::util::Comparator comparator();
  acdk::lang::AObject firstKey();
  acdk::util::SortedMap headMap(in acdk::lang::AObject key);
  acdk::lang::AObject lastKey();
  acdk::util::SortedMap subMap(in acdk::lang::AObject fromKey, in acdk::lang::AObject toKey);
  acdk::util::SortedMap tailMap(in acdk::lang::AObject fromKey);
};

interface Iterator
{
  acdk::lang::AObject element();
  boolean hasMoreElements();
  boolean hasNext();
  acdk::lang::AObject next();
  acdk::lang::AObject nextElement();
  void remove();
};

interface IteratorCorFactory
{
  acdk::lang::Class GetClass();
};

interface AbstractCollection
: acdk::lang::AObject
, acdk::util::Collection
{
};

interface TreeMapCollection
: acdk::util::AbstractCollection
, acdk::io::Serializable
{
};

interface TreeMapCollectionCorFactory
{
  acdk::util::TreeMapCollection createCorTreeMapCollection(in acdk::util::SortedMap map);
};

interface TreeMapIterator
: acdk::lang::AObject
, acdk::util::Iterator
{
};

interface TreeMapIteratorCorFactory
{
  acdk::util::TreeMapIterator createCorTreeMapIterator(in acdk::util::TreeMap map, in long type);
};

interface AbstractMap
: acdk::lang::AObject
, acdk::util::Map
{
};

interface AbstractMapCorFactory
{
  acdk::util::AbstractMap createCorAbstractMap();
};

interface MapEntry
{
  acdk::lang::AObject getKey();
  acdk::lang::AObject getValue();
  acdk::lang::AObject setValue(in acdk::lang::AObject value);
};

interface MapEntryCorFactory
{
  acdk::lang::Class GetClass();
};

interface TimeZone
: acdk::lang::AObject
, acdk::io::Serializable
, acdk::lang::Cloneable
{
  string getDisplayName();

  // orginal method name: getDisplayName
    string getDisplayName1(in acdk::util::Locale locale);

  // orginal method name: getDisplayName
    string getDisplayName2(in boolean b, in long st);

  // orginal method name: getDisplayName
    string getDisplayName3(in boolean b, in long st, in acdk::util::Locale locale);
  string getID();
  long getOffset(in long era, in long year, in long month, in long day, in long dayOfWeek, in long milliseconds);
  long getRawOffset();
  boolean inDaylightTime(in acdk::util::Date date);
  void setID(in string id);
  boolean useDaylightTime();
};

interface TimeZoneCorFactory
{
  attribute long LONG;
  attribute long SHORT;
  acdk::util::TimeZone createCorTimeZone();

  // orginal method name: TimeZone
    acdk::util::TimeZone createCorTimeZone1(in string id);
  stringArray getAvailableIDs(in long rawOffset);

  // orginal method name: getAvailableIDs
    stringArray getAvailableIDs1();
  acdk::util::TimeZone getDefault();
  acdk::util::TimeZone getTimeZone(in string id);
  acdk::util::TimeZoneArray get_timeZone();
  stringArrayArray get_zoneAlliases();
  void setDefault(in acdk::util::TimeZone zone);
};

interface SysDate
: acdk::lang::AObject
, acdk::io::Serializable
, acdk::lang::Cloneable
, acdk::lang::Comparable
{
  boolean after(in acdk::util::SysDate when);
  boolean before(in acdk::util::SysDate when);
  long getDate();
  long getDay();
  long getHours();
  long getMinutes();
  long getMonth();
  long getSeconds();
  long getSecs();
  longlong getTime();
  string getTimeStamp(in string format);

  // orginal method name: getTimeStamp
    string getTimeStamp1();
  long getTimezoneOffset();
  long getUSecs();
  long getYear();
  void setDate(in long date);
  void setDay(in long day);
  void setHours(in long hours);
  void setMinutes(in long minutes);
  void setMonth(in long month);
  void setSeconds(in long seconds);
  void setYear(in long year);
  string toGMTString();
  string toLocaleString();
};

interface SysDateCorFactory
{
  acdk::util::SysDate createCorSysDate();

  // orginal method name: SysDate
    acdk::util::SysDate createCorSysDate1(in longlong date);

  // orginal method name: SysDate
    acdk::util::SysDate createCorSysDate2(in string s, in string format);

  // orginal method name: SysDate
    acdk::util::SysDate createCorSysDate3(in string s);

  // orginal method name: SysDate
    acdk::util::SysDate createCorSysDate4(in long year, in long month, in long day);

  // orginal method name: SysDate
    acdk::util::SysDate createCorSysDate5(in long year, in long month, in long day, in long hour, in long min);

  // orginal method name: SysDate
    acdk::util::SysDate createCorSysDate6(in long year, in long month, in long day, in long hour, in long min, in long sec);

  // orginal method name: SysDate
    acdk::util::SysDate createCorSysDate7(in long sec, in long usec);
  longlong UTC(in long year, in long month, in long day, in long hour, in long min, in long sec);
  longlong getTickCount();
  longlong parse(in string s, in string format);

  // orginal method name: parse
    longlong parse1(in string s);
};

interface SynchronizedMap
: acdk::lang::AObject
, acdk::util::Map
, acdk::io::Serializable
{
};

interface SynchronizedMapCorFactory
{

  // orginal method name: SynchronizedMap
    acdk::util::SynchronizedMap createCorSynchronizedMap1(in acdk::util::Map map);
  acdk::util::SynchronizedMap createCorSynchronizedMap(in acdk::util::Map map, in acdk::lang::AObject sync);
};

interface SynchronizedCollection
: acdk::lang::AObject
, acdk::util::Collection
, acdk::io::Serializable
{
};

interface SynchronizedCollectionCorFactory
{

  // orginal method name: SynchronizedCollection
    acdk::util::SynchronizedCollection createCorSynchronizedCollection1(in acdk::util::Collection coll);
  acdk::util::SynchronizedCollection createCorSynchronizedCollection(in acdk::util::Collection coll, in acdk::lang::AObject sync);
};

interface SynchronizedIterator
: acdk::lang::AObject
, acdk::util::Iterator
{
};

interface SynchronizedIteratorCorFactory
{
  acdk::util::SynchronizedIterator createCorSynchronizedIterator(in acdk::util::Iterator it, in acdk::lang::AObject thelock);
};

interface SynchronizedMapEntry
: acdk::lang::AObject
, acdk::util::MapEntry
, acdk::io::Serializable
{
};

interface SynchronizedMapEntryCorFactory
{
  acdk::util::SynchronizedMapEntry createCorSynchronizedMapEntry(in acdk::util::SynchronizedMap map, in acdk::util::MapEntry entry);
};

interface SynchronizedSortedMap
: acdk::util::SynchronizedMap
, acdk::util::SortedMap
, acdk::io::Serializable
{
};

interface SynchronizedSortedMapCorFactory
{
  acdk::util::SynchronizedSortedMap createCorSynchronizedSortedMap(in acdk::util::SortedMap sm, in acdk::lang::AObject sync);

  // orginal method name: SynchronizedSortedMap
    acdk::util::SynchronizedSortedMap createCorSynchronizedSortedMap1(in acdk::util::SortedMap sm);
};

interface SynchronizedSet
: acdk::util::SynchronizedCollection
, acdk::util::Set
, acdk::io::Serializable
{
};

interface SynchronizedSetCorFactory
{
  acdk::util::SynchronizedSet createCorSynchronizedSet(in acdk::util::Set set, in acdk::lang::AObject sync);

  // orginal method name: SynchronizedSet
    acdk::util::SynchronizedSet createCorSynchronizedSet1(in acdk::util::Set set);
};

interface SynchronizedMapEntySet
: acdk::util::SynchronizedSet
, acdk::io::Serializable
{
};

interface SynchronizedMapEntySetCorFactory
{
  acdk::util::SynchronizedMapEntySet createCorSynchronizedMapEntySet(in acdk::util::SynchronizedMap map, in acdk::lang::AObject thelock);
};

interface List
: acdk::util::Collection
{
  acdk::lang::AObject get(in long index);
  long indexOf(in acdk::lang::AObject o);
  long lastIndexOf(in acdk::lang::AObject o);
  acdk::util::ListIterator listIterator(in long index);

  // orginal method name: listIterator
    acdk::util::ListIterator listIterator1();

  // orginal method name: remove
    boolean remove1(in acdk::lang::AObject o);
  acdk::lang::AObject set(in long index, in acdk::lang::AObject element);
  acdk::util::List subList(in long fromIndex, in long toIndex);
};

interface SortedSet
: acdk::util::Set
{
  acdk::util::Comparator comparator();
  acdk::lang::AObject first();
  acdk::util::SortedSet headSet(in acdk::lang::AObject toElement);
  acdk::lang::AObject last();
  acdk::util::SortedSet subSet(in acdk::lang::AObject fromElement, in acdk::lang::AObject toElement);
  acdk::util::SortedSet tailSet(in acdk::lang::AObject fromElement);
};

interface ListIterator
: acdk::util::Iterator
{
  void add(in acdk::lang::AObject o);
  boolean hasPrevious();
  long nextIndex();
  acdk::lang::AObject previous();
  long previousIndex();
  void set(in acdk::lang::AObject o);
};

interface SynchronizedMapEntySetIterator
: acdk::util::SynchronizedIterator
{
};

interface SynchronizedMapEntySetIteratorCorFactory
{
  acdk::util::SynchronizedMapEntySetIterator createCorSynchronizedMapEntySetIterator(in acdk::util::SynchronizedMap map, in acdk::util::Iterator it, in acdk::lang::AObject thelock);
};

interface StringTokenizer
: acdk::lang::AObject
, acdk::util::Iterator
{
  stringArray allToken();
  long countTokens();
  boolean hasMoreTokens();
  string nextToken();

  // orginal method name: nextToken
    string nextToken1(in string delim);
};

interface StringTokenizerCorFactory
{
  acdk::util::StringTokenizer createCorStringTokenizer(in string text, in string delimiter, in boolean delimiteraretoken);

  // orginal method name: StringTokenizer
    acdk::util::StringTokenizer createCorStringTokenizer1(in string text, in string delimiter);
};

interface AbstractSet
: acdk::util::AbstractCollection
, acdk::util::Set
{
};

interface SubTreeMap
: acdk::util::AbstractMap
, acdk::util::SortedMap
, acdk::io::Serializable
{
  void clear();
  boolean isEmpty();
  acdk::util::TreeMap parentTreeMap();
  void putAll(in acdk::util::Map map);
  acdk::lang::AObject remove(in acdk::lang::AObject key);
  long size();
};

interface SubTreeMapCorFactory
{
  acdk::util::SubTreeMap createCorSubTreeMap(in acdk::util::TreeMap map, in acdk::lang::AObject minKey, in acdk::lang::AObject maxKey);
};

interface SimpleTimeZone
: acdk::util::TimeZone
, acdk::io::Serializable
{

  // orginal method name: getRawOffset
    void getRawOffset1(in long rawOffset);
  void setEndRule(in long month, in long day, in long dayOfWeek, in long time);
  void setStartRule(in long month, in long day, in long dayOfWeek, in long time);
  void setStartYear(in long year);
};

interface SimpleTimeZoneCorFactory
{
  acdk::util::SimpleTimeZone createCorSimpleTimeZone();

  // orginal method name: SimpleTimeZone
    acdk::util::SimpleTimeZone createCorSimpleTimeZone1(in long rOs, in string id);

  // orginal method name: SimpleTimeZone
    acdk::util::SimpleTimeZone createCorSimpleTimeZone2(in long rOs, in string id, in long startMonth, in long startDayOfWeekInMonth, in long startDayOfWeek, in long startTime, in long endMonth, in long endDayOfWeekInMonth, in long endDayOfWeek, in long endTime);

  // orginal method name: SimpleTimeZone
    acdk::util::SimpleTimeZone createCorSimpleTimeZone3(in long rOs, in string id, in long startMonth, in long startDayOfWeekInMonth, in long startDayOfWeek, in long startTime, in long endMonth, in long endDayOfWeekInMonth, in long endDayOfWeek, in long endTime, in long dstSavings);
};

interface ResourceBundle
: acdk::lang::AObject
{
  acdk::util::Iterator getKeys();
  acdk::util::Locale getLocale();
  acdk::lang::AObject getObject(in string key);
  string getString(in string key);
  stringArray getStringArray(in string key);
};

interface ResourceBundleCorFactory
{
  acdk::util::ResourceBundle createCorResourceBundle();
  acdk::util::ResourceBundle getBundle(in string baseName);

  // orginal method name: getBundle
    acdk::util::ResourceBundle getBundle1(in string baseName, in acdk::util::Locale locale);
};

interface SynchronizedSortedSet
: acdk::util::SynchronizedSet
, acdk::util::SortedSet
, acdk::io::Serializable
{
};

interface SynchronizedSortedSetCorFactory
{
  acdk::util::SynchronizedSortedSet createCorSynchronizedSortedSet(in acdk::util::SortedSet ss, in acdk::lang::AObject sync);

  // orginal method name: SynchronizedSortedSet
    acdk::util::SynchronizedSortedSet createCorSynchronizedSortedSet1(in acdk::util::SortedSet ss);
};

interface SimpleListResourceBundle
: acdk::util::ResourceBundle
{
};

interface SimpleListResourceBundleCorFactory
{
  acdk::util::SimpleListResourceBundle createCorSimpleListResourceBundle();
};

interface Random
: acdk::lang::AObject
, acdk::io::Serializable
{
  boolean nextBoolean();
  void nextBytes(in charArray bytes);
  double nextDouble();
  float nextFloat();
  double nextGaussian();
  long nextInt();

  // orginal method name: nextInt
    long nextInt1(in long n);
  longlong nextLong();
  void setSeed(in longlong seed);
};

interface RandomCorFactory
{
  acdk::util::Random createCorRandom();

  // orginal method name: Random
    acdk::util::Random createCorRandom1(in longlong seed);
};

interface PropertyResourceBundle
: acdk::util::ResourceBundle
{
};

interface PropertyResourceBundleCorFactory
{
  acdk::util::PropertyResourceBundle createCorPropertyResourceBundle(in acdk::io::Reader in_);
};

interface PropertiesListener
: acdk::lang::Thread
{
  void reload();
};

interface PropertiesListenerCorFactory
{
  attribute boolean reconfigure;
  acdk::util::PropertiesListener createCorPropertiesListener(in string cfgFile, in acdk::util::Properties props);
};

interface HashMap
: acdk::util::AbstractMap
, acdk::lang::Cloneable
, acdk::io::Serializable
{
  long capacity();
  float loadFactor();
};

interface HashMapCorFactory
{

  // orginal method name: HashMap
    acdk::util::HashMap createCorHashMap1();

  // orginal method name: HashMap
    acdk::util::HashMap createCorHashMap2(in long initialCapacity);
  acdk::util::HashMap createCorHashMap(in long initialCapacity, in float initialLoadFactor);

  // orginal method name: HashMap
    acdk::util::HashMap createCorHashMap3(in acdk::util::Map other);
};

}; // module util
}; // module acdk
module acdk {
module lang {
interface Long
: acdk::lang::Number
, acdk::lang::Comparable
, acdk::lang::Cloneable
{
};

interface LongCorFactory
{
  attribute longlong MAX_VALUE;
  attribute longlong MIN_VALUE;

  // orginal method name: Long
    acdk::lang::Long createCorLong1(in longlong l);

  // orginal method name: Long
    acdk::lang::Long createCorLong2(in string str);
  acdk::lang::Long createCorLong(in long l);
  acdk::lang::Long decode(in string str);
  acdk::lang::Class getTYPE();
  longlong parseLong(in string s);

  // orginal method name: parseLong
    longlong parseLong1(in string s, in long radix);
  string toBinaryString(in long i);

  // orginal method name: toBinaryString
    string toBinaryString1(in longlong i);
  string toHexString(in long i);

  // orginal method name: toHexString
    string toHexString1(in longlong i);
  string toOctalString(in long i);

  // orginal method name: toOctalString
    string toOctalString1(in longlong i);

  // orginal method name: toString
    string toString1(in long i, in long radix);

  // orginal method name: toString
    string toString2(in longlong i);

  // orginal method name: toString
    string toString3(in longlong i, in long radix);
  acdk::lang::Long valueOf(in string str);

  // orginal method name: valueOf
    acdk::lang::Long valueOf1(in string str, in long radix);
};

interface Runtime
: acdk::lang::AObject
{
  void exit(in long status);
  longlong freeMemory();
  void gc();
  void load(in string filename);
  void loadLibrary(in string libname);
  void runFinalization();
  longlong totalMemory();
  void traceInstructions(in boolean on);
  void traceMethodCalls(in boolean on);
};

interface RuntimeCorFactory
{
  attribute long SignaledCtrlBreakCount;
  attribute long SignaledCtrlCCount;
  attribute boolean _traceMethodCalls;
  attribute acdk::lang::SignalEventHandlerArray eventHandler;

  // orginal method name: exec
    acdk::lang::Process exec3(in stringArray cmdarray, in string workdir);

  // orginal method name: exec
    acdk::lang::Process exec4(in stringArray cmdarray);

  // orginal method name: exec
    acdk::lang::Process exec5(in stringArray cmdarray, in stringArray envp, in string workdir);

  // orginal method name: exec
    acdk::lang::Process exec6(in stringArray cmdarray, in stringArray envp);

  // orginal method name: exec
    acdk::lang::Process exec1(in string command);

  // orginal method name: exec
    acdk::lang::Process exec2(in string command, in string workdir);
  acdk::lang::Process exec(in string command, in string workdir, in boolean expand);

  // orginal method name: exec
    acdk::lang::Process exec7(in string command, in stringArray envp, in string workdir);

  // orginal method name: exec
    acdk::lang::Process exec8(in string command, in stringArray envp);
  acdk::lang::SignalEventHandlerArray getEventHandlers();
  acdk::lang::Runtime getRuntime();
  void initSignals();
  void registerSignalEventHandler(in acdk::lang::SignalEventHandler handler);
  void unregisterAllEventHandler(in long signals);
  void unregisterSignalEventHandler(in acdk::lang::SignalEventHandler handler);
};

}; // module lang
}; // module acdk
module acdk {
module util {
interface BasicMapEntry
: acdk::lang::AObject
, acdk::util::MapEntry
, acdk::io::Serializable
{
  attribute acdk::lang::AObject _key;
  attribute acdk::lang::AObject _value;
};

interface BasicMapEntryCorFactory
{
  acdk::util::BasicMapEntry createCorBasicMapEntry(in acdk::lang::AObject newKey, in acdk::lang::AObject newValue);
};

interface WeakHashMap
: acdk::util::AbstractMap
{
  long capacity();
  float loadFactor();
};

interface WeakHashMapCorFactory
{

  // orginal method name: WeakHashMap
    acdk::util::WeakHashMap createCorWeakHashMap1();

  // orginal method name: WeakHashMap
    acdk::util::WeakHashMap createCorWeakHashMap2(in long initialCapacity);
  acdk::util::WeakHashMap createCorWeakHashMap(in long initialCapacity, in float initialLoadFactor);
};

interface Locale
: acdk::lang::AObject
, acdk::lang::Cloneable
, acdk::io::Serializable
{
  string getCountry();
  string getDisplayCountry();

  // orginal method name: getDisplayCountry
    string getDisplayCountry1(in acdk::util::Locale locale);
  string getDisplayLanguage();

  // orginal method name: getDisplayLanguage
    string getDisplayLanguage1(in acdk::util::Locale locale);

  // orginal method name: getDisplayName
    string getDisplayName1(in acdk::util::Locale locale);
  string getDisplayName();
  string getDisplayVariant();

  // orginal method name: getDisplayVariant
    string getDisplayVariant1(in acdk::util::Locale locale);
  string getISO3Country();
  string getISO3Languages();
  string getLanguage();
  string getVariant();
  void setDefault(in acdk::util::Locale newLocale);
};

interface LocaleCorFactory
{
  acdk::util::Locale createCorLocale();

  // orginal method name: Locale
    acdk::util::Locale createCorLocale1(in string language, in string country);

  // orginal method name: Locale
    acdk::util::Locale createCorLocale2(in string language, in string country, in string variant);
  acdk::util::LocaleArray getAvailableLocals();
  acdk::util::Locale getCANADA();
  acdk::util::Locale getCANADA_FRENCH();
  acdk::util::Locale getCHINA();
  acdk::util::Locale getCHINESE();
  acdk::util::Locale getDefault();
  acdk::util::Locale getENGLISH();
  acdk::util::Locale getFRANCE();
  acdk::util::Locale getFRENCH();
  acdk::util::Locale getGERMAN();
  acdk::util::Locale getGERMANY();
  stringArray getISOCountries();
  stringArray getISOLanguages();
  acdk::util::Locale getITALIAN();
  acdk::util::Locale getITALY();
  acdk::util::Locale getJAPAN();
  acdk::util::Locale getJAPANESE();
  acdk::util::Locale getKOREA();
  acdk::util::Locale getKOREAN();
  acdk::util::Locale getPRC();
  acdk::util::Locale getSIMPLIFIED_CHINESE();
  acdk::util::Locale getTAIWAN();
  acdk::util::Locale getTRADITIONAL_CHINESE();
  acdk::util::Locale getUK();
  acdk::util::Locale getUS();
};

interface ListResourceBundle
: acdk::util::ResourceBundle
{
  acdk::lang::AObjectArrayArray getContents();
};

interface ListResourceBundleCorFactory
{
  acdk::util::ListResourceBundle createCorListResourceBundle();
};

interface SynchronizedListIterator
: acdk::util::SynchronizedIterator
, acdk::util::ListIterator
{
};

interface SynchronizedListIteratorCorFactory
{
  acdk::util::SynchronizedListIterator createCorSynchronizedListIterator(in acdk::util::ListIterator lit, in acdk::lang::AObject sync);
};

interface AbstractList
: acdk::util::AbstractCollection
, acdk::util::List
{
};

interface LinkedListIterator
: acdk::lang::AObject
, acdk::util::ListIterator
, acdk::util::Iterator
{
};

interface LinkedListIteratorCorFactory
{
  acdk::util::LinkedListIterator createCorLinkedListIterator(in acdk::util::LinkedList list, in acdk::util::LinkedListEntry entry, in long index, in long size, in long modCount);
};

interface AbstractSequentialList
: acdk::util::AbstractList
{
};

interface LinkedList
: acdk::util::AbstractSequentialList
, acdk::io::Serializable
, acdk::lang::Cloneable
{
};

interface LinkedListCorFactory
{

  // orginal method name: LinkedList
    acdk::util::LinkedList createCorLinkedList1(in acdk::util::Collection coll);
  acdk::util::LinkedList createCorLinkedList();
};

interface LinkedListEntry
: acdk::lang::AObject
, acdk::io::Serializable
{
  attribute acdk::lang::AObject data;
  attribute acdk::util::LinkedListEntry next;
  attribute acdk::util::LinkedListEntry previous;
  acdk::lang::AObject remove();
};

interface LinkedListEntryCorFactory
{
  acdk::util::LinkedListEntry createCorLinkedListEntry(in acdk::lang::AObject o, in acdk::util::LinkedListEntry n, in acdk::util::LinkedListEntry p);

  // orginal method name: LinkedListEntry
    acdk::util::LinkedListEntry createCorLinkedListEntry1();
};

interface TreeMapSetIterator
: acdk::lang::AObject
, acdk::util::Iterator
{
};

interface TreeMapSetIteratorCorFactory
{
  acdk::util::TreeMapSetIterator createCorTreeMapSetIterator(in acdk::util::SortedMap map, in acdk::util::TreeMap treemap, in long type);
};

interface Dictionary
: acdk::lang::AObject
{
  acdk::util::Enumeration elements();
  acdk::util::Enumeration keys();
};

interface DictionaryCorFactory
{
  acdk::util::Dictionary createCorDictionary();
};

interface HashSet
: acdk::util::AbstractSet
, acdk::lang::Cloneable
, acdk::io::Serializable
{
};

interface HashSetCorFactory
{

  // orginal method name: HashSet
    acdk::util::HashSet createCorHashSet1();

  // orginal method name: HashSet
    acdk::util::HashSet createCorHashSet2(in long initialCapacity);
  acdk::util::HashSet createCorHashSet(in long initialCapacity, in float initialLoadFactor);
};

interface HashMapCollection
: acdk::util::AbstractCollection
, acdk::io::Serializable
{
};

interface HashMapCollectionCorFactory
{
  acdk::util::HashMapCollection createCorHashMapCollection(in acdk::util::HashMap hashMap);
};

interface HashMapSet
: acdk::util::AbstractSet
, acdk::io::Serializable
{
};

interface HashMapIterator
: acdk::lang::AObject
, acdk::util::Iterator
{
};

interface BucketNode
: acdk::util::BasicMapEntry
, acdk::io::Serializable
{
};

interface BucketNodeCorFactory
{
  acdk::util::BucketNode createCorBucketNode(in acdk::lang::AObject key, in acdk::lang::AObject value);
};

interface Properties
: acdk::util::HashMap
, acdk::io::Serializable
, acdk::lang::Cloneable
{
  void _getAllPropertieNames(in acdk::util::HashSet names);
  acdk::util::Properties defaults();
  string getProperty(in string key);

  // orginal method name: getProperty
    string getProperty1(in string key, in string defaultValue);
  void list(in acdk::io::PrintWriter out_);
  void load(in acdk::io::Reader in_);
  void mergeProperties(in acdk::util::Properties props);
  acdk::util::Iterator propertyNames();
  void save(in acdk::io::Writer out_, in string header);
  acdk::lang::AObject setProperty(in string key, in string value);
  void store(in acdk::io::Writer out_, in string header);
};

interface PropertiesCorFactory
{
  acdk::util::Properties createCorProperties(in acdk::util::Properties def);

  // orginal method name: Properties
    acdk::util::Properties createCorProperties1();
};

interface Calendar
: acdk::lang::AObject
, acdk::io::Serializable
, acdk::lang::Cloneable
{
  void add(in long field, in long amount);
  boolean after(in acdk::lang::AObject obj);
  boolean before(in acdk::lang::AObject obj);
  void clear();

  // orginal method name: clear
    void clear1(in long field);
  void complete();
  void computeFields();
  void computeTime();
  long get(in long field);
  long getActualMaximum(in long field);
  long getActualMinimum(in long field);
  long getFirstDayOfWeek();
  long getGreatestMinimum(in long field);
  long getLeastMaximum(in long field);
  boolean getLenient();
  long getMaximum(in long max);
  long getMinimalDaysInFirstWeek();
  long getMinimum(in long field);
  acdk::util::Date getTime();
  longlong getTimeInMillis();
  acdk::util::TimeZone getTimeZone();
  long internalGet(in long field);
  void internalSet(in long field, in long value);
  boolean isLenient();
  boolean isSet(in long field);
  void roll(in long field, in boolean up);

  // orginal method name: roll
    void roll1(in long field, in long amount);
  void set(in long field, in long value);

  // orginal method name: set
    void set1(in long year, in long month, in long date);

  // orginal method name: set
    void set4(in long year, in long month, in long date, in long hour, in long minute, in long second);

  // orginal method name: set
    void set2(in long year, in long month, in long date, in long hour, in long minute);

  // orginal method name: set
    void set3(in long year, in long month, in long date, in long hour, in long minute, in long second, in long millisecond);
  void setFirstDayOfWeek(in long day);
  void setLenient(in boolean lenient);
  void setMinimalDaysInFirstWeek(in long value);
  void setTime(in acdk::util::Date date);
  void setTimeInMillis(in longlong millis);
  void setTimeZone(in acdk::util::TimeZone zone);
};

interface CalendarCorFactory
{
  attribute long AM;
  attribute long AM_PM;
  attribute long APRIL;
  attribute long AUGUST;
  attribute long DATE;
  attribute long DAY_OF_MONTH;
  attribute long DAY_OF_WEEK;
  attribute long DAY_OF_WEEK_IN_MONTH;
  attribute long DAY_OF_YEAR;
  attribute long DECEMBER;
  attribute long DST_OFFSET;
  attribute long ERA;
  attribute long FEBRUARY;
  attribute long FIELD_COUNT;
  attribute long FRIDAY;
  attribute long HOUR;
  attribute long HOUR_OF_DAY;
  attribute long JANUARY;
  attribute long JULY;
  attribute long JUNE;
  attribute long MARCH;
  attribute long MAY;
  attribute long MILLISECOND;
  attribute long MINUTE;
  attribute long MONDAY;
  attribute long MONTH;
  attribute long NOVEMBER;
  attribute long OCTOBER;
  attribute long PM;
  attribute long SATURDAY;
  attribute long SECOND;
  attribute long SEPTEMBER;
  attribute long SUNDAY;
  attribute long THURSDAY;
  attribute long TUESDAY;
  attribute long UNDECIMBER;
  attribute long WEDNESDAY;
  attribute long WEEK_OF_MONTH;
  attribute long WEEK_OF_YEAR;
  attribute long YEAR;
  attribute long ZONE_OFFSET;
  acdk::util::LocaleArray getAvailableLocales();
  acdk::util::Calendar getInstance();

  // orginal method name: getInstance
    acdk::util::Calendar getInstance1(in acdk::util::TimeZone zone);

  // orginal method name: getInstance
    acdk::util::Calendar getInstance2(in acdk::util::Locale locale);

  // orginal method name: getInstance
    acdk::util::Calendar getInstance3(in acdk::util::TimeZone zone, in acdk::util::Locale locale);
  acdk::util::Hashtable get_cachedLocaleData();
};

interface Enumeration
{
  boolean hasMoreElements();
  boolean hasNext();
  acdk::lang::AObject next();
  acdk::lang::AObject nextElement();
};

interface EnumerationCorFactory
{
  acdk::lang::Class GetClass();
};

interface DoubleIterator
: acdk::lang::AObject
, acdk::util::Iterator
{
};

interface DoubleIteratorCorFactory
{
  acdk::util::DoubleIterator createCorDoubleIterator(in acdk::util::Iterator it1, in acdk::util::Iterator it2);
};

interface Hashtable
: acdk::util::Dictionary
, acdk::util::Map
, acdk::io::Serializable
, acdk::lang::Cloneable
{
  long capacity();
  float loadFactor();
};

interface HashtableCorFactory
{
  acdk::util::Hashtable createCorHashtable();

  // orginal method name: Hashtable
    acdk::util::Hashtable createCorHashtable1(in long initialCapacity, in float loadFactor);

  // orginal method name: Hashtable
    acdk::util::Hashtable createCorHashtable2(in long initialCapacity);

  // orginal method name: Hashtable
    acdk::util::Hashtable createCorHashtable3(in acdk::util::Map t);
};

interface Date
: acdk::lang::AObject
, acdk::io::Serializable
, acdk::lang::Cloneable
, acdk::lang::Comparable
{
  boolean after(in acdk::util::Date when);
  boolean before(in acdk::util::Date when);
  long getSecs();
  longlong getTime();
  string getTimeStamp();
  long getUSecs();
  long getYear();
};

interface DateCorFactory
{

  // orginal method name: Date
    acdk::util::Date createCorDate3(in long sec, in long usec);

  // orginal method name: Date
    acdk::util::Date createCorDate4(in long year, in long month, in long day);

  // orginal method name: Date
    acdk::util::Date createCorDate5(in long year, in long month, in long day, in long hour, in long min);

  // orginal method name: Date
    acdk::util::Date createCorDate6(in long year, in long month, in long day, in long hour, in long min, in long sec);

  // orginal method name: Date
    acdk::util::Date createCorDate1(in longlong date);

  // orginal method name: Date
    acdk::util::Date createCorDate2(in string s);
  acdk::util::Date createCorDate();
  longlong getTickCount();
};

}; // module util
}; // module acdk
module acdk {
module lang {
interface Process
: acdk::lang::AObject
{
  void destroy();
  long exitValue();
  acdk::io::Reader getErrorStream();
  acdk::io::Writer getInputStream();
  acdk::io::Reader getOutputStream();
  boolean isRunning();
  long waitFor();
};

interface ProcessCorFactory
{
  long getProcessId();
};

}; // module lang
}; // module acdk
module acdk {
module util {
interface Comparator
{
  long compare(in acdk::lang::AObject o1, in acdk::lang::AObject o2);
};

interface ComparatorCorFactory
{
  acdk::lang::Class GetClass();
};

interface IteratorEnumeration
: acdk::lang::AObject
, acdk::util::Enumeration
{
};

interface IteratorEnumerationCorFactory
{
  acdk::util::IteratorEnumeration createCorIteratorEnumeration(in acdk::util::Iterator it);
};

interface SynchronizedList
: acdk::util::SynchronizedCollection
, acdk::util::List
, acdk::io::Serializable
{
};

interface SynchronizedListCorFactory
{
  acdk::util::SynchronizedList createCorSynchronizedList(in acdk::util::List list, in acdk::lang::AObject sync);

  // orginal method name: SynchronizedList
    acdk::util::SynchronizedList createCorSynchronizedList1(in acdk::util::List list);
};

interface GregorianCalendar
: acdk::util::Calendar
{
  acdk::util::Date getGregorianChange(in acdk::util::Date date);
  boolean isLeapYear(in long year);
  void setGregorianChange(in acdk::util::Date date);
};

interface GregorianCalendarCorFactory
{
  attribute long AD;
  attribute long BC;
  acdk::util::GregorianCalendar createCorGregorianCalendar();

  // orginal method name: GregorianCalendar
    acdk::util::GregorianCalendar createCorGregorianCalendar1(in acdk::util::TimeZone zone);

  // orginal method name: GregorianCalendar
    acdk::util::GregorianCalendar createCorGregorianCalendar2(in acdk::util::Locale locale);

  // orginal method name: GregorianCalendar
    acdk::util::GregorianCalendar createCorGregorianCalendar3(in acdk::util::TimeZone zone, in acdk::util::Locale locale);

  // orginal method name: GregorianCalendar
    acdk::util::GregorianCalendar createCorGregorianCalendar4(in long year, in long month, in long day);

  // orginal method name: GregorianCalendar
    acdk::util::GregorianCalendar createCorGregorianCalendar5(in long year, in long month, in long day, in long hour, in long minute);

  // orginal method name: GregorianCalendar
    acdk::util::GregorianCalendar createCorGregorianCalendar6(in long year, in long month, in long day, in long hour, in long minute, in long second);
};

interface Bucket
: acdk::lang::AObject
, acdk::io::Serializable
{
  acdk::util::MapEntry add(in acdk::util::BucketNode newNode);
  boolean containsValue(in acdk::lang::AObject value);
  acdk::util::BucketNode first();
  acdk::util::BucketNode getEntryByKey(in acdk::lang::AObject key);
  acdk::lang::AObject getValueByKey(in acdk::lang::AObject key);
  acdk::lang::AObject removeByKey(in acdk::lang::AObject key);
};

interface BucketCorFactory
{
  acdk::util::Bucket createCorBucket();
};

interface HashMapKey
: acdk::util::BucketNode
, acdk::io::Serializable
{
};

interface HashMapKeyCorFactory
{
  acdk::util::HashMapKey createCorHashMapKey(in acdk::lang::AObject key, in acdk::lang::AObject value);
};

interface BitSet
: acdk::lang::AObject
, acdk::lang::Cloneable
, acdk::io::Serializable
{
  void andNot(in acdk::util::BitSet set);
  void bit_and(in acdk::util::BitSet set);
  void bit_or(in acdk::util::BitSet set);
  void bit_xor(in acdk::util::BitSet set);
  void clear(in long bit);
  boolean get(in long bitIndex);
  charArray getBits();
  long length();
  void set(in long bitIndex);
  long size();
};

interface BitSetCorFactory
{
  acdk::util::BitSet createCorBitSet();

  // orginal method name: BitSet
    acdk::util::BitSet createCorBitSet1(in long nBits);
};

interface RedBlackNode
: acdk::util::BasicMapEntry
, acdk::io::Serializable
{
  attribute long _color;
  attribute acdk::util::RedBlackNode _left;
  attribute acdk::util::RedBlackNode _parent;
  attribute acdk::util::RedBlackNode _right;
};

interface RedBlackNodeCorFactory
{
  attribute acdk::util::RedBlackNode _nilNode;
  acdk::util::RedBlackNode createCorRedBlackNode(in acdk::lang::AObject key, in acdk::lang::AObject value);
  acdk::util::RedBlackNode nilNode();
};

interface ArraysImpl
: acdk::lang::AObject
{
};

interface ArraysImplCorFactory
{
  void _mergeSort(in acdk::lang::AObjectArray array, in acdk::util::Comparator comp);
  acdk::util::List asList(in acdk::lang::AObjectArray a);
  long binarySearch(in acdk::lang::AObjectArray a, in acdk::lang::AObject key, in acdk::util::Comparator comp);

  // orginal method name: binarySearch
    long binarySearch1(in acdk::lang::AObjectArray a, in acdk::lang::AObject key);

  // orginal method name: equals
    boolean equals1(in acdk::lang::AObjectArray a1, in acdk::lang::AObjectArray a2);
  void fill(in acdk::lang::AObjectArray array, in acdk::lang::AObject val);

  // orginal method name: fill
    void fill1(in acdk::lang::AObjectArray array, in long fromIndex, in long toIndex, in acdk::lang::AObject val);
  acdk::lang::AObjectArray removeElement(in acdk::lang::AObjectArray array, in long idx);
  acdk::lang::AObjectArray removeFirstElement(in acdk::lang::AObjectArray array, in acdk::lang::AObject obj);
  void sort(in acdk::lang::AObjectArray array, in acdk::util::Comparator comp);

  // orginal method name: sort
    void sort1(in acdk::lang::AObjectArray array);
  void stripElement(in acdk::lang::AObjectArray array, in long idx);
};

interface ArrayList
: acdk::util::AbstractList
, acdk::lang::Cloneable
, acdk::io::Serializable
{
  attribute acdk::lang::AObjectArray _data;
  attribute long _size;
  void ensureCapacity(in long mincap);
};

interface ArrayListCorFactory
{

  // orginal method name: ArrayList
    acdk::util::ArrayList createCorArrayList1();

  // orginal method name: ArrayList
    acdk::util::ArrayList createCorArrayList2(in acdk::util::Collection other);
  acdk::util::ArrayList createCorArrayList(in long capacity);
};

interface TreeMapSet
: acdk::util::AbstractSet
, acdk::io::Serializable
{
};

interface TreeMapSetCorFactory
{
  acdk::util::TreeMapSet createCorTreeMapSet(in acdk::util::SortedMap sortedmap, in acdk::util::TreeMap treeMap, in long type);
};

interface SubLinkedList
: acdk::util::AbstractSequentialList
, acdk::io::Serializable
{
};

interface SubLinkedListCorFactory
{
  acdk::util::SubLinkedList createCorSubLinkedList(in acdk::util::LinkedList list, in acdk::util::LinkedListEntry head, in acdk::util::LinkedListEntry tail, in long size);
};

interface AbstractMapCachedValuesCollectionIterator
: acdk::lang::AObject
, acdk::util::Iterator
{
};

interface AbstractMapCachedValuesCollectionIteratorCorFactory
{
  acdk::util::AbstractMapCachedValuesCollectionIterator createCorAbstractMapCachedValuesCollectionIterator(in acdk::util::AbstractMap map);
};

interface AbstractMapCachedValuesCollection
: acdk::util::AbstractCollection
{
  acdk::util::AbstractMap theMap();
};

interface AbstractMapCachedValuesCollectionCorFactory
{
  acdk::util::AbstractMapCachedValuesCollection createCorAbstractMapCachedValuesCollection(in acdk::util::AbstractMap map);
};

interface AbstractMapCachedKeySetIterator
: acdk::lang::AObject
, acdk::util::Iterator
{
};

interface AbstractMapCachedKeySetIteratorCorFactory
{
  acdk::util::AbstractMapCachedKeySetIterator createCorAbstractMapCachedKeySetIterator(in acdk::util::AbstractMap map);
};

interface AbstractMapCachedKeySet
: acdk::util::AbstractSet
{
};

interface AbstractMapCachedKeySetCorFactory
{
  acdk::util::AbstractMapCachedKeySet createCorAbstractMapCachedKeySet(in acdk::util::AbstractMap map);
};

interface TreeMap
: acdk::util::AbstractMap
, acdk::util::SortedMap
, acdk::lang::Cloneable
, acdk::io::Serializable
{
  void clear();
  boolean isEmpty();
  void putAll(in acdk::util::Map map);
  acdk::lang::AObject remove(in acdk::lang::AObject key);
  long size();
};

interface TreeMapCorFactory
{

  // orginal method name: TreeMap
    acdk::util::TreeMap createCorTreeMap1();

  // orginal method name: TreeMap
    acdk::util::TreeMap createCorTreeMap2(in acdk::util::Map map);
  acdk::util::TreeMap createCorTreeMap(in acdk::util::Comparator comp);

  // orginal method name: TreeMap
    acdk::util::TreeMap createCorTreeMap3(in acdk::util::SortedMap sortedMap);
};

interface AbstractListSubListListIterator
: acdk::lang::AObject
, acdk::util::ListIterator
{
};

interface AbstractListSubListListIteratorCorFactory
{
  acdk::util::AbstractListSubListListIterator createCorAbstractListSubListListIterator(in acdk::util::AbstractListSubList list, in long index, in long offset);
};

interface AbstractListSubList
: acdk::util::AbstractList
{
};

interface AbstractListSubListCorFactory
{
  acdk::util::AbstractListSubList createCorAbstractListSubList(in acdk::util::AbstractList list, in long fromIndex, in long toIndex);
};

interface AbstractListListIterator
: acdk::lang::AObject
, acdk::util::ListIterator
{
};

interface AbstractListListIteratorCorFactory
{
  acdk::util::AbstractListListIterator createCorAbstractListListIterator(in acdk::util::AbstractList list, in long index);
};

interface AbstractListIterator
: acdk::lang::AObject
, acdk::util::Iterator
{
};

interface AbstractListIteratorCorFactory
{
  acdk::util::AbstractListIterator createCorAbstractListIterator(in acdk::util::AbstractList list);
};

interface Vector
: acdk::util::AbstractList
, acdk::lang::Cloneable
, acdk::io::Serializable
{
  void addElement(in acdk::lang::AObject obj);
  long capacity();
  void copyInto(in acdk::lang::AObjectArray array);
  void ensureCapacity(in long minCapacity);
  acdk::lang::AObject firstElement();
  void insertElementAt(in acdk::lang::AObject obj, in long index);
  acdk::lang::AObject lastElement();
  void removeAllElements();
  boolean removeElement(in acdk::lang::AObject obj);
  void removeElementAt(in long index);
  void setElementAt(in acdk::lang::AObject obj, in long index);
  void setSize(in long newSize);
  void trimToSize();
};

interface VectorCorFactory
{

  // orginal method name: Vector
    acdk::util::Vector createCorVector1();

  // orginal method name: Vector
    acdk::util::Vector createCorVector2(in long initcapac);
  acdk::util::Vector createCorVector(in long initcapac, in long capacInc);

  // orginal method name: Vector
    acdk::util::Vector createCorVector3(in acdk::util::Collection col);
};

interface TreeSet
: acdk::util::AbstractSet
, acdk::util::SortedSet
, acdk::lang::Cloneable
, acdk::io::Serializable
{
};

interface TreeSetCorFactory
{

  // orginal method name: TreeSet
    acdk::util::TreeSet createCorTreeSet1();

  // orginal method name: TreeSet
    acdk::util::TreeSet createCorTreeSet2(in acdk::util::Collection coll);
  acdk::util::TreeSet createCorTreeSet(in acdk::util::Comparator comp);

  // orginal method name: TreeSet
    acdk::util::TreeSet createCorTreeSet3(in acdk::util::SortedSet sortedSet);

  // orginal method name: TreeSet
    acdk::util::TreeSet createCorTreeSet4(in acdk::util::SortedMap map);
};

}; // module util
}; // module acdk
module acdk {
module lang {
module ref {
interface Reference
: acdk::lang::AObject
, acdk::lang::ref::NotifyObjectEventListener
{
  void clear();
  boolean enqueue();
  acdk::lang::AObject get();
  boolean isDequeued();
  boolean isEnqueued();
};

interface ReferenceCorFactory
{
  acdk::lang::ref::Reference createCorReference(in acdk::lang::AObject ref, in acdk::lang::ref::ReferenceQueue queue);

  // orginal method name: Reference
    acdk::lang::ref::Reference createCorReference1(in acdk::lang::AObject ref);
};

interface SoftReference
: acdk::lang::ref::Reference
{
};

interface SoftReferenceCorFactory
{
  acdk::lang::ref::SoftReference createCorSoftReference(in acdk::lang::AObject ref, in acdk::lang::ref::ReferenceQueue queue);

  // orginal method name: SoftReference
    acdk::lang::ref::SoftReference createCorSoftReference1(in acdk::lang::AObject ref);
};

interface ReferenceQueue
: acdk::lang::AObject
{
  void enqueue(in acdk::lang::ref::Reference ref);
  acdk::lang::ref::Reference poll();
  acdk::lang::ref::Reference remove(in longlong timeout);

  // orginal method name: remove
    acdk::lang::ref::Reference remove1();
};

interface ReferenceQueueCorFactory
{
  acdk::lang::ref::ReferenceQueue createCorReferenceQueue();
};

interface WeakReference
: acdk::lang::ref::Reference
{
};

interface WeakReferenceCorFactory
{
  acdk::lang::ref::WeakReference createCorWeakReference(in acdk::lang::AObject ref, in acdk::lang::ref::ReferenceQueue queue);

  // orginal method name: WeakReference
    acdk::lang::ref::WeakReference createCorWeakReference1(in acdk::lang::AObject ref);
};

interface PhantomReference
: acdk::lang::ref::Reference
{
};

interface PhantomReferenceCorFactory
{
  acdk::lang::ref::PhantomReference createCorPhantomReference(in acdk::lang::AObject ref, in acdk::lang::ref::ReferenceQueue queue);

  // orginal method name: PhantomReference
    acdk::lang::ref::PhantomReference createCorPhantomReference1(in acdk::lang::AObject ref);
};

}; // module ref
}; // module lang
}; // module acdk
module acdk {
module util {
interface WeakHashMapKey
: acdk::lang::ref::WeakReference
{
};

interface WeakHashMapKeyCorFactory
{
  acdk::util::WeakHashMapKey createCorWeakHashMapKey(in acdk::lang::AObject k);

  // orginal method name: WeakHashMapKey
    acdk::util::WeakHashMapKey createCorWeakHashMapKey1(in acdk::lang::AObject k, in acdk::lang::ref::ReferenceQueue refqueue);
};

}; // module util
}; // module acdk
module acdk {
module lang {
module reflect {
interface AccessibleObject
: acdk::lang::AObject
{
  boolean isAccessible();
  void setAccessible(in boolean flag);
};

interface AccessibleObjectCorFactory
{
  acdk::lang::reflect::AccessibleObject createCorAccessibleObject();
};

interface Parameter
: acdk::lang::reflect::AccessibleObject
, acdk::lang::dmi::MetaObject
{
  acdk::lang::Class getType();
  string toIndentifier();
};

interface Member
{
  acdk::lang::Class getDeclaringClass();
  long getModifiers();
  string getName();
};

interface MemberCorFactory
{
  acdk::lang::Class GetClass();
};

interface Method
: acdk::lang::reflect::AccessibleObject
, acdk::lang::reflect::Member
, acdk::lang::dmi::MetaObject
{
  string getAlternativeName();
  acdk::lang::ClassArray getExceptionTypes();
  acdk::lang::reflect::Parameter getParameter(in long idx);

  // orginal method name: getParameter
    acdk::lang::reflect::Parameter getParameter1(in string idx);
  long getParameterCount();
  acdk::lang::ClassArray getParameterTypes();
  acdk::lang::reflect::ParameterArray getParameters();
  acdk::lang::Class getReturnType();
  acdk::lang::AObject invoke(in acdk::lang::AObject obj, in acdk::lang::AObjectArray args);
  string toIndentifier();
};

}; // module reflect
}; // module lang
}; // module acdk
module acdk {
module lang {
interface Package
: acdk::lang::AObject
{
  string getImplementationTitle();
  string getImplementationVendor();
  string getImplementationVersion();
  string getName();
  string getSpecificationTitle();
  string getSpecificationVendor();
  string getSpecificationVersion();
  boolean isCompatibleWith(in string desired);
  boolean isSealed();
};

interface PackageCorFactory
{
  acdk::lang::Package getPackage(in string name);
  acdk::lang::PackageArray getPackages();
};

}; // module lang
}; // module acdk
module acdk {
module lang {
module reflect {
interface Field
: acdk::lang::reflect::AccessibleObject
, acdk::lang::dmi::MetaObject
{
  acdk::lang::AObject get(in acdk::lang::AObject obj);

  // orginal method name: get
    acdk::lang::AObject get1();
  boolean getBoolean(in acdk::lang::AObject obj);
  char getChar(in acdk::lang::AObject obj);
  acdk::lang::Class getDeclaringClass();
  double getDouble(in acdk::lang::AObject obj);
  float getFloat(in acdk::lang::AObject obj);
  long getInt(in acdk::lang::AObject obj);
  longlong getLong(in acdk::lang::AObject obj);
  long getModifiers();
  string getName();
  short getShort(in acdk::lang::AObject obj);
  acdk::lang::Class getType();
  void set(in acdk::lang::AObject obj, in acdk::lang::AObject value);
  void setBoolean(in acdk::lang::AObject obj, in boolean v);
  void setChar(in acdk::lang::AObject obj, in char c);
  void setDouble(in acdk::lang::AObject obj, in double d);
  void setFloat(in acdk::lang::AObject obj, in float f);
  void setInt(in acdk::lang::AObject obj, in long i);
  void setLong(in acdk::lang::AObject obj, in longlong l);
  void setShort(in acdk::lang::AObject obj, in short s);
};

interface Constructor
: acdk::lang::reflect::AccessibleObject
, acdk::lang::reflect::Member
, acdk::lang::dmi::MetaObject
{
  acdk::lang::ClassArray getExceptionTypes();
  acdk::lang::reflect::Parameter getParameter(in long idx);

  // orginal method name: getParameter
    acdk::lang::reflect::Parameter getParameter1(in string idx);
  long getParameterCount();
  acdk::lang::ClassArray getParameterTypes();
  acdk::lang::reflect::ParameterArray getParameters();
  acdk::lang::AObject newInstance(in acdk::lang::AObjectArray initargs);
};

interface Unit
: acdk::lang::reflect::AccessibleObject
, acdk::lang::dmi::MetaObject
{
  acdk::lang::reflect::UnitArray getChilds(in boolean recursive);

  // orginal method name: getChilds
    acdk::lang::reflect::UnitArray getChilds1();
  acdk::lang::ClassArray getClasses();
  acdk::lang::reflect::Unit getParent();
  string toIndentifier();
};

interface UnitCorFactory
{
  acdk::lang::reflect::Unit getUnit(in string unitname);
  acdk::lang::reflect::UnitArray getUnits();
};

}; // module reflect
}; // module lang
}; // module acdk
module acdk {
module util {
module logging {
interface Formatter
{
  void configure(in string propnameprefix, in acdk::util::Properties props);
  string format(in acdk::util::logging::LogRecord rec);

  // orginal method name: format
    void format1(in acdk::util::logging::LogRecord rec, in acdk::io::Writer out_);
};

interface FormatterCorFactory
{
  acdk::lang::Class GetClass();
};

interface SimpleFormatter
: acdk::lang::AObject
, acdk::util::logging::Formatter
{
};

interface SimpleFormatterCorFactory
{
  acdk::util::logging::SimpleFormatter createCorSimpleFormatter();
};

interface LogRecord
: acdk::lang::AObject
{
  attribute string catName;
  attribute string file;
  attribute long level;
  attribute long line;
  attribute string message;
  attribute acdk::lang::AObjectArray namedParameters;
  attribute acdk::lang::AObjectArray parameters;
  attribute long processId;
  attribute long threadId;
  attribute longlong timeStamp;
};

interface LogRecordCorFactory
{
  acdk::util::logging::LogRecord createCorLogRecord(in long l, in string cat, in string msg);
};

interface LogManager
: acdk::lang::AObject
{
};

interface LogManagerCorFactory
{
  attribute long MinLevel;
  attribute long Threshold;
  void deregisterLogger(in acdk::util::logging::Logger logger);
  boolean doLog(in long level);
  acdk::util::logging::Logger getLogger(in string name);
  void init_configure(inout acdk::util::logging::Logger rootlogger);
  stringArray parseCommandLine(in stringArray args);
  void registerLogger(in acdk::util::logging::Logger logger);
};

interface Logger
: acdk::lang::AObject
{
  void addConsumer(in acdk::util::logging::LogConsumer cons);
  long getLevel();
  string getName();
  void log(in long level, in string text);

  // orginal method name: log
    void log1(in acdk::util::logging::LogRecord log);
  void setLevel(in long level);
  void setName(in string newname);
};

interface LoggerCorFactory
{
  acdk::util::logging::Logger createCorLogger(in string name);

  // orginal method name: Logger
    acdk::util::logging::Logger createCorLogger1(in string name, in long level);
};

interface LogConsumer
{
  void configure(in string propnameprefix, in acdk::util::Properties props);
  void publish(in acdk::util::logging::LogRecord rec);
};

interface LogConsumerCorFactory
{
  acdk::lang::Class GetClass();
};

interface StdFormatter
: acdk::lang::AObject
, acdk::util::logging::Formatter
{
};

interface StdFormatterCorFactory
{
  acdk::util::logging::StdFormatter createCorStdFormatter();
};

interface AbstractLogConsumer
: acdk::lang::AObject
, acdk::util::logging::LogConsumer
{
  acdk::util::logging::Formatter getFormatter();
  void setFormatter(in acdk::util::logging::Formatter formatter);
  boolean wantPublish(in acdk::util::logging::LogRecord rec);
};

interface AbstractLogConsumerCorFactory
{
  acdk::util::logging::AbstractLogConsumer createCorAbstractLogConsumer(in acdk::util::logging::Formatter formatter, in long minll, in long maxll);

  // orginal method name: AbstractLogConsumer
    acdk::util::logging::AbstractLogConsumer createCorAbstractLogConsumer1();

  // orginal method name: AbstractLogConsumer
    acdk::util::logging::AbstractLogConsumer createCorAbstractLogConsumer2(in acdk::util::logging::Formatter formatter);

  // orginal method name: AbstractLogConsumer
    acdk::util::logging::AbstractLogConsumer createCorAbstractLogConsumer3(in acdk::util::logging::Formatter formatter, in long minll);
};

interface ConsoleConsumer
: acdk::util::logging::AbstractLogConsumer
{
};

interface ConsoleConsumerCorFactory
{
  acdk::util::logging::ConsoleConsumer createCorConsoleConsumer(in acdk::util::logging::Formatter formatter, in long minll, in long maxll);

  // orginal method name: ConsoleConsumer
    acdk::util::logging::ConsoleConsumer createCorConsoleConsumer1();

  // orginal method name: ConsoleConsumer
    acdk::util::logging::ConsoleConsumer createCorConsoleConsumer2(in acdk::util::logging::Formatter formatter);

  // orginal method name: ConsoleConsumer
    acdk::util::logging::ConsoleConsumer createCorConsoleConsumer3(in acdk::util::logging::Formatter formatter, in long minll);
};

interface FileConsumer
: acdk::util::logging::AbstractLogConsumer
{
};

interface FileConsumerCorFactory
{
  acdk::util::logging::FileConsumer createCorFileConsumer(in acdk::util::logging::Formatter formatter, in long minll, in long maxll);

  // orginal method name: FileConsumer
    acdk::util::logging::FileConsumer createCorFileConsumer1();

  // orginal method name: FileConsumer
    acdk::util::logging::FileConsumer createCorFileConsumer2(in acdk::util::logging::Formatter formatter);

  // orginal method name: FileConsumer
    acdk::util::logging::FileConsumer createCorFileConsumer3(in acdk::util::logging::Formatter formatter, in long minll);
};

}; // module logging
}; // module util
}; // module acdk
#endif // acdk_core_idl
