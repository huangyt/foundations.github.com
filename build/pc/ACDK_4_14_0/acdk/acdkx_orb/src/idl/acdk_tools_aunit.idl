// generated by acdkorbidl

#ifndef acdk_tools_aunit_idl
#define acdk_tools_aunit_idl

#include <acdk_base.idl>
module acdk{
  module lang{
    interface Class;
#ifndef acdk_lang_Class
#define acdk_lang_Class
    typedef sequence<Class> ClassArray;
    typedef sequence<ClassArray> ClassArrayArray;
#endif // acdk_lang_Class
  }; // module acdk
}; // module lang
module acdk{
  module tools{
    module aunit{
      interface DmiTestClass;
#ifndef acdk_tools_aunit_DmiTestClass
#define acdk_tools_aunit_DmiTestClass
      typedef sequence<DmiTestClass> DmiTestClassArray;
      typedef sequence<DmiTestClassArray> DmiTestClassArrayArray;
#endif // acdk_tools_aunit_DmiTestClass
    }; // module acdk
  }; // module tools
}; // module aunit
module acdk{
  module lang{
    interface Integer;
#ifndef acdk_lang_Integer
#define acdk_lang_Integer
    typedef sequence<Integer> IntegerArray;
    typedef sequence<IntegerArray> IntegerArrayArray;
#endif // acdk_lang_Integer
    interface AObject;
#ifndef acdk_lang_AObject
#define acdk_lang_AObject
    typedef sequence<AObject> AObjectArray;
    typedef sequence<AObjectArray> AObjectArrayArray;
#endif // acdk_lang_AObject
    interface StringBuffer;
#ifndef acdk_lang_StringBuffer
#define acdk_lang_StringBuffer
    typedef sequence<StringBuffer> StringBufferArray;
    typedef sequence<StringBufferArray> StringBufferArrayArray;
#endif // acdk_lang_StringBuffer
}; // module acdk
}; // module lang
module acdk {
module tools {
module aunit {

exception DmiTestException
{
  acdk::lang::AObject _causedObject;
  long _code;
  string _what;
};
interface McConfigTest
: acdk::lang::AObject
{
  attribute long secondMember;
  void secondMethod();
};

interface DmiTestInterface
{
  acdk::lang::StringBuffer bar(in acdk::lang::StringBuffer sb, out string str);
  void foo();
};

interface DmiTestInterfaceCorFactory
{
  acdk::lang::Class GetClass();
  acdk::lang::AObject getDmiProxy(in acdk::lang::AObject dmidelegate);
};

interface SayHelloInterface
{
  string sayHello(in string sayto);
};

interface SayHelloInterfaceCorFactory
{
  acdk::lang::Class GetClass();
  acdk::lang::AObject getDmiProxy(in acdk::lang::AObject dmidelegate);
};

interface DmiTestClass
: acdk::lang::AObject
{
  attribute boolean pubBool;
  attribute octet pubByte;
  attribute char pubChar;
  attribute double pubDouble;
  attribute float pubFloat;
  attribute long pubInt;
  attribute acdk::lang::Integer pubInteger;
  attribute longlong pubLong;
  attribute acdk::lang::AObject pubObject;
  attribute short pubShort;
  attribute string pubString;
  string appendAll(in stringArray sa);
  void byValIn(in acdk::lang::StringBuffer sb);
  void byValInOut(inout acdk::lang::StringBuffer sb);
  void byValOut(out acdk::lang::Integer integer);
  acdk::lang::AObject dynamicMethodO(in boolean bv, in char cvar, in octet bvar, in short svar, in long ivar, in longlong jlvar, in float fvar, in double dvar, in acdk::lang::AObject obj);
  octet dynamicMethodb(in boolean bv, in char cvar, in octet bvar, in short svar, in long ivar, in longlong jlvar, in float fvar, in double dvar, in acdk::lang::AObject obj);
  char dynamicMethodc(in boolean bv, in char cvar, in octet bvar, in short svar, in long ivar, in longlong jlvar, in float fvar, in double dvar, in acdk::lang::AObject obj);
  double dynamicMethodd(in boolean bv, in char cvar, in octet bvar, in short svar, in long ivar, in longlong jlvar, in float fvar, in double dvar, in acdk::lang::AObject obj);
  float dynamicMethodf(in boolean bv, in char cvar, in octet bvar, in short svar, in long ivar, in longlong jlvar, in float fvar, in double dvar, in acdk::lang::AObject obj);
  long dynamicMethodi(in boolean bv, in char cvar, in octet bvar, in short svar, in long ivar, in longlong jlvar, in float fvar, in double dvar, in acdk::lang::AObject obj);
  longlong dynamicMethodl(in boolean bv, in char cvar, in octet bvar, in short svar, in long ivar, in longlong jlvar, in float fvar, in double dvar, in acdk::lang::AObject obj);
  short dynamicMethods(in boolean bv, in char cvar, in octet bvar, in short svar, in long ivar, in longlong jlvar, in float fvar, in double dvar, in acdk::lang::AObject obj);
  boolean dynamicMethodz(in boolean bv, in char cvar, in octet bvar, in short svar, in long ivar, in longlong jlvar, in float fvar, in double dvar, in acdk::lang::AObject obj);
  void inOutMethod(in long ini, in string instr, out long outi, out string outstr);
  void inOutMethodA(inout long count, inout string val);
  long makeSum(in longArray ia);

  // orginal method name: makeSum
    long makeSum1(in acdk::lang::IntegerArray ia);
  long methodWithBasicArray(in longArray iarray);

  // orginal method name: methodWithBasicArray
    long methodWithBasicArray1(in charArray carray);

  // orginal method name: methodWithDefaultArgs
    long methodWithOneArgs(in long i);

  // orginal method name: methodWithDefaultArgs
    long methodWithoutArgs();
  boolean namedArgsMethod(in long iarg, in string sarg, in acdk::lang::StringBuffer sbarg);
  void outMethod(in long toset, out acdk::lang::Integer toret);
  double setgetd(in double d);
  float setgetf(in float f);
  longlong setgetl(in longlong l);
  void throwExceptionMethod(in long exectiontype);
};

interface DmiTestClassCorFactory
{
  attribute boolean pubStaticBool;
  attribute octet pubStaticByte;
  attribute char pubStaticChar;
  attribute double pubStaticDouble;
  attribute float pubStaticFloat;
  attribute long pubStaticInt;
  attribute acdk::lang::Integer pubStaticInteger;
  attribute longlong pubStaticLong;
  attribute acdk::lang::AObject pubStaticObject;
  attribute short pubStaticShort;
  attribute string pubStaticString;

  // orginal method name: DmiTestClass
    acdk::tools::aunit::DmiTestClass createCorDmiTestClass1();

  // orginal method name: DmiTestClass
    acdk::tools::aunit::DmiTestClass createCorDmiTestClass2(in string str, in long i);

  // orginal method name: DmiTestClass
    acdk::tools::aunit::DmiTestClass createCorDmiTestClass3(in string str);

  // orginal method name: getPubStaticInt
    long altGetPubStaticInt();
  long setGetPubStaticInt(in long i, in string msg);
  acdk::lang::AObject staticMethodO(in boolean bv, in char cvar, in octet bvar, in short svar, in long ivar, in longlong jlvar, in float fvar, in double dvar, in acdk::lang::AObject obj);
  octet staticMethodb(in boolean bv, in char cvar, in octet bvar, in short svar, in long ivar, in longlong jlvar, in float fvar, in double dvar, in acdk::lang::AObject obj);
  char staticMethodc(in boolean bv, in char cvar, in octet bvar, in short svar, in long ivar, in longlong jlvar, in float fvar, in double dvar, in acdk::lang::AObject obj);
  double staticMethodd(in boolean bv, in char cvar, in octet bvar, in short svar, in long ivar, in longlong jlvar, in float fvar, in double dvar, in acdk::lang::AObject obj);
  float staticMethodf(in boolean bv, in char cvar, in octet bvar, in short svar, in long ivar, in longlong jlvar, in float fvar, in double dvar, in acdk::lang::AObject obj);
  long staticMethodi(in boolean bv, in char cvar, in octet bvar, in short svar, in long ivar, in longlong jlvar, in float fvar, in double dvar, in acdk::lang::AObject obj);
  longlong staticMethodl(in boolean bv, in char cvar, in octet bvar, in short svar, in long ivar, in longlong jlvar, in float fvar, in double dvar, in acdk::lang::AObject obj);
  short staticMethods(in boolean bv, in char cvar, in octet bvar, in short svar, in long ivar, in longlong jlvar, in float fvar, in double dvar, in acdk::lang::AObject obj);
  boolean staticMethodz(in boolean bv, in char cvar, in octet bvar, in short svar, in long ivar, in longlong jlvar, in float fvar, in double dvar, in acdk::lang::AObject obj);
};

}; // module aunit
}; // module tools
}; // module acdk
#endif // acdk_tools_aunit_idl
