// generated by acdkorbidl

#ifndef acdk_text_idl
#define acdk_text_idl

#include <acdk_base.idl>
module acdk{
  module io{
    interface Serializable;
#ifndef acdk_io_Serializable
#define acdk_io_Serializable
    typedef sequence<Serializable> SerializableArray;
    typedef sequence<SerializableArray> SerializableArrayArray;
#endif // acdk_io_Serializable
  }; // module acdk
}; // module io
module acdk{
  module lang{
    interface Class;
#ifndef acdk_lang_Class
#define acdk_lang_Class
    typedef sequence<Class> ClassArray;
    typedef sequence<ClassArray> ClassArrayArray;
#endif // acdk_lang_Class
    interface Cloneable;
#ifndef acdk_lang_Cloneable
#define acdk_lang_Cloneable
    typedef sequence<Cloneable> CloneableArray;
    typedef sequence<CloneableArray> CloneableArrayArray;
#endif // acdk_lang_Cloneable
    interface Number;
#ifndef acdk_lang_Number
#define acdk_lang_Number
    typedef sequence<Number> NumberArray;
    typedef sequence<NumberArray> NumberArrayArray;
#endif // acdk_lang_Number
  }; // module acdk
}; // module lang
module acdk{
  module text{
    interface DateFormat;
#ifndef acdk_text_DateFormat
#define acdk_text_DateFormat
    typedef sequence<DateFormat> DateFormatArray;
    typedef sequence<DateFormatArray> DateFormatArrayArray;
#endif // acdk_text_DateFormat
  }; // module acdk
}; // module text
module acdk{
  module lang{
    interface AObject;
#ifndef acdk_lang_AObject
#define acdk_lang_AObject
    typedef sequence<AObject> AObjectArray;
    typedef sequence<AObjectArray> AObjectArrayArray;
#endif // acdk_lang_AObject
  }; // module acdk
}; // module lang
module acdk{
  module text{
    interface DecimalFormat;
#ifndef acdk_text_DecimalFormat
#define acdk_text_DecimalFormat
    typedef sequence<DecimalFormat> DecimalFormatArray;
    typedef sequence<DecimalFormatArray> DecimalFormatArrayArray;
#endif // acdk_text_DecimalFormat
    interface DecimalFormatSymbols;
#ifndef acdk_text_DecimalFormatSymbols
#define acdk_text_DecimalFormatSymbols
    typedef sequence<DecimalFormatSymbols> DecimalFormatSymbolsArray;
    typedef sequence<DecimalFormatSymbolsArray> DecimalFormatSymbolsArrayArray;
#endif // acdk_text_DecimalFormatSymbols
    interface DecimalSubpatternProperties;
#ifndef acdk_text_DecimalSubpatternProperties
#define acdk_text_DecimalSubpatternProperties
    typedef sequence<DecimalSubpatternProperties> DecimalSubpatternPropertiesArray;
    typedef sequence<DecimalSubpatternPropertiesArray> DecimalSubpatternPropertiesArrayArray;
#endif // acdk_text_DecimalSubpatternProperties
  }; // module acdk
}; // module text
module acdk{
  module util{
    interface Calendar;
#ifndef acdk_util_Calendar
#define acdk_util_Calendar
    typedef sequence<Calendar> CalendarArray;
    typedef sequence<CalendarArray> CalendarArrayArray;
#endif // acdk_util_Calendar
  }; // module acdk
}; // module util
module acdk{
  module lang{
    interface StringBuffer;
#ifndef acdk_lang_StringBuffer
#define acdk_lang_StringBuffer
    typedef sequence<StringBuffer> StringBufferArray;
    typedef sequence<StringBufferArray> StringBufferArrayArray;
#endif // acdk_lang_StringBuffer
  }; // module acdk
}; // module lang
module acdk{
  module util{
    interface Date;
#ifndef acdk_util_Date
#define acdk_util_Date
    typedef sequence<Date> DateArray;
    typedef sequence<DateArray> DateArrayArray;
#endif // acdk_util_Date
  }; // module acdk
}; // module util
module acdk{
  module text{
    interface FieldPosition;
#ifndef acdk_text_FieldPosition
#define acdk_text_FieldPosition
    typedef sequence<FieldPosition> FieldPositionArray;
    typedef sequence<FieldPositionArray> FieldPositionArrayArray;
#endif // acdk_text_FieldPosition
    interface Format;
#ifndef acdk_text_Format
#define acdk_text_Format
    typedef sequence<Format> FormatArray;
    typedef sequence<FormatArray> FormatArrayArray;
#endif // acdk_text_Format
    interface FormatedOutput;
#ifndef acdk_text_FormatedOutput
#define acdk_text_FormatedOutput
    typedef sequence<FormatedOutput> FormatedOutputArray;
    typedef sequence<FormatedOutputArray> FormatedOutputArrayArray;
#endif // acdk_text_FormatedOutput
  }; // module acdk
}; // module text
module acdk{
  module util{
    interface Locale;
#ifndef acdk_util_Locale
#define acdk_util_Locale
    typedef sequence<Locale> LocaleArray;
    typedef sequence<LocaleArray> LocaleArrayArray;
#endif // acdk_util_Locale
  }; // module acdk
}; // module util
module acdk{
  module text{
    interface NumberFormat;
#ifndef acdk_text_NumberFormat
#define acdk_text_NumberFormat
    typedef sequence<NumberFormat> NumberFormatArray;
    typedef sequence<NumberFormatArray> NumberFormatArrayArray;
#endif // acdk_text_NumberFormat
    interface ParsePosition;
#ifndef acdk_text_ParsePosition
#define acdk_text_ParsePosition
    typedef sequence<ParsePosition> ParsePositionArray;
    typedef sequence<ParsePositionArray> ParsePositionArrayArray;
#endif // acdk_text_ParsePosition
  }; // module acdk
}; // module text
module acdk{
  module util{
    interface Properties;
#ifndef acdk_util_Properties
#define acdk_util_Properties
    typedef sequence<Properties> PropertiesArray;
    typedef sequence<PropertiesArray> PropertiesArrayArray;
#endif // acdk_util_Properties
  }; // module acdk
}; // module util
module acdk{
  module text{
    interface PropertyVarTemplateFilter;
#ifndef acdk_text_PropertyVarTemplateFilter
#define acdk_text_PropertyVarTemplateFilter
    typedef sequence<PropertyVarTemplateFilter> PropertyVarTemplateFilterArray;
    typedef sequence<PropertyVarTemplateFilterArray> PropertyVarTemplateFilterArrayArray;
#endif // acdk_text_PropertyVarTemplateFilter
    interface RegExp;
#ifndef acdk_text_RegExp
#define acdk_text_RegExp
    typedef sequence<RegExp> RegExpArray;
    typedef sequence<RegExpArray> RegExpArrayArray;
#endif // acdk_text_RegExp
    interface SimpleDateFormat;
#ifndef acdk_text_SimpleDateFormat
#define acdk_text_SimpleDateFormat
    typedef sequence<SimpleDateFormat> SimpleDateFormatArray;
    typedef sequence<SimpleDateFormatArray> SimpleDateFormatArrayArray;
#endif // acdk_text_SimpleDateFormat
    interface Template;
#ifndef acdk_text_Template
#define acdk_text_Template
    typedef sequence<Template> TemplateArray;
    typedef sequence<TemplateArray> TemplateArrayArray;
#endif // acdk_text_Template
    interface TemplateFilter;
#ifndef acdk_text_TemplateFilter
#define acdk_text_TemplateFilter
    typedef sequence<TemplateFilter> TemplateFilterArray;
    typedef sequence<TemplateFilterArray> TemplateFilterArrayArray;
#endif // acdk_text_TemplateFilter
    interface TemplateFilterInformation;
#ifndef acdk_text_TemplateFilterInformation
#define acdk_text_TemplateFilterInformation
    typedef sequence<TemplateFilterInformation> TemplateFilterInformationArray;
    typedef sequence<TemplateFilterInformationArray> TemplateFilterInformationArrayArray;
#endif // acdk_text_TemplateFilterInformation
  }; // module acdk
}; // module text
module acdk{
  module util{
    interface TimeZone;
#ifndef acdk_util_TimeZone
#define acdk_util_TimeZone
    typedef sequence<TimeZone> TimeZoneArray;
    typedef sequence<TimeZoneArray> TimeZoneArrayArray;
#endif // acdk_util_TimeZone
}; // module acdk
}; // module util
module acdk {
module text {

exception ParseException
{
  long _offset;
  string _what;
};
interface TemplateFilterInformation
: acdk::lang::AObject
{
  acdk::text::TemplateFilter filter();
  boolean isPattern();
  string pattern();
};

interface TemplateFilterInformationCorFactory
{
  acdk::text::TemplateFilterInformation createCorTemplateFilterInformation(in boolean isPattern, in string pattern, in acdk::text::TemplateFilter filter);
};

interface TemplateFilter
{
  string filter(in string text);

  // orginal method name: filter
    string filter1(in stringArray matches);
};

interface TemplateFilterCorFactory
{
  acdk::lang::Class GetClass();
};

interface PropertyVarTemplateFilter
: acdk::lang::AObject
, acdk::text::TemplateFilter
{
  acdk::util::Properties properties();
};

interface PropertyVarTemplateFilterCorFactory
{
  acdk::text::PropertyVarTemplateFilter createCorPropertyVarTemplateFilter(in acdk::util::Properties props);
};

interface Format
: acdk::lang::AObject
, acdk::io::Serializable
, acdk::lang::Cloneable
{
  string format(in acdk::lang::AObject obj);

  // orginal method name: format
    acdk::lang::StringBuffer format1(in acdk::lang::AObject obj, in acdk::lang::StringBuffer sb, in acdk::text::FieldPosition pos);
  acdk::lang::AObject parseObject(in string str);

  // orginal method name: parseObject
    acdk::lang::AObject parseObject1(in string str, in acdk::text::ParsePosition pos);
};

interface FormatCorFactory
{
  acdk::text::Format createCorFormat();
  string dos2unix(in string str);
  string unix2dos(in string str);
};

interface RegExp
: acdk::lang::AObject
{
  stringArray match(in string str, in long eflags);

  // orginal method name: match
    stringArray match1(in string str);
  acdk::lang::AObjectArray matchPos(in string str, in long eflags);

  // orginal method name: matchPos
    acdk::lang::AObjectArray matchPos1(in string str);
  string replace(in string text, in string with, in boolean replaceAll);
  boolean test(in string str, in long eflags);

  // orginal method name: test
    boolean test1(in string str);
};

interface RegExpCorFactory
{
  acdk::text::RegExp createCorRegExp(in string expression, in long cflags);

  // orginal method name: RegExp
    acdk::text::RegExp createCorRegExp1(in string expression);
};

interface ParsePosition
: acdk::lang::AObject
{
  long getErrorIndex();
  long getIndex();
  void setErrorIndex(in long errorIndex);
  void setIndex(in long index);
};

interface ParsePositionCorFactory
{
  acdk::text::ParsePosition createCorParsePosition();

  // orginal method name: ParsePosition
    acdk::text::ParsePosition createCorParsePosition1(in long index);
};

interface Template
: acdk::lang::AObject
{
  string filter(in long startoffset, in long endoffset);

  // orginal method name: filter
    string filter1();

  // orginal method name: filter
    string filter2(in long startoffset);
  void registerPatternListener(in string pattern, in acdk::text::TemplateFilter filter);
  void registerTextListener(in string str, in acdk::text::TemplateFilter filter);
};

interface TemplateCorFactory
{
  acdk::text::Template createCorTemplate(in string text);
};

interface NumberFormat
: acdk::text::Format
{

  // orginal method name: format
    acdk::lang::StringBuffer format2(in longlong number, in acdk::lang::StringBuffer sb, in acdk::text::FieldPosition pos);

  // orginal method name: format
    acdk::lang::StringBuffer format3(in double number, in acdk::lang::StringBuffer sb, in acdk::text::FieldPosition pos);
  long getMaximumFractionDigits();
  long getMaximumIntegerDigits();
  long getMinimumFractionDigits();
  long getMinimumIntegerDigits();
  boolean isGroupingUsed();
  boolean isParseIntegerOnly();
  acdk::lang::Number parse(in string str);

  // orginal method name: parse
    acdk::lang::Number parse1(in string str, in acdk::text::ParsePosition pp);
  void setGroupingUsed(in boolean groupingUsed);
  void setMaximumFractionDigits(in long maximumFractionDigits);
  void setMaximumIntegerDigits(in long maximumIntegerDigits);
  void setMinimumFractionDigits(in long minimumFractionDigits);
  void setMinimumIntegerDigits(in long minimumIntegerDigits);
  void setParseIntegerOnly(in boolean parseIntegerOnly);
};

interface NumberFormatCorFactory
{
  attribute long FRACTION_FIELD;
  attribute long INTEGER_FIELD;
  acdk::text::NumberFormat createCorNumberFormat();
  acdk::util::LocaleArray getAvailableLocales();
  acdk::text::NumberFormat getCurrencyInstance();

  // orginal method name: getCurrencyInstance
    acdk::text::NumberFormat getCurrencyInstance1(in acdk::util::Locale locale);
  acdk::text::NumberFormat getNumberInstance(in acdk::util::Locale locale);
  acdk::text::NumberFormat getPercentInstance();

  // orginal method name: getPercentInstance
    acdk::text::NumberFormat getPercentInstance1(in acdk::util::Locale locale);
};

interface FormatedOutput
{
  string bold(in string str);
  acdk::text::FormatedOutput br();
  acdk::text::FormatedOutput endDocument();
  acdk::text::FormatedOutput p();
  acdk::text::FormatedOutput print(in string str);
  acdk::text::FormatedOutput println(in string str);
  acdk::text::FormatedOutput startDocument();
  acdk::text::FormatedOutput write(in string str);
};

interface FormatedOutputCorFactory
{
  acdk::lang::Class GetClass();
};

interface DateFormat
: acdk::text::Format
{

  // orginal method name: format
    string format2(in acdk::util::Date date);
  acdk::util::Calendar getCalendar();
  boolean getLenient();
  acdk::text::NumberFormat getNumberFormat();
  acdk::util::TimeZone getTimeZone();
  acdk::util::Date parse(in string text);

  // orginal method name: parse
    acdk::util::Date parse1(in string text, in acdk::text::ParsePosition pos);
  void setCalendar(in acdk::util::Calendar newCalendar);
  void setLenient(in boolean lenient);
  void setNumberFormat(in acdk::text::NumberFormat newNumberFormat);
  void setTimeZone(in acdk::util::TimeZone zone);
};

interface DateFormatCorFactory
{
  acdk::util::LocaleArray getAvailableLocales();
  acdk::text::DateFormat getDateInstance(in long style);

  // orginal method name: getDateInstance
    acdk::text::DateFormat getDateInstance1();

  // orginal method name: getDateInstance
    acdk::text::DateFormat getDateInstance2(in long style, in acdk::util::Locale locale);
  acdk::text::DateFormat getDateTimeInstance(in long dateStyle, in long timeStyle);

  // orginal method name: getDateTimeInstance
    acdk::text::DateFormat getDateTimeInstance1();

  // orginal method name: getDateTimeInstance
    acdk::text::DateFormat getDateTimeInstance2(in long dateStyle);

  // orginal method name: getDateTimeInstance
    acdk::text::DateFormat getDateTimeInstance3(in long dateStyle, in long timeStyle, in acdk::util::Locale locale);
  acdk::text::DateFormat getInstance();
  acdk::text::DateFormat getTimeInstance(in long style);

  // orginal method name: getTimeInstance
    acdk::text::DateFormat getTimeInstance1();

  // orginal method name: getTimeInstance
    acdk::text::DateFormat getTimeInstance2(in long style, in acdk::util::Locale locale);
};

interface FieldPosition
: acdk::lang::AObject
{
  long getBeginIndex();
  long getEndIndex();
  long getField();
  void setBeginIndex(in long begin);
  void setEndIndex(in long end);
};

interface FieldPositionCorFactory
{
  acdk::text::FieldPosition createCorFieldPosition();

  // orginal method name: FieldPosition
    acdk::text::FieldPosition createCorFieldPosition1(in long fieldID);
};

interface DecimalFormatSymbols
: acdk::lang::AObject
{
  string getCurrencySymbol();
  char getDecimalSeparator();
  char getDigit();
  char getGroupingSeparator();
  string getInfinity();
  string getInternationalCurrencySymbol();
  char getMinusSign();
  char getMonetaryDecimalSeparator();
  string getNaN();
  char getPatternSeparator();
  char getPerMill();
  char getPercent();
  char getZeroDigit();
  void setCurrencySymbol(in string currency);
  void setDecimalSeparator(in char decimalSeparator);
  void setDigit(in char digit);
  void setGroupingSeparator(in char groupingSeparator);
  void setInfinity(in string infinity);
  void setInternationalCurrencySymbol(in string currency);
  void setMinusSign(in char minusSign);
  void setMonetaryDecimalSeparator(in char monetaryDecimalSeperator);
  void setNaN(in string naN);
  void setPatternSeparator(in char patternSeparator);
  void setPerMill(in char perMill);
  void setPercent(in char percent);
  void setZeroDigit(in char zeroDigit);
};

interface DecimalFormatSymbolsCorFactory
{
  acdk::text::DecimalFormatSymbols createCorDecimalFormatSymbols();

  // orginal method name: DecimalFormatSymbols
    acdk::text::DecimalFormatSymbols createCorDecimalFormatSymbols1(in acdk::util::Locale locale);
};

interface DecimalFormat
: acdk::text::NumberFormat
, acdk::io::Serializable
, acdk::lang::Cloneable
{
  void applyLocalizedPattern(in string pattern);
  void applyPattern(in string pattern);
  acdk::text::DecimalFormatSymbols getDecimalFormatSymbols();
  long getGroupingSize();
  void setGroupingSize(in long newValue);
};

interface DecimalFormatCorFactory
{
  acdk::text::DecimalFormat createCorDecimalFormat();
};

interface DecimalSubpatternProperties
: acdk::lang::AObject
, acdk::io::Serializable
{
  attribute long _exponent;
  attribute long _groupingSize;
  attribute boolean _leftPercent;
  attribute long _maximumFractionDigits;
  attribute long _maximumIntegerDigits;
  attribute long _minimumFractionDigits;
  attribute long _minimumIntegerDigits;
  attribute long _multiplier;
  attribute string _pattern;
  attribute string _prefix;
  attribute string _suffix;
};

interface DecimalSubpatternPropertiesCorFactory
{
  acdk::text::DecimalSubpatternProperties createCorDecimalSubpatternProperties(in string pattern);
};

interface SimpleDateFormat
: acdk::text::DateFormat
{
  void applyLocalizedPattern(in string pattern);
  void applyPattern(in string pattern);
  acdk::util::Date get2DigitYearStart();
  acdk::lang::AObject getDateFormatSymbols();
  void set2DigitYearStart(in acdk::util::Date startDate);
  void setDateFormatSymbols(in acdk::lang::AObject newFormatSymbols);
  string toLocalizedPattern();
  string toPattern();
};

interface SimpleDateFormatCorFactory
{
  acdk::text::SimpleDateFormat createCorSimpleDateFormat();

  // orginal method name: SimpleDateFormat
    acdk::text::SimpleDateFormat createCorSimpleDateFormat1(in string pattern);

  // orginal method name: SimpleDateFormat
    acdk::text::SimpleDateFormat createCorSimpleDateFormat2(in string pattern, in acdk::lang::AObject formatData);

  // orginal method name: SimpleDateFormat
    acdk::text::SimpleDateFormat createCorSimpleDateFormat3(in string pattern, in acdk::util::Locale loc);
};

interface Base64
: acdk::lang::AObject
{
};

interface Base64CorFactory
{
  octetArray decode(in octetArray in_);
  octetArray encode(in octetArray in_);
};

}; // module text
}; // module acdk
#endif // acdk_text_idl
