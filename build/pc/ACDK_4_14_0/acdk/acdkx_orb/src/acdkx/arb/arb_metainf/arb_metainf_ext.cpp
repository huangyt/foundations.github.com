// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../arb.h"
#include "../ADelegate.h"
#include "../AObjectImpl.h"
#include "../arb.h"
#include "../Config.h"
#include "../XMLDelegate.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>


struct acdk::lang::dmi::UnitInfo acdkx_arb_unitInfo = {
  ::acdk::lang::dmi::MiUnitInfo, // flags
  0, //attributeRes
  "arb", // name of unit
  -1, // hashCode
  "acdkx", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  0 // _firstChild first ClazzInfo of this unit
};

static ::acdk::lang::dmi::RegisterUnitInfo _register_acdkx_arb_unitInfo(&acdkx_arb_unitInfo);


namespace acdkx { 
namespace arb { 


//static
::acdk::lang::RObject
ArbInterface_create_array(int length)
{
  return new ObjectArrayImpl<RArbInterface>(length);
}

//static
::acdk::lang::RObject
ArbInterface_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ArbInterface_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArbInterface_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ArbInterface::GetClass();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ArbInterface_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArbInterface_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ArbInterface_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArbInterface_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_0_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ArbInterface_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ArbInterface_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ArbInterface_MetainfoWrapper::ArbInterface_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ArbInterface_methods[] = 
{
  &ArbInterface_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct ArbInterface_MetaInfoInitializer
{  ArbInterface_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ArbInterface::clazzInfo();
    ci->fields =  _ArbInterface_fields;
    ci->methods =  _ArbInterface_methods;
    ci->_scopeParent = acdkx_arb_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ArbInterface_MetaInfoInitializer ArbInterface_MetaInfoInitializer_staticinstance__;


} // namespace acdkx
} // namespace arb


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) arb_dummyExportFunc() {}
#endif

