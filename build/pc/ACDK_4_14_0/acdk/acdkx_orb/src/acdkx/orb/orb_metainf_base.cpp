// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "acdk2orb.h"
#include "AcdkObject.h"
#include "AcdkObjectInterface.h"
#include "AContextImpl.h"
#include "AORB.h"
#include "AServerRequestImpl.h"
#include "CDRObjectReader.h"
#include "CDRObjectWriter.h"
#include "Config.h"
#include "CorObject.h"
#include "GIOPMessage.h"
#include "ObjectKey.h"
#include "orb.h"
#include "OrbConnection.h"
#include "OrbConnectionMgr.h"
#include "OrbInputStream.h"
#include "OrbOutputStream.h"
#include "ReplyInputStream.h"
#include "ReplyOutputStream.h"
#include "RequestOutputStream.h"
#include "ServerDelegate.h"
#include "std_orb.h"

namespace acdkx { 
namespace orb { 

::acdk::lang::dmi::ClazzSuperInfo* _AcdkObjectInterface_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkObjectInterface::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "AcdkObjectInterface", // name of class
  -1, // hashCode
  "acdkx/orb", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _AcdkObjectInterface_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    AcdkObjectInterface::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_AcdkObjectInterface(AcdkObjectInterface::clazzInfo());

::acdk::lang::RClass
AcdkObjectInterface::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
AcdkObjectInterface::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdkx
} // namespace orb


namespace acdkx { 
namespace orb { 

::acdk::lang::dmi::ClazzSuperInfo _AORB_super___acdk__lang__Thread =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Thread::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _AORB_super___org__omg__CORBA__ORB =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::org::omg::CORBA::ORB::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _AORB_interfaces[] =
{
  &_AORB_super___acdk__lang__Thread,
  &_AORB_super___org__omg__CORBA__ORB,
  0
};

::acdk::lang::dmi::ClazzInfo* AORB::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "AORB", // name of class
  -1, // hashCode
  "acdkx/orb", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _AORB_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 8, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    AORB::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_AORB(AORB::clazzInfo());

::acdk::lang::RClass
AORB::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
AORB::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Thread)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_objects._ref_this()); // RHashMap _objects 
  fields.push_back((::acdk::lang::RObject*)this->_objectsIds._ref_this()); // RHashMap _objectsIds 
  fields.push_back((::acdk::lang::RObject*)this->_properties._ref_this()); // ::acdk::util::RProperties _properties 
  fields.push_back((::acdk::lang::RObject*)this->_serverHost._ref_this()); // RString _serverHost 
  fields.push_back((::acdk::lang::RObject*)this->_serverSocket._ref_this()); // ::acdk::net::RServerSocket _serverSocket 
  fields.push_back((::acdk::lang::RObject*)this->_theObject._ref_this()); // RObject _theObject 
  fields.push_back((::acdk::lang::RObject*)this->_treadGroup._ref_this()); // RThreadGroup _treadGroup 
}


} // namespace acdkx
} // namespace orb


namespace acdkx { 
namespace orb { 

::acdk::lang::dmi::ClazzSuperInfo _CDRObjectReader_super___acdk__io__AbstractFilterReader =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::io::AbstractFilterReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _CDRObjectReader_super___acdk__io__ObjectReader =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::io::ObjectReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _CDRObjectReader_super___org__omg__CORBA__portable__InputStream =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::org::omg::CORBA::portable::InputStream::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _CDRObjectReader_interfaces[] =
{
  &_CDRObjectReader_super___acdk__io__AbstractFilterReader,
  &_CDRObjectReader_super___acdk__io__ObjectReader,
  &_CDRObjectReader_super___org__omg__CORBA__portable__InputStream,
  0
};

::acdk::lang::dmi::ClazzInfo* CDRObjectReader::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "CDRObjectReader", // name of class
  -1, // hashCode
  "acdkx/orb", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _CDRObjectReader_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    CDRObjectReader::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_CDRObjectReader(CDRObjectReader::clazzInfo());

::acdk::lang::RClass
CDRObjectReader::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
CDRObjectReader::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::io::, AbstractFilterReader)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_orb._ref_this()); // org::omg::CORBA::RORB _orb 
}


} // namespace acdkx
} // namespace orb


namespace acdkx { 
namespace orb { 

::acdk::lang::dmi::ClazzSuperInfo _CDRObjectWriter_super___acdk__io__AbstractFilterWriter =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::io::AbstractFilterWriter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _CDRObjectWriter_super___acdk__io__ObjectWriter =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::io::ObjectWriter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _CDRObjectWriter_super___org__omg__CORBA__portable__OutputStream =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::org::omg::CORBA::portable::OutputStream::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _CDRObjectWriter_interfaces[] =
{
  &_CDRObjectWriter_super___acdk__io__AbstractFilterWriter,
  &_CDRObjectWriter_super___acdk__io__ObjectWriter,
  &_CDRObjectWriter_super___org__omg__CORBA__portable__OutputStream,
  0
};

::acdk::lang::dmi::ClazzInfo* CDRObjectWriter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "CDRObjectWriter", // name of class
  -1, // hashCode
  "acdkx/orb", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _CDRObjectWriter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    CDRObjectWriter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_CDRObjectWriter(CDRObjectWriter::clazzInfo());

::acdk::lang::RClass
CDRObjectWriter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
CDRObjectWriter::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::io::, AbstractFilterWriter)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_orb._ref_this()); // org::omg::CORBA::RORB _orb 
}


} // namespace acdkx
} // namespace orb


namespace acdkx { 
namespace orb { 


::acdk::lang::dmi::ClazzEnumValueInfo DmiGiopArgFlags_DmiGiopIsNil = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "DmiGiopIsNil", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdkx::orb::DmiGiopIsNil, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DmiGiopArgFlags_DmiGiopIsReference = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "DmiGiopIsReference", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdkx::orb::DmiGiopIsReference, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DmiGiopArgFlags_DmiGiopIsSerialized = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "DmiGiopIsSerialized", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdkx::orb::DmiGiopIsSerialized, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DmiGiopArgFlags_DmiGiopIsString = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "DmiGiopIsString", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdkx::orb::DmiGiopIsString, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* DmiGiopArgFlags_enumValues[] = {
  &DmiGiopArgFlags_DmiGiopIsNil,
  &DmiGiopArgFlags_DmiGiopIsReference,
  &DmiGiopArgFlags_DmiGiopIsSerialized,
  &DmiGiopArgFlags_DmiGiopIsString,
0
};

::acdk::lang::dmi::ClazzEnumInfo* DmiGiopArgFlagsMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo DmiGiopArgFlags_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "DmiGiopArgFlags", // name
  -1, // hashCode
  "acdkx/orb", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiGiopArgFlags_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_DmiGiopArgFlags(&DmiGiopArgFlags_enumInfo);

  return &DmiGiopArgFlags_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_DmiGiopArgFlagsEnumInfo(DmiGiopArgFlagsMetaInf::GetEnumInfo());


} // namespace acdkx
} // namespace orb


namespace acdkx { 
namespace orb { 

::acdk::lang::dmi::ClazzSuperInfo _OrbException_super___acdk__lang__Exception =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Exception::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _OrbException_interfaces[] =
{
  &_OrbException_super___acdk__lang__Exception,
  0
};

::acdk::lang::dmi::ClazzInfo* OrbException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "OrbException", // name of class
  -1, // hashCode
  "acdkx/orb", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _OrbException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    OrbException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_OrbException(OrbException::clazzInfo());

::acdk::lang::RClass
OrbException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
OrbException::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Exception)::getCollectableFields(fields);
}


} // namespace acdkx
} // namespace orb


namespace acdkx { 
namespace orb { 

::acdk::lang::dmi::ClazzSuperInfo _OrbConnection_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _OrbConnection_super_acdk__lang__Comparable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::lang::Comparable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _OrbConnection_interfaces[] =
{
  &_OrbConnection_super_acdk__lang__Object,
  &_OrbConnection_super_acdk__lang__Comparable,
  0
};

::acdk::lang::dmi::ClazzInfo* OrbConnection::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "OrbConnection", // name of class
  -1, // hashCode
  "acdkx/orb", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _OrbConnection_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 3, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    OrbConnection::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_OrbConnection(OrbConnection::clazzInfo());

::acdk::lang::RClass
OrbConnection::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
OrbConnection::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->network._ref_this()); // RString network 
  fields.push_back((::acdk::lang::RObject*)this->objects._ref_this()); // acdk::util::RArrayList objects 
  fields.push_back((::acdk::lang::RObject*)this->socket._ref_this()); // RSocket socket 
}


} // namespace acdkx
} // namespace orb


namespace acdkx { 
namespace orb { 

::acdk::lang::dmi::ClazzSuperInfo _ServerDelegate_super___org__omg__CORBA__portable__ObjectImpl =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::org::omg::CORBA::portable::ObjectImpl::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _ServerDelegate_super___org__omg__CORBA__portable__Delegate =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::org::omg::CORBA::portable::Delegate::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ServerDelegate_interfaces[] =
{
  &_ServerDelegate_super___org__omg__CORBA__portable__ObjectImpl,
  &_ServerDelegate_super___org__omg__CORBA__portable__Delegate,
  0
};

::acdk::lang::dmi::ClazzInfo* ServerDelegate::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ServerDelegate", // name of class
  -1, // hashCode
  "acdkx/orb", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ServerDelegate_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 4, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ServerDelegate::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ServerDelegate(ServerDelegate::clazzInfo());

::acdk::lang::RClass
ServerDelegate::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ServerDelegate::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::org::omg::CORBA::portable::, ObjectImpl)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_connection._ref_this()); // ROrbConnection _connection 
  fields.push_back((::acdk::lang::RObject*)this->_currentObjectKey._ref_this()); // RObjectKey _currentObjectKey 
  fields.push_back((::acdk::lang::RObject*)this->_objectKey._ref_this()); // RObjectKey _objectKey 
  fields.push_back((::acdk::lang::RObject*)this->_orb._ref_this()); // ::org::omg::CORBA::RORB _orb 
}


} // namespace acdkx
} // namespace orb

