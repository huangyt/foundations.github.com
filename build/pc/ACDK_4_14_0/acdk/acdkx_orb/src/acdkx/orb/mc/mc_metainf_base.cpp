// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "Config.h"
#include "GenOrbIdlAttribute.h"
#include "mc.h"
#include "OrbDispatchAttribute.h"
#include "OrbSetRepId.h"

namespace acdkx { 
namespace orb { 
namespace mc { 

::acdk::lang::dmi::ClazzSuperInfo _OrbDispatchAttribute_super_acdk__tools__mc__CodeAttribute =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::tools::mc::CodeAttribute::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _OrbDispatchAttribute_interfaces[] =
{
  &_OrbDispatchAttribute_super_acdk__tools__mc__CodeAttribute,
  0
};

::acdk::lang::dmi::ClazzInfo* OrbDispatchAttribute::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "OrbDispatchAttribute", // name of class
  -1, // hashCode
  "acdkx/orb/mc", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _OrbDispatchAttribute_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    OrbDispatchAttribute::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_OrbDispatchAttribute(OrbDispatchAttribute::clazzInfo());

::acdk::lang::RClass
OrbDispatchAttribute::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
OrbDispatchAttribute::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::tools::mc::, CodeAttribute)::getCollectableFields(fields);
}


} // namespace acdkx
} // namespace orb
} // namespace mc


namespace acdkx { 
namespace orb { 
namespace mc { 

::acdk::lang::dmi::ClazzSuperInfo _OrbSetRepId_super_acdk__tools__mc__CodeAttribute =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::tools::mc::CodeAttribute::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _OrbSetRepId_interfaces[] =
{
  &_OrbSetRepId_super_acdk__tools__mc__CodeAttribute,
  0
};

::acdk::lang::dmi::ClazzInfo* OrbSetRepId::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "OrbSetRepId", // name of class
  -1, // hashCode
  "acdkx/orb/mc", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _OrbSetRepId_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    OrbSetRepId::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_OrbSetRepId(OrbSetRepId::clazzInfo());

::acdk::lang::RClass
OrbSetRepId::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
OrbSetRepId::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::tools::mc::, CodeAttribute)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_repId._ref_this()); // RString _repId 
}


} // namespace acdkx
} // namespace orb
} // namespace mc

