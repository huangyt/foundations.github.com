// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../orb.h"
#include "../acdk2orb.h"
#include "../AcdkObject.h"
#include "../AcdkObjectInterface.h"
#include "../AContextImpl.h"
#include "../AORB.h"
#include "../AServerRequestImpl.h"
#include "../CDRObjectReader.h"
#include "../CDRObjectWriter.h"
#include "../Config.h"
#include "../CorObject.h"
#include "../GIOPMessage.h"
#include "../ObjectKey.h"
#include "../orb.h"
#include "../OrbConnection.h"
#include "../OrbConnectionMgr.h"
#include "../OrbInputStream.h"
#include "../OrbOutputStream.h"
#include "../ReplyInputStream.h"
#include "../ReplyOutputStream.h"
#include "../RequestOutputStream.h"
#include "../ServerDelegate.h"
#include "../std_orb.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>


struct acdk::lang::dmi::UnitInfo acdkx_orb_unitInfo = {
  ::acdk::lang::dmi::MiUnitInfo, // flags
  0, //attributeRes
  "orb", // name of unit
  -1, // hashCode
  "acdkx", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  0 // _firstChild first ClazzInfo of this unit
};

static ::acdk::lang::dmi::RegisterUnitInfo _register_acdkx_orb_unitInfo(&acdkx_orb_unitInfo);


namespace acdkx { 
namespace orb { 


//static
::acdk::lang::RObject
AcdkObjectInterface_create_array(int length)
{
  return new ObjectArrayImpl<RAcdkObjectInterface>(length);
}

//static
::acdk::lang::RObject
AcdkObjectInterface_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class AcdkObjectInterface_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkObjectInterface_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AcdkObjectInterface::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkObjectInterface_method_dyn_invoke_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AcdkObjectInterface* This = dmi_cast<AcdkObjectInterface>(This_);
    ret = (::acdk::lang::RObject)This->dyn_invoke((RString)args[0].getObjectVar(), (RDmiObjectArray)args[1].getObjectVar(),  ::acdk::lang::getTypedObjectRef< RDmiObjectArray >(args[2]));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkObjectInterface_method_dyn_invoke_static_INLRString_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AcdkObjectInterface* This = dmi_cast<AcdkObjectInterface>(This_);
    ret = (::acdk::lang::RObject)This->dyn_invoke_static((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RDmiObjectArray)args[2].getObjectVar(),  ::acdk::lang::getTypedObjectRef< RDmiObjectArray >(args[3]));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkObjectInterface_method_dyn_new_INLRString_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__L_acdk_lang_RObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AcdkObjectInterface* This = dmi_cast<AcdkObjectInterface>(This_);
    ret = (::acdk::lang::RObject)This->dyn_new((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RDmiObjectArray)args[2].getObjectVar(),  ::acdk::lang::getTypedObjectRef< RDmiObjectArray >(args[3]));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkObjectInterface_method_dyn_peek_INLRString__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AcdkObjectInterface* This = dmi_cast<AcdkObjectInterface>(This_);
    ret = (::acdk::lang::RObject)This->dyn_peek((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkObjectInterface_method_dyn_peek_static_INLRString_INLRString__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AcdkObjectInterface* This = dmi_cast<AcdkObjectInterface>(This_);
    ret = (::acdk::lang::RObject)This->dyn_peek_static((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkObjectInterface_method_dyn_poke_INLRString_INLRDmiObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AcdkObjectInterface* This = dmi_cast<AcdkObjectInterface>(This_);
    This->dyn_poke((RString)args[0].getObjectVar(), (RDmiObject)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkObjectInterface_method_dyn_poke_static_INLRString_INLRString_INLRDmiObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AcdkObjectInterface* This = dmi_cast<AcdkObjectInterface>(This_);
    This->dyn_poke_static((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RDmiObject)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkObjectInterface_method_get_cor_factory_INLRString__L_acdk_lang_RObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AcdkObjectInterface* This = dmi_cast<AcdkObjectInterface>(This_);
    ret = (::acdk::lang::RObject)This->get_cor_factory((RString)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _AcdkObjectInterface_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkObjectInterface_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkObjectInterface_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkObjectInterface_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_8_GetClass", // alternative name of method
  -1, // altlabelHashCode
  AcdkObjectInterface_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  AcdkObjectInterface_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  AcdkObjectInterface_MetainfoWrapper::AcdkObjectInterface_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkObjectInterface_methods_dyn_invoke_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__LRDmiObject__arg_methodname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "methodname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkObjectInterface_methods_dyn_invoke_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__LRDmiObject__arg_inp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "inp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObjectArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkObjectInterface_methods_dyn_invoke_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__LRDmiObject__arg_outp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "outp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObjectArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkObjectInterface_methods_dyn_invoke_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__LRDmiObject__args[] = 
{
  &AcdkObjectInterface_methods_dyn_invoke_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__LRDmiObject__arg_methodname,
  &AcdkObjectInterface_methods_dyn_invoke_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__LRDmiObject__arg_inp,
  &AcdkObjectInterface_methods_dyn_invoke_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__LRDmiObject__arg_outp,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkObjectInterface_methods_dyn_invoke_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkObjectInterface_method_dyn_invoke_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "dyn_invoke", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_2_dyn_invoke", // alternative name of method
  -1, // altlabelHashCode
  AcdkObjectInterface_methods_dyn_invoke_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__LRDmiObject__args, // the arguments
  0, //arguments count
  AcdkObjectInterface_methods_dyn_invoke_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__LRDmiObject__exceptions, // the declared exceptions
  AcdkObjectInterface_MetainfoWrapper::AcdkObjectInterface_method_dyn_invoke_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkObjectInterface_methods_dyn_invoke_static_INLRString_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__LRDmiObject__arg_classname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "classname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkObjectInterface_methods_dyn_invoke_static_INLRString_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__LRDmiObject__arg_methodname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "methodname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkObjectInterface_methods_dyn_invoke_static_INLRString_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__LRDmiObject__arg_inp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "inp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObjectArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkObjectInterface_methods_dyn_invoke_static_INLRString_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__LRDmiObject__arg_outp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "outp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObjectArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkObjectInterface_methods_dyn_invoke_static_INLRString_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__LRDmiObject__args[] = 
{
  &AcdkObjectInterface_methods_dyn_invoke_static_INLRString_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__LRDmiObject__arg_classname,
  &AcdkObjectInterface_methods_dyn_invoke_static_INLRString_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__LRDmiObject__arg_methodname,
  &AcdkObjectInterface_methods_dyn_invoke_static_INLRString_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__LRDmiObject__arg_inp,
  &AcdkObjectInterface_methods_dyn_invoke_static_INLRString_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__LRDmiObject__arg_outp,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkObjectInterface_methods_dyn_invoke_static_INLRString_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkObjectInterface_method_dyn_invoke_static_INLRString_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "dyn_invoke_static", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_3_dyn_invoke_static", // alternative name of method
  -1, // altlabelHashCode
  AcdkObjectInterface_methods_dyn_invoke_static_INLRString_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__LRDmiObject__args, // the arguments
  0, //arguments count
  AcdkObjectInterface_methods_dyn_invoke_static_INLRString_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__LRDmiObject__exceptions, // the declared exceptions
  AcdkObjectInterface_MetainfoWrapper::AcdkObjectInterface_method_dyn_invoke_static_INLRString_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkObjectInterface_methods_dyn_new_INLRString_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__L_acdk_lang_RObject__arg_classname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "classname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkObjectInterface_methods_dyn_new_INLRString_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__L_acdk_lang_RObject__arg_constructor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "constructor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkObjectInterface_methods_dyn_new_INLRString_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__L_acdk_lang_RObject__arg_inp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "inp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObjectArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkObjectInterface_methods_dyn_new_INLRString_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__L_acdk_lang_RObject__arg_outp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "outp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObjectArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkObjectInterface_methods_dyn_new_INLRString_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__L_acdk_lang_RObject__args[] = 
{
  &AcdkObjectInterface_methods_dyn_new_INLRString_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__L_acdk_lang_RObject__arg_classname,
  &AcdkObjectInterface_methods_dyn_new_INLRString_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__L_acdk_lang_RObject__arg_constructor,
  &AcdkObjectInterface_methods_dyn_new_INLRString_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__L_acdk_lang_RObject__arg_inp,
  &AcdkObjectInterface_methods_dyn_new_INLRString_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__L_acdk_lang_RObject__arg_outp,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkObjectInterface_methods_dyn_new_INLRString_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__L_acdk_lang_RObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkObjectInterface_method_dyn_new_INLRString_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__L_acdk_lang_RObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "dyn_new", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RObject::clazzInfo(), // return type
  "_1_dyn_new", // alternative name of method
  -1, // altlabelHashCode
  AcdkObjectInterface_methods_dyn_new_INLRString_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__L_acdk_lang_RObject__args, // the arguments
  0, //arguments count
  AcdkObjectInterface_methods_dyn_new_INLRString_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__L_acdk_lang_RObject__exceptions, // the declared exceptions
  AcdkObjectInterface_MetainfoWrapper::AcdkObjectInterface_method_dyn_new_INLRString_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__L_acdk_lang_RObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkObjectInterface_methods_dyn_peek_INLRString__LRDmiObject__arg_membername = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "membername", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkObjectInterface_methods_dyn_peek_INLRString__LRDmiObject__args[] = 
{
  &AcdkObjectInterface_methods_dyn_peek_INLRString__LRDmiObject__arg_membername,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkObjectInterface_methods_dyn_peek_INLRString__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkObjectInterface_method_dyn_peek_INLRString__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "dyn_peek", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_4_dyn_peek", // alternative name of method
  -1, // altlabelHashCode
  AcdkObjectInterface_methods_dyn_peek_INLRString__LRDmiObject__args, // the arguments
  0, //arguments count
  AcdkObjectInterface_methods_dyn_peek_INLRString__LRDmiObject__exceptions, // the declared exceptions
  AcdkObjectInterface_MetainfoWrapper::AcdkObjectInterface_method_dyn_peek_INLRString__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkObjectInterface_methods_dyn_peek_static_INLRString_INLRString__LRDmiObject__arg_classname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "classname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkObjectInterface_methods_dyn_peek_static_INLRString_INLRString__LRDmiObject__arg_membername = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "membername", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkObjectInterface_methods_dyn_peek_static_INLRString_INLRString__LRDmiObject__args[] = 
{
  &AcdkObjectInterface_methods_dyn_peek_static_INLRString_INLRString__LRDmiObject__arg_classname,
  &AcdkObjectInterface_methods_dyn_peek_static_INLRString_INLRString__LRDmiObject__arg_membername,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkObjectInterface_methods_dyn_peek_static_INLRString_INLRString__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkObjectInterface_method_dyn_peek_static_INLRString_INLRString__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "dyn_peek_static", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_5_dyn_peek_static", // alternative name of method
  -1, // altlabelHashCode
  AcdkObjectInterface_methods_dyn_peek_static_INLRString_INLRString__LRDmiObject__args, // the arguments
  0, //arguments count
  AcdkObjectInterface_methods_dyn_peek_static_INLRString_INLRString__LRDmiObject__exceptions, // the declared exceptions
  AcdkObjectInterface_MetainfoWrapper::AcdkObjectInterface_method_dyn_peek_static_INLRString_INLRString__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkObjectInterface_methods_dyn_poke_INLRString_INLRDmiObject__V_arg_membername = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "membername", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkObjectInterface_methods_dyn_poke_INLRString_INLRDmiObject__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkObjectInterface_methods_dyn_poke_INLRString_INLRDmiObject__V_args[] = 
{
  &AcdkObjectInterface_methods_dyn_poke_INLRString_INLRDmiObject__V_arg_membername,
  &AcdkObjectInterface_methods_dyn_poke_INLRString_INLRDmiObject__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkObjectInterface_methods_dyn_poke_INLRString_INLRDmiObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkObjectInterface_method_dyn_poke_INLRString_INLRDmiObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "dyn_poke", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_dyn_poke", // alternative name of method
  -1, // altlabelHashCode
  AcdkObjectInterface_methods_dyn_poke_INLRString_INLRDmiObject__V_args, // the arguments
  0, //arguments count
  AcdkObjectInterface_methods_dyn_poke_INLRString_INLRDmiObject__V_exceptions, // the declared exceptions
  AcdkObjectInterface_MetainfoWrapper::AcdkObjectInterface_method_dyn_poke_INLRString_INLRDmiObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkObjectInterface_methods_dyn_poke_static_INLRString_INLRString_INLRDmiObject__V_arg_classname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "classname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkObjectInterface_methods_dyn_poke_static_INLRString_INLRString_INLRDmiObject__V_arg_membername = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "membername", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkObjectInterface_methods_dyn_poke_static_INLRString_INLRString_INLRDmiObject__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkObjectInterface_methods_dyn_poke_static_INLRString_INLRString_INLRDmiObject__V_args[] = 
{
  &AcdkObjectInterface_methods_dyn_poke_static_INLRString_INLRString_INLRDmiObject__V_arg_classname,
  &AcdkObjectInterface_methods_dyn_poke_static_INLRString_INLRString_INLRDmiObject__V_arg_membername,
  &AcdkObjectInterface_methods_dyn_poke_static_INLRString_INLRString_INLRDmiObject__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkObjectInterface_methods_dyn_poke_static_INLRString_INLRString_INLRDmiObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkObjectInterface_method_dyn_poke_static_INLRString_INLRString_INLRDmiObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "dyn_poke_static", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_dyn_poke_static", // alternative name of method
  -1, // altlabelHashCode
  AcdkObjectInterface_methods_dyn_poke_static_INLRString_INLRString_INLRDmiObject__V_args, // the arguments
  0, //arguments count
  AcdkObjectInterface_methods_dyn_poke_static_INLRString_INLRString_INLRDmiObject__V_exceptions, // the declared exceptions
  AcdkObjectInterface_MetainfoWrapper::AcdkObjectInterface_method_dyn_poke_static_INLRString_INLRString_INLRDmiObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkObjectInterface_methods_get_cor_factory_INLRString__L_acdk_lang_RObject__arg_classname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "classname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkObjectInterface_methods_get_cor_factory_INLRString__L_acdk_lang_RObject__args[] = 
{
  &AcdkObjectInterface_methods_get_cor_factory_INLRString__L_acdk_lang_RObject__arg_classname,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkObjectInterface_methods_get_cor_factory_INLRString__L_acdk_lang_RObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkObjectInterface_method_get_cor_factory_INLRString__L_acdk_lang_RObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "get_cor_factory", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RObject::clazzInfo(), // return type
  "_0_get_cor_factory", // alternative name of method
  -1, // altlabelHashCode
  AcdkObjectInterface_methods_get_cor_factory_INLRString__L_acdk_lang_RObject__args, // the arguments
  0, //arguments count
  AcdkObjectInterface_methods_get_cor_factory_INLRString__L_acdk_lang_RObject__exceptions, // the declared exceptions
  AcdkObjectInterface_MetainfoWrapper::AcdkObjectInterface_method_get_cor_factory_INLRString__L_acdk_lang_RObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _AcdkObjectInterface_methods[] = 
{
  &AcdkObjectInterface_method_GetClass__L_acdk_lang_RClass_,
  &AcdkObjectInterface_method_dyn_invoke_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__LRDmiObject_,
  &AcdkObjectInterface_method_dyn_invoke_static_INLRString_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__LRDmiObject_,
  &AcdkObjectInterface_method_dyn_new_INLRString_INLRString_INLRDmiObjectArray_OUTLRDmiObjectArray__L_acdk_lang_RObject_,
  &AcdkObjectInterface_method_dyn_peek_INLRString__LRDmiObject_,
  &AcdkObjectInterface_method_dyn_peek_static_INLRString_INLRString__LRDmiObject_,
  &AcdkObjectInterface_method_dyn_poke_INLRString_INLRDmiObject__V,
  &AcdkObjectInterface_method_dyn_poke_static_INLRString_INLRString_INLRDmiObject__V,
  &AcdkObjectInterface_method_get_cor_factory_INLRString__L_acdk_lang_RObject_,
  0
};


struct AcdkObjectInterface_MetaInfoInitializer
{  AcdkObjectInterface_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = AcdkObjectInterface::clazzInfo();
    ci->fields =  _AcdkObjectInterface_fields;
    ci->methods =  _AcdkObjectInterface_methods;
    ci->_scopeParent = acdkx_orb_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
AcdkObjectInterface_MetaInfoInitializer AcdkObjectInterface_MetaInfoInitializer_staticinstance__;


} // namespace acdkx
} // namespace orb


namespace acdkx { 
namespace orb { 


//static
::acdk::lang::RObject
AORB_create_array(int length)
{
  return new ObjectArrayImpl<RAORB>(length);
}

//static
::acdk::lang::RObject
AORB_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class AORB_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AORB_method_AORB__LRAORB__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AORB();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AORB_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AORB::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AORB_method__doShutdown__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AORB* This = dmi_cast<AORB>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AORB::_doShutdown();
    else
      ret = This->_doShutdown();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AORB_method__initServer__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AORB* This = dmi_cast<AORB>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AORB::_initServer();
    else
        This->_initServer();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AORB_method__lookupFreePort__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = AORB::_lookupFreePort();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AORB_method_connect_INL_org_omg_CORBA_RObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AORB* This = dmi_cast<AORB>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AORB::connect((::org::omg::CORBA::RObject)args[0].getObjectVar());
    else
        This->connect((::org::omg::CORBA::RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AORB_method_corbaloc_to_object_INLRString__L_org_omg_CORBA_RObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AORB* This = dmi_cast<AORB>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AORB::corbaloc_to_object((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->corbaloc_to_object((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AORB_method_createProxy_INLRObjectKey__LRServerDelegate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AORB::createProxy((RObjectKey)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AORB_method_destroy__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AORB* This = dmi_cast<AORB>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AORB::destroy();
    else
        This->destroy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AORB_method_getLocalHost__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AORB::getLocalHost();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AORB_method_getLocalPort__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = AORB::getLocalPort();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AORB_method_getORB__L_org_omg_CORBA_RORB__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AORB::getORB();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AORB_method_impl_is_ready_INL_acdk_lang_RObject__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AORB* This = dmi_cast<AORB>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AORB::impl_is_ready((::acdk::lang::RObject)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->impl_is_ready((::acdk::lang::RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AORB_method_init_INLRStringArray_INLacdk_util_RProperties__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AORB* This = dmi_cast<AORB>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AORB::init((RStringArray)args[0].getObjectVar(), (acdk::util::RProperties)args[1].getObjectVar());
    else
        This->init((RStringArray)args[0].getObjectVar(), (acdk::util::RProperties)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AORB_method_isOwnObjectId_INLRObjectKey__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AORB* This = dmi_cast<AORB>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AORB::isOwnObjectId((RObjectKey)args[0].getObjectVar());
    else
      ret = This->isOwnObjectId((RObjectKey)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AORB_method_list_initial_services__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AORB* This = dmi_cast<AORB>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AORB::list_initial_services();
    else
        ret = (::acdk::lang::RObject)This->list_initial_services();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AORB_method_object_to_string_INL_org_omg_CORBA_RObject__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AORB* This = dmi_cast<AORB>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AORB::object_to_string((::org::omg::CORBA::RObject)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->object_to_string((::org::omg::CORBA::RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AORB_method_perform_work__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AORB* This = dmi_cast<AORB>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AORB::perform_work();
    else
        This->perform_work();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AORB_method_port__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AORB* This = dmi_cast<AORB>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AORB::port();
    else
      ret = This->port();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AORB_method_reset__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AORB::reset();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AORB_method_resolve_initial_references_INLRString__L_org_omg_CORBA_RObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AORB* This = dmi_cast<AORB>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AORB::resolve_initial_references((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->resolve_initial_references((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AORB_method_run__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AORB* This = dmi_cast<AORB>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AORB::run();
    else
        This->run();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AORB_method_serverHost__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AORB* This = dmi_cast<AORB>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AORB::serverHost();
    else
        ret = (::acdk::lang::RObject)This->serverHost();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AORB_method_setGIOPVersion_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AORB* This = dmi_cast<AORB>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AORB::setGIOPVersion(args[0].getIntVar(), args[1].getIntVar());
    else
        This->setGIOPVersion(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AORB_method_shutdown_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AORB* This = dmi_cast<AORB>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AORB::shutdown(args[0].getBoolVar());
    else
        This->shutdown(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AORB_method_start__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AORB* This = dmi_cast<AORB>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AORB::start();
    else
        This->start();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AORB_method_string_to_object_INLRString__L_org_omg_CORBA_RObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AORB* This = dmi_cast<AORB>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AORB::string_to_object((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->string_to_object((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AORB_method_work_pending__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AORB* This = dmi_cast<AORB>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AORB::work_pending();
    else
      ret = This->work_pending();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AORB_fields__isServer_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AORB* This = dmi_cast<AORB>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_isServer, flags);
    else
      This->_isServer = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AORB_fields__objects_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AORB* This = dmi_cast<AORB>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_objects, flags);
    else
      This->_objects = (RHashMap)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AORB_fields__objectsIds_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AORB* This = dmi_cast<AORB>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_objectsIds, flags);
    else
      This->_objectsIds = (RHashMap)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AORB_fields__port_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AORB* This = dmi_cast<AORB>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_port, flags);
    else
      This->_port = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AORB_fields__properties_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AORB* This = dmi_cast<AORB>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_properties, flags);
    else
      This->_properties = (::acdk::util::RProperties)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AORB_fields__serverHost_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AORB* This = dmi_cast<AORB>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_serverHost, flags);
    else
      This->_serverHost = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AORB_fields__serverSocket_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AORB* This = dmi_cast<AORB>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_serverSocket, flags);
    else
      This->_serverSocket = (::acdk::net::RServerSocket)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AORB_fields__shutdown_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AORB* This = dmi_cast<AORB>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_shutdown, flags);
    else
      This->_shutdown = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AORB_fields__theORB_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(AORB::_theORB, flags);
    else
      AORB::_theORB = (RAORB)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AORB_fields__theObject_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AORB* This = dmi_cast<AORB>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_theObject, flags);
    else
      This->_theObject = (RObject)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AORB_fields__treadGroup_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AORB* This = dmi_cast<AORB>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_treadGroup, flags);
    else
      This->_treadGroup = (RThreadGroup)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AORB_fields_ignoreDmiOverGIOP_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AORB* This = dmi_cast<AORB>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->ignoreDmiOverGIOP, flags);
    else
      This->ignoreDmiOverGIOP = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AORB_fields_ignoreLocal_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AORB* This = dmi_cast<AORB>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->ignoreLocal, flags);
    else
      This->ignoreLocal = var.getBoolVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo AORB_fields__isServer = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_isServer", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  AORB_MetainfoWrapper::AORB_fields__isServer_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AORB_fields__objects = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_objects", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RHashMap::clazzInfo(),
  AORB_MetainfoWrapper::AORB_fields__objects_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AORB_fields__objectsIds = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_objectsIds", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RHashMap::clazzInfo(),
  AORB_MetainfoWrapper::AORB_fields__objectsIds_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AORB_fields__port = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_port", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  AORB_MetainfoWrapper::AORB_fields__port_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AORB_fields__properties = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_properties", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::RProperties::clazzInfo(),
  AORB_MetainfoWrapper::AORB_fields__properties_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AORB_fields__serverHost = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_serverHost", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  AORB_MetainfoWrapper::AORB_fields__serverHost_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AORB_fields__serverSocket = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_serverSocket", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::net::RServerSocket::clazzInfo(),
  AORB_MetainfoWrapper::AORB_fields__serverSocket_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AORB_fields__shutdown = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_shutdown", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  AORB_MetainfoWrapper::AORB_fields__shutdown_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AORB_fields__theORB = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_theORB", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAORB::clazzInfo(),
  AORB_MetainfoWrapper::AORB_fields__theORB_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AORB_fields__theObject = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_theObject", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(),
  AORB_MetainfoWrapper::AORB_fields__theObject_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AORB_fields__treadGroup = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_treadGroup", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThreadGroup::clazzInfo(),
  AORB_MetainfoWrapper::AORB_fields__treadGroup_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AORB_fields_ignoreDmiOverGIOP = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "ignoreDmiOverGIOP", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  AORB_MetainfoWrapper::AORB_fields_ignoreDmiOverGIOP_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AORB_fields_ignoreLocal = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "ignoreLocal", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  AORB_MetainfoWrapper::AORB_fields_ignoreLocal_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _AORB_fields[] = 
{
  &AORB_fields__isServer,
  &AORB_fields__objects,
  &AORB_fields__objectsIds,
  &AORB_fields__port,
  &AORB_fields__properties,
  &AORB_fields__serverHost,
  &AORB_fields__serverSocket,
  &AORB_fields__shutdown,
  &AORB_fields__theORB,
  &AORB_fields__theObject,
  &AORB_fields__treadGroup,
  &AORB_fields_ignoreDmiOverGIOP,
  &AORB_fields_ignoreLocal,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* AORB_methods_AORB__LRAORB__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AORB_methods_AORB__LRAORB__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AORB_method_AORB__LRAORB_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "AORB", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AORB::clazzInfo(), // return type
  "_0_AORB", // alternative name of method
  -1, // altlabelHashCode
  AORB_methods_AORB__LRAORB__args, // the arguments
  0, //arguments count
  AORB_methods_AORB__LRAORB__exceptions, // the declared exceptions
  AORB_MetainfoWrapper::AORB_method_AORB__LRAORB__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AORB_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AORB_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AORB_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_r_GetClass", // alternative name of method
  -1, // altlabelHashCode
  AORB_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  AORB_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  AORB_MetainfoWrapper::AORB_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AORB_methods__doShutdown__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AORB_methods__doShutdown__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AORB_method__doShutdown__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_doShutdown", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_h__doShutdown", // alternative name of method
  -1, // altlabelHashCode
  AORB_methods__doShutdown__Z_args, // the arguments
  0, //arguments count
  AORB_methods__doShutdown__Z_exceptions, // the declared exceptions
  AORB_MetainfoWrapper::AORB_method__doShutdown__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AORB_methods__initServer__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AORB_methods__initServer__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AORB_method__initServer__V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_initServer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_q__initServer", // alternative name of method
  -1, // altlabelHashCode
  AORB_methods__initServer__V_args, // the arguments
  0, //arguments count
  AORB_methods__initServer__V_exceptions, // the declared exceptions
  AORB_MetainfoWrapper::AORB_method__initServer__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AORB_methods__lookupFreePort__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AORB_methods__lookupFreePort__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AORB_method__lookupFreePort__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_lookupFreePort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_n__lookupFreePort", // alternative name of method
  -1, // altlabelHashCode
  AORB_methods__lookupFreePort__I_args, // the arguments
  0, //arguments count
  AORB_methods__lookupFreePort__I_exceptions, // the declared exceptions
  AORB_MetainfoWrapper::AORB_method__lookupFreePort__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AORB_methods_connect_INL_org_omg_CORBA_RObject__V_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AORB_methods_connect_INL_org_omg_CORBA_RObject__V_args[] = 
{
  &AORB_methods_connect_INL_org_omg_CORBA_RObject__V_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* AORB_methods_connect_INL_org_omg_CORBA_RObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AORB_method_connect_INL_org_omg_CORBA_RObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "connect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_connect", // alternative name of method
  -1, // altlabelHashCode
  AORB_methods_connect_INL_org_omg_CORBA_RObject__V_args, // the arguments
  0, //arguments count
  AORB_methods_connect_INL_org_omg_CORBA_RObject__V_exceptions, // the declared exceptions
  AORB_MetainfoWrapper::AORB_method_connect_INL_org_omg_CORBA_RObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AORB_methods_corbaloc_to_object_INLRString__L_org_omg_CORBA_RObject__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AORB_methods_corbaloc_to_object_INLRString__L_org_omg_CORBA_RObject__args[] = 
{
  &AORB_methods_corbaloc_to_object_INLRString__L_org_omg_CORBA_RObject__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* AORB_methods_corbaloc_to_object_INLRString__L_org_omg_CORBA_RObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AORB_method_corbaloc_to_object_INLRString__L_org_omg_CORBA_RObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "corbaloc_to_object", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo(), // return type
  "_k_corbaloc_to_object", // alternative name of method
  -1, // altlabelHashCode
  AORB_methods_corbaloc_to_object_INLRString__L_org_omg_CORBA_RObject__args, // the arguments
  0, //arguments count
  AORB_methods_corbaloc_to_object_INLRString__L_org_omg_CORBA_RObject__exceptions, // the declared exceptions
  AORB_MetainfoWrapper::AORB_method_corbaloc_to_object_INLRString__L_org_omg_CORBA_RObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AORB_methods_createProxy_INLRObjectKey__LRServerDelegate__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectKey::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AORB_methods_createProxy_INLRObjectKey__LRServerDelegate__args[] = 
{
  &AORB_methods_createProxy_INLRObjectKey__LRServerDelegate__arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* AORB_methods_createProxy_INLRObjectKey__LRServerDelegate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AORB_method_createProxy_INLRObjectKey__LRServerDelegate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createProxy", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RServerDelegate::clazzInfo(), // return type
  "_o_createProxy", // alternative name of method
  -1, // altlabelHashCode
  AORB_methods_createProxy_INLRObjectKey__LRServerDelegate__args, // the arguments
  0, //arguments count
  AORB_methods_createProxy_INLRObjectKey__LRServerDelegate__exceptions, // the declared exceptions
  AORB_MetainfoWrapper::AORB_method_createProxy_INLRObjectKey__LRServerDelegate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AORB_methods_destroy__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AORB_methods_destroy__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AORB_method_destroy__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "destroy", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_destroy", // alternative name of method
  -1, // altlabelHashCode
  AORB_methods_destroy__V_args, // the arguments
  0, //arguments count
  AORB_methods_destroy__V_exceptions, // the declared exceptions
  AORB_MetainfoWrapper::AORB_method_destroy__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AORB_methods_getLocalHost__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AORB_methods_getLocalHost__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AORB_method_getLocalHost__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLocalHost", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_l_getLocalHost", // alternative name of method
  -1, // altlabelHashCode
  AORB_methods_getLocalHost__LRString__args, // the arguments
  0, //arguments count
  AORB_methods_getLocalHost__LRString__exceptions, // the declared exceptions
  AORB_MetainfoWrapper::AORB_method_getLocalHost__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AORB_methods_getLocalPort__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AORB_methods_getLocalPort__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AORB_method_getLocalPort__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLocalPort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_m_getLocalPort", // alternative name of method
  -1, // altlabelHashCode
  AORB_methods_getLocalPort__I_args, // the arguments
  0, //arguments count
  AORB_methods_getLocalPort__I_exceptions, // the declared exceptions
  AORB_MetainfoWrapper::AORB_method_getLocalPort__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AORB_methods_getORB__L_org_omg_CORBA_RORB__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AORB_methods_getORB__L_org_omg_CORBA_RORB__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AORB_method_getORB__L_org_omg_CORBA_RORB_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getORB", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RORB::clazzInfo(), // return type
  "_1_getORB", // alternative name of method
  -1, // altlabelHashCode
  AORB_methods_getORB__L_org_omg_CORBA_RORB__args, // the arguments
  0, //arguments count
  AORB_methods_getORB__L_org_omg_CORBA_RORB__exceptions, // the declared exceptions
  AORB_MetainfoWrapper::AORB_method_getORB__L_org_omg_CORBA_RORB__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AORB_methods_impl_is_ready_INL_acdk_lang_RObject__LRString__arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AORB_methods_impl_is_ready_INL_acdk_lang_RObject__LRString__args[] = 
{
  &AORB_methods_impl_is_ready_INL_acdk_lang_RObject__LRString__arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* AORB_methods_impl_is_ready_INL_acdk_lang_RObject__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AORB_method_impl_is_ready_INL_acdk_lang_RObject__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "impl_is_ready", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_g_impl_is_ready", // alternative name of method
  -1, // altlabelHashCode
  AORB_methods_impl_is_ready_INL_acdk_lang_RObject__LRString__args, // the arguments
  0, //arguments count
  AORB_methods_impl_is_ready_INL_acdk_lang_RObject__LRString__exceptions, // the declared exceptions
  AORB_MetainfoWrapper::AORB_method_impl_is_ready_INL_acdk_lang_RObject__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AORB_methods_init_INLRStringArray_INLacdk_util_RProperties__V_arg_args = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "args", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AORB_methods_init_INLRStringArray_INLacdk_util_RProperties__V_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RProperties::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AORB_methods_init_INLRStringArray_INLacdk_util_RProperties__V_args[] = 
{
  &AORB_methods_init_INLRStringArray_INLacdk_util_RProperties__V_arg_args,
  &AORB_methods_init_INLRStringArray_INLacdk_util_RProperties__V_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* AORB_methods_init_INLRStringArray_INLacdk_util_RProperties__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AORB_method_init_INLRStringArray_INLacdk_util_RProperties__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "init", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_init", // alternative name of method
  -1, // altlabelHashCode
  AORB_methods_init_INLRStringArray_INLacdk_util_RProperties__V_args, // the arguments
  0, //arguments count
  AORB_methods_init_INLRStringArray_INLacdk_util_RProperties__V_exceptions, // the declared exceptions
  AORB_MetainfoWrapper::AORB_method_init_INLRStringArray_INLacdk_util_RProperties__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AORB_methods_isOwnObjectId_INLRObjectKey__Z_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectKey::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AORB_methods_isOwnObjectId_INLRObjectKey__Z_args[] = 
{
  &AORB_methods_isOwnObjectId_INLRObjectKey__Z_arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* AORB_methods_isOwnObjectId_INLRObjectKey__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AORB_method_isOwnObjectId_INLRObjectKey__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isOwnObjectId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_p_isOwnObjectId", // alternative name of method
  -1, // altlabelHashCode
  AORB_methods_isOwnObjectId_INLRObjectKey__Z_args, // the arguments
  0, //arguments count
  AORB_methods_isOwnObjectId_INLRObjectKey__Z_exceptions, // the declared exceptions
  AORB_MetainfoWrapper::AORB_method_isOwnObjectId_INLRObjectKey__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AORB_methods_list_initial_services__LRStringArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AORB_methods_list_initial_services__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AORB_method_list_initial_services__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "list_initial_services", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_7_list_initial_services", // alternative name of method
  -1, // altlabelHashCode
  AORB_methods_list_initial_services__LRStringArray__args, // the arguments
  0, //arguments count
  AORB_methods_list_initial_services__LRStringArray__exceptions, // the declared exceptions
  AORB_MetainfoWrapper::AORB_method_list_initial_services__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AORB_methods_object_to_string_INL_org_omg_CORBA_RObject__LRString__arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AORB_methods_object_to_string_INL_org_omg_CORBA_RObject__LRString__args[] = 
{
  &AORB_methods_object_to_string_INL_org_omg_CORBA_RObject__LRString__arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* AORB_methods_object_to_string_INL_org_omg_CORBA_RObject__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AORB_method_object_to_string_INL_org_omg_CORBA_RObject__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "object_to_string", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_i_object_to_string", // alternative name of method
  -1, // altlabelHashCode
  AORB_methods_object_to_string_INL_org_omg_CORBA_RObject__LRString__args, // the arguments
  0, //arguments count
  AORB_methods_object_to_string_INL_org_omg_CORBA_RObject__LRString__exceptions, // the declared exceptions
  AORB_MetainfoWrapper::AORB_method_object_to_string_INL_org_omg_CORBA_RObject__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AORB_methods_perform_work__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AORB_methods_perform_work__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AORB_method_perform_work__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "perform_work", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_perform_work", // alternative name of method
  -1, // altlabelHashCode
  AORB_methods_perform_work__V_args, // the arguments
  0, //arguments count
  AORB_methods_perform_work__V_exceptions, // the declared exceptions
  AORB_MetainfoWrapper::AORB_method_perform_work__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AORB_methods_port__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AORB_methods_port__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AORB_method_port__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "port", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_4_port", // alternative name of method
  -1, // altlabelHashCode
  AORB_methods_port__I_args, // the arguments
  0, //arguments count
  AORB_methods_port__I_exceptions, // the declared exceptions
  AORB_MetainfoWrapper::AORB_method_port__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AORB_methods_reset__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AORB_methods_reset__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AORB_method_reset__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "reset", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_reset", // alternative name of method
  -1, // altlabelHashCode
  AORB_methods_reset__V_args, // the arguments
  0, //arguments count
  AORB_methods_reset__V_exceptions, // the declared exceptions
  AORB_MetainfoWrapper::AORB_method_reset__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AORB_methods_resolve_initial_references_INLRString__L_org_omg_CORBA_RObject__arg_identifier = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "identifier", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AORB_methods_resolve_initial_references_INLRString__L_org_omg_CORBA_RObject__args[] = 
{
  &AORB_methods_resolve_initial_references_INLRString__L_org_omg_CORBA_RObject__arg_identifier,
  0
};

::acdk::lang::dmi::ClazzInfo* AORB_methods_resolve_initial_references_INLRString__L_org_omg_CORBA_RObject__exceptions[] =
{
  RInvalidName::clazzInfo(), 
  0
};

void AORB_resolve_initial_references_INLRString__L_org_omg_CORBA_RObject__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, InvalidName) == true)
    THROW_INSTANCE( RInvalidName(ex));
}

::acdk::lang::dmi::ClazzMethodInfo AORB_method_resolve_initial_references_INLRString__L_org_omg_CORBA_RObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "resolve_initial_references", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo(), // return type
  "_8_resolve_initial_references", // alternative name of method
  -1, // altlabelHashCode
  AORB_methods_resolve_initial_references_INLRString__L_org_omg_CORBA_RObject__args, // the arguments
  0, //arguments count
  AORB_methods_resolve_initial_references_INLRString__L_org_omg_CORBA_RObject__exceptions, // the declared exceptions
  AORB_MetainfoWrapper::AORB_method_resolve_initial_references_INLRString__L_org_omg_CORBA_RObject__dispatch, // invoke this method
  AORB_resolve_initial_references_INLRString__L_org_omg_CORBA_RObject__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AORB_methods_run__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AORB_methods_run__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AORB_method_run__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "run", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_run", // alternative name of method
  -1, // altlabelHashCode
  AORB_methods_run__V_args, // the arguments
  0, //arguments count
  AORB_methods_run__V_exceptions, // the declared exceptions
  AORB_MetainfoWrapper::AORB_method_run__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AORB_methods_serverHost__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AORB_methods_serverHost__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AORB_method_serverHost__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "serverHost", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_5_serverHost", // alternative name of method
  -1, // altlabelHashCode
  AORB_methods_serverHost__LRString__args, // the arguments
  0, //arguments count
  AORB_methods_serverHost__LRString__exceptions, // the declared exceptions
  AORB_MetainfoWrapper::AORB_method_serverHost__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AORB_methods_setGIOPVersion_II_V_arg_major = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "major", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AORB_methods_setGIOPVersion_II_V_arg_minor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AORB_methods_setGIOPVersion_II_V_args[] = 
{
  &AORB_methods_setGIOPVersion_II_V_arg_major,
  &AORB_methods_setGIOPVersion_II_V_arg_minor,
  0
};

::acdk::lang::dmi::ClazzInfo* AORB_methods_setGIOPVersion_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AORB_method_setGIOPVersion_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setGIOPVersion", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_setGIOPVersion", // alternative name of method
  -1, // altlabelHashCode
  AORB_methods_setGIOPVersion_II_V_args, // the arguments
  0, //arguments count
  AORB_methods_setGIOPVersion_II_V_exceptions, // the declared exceptions
  AORB_MetainfoWrapper::AORB_method_setGIOPVersion_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AORB_methods_shutdown_Z_V_arg_wait_for_completion = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "wait_for_completion", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AORB_methods_shutdown_Z_V_args[] = 
{
  &AORB_methods_shutdown_Z_V_arg_wait_for_completion,
  0
};

::acdk::lang::dmi::ClazzInfo* AORB_methods_shutdown_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AORB_method_shutdown_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "shutdown", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_shutdown", // alternative name of method
  -1, // altlabelHashCode
  AORB_methods_shutdown_Z_V_args, // the arguments
  0, //arguments count
  AORB_methods_shutdown_Z_V_exceptions, // the declared exceptions
  AORB_MetainfoWrapper::AORB_method_shutdown_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AORB_methods_start__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AORB_methods_start__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AORB_method_start__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "start", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_start", // alternative name of method
  -1, // altlabelHashCode
  AORB_methods_start__V_args, // the arguments
  0, //arguments count
  AORB_methods_start__V_exceptions, // the declared exceptions
  AORB_MetainfoWrapper::AORB_method_start__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AORB_methods_string_to_object_INLRString__L_org_omg_CORBA_RObject__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AORB_methods_string_to_object_INLRString__L_org_omg_CORBA_RObject__args[] = 
{
  &AORB_methods_string_to_object_INLRString__L_org_omg_CORBA_RObject__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* AORB_methods_string_to_object_INLRString__L_org_omg_CORBA_RObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AORB_method_string_to_object_INLRString__L_org_omg_CORBA_RObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "string_to_object", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo(), // return type
  "_j_string_to_object", // alternative name of method
  -1, // altlabelHashCode
  AORB_methods_string_to_object_INLRString__L_org_omg_CORBA_RObject__args, // the arguments
  0, //arguments count
  AORB_methods_string_to_object_INLRString__L_org_omg_CORBA_RObject__exceptions, // the declared exceptions
  AORB_MetainfoWrapper::AORB_method_string_to_object_INLRString__L_org_omg_CORBA_RObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AORB_methods_work_pending__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AORB_methods_work_pending__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AORB_method_work_pending__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "work_pending", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_a_work_pending", // alternative name of method
  -1, // altlabelHashCode
  AORB_methods_work_pending__Z_args, // the arguments
  0, //arguments count
  AORB_methods_work_pending__Z_exceptions, // the declared exceptions
  AORB_MetainfoWrapper::AORB_method_work_pending__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _AORB_methods[] = 
{
  &AORB_method_AORB__LRAORB_,
  &AORB_method_GetClass__L_acdk_lang_RClass_,
  &AORB_method__doShutdown__Z,
  &AORB_method__initServer__V,
  &AORB_method__lookupFreePort__I,
  &AORB_method_connect_INL_org_omg_CORBA_RObject__V,
  &AORB_method_corbaloc_to_object_INLRString__L_org_omg_CORBA_RObject_,
  &AORB_method_createProxy_INLRObjectKey__LRServerDelegate_,
  &AORB_method_destroy__V,
  &AORB_method_getLocalHost__LRString_,
  &AORB_method_getLocalPort__I,
  &AORB_method_getORB__L_org_omg_CORBA_RORB_,
  &AORB_method_impl_is_ready_INL_acdk_lang_RObject__LRString_,
  &AORB_method_init_INLRStringArray_INLacdk_util_RProperties__V,
  &AORB_method_isOwnObjectId_INLRObjectKey__Z,
  &AORB_method_list_initial_services__LRStringArray_,
  &AORB_method_object_to_string_INL_org_omg_CORBA_RObject__LRString_,
  &AORB_method_perform_work__V,
  &AORB_method_port__I,
  &AORB_method_reset__V,
  &AORB_method_resolve_initial_references_INLRString__L_org_omg_CORBA_RObject_,
  &AORB_method_run__V,
  &AORB_method_serverHost__LRString_,
  &AORB_method_setGIOPVersion_II_V,
  &AORB_method_shutdown_Z_V,
  &AORB_method_start__V,
  &AORB_method_string_to_object_INLRString__L_org_omg_CORBA_RObject_,
  &AORB_method_work_pending__Z,
  0
};


struct AORB_MetaInfoInitializer
{  AORB_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = AORB::clazzInfo();
    ci->fields =  _AORB_fields;
    ci->methods =  _AORB_methods;
    ci->_scopeParent = acdkx_orb_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
AORB_MetaInfoInitializer AORB_MetaInfoInitializer_staticinstance__;


} // namespace acdkx
} // namespace orb


namespace acdkx { 
namespace orb { 


//static
::acdk::lang::RObject
CDRObjectReader_create_array(int length)
{
  return new ObjectArrayImpl<RCDRObjectReader>(length);
}

//static
::acdk::lang::RObject
CDRObjectReader_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class CDRObjectReader_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CDRObjectReader_method_CDRObjectReader_INLRReader_INLorg_omg_CORBA_RORB__LRCDRObjectReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CDRObjectReader((RReader)args[0].getObjectVar(), (org::omg::CORBA::RORB)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CDRObjectReader_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)CDRObjectReader::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CDRObjectReader_method__checkAlignment_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CDRObjectReader* This = dmi_cast<CDRObjectReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CDRObjectReader::_checkAlignment(args[0].getIntVar());
    else
        This->_checkAlignment(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CDRObjectReader_method_read_acdk_object_INL_acdk_lang_RClass__L_acdk_lang_RObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CDRObjectReader* This = dmi_cast<CDRObjectReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->CDRObjectReader::read_acdk_object((::acdk::lang::RClass)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->read_acdk_object((::acdk::lang::RClass)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CDRObjectReader_method_read_exception__LRThrowable__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CDRObjectReader* This = dmi_cast<CDRObjectReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->CDRObjectReader::read_exception();
    else
        ret = (::acdk::lang::RObject)This->read_exception();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CDRObjectReader_method_read_fq_object_I_L_acdk_lang_RObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CDRObjectReader* This = dmi_cast<CDRObjectReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->CDRObjectReader::read_fq_object(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->read_fq_object(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CDRObjectReader_method_read_struct_INLRObject_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CDRObjectReader* This = dmi_cast<CDRObjectReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CDRObjectReader::read_struct((RObject)args[0].getObjectVar(), args[1].getBoolVar());
    else
        This->read_struct((RObject)args[0].getObjectVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CDRObjectReader_method_read_struct_INLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CDRObjectReader* This = dmi_cast<CDRObjectReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CDRObjectReader::read_struct((RObject)args[0].getObjectVar());
    else
        This->read_struct((RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CDRObjectReader_fields__index_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CDRObjectReader* This = dmi_cast<CDRObjectReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_index, flags);
    else
      This->_index = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CDRObjectReader_fields__orb_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CDRObjectReader* This = dmi_cast<CDRObjectReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_orb, flags);
    else
      This->_orb = (org::omg::CORBA::RORB)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo CDRObjectReader_fields__index = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_index", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  CDRObjectReader_MetainfoWrapper::CDRObjectReader_fields__index_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CDRObjectReader_fields__orb = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_orb", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::omg::CORBA::RORB::clazzInfo(),
  CDRObjectReader_MetainfoWrapper::CDRObjectReader_fields__orb_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _CDRObjectReader_fields[] = 
{
  &CDRObjectReader_fields__index,
  &CDRObjectReader_fields__orb,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo CDRObjectReader_methods_CDRObjectReader_INLRReader_INLorg_omg_CORBA_RORB__LRCDRObjectReader__arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CDRObjectReader_methods_CDRObjectReader_INLRReader_INLorg_omg_CORBA_RORB__LRCDRObjectReader__arg_orb = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "orb", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::omg::CORBA::RORB::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CDRObjectReader_methods_CDRObjectReader_INLRReader_INLorg_omg_CORBA_RORB__LRCDRObjectReader__args[] = 
{
  &CDRObjectReader_methods_CDRObjectReader_INLRReader_INLorg_omg_CORBA_RORB__LRCDRObjectReader__arg_out,
  &CDRObjectReader_methods_CDRObjectReader_INLRReader_INLorg_omg_CORBA_RORB__LRCDRObjectReader__arg_orb,
  0
};

::acdk::lang::dmi::ClazzInfo* CDRObjectReader_methods_CDRObjectReader_INLRReader_INLorg_omg_CORBA_RORB__LRCDRObjectReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CDRObjectReader_method_CDRObjectReader_INLRReader_INLorg_omg_CORBA_RORB__LRCDRObjectReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "CDRObjectReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CDRObjectReader::clazzInfo(), // return type
  "_0_CDRObjectReader", // alternative name of method
  -1, // altlabelHashCode
  CDRObjectReader_methods_CDRObjectReader_INLRReader_INLorg_omg_CORBA_RORB__LRCDRObjectReader__args, // the arguments
  0, //arguments count
  CDRObjectReader_methods_CDRObjectReader_INLRReader_INLorg_omg_CORBA_RORB__LRCDRObjectReader__exceptions, // the declared exceptions
  CDRObjectReader_MetainfoWrapper::CDRObjectReader_method_CDRObjectReader_INLRReader_INLorg_omg_CORBA_RORB__LRCDRObjectReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CDRObjectReader_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CDRObjectReader_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CDRObjectReader_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_a_GetClass", // alternative name of method
  -1, // altlabelHashCode
  CDRObjectReader_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  CDRObjectReader_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  CDRObjectReader_MetainfoWrapper::CDRObjectReader_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CDRObjectReader_methods__checkAlignment_I_V_arg_align = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "align", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CDRObjectReader_methods__checkAlignment_I_V_args[] = 
{
  &CDRObjectReader_methods__checkAlignment_I_V_arg_align,
  0
};

::acdk::lang::dmi::ClazzInfo* CDRObjectReader_methods__checkAlignment_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CDRObjectReader_method__checkAlignment_I_V = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_checkAlignment", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9__checkAlignment", // alternative name of method
  -1, // altlabelHashCode
  CDRObjectReader_methods__checkAlignment_I_V_args, // the arguments
  0, //arguments count
  CDRObjectReader_methods__checkAlignment_I_V_exceptions, // the declared exceptions
  CDRObjectReader_MetainfoWrapper::CDRObjectReader_method__checkAlignment_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CDRObjectReader_methods_read_acdk_object_INL_acdk_lang_RClass__L_acdk_lang_RObject__arg_clz = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "clz", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CDRObjectReader_methods_read_acdk_object_INL_acdk_lang_RClass__L_acdk_lang_RObject__args[] = 
{
  &CDRObjectReader_methods_read_acdk_object_INL_acdk_lang_RClass__L_acdk_lang_RObject__arg_clz,
  0
};

::acdk::lang::dmi::ClazzInfo* CDRObjectReader_methods_read_acdk_object_INL_acdk_lang_RClass__L_acdk_lang_RObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CDRObjectReader_method_read_acdk_object_INL_acdk_lang_RClass__L_acdk_lang_RObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "read_acdk_object", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RObject::clazzInfo(), // return type
  "_3_read_acdk_object", // alternative name of method
  -1, // altlabelHashCode
  CDRObjectReader_methods_read_acdk_object_INL_acdk_lang_RClass__L_acdk_lang_RObject__args, // the arguments
  0, //arguments count
  CDRObjectReader_methods_read_acdk_object_INL_acdk_lang_RClass__L_acdk_lang_RObject__exceptions, // the declared exceptions
  CDRObjectReader_MetainfoWrapper::CDRObjectReader_method_read_acdk_object_INL_acdk_lang_RClass__L_acdk_lang_RObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CDRObjectReader_methods_read_exception__LRThrowable__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CDRObjectReader_methods_read_exception__LRThrowable__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CDRObjectReader_method_read_exception__LRThrowable_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "read_exception", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThrowable::clazzInfo(), // return type
  "_8_read_exception", // alternative name of method
  -1, // altlabelHashCode
  CDRObjectReader_methods_read_exception__LRThrowable__args, // the arguments
  0, //arguments count
  CDRObjectReader_methods_read_exception__LRThrowable__exceptions, // the declared exceptions
  CDRObjectReader_MetainfoWrapper::CDRObjectReader_method_read_exception__LRThrowable__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CDRObjectReader_methods_read_fq_object_I_L_acdk_lang_RObject__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CDRObjectReader_methods_read_fq_object_I_L_acdk_lang_RObject__args[] = 
{
  &CDRObjectReader_methods_read_fq_object_I_L_acdk_lang_RObject__arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* CDRObjectReader_methods_read_fq_object_I_L_acdk_lang_RObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CDRObjectReader_method_read_fq_object_I_L_acdk_lang_RObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "read_fq_object", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RObject::clazzInfo(), // return type
  "_5_read_fq_object", // alternative name of method
  -1, // altlabelHashCode
  CDRObjectReader_methods_read_fq_object_I_L_acdk_lang_RObject__args, // the arguments
  0, //arguments count
  CDRObjectReader_methods_read_fq_object_I_L_acdk_lang_RObject__exceptions, // the declared exceptions
  CDRObjectReader_MetainfoWrapper::CDRObjectReader_method_read_fq_object_I_L_acdk_lang_RObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CDRObjectReader_methods_read_struct_INLRObject_Z_V_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CDRObjectReader_methods_read_struct_INLRObject_Z_V_arg_withParent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "withParent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CDRObjectReader_methods_read_struct_INLRObject_Z_V_args[] = 
{
  &CDRObjectReader_methods_read_struct_INLRObject_Z_V_arg_obj,
  &CDRObjectReader_methods_read_struct_INLRObject_Z_V_arg_withParent,
  0
};

::acdk::lang::dmi::ClazzInfo* CDRObjectReader_methods_read_struct_INLRObject_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CDRObjectReader_method_read_struct_INLRObject_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "read_struct", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_read_struct", // alternative name of method
  -1, // altlabelHashCode
  CDRObjectReader_methods_read_struct_INLRObject_Z_V_args, // the arguments
  0, //arguments count
  CDRObjectReader_methods_read_struct_INLRObject_Z_V_exceptions, // the declared exceptions
  CDRObjectReader_MetainfoWrapper::CDRObjectReader_method_read_struct_INLRObject_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CDRObjectReader_methods_read_struct_INLRObject__V_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CDRObjectReader_methods_read_struct_INLRObject__V_args[] = 
{
  &CDRObjectReader_methods_read_struct_INLRObject__V_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* CDRObjectReader_methods_read_struct_INLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CDRObjectReader_method_read_struct_INLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "read_struct", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_read_struct", // alternative name of method
  -1, // altlabelHashCode
  CDRObjectReader_methods_read_struct_INLRObject__V_args, // the arguments
  0, //arguments count
  CDRObjectReader_methods_read_struct_INLRObject__V_exceptions, // the declared exceptions
  CDRObjectReader_MetainfoWrapper::CDRObjectReader_method_read_struct_INLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _CDRObjectReader_methods[] = 
{
  &CDRObjectReader_method_CDRObjectReader_INLRReader_INLorg_omg_CORBA_RORB__LRCDRObjectReader_,
  &CDRObjectReader_method_GetClass__L_acdk_lang_RClass_,
  &CDRObjectReader_method__checkAlignment_I_V,
  &CDRObjectReader_method_read_acdk_object_INL_acdk_lang_RClass__L_acdk_lang_RObject_,
  &CDRObjectReader_method_read_exception__LRThrowable_,
  &CDRObjectReader_method_read_fq_object_I_L_acdk_lang_RObject_,
  &CDRObjectReader_method_read_struct_INLRObject_Z_V,
  &CDRObjectReader_method_read_struct_INLRObject__V,
  0
};


struct CDRObjectReader_MetaInfoInitializer
{  CDRObjectReader_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = CDRObjectReader::clazzInfo();
    ci->fields =  _CDRObjectReader_fields;
    ci->methods =  _CDRObjectReader_methods;
    ci->_scopeParent = acdkx_orb_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
CDRObjectReader_MetaInfoInitializer CDRObjectReader_MetaInfoInitializer_staticinstance__;


} // namespace acdkx
} // namespace orb


namespace acdkx { 
namespace orb { 


//static
::acdk::lang::RObject
CDRObjectWriter_create_array(int length)
{
  return new ObjectArrayImpl<RCDRObjectWriter>(length);
}

//static
::acdk::lang::RObject
CDRObjectWriter_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class CDRObjectWriter_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CDRObjectWriter_method_CDRObjectWriter_INLRWriter_INLorg_omg_CORBA_RORB__LRCDRObjectWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CDRObjectWriter((RWriter)args[0].getObjectVar(), (org::omg::CORBA::RORB)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CDRObjectWriter_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)CDRObjectWriter::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CDRObjectWriter_method__checkAlignment_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CDRObjectWriter* This = dmi_cast<CDRObjectWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CDRObjectWriter::_checkAlignment(args[0].getIntVar());
    else
        This->_checkAlignment(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CDRObjectWriter_method_create_input_stream__LRInputStream__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CDRObjectWriter* This = dmi_cast<CDRObjectWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->CDRObjectWriter::create_input_stream();
    else
        ret = (::acdk::lang::RObject)This->create_input_stream();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CDRObjectWriter_method_orb__Lorg_omg_CORBA_RORB__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CDRObjectWriter* This = dmi_cast<CDRObjectWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->CDRObjectWriter::orb();
    else
        ret = (::acdk::lang::RObject)This->orb();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CDRObjectWriter_method_writeClassDescriptor_INLRClass_INLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CDRObjectWriter* This = dmi_cast<CDRObjectWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CDRObjectWriter::writeClassDescriptor((RClass)args[0].getObjectVar(), (RObject)args[1].getObjectVar());
    else
        This->writeClassDescriptor((RClass)args[0].getObjectVar(), (RObject)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CDRObjectWriter_method_writeUnshared_INLRClass_INLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CDRObjectWriter* This = dmi_cast<CDRObjectWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CDRObjectWriter::writeUnshared((RClass)args[0].getObjectVar(), (RObject)args[1].getObjectVar());
    else
        This->writeUnshared((RClass)args[0].getObjectVar(), (RObject)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CDRObjectWriter_method_write_acdk_object_INL_acdk_lang_RObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CDRObjectWriter* This = dmi_cast<CDRObjectWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CDRObjectWriter::write_acdk_object((::acdk::lang::RObject)args[0].getObjectVar());
    else
        This->write_acdk_object((::acdk::lang::RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CDRObjectWriter_method_write_exception_INLRThrowable__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CDRObjectWriter* This = dmi_cast<CDRObjectWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CDRObjectWriter::write_exception((RThrowable)args[0].getObjectVar());
    else
        This->write_exception((RThrowable)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CDRObjectWriter_method_write_fq_object_INLRObject_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CDRObjectWriter* This = dmi_cast<CDRObjectWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CDRObjectWriter::write_fq_object((RObject)args[0].getObjectVar(), args[1].getIntVar());
    else
        This->write_fq_object((RObject)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CDRObjectWriter_method_write_repid_INL_acdk_lang_RObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CDRObjectWriter* This = dmi_cast<CDRObjectWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CDRObjectWriter::write_repid((::acdk::lang::RObject)args[0].getObjectVar());
    else
        This->write_repid((::acdk::lang::RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CDRObjectWriter_method_write_struct_INL_acdk_lang_RObject_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CDRObjectWriter* This = dmi_cast<CDRObjectWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CDRObjectWriter::write_struct((::acdk::lang::RObject)args[0].getObjectVar(), args[1].getBoolVar());
    else
        This->write_struct((::acdk::lang::RObject)args[0].getObjectVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CDRObjectWriter_method_write_struct_INL_acdk_lang_RObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CDRObjectWriter* This = dmi_cast<CDRObjectWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CDRObjectWriter::write_struct((::acdk::lang::RObject)args[0].getObjectVar());
    else
        This->write_struct((::acdk::lang::RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CDRObjectWriter_fields__index_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CDRObjectWriter* This = dmi_cast<CDRObjectWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_index, flags);
    else
      This->_index = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CDRObjectWriter_fields__orb_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CDRObjectWriter* This = dmi_cast<CDRObjectWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_orb, flags);
    else
      This->_orb = (org::omg::CORBA::RORB)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo CDRObjectWriter_fields__index = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_index", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  CDRObjectWriter_MetainfoWrapper::CDRObjectWriter_fields__index_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CDRObjectWriter_fields__orb = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_orb", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::omg::CORBA::RORB::clazzInfo(),
  CDRObjectWriter_MetainfoWrapper::CDRObjectWriter_fields__orb_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _CDRObjectWriter_fields[] = 
{
  &CDRObjectWriter_fields__index,
  &CDRObjectWriter_fields__orb,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo CDRObjectWriter_methods_CDRObjectWriter_INLRWriter_INLorg_omg_CORBA_RORB__LRCDRObjectWriter__arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CDRObjectWriter_methods_CDRObjectWriter_INLRWriter_INLorg_omg_CORBA_RORB__LRCDRObjectWriter__arg_orb = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "orb", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::omg::CORBA::RORB::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CDRObjectWriter_methods_CDRObjectWriter_INLRWriter_INLorg_omg_CORBA_RORB__LRCDRObjectWriter__args[] = 
{
  &CDRObjectWriter_methods_CDRObjectWriter_INLRWriter_INLorg_omg_CORBA_RORB__LRCDRObjectWriter__arg_out,
  &CDRObjectWriter_methods_CDRObjectWriter_INLRWriter_INLorg_omg_CORBA_RORB__LRCDRObjectWriter__arg_orb,
  0
};

::acdk::lang::dmi::ClazzInfo* CDRObjectWriter_methods_CDRObjectWriter_INLRWriter_INLorg_omg_CORBA_RORB__LRCDRObjectWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CDRObjectWriter_method_CDRObjectWriter_INLRWriter_INLorg_omg_CORBA_RORB__LRCDRObjectWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "CDRObjectWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CDRObjectWriter::clazzInfo(), // return type
  "_0_CDRObjectWriter", // alternative name of method
  -1, // altlabelHashCode
  CDRObjectWriter_methods_CDRObjectWriter_INLRWriter_INLorg_omg_CORBA_RORB__LRCDRObjectWriter__args, // the arguments
  0, //arguments count
  CDRObjectWriter_methods_CDRObjectWriter_INLRWriter_INLorg_omg_CORBA_RORB__LRCDRObjectWriter__exceptions, // the declared exceptions
  CDRObjectWriter_MetainfoWrapper::CDRObjectWriter_method_CDRObjectWriter_INLRWriter_INLorg_omg_CORBA_RORB__LRCDRObjectWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CDRObjectWriter_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CDRObjectWriter_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CDRObjectWriter_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_d_GetClass", // alternative name of method
  -1, // altlabelHashCode
  CDRObjectWriter_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  CDRObjectWriter_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  CDRObjectWriter_MetainfoWrapper::CDRObjectWriter_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CDRObjectWriter_methods__checkAlignment_I_V_arg_align = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "align", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CDRObjectWriter_methods__checkAlignment_I_V_args[] = 
{
  &CDRObjectWriter_methods__checkAlignment_I_V_arg_align,
  0
};

::acdk::lang::dmi::ClazzInfo* CDRObjectWriter_methods__checkAlignment_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CDRObjectWriter_method__checkAlignment_I_V = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_checkAlignment", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c__checkAlignment", // alternative name of method
  -1, // altlabelHashCode
  CDRObjectWriter_methods__checkAlignment_I_V_args, // the arguments
  0, //arguments count
  CDRObjectWriter_methods__checkAlignment_I_V_exceptions, // the declared exceptions
  CDRObjectWriter_MetainfoWrapper::CDRObjectWriter_method__checkAlignment_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CDRObjectWriter_methods_create_input_stream__LRInputStream__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CDRObjectWriter_methods_create_input_stream__LRInputStream__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CDRObjectWriter_method_create_input_stream__LRInputStream_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create_input_stream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInputStream::clazzInfo(), // return type
  "_4_create_input_stream", // alternative name of method
  -1, // altlabelHashCode
  CDRObjectWriter_methods_create_input_stream__LRInputStream__args, // the arguments
  0, //arguments count
  CDRObjectWriter_methods_create_input_stream__LRInputStream__exceptions, // the declared exceptions
  CDRObjectWriter_MetainfoWrapper::CDRObjectWriter_method_create_input_stream__LRInputStream__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CDRObjectWriter_methods_orb__Lorg_omg_CORBA_RORB__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CDRObjectWriter_methods_orb__Lorg_omg_CORBA_RORB__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CDRObjectWriter_method_orb__Lorg_omg_CORBA_RORB_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "orb", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::omg::CORBA::RORB::clazzInfo(), // return type
  "_3_orb", // alternative name of method
  -1, // altlabelHashCode
  CDRObjectWriter_methods_orb__Lorg_omg_CORBA_RORB__args, // the arguments
  0, //arguments count
  CDRObjectWriter_methods_orb__Lorg_omg_CORBA_RORB__exceptions, // the declared exceptions
  CDRObjectWriter_MetainfoWrapper::CDRObjectWriter_method_orb__Lorg_omg_CORBA_RORB__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CDRObjectWriter_methods_writeClassDescriptor_INLRClass_INLRObject__V_arg_cls = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cls", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CDRObjectWriter_methods_writeClassDescriptor_INLRClass_INLRObject__V_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CDRObjectWriter_methods_writeClassDescriptor_INLRClass_INLRObject__V_args[] = 
{
  &CDRObjectWriter_methods_writeClassDescriptor_INLRClass_INLRObject__V_arg_cls,
  &CDRObjectWriter_methods_writeClassDescriptor_INLRClass_INLRObject__V_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* CDRObjectWriter_methods_writeClassDescriptor_INLRClass_INLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CDRObjectWriter_method_writeClassDescriptor_INLRClass_INLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeClassDescriptor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_writeClassDescriptor", // alternative name of method
  -1, // altlabelHashCode
  CDRObjectWriter_methods_writeClassDescriptor_INLRClass_INLRObject__V_args, // the arguments
  0, //arguments count
  CDRObjectWriter_methods_writeClassDescriptor_INLRClass_INLRObject__V_exceptions, // the declared exceptions
  CDRObjectWriter_MetainfoWrapper::CDRObjectWriter_method_writeClassDescriptor_INLRClass_INLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CDRObjectWriter_methods_writeUnshared_INLRClass_INLRObject__V_arg_cls = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cls", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CDRObjectWriter_methods_writeUnshared_INLRClass_INLRObject__V_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CDRObjectWriter_methods_writeUnshared_INLRClass_INLRObject__V_args[] = 
{
  &CDRObjectWriter_methods_writeUnshared_INLRClass_INLRObject__V_arg_cls,
  &CDRObjectWriter_methods_writeUnshared_INLRClass_INLRObject__V_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* CDRObjectWriter_methods_writeUnshared_INLRClass_INLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CDRObjectWriter_method_writeUnshared_INLRClass_INLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeUnshared", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_writeUnshared", // alternative name of method
  -1, // altlabelHashCode
  CDRObjectWriter_methods_writeUnshared_INLRClass_INLRObject__V_args, // the arguments
  0, //arguments count
  CDRObjectWriter_methods_writeUnshared_INLRClass_INLRObject__V_exceptions, // the declared exceptions
  CDRObjectWriter_MetainfoWrapper::CDRObjectWriter_method_writeUnshared_INLRClass_INLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CDRObjectWriter_methods_write_acdk_object_INL_acdk_lang_RObject__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CDRObjectWriter_methods_write_acdk_object_INL_acdk_lang_RObject__V_args[] = 
{
  &CDRObjectWriter_methods_write_acdk_object_INL_acdk_lang_RObject__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* CDRObjectWriter_methods_write_acdk_object_INL_acdk_lang_RObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CDRObjectWriter_method_write_acdk_object_INL_acdk_lang_RObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "write_acdk_object", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_write_acdk_object", // alternative name of method
  -1, // altlabelHashCode
  CDRObjectWriter_methods_write_acdk_object_INL_acdk_lang_RObject__V_args, // the arguments
  0, //arguments count
  CDRObjectWriter_methods_write_acdk_object_INL_acdk_lang_RObject__V_exceptions, // the declared exceptions
  CDRObjectWriter_MetainfoWrapper::CDRObjectWriter_method_write_acdk_object_INL_acdk_lang_RObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CDRObjectWriter_methods_write_exception_INLRThrowable__V_arg_ex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThrowable::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CDRObjectWriter_methods_write_exception_INLRThrowable__V_args[] = 
{
  &CDRObjectWriter_methods_write_exception_INLRThrowable__V_arg_ex,
  0
};

::acdk::lang::dmi::ClazzInfo* CDRObjectWriter_methods_write_exception_INLRThrowable__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CDRObjectWriter_method_write_exception_INLRThrowable__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "write_exception", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_write_exception", // alternative name of method
  -1, // altlabelHashCode
  CDRObjectWriter_methods_write_exception_INLRThrowable__V_args, // the arguments
  0, //arguments count
  CDRObjectWriter_methods_write_exception_INLRThrowable__V_exceptions, // the declared exceptions
  CDRObjectWriter_MetainfoWrapper::CDRObjectWriter_method_write_exception_INLRThrowable__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CDRObjectWriter_methods_write_fq_object_INLRObject_I_V_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CDRObjectWriter_methods_write_fq_object_INLRObject_I_V_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CDRObjectWriter_methods_write_fq_object_INLRObject_I_V_args[] = 
{
  &CDRObjectWriter_methods_write_fq_object_INLRObject_I_V_arg_obj,
  &CDRObjectWriter_methods_write_fq_object_INLRObject_I_V_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* CDRObjectWriter_methods_write_fq_object_INLRObject_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CDRObjectWriter_method_write_fq_object_INLRObject_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "write_fq_object", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_write_fq_object", // alternative name of method
  -1, // altlabelHashCode
  CDRObjectWriter_methods_write_fq_object_INLRObject_I_V_args, // the arguments
  0, //arguments count
  CDRObjectWriter_methods_write_fq_object_INLRObject_I_V_exceptions, // the declared exceptions
  CDRObjectWriter_MetainfoWrapper::CDRObjectWriter_method_write_fq_object_INLRObject_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CDRObjectWriter_methods_write_repid_INL_acdk_lang_RObject__V_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CDRObjectWriter_methods_write_repid_INL_acdk_lang_RObject__V_args[] = 
{
  &CDRObjectWriter_methods_write_repid_INL_acdk_lang_RObject__V_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* CDRObjectWriter_methods_write_repid_INL_acdk_lang_RObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CDRObjectWriter_method_write_repid_INL_acdk_lang_RObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "write_repid", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_write_repid", // alternative name of method
  -1, // altlabelHashCode
  CDRObjectWriter_methods_write_repid_INL_acdk_lang_RObject__V_args, // the arguments
  0, //arguments count
  CDRObjectWriter_methods_write_repid_INL_acdk_lang_RObject__V_exceptions, // the declared exceptions
  CDRObjectWriter_MetainfoWrapper::CDRObjectWriter_method_write_repid_INL_acdk_lang_RObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CDRObjectWriter_methods_write_struct_INL_acdk_lang_RObject_Z_V_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CDRObjectWriter_methods_write_struct_INL_acdk_lang_RObject_Z_V_arg_withParents = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "withParents", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CDRObjectWriter_methods_write_struct_INL_acdk_lang_RObject_Z_V_args[] = 
{
  &CDRObjectWriter_methods_write_struct_INL_acdk_lang_RObject_Z_V_arg_obj,
  &CDRObjectWriter_methods_write_struct_INL_acdk_lang_RObject_Z_V_arg_withParents,
  0
};

::acdk::lang::dmi::ClazzInfo* CDRObjectWriter_methods_write_struct_INL_acdk_lang_RObject_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CDRObjectWriter_method_write_struct_INL_acdk_lang_RObject_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "write_struct", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_write_struct", // alternative name of method
  -1, // altlabelHashCode
  CDRObjectWriter_methods_write_struct_INL_acdk_lang_RObject_Z_V_args, // the arguments
  0, //arguments count
  CDRObjectWriter_methods_write_struct_INL_acdk_lang_RObject_Z_V_exceptions, // the declared exceptions
  CDRObjectWriter_MetainfoWrapper::CDRObjectWriter_method_write_struct_INL_acdk_lang_RObject_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CDRObjectWriter_methods_write_struct_INL_acdk_lang_RObject__V_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CDRObjectWriter_methods_write_struct_INL_acdk_lang_RObject__V_args[] = 
{
  &CDRObjectWriter_methods_write_struct_INL_acdk_lang_RObject__V_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* CDRObjectWriter_methods_write_struct_INL_acdk_lang_RObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CDRObjectWriter_method_write_struct_INL_acdk_lang_RObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "write_struct", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_write_struct", // alternative name of method
  -1, // altlabelHashCode
  CDRObjectWriter_methods_write_struct_INL_acdk_lang_RObject__V_args, // the arguments
  0, //arguments count
  CDRObjectWriter_methods_write_struct_INL_acdk_lang_RObject__V_exceptions, // the declared exceptions
  CDRObjectWriter_MetainfoWrapper::CDRObjectWriter_method_write_struct_INL_acdk_lang_RObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _CDRObjectWriter_methods[] = 
{
  &CDRObjectWriter_method_CDRObjectWriter_INLRWriter_INLorg_omg_CORBA_RORB__LRCDRObjectWriter_,
  &CDRObjectWriter_method_GetClass__L_acdk_lang_RClass_,
  &CDRObjectWriter_method__checkAlignment_I_V,
  &CDRObjectWriter_method_create_input_stream__LRInputStream_,
  &CDRObjectWriter_method_orb__Lorg_omg_CORBA_RORB_,
  &CDRObjectWriter_method_writeClassDescriptor_INLRClass_INLRObject__V,
  &CDRObjectWriter_method_writeUnshared_INLRClass_INLRObject__V,
  &CDRObjectWriter_method_write_acdk_object_INL_acdk_lang_RObject__V,
  &CDRObjectWriter_method_write_exception_INLRThrowable__V,
  &CDRObjectWriter_method_write_fq_object_INLRObject_I_V,
  &CDRObjectWriter_method_write_repid_INL_acdk_lang_RObject__V,
  &CDRObjectWriter_method_write_struct_INL_acdk_lang_RObject_Z_V,
  &CDRObjectWriter_method_write_struct_INL_acdk_lang_RObject__V,
  0
};


struct CDRObjectWriter_MetaInfoInitializer
{  CDRObjectWriter_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = CDRObjectWriter::clazzInfo();
    ci->fields =  _CDRObjectWriter_fields;
    ci->methods =  _CDRObjectWriter_methods;
    ci->_scopeParent = acdkx_orb_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
CDRObjectWriter_MetaInfoInitializer CDRObjectWriter_MetaInfoInitializer_staticinstance__;


} // namespace acdkx
} // namespace orb


namespace acdkx { 
namespace orb { 


//static
::acdk::lang::RObject
OrbException_create_array(int length)
{
  return new ObjectArrayImpl<ROrbException>(length);
}

//static
::acdk::lang::RObject
OrbException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class OrbException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OrbException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)OrbException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OrbException_method_OrbException__LROrbException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new OrbException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OrbException_method_OrbException_INLRString__LROrbException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new OrbException((RString)args[0].getObjectVar());
    return methinf;
  }
};


void ThrowException_OrbException(IN(::acdk::lang::RThrowable) ex)
{
  throw ROrbException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _OrbException_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* OrbException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* OrbException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OrbException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  OrbException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  OrbException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  OrbException_MetainfoWrapper::OrbException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* OrbException_methods_OrbException__LROrbException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* OrbException_methods_OrbException__LROrbException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OrbException_method_OrbException__LROrbException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "OrbException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  OrbException::clazzInfo(), // return type
  "_0_OrbException", // alternative name of method
  -1, // altlabelHashCode
  OrbException_methods_OrbException__LROrbException__args, // the arguments
  0, //arguments count
  OrbException_methods_OrbException__LROrbException__exceptions, // the declared exceptions
  OrbException_MetainfoWrapper::OrbException_method_OrbException__LROrbException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OrbException_methods_OrbException_INLRString__LROrbException__arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OrbException_methods_OrbException_INLRString__LROrbException__args[] = 
{
  &OrbException_methods_OrbException_INLRString__LROrbException__arg_msg,
  0
};

::acdk::lang::dmi::ClazzInfo* OrbException_methods_OrbException_INLRString__LROrbException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OrbException_method_OrbException_INLRString__LROrbException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "OrbException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  OrbException::clazzInfo(), // return type
  "_1_OrbException", // alternative name of method
  -1, // altlabelHashCode
  OrbException_methods_OrbException_INLRString__LROrbException__args, // the arguments
  0, //arguments count
  OrbException_methods_OrbException_INLRString__LROrbException__exceptions, // the declared exceptions
  OrbException_MetainfoWrapper::OrbException_method_OrbException_INLRString__LROrbException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _OrbException_methods[] = 
{
  &OrbException_method_GetClass__L_acdk_lang_RClass_,
  &OrbException_method_OrbException__LROrbException_,
  &OrbException_method_OrbException_INLRString__LROrbException_,
  0
};


struct OrbException_MetaInfoInitializer
{  OrbException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = OrbException::clazzInfo();
    ci->fields =  _OrbException_fields;
    ci->methods =  _OrbException_methods;
    ci->_scopeParent = acdkx_orb_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
OrbException_MetaInfoInitializer OrbException_MetaInfoInitializer_staticinstance__;


struct OrbException_clazzInfo_ClazzAttributesResInitializer1
{
  OrbException_clazzInfo_ClazzAttributesResInitializer1()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)OrbException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_OrbException));
  }
};

OrbException_clazzInfo_ClazzAttributesResInitializer1 OrbException_clazzInfo_ClazzAttributesResInitializer1_instance;



} // namespace acdkx
} // namespace orb


namespace acdkx { 
namespace orb { 


//static
::acdk::lang::RObject
OrbConnection_create_array(int length)
{
  return new ObjectArrayImpl<ROrbConnection>(length);
}

//static
::acdk::lang::RObject
OrbConnection_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class OrbConnection_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OrbConnection_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)OrbConnection::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OrbConnection_method_OrbConnection_LRString_I_LROrbConnection__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new OrbConnection((RString)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OrbConnection_method_compareTo_INLRObject__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OrbConnection* This = dmi_cast<OrbConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->OrbConnection::compareTo((RObject)args[0].getObjectVar());
    else
      ret = This->compareTo((RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OrbConnection_method_compareTo_INLROrbConnection__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OrbConnection* This = dmi_cast<OrbConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->OrbConnection::compareTo((ROrbConnection)args[0].getObjectVar());
    else
      ret = This->compareTo((ROrbConnection)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OrbConnection_method_connect_INLRServerDelegate__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OrbConnection* This = dmi_cast<OrbConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->OrbConnection::connect((RServerDelegate)args[0].getObjectVar());
    else
        This->connect((RServerDelegate)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OrbConnection_method_disconnect_INLRServerDelegate__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OrbConnection* This = dmi_cast<OrbConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->OrbConnection::disconnect((RServerDelegate)args[0].getObjectVar());
    else
        This->disconnect((RServerDelegate)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OrbConnection_method_disconnect__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OrbConnection* This = dmi_cast<OrbConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->OrbConnection::disconnect();
    else
        This->disconnect();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OrbConnection_method_nextRequestId__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OrbConnection* This = dmi_cast<OrbConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->OrbConnection::nextRequestId();
    else
      ret = This->nextRequestId();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  OrbConnection_fields__nextRequestId_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    OrbConnection* This = dmi_cast<OrbConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_nextRequestId, flags);
    else
      This->_nextRequestId = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  OrbConnection_fields_network_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    OrbConnection* This = dmi_cast<OrbConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->network, flags);
    else
      This->network = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  OrbConnection_fields_objects_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    OrbConnection* This = dmi_cast<OrbConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->objects, flags);
    else
      This->objects = (acdk::util::RArrayList)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  OrbConnection_fields_port_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    OrbConnection* This = dmi_cast<OrbConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->port, flags);
    else
      This->port = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  OrbConnection_fields_socket_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    OrbConnection* This = dmi_cast<OrbConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->socket, flags);
    else
      This->socket = (RSocket)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo OrbConnection_fields__nextRequestId = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_nextRequestId", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  OrbConnection_MetainfoWrapper::OrbConnection_fields__nextRequestId_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo OrbConnection_fields_network = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "network", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  OrbConnection_MetainfoWrapper::OrbConnection_fields_network_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo OrbConnection_fields_objects = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "objects", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RArrayList::clazzInfo(),
  OrbConnection_MetainfoWrapper::OrbConnection_fields_objects_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo OrbConnection_fields_port = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "port", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  OrbConnection_MetainfoWrapper::OrbConnection_fields_port_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo OrbConnection_fields_socket = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "socket", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSocket::clazzInfo(),
  OrbConnection_MetainfoWrapper::OrbConnection_fields_socket_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _OrbConnection_fields[] = 
{
  &OrbConnection_fields__nextRequestId,
  &OrbConnection_fields_network,
  &OrbConnection_fields_objects,
  &OrbConnection_fields_port,
  &OrbConnection_fields_socket,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* OrbConnection_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* OrbConnection_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OrbConnection_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_7_GetClass", // alternative name of method
  -1, // altlabelHashCode
  OrbConnection_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  OrbConnection_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  OrbConnection_MetainfoWrapper::OrbConnection_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OrbConnection_methods_OrbConnection_LRString_I_LROrbConnection__arg_net = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "net", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo OrbConnection_methods_OrbConnection_LRString_I_LROrbConnection__arg_p = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "p", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OrbConnection_methods_OrbConnection_LRString_I_LROrbConnection__args[] = 
{
  &OrbConnection_methods_OrbConnection_LRString_I_LROrbConnection__arg_net,
  &OrbConnection_methods_OrbConnection_LRString_I_LROrbConnection__arg_p,
  0
};

::acdk::lang::dmi::ClazzInfo* OrbConnection_methods_OrbConnection_LRString_I_LROrbConnection__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OrbConnection_method_OrbConnection_LRString_I_LROrbConnection_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "OrbConnection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  OrbConnection::clazzInfo(), // return type
  "_0_OrbConnection", // alternative name of method
  -1, // altlabelHashCode
  OrbConnection_methods_OrbConnection_LRString_I_LROrbConnection__args, // the arguments
  0, //arguments count
  OrbConnection_methods_OrbConnection_LRString_I_LROrbConnection__exceptions, // the declared exceptions
  OrbConnection_MetainfoWrapper::OrbConnection_method_OrbConnection_LRString_I_LROrbConnection__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OrbConnection_methods_compareTo_INLRObject__I_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OrbConnection_methods_compareTo_INLRObject__I_args[] = 
{
  &OrbConnection_methods_compareTo_INLRObject__I_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* OrbConnection_methods_compareTo_INLRObject__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OrbConnection_method_compareTo_INLRObject__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "compareTo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1_compareTo", // alternative name of method
  -1, // altlabelHashCode
  OrbConnection_methods_compareTo_INLRObject__I_args, // the arguments
  0, //arguments count
  OrbConnection_methods_compareTo_INLRObject__I_exceptions, // the declared exceptions
  OrbConnection_MetainfoWrapper::OrbConnection_method_compareTo_INLRObject__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OrbConnection_methods_compareTo_INLROrbConnection__I_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ROrbConnection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OrbConnection_methods_compareTo_INLROrbConnection__I_args[] = 
{
  &OrbConnection_methods_compareTo_INLROrbConnection__I_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* OrbConnection_methods_compareTo_INLROrbConnection__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OrbConnection_method_compareTo_INLROrbConnection__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "compareTo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2_compareTo", // alternative name of method
  -1, // altlabelHashCode
  OrbConnection_methods_compareTo_INLROrbConnection__I_args, // the arguments
  0, //arguments count
  OrbConnection_methods_compareTo_INLROrbConnection__I_exceptions, // the declared exceptions
  OrbConnection_MetainfoWrapper::OrbConnection_method_compareTo_INLROrbConnection__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OrbConnection_methods_connect_INLRServerDelegate__V_arg_sd = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sd", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RServerDelegate::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OrbConnection_methods_connect_INLRServerDelegate__V_args[] = 
{
  &OrbConnection_methods_connect_INLRServerDelegate__V_arg_sd,
  0
};

::acdk::lang::dmi::ClazzInfo* OrbConnection_methods_connect_INLRServerDelegate__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OrbConnection_method_connect_INLRServerDelegate__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "connect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_connect", // alternative name of method
  -1, // altlabelHashCode
  OrbConnection_methods_connect_INLRServerDelegate__V_args, // the arguments
  0, //arguments count
  OrbConnection_methods_connect_INLRServerDelegate__V_exceptions, // the declared exceptions
  OrbConnection_MetainfoWrapper::OrbConnection_method_connect_INLRServerDelegate__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OrbConnection_methods_disconnect_INLRServerDelegate__V_arg_sd = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sd", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RServerDelegate::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OrbConnection_methods_disconnect_INLRServerDelegate__V_args[] = 
{
  &OrbConnection_methods_disconnect_INLRServerDelegate__V_arg_sd,
  0
};

::acdk::lang::dmi::ClazzInfo* OrbConnection_methods_disconnect_INLRServerDelegate__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OrbConnection_method_disconnect_INLRServerDelegate__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "disconnect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_disconnect", // alternative name of method
  -1, // altlabelHashCode
  OrbConnection_methods_disconnect_INLRServerDelegate__V_args, // the arguments
  0, //arguments count
  OrbConnection_methods_disconnect_INLRServerDelegate__V_exceptions, // the declared exceptions
  OrbConnection_MetainfoWrapper::OrbConnection_method_disconnect_INLRServerDelegate__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* OrbConnection_methods_disconnect__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* OrbConnection_methods_disconnect__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OrbConnection_method_disconnect__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "disconnect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_disconnect", // alternative name of method
  -1, // altlabelHashCode
  OrbConnection_methods_disconnect__V_args, // the arguments
  0, //arguments count
  OrbConnection_methods_disconnect__V_exceptions, // the declared exceptions
  OrbConnection_MetainfoWrapper::OrbConnection_method_disconnect__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* OrbConnection_methods_nextRequestId__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* OrbConnection_methods_nextRequestId__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OrbConnection_method_nextRequestId__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nextRequestId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_nextRequestId", // alternative name of method
  -1, // altlabelHashCode
  OrbConnection_methods_nextRequestId__I_args, // the arguments
  0, //arguments count
  OrbConnection_methods_nextRequestId__I_exceptions, // the declared exceptions
  OrbConnection_MetainfoWrapper::OrbConnection_method_nextRequestId__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _OrbConnection_methods[] = 
{
  &OrbConnection_method_GetClass__L_acdk_lang_RClass_,
  &OrbConnection_method_OrbConnection_LRString_I_LROrbConnection_,
  &OrbConnection_method_compareTo_INLRObject__I,
  &OrbConnection_method_compareTo_INLROrbConnection__I,
  &OrbConnection_method_connect_INLRServerDelegate__V,
  &OrbConnection_method_disconnect_INLRServerDelegate__V,
  &OrbConnection_method_disconnect__V,
  &OrbConnection_method_nextRequestId__I,
  0
};


struct OrbConnection_MetaInfoInitializer
{  OrbConnection_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = OrbConnection::clazzInfo();
    ci->fields =  _OrbConnection_fields;
    ci->methods =  _OrbConnection_methods;
    ci->_scopeParent = acdkx_orb_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
OrbConnection_MetaInfoInitializer OrbConnection_MetaInfoInitializer_staticinstance__;


} // namespace acdkx
} // namespace orb


namespace acdkx { 
namespace orb { 


//static
::acdk::lang::RObject
ServerDelegate_create_array(int length)
{
  return new ObjectArrayImpl<RServerDelegate>(length);
}

//static
::acdk::lang::RObject
ServerDelegate_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ServerDelegate_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerDelegate_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ServerDelegate::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerDelegate_method_ServerDelegate__LRServerDelegate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ServerDelegate();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerDelegate_method_ServerDelegate_INLRString__LRServerDelegate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ServerDelegate((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerDelegate_method_ServerDelegate_INLRORB_INLRString__LRServerDelegate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ServerDelegate((RORB)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerDelegate_method_ServerDelegate_INLRORB_INLRObjectKey__LRServerDelegate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ServerDelegate((RORB)args[0].getObjectVar(), (RObjectKey)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerDelegate_method__get_delegate__L_org_omg_CORBA_portable_RDelegate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerDelegate* This = dmi_cast<ServerDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ServerDelegate::_get_delegate();
    else
        ret = (::acdk::lang::RObject)This->_get_delegate();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerDelegate_method__invoke_INL_org_omg_CORBA_portable_ROutputStream__L_org_omg_CORBA_portable_RInputStream__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerDelegate* This = dmi_cast<ServerDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ServerDelegate::_invoke((::org::omg::CORBA::portable::ROutputStream)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->_invoke((::org::omg::CORBA::portable::ROutputStream)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerDelegate_method__releaseReply_INL_org_omg_CORBA_portable_RInputStream__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerDelegate* This = dmi_cast<ServerDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ServerDelegate::_releaseReply((::org::omg::CORBA::portable::RInputStream)args[0].getObjectVar());
    else
        This->_releaseReply((::org::omg::CORBA::portable::RInputStream)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerDelegate_method__request_INLRString_Z_L_org_omg_CORBA_portable_ROutputStream__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerDelegate* This = dmi_cast<ServerDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ServerDelegate::_request((RString)args[0].getObjectVar(), args[1].getBoolVar());
    else
        ret = (::acdk::lang::RObject)This->_request((RString)args[0].getObjectVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerDelegate_method__set_delegate_INL_org_omg_CORBA_portable_RDelegate__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerDelegate* This = dmi_cast<ServerDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ServerDelegate::_set_delegate((::org::omg::CORBA::portable::RDelegate)args[0].getObjectVar());
    else
        This->_set_delegate((::org::omg::CORBA::portable::RDelegate)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerDelegate_method_duplicate__L_org_omg_CORBA_RObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerDelegate* This = dmi_cast<ServerDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ServerDelegate::duplicate();
    else
        ret = (::acdk::lang::RObject)This->duplicate();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerDelegate_method_duplicate_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerDelegate* This = dmi_cast<ServerDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ServerDelegate::duplicate((::org::omg::CORBA::RObject)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->duplicate((::org::omg::CORBA::RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerDelegate_method_finalize__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerDelegate* This = dmi_cast<ServerDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ServerDelegate::finalize();
    else
        This->finalize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerDelegate_method_get_interface_def__L_org_omg_CORBA_RObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerDelegate* This = dmi_cast<ServerDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ServerDelegate::get_interface_def();
    else
        ret = (::acdk::lang::RObject)This->get_interface_def();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerDelegate_method_get_interface_def_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerDelegate* This = dmi_cast<ServerDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ServerDelegate::get_interface_def((::org::omg::CORBA::RObject)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->get_interface_def((::org::omg::CORBA::RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerDelegate_method_get_typeid__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerDelegate* This = dmi_cast<ServerDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ServerDelegate::get_typeid();
    else
        ret = (::acdk::lang::RObject)This->get_typeid();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerDelegate_method_hash_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerDelegate* This = dmi_cast<ServerDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ServerDelegate::hash(args[0].getIntVar());
    else
      ret = This->hash(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerDelegate_method_hash_INL_org_omg_CORBA_RObject_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerDelegate* This = dmi_cast<ServerDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ServerDelegate::hash((::org::omg::CORBA::RObject)args[0].getObjectVar(), args[1].getIntVar());
    else
      ret = This->hash((::org::omg::CORBA::RObject)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerDelegate_method_isClient__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerDelegate* This = dmi_cast<ServerDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ServerDelegate::isClient();
    else
      ret = This->isClient();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerDelegate_method_isClient_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerDelegate* This = dmi_cast<ServerDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ServerDelegate::isClient(args[0].getBoolVar());
    else
        This->isClient(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerDelegate_method_is_a_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerDelegate* This = dmi_cast<ServerDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ServerDelegate::is_a((RString)args[0].getObjectVar());
    else
      ret = This->is_a((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerDelegate_method_is_a_INL_org_omg_CORBA_RObject_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerDelegate* This = dmi_cast<ServerDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ServerDelegate::is_a((::org::omg::CORBA::RObject)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
      ret = This->is_a((::org::omg::CORBA::RObject)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerDelegate_method_is_equivalent_INL_org_omg_CORBA_RObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerDelegate* This = dmi_cast<ServerDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ServerDelegate::is_equivalent((::org::omg::CORBA::RObject)args[0].getObjectVar());
    else
      ret = This->is_equivalent((::org::omg::CORBA::RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerDelegate_method_is_equivalent_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_RObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerDelegate* This = dmi_cast<ServerDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ServerDelegate::is_equivalent((::org::omg::CORBA::RObject)args[0].getObjectVar(), (::org::omg::CORBA::RObject)args[1].getObjectVar());
    else
      ret = This->is_equivalent((::org::omg::CORBA::RObject)args[0].getObjectVar(), (::org::omg::CORBA::RObject)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerDelegate_method_is_local__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerDelegate* This = dmi_cast<ServerDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ServerDelegate::is_local();
    else
      ret = This->is_local();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerDelegate_method_is_local_INL_org_omg_CORBA_RObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerDelegate* This = dmi_cast<ServerDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ServerDelegate::is_local((::org::omg::CORBA::RObject)args[0].getObjectVar());
    else
      ret = This->is_local((::org::omg::CORBA::RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerDelegate_method_is_nil__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerDelegate* This = dmi_cast<ServerDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ServerDelegate::is_nil();
    else
      ret = This->is_nil();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerDelegate_method_is_nil_L_org_omg_CORBA_RObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerDelegate* This = dmi_cast<ServerDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ServerDelegate::is_nil((::org::omg::CORBA::RObject)args[0].getObjectVar());
    else
      ret = This->is_nil((::org::omg::CORBA::RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerDelegate_method_non_existent__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerDelegate* This = dmi_cast<ServerDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ServerDelegate::non_existent();
    else
      ret = This->non_existent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerDelegate_method_non_existent_INL_org_omg_CORBA_RObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerDelegate* This = dmi_cast<ServerDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ServerDelegate::non_existent((::org::omg::CORBA::RObject)args[0].getObjectVar());
    else
      ret = This->non_existent((::org::omg::CORBA::RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerDelegate_method_objectKey__LRObjectKey__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerDelegate* This = dmi_cast<ServerDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ServerDelegate::objectKey();
    else
        ret = (::acdk::lang::RObject)This->objectKey();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerDelegate_method_object_to_string_INL_org_omg_CORBA_RObject__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ServerDelegate::object_to_string((::org::omg::CORBA::RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerDelegate_method_orb__L_org_omg_CORBA_RORB__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerDelegate* This = dmi_cast<ServerDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ServerDelegate::orb();
    else
        ret = (::acdk::lang::RObject)This->orb();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerDelegate_method_orb_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RORB__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerDelegate* This = dmi_cast<ServerDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ServerDelegate::orb((::org::omg::CORBA::RObject)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->orb((::org::omg::CORBA::RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerDelegate_method_orb_invoke_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_ROutputStream__L_org_omg_CORBA_portable_RInputStream__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerDelegate* This = dmi_cast<ServerDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ServerDelegate::orb_invoke((::org::omg::CORBA::RObject)args[0].getObjectVar(), (::org::omg::CORBA::portable::ROutputStream)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->orb_invoke((::org::omg::CORBA::RObject)args[0].getObjectVar(), (::org::omg::CORBA::portable::ROutputStream)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerDelegate_method_release__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerDelegate* This = dmi_cast<ServerDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ServerDelegate::release();
    else
        This->release();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerDelegate_method_release_INL_org_omg_CORBA_RObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerDelegate* This = dmi_cast<ServerDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ServerDelegate::release((::org::omg::CORBA::RObject)args[0].getObjectVar());
    else
        This->release((::org::omg::CORBA::RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerDelegate_method_releaseReply_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_RInputStream__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerDelegate* This = dmi_cast<ServerDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ServerDelegate::releaseReply((::org::omg::CORBA::RObject)args[0].getObjectVar(), (::org::omg::CORBA::portable::RInputStream)args[1].getObjectVar());
    else
        This->releaseReply((::org::omg::CORBA::RObject)args[0].getObjectVar(), (::org::omg::CORBA::portable::RInputStream)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerDelegate_method_request_INL_org_omg_CORBA_RObject_INLRString_Z_L_org_omg_CORBA_portable_ROutputStream__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerDelegate* This = dmi_cast<ServerDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ServerDelegate::request((::org::omg::CORBA::RObject)args[0].getObjectVar(), (RString)args[1].getObjectVar(), args[2].getBoolVar());
    else
        ret = (::acdk::lang::RObject)This->request((::org::omg::CORBA::RObject)args[0].getObjectVar(), (RString)args[1].getObjectVar(), args[2].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerDelegate_method_setObjectKey_INLRObjectKey__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerDelegate* This = dmi_cast<ServerDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ServerDelegate::setObjectKey((RObjectKey)args[0].getObjectVar());
    else
        This->setObjectKey((RObjectKey)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerDelegate_method_string_to_object_INLRString__LRServerDelegate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ServerDelegate::string_to_object((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerDelegate_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerDelegate* This = dmi_cast<ServerDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ServerDelegate::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerDelegate_method_toString_INL_org_omg_CORBA_RObject__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerDelegate* This = dmi_cast<ServerDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ServerDelegate::toString((::org::omg::CORBA::RObject)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->toString((::org::omg::CORBA::RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ServerDelegate_fields__connection_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ServerDelegate* This = dmi_cast<ServerDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_connection, flags);
    else
      This->_connection = (ROrbConnection)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ServerDelegate_fields__currentObjectKey_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ServerDelegate* This = dmi_cast<ServerDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_currentObjectKey, flags);
    else
      This->_currentObjectKey = (RObjectKey)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ServerDelegate_fields__isClient_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ServerDelegate* This = dmi_cast<ServerDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_isClient, flags);
    else
      This->_isClient = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ServerDelegate_fields__objectKey_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ServerDelegate* This = dmi_cast<ServerDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_objectKey, flags);
    else
      This->_objectKey = (RObjectKey)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ServerDelegate_fields__orb_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ServerDelegate* This = dmi_cast<ServerDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_orb, flags);
    else
      This->_orb = (::org::omg::CORBA::RORB)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ServerDelegate_fields__permanent_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ServerDelegate* This = dmi_cast<ServerDelegate>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_permanent, flags);
    else
      This->_permanent = var.getBoolVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ServerDelegate_fields__connection = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_connection", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ROrbConnection::clazzInfo(),
  ServerDelegate_MetainfoWrapper::ServerDelegate_fields__connection_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ServerDelegate_fields__currentObjectKey = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_currentObjectKey", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectKey::clazzInfo(),
  ServerDelegate_MetainfoWrapper::ServerDelegate_fields__currentObjectKey_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ServerDelegate_fields__isClient = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_isClient", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  ServerDelegate_MetainfoWrapper::ServerDelegate_fields__isClient_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ServerDelegate_fields__objectKey = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_objectKey", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectKey::clazzInfo(),
  ServerDelegate_MetainfoWrapper::ServerDelegate_fields__objectKey_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ServerDelegate_fields__orb = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_orb", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RORB::clazzInfo(),
  ServerDelegate_MetainfoWrapper::ServerDelegate_fields__orb_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ServerDelegate_fields__permanent = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_permanent", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  ServerDelegate_MetainfoWrapper::ServerDelegate_fields__permanent_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ServerDelegate_fields[] = 
{
  &ServerDelegate_fields__connection,
  &ServerDelegate_fields__currentObjectKey,
  &ServerDelegate_fields__isClient,
  &ServerDelegate_fields__objectKey,
  &ServerDelegate_fields__orb,
  &ServerDelegate_fields__permanent,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerDelegate_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ServerDelegate_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerDelegate_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_G_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ServerDelegate_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ServerDelegate_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ServerDelegate_MetainfoWrapper::ServerDelegate_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerDelegate_methods_ServerDelegate__LRServerDelegate__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ServerDelegate_methods_ServerDelegate__LRServerDelegate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerDelegate_method_ServerDelegate__LRServerDelegate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ServerDelegate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ServerDelegate::clazzInfo(), // return type
  "_0_ServerDelegate", // alternative name of method
  -1, // altlabelHashCode
  ServerDelegate_methods_ServerDelegate__LRServerDelegate__args, // the arguments
  0, //arguments count
  ServerDelegate_methods_ServerDelegate__LRServerDelegate__exceptions, // the declared exceptions
  ServerDelegate_MetainfoWrapper::ServerDelegate_method_ServerDelegate__LRServerDelegate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerDelegate_methods_ServerDelegate_INLRString__LRServerDelegate__arg_theobjectref = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "theobjectref", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerDelegate_methods_ServerDelegate_INLRString__LRServerDelegate__args[] = 
{
  &ServerDelegate_methods_ServerDelegate_INLRString__LRServerDelegate__arg_theobjectref,
  0
};

::acdk::lang::dmi::ClazzInfo* ServerDelegate_methods_ServerDelegate_INLRString__LRServerDelegate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerDelegate_method_ServerDelegate_INLRString__LRServerDelegate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ServerDelegate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ServerDelegate::clazzInfo(), // return type
  "_1_ServerDelegate", // alternative name of method
  -1, // altlabelHashCode
  ServerDelegate_methods_ServerDelegate_INLRString__LRServerDelegate__args, // the arguments
  0, //arguments count
  ServerDelegate_methods_ServerDelegate_INLRString__LRServerDelegate__exceptions, // the declared exceptions
  ServerDelegate_MetainfoWrapper::ServerDelegate_method_ServerDelegate_INLRString__LRServerDelegate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerDelegate_methods_ServerDelegate_INLRORB_INLRString__LRServerDelegate__arg_theOrb = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "theOrb", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RORB::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerDelegate_methods_ServerDelegate_INLRORB_INLRString__LRServerDelegate__arg_theobjectref = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "theobjectref", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerDelegate_methods_ServerDelegate_INLRORB_INLRString__LRServerDelegate__args[] = 
{
  &ServerDelegate_methods_ServerDelegate_INLRORB_INLRString__LRServerDelegate__arg_theOrb,
  &ServerDelegate_methods_ServerDelegate_INLRORB_INLRString__LRServerDelegate__arg_theobjectref,
  0
};

::acdk::lang::dmi::ClazzInfo* ServerDelegate_methods_ServerDelegate_INLRORB_INLRString__LRServerDelegate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerDelegate_method_ServerDelegate_INLRORB_INLRString__LRServerDelegate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ServerDelegate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ServerDelegate::clazzInfo(), // return type
  "_2_ServerDelegate", // alternative name of method
  -1, // altlabelHashCode
  ServerDelegate_methods_ServerDelegate_INLRORB_INLRString__LRServerDelegate__args, // the arguments
  0, //arguments count
  ServerDelegate_methods_ServerDelegate_INLRORB_INLRString__LRServerDelegate__exceptions, // the declared exceptions
  ServerDelegate_MetainfoWrapper::ServerDelegate_method_ServerDelegate_INLRORB_INLRString__LRServerDelegate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerDelegate_methods_ServerDelegate_INLRORB_INLRObjectKey__LRServerDelegate__arg_theOrb = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "theOrb", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RORB::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerDelegate_methods_ServerDelegate_INLRORB_INLRObjectKey__LRServerDelegate__arg_theObject = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "theObject", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectKey::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerDelegate_methods_ServerDelegate_INLRORB_INLRObjectKey__LRServerDelegate__args[] = 
{
  &ServerDelegate_methods_ServerDelegate_INLRORB_INLRObjectKey__LRServerDelegate__arg_theOrb,
  &ServerDelegate_methods_ServerDelegate_INLRORB_INLRObjectKey__LRServerDelegate__arg_theObject,
  0
};

::acdk::lang::dmi::ClazzInfo* ServerDelegate_methods_ServerDelegate_INLRORB_INLRObjectKey__LRServerDelegate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerDelegate_method_ServerDelegate_INLRORB_INLRObjectKey__LRServerDelegate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ServerDelegate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ServerDelegate::clazzInfo(), // return type
  "_3_ServerDelegate", // alternative name of method
  -1, // altlabelHashCode
  ServerDelegate_methods_ServerDelegate_INLRORB_INLRObjectKey__LRServerDelegate__args, // the arguments
  0, //arguments count
  ServerDelegate_methods_ServerDelegate_INLRORB_INLRObjectKey__LRServerDelegate__exceptions, // the declared exceptions
  ServerDelegate_MetainfoWrapper::ServerDelegate_method_ServerDelegate_INLRORB_INLRObjectKey__LRServerDelegate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerDelegate_methods__get_delegate__L_org_omg_CORBA_portable_RDelegate__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ServerDelegate_methods__get_delegate__L_org_omg_CORBA_portable_RDelegate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerDelegate_method__get_delegate__L_org_omg_CORBA_portable_RDelegate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_get_delegate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::portable::RDelegate::clazzInfo(), // return type
  "_7__get_delegate", // alternative name of method
  -1, // altlabelHashCode
  ServerDelegate_methods__get_delegate__L_org_omg_CORBA_portable_RDelegate__args, // the arguments
  0, //arguments count
  ServerDelegate_methods__get_delegate__L_org_omg_CORBA_portable_RDelegate__exceptions, // the declared exceptions
  ServerDelegate_MetainfoWrapper::ServerDelegate_method__get_delegate__L_org_omg_CORBA_portable_RDelegate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerDelegate_methods__invoke_INL_org_omg_CORBA_portable_ROutputStream__L_org_omg_CORBA_portable_RInputStream__arg_output = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "output", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::portable::ROutputStream::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerDelegate_methods__invoke_INL_org_omg_CORBA_portable_ROutputStream__L_org_omg_CORBA_portable_RInputStream__args[] = 
{
  &ServerDelegate_methods__invoke_INL_org_omg_CORBA_portable_ROutputStream__L_org_omg_CORBA_portable_RInputStream__arg_output,
  0
};

::acdk::lang::dmi::ClazzInfo* ServerDelegate_methods__invoke_INL_org_omg_CORBA_portable_ROutputStream__L_org_omg_CORBA_portable_RInputStream__exceptions[] =
{
  RApplicationException::clazzInfo(), 
  RRemarshalException::clazzInfo(), 
  0
};

void ServerDelegate__invoke_INL_org_omg_CORBA_portable_ROutputStream__L_org_omg_CORBA_portable_RInputStream__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ApplicationException) == true)
    THROW_INSTANCE( RApplicationException(ex));
 if (instanceof(ex, RemarshalException) == true)
    THROW_INSTANCE( RRemarshalException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ServerDelegate_method__invoke_INL_org_omg_CORBA_portable_ROutputStream__L_org_omg_CORBA_portable_RInputStream_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_invoke", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::portable::RInputStream::clazzInfo(), // return type
  "_i__invoke", // alternative name of method
  -1, // altlabelHashCode
  ServerDelegate_methods__invoke_INL_org_omg_CORBA_portable_ROutputStream__L_org_omg_CORBA_portable_RInputStream__args, // the arguments
  0, //arguments count
  ServerDelegate_methods__invoke_INL_org_omg_CORBA_portable_ROutputStream__L_org_omg_CORBA_portable_RInputStream__exceptions, // the declared exceptions
  ServerDelegate_MetainfoWrapper::ServerDelegate_method__invoke_INL_org_omg_CORBA_portable_ROutputStream__L_org_omg_CORBA_portable_RInputStream__dispatch, // invoke this method
  ServerDelegate__invoke_INL_org_omg_CORBA_portable_ROutputStream__L_org_omg_CORBA_portable_RInputStream__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerDelegate_methods__releaseReply_INL_org_omg_CORBA_portable_RInputStream__V_arg_input = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "input", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::portable::RInputStream::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerDelegate_methods__releaseReply_INL_org_omg_CORBA_portable_RInputStream__V_args[] = 
{
  &ServerDelegate_methods__releaseReply_INL_org_omg_CORBA_portable_RInputStream__V_arg_input,
  0
};

::acdk::lang::dmi::ClazzInfo* ServerDelegate_methods__releaseReply_INL_org_omg_CORBA_portable_RInputStream__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerDelegate_method__releaseReply_INL_org_omg_CORBA_portable_RInputStream__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_releaseReply", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_j__releaseReply", // alternative name of method
  -1, // altlabelHashCode
  ServerDelegate_methods__releaseReply_INL_org_omg_CORBA_portable_RInputStream__V_args, // the arguments
  0, //arguments count
  ServerDelegate_methods__releaseReply_INL_org_omg_CORBA_portable_RInputStream__V_exceptions, // the declared exceptions
  ServerDelegate_MetainfoWrapper::ServerDelegate_method__releaseReply_INL_org_omg_CORBA_portable_RInputStream__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerDelegate_methods__request_INLRString_Z_L_org_omg_CORBA_portable_ROutputStream__arg_operation = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "operation", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerDelegate_methods__request_INLRString_Z_L_org_omg_CORBA_portable_ROutputStream__arg_responseExpected = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "responseExpected", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerDelegate_methods__request_INLRString_Z_L_org_omg_CORBA_portable_ROutputStream__args[] = 
{
  &ServerDelegate_methods__request_INLRString_Z_L_org_omg_CORBA_portable_ROutputStream__arg_operation,
  &ServerDelegate_methods__request_INLRString_Z_L_org_omg_CORBA_portable_ROutputStream__arg_responseExpected,
  0
};

::acdk::lang::dmi::ClazzInfo* ServerDelegate_methods__request_INLRString_Z_L_org_omg_CORBA_portable_ROutputStream__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerDelegate_method__request_INLRString_Z_L_org_omg_CORBA_portable_ROutputStream_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_request", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::portable::ROutputStream::clazzInfo(), // return type
  "_h__request", // alternative name of method
  -1, // altlabelHashCode
  ServerDelegate_methods__request_INLRString_Z_L_org_omg_CORBA_portable_ROutputStream__args, // the arguments
  0, //arguments count
  ServerDelegate_methods__request_INLRString_Z_L_org_omg_CORBA_portable_ROutputStream__exceptions, // the declared exceptions
  ServerDelegate_MetainfoWrapper::ServerDelegate_method__request_INLRString_Z_L_org_omg_CORBA_portable_ROutputStream__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerDelegate_methods__set_delegate_INL_org_omg_CORBA_portable_RDelegate__V_arg_del = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "del", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::portable::RDelegate::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerDelegate_methods__set_delegate_INL_org_omg_CORBA_portable_RDelegate__V_args[] = 
{
  &ServerDelegate_methods__set_delegate_INL_org_omg_CORBA_portable_RDelegate__V_arg_del,
  0
};

::acdk::lang::dmi::ClazzInfo* ServerDelegate_methods__set_delegate_INL_org_omg_CORBA_portable_RDelegate__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerDelegate_method__set_delegate_INL_org_omg_CORBA_portable_RDelegate__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_set_delegate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8__set_delegate", // alternative name of method
  -1, // altlabelHashCode
  ServerDelegate_methods__set_delegate_INL_org_omg_CORBA_portable_RDelegate__V_args, // the arguments
  0, //arguments count
  ServerDelegate_methods__set_delegate_INL_org_omg_CORBA_portable_RDelegate__V_exceptions, // the declared exceptions
  ServerDelegate_MetainfoWrapper::ServerDelegate_method__set_delegate_INL_org_omg_CORBA_portable_RDelegate__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerDelegate_methods_duplicate__L_org_omg_CORBA_RObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ServerDelegate_methods_duplicate__L_org_omg_CORBA_RObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerDelegate_method_duplicate__L_org_omg_CORBA_RObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "duplicate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo(), // return type
  "_b_duplicate", // alternative name of method
  -1, // altlabelHashCode
  ServerDelegate_methods_duplicate__L_org_omg_CORBA_RObject__args, // the arguments
  0, //arguments count
  ServerDelegate_methods_duplicate__L_org_omg_CORBA_RObject__exceptions, // the declared exceptions
  ServerDelegate_MetainfoWrapper::ServerDelegate_method_duplicate__L_org_omg_CORBA_RObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerDelegate_methods_duplicate_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RObject__arg_self = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "self", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerDelegate_methods_duplicate_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RObject__args[] = 
{
  &ServerDelegate_methods_duplicate_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RObject__arg_self,
  0
};

::acdk::lang::dmi::ClazzInfo* ServerDelegate_methods_duplicate_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerDelegate_method_duplicate_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "duplicate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo(), // return type
  "_p_duplicate", // alternative name of method
  -1, // altlabelHashCode
  ServerDelegate_methods_duplicate_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RObject__args, // the arguments
  0, //arguments count
  ServerDelegate_methods_duplicate_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RObject__exceptions, // the declared exceptions
  ServerDelegate_MetainfoWrapper::ServerDelegate_method_duplicate_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerDelegate_methods_finalize__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ServerDelegate_methods_finalize__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerDelegate_method_finalize__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "finalize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_finalize", // alternative name of method
  -1, // altlabelHashCode
  ServerDelegate_methods_finalize__V_args, // the arguments
  0, //arguments count
  ServerDelegate_methods_finalize__V_exceptions, // the declared exceptions
  ServerDelegate_MetainfoWrapper::ServerDelegate_method_finalize__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerDelegate_methods_get_interface_def__L_org_omg_CORBA_RObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ServerDelegate_methods_get_interface_def__L_org_omg_CORBA_RObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerDelegate_method_get_interface_def__L_org_omg_CORBA_RObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "get_interface_def", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo(), // return type
  "_a_get_interface_def", // alternative name of method
  -1, // altlabelHashCode
  ServerDelegate_methods_get_interface_def__L_org_omg_CORBA_RObject__args, // the arguments
  0, //arguments count
  ServerDelegate_methods_get_interface_def__L_org_omg_CORBA_RObject__exceptions, // the declared exceptions
  ServerDelegate_MetainfoWrapper::ServerDelegate_method_get_interface_def__L_org_omg_CORBA_RObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerDelegate_methods_get_interface_def_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RObject__arg_self = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "self", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerDelegate_methods_get_interface_def_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RObject__args[] = 
{
  &ServerDelegate_methods_get_interface_def_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RObject__arg_self,
  0
};

::acdk::lang::dmi::ClazzInfo* ServerDelegate_methods_get_interface_def_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerDelegate_method_get_interface_def_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "get_interface_def", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo(), // return type
  "_o_get_interface_def", // alternative name of method
  -1, // altlabelHashCode
  ServerDelegate_methods_get_interface_def_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RObject__args, // the arguments
  0, //arguments count
  ServerDelegate_methods_get_interface_def_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RObject__exceptions, // the declared exceptions
  ServerDelegate_MetainfoWrapper::ServerDelegate_method_get_interface_def_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerDelegate_methods_get_typeid__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ServerDelegate_methods_get_typeid__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerDelegate_method_get_typeid__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "get_typeid", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_A_get_typeid", // alternative name of method
  -1, // altlabelHashCode
  ServerDelegate_methods_get_typeid__LRString__args, // the arguments
  0, //arguments count
  ServerDelegate_methods_get_typeid__LRString__exceptions, // the declared exceptions
  ServerDelegate_MetainfoWrapper::ServerDelegate_method_get_typeid__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerDelegate_methods_hash_I_I_arg_maximum = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "maximum", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerDelegate_methods_hash_I_I_args[] = 
{
  &ServerDelegate_methods_hash_I_I_arg_maximum,
  0
};

::acdk::lang::dmi::ClazzInfo* ServerDelegate_methods_hash_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerDelegate_method_hash_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hash", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_g_hash", // alternative name of method
  -1, // altlabelHashCode
  ServerDelegate_methods_hash_I_I_args, // the arguments
  0, //arguments count
  ServerDelegate_methods_hash_I_I_exceptions, // the declared exceptions
  ServerDelegate_MetainfoWrapper::ServerDelegate_method_hash_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerDelegate_methods_hash_INL_org_omg_CORBA_RObject_I_I_arg_self = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "self", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerDelegate_methods_hash_INL_org_omg_CORBA_RObject_I_I_arg_max = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "max", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerDelegate_methods_hash_INL_org_omg_CORBA_RObject_I_I_args[] = 
{
  &ServerDelegate_methods_hash_INL_org_omg_CORBA_RObject_I_I_arg_self,
  &ServerDelegate_methods_hash_INL_org_omg_CORBA_RObject_I_I_arg_max,
  0
};

::acdk::lang::dmi::ClazzInfo* ServerDelegate_methods_hash_INL_org_omg_CORBA_RObject_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerDelegate_method_hash_INL_org_omg_CORBA_RObject_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hash", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_u_hash", // alternative name of method
  -1, // altlabelHashCode
  ServerDelegate_methods_hash_INL_org_omg_CORBA_RObject_I_I_args, // the arguments
  0, //arguments count
  ServerDelegate_methods_hash_INL_org_omg_CORBA_RObject_I_I_exceptions, // the declared exceptions
  ServerDelegate_MetainfoWrapper::ServerDelegate_method_hash_INL_org_omg_CORBA_RObject_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerDelegate_methods_isClient__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ServerDelegate_methods_isClient__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerDelegate_method_isClient__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isClient", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_E_isClient", // alternative name of method
  -1, // altlabelHashCode
  ServerDelegate_methods_isClient__Z_args, // the arguments
  0, //arguments count
  ServerDelegate_methods_isClient__Z_exceptions, // the declared exceptions
  ServerDelegate_MetainfoWrapper::ServerDelegate_method_isClient__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerDelegate_methods_isClient_Z_V_arg_isclient = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "isclient", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerDelegate_methods_isClient_Z_V_args[] = 
{
  &ServerDelegate_methods_isClient_Z_V_arg_isclient,
  0
};

::acdk::lang::dmi::ClazzInfo* ServerDelegate_methods_isClient_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerDelegate_method_isClient_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isClient", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_F_isClient", // alternative name of method
  -1, // altlabelHashCode
  ServerDelegate_methods_isClient_Z_V_args, // the arguments
  0, //arguments count
  ServerDelegate_methods_isClient_Z_V_exceptions, // the declared exceptions
  ServerDelegate_MetainfoWrapper::ServerDelegate_method_isClient_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerDelegate_methods_is_a_INLRString__Z_arg_logical_type_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "logical_type_id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerDelegate_methods_is_a_INLRString__Z_args[] = 
{
  &ServerDelegate_methods_is_a_INLRString__Z_arg_logical_type_id,
  0
};

::acdk::lang::dmi::ClazzInfo* ServerDelegate_methods_is_a_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerDelegate_method_is_a_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "is_a", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_d_is_a", // alternative name of method
  -1, // altlabelHashCode
  ServerDelegate_methods_is_a_INLRString__Z_args, // the arguments
  0, //arguments count
  ServerDelegate_methods_is_a_INLRString__Z_exceptions, // the declared exceptions
  ServerDelegate_MetainfoWrapper::ServerDelegate_method_is_a_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerDelegate_methods_is_a_INL_org_omg_CORBA_RObject_INLRString__Z_arg_self = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "self", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerDelegate_methods_is_a_INL_org_omg_CORBA_RObject_INLRString__Z_arg_repository_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "repository_id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerDelegate_methods_is_a_INL_org_omg_CORBA_RObject_INLRString__Z_args[] = 
{
  &ServerDelegate_methods_is_a_INL_org_omg_CORBA_RObject_INLRString__Z_arg_self,
  &ServerDelegate_methods_is_a_INL_org_omg_CORBA_RObject_INLRString__Z_arg_repository_id,
  0
};

::acdk::lang::dmi::ClazzInfo* ServerDelegate_methods_is_a_INL_org_omg_CORBA_RObject_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerDelegate_method_is_a_INL_org_omg_CORBA_RObject_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "is_a", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_r_is_a", // alternative name of method
  -1, // altlabelHashCode
  ServerDelegate_methods_is_a_INL_org_omg_CORBA_RObject_INLRString__Z_args, // the arguments
  0, //arguments count
  ServerDelegate_methods_is_a_INL_org_omg_CORBA_RObject_INLRString__Z_exceptions, // the declared exceptions
  ServerDelegate_MetainfoWrapper::ServerDelegate_method_is_a_INL_org_omg_CORBA_RObject_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerDelegate_methods_is_equivalent_INL_org_omg_CORBA_RObject__Z_arg_other_object = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other_object", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerDelegate_methods_is_equivalent_INL_org_omg_CORBA_RObject__Z_args[] = 
{
  &ServerDelegate_methods_is_equivalent_INL_org_omg_CORBA_RObject__Z_arg_other_object,
  0
};

::acdk::lang::dmi::ClazzInfo* ServerDelegate_methods_is_equivalent_INL_org_omg_CORBA_RObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerDelegate_method_is_equivalent_INL_org_omg_CORBA_RObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "is_equivalent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_f_is_equivalent", // alternative name of method
  -1, // altlabelHashCode
  ServerDelegate_methods_is_equivalent_INL_org_omg_CORBA_RObject__Z_args, // the arguments
  0, //arguments count
  ServerDelegate_methods_is_equivalent_INL_org_omg_CORBA_RObject__Z_exceptions, // the declared exceptions
  ServerDelegate_MetainfoWrapper::ServerDelegate_method_is_equivalent_INL_org_omg_CORBA_RObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerDelegate_methods_is_equivalent_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_RObject__Z_arg_self = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "self", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerDelegate_methods_is_equivalent_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_RObject__Z_arg_rhs = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rhs", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerDelegate_methods_is_equivalent_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_RObject__Z_args[] = 
{
  &ServerDelegate_methods_is_equivalent_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_RObject__Z_arg_self,
  &ServerDelegate_methods_is_equivalent_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_RObject__Z_arg_rhs,
  0
};

::acdk::lang::dmi::ClazzInfo* ServerDelegate_methods_is_equivalent_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_RObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerDelegate_method_is_equivalent_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_RObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "is_equivalent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_t_is_equivalent", // alternative name of method
  -1, // altlabelHashCode
  ServerDelegate_methods_is_equivalent_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_RObject__Z_args, // the arguments
  0, //arguments count
  ServerDelegate_methods_is_equivalent_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_RObject__Z_exceptions, // the declared exceptions
  ServerDelegate_MetainfoWrapper::ServerDelegate_method_is_equivalent_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_RObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerDelegate_methods_is_local__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ServerDelegate_methods_is_local__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerDelegate_method_is_local__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "is_local", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_k_is_local", // alternative name of method
  -1, // altlabelHashCode
  ServerDelegate_methods_is_local__Z_args, // the arguments
  0, //arguments count
  ServerDelegate_methods_is_local__Z_exceptions, // the declared exceptions
  ServerDelegate_MetainfoWrapper::ServerDelegate_method_is_local__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerDelegate_methods_is_local_INL_org_omg_CORBA_RObject__Z_arg_self = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "self", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerDelegate_methods_is_local_INL_org_omg_CORBA_RObject__Z_args[] = 
{
  &ServerDelegate_methods_is_local_INL_org_omg_CORBA_RObject__Z_arg_self,
  0
};

::acdk::lang::dmi::ClazzInfo* ServerDelegate_methods_is_local_INL_org_omg_CORBA_RObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerDelegate_method_is_local_INL_org_omg_CORBA_RObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "is_local", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_z_is_local", // alternative name of method
  -1, // altlabelHashCode
  ServerDelegate_methods_is_local_INL_org_omg_CORBA_RObject__Z_args, // the arguments
  0, //arguments count
  ServerDelegate_methods_is_local_INL_org_omg_CORBA_RObject__Z_exceptions, // the declared exceptions
  ServerDelegate_MetainfoWrapper::ServerDelegate_method_is_local_INL_org_omg_CORBA_RObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerDelegate_methods_is_nil__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ServerDelegate_methods_is_nil__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerDelegate_method_is_nil__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "is_nil", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_9_is_nil", // alternative name of method
  -1, // altlabelHashCode
  ServerDelegate_methods_is_nil__Z_args, // the arguments
  0, //arguments count
  ServerDelegate_methods_is_nil__Z_exceptions, // the declared exceptions
  ServerDelegate_MetainfoWrapper::ServerDelegate_method_is_nil__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerDelegate_methods_is_nil_L_org_omg_CORBA_RObject__Z_arg_self = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "self", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerDelegate_methods_is_nil_L_org_omg_CORBA_RObject__Z_args[] = 
{
  &ServerDelegate_methods_is_nil_L_org_omg_CORBA_RObject__Z_arg_self,
  0
};

::acdk::lang::dmi::ClazzInfo* ServerDelegate_methods_is_nil_L_org_omg_CORBA_RObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerDelegate_method_is_nil_L_org_omg_CORBA_RObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "is_nil", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_n_is_nil", // alternative name of method
  -1, // altlabelHashCode
  ServerDelegate_methods_is_nil_L_org_omg_CORBA_RObject__Z_args, // the arguments
  0, //arguments count
  ServerDelegate_methods_is_nil_L_org_omg_CORBA_RObject__Z_exceptions, // the declared exceptions
  ServerDelegate_MetainfoWrapper::ServerDelegate_method_is_nil_L_org_omg_CORBA_RObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerDelegate_methods_non_existent__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ServerDelegate_methods_non_existent__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerDelegate_method_non_existent__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "non_existent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_e_non_existent", // alternative name of method
  -1, // altlabelHashCode
  ServerDelegate_methods_non_existent__Z_args, // the arguments
  0, //arguments count
  ServerDelegate_methods_non_existent__Z_exceptions, // the declared exceptions
  ServerDelegate_MetainfoWrapper::ServerDelegate_method_non_existent__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerDelegate_methods_non_existent_INL_org_omg_CORBA_RObject__Z_arg_self = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "self", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerDelegate_methods_non_existent_INL_org_omg_CORBA_RObject__Z_args[] = 
{
  &ServerDelegate_methods_non_existent_INL_org_omg_CORBA_RObject__Z_arg_self,
  0
};

::acdk::lang::dmi::ClazzInfo* ServerDelegate_methods_non_existent_INL_org_omg_CORBA_RObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerDelegate_method_non_existent_INL_org_omg_CORBA_RObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "non_existent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_s_non_existent", // alternative name of method
  -1, // altlabelHashCode
  ServerDelegate_methods_non_existent_INL_org_omg_CORBA_RObject__Z_args, // the arguments
  0, //arguments count
  ServerDelegate_methods_non_existent_INL_org_omg_CORBA_RObject__Z_exceptions, // the declared exceptions
  ServerDelegate_MetainfoWrapper::ServerDelegate_method_non_existent_INL_org_omg_CORBA_RObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerDelegate_methods_objectKey__LRObjectKey__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ServerDelegate_methods_objectKey__LRObjectKey__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerDelegate_method_objectKey__LRObjectKey_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "objectKey", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectKey::clazzInfo(), // return type
  "_5_objectKey", // alternative name of method
  -1, // altlabelHashCode
  ServerDelegate_methods_objectKey__LRObjectKey__args, // the arguments
  0, //arguments count
  ServerDelegate_methods_objectKey__LRObjectKey__exceptions, // the declared exceptions
  ServerDelegate_MetainfoWrapper::ServerDelegate_method_objectKey__LRObjectKey__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerDelegate_methods_object_to_string_INL_org_omg_CORBA_RObject__LRString__arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerDelegate_methods_object_to_string_INL_org_omg_CORBA_RObject__LRString__args[] = 
{
  &ServerDelegate_methods_object_to_string_INL_org_omg_CORBA_RObject__LRString__arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* ServerDelegate_methods_object_to_string_INL_org_omg_CORBA_RObject__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerDelegate_method_object_to_string_INL_org_omg_CORBA_RObject__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "object_to_string", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_D_object_to_string", // alternative name of method
  -1, // altlabelHashCode
  ServerDelegate_methods_object_to_string_INL_org_omg_CORBA_RObject__LRString__args, // the arguments
  0, //arguments count
  ServerDelegate_methods_object_to_string_INL_org_omg_CORBA_RObject__LRString__exceptions, // the declared exceptions
  ServerDelegate_MetainfoWrapper::ServerDelegate_method_object_to_string_INL_org_omg_CORBA_RObject__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerDelegate_methods_orb__L_org_omg_CORBA_RORB__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ServerDelegate_methods_orb__L_org_omg_CORBA_RORB__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerDelegate_method_orb__L_org_omg_CORBA_RORB_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "orb", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RORB::clazzInfo(), // return type
  "_m_orb", // alternative name of method
  -1, // altlabelHashCode
  ServerDelegate_methods_orb__L_org_omg_CORBA_RORB__args, // the arguments
  0, //arguments count
  ServerDelegate_methods_orb__L_org_omg_CORBA_RORB__exceptions, // the declared exceptions
  ServerDelegate_MetainfoWrapper::ServerDelegate_method_orb__L_org_omg_CORBA_RORB__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerDelegate_methods_orb_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RORB__arg_self = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "self", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerDelegate_methods_orb_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RORB__args[] = 
{
  &ServerDelegate_methods_orb_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RORB__arg_self,
  0
};

::acdk::lang::dmi::ClazzInfo* ServerDelegate_methods_orb_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RORB__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerDelegate_method_orb_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RORB_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "orb", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RORB::clazzInfo(), // return type
  "_y_orb", // alternative name of method
  -1, // altlabelHashCode
  ServerDelegate_methods_orb_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RORB__args, // the arguments
  0, //arguments count
  ServerDelegate_methods_orb_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RORB__exceptions, // the declared exceptions
  ServerDelegate_MetainfoWrapper::ServerDelegate_method_orb_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RORB__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerDelegate_methods_orb_invoke_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_ROutputStream__L_org_omg_CORBA_portable_RInputStream__arg_self = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "self", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerDelegate_methods_orb_invoke_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_ROutputStream__L_org_omg_CORBA_portable_RInputStream__arg_os = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "os", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::portable::ROutputStream::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerDelegate_methods_orb_invoke_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_ROutputStream__L_org_omg_CORBA_portable_RInputStream__args[] = 
{
  &ServerDelegate_methods_orb_invoke_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_ROutputStream__L_org_omg_CORBA_portable_RInputStream__arg_self,
  &ServerDelegate_methods_orb_invoke_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_ROutputStream__L_org_omg_CORBA_portable_RInputStream__arg_os,
  0
};

::acdk::lang::dmi::ClazzInfo* ServerDelegate_methods_orb_invoke_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_ROutputStream__L_org_omg_CORBA_portable_RInputStream__exceptions[] =
{
  RApplicationException::clazzInfo(), 
  RRemarshalException::clazzInfo(), 
  0
};

void ServerDelegate_orb_invoke_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_ROutputStream__L_org_omg_CORBA_portable_RInputStream__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ApplicationException) == true)
    THROW_INSTANCE( RApplicationException(ex));
 if (instanceof(ex, RemarshalException) == true)
    THROW_INSTANCE( RRemarshalException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ServerDelegate_method_orb_invoke_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_ROutputStream__L_org_omg_CORBA_portable_RInputStream_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "orb_invoke", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::portable::RInputStream::clazzInfo(), // return type
  "_w_orb_invoke", // alternative name of method
  -1, // altlabelHashCode
  ServerDelegate_methods_orb_invoke_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_ROutputStream__L_org_omg_CORBA_portable_RInputStream__args, // the arguments
  0, //arguments count
  ServerDelegate_methods_orb_invoke_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_ROutputStream__L_org_omg_CORBA_portable_RInputStream__exceptions, // the declared exceptions
  ServerDelegate_MetainfoWrapper::ServerDelegate_method_orb_invoke_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_ROutputStream__L_org_omg_CORBA_portable_RInputStream__dispatch, // invoke this method
  ServerDelegate_orb_invoke_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_ROutputStream__L_org_omg_CORBA_portable_RInputStream__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerDelegate_methods_release__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ServerDelegate_methods_release__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerDelegate_method_release__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "release", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_release", // alternative name of method
  -1, // altlabelHashCode
  ServerDelegate_methods_release__V_args, // the arguments
  0, //arguments count
  ServerDelegate_methods_release__V_exceptions, // the declared exceptions
  ServerDelegate_MetainfoWrapper::ServerDelegate_method_release__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerDelegate_methods_release_INL_org_omg_CORBA_RObject__V_arg_self = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "self", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerDelegate_methods_release_INL_org_omg_CORBA_RObject__V_args[] = 
{
  &ServerDelegate_methods_release_INL_org_omg_CORBA_RObject__V_arg_self,
  0
};

::acdk::lang::dmi::ClazzInfo* ServerDelegate_methods_release_INL_org_omg_CORBA_RObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerDelegate_method_release_INL_org_omg_CORBA_RObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "release", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_q_release", // alternative name of method
  -1, // altlabelHashCode
  ServerDelegate_methods_release_INL_org_omg_CORBA_RObject__V_args, // the arguments
  0, //arguments count
  ServerDelegate_methods_release_INL_org_omg_CORBA_RObject__V_exceptions, // the declared exceptions
  ServerDelegate_MetainfoWrapper::ServerDelegate_method_release_INL_org_omg_CORBA_RObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerDelegate_methods_releaseReply_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_RInputStream__V_arg_self = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "self", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerDelegate_methods_releaseReply_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_RInputStream__V_arg_is = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "is", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::portable::RInputStream::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerDelegate_methods_releaseReply_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_RInputStream__V_args[] = 
{
  &ServerDelegate_methods_releaseReply_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_RInputStream__V_arg_self,
  &ServerDelegate_methods_releaseReply_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_RInputStream__V_arg_is,
  0
};

::acdk::lang::dmi::ClazzInfo* ServerDelegate_methods_releaseReply_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_RInputStream__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerDelegate_method_releaseReply_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_RInputStream__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "releaseReply", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_x_releaseReply", // alternative name of method
  -1, // altlabelHashCode
  ServerDelegate_methods_releaseReply_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_RInputStream__V_args, // the arguments
  0, //arguments count
  ServerDelegate_methods_releaseReply_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_RInputStream__V_exceptions, // the declared exceptions
  ServerDelegate_MetainfoWrapper::ServerDelegate_method_releaseReply_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_RInputStream__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerDelegate_methods_request_INL_org_omg_CORBA_RObject_INLRString_Z_L_org_omg_CORBA_portable_ROutputStream__arg_self = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "self", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerDelegate_methods_request_INL_org_omg_CORBA_RObject_INLRString_Z_L_org_omg_CORBA_portable_ROutputStream__arg_operation = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "operation", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerDelegate_methods_request_INL_org_omg_CORBA_RObject_INLRString_Z_L_org_omg_CORBA_portable_ROutputStream__arg_responseExpected = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "responseExpected", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerDelegate_methods_request_INL_org_omg_CORBA_RObject_INLRString_Z_L_org_omg_CORBA_portable_ROutputStream__args[] = 
{
  &ServerDelegate_methods_request_INL_org_omg_CORBA_RObject_INLRString_Z_L_org_omg_CORBA_portable_ROutputStream__arg_self,
  &ServerDelegate_methods_request_INL_org_omg_CORBA_RObject_INLRString_Z_L_org_omg_CORBA_portable_ROutputStream__arg_operation,
  &ServerDelegate_methods_request_INL_org_omg_CORBA_RObject_INLRString_Z_L_org_omg_CORBA_portable_ROutputStream__arg_responseExpected,
  0
};

::acdk::lang::dmi::ClazzInfo* ServerDelegate_methods_request_INL_org_omg_CORBA_RObject_INLRString_Z_L_org_omg_CORBA_portable_ROutputStream__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerDelegate_method_request_INL_org_omg_CORBA_RObject_INLRString_Z_L_org_omg_CORBA_portable_ROutputStream_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "request", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::portable::ROutputStream::clazzInfo(), // return type
  "_v_request", // alternative name of method
  -1, // altlabelHashCode
  ServerDelegate_methods_request_INL_org_omg_CORBA_RObject_INLRString_Z_L_org_omg_CORBA_portable_ROutputStream__args, // the arguments
  0, //arguments count
  ServerDelegate_methods_request_INL_org_omg_CORBA_RObject_INLRString_Z_L_org_omg_CORBA_portable_ROutputStream__exceptions, // the declared exceptions
  ServerDelegate_MetainfoWrapper::ServerDelegate_method_request_INL_org_omg_CORBA_RObject_INLRString_Z_L_org_omg_CORBA_portable_ROutputStream__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerDelegate_methods_setObjectKey_INLRObjectKey__V_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectKey::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerDelegate_methods_setObjectKey_INLRObjectKey__V_args[] = 
{
  &ServerDelegate_methods_setObjectKey_INLRObjectKey__V_arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* ServerDelegate_methods_setObjectKey_INLRObjectKey__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerDelegate_method_setObjectKey_INLRObjectKey__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setObjectKey", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_setObjectKey", // alternative name of method
  -1, // altlabelHashCode
  ServerDelegate_methods_setObjectKey_INLRObjectKey__V_args, // the arguments
  0, //arguments count
  ServerDelegate_methods_setObjectKey_INLRObjectKey__V_exceptions, // the declared exceptions
  ServerDelegate_MetainfoWrapper::ServerDelegate_method_setObjectKey_INLRObjectKey__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerDelegate_methods_string_to_object_INLRString__LRServerDelegate__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerDelegate_methods_string_to_object_INLRString__LRServerDelegate__args[] = 
{
  &ServerDelegate_methods_string_to_object_INLRString__LRServerDelegate__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* ServerDelegate_methods_string_to_object_INLRString__LRServerDelegate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerDelegate_method_string_to_object_INLRString__LRServerDelegate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "string_to_object", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RServerDelegate::clazzInfo(), // return type
  "_C_string_to_object", // alternative name of method
  -1, // altlabelHashCode
  ServerDelegate_methods_string_to_object_INLRString__LRServerDelegate__args, // the arguments
  0, //arguments count
  ServerDelegate_methods_string_to_object_INLRString__LRServerDelegate__exceptions, // the declared exceptions
  ServerDelegate_MetainfoWrapper::ServerDelegate_method_string_to_object_INLRString__LRServerDelegate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerDelegate_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ServerDelegate_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerDelegate_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_l_toString", // alternative name of method
  -1, // altlabelHashCode
  ServerDelegate_methods_toString__LRString__args, // the arguments
  0, //arguments count
  ServerDelegate_methods_toString__LRString__exceptions, // the declared exceptions
  ServerDelegate_MetainfoWrapper::ServerDelegate_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerDelegate_methods_toString_INL_org_omg_CORBA_RObject__LRString__arg_self = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "self", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::omg::CORBA::RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerDelegate_methods_toString_INL_org_omg_CORBA_RObject__LRString__args[] = 
{
  &ServerDelegate_methods_toString_INL_org_omg_CORBA_RObject__LRString__arg_self,
  0
};

::acdk::lang::dmi::ClazzInfo* ServerDelegate_methods_toString_INL_org_omg_CORBA_RObject__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerDelegate_method_toString_INL_org_omg_CORBA_RObject__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_B_toString", // alternative name of method
  -1, // altlabelHashCode
  ServerDelegate_methods_toString_INL_org_omg_CORBA_RObject__LRString__args, // the arguments
  0, //arguments count
  ServerDelegate_methods_toString_INL_org_omg_CORBA_RObject__LRString__exceptions, // the declared exceptions
  ServerDelegate_MetainfoWrapper::ServerDelegate_method_toString_INL_org_omg_CORBA_RObject__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ServerDelegate_methods[] = 
{
  &ServerDelegate_method_GetClass__L_acdk_lang_RClass_,
  &ServerDelegate_method_ServerDelegate__LRServerDelegate_,
  &ServerDelegate_method_ServerDelegate_INLRString__LRServerDelegate_,
  &ServerDelegate_method_ServerDelegate_INLRORB_INLRString__LRServerDelegate_,
  &ServerDelegate_method_ServerDelegate_INLRORB_INLRObjectKey__LRServerDelegate_,
  &ServerDelegate_method__get_delegate__L_org_omg_CORBA_portable_RDelegate_,
  &ServerDelegate_method__invoke_INL_org_omg_CORBA_portable_ROutputStream__L_org_omg_CORBA_portable_RInputStream_,
  &ServerDelegate_method__releaseReply_INL_org_omg_CORBA_portable_RInputStream__V,
  &ServerDelegate_method__request_INLRString_Z_L_org_omg_CORBA_portable_ROutputStream_,
  &ServerDelegate_method__set_delegate_INL_org_omg_CORBA_portable_RDelegate__V,
  &ServerDelegate_method_duplicate__L_org_omg_CORBA_RObject_,
  &ServerDelegate_method_duplicate_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RObject_,
  &ServerDelegate_method_finalize__V,
  &ServerDelegate_method_get_interface_def__L_org_omg_CORBA_RObject_,
  &ServerDelegate_method_get_interface_def_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RObject_,
  &ServerDelegate_method_get_typeid__LRString_,
  &ServerDelegate_method_hash_I_I,
  &ServerDelegate_method_hash_INL_org_omg_CORBA_RObject_I_I,
  &ServerDelegate_method_isClient__Z,
  &ServerDelegate_method_isClient_Z_V,
  &ServerDelegate_method_is_a_INLRString__Z,
  &ServerDelegate_method_is_a_INL_org_omg_CORBA_RObject_INLRString__Z,
  &ServerDelegate_method_is_equivalent_INL_org_omg_CORBA_RObject__Z,
  &ServerDelegate_method_is_equivalent_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_RObject__Z,
  &ServerDelegate_method_is_local__Z,
  &ServerDelegate_method_is_local_INL_org_omg_CORBA_RObject__Z,
  &ServerDelegate_method_is_nil__Z,
  &ServerDelegate_method_is_nil_L_org_omg_CORBA_RObject__Z,
  &ServerDelegate_method_non_existent__Z,
  &ServerDelegate_method_non_existent_INL_org_omg_CORBA_RObject__Z,
  &ServerDelegate_method_objectKey__LRObjectKey_,
  &ServerDelegate_method_object_to_string_INL_org_omg_CORBA_RObject__LRString_,
  &ServerDelegate_method_orb__L_org_omg_CORBA_RORB_,
  &ServerDelegate_method_orb_INL_org_omg_CORBA_RObject__L_org_omg_CORBA_RORB_,
  &ServerDelegate_method_orb_invoke_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_ROutputStream__L_org_omg_CORBA_portable_RInputStream_,
  &ServerDelegate_method_release__V,
  &ServerDelegate_method_release_INL_org_omg_CORBA_RObject__V,
  &ServerDelegate_method_releaseReply_INL_org_omg_CORBA_RObject_INL_org_omg_CORBA_portable_RInputStream__V,
  &ServerDelegate_method_request_INL_org_omg_CORBA_RObject_INLRString_Z_L_org_omg_CORBA_portable_ROutputStream_,
  &ServerDelegate_method_setObjectKey_INLRObjectKey__V,
  &ServerDelegate_method_string_to_object_INLRString__LRServerDelegate_,
  &ServerDelegate_method_toString__LRString_,
  &ServerDelegate_method_toString_INL_org_omg_CORBA_RObject__LRString_,
  0
};


struct ServerDelegate_MetaInfoInitializer
{  ServerDelegate_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ServerDelegate::clazzInfo();
    ci->fields =  _ServerDelegate_fields;
    ci->methods =  _ServerDelegate_methods;
    ci->_scopeParent = acdkx_orb_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ServerDelegate_MetaInfoInitializer ServerDelegate_MetaInfoInitializer_staticinstance__;


} // namespace acdkx
} // namespace orb


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) orb_dummyExportFunc() {}
#endif

