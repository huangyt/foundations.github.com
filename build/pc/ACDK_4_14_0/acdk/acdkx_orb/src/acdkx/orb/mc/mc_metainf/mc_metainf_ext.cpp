// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../mc.h"
#include "../Config.h"
#include "../GenOrbIdlAttribute.h"
#include "../mc.h"
#include "../OrbDispatchAttribute.h"
#include "../OrbSetRepId.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdkx { 
namespace orb { 
namespace mc { 


//static
::acdk::lang::RObject
OrbDispatchAttribute_create_array(int length)
{
  return new ObjectArrayImpl<ROrbDispatchAttribute>(length);
}

//static
::acdk::lang::RObject
OrbDispatchAttribute_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class OrbDispatchAttribute_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OrbDispatchAttribute_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)OrbDispatchAttribute::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OrbDispatchAttribute_method_OrbDispatchAttribute__LROrbDispatchAttribute__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new OrbDispatchAttribute();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OrbDispatchAttribute_method_apply_INLRCodeInfo__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OrbDispatchAttribute* This = dmi_cast<OrbDispatchAttribute>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->OrbDispatchAttribute::apply((RCodeInfo)args[0].getObjectVar());
    else
      ret = This->apply((RCodeInfo)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OrbDispatchAttribute_method_initAttribute_INLRMetaCompiler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OrbDispatchAttribute::initAttribute((RMetaCompiler)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _OrbDispatchAttribute_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* OrbDispatchAttribute_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* OrbDispatchAttribute_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OrbDispatchAttribute_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  OrbDispatchAttribute_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  OrbDispatchAttribute_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  OrbDispatchAttribute_MetainfoWrapper::OrbDispatchAttribute_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* OrbDispatchAttribute_methods_OrbDispatchAttribute__LROrbDispatchAttribute__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* OrbDispatchAttribute_methods_OrbDispatchAttribute__LROrbDispatchAttribute__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OrbDispatchAttribute_method_OrbDispatchAttribute__LROrbDispatchAttribute_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "OrbDispatchAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  OrbDispatchAttribute::clazzInfo(), // return type
  "_0_OrbDispatchAttribute", // alternative name of method
  -1, // altlabelHashCode
  OrbDispatchAttribute_methods_OrbDispatchAttribute__LROrbDispatchAttribute__args, // the arguments
  0, //arguments count
  OrbDispatchAttribute_methods_OrbDispatchAttribute__LROrbDispatchAttribute__exceptions, // the declared exceptions
  OrbDispatchAttribute_MetainfoWrapper::OrbDispatchAttribute_method_OrbDispatchAttribute__LROrbDispatchAttribute__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OrbDispatchAttribute_methods_apply_INLRCodeInfo__Z_arg_cm = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cm", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCodeInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OrbDispatchAttribute_methods_apply_INLRCodeInfo__Z_args[] = 
{
  &OrbDispatchAttribute_methods_apply_INLRCodeInfo__Z_arg_cm,
  0
};

::acdk::lang::dmi::ClazzInfo* OrbDispatchAttribute_methods_apply_INLRCodeInfo__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OrbDispatchAttribute_method_apply_INLRCodeInfo__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "apply", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_apply", // alternative name of method
  -1, // altlabelHashCode
  OrbDispatchAttribute_methods_apply_INLRCodeInfo__Z_args, // the arguments
  0, //arguments count
  OrbDispatchAttribute_methods_apply_INLRCodeInfo__Z_exceptions, // the declared exceptions
  OrbDispatchAttribute_MetainfoWrapper::OrbDispatchAttribute_method_apply_INLRCodeInfo__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OrbDispatchAttribute_methods_initAttribute_INLRMetaCompiler__V_arg_mc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "mc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMetaCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OrbDispatchAttribute_methods_initAttribute_INLRMetaCompiler__V_args[] = 
{
  &OrbDispatchAttribute_methods_initAttribute_INLRMetaCompiler__V_arg_mc,
  0
};

::acdk::lang::dmi::ClazzInfo* OrbDispatchAttribute_methods_initAttribute_INLRMetaCompiler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OrbDispatchAttribute_method_initAttribute_INLRMetaCompiler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "initAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_initAttribute", // alternative name of method
  -1, // altlabelHashCode
  OrbDispatchAttribute_methods_initAttribute_INLRMetaCompiler__V_args, // the arguments
  0, //arguments count
  OrbDispatchAttribute_methods_initAttribute_INLRMetaCompiler__V_exceptions, // the declared exceptions
  OrbDispatchAttribute_MetainfoWrapper::OrbDispatchAttribute_method_initAttribute_INLRMetaCompiler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _OrbDispatchAttribute_methods[] = 
{
  &OrbDispatchAttribute_method_GetClass__L_acdk_lang_RClass_,
  &OrbDispatchAttribute_method_OrbDispatchAttribute__LROrbDispatchAttribute_,
  &OrbDispatchAttribute_method_apply_INLRCodeInfo__Z,
  &OrbDispatchAttribute_method_initAttribute_INLRMetaCompiler__V,
  0
};


struct OrbDispatchAttribute_MetaInfoInitializer
{  OrbDispatchAttribute_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = OrbDispatchAttribute::clazzInfo();
    ci->fields =  _OrbDispatchAttribute_fields;
    ci->methods =  _OrbDispatchAttribute_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
OrbDispatchAttribute_MetaInfoInitializer OrbDispatchAttribute_MetaInfoInitializer_staticinstance__;


} // namespace acdkx
} // namespace orb
} // namespace mc


namespace acdkx { 
namespace orb { 
namespace mc { 


//static
::acdk::lang::RObject
OrbSetRepId_create_array(int length)
{
  return new ObjectArrayImpl<ROrbSetRepId>(length);
}

//static
::acdk::lang::RObject
OrbSetRepId_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class OrbSetRepId_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OrbSetRepId_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)OrbSetRepId::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OrbSetRepId_method_OrbSetRepId_INLRString_SS_LROrbSetRepId__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new OrbSetRepId((RString)args[0].getObjectVar(), args[1].getShortVar(), args[2].getShortVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OrbSetRepId_method_OrbSetRepId_INLRString__LROrbSetRepId__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new OrbSetRepId((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OrbSetRepId_method_OrbSetRepId_INLRString_S_LROrbSetRepId__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new OrbSetRepId((RString)args[0].getObjectVar(), args[1].getShortVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OrbSetRepId_method_apply_INLRCodeInfo__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OrbSetRepId* This = dmi_cast<OrbSetRepId>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->OrbSetRepId::apply((RCodeInfo)args[0].getObjectVar());
    else
      ret = This->apply((RCodeInfo)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  OrbSetRepId_fields__major_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    OrbSetRepId* This = dmi_cast<OrbSetRepId>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_major, flags);
    else
      This->_major = var.getShortVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  OrbSetRepId_fields__minor_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    OrbSetRepId* This = dmi_cast<OrbSetRepId>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_minor, flags);
    else
      This->_minor = var.getShortVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  OrbSetRepId_fields__repId_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    OrbSetRepId* This = dmi_cast<OrbSetRepId>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_repId, flags);
    else
      This->_repId = (RString)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo OrbSetRepId_fields__major = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_major", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(),
  OrbSetRepId_MetainfoWrapper::OrbSetRepId_fields__major_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo OrbSetRepId_fields__minor = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_minor", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(),
  OrbSetRepId_MetainfoWrapper::OrbSetRepId_fields__minor_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo OrbSetRepId_fields__repId = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_repId", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  OrbSetRepId_MetainfoWrapper::OrbSetRepId_fields__repId_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _OrbSetRepId_fields[] = 
{
  &OrbSetRepId_fields__major,
  &OrbSetRepId_fields__minor,
  &OrbSetRepId_fields__repId,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* OrbSetRepId_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* OrbSetRepId_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OrbSetRepId_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  OrbSetRepId_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  OrbSetRepId_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  OrbSetRepId_MetainfoWrapper::OrbSetRepId_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OrbSetRepId_methods_OrbSetRepId_INLRString_SS_LROrbSetRepId__arg_repid = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "repid", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo OrbSetRepId_methods_OrbSetRepId_INLRString_SS_LROrbSetRepId__arg_major = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "major", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo OrbSetRepId_methods_OrbSetRepId_INLRString_SS_LROrbSetRepId__arg_minor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "minor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OrbSetRepId_methods_OrbSetRepId_INLRString_SS_LROrbSetRepId__args[] = 
{
  &OrbSetRepId_methods_OrbSetRepId_INLRString_SS_LROrbSetRepId__arg_repid,
  &OrbSetRepId_methods_OrbSetRepId_INLRString_SS_LROrbSetRepId__arg_major,
  &OrbSetRepId_methods_OrbSetRepId_INLRString_SS_LROrbSetRepId__arg_minor,
  0
};

::acdk::lang::dmi::ClazzInfo* OrbSetRepId_methods_OrbSetRepId_INLRString_SS_LROrbSetRepId__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OrbSetRepId_method_OrbSetRepId_INLRString_SS_LROrbSetRepId_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "OrbSetRepId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  OrbSetRepId::clazzInfo(), // return type
  "_0_OrbSetRepId", // alternative name of method
  -1, // altlabelHashCode
  OrbSetRepId_methods_OrbSetRepId_INLRString_SS_LROrbSetRepId__args, // the arguments
  0, //arguments count
  OrbSetRepId_methods_OrbSetRepId_INLRString_SS_LROrbSetRepId__exceptions, // the declared exceptions
  OrbSetRepId_MetainfoWrapper::OrbSetRepId_method_OrbSetRepId_INLRString_SS_LROrbSetRepId__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OrbSetRepId_methods_OrbSetRepId_INLRString__LROrbSetRepId__arg_repid = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "repid", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OrbSetRepId_methods_OrbSetRepId_INLRString__LROrbSetRepId__args[] = 
{
  &OrbSetRepId_methods_OrbSetRepId_INLRString__LROrbSetRepId__arg_repid,
  0
};

::acdk::lang::dmi::ClazzInfo* OrbSetRepId_methods_OrbSetRepId_INLRString__LROrbSetRepId__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OrbSetRepId_method_OrbSetRepId_INLRString__LROrbSetRepId_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "OrbSetRepId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  OrbSetRepId::clazzInfo(), // return type
  "_1_OrbSetRepId", // alternative name of method
  -1, // altlabelHashCode
  OrbSetRepId_methods_OrbSetRepId_INLRString__LROrbSetRepId__args, // the arguments
  0, //arguments count
  OrbSetRepId_methods_OrbSetRepId_INLRString__LROrbSetRepId__exceptions, // the declared exceptions
  OrbSetRepId_MetainfoWrapper::OrbSetRepId_method_OrbSetRepId_INLRString__LROrbSetRepId__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OrbSetRepId_methods_OrbSetRepId_INLRString_S_LROrbSetRepId__arg_repid = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "repid", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo OrbSetRepId_methods_OrbSetRepId_INLRString_S_LROrbSetRepId__arg_major = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "major", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OrbSetRepId_methods_OrbSetRepId_INLRString_S_LROrbSetRepId__args[] = 
{
  &OrbSetRepId_methods_OrbSetRepId_INLRString_S_LROrbSetRepId__arg_repid,
  &OrbSetRepId_methods_OrbSetRepId_INLRString_S_LROrbSetRepId__arg_major,
  0
};

::acdk::lang::dmi::ClazzInfo* OrbSetRepId_methods_OrbSetRepId_INLRString_S_LROrbSetRepId__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OrbSetRepId_method_OrbSetRepId_INLRString_S_LROrbSetRepId_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "OrbSetRepId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  OrbSetRepId::clazzInfo(), // return type
  "_2_OrbSetRepId", // alternative name of method
  -1, // altlabelHashCode
  OrbSetRepId_methods_OrbSetRepId_INLRString_S_LROrbSetRepId__args, // the arguments
  0, //arguments count
  OrbSetRepId_methods_OrbSetRepId_INLRString_S_LROrbSetRepId__exceptions, // the declared exceptions
  OrbSetRepId_MetainfoWrapper::OrbSetRepId_method_OrbSetRepId_INLRString_S_LROrbSetRepId__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OrbSetRepId_methods_apply_INLRCodeInfo__Z_arg_cm = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cm", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCodeInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OrbSetRepId_methods_apply_INLRCodeInfo__Z_args[] = 
{
  &OrbSetRepId_methods_apply_INLRCodeInfo__Z_arg_cm,
  0
};

::acdk::lang::dmi::ClazzInfo* OrbSetRepId_methods_apply_INLRCodeInfo__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OrbSetRepId_method_apply_INLRCodeInfo__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "apply", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_apply", // alternative name of method
  -1, // altlabelHashCode
  OrbSetRepId_methods_apply_INLRCodeInfo__Z_args, // the arguments
  0, //arguments count
  OrbSetRepId_methods_apply_INLRCodeInfo__Z_exceptions, // the declared exceptions
  OrbSetRepId_MetainfoWrapper::OrbSetRepId_method_apply_INLRCodeInfo__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _OrbSetRepId_methods[] = 
{
  &OrbSetRepId_method_GetClass__L_acdk_lang_RClass_,
  &OrbSetRepId_method_OrbSetRepId_INLRString_SS_LROrbSetRepId_,
  &OrbSetRepId_method_OrbSetRepId_INLRString__LROrbSetRepId_,
  &OrbSetRepId_method_OrbSetRepId_INLRString_S_LROrbSetRepId_,
  &OrbSetRepId_method_apply_INLRCodeInfo__Z,
  0
};


struct OrbSetRepId_MetaInfoInitializer
{  OrbSetRepId_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = OrbSetRepId::clazzInfo();
    ci->fields =  _OrbSetRepId_fields;
    ci->methods =  _OrbSetRepId_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
OrbSetRepId_MetaInfoInitializer OrbSetRepId_MetaInfoInitializer_staticinstance__;


} // namespace acdkx
} // namespace orb
} // namespace mc


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) mc_dummyExportFunc() {}
#endif

