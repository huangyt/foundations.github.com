// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "selftests.h"
#include "TestInterface.h"
#include "TestInterfaceImpl.h"



::acdk::lang::dmi::ClazzEnumValueInfo AnEnum_First = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "First", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  ::First, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo AnEnum_Second = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "Second", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  ::Second, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* AnEnum_enumValues[] = {
  &AnEnum_First,
  &AnEnum_Second,
0
};

::acdk::lang::dmi::ClazzEnumInfo* AnEnumMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo AnEnum_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "AnEnum", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AnEnum_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_AnEnum(&AnEnum_enumInfo);

  return &AnEnum_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_AnEnumEnumInfo(AnEnumMetaInf::GetEnumInfo());





::acdk::lang::dmi::ClazzSuperInfo _Hello_super___org__omg__CORBA__portable__InvokeHandler =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::org::omg::CORBA::portable::InvokeHandler::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Hello_interfaces[] =
{
  &_Hello_super___org__omg__CORBA__portable__InvokeHandler,
  0
};

::acdk::lang::dmi::ClazzInfo* Hello::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "Hello", // name of class
  -1, // hashCode
  "", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Hello_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Hello::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Hello(Hello::clazzInfo());

::acdk::lang::RClass
Hello::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Hello::getCollectableFields(FieldReferences& fields)
{
}





::acdk::lang::dmi::ClazzSuperInfo _tty_super___org__omg__CORBA__portable__InvokeHandler =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::org::omg::CORBA::portable::InvokeHandler::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _tty_interfaces[] =
{
  &_tty_super___org__omg__CORBA__portable__InvokeHandler,
  0
};

::acdk::lang::dmi::ClazzInfo* tty::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "tty", // name of class
  -1, // hashCode
  "", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _tty_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    tty::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_tty(tty::clazzInfo());

::acdk::lang::RClass
tty::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
tty::getCollectableFields(FieldReferences& fields)
{
}




namespace acdkx { 
namespace orb { 
namespace selftests { 

::acdk::lang::dmi::ClazzSuperInfo _TestException_super___acdk__lang__Throwable =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Throwable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TestException_interfaces[] =
{
  &_TestException_super___acdk__lang__Throwable,
  0
};

::acdk::lang::dmi::ClazzInfo* TestException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "TestException", // name of class
  -1, // hashCode
  "acdkx/orb/selftests", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TestException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TestException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TestException(TestException::clazzInfo());

::acdk::lang::RClass
TestException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TestException::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Throwable)::getCollectableFields(fields);
}


} // namespace acdkx
} // namespace orb
} // namespace selftests


namespace acdkx { 
namespace orb { 
namespace selftests { 

::acdk::lang::dmi::ClazzSuperInfo _TestInterface_super___org__omg__CORBA__portable__InvokeHandler =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::org::omg::CORBA::portable::InvokeHandler::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TestInterface_interfaces[] =
{
  &_TestInterface_super___org__omg__CORBA__portable__InvokeHandler,
  0
};

::acdk::lang::dmi::ClazzInfo* TestInterface::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "TestInterface", // name of class
  -1, // hashCode
  "acdkx/orb/selftests", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TestInterface_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TestInterface::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TestInterface(TestInterface::clazzInfo());

::acdk::lang::RClass
TestInterface::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TestInterface::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdkx
} // namespace orb
} // namespace selftests


namespace acdkx { 
namespace orb { 
namespace selftests { 

::acdk::lang::dmi::ClazzSuperInfo _TestInterfaceImpl_super___acdkx__orb__ServerDelegate =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdkx::orb::ServerDelegate::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _TestInterfaceImpl_super___acdkx__orb__selftests__TestInterface =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdkx::orb::selftests::TestInterface::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TestInterfaceImpl_interfaces[] =
{
  &_TestInterfaceImpl_super___acdkx__orb__ServerDelegate,
  &_TestInterfaceImpl_super___acdkx__orb__selftests__TestInterface,
  0
};

::acdk::lang::dmi::ClazzInfo* TestInterfaceImpl::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "TestInterfaceImpl", // name of class
  -1, // hashCode
  "acdkx/orb/selftests", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TestInterfaceImpl_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TestInterfaceImpl::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TestInterfaceImpl(TestInterfaceImpl::clazzInfo());

::acdk::lang::RClass
TestInterfaceImpl::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TestInterfaceImpl::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdkx::orb::, ServerDelegate)::getCollectableFields(fields);
}


} // namespace acdkx
} // namespace orb
} // namespace selftests

