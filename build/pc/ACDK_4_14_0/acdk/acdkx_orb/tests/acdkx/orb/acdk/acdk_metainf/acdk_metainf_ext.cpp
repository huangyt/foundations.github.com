// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../acdk.h"
#include "../acdk.h"
#include "../AdressBookImpl.h"
#include "../IdlMappingTest.h"
#include <acdkx/orb/CorObject.h>
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace tests { 
namespace acdkx { 
namespace orb { 


//static
::acdk::lang::RObject
AdressInfo_create_array(int length)
{
  return new ObjectArrayImpl<RAdressInfo>(length);
}

//static
::acdk::lang::RObject
AdressInfo_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class AdressInfo_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AdressInfo_method_AdressInfo__LRAdressInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AdressInfo();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AdressInfo_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AdressInfo::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AdressInfo_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AdressInfo* This = dmi_cast<AdressInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AdressInfo::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AdressInfo_fields_name_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AdressInfo* This = dmi_cast<AdressInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->name, flags);
    else
      This->name = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AdressInfo_fields_street_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AdressInfo* This = dmi_cast<AdressInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->street, flags);
    else
      This->street = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AdressInfo_fields_streetnumber_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AdressInfo* This = dmi_cast<AdressInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->streetnumber, flags);
    else
      This->streetnumber = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo AdressInfo_fields_name = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "name", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  AdressInfo_MetainfoWrapper::AdressInfo_fields_name_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AdressInfo_fields_street = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "street", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  AdressInfo_MetainfoWrapper::AdressInfo_fields_street_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AdressInfo_fields_streetnumber = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "streetnumber", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  AdressInfo_MetainfoWrapper::AdressInfo_fields_streetnumber_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _AdressInfo_fields[] = 
{
  &AdressInfo_fields_name,
  &AdressInfo_fields_street,
  &AdressInfo_fields_streetnumber,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* AdressInfo_methods_AdressInfo__LRAdressInfo__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AdressInfo_methods_AdressInfo__LRAdressInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AdressInfo_method_AdressInfo__LRAdressInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "AdressInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AdressInfo::clazzInfo(), // return type
  "_0_AdressInfo", // alternative name of method
  -1, // altlabelHashCode
  AdressInfo_methods_AdressInfo__LRAdressInfo__args, // the arguments
  0, //arguments count
  AdressInfo_methods_AdressInfo__LRAdressInfo__exceptions, // the declared exceptions
  AdressInfo_MetainfoWrapper::AdressInfo_method_AdressInfo__LRAdressInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AdressInfo_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AdressInfo_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AdressInfo_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  AdressInfo_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  AdressInfo_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  AdressInfo_MetainfoWrapper::AdressInfo_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AdressInfo_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AdressInfo_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AdressInfo_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_toString", // alternative name of method
  -1, // altlabelHashCode
  AdressInfo_methods_toString__LRString__args, // the arguments
  0, //arguments count
  AdressInfo_methods_toString__LRString__exceptions, // the declared exceptions
  AdressInfo_MetainfoWrapper::AdressInfo_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _AdressInfo_methods[] = 
{
  &AdressInfo_method_AdressInfo__LRAdressInfo_,
  &AdressInfo_method_GetClass__L_acdk_lang_RClass_,
  &AdressInfo_method_toString__LRString_,
  0
};


struct AdressInfo_MetaInfoInitializer
{  AdressInfo_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = AdressInfo::clazzInfo();
    ci->fields =  _AdressInfo_fields;
    ci->methods =  _AdressInfo_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
AdressInfo_MetaInfoInitializer AdressInfo_MetaInfoInitializer_staticinstance__;


struct AdressInfo_clazzInfo_ClazzAttributesResInitializer1
{
  AdressInfo_clazzInfo_ClazzAttributesResInitializer1()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)AdressInfo::clazzInfo(), "acdkx_orb_StructType", ::acdk::lang::dmi::ClazzAttributeResValue::makeStringRes("", false));
  }
};

AdressInfo_clazzInfo_ClazzAttributesResInitializer1 AdressInfo_clazzInfo_ClazzAttributesResInitializer1_instance;



} // namespace tests
} // namespace acdkx
} // namespace orb


namespace tests { 
namespace acdkx { 
namespace orb { 


//static
::acdk::lang::RObject
AdressBook_create_array(int length)
{
  return new ObjectArrayImpl<RAdressBook>(length);
}

//static
::acdk::lang::RObject
AdressBook_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class AdressBook_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AdressBook_method__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AdressBook::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AdressBook_method_getAddressInfoA_LRString__LRAdressInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AdressBook* This = dmi_cast<AdressBook>(This_);
    ret = (::acdk::lang::RObject)This->getAddressInfoA((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AdressBook_method_getAddressInfoB_LRString_OUTLRAdressInfo__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AdressBook* This = dmi_cast<AdressBook>(This_);
    This->getAddressInfoB((RString)args[0].getObjectVar(),  ::acdk::lang::getTypedObjectRef< RAdressInfo >(args[1]));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AdressBook_method_getAllAdressInfos__LRAdressInfoArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AdressBook* This = dmi_cast<AdressBook>(This_);
    ret = (::acdk::lang::RObject)This->getAllAdressInfos();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AdressBook_method_getOtherAdressBook_OUTLRAdressBook__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AdressBook* This = dmi_cast<AdressBook>(This_);
    This->getOtherAdressBook( ::acdk::lang::getTypedObjectRef< RAdressBook >(args[0]));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AdressBook_method_ping__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AdressBook* This = dmi_cast<AdressBook>(This_);
    This->ping();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AdressBook_method_setAddressInfo_LRString_INLRAdressInfo__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AdressBook* This = dmi_cast<AdressBook>(This_);
    This->setAddressInfo((RString)args[0].getObjectVar(), (RAdressInfo)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AdressBook_method_setOtherAdressBook_INLRAdressBook__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AdressBook* This = dmi_cast<AdressBook>(This_);
    This->setOtherAdressBook((RAdressBook)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AdressBook_method_testArray_INLRintArray_OUTLRStringArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AdressBook* This = dmi_cast<AdressBook>(This_);
    This->testArray((RintArray)args[0].getObjectVar(),  ::acdk::lang::getTypedObjectRef< RStringArray >(args[1]));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _AdressBook_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* AdressBook_methods__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AdressBook_methods__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AdressBook_method_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_8_GetClass", // alternative name of method
  -1, // altlabelHashCode
  AdressBook_methods__args, // the arguments
  0, //arguments count
  AdressBook_methods__exceptions, // the declared exceptions
  AdressBook_MetainfoWrapper::AdressBook_method__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AdressBook_methods_getAddressInfoA_LRString__LRAdressInfo__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AdressBook_methods_getAddressInfoA_LRString__LRAdressInfo__args[] = 
{
  &AdressBook_methods_getAddressInfoA_LRString__LRAdressInfo__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* AdressBook_methods_getAddressInfoA_LRString__LRAdressInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AdressBook_method_getAddressInfoA_LRString__LRAdressInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAddressInfoA", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAdressInfo::clazzInfo(), // return type
  "_2_getAddressInfoA", // alternative name of method
  -1, // altlabelHashCode
  AdressBook_methods_getAddressInfoA_LRString__LRAdressInfo__args, // the arguments
  0, //arguments count
  AdressBook_methods_getAddressInfoA_LRString__LRAdressInfo__exceptions, // the declared exceptions
  AdressBook_MetainfoWrapper::AdressBook_method_getAddressInfoA_LRString__LRAdressInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AdressBook_methods_getAddressInfoB_LRString_OUTLRAdressInfo__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AdressBook_methods_getAddressInfoB_LRString_OUTLRAdressInfo__V_arg_adressinfo = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "adressinfo", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAdressInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AdressBook_methods_getAddressInfoB_LRString_OUTLRAdressInfo__V_args[] = 
{
  &AdressBook_methods_getAddressInfoB_LRString_OUTLRAdressInfo__V_arg_name,
  &AdressBook_methods_getAddressInfoB_LRString_OUTLRAdressInfo__V_arg_adressinfo,
  0
};

::acdk::lang::dmi::ClazzInfo* AdressBook_methods_getAddressInfoB_LRString_OUTLRAdressInfo__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AdressBook_method_getAddressInfoB_LRString_OUTLRAdressInfo__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAddressInfoB", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_getAddressInfoB", // alternative name of method
  -1, // altlabelHashCode
  AdressBook_methods_getAddressInfoB_LRString_OUTLRAdressInfo__V_args, // the arguments
  0, //arguments count
  AdressBook_methods_getAddressInfoB_LRString_OUTLRAdressInfo__V_exceptions, // the declared exceptions
  AdressBook_MetainfoWrapper::AdressBook_method_getAddressInfoB_LRString_OUTLRAdressInfo__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AdressBook_methods_getAllAdressInfos__LRAdressInfoArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AdressBook_methods_getAllAdressInfos__LRAdressInfoArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AdressBook_method_getAllAdressInfos__LRAdressInfoArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAllAdressInfos", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAdressInfoArray::clazzInfo(), // return type
  "_5_getAllAdressInfos", // alternative name of method
  -1, // altlabelHashCode
  AdressBook_methods_getAllAdressInfos__LRAdressInfoArray__args, // the arguments
  0, //arguments count
  AdressBook_methods_getAllAdressInfos__LRAdressInfoArray__exceptions, // the declared exceptions
  AdressBook_MetainfoWrapper::AdressBook_method_getAllAdressInfos__LRAdressInfoArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AdressBook_methods_getOtherAdressBook_OUTLRAdressBook__V_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAdressBook::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AdressBook_methods_getOtherAdressBook_OUTLRAdressBook__V_args[] = 
{
  &AdressBook_methods_getOtherAdressBook_OUTLRAdressBook__V_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* AdressBook_methods_getOtherAdressBook_OUTLRAdressBook__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AdressBook_method_getOtherAdressBook_OUTLRAdressBook__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getOtherAdressBook", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_getOtherAdressBook", // alternative name of method
  -1, // altlabelHashCode
  AdressBook_methods_getOtherAdressBook_OUTLRAdressBook__V_args, // the arguments
  0, //arguments count
  AdressBook_methods_getOtherAdressBook_OUTLRAdressBook__V_exceptions, // the declared exceptions
  AdressBook_MetainfoWrapper::AdressBook_method_getOtherAdressBook_OUTLRAdressBook__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AdressBook_methods_ping__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AdressBook_methods_ping__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AdressBook_method_ping__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ping", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0_ping", // alternative name of method
  -1, // altlabelHashCode
  AdressBook_methods_ping__V_args, // the arguments
  0, //arguments count
  AdressBook_methods_ping__V_exceptions, // the declared exceptions
  AdressBook_MetainfoWrapper::AdressBook_method_ping__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AdressBook_methods_setAddressInfo_LRString_INLRAdressInfo__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AdressBook_methods_setAddressInfo_LRString_INLRAdressInfo__V_arg_adressinfo = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "adressinfo", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAdressInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AdressBook_methods_setAddressInfo_LRString_INLRAdressInfo__V_args[] = 
{
  &AdressBook_methods_setAddressInfo_LRString_INLRAdressInfo__V_arg_name,
  &AdressBook_methods_setAddressInfo_LRString_INLRAdressInfo__V_arg_adressinfo,
  0
};

::acdk::lang::dmi::ClazzInfo* AdressBook_methods_setAddressInfo_LRString_INLRAdressInfo__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AdressBook_method_setAddressInfo_LRString_INLRAdressInfo__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setAddressInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_setAddressInfo", // alternative name of method
  -1, // altlabelHashCode
  AdressBook_methods_setAddressInfo_LRString_INLRAdressInfo__V_args, // the arguments
  0, //arguments count
  AdressBook_methods_setAddressInfo_LRString_INLRAdressInfo__V_exceptions, // the declared exceptions
  AdressBook_MetainfoWrapper::AdressBook_method_setAddressInfo_LRString_INLRAdressInfo__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AdressBook_methods_setOtherAdressBook_INLRAdressBook__V_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAdressBook::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AdressBook_methods_setOtherAdressBook_INLRAdressBook__V_args[] = 
{
  &AdressBook_methods_setOtherAdressBook_INLRAdressBook__V_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* AdressBook_methods_setOtherAdressBook_INLRAdressBook__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AdressBook_method_setOtherAdressBook_INLRAdressBook__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setOtherAdressBook", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_setOtherAdressBook", // alternative name of method
  -1, // altlabelHashCode
  AdressBook_methods_setOtherAdressBook_INLRAdressBook__V_args, // the arguments
  0, //arguments count
  AdressBook_methods_setOtherAdressBook_INLRAdressBook__V_exceptions, // the declared exceptions
  AdressBook_MetainfoWrapper::AdressBook_method_setOtherAdressBook_INLRAdressBook__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AdressBook_methods_testArray_INLRintArray_OUTLRStringArray__V_arg_longs = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "longs", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RintArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AdressBook_methods_testArray_INLRintArray_OUTLRStringArray__V_arg_strings = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "strings", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AdressBook_methods_testArray_INLRintArray_OUTLRStringArray__V_args[] = 
{
  &AdressBook_methods_testArray_INLRintArray_OUTLRStringArray__V_arg_longs,
  &AdressBook_methods_testArray_INLRintArray_OUTLRStringArray__V_arg_strings,
  0
};

::acdk::lang::dmi::ClazzInfo* AdressBook_methods_testArray_INLRintArray_OUTLRStringArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AdressBook_method_testArray_INLRintArray_OUTLRStringArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "testArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_testArray", // alternative name of method
  -1, // altlabelHashCode
  AdressBook_methods_testArray_INLRintArray_OUTLRStringArray__V_args, // the arguments
  0, //arguments count
  AdressBook_methods_testArray_INLRintArray_OUTLRStringArray__V_exceptions, // the declared exceptions
  AdressBook_MetainfoWrapper::AdressBook_method_testArray_INLRintArray_OUTLRStringArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _AdressBook_methods[] = 
{
  &AdressBook_method_,
  &AdressBook_method_getAddressInfoA_LRString__LRAdressInfo_,
  &AdressBook_method_getAddressInfoB_LRString_OUTLRAdressInfo__V,
  &AdressBook_method_getAllAdressInfos__LRAdressInfoArray_,
  &AdressBook_method_getOtherAdressBook_OUTLRAdressBook__V,
  &AdressBook_method_ping__V,
  &AdressBook_method_setAddressInfo_LRString_INLRAdressInfo__V,
  &AdressBook_method_setOtherAdressBook_INLRAdressBook__V,
  &AdressBook_method_testArray_INLRintArray_OUTLRStringArray__V,
  0
};


struct AdressBook_MetaInfoInitializer
{  AdressBook_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = AdressBook::clazzInfo();
    ci->fields =  _AdressBook_fields;
    ci->methods =  _AdressBook_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
AdressBook_MetaInfoInitializer AdressBook_MetaInfoInitializer_staticinstance__;


struct AdressBook_clazzInfo_ClazzAttributesResInitializer2
{
  AdressBook_clazzInfo_ClazzAttributesResInitializer2()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)AdressBook::clazzInfo(), "acdkx_orb_ClassType", ::acdk::lang::dmi::ClazzAttributeResValue::makeStringRes("", false));
  }
};

AdressBook_clazzInfo_ClazzAttributesResInitializer2 AdressBook_clazzInfo_ClazzAttributesResInitializer2_instance;


char* _AdressBook_Skel__ids[] = {
  "IDL:tests/acdkx/orb/AdressBook:1.0",
  0
};

class  AdressBook_Skel
: extends ::acdkx::orb::CorObject,
  implements AdressBook
{
public:
  char** _ids() { return _AdressBook_Skel__ids; }
  AdressBook_Skel() : ACDK_FQ_SUPER_QUALIFIER(::acdkx::orb::, CorObject()) { }
  AdressBook_Skel(IN(::acdk::lang::RString) objKey) : ACDK_FQ_SUPER_QUALIFIER(::acdkx::orb::, CorObject(objKey)) { }
  static ::acdk::lang::RObject create_instance() { return new AdressBook_Skel(); }
  virtual void ping()
  {
    while (true) {
    if (is_local() == true) {
        dynamic_cast< AdressBook*>(localObject())->ping();
        return;
     } else { // not local
      ::org::omg::CORBA::portable::ROutputStream __output = Nil;
      ::org::omg::CORBA::portable::RInputStream __input = Nil;
      try {
        __output = _request("ping", true);
        __input = ACDK_FQ_SUPER_QUALIFIER(::acdkx::orb::, CorObject)::_invoke(__output);
        return;
      } catch (::org::omg::CORBA::portable::RRemarshalException ) {
        ; //nothing continue;
      } catch (::org::omg::CORBA::portable::RApplicationException _exception ) {
         ::acdk::lang::RClass _exClass = _exception->getUserExceptionClass();
         __input = _exception->getInputStream();
           THROW1_FQ(::org::omg::CORBA::, UNKNOWN, RString("Unexpected User Exception: ") + _exClass->getName());
      } 
    } // not local
    } // while (true);
  }
  virtual void testArray(IN(RintArray) longs, OUT(RStringArray) strings)
  {
    while (true) {
    if (is_local() == true) {
        dynamic_cast< AdressBook*>(localObject())->testArray(longs, strings);
        return;
     } else { // not local
      ::org::omg::CORBA::portable::ROutputStream __output = Nil;
      ::org::omg::CORBA::portable::RInputStream __input = Nil;
      try {
        __output = _request("testArray", true);
        __output->write_acdk_object((::acdk::lang::RObject)longs);
        __input = ACDK_FQ_SUPER_QUALIFIER(::acdkx::orb::, CorObject)::_invoke(__output);
        strings = (RStringArray) __input->read_acdk_object(StringArray::GetClass());
        return;
      } catch (::org::omg::CORBA::portable::RRemarshalException ) {
        ; //nothing continue;
      } catch (::org::omg::CORBA::portable::RApplicationException _exception ) {
         ::acdk::lang::RClass _exClass = _exception->getUserExceptionClass();
         __input = _exception->getInputStream();
           THROW1_FQ(::org::omg::CORBA::, UNKNOWN, RString("Unexpected User Exception: ") + _exClass->getName());
      } 
    } // not local
    } // while (true);
  }
  virtual RAdressInfo getAddressInfoA(RString name)
  {
    while (true) {
    if (is_local() == true) {
        RAdressInfo __retvalue = dynamic_cast< AdressBook*>(localObject())->getAddressInfoA(name);
     } else { // not local
      ::org::omg::CORBA::portable::ROutputStream __output = Nil;
      ::org::omg::CORBA::portable::RInputStream __input = Nil;
      try {
        __output = _request("getAddressInfoA", true);
        __output->write_string(name);
        __input = ACDK_FQ_SUPER_QUALIFIER(::acdkx::orb::, CorObject)::_invoke(__output);
        RAdressInfo __retvalue = (RAdressInfo)__input->read_acdk_object(AdressInfo::GetClass());
        return __retvalue;
      } catch (::org::omg::CORBA::portable::RRemarshalException ) {
        ; //nothing continue;
      } catch (::org::omg::CORBA::portable::RApplicationException _exception ) {
         ::acdk::lang::RClass _exClass = _exception->getUserExceptionClass();
         __input = _exception->getInputStream();
           THROW1_FQ(::org::omg::CORBA::, UNKNOWN, RString("Unexpected User Exception: ") + _exClass->getName());
      } 
    } // not local
    } // while (true);
  }
  virtual void getAddressInfoB(RString name, OUT(RAdressInfo) adressinfo)
  {
    while (true) {
    if (is_local() == true) {
        dynamic_cast< AdressBook*>(localObject())->getAddressInfoB(name, adressinfo);
        return;
     } else { // not local
      ::org::omg::CORBA::portable::ROutputStream __output = Nil;
      ::org::omg::CORBA::portable::RInputStream __input = Nil;
      try {
        __output = _request("getAddressInfoB", true);
        __output->write_string(name);
        __input = ACDK_FQ_SUPER_QUALIFIER(::acdkx::orb::, CorObject)::_invoke(__output);
        adressinfo = (RAdressInfo) __input->read_acdk_object(AdressInfo::GetClass());
        return;
      } catch (::org::omg::CORBA::portable::RRemarshalException ) {
        ; //nothing continue;
      } catch (::org::omg::CORBA::portable::RApplicationException _exception ) {
         ::acdk::lang::RClass _exClass = _exception->getUserExceptionClass();
         __input = _exception->getInputStream();
           THROW1_FQ(::org::omg::CORBA::, UNKNOWN, RString("Unexpected User Exception: ") + _exClass->getName());
      } 
    } // not local
    } // while (true);
  }
  virtual void setAddressInfo(RString name, IN(RAdressInfo) adressinfo)
  {
    while (true) {
    if (is_local() == true) {
        dynamic_cast< AdressBook*>(localObject())->setAddressInfo(name, adressinfo);
        return;
     } else { // not local
      ::org::omg::CORBA::portable::ROutputStream __output = Nil;
      ::org::omg::CORBA::portable::RInputStream __input = Nil;
      try {
        __output = _request("setAddressInfo", true);
        __output->write_string(name);
        __output->write_acdk_object((::acdk::lang::RObject)adressinfo);
        __input = ACDK_FQ_SUPER_QUALIFIER(::acdkx::orb::, CorObject)::_invoke(__output);
        return;
      } catch (::org::omg::CORBA::portable::RRemarshalException ) {
        ; //nothing continue;
      } catch (::org::omg::CORBA::portable::RApplicationException _exception ) {
         ::acdk::lang::RClass _exClass = _exception->getUserExceptionClass();
         __input = _exception->getInputStream();
           THROW1_FQ(::org::omg::CORBA::, UNKNOWN, RString("Unexpected User Exception: ") + _exClass->getName());
      } 
    } // not local
    } // while (true);
  }
  virtual RAdressInfoArray getAllAdressInfos()
  {
    while (true) {
    if (is_local() == true) {
        RAdressInfoArray __retvalue = dynamic_cast< AdressBook*>(localObject())->getAllAdressInfos();
     } else { // not local
      ::org::omg::CORBA::portable::ROutputStream __output = Nil;
      ::org::omg::CORBA::portable::RInputStream __input = Nil;
      try {
        __output = _request("getAllAdressInfos", true);
        __input = ACDK_FQ_SUPER_QUALIFIER(::acdkx::orb::, CorObject)::_invoke(__output);
        RAdressInfoArray __retvalue = (RAdressInfoArray)__input->read_acdk_object(AdressInfoArray::GetClass());
        return __retvalue;
      } catch (::org::omg::CORBA::portable::RRemarshalException ) {
        ; //nothing continue;
      } catch (::org::omg::CORBA::portable::RApplicationException _exception ) {
         ::acdk::lang::RClass _exClass = _exception->getUserExceptionClass();
         __input = _exception->getInputStream();
           THROW1_FQ(::org::omg::CORBA::, UNKNOWN, RString("Unexpected User Exception: ") + _exClass->getName());
      } 
    } // not local
    } // while (true);
  }
  virtual void setOtherAdressBook(IN(RAdressBook) other)
  {
    while (true) {
    if (is_local() == true) {
        dynamic_cast< AdressBook*>(localObject())->setOtherAdressBook(other);
        return;
     } else { // not local
      ::org::omg::CORBA::portable::ROutputStream __output = Nil;
      ::org::omg::CORBA::portable::RInputStream __input = Nil;
      try {
        __output = _request("setOtherAdressBook", true);
        __output->write_acdk_object((::acdk::lang::RObject)other);
        __input = ACDK_FQ_SUPER_QUALIFIER(::acdkx::orb::, CorObject)::_invoke(__output);
        return;
      } catch (::org::omg::CORBA::portable::RRemarshalException ) {
        ; //nothing continue;
      } catch (::org::omg::CORBA::portable::RApplicationException _exception ) {
         ::acdk::lang::RClass _exClass = _exception->getUserExceptionClass();
         __input = _exception->getInputStream();
           THROW1_FQ(::org::omg::CORBA::, UNKNOWN, RString("Unexpected User Exception: ") + _exClass->getName());
      } 
    } // not local
    } // while (true);
  }
  virtual void getOtherAdressBook(OUT(RAdressBook) other)
  {
    while (true) {
    if (is_local() == true) {
        dynamic_cast< AdressBook*>(localObject())->getOtherAdressBook(other);
        return;
     } else { // not local
      ::org::omg::CORBA::portable::ROutputStream __output = Nil;
      ::org::omg::CORBA::portable::RInputStream __input = Nil;
      try {
        __output = _request("getOtherAdressBook", true);
        __input = ACDK_FQ_SUPER_QUALIFIER(::acdkx::orb::, CorObject)::_invoke(__output);
        other = (RAdressBook) __input->read_acdk_object(AdressBook::GetClass());
        return;
      } catch (::org::omg::CORBA::portable::RRemarshalException ) {
        ; //nothing continue;
      } catch (::org::omg::CORBA::portable::RApplicationException _exception ) {
         ::acdk::lang::RClass _exClass = _exception->getUserExceptionClass();
         __input = _exception->getInputStream();
           THROW1_FQ(::org::omg::CORBA::, UNKNOWN, RString("Unexpected User Exception: ") + _exClass->getName());
      } 
    } // not local
    } // while (true);
  }
  virtual ::acdk::lang::RClass GetClass()
  {
    while (true) {
    if (is_local() == true) {
        ::acdk::lang::RClass __retvalue = dynamic_cast< AdressBook*>(localObject())->GetClass();
     } else { // not local
      ::org::omg::CORBA::portable::ROutputStream __output = Nil;
      ::org::omg::CORBA::portable::RInputStream __input = Nil;
      try {
        __output = _request("GetClass", true);
        __input = ACDK_FQ_SUPER_QUALIFIER(::acdkx::orb::, CorObject)::_invoke(__output);
        ::acdk::lang::RClass __retvalue = (::acdk::lang::RClass)__input->read_acdk_object(::acdk::lang::Class::GetClass());
        return __retvalue;
      } catch (::org::omg::CORBA::portable::RRemarshalException ) {
        ; //nothing continue;
      } catch (::org::omg::CORBA::portable::RApplicationException _exception ) {
         ::acdk::lang::RClass _exClass = _exception->getUserExceptionClass();
         __input = _exception->getInputStream();
           THROW1_FQ(::org::omg::CORBA::, UNKNOWN, RString("Unexpected User Exception: ") + _exClass->getName());
      } 
    } // not local
    } // while (true);
  }
};

::acdkx::orb::SkelInfoClassesStruct __AdressBook_Skel_Info = { AdressBook::clazzInfo(), AdressBook_Skel::create_instance, 0 };
static::acdkx::orb::RegisterSkelInfoClass _register_AdressBook_Skel(&__AdressBook_Skel_Info);

//static
RAdressBook AdressBook::GetSkel(IN(::acdk::lang::RString) objKey)
{
  return new AdressBook_Skel(objKey);
}
//virtual
::org::omg::CORBA::portable::ROutputStream
AdressBook:: _invoke(IN(RString) method, ::org::omg::CORBA::portable::InputStream& __input, ::org::omg::CORBA::portable::ResponseHandler& handler) THROWS1(::org::omg::CORBA::RSystemException)
{
#if defined(__BORLANDC__) // Borland 5.51 bug has to be solved
  ::acdk::lang::RThrowable ex;
#endif //defined(__BORLANDC__)
  if (method->equals("_is_a") == true) {
    try {
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createReply();
      ::acdk::lang::RString name = __input.read_string();
      for (int i = 0; _AdressBook_Skel__ids[i]; i++) {
        if (name->equals(_AdressBook_Skel__ids[i]) == true) {
          __output->write_boolean(true);
          return __output;
        }
      }
      __output->write_boolean(false);
      return __output;
    } catch (::acdk::lang::RThrowable ex) {
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createExceptionReply();
      __output->write_exception(ex);
      return __output;
    } catch (...) {
      throw;
    }
  }
  const ::acdk::lang::dmi::ClazzMethodInfo* methinf =  ::acdkx::orb::AORB::lookupMethod(method, clazzInfo());
  if (methinf == 0)
    THROW1(Exception, RString("Cannot find matching function for ") + method);
  if (&AdressBook_method_ping__V == methinf) {
    try {
      ping();
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createReply();
      return __output;
    } catch (::acdk::lang::RThrowable ex) {
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createExceptionReply();
      __output->write_exception(ex);
      return __output;
    } catch (...) {
      throw;
    }
  }
  if (&AdressBook_method_testArray_INLRintArray_OUTLRStringArray__V == methinf) {
    try {
      RintArray longs = (RintArray)__input.read_acdk_object(intArray::GetClass());
      RStringArray strings;
      testArray(longs, strings);
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createReply();
      __output->write_acdk_object((::acdk::lang::RObject)strings);
      return __output;
    } catch (::acdk::lang::RThrowable ex) {
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createExceptionReply();
      __output->write_exception(ex);
      return __output;
    } catch (...) {
      throw;
    }
  }
  if (&AdressBook_method_getAddressInfoA_LRString__LRAdressInfo_ == methinf) {
    try {
      RString name = (RString)__input.read_string();
      RAdressInfo __retval = getAddressInfoA(name);
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createReply();
      __output->write_acdk_object((::acdk::lang::RObject)__retval);
      return __output;
    } catch (::acdk::lang::RThrowable ex) {
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createExceptionReply();
      __output->write_exception(ex);
      return __output;
    } catch (...) {
      throw;
    }
  }
  if (&AdressBook_method_getAddressInfoB_LRString_OUTLRAdressInfo__V == methinf) {
    try {
      RString name = (RString)__input.read_string();
      RAdressInfo adressinfo;
      getAddressInfoB(name, adressinfo);
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createReply();
      __output->write_acdk_object((::acdk::lang::RObject)adressinfo);
      return __output;
    } catch (::acdk::lang::RThrowable ex) {
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createExceptionReply();
      __output->write_exception(ex);
      return __output;
    } catch (...) {
      throw;
    }
  }
  if (&AdressBook_method_setAddressInfo_LRString_INLRAdressInfo__V == methinf) {
    try {
      RString name = (RString)__input.read_string();
      RAdressInfo adressinfo = (RAdressInfo)__input.read_acdk_object(AdressInfo::GetClass());
      setAddressInfo(name, adressinfo);
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createReply();
      return __output;
    } catch (::acdk::lang::RThrowable ex) {
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createExceptionReply();
      __output->write_exception(ex);
      return __output;
    } catch (...) {
      throw;
    }
  }
  if (&AdressBook_method_getAllAdressInfos__LRAdressInfoArray_ == methinf) {
    try {
      RAdressInfoArray __retval = getAllAdressInfos();
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createReply();
      __output->write_acdk_object((::acdk::lang::RObject)__retval);
      return __output;
    } catch (::acdk::lang::RThrowable ex) {
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createExceptionReply();
      __output->write_exception(ex);
      return __output;
    } catch (...) {
      throw;
    }
  }
  if (&AdressBook_method_setOtherAdressBook_INLRAdressBook__V == methinf) {
    try {
      RAdressBook other = (RAdressBook)__input.read_acdk_object(AdressBook::GetClass());
      setOtherAdressBook(other);
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createReply();
      return __output;
    } catch (::acdk::lang::RThrowable ex) {
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createExceptionReply();
      __output->write_exception(ex);
      return __output;
    } catch (...) {
      throw;
    }
  }
  if (&AdressBook_method_getOtherAdressBook_OUTLRAdressBook__V == methinf) {
    try {
      RAdressBook other;
      getOtherAdressBook(other);
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createReply();
      __output->write_acdk_object((::acdk::lang::RObject)other);
      return __output;
    } catch (::acdk::lang::RThrowable ex) {
      ::org::omg::CORBA::portable::ROutputStream __output = handler.createExceptionReply();
      __output->write_exception(ex);
      return __output;
    } catch (...) {
      throw;
    }
  }
  THROW0_FQ(::org::omg::CORBA::, BAD_OPERATION);
  return Nil;
}


} // namespace tests
} // namespace acdkx
} // namespace orb


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) acdk_dummyExportFunc() {}
#endif

