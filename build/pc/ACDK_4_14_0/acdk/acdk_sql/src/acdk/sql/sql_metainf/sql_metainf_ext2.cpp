// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../sql.h"
#include "../Array.h"
#include "../Blob.h"
#include "../CallableStatement.h"
#include "../Config.h"
#include "../Connection.h"
#include "../DatabaseMetaData.h"
#include "../Driver.h"
#include "../DriverManager.h"
#include "../DriverPropertyInfo.h"
#include "../PreparedStatement.h"
#include "../ResultSet.h"
#include "../ResultSetMetaData.h"
#include "../sql.h"
#include "../SQLConfig.h"
#include "../SQLException.h"
#include "../SQLWarning.h"
#include "../sql_all.h"
#include "../Statement.h"
#include "../Time.h"
#include "../Timestamp.h"
#include "../Types.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace sql { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
Statement_create_array(int length)
{
  return new ObjectArrayImpl<RStatement>(length);
}

//static
::acdk::lang::RObject
Statement_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Statement_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Statement_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Statement::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Statement_method_addBatch_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Statement* This = dmi_cast<Statement>(This_);
    This->addBatch((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Statement_method_cancel__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Statement* This = dmi_cast<Statement>(This_);
    This->cancel();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Statement_method_clearBatch__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Statement* This = dmi_cast<Statement>(This_);
    This->clearBatch();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Statement_method_clearWarnings__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Statement* This = dmi_cast<Statement>(This_);
    This->clearWarnings();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Statement_method_close__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Statement* This = dmi_cast<Statement>(This_);
    This->close();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Statement_method_execute_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Statement* This = dmi_cast<Statement>(This_);
  ret = This->execute((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Statement_method_executeBatch__LRintArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Statement* This = dmi_cast<Statement>(This_);
    ret = (::acdk::lang::RObject)This->executeBatch();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Statement_method_executeQuery_INLRString__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Statement* This = dmi_cast<Statement>(This_);
    ret = (::acdk::lang::RObject)This->executeQuery((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Statement_method_executeUpdate_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Statement* This = dmi_cast<Statement>(This_);
  ret = This->executeUpdate((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Statement_method_getConnection__LRConnection__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Statement* This = dmi_cast<Statement>(This_);
    ret = (::acdk::lang::RObject)This->getConnection();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Statement_method_getFetchDirection__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Statement* This = dmi_cast<Statement>(This_);
  ret = This->getFetchDirection();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Statement_method_getFetchSize__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Statement* This = dmi_cast<Statement>(This_);
  ret = This->getFetchSize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Statement_method_getMaxFieldSize__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Statement* This = dmi_cast<Statement>(This_);
  ret = This->getMaxFieldSize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Statement_method_getMaxRows__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Statement* This = dmi_cast<Statement>(This_);
  ret = This->getMaxRows();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Statement_method_getMoreResults__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Statement* This = dmi_cast<Statement>(This_);
  ret = This->getMoreResults();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Statement_method_getQueryTimeout__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Statement* This = dmi_cast<Statement>(This_);
  ret = This->getQueryTimeout();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Statement_method_getResultSet__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Statement* This = dmi_cast<Statement>(This_);
    ret = (::acdk::lang::RObject)This->getResultSet();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Statement_method_getResultSetConcurrency__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Statement* This = dmi_cast<Statement>(This_);
  ret = This->getResultSetConcurrency();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Statement_method_getResultSetType__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Statement* This = dmi_cast<Statement>(This_);
  ret = This->getResultSetType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Statement_method_getUpdateCount__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Statement* This = dmi_cast<Statement>(This_);
  ret = This->getUpdateCount();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Statement_method_getWarnings__LRSQLWarning__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Statement* This = dmi_cast<Statement>(This_);
    ret = (::acdk::lang::RObject)This->getWarnings();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Statement_method_setCursorName_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Statement* This = dmi_cast<Statement>(This_);
    This->setCursorName((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Statement_method_setEscapeProcessing_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Statement* This = dmi_cast<Statement>(This_);
    This->setEscapeProcessing(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Statement_method_setFetchDirection_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Statement* This = dmi_cast<Statement>(This_);
    This->setFetchDirection(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Statement_method_setFetchSize_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Statement* This = dmi_cast<Statement>(This_);
    This->setFetchSize(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Statement_method_setMaxFieldSize_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Statement* This = dmi_cast<Statement>(This_);
    This->setMaxFieldSize(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Statement_method_setMaxRows_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Statement* This = dmi_cast<Statement>(This_);
    This->setMaxRows(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Statement_method_setQueryTimeout_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Statement* This = dmi_cast<Statement>(This_);
    This->setQueryTimeout(args[0].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Statement_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Statement_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Statement_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Statement_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_s_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Statement_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Statement_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Statement_MetainfoWrapper::Statement_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Statement_methods_addBatch_INLRString__V_arg_sql = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sql", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Statement_methods_addBatch_INLRString__V_args[] = 
{
  &Statement_methods_addBatch_INLRString__V_arg_sql,
  0
};

::acdk::lang::dmi::ClazzInfo* Statement_methods_addBatch_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Statement_method_addBatch_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addBatch", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0_addBatch", // alternative name of method
  -1, // altlabelHashCode
  Statement_methods_addBatch_INLRString__V_args, // the arguments
  0, //arguments count
  Statement_methods_addBatch_INLRString__V_exceptions, // the declared exceptions
  Statement_MetainfoWrapper::Statement_method_addBatch_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Statement_methods_cancel__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Statement_methods_cancel__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Statement_method_cancel__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "cancel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_cancel", // alternative name of method
  -1, // altlabelHashCode
  Statement_methods_cancel__V_args, // the arguments
  0, //arguments count
  Statement_methods_cancel__V_exceptions, // the declared exceptions
  Statement_MetainfoWrapper::Statement_method_cancel__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Statement_methods_clearBatch__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Statement_methods_clearBatch__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Statement_method_clearBatch__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clearBatch", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_clearBatch", // alternative name of method
  -1, // altlabelHashCode
  Statement_methods_clearBatch__V_args, // the arguments
  0, //arguments count
  Statement_methods_clearBatch__V_exceptions, // the declared exceptions
  Statement_MetainfoWrapper::Statement_method_clearBatch__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Statement_methods_clearWarnings__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Statement_methods_clearWarnings__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Statement_method_clearWarnings__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clearWarnings", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_clearWarnings", // alternative name of method
  -1, // altlabelHashCode
  Statement_methods_clearWarnings__V_args, // the arguments
  0, //arguments count
  Statement_methods_clearWarnings__V_exceptions, // the declared exceptions
  Statement_MetainfoWrapper::Statement_method_clearWarnings__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Statement_methods_close__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Statement_methods_close__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Statement_method_close__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "close", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_close", // alternative name of method
  -1, // altlabelHashCode
  Statement_methods_close__V_args, // the arguments
  0, //arguments count
  Statement_methods_close__V_exceptions, // the declared exceptions
  Statement_MetainfoWrapper::Statement_method_close__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Statement_methods_execute_INLRString__Z_arg_sql = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sql", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Statement_methods_execute_INLRString__Z_args[] = 
{
  &Statement_methods_execute_INLRString__Z_arg_sql,
  0
};

::acdk::lang::dmi::ClazzInfo* Statement_methods_execute_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Statement_method_execute_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_execute", // alternative name of method
  -1, // altlabelHashCode
  Statement_methods_execute_INLRString__Z_args, // the arguments
  0, //arguments count
  Statement_methods_execute_INLRString__Z_exceptions, // the declared exceptions
  Statement_MetainfoWrapper::Statement_method_execute_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Statement_methods_executeBatch__LRintArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Statement_methods_executeBatch__LRintArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Statement_method_executeBatch__LRintArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "executeBatch", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RintArray::clazzInfo(), // return type
  "_6_executeBatch", // alternative name of method
  -1, // altlabelHashCode
  Statement_methods_executeBatch__LRintArray__args, // the arguments
  0, //arguments count
  Statement_methods_executeBatch__LRintArray__exceptions, // the declared exceptions
  Statement_MetainfoWrapper::Statement_method_executeBatch__LRintArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Statement_methods_executeQuery_INLRString__LRResultSet__arg_sql = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sql", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Statement_methods_executeQuery_INLRString__LRResultSet__args[] = 
{
  &Statement_methods_executeQuery_INLRString__LRResultSet__arg_sql,
  0
};

::acdk::lang::dmi::ClazzInfo* Statement_methods_executeQuery_INLRString__LRResultSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Statement_method_executeQuery_INLRString__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "executeQuery", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_7_executeQuery", // alternative name of method
  -1, // altlabelHashCode
  Statement_methods_executeQuery_INLRString__LRResultSet__args, // the arguments
  0, //arguments count
  Statement_methods_executeQuery_INLRString__LRResultSet__exceptions, // the declared exceptions
  Statement_MetainfoWrapper::Statement_method_executeQuery_INLRString__LRResultSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Statement_methods_executeUpdate_INLRString__I_arg_sql = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sql", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Statement_methods_executeUpdate_INLRString__I_args[] = 
{
  &Statement_methods_executeUpdate_INLRString__I_arg_sql,
  0
};

::acdk::lang::dmi::ClazzInfo* Statement_methods_executeUpdate_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Statement_method_executeUpdate_INLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "executeUpdate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_8_executeUpdate", // alternative name of method
  -1, // altlabelHashCode
  Statement_methods_executeUpdate_INLRString__I_args, // the arguments
  0, //arguments count
  Statement_methods_executeUpdate_INLRString__I_exceptions, // the declared exceptions
  Statement_MetainfoWrapper::Statement_method_executeUpdate_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Statement_methods_getConnection__LRConnection__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Statement_methods_getConnection__LRConnection__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Statement_method_getConnection__LRConnection_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getConnection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RConnection::clazzInfo(), // return type
  "_9_getConnection", // alternative name of method
  -1, // altlabelHashCode
  Statement_methods_getConnection__LRConnection__args, // the arguments
  0, //arguments count
  Statement_methods_getConnection__LRConnection__exceptions, // the declared exceptions
  Statement_MetainfoWrapper::Statement_method_getConnection__LRConnection__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Statement_methods_getFetchDirection__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Statement_methods_getFetchDirection__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Statement_method_getFetchDirection__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFetchDirection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_a_getFetchDirection", // alternative name of method
  -1, // altlabelHashCode
  Statement_methods_getFetchDirection__I_args, // the arguments
  0, //arguments count
  Statement_methods_getFetchDirection__I_exceptions, // the declared exceptions
  Statement_MetainfoWrapper::Statement_method_getFetchDirection__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Statement_methods_getFetchSize__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Statement_methods_getFetchSize__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Statement_method_getFetchSize__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFetchSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_b_getFetchSize", // alternative name of method
  -1, // altlabelHashCode
  Statement_methods_getFetchSize__I_args, // the arguments
  0, //arguments count
  Statement_methods_getFetchSize__I_exceptions, // the declared exceptions
  Statement_MetainfoWrapper::Statement_method_getFetchSize__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Statement_methods_getMaxFieldSize__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Statement_methods_getMaxFieldSize__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Statement_method_getMaxFieldSize__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxFieldSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_c_getMaxFieldSize", // alternative name of method
  -1, // altlabelHashCode
  Statement_methods_getMaxFieldSize__I_args, // the arguments
  0, //arguments count
  Statement_methods_getMaxFieldSize__I_exceptions, // the declared exceptions
  Statement_MetainfoWrapper::Statement_method_getMaxFieldSize__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Statement_methods_getMaxRows__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Statement_methods_getMaxRows__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Statement_method_getMaxRows__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxRows", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_d_getMaxRows", // alternative name of method
  -1, // altlabelHashCode
  Statement_methods_getMaxRows__I_args, // the arguments
  0, //arguments count
  Statement_methods_getMaxRows__I_exceptions, // the declared exceptions
  Statement_MetainfoWrapper::Statement_method_getMaxRows__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Statement_methods_getMoreResults__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Statement_methods_getMoreResults__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Statement_method_getMoreResults__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMoreResults", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_e_getMoreResults", // alternative name of method
  -1, // altlabelHashCode
  Statement_methods_getMoreResults__Z_args, // the arguments
  0, //arguments count
  Statement_methods_getMoreResults__Z_exceptions, // the declared exceptions
  Statement_MetainfoWrapper::Statement_method_getMoreResults__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Statement_methods_getQueryTimeout__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Statement_methods_getQueryTimeout__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Statement_method_getQueryTimeout__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getQueryTimeout", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_f_getQueryTimeout", // alternative name of method
  -1, // altlabelHashCode
  Statement_methods_getQueryTimeout__I_args, // the arguments
  0, //arguments count
  Statement_methods_getQueryTimeout__I_exceptions, // the declared exceptions
  Statement_MetainfoWrapper::Statement_method_getQueryTimeout__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Statement_methods_getResultSet__LRResultSet__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Statement_methods_getResultSet__LRResultSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Statement_method_getResultSet__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getResultSet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_g_getResultSet", // alternative name of method
  -1, // altlabelHashCode
  Statement_methods_getResultSet__LRResultSet__args, // the arguments
  0, //arguments count
  Statement_methods_getResultSet__LRResultSet__exceptions, // the declared exceptions
  Statement_MetainfoWrapper::Statement_method_getResultSet__LRResultSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Statement_methods_getResultSetConcurrency__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Statement_methods_getResultSetConcurrency__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Statement_method_getResultSetConcurrency__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getResultSetConcurrency", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_h_getResultSetConcurrency", // alternative name of method
  -1, // altlabelHashCode
  Statement_methods_getResultSetConcurrency__I_args, // the arguments
  0, //arguments count
  Statement_methods_getResultSetConcurrency__I_exceptions, // the declared exceptions
  Statement_MetainfoWrapper::Statement_method_getResultSetConcurrency__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Statement_methods_getResultSetType__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Statement_methods_getResultSetType__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Statement_method_getResultSetType__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getResultSetType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_i_getResultSetType", // alternative name of method
  -1, // altlabelHashCode
  Statement_methods_getResultSetType__I_args, // the arguments
  0, //arguments count
  Statement_methods_getResultSetType__I_exceptions, // the declared exceptions
  Statement_MetainfoWrapper::Statement_method_getResultSetType__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Statement_methods_getUpdateCount__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Statement_methods_getUpdateCount__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Statement_method_getUpdateCount__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getUpdateCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_j_getUpdateCount", // alternative name of method
  -1, // altlabelHashCode
  Statement_methods_getUpdateCount__I_args, // the arguments
  0, //arguments count
  Statement_methods_getUpdateCount__I_exceptions, // the declared exceptions
  Statement_MetainfoWrapper::Statement_method_getUpdateCount__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Statement_methods_getWarnings__LRSQLWarning__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Statement_methods_getWarnings__LRSQLWarning__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Statement_method_getWarnings__LRSQLWarning_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWarnings", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSQLWarning::clazzInfo(), // return type
  "_k_getWarnings", // alternative name of method
  -1, // altlabelHashCode
  Statement_methods_getWarnings__LRSQLWarning__args, // the arguments
  0, //arguments count
  Statement_methods_getWarnings__LRSQLWarning__exceptions, // the declared exceptions
  Statement_MetainfoWrapper::Statement_method_getWarnings__LRSQLWarning__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Statement_methods_setCursorName_INLRString__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Statement_methods_setCursorName_INLRString__V_args[] = 
{
  &Statement_methods_setCursorName_INLRString__V_arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* Statement_methods_setCursorName_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Statement_method_setCursorName_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setCursorName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_l_setCursorName", // alternative name of method
  -1, // altlabelHashCode
  Statement_methods_setCursorName_INLRString__V_args, // the arguments
  0, //arguments count
  Statement_methods_setCursorName_INLRString__V_exceptions, // the declared exceptions
  Statement_MetainfoWrapper::Statement_method_setCursorName_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Statement_methods_setEscapeProcessing_Z_V_arg_enable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "enable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Statement_methods_setEscapeProcessing_Z_V_args[] = 
{
  &Statement_methods_setEscapeProcessing_Z_V_arg_enable,
  0
};

::acdk::lang::dmi::ClazzInfo* Statement_methods_setEscapeProcessing_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Statement_method_setEscapeProcessing_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setEscapeProcessing", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_m_setEscapeProcessing", // alternative name of method
  -1, // altlabelHashCode
  Statement_methods_setEscapeProcessing_Z_V_args, // the arguments
  0, //arguments count
  Statement_methods_setEscapeProcessing_Z_V_exceptions, // the declared exceptions
  Statement_MetainfoWrapper::Statement_method_setEscapeProcessing_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Statement_methods_setFetchDirection_I_V_arg_direction = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "direction", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Statement_methods_setFetchDirection_I_V_args[] = 
{
  &Statement_methods_setFetchDirection_I_V_arg_direction,
  0
};

::acdk::lang::dmi::ClazzInfo* Statement_methods_setFetchDirection_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Statement_method_setFetchDirection_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFetchDirection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_n_setFetchDirection", // alternative name of method
  -1, // altlabelHashCode
  Statement_methods_setFetchDirection_I_V_args, // the arguments
  0, //arguments count
  Statement_methods_setFetchDirection_I_V_exceptions, // the declared exceptions
  Statement_MetainfoWrapper::Statement_method_setFetchDirection_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Statement_methods_setFetchSize_I_V_arg_rows = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "rows", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Statement_methods_setFetchSize_I_V_args[] = 
{
  &Statement_methods_setFetchSize_I_V_arg_rows,
  0
};

::acdk::lang::dmi::ClazzInfo* Statement_methods_setFetchSize_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Statement_method_setFetchSize_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFetchSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_o_setFetchSize", // alternative name of method
  -1, // altlabelHashCode
  Statement_methods_setFetchSize_I_V_args, // the arguments
  0, //arguments count
  Statement_methods_setFetchSize_I_V_exceptions, // the declared exceptions
  Statement_MetainfoWrapper::Statement_method_setFetchSize_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Statement_methods_setMaxFieldSize_I_V_arg_max = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "max", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Statement_methods_setMaxFieldSize_I_V_args[] = 
{
  &Statement_methods_setMaxFieldSize_I_V_arg_max,
  0
};

::acdk::lang::dmi::ClazzInfo* Statement_methods_setMaxFieldSize_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Statement_method_setMaxFieldSize_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMaxFieldSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_p_setMaxFieldSize", // alternative name of method
  -1, // altlabelHashCode
  Statement_methods_setMaxFieldSize_I_V_args, // the arguments
  0, //arguments count
  Statement_methods_setMaxFieldSize_I_V_exceptions, // the declared exceptions
  Statement_MetainfoWrapper::Statement_method_setMaxFieldSize_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Statement_methods_setMaxRows_I_V_arg_max = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "max", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Statement_methods_setMaxRows_I_V_args[] = 
{
  &Statement_methods_setMaxRows_I_V_arg_max,
  0
};

::acdk::lang::dmi::ClazzInfo* Statement_methods_setMaxRows_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Statement_method_setMaxRows_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMaxRows", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_q_setMaxRows", // alternative name of method
  -1, // altlabelHashCode
  Statement_methods_setMaxRows_I_V_args, // the arguments
  0, //arguments count
  Statement_methods_setMaxRows_I_V_exceptions, // the declared exceptions
  Statement_MetainfoWrapper::Statement_method_setMaxRows_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Statement_methods_setQueryTimeout_I_V_arg_seconds = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "seconds", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Statement_methods_setQueryTimeout_I_V_args[] = 
{
  &Statement_methods_setQueryTimeout_I_V_arg_seconds,
  0
};

::acdk::lang::dmi::ClazzInfo* Statement_methods_setQueryTimeout_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Statement_method_setQueryTimeout_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setQueryTimeout", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_r_setQueryTimeout", // alternative name of method
  -1, // altlabelHashCode
  Statement_methods_setQueryTimeout_I_V_args, // the arguments
  0, //arguments count
  Statement_methods_setQueryTimeout_I_V_exceptions, // the declared exceptions
  Statement_MetainfoWrapper::Statement_method_setQueryTimeout_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Statement_methods[] = 
{
  &Statement_method_GetClass__L_acdk_lang_RClass_,
  &Statement_method_addBatch_INLRString__V,
  &Statement_method_cancel__V,
  &Statement_method_clearBatch__V,
  &Statement_method_clearWarnings__V,
  &Statement_method_close__V,
  &Statement_method_execute_INLRString__Z,
  &Statement_method_executeBatch__LRintArray_,
  &Statement_method_executeQuery_INLRString__LRResultSet_,
  &Statement_method_executeUpdate_INLRString__I,
  &Statement_method_getConnection__LRConnection_,
  &Statement_method_getFetchDirection__I,
  &Statement_method_getFetchSize__I,
  &Statement_method_getMaxFieldSize__I,
  &Statement_method_getMaxRows__I,
  &Statement_method_getMoreResults__Z,
  &Statement_method_getQueryTimeout__I,
  &Statement_method_getResultSet__LRResultSet_,
  &Statement_method_getResultSetConcurrency__I,
  &Statement_method_getResultSetType__I,
  &Statement_method_getUpdateCount__I,
  &Statement_method_getWarnings__LRSQLWarning_,
  &Statement_method_setCursorName_INLRString__V,
  &Statement_method_setEscapeProcessing_Z_V,
  &Statement_method_setFetchDirection_I_V,
  &Statement_method_setFetchSize_I_V,
  &Statement_method_setMaxFieldSize_I_V,
  &Statement_method_setMaxRows_I_V,
  &Statement_method_setQueryTimeout_I_V,
  0
};


struct Statement_MetaInfoInitializer
{  Statement_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Statement::clazzInfo();
    ci->fields =  _Statement_fields;
    ci->methods =  _Statement_methods;
    ci->_scopeParent = acdk_sql_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Statement_MetaInfoInitializer Statement_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace sql


namespace acdk { 
namespace sql { 


//static
::acdk::lang::RObject
Time_create_array(int length)
{
  return new ObjectArrayImpl<RTime>(length);
}

//static
::acdk::lang::RObject
Time_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Time_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Time_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Time::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Time_method_Time_III_LRTime__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Time(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Time_method_Time_J_LRTime__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Time(args[0].getLongVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Time_method_getSimpleDateFormat__Lacdk_text_RSimpleDateFormat__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Time::getSimpleDateFormat();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Time_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Time* This = dmi_cast<Time>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Time::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Time_method_valueOf_INLRString__LRTime__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Time::valueOf((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Time_fields___sdf_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Time::__sdf, flags);
    else
      Time::__sdf = (acdk::text::RSimpleDateFormat)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo Time_fields___sdf = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "__sdf", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::text::RSimpleDateFormat::clazzInfo(),
  Time_MetainfoWrapper::Time_fields___sdf_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _Time_fields[] = 
{
  &Time_fields___sdf,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Time_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Time_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Time_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Time_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Time_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Time_MetainfoWrapper::Time_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Time_methods_Time_III_LRTime__arg_hour = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "hour", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Time_methods_Time_III_LRTime__arg_minute = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minute", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Time_methods_Time_III_LRTime__arg_second = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "second", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Time_methods_Time_III_LRTime__args[] = 
{
  &Time_methods_Time_III_LRTime__arg_hour,
  &Time_methods_Time_III_LRTime__arg_minute,
  &Time_methods_Time_III_LRTime__arg_second,
  0
};

::acdk::lang::dmi::ClazzInfo* Time_methods_Time_III_LRTime__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Time_method_Time_III_LRTime_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Time", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Time::clazzInfo(), // return type
  "_2_Time", // alternative name of method
  -1, // altlabelHashCode
  Time_methods_Time_III_LRTime__args, // the arguments
  0, //arguments count
  Time_methods_Time_III_LRTime__exceptions, // the declared exceptions
  Time_MetainfoWrapper::Time_method_Time_III_LRTime__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Time_methods_Time_J_LRTime__arg_date = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "date", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Time_methods_Time_J_LRTime__args[] = 
{
  &Time_methods_Time_J_LRTime__arg_date,
  0
};

::acdk::lang::dmi::ClazzInfo* Time_methods_Time_J_LRTime__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Time_method_Time_J_LRTime_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Time", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Time::clazzInfo(), // return type
  "_3_Time", // alternative name of method
  -1, // altlabelHashCode
  Time_methods_Time_J_LRTime__args, // the arguments
  0, //arguments count
  Time_methods_Time_J_LRTime__exceptions, // the declared exceptions
  Time_MetainfoWrapper::Time_method_Time_J_LRTime__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Time_methods_getSimpleDateFormat__Lacdk_text_RSimpleDateFormat__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Time_methods_getSimpleDateFormat__Lacdk_text_RSimpleDateFormat__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Time_method_getSimpleDateFormat__Lacdk_text_RSimpleDateFormat_ = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSimpleDateFormat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::text::RSimpleDateFormat::clazzInfo(), // return type
  "_0_getSimpleDateFormat", // alternative name of method
  -1, // altlabelHashCode
  Time_methods_getSimpleDateFormat__Lacdk_text_RSimpleDateFormat__args, // the arguments
  0, //arguments count
  Time_methods_getSimpleDateFormat__Lacdk_text_RSimpleDateFormat__exceptions, // the declared exceptions
  Time_MetainfoWrapper::Time_method_getSimpleDateFormat__Lacdk_text_RSimpleDateFormat__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Time_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Time_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Time_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_4_toString", // alternative name of method
  -1, // altlabelHashCode
  Time_methods_toString__LRString__args, // the arguments
  0, //arguments count
  Time_methods_toString__LRString__exceptions, // the declared exceptions
  Time_MetainfoWrapper::Time_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Time_methods_valueOf_INLRString__LRTime__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Time_methods_valueOf_INLRString__LRTime__args[] = 
{
  &Time_methods_valueOf_INLRString__LRTime__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* Time_methods_valueOf_INLRString__LRTime__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Time_method_valueOf_INLRString__LRTime_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "valueOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTime::clazzInfo(), // return type
  "_1_valueOf", // alternative name of method
  -1, // altlabelHashCode
  Time_methods_valueOf_INLRString__LRTime__args, // the arguments
  0, //arguments count
  Time_methods_valueOf_INLRString__LRTime__exceptions, // the declared exceptions
  Time_MetainfoWrapper::Time_method_valueOf_INLRString__LRTime__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Time_methods[] = 
{
  &Time_method_GetClass__L_acdk_lang_RClass_,
  &Time_method_Time_III_LRTime_,
  &Time_method_Time_J_LRTime_,
  &Time_method_getSimpleDateFormat__Lacdk_text_RSimpleDateFormat_,
  &Time_method_toString__LRString_,
  &Time_method_valueOf_INLRString__LRTime_,
  0
};


struct Time_MetaInfoInitializer
{  Time_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Time::clazzInfo();
    ci->fields =  _Time_fields;
    ci->methods =  _Time_methods;
    ci->_scopeParent = acdk_sql_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Time_MetaInfoInitializer Time_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace sql


namespace acdk { 
namespace sql { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
Timestamp_create_array(int length)
{
  return new ObjectArrayImpl<RTimestamp>(length);
}

//static
::acdk::lang::RObject
Timestamp_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Timestamp_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Timestamp_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Timestamp::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Timestamp_method_Timestamp_IIIIIII_LRTimestamp__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Timestamp(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar(), args[5].getIntVar(), args[6].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Timestamp_method_Timestamp_J_LRTimestamp__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Timestamp(args[0].getLongVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Timestamp_method_after_INLRTimestamp__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Timestamp* This = dmi_cast<Timestamp>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Timestamp::after((RTimestamp)args[0].getObjectVar());
    else
      ret = This->after((RTimestamp)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Timestamp_method_before_INLRTimestamp__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Timestamp* This = dmi_cast<Timestamp>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Timestamp::before((RTimestamp)args[0].getObjectVar());
    else
      ret = This->before((RTimestamp)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Timestamp_method_equals_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Timestamp* This = dmi_cast<Timestamp>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Timestamp::equals((RObject)args[0].getObjectVar());
    else
      ret = This->equals((RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Timestamp_method_equals_INLRTimestamp__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Timestamp* This = dmi_cast<Timestamp>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Timestamp::equals((RTimestamp)args[0].getObjectVar());
    else
      ret = This->equals((RTimestamp)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Timestamp_method_format_sdf__Lacdk_text_RSimpleDateFormat__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Timestamp::format_sdf();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Timestamp_method_getNanos__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Timestamp* This = dmi_cast<Timestamp>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Timestamp::getNanos();
    else
      ret = This->getNanos();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Timestamp_method_parse_sdf__Lacdk_text_RSimpleDateFormat__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Timestamp::parse_sdf();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Timestamp_method_setNanos_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Timestamp* This = dmi_cast<Timestamp>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Timestamp::setNanos(args[0].getIntVar());
    else
        This->setNanos(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Timestamp_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Timestamp* This = dmi_cast<Timestamp>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Timestamp::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Timestamp_method_valueOf_INLRString__LRTimestamp__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Timestamp::valueOf((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Timestamp_fields___format_sdf_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Timestamp::__format_sdf, flags);
    else
      Timestamp::__format_sdf = (acdk::text::RSimpleDateFormat)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Timestamp_fields___parse_sdf_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Timestamp::__parse_sdf, flags);
    else
      Timestamp::__parse_sdf = (acdk::text::RSimpleDateFormat)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Timestamp_fields__nanos_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Timestamp* This = dmi_cast<Timestamp>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_nanos, flags);
    else
      This->_nanos = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo Timestamp_fields___format_sdf = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "__format_sdf", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::text::RSimpleDateFormat::clazzInfo(),
  Timestamp_MetainfoWrapper::Timestamp_fields___format_sdf_accessor, // read/write access to this fields
  (void*)Timestamp::__format_sdf._ref_this() // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Timestamp_fields___parse_sdf = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "__parse_sdf", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::text::RSimpleDateFormat::clazzInfo(),
  Timestamp_MetainfoWrapper::Timestamp_fields___parse_sdf_accessor, // read/write access to this fields
  (void*)Timestamp::__parse_sdf._ref_this() // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Timestamp_fields__nanos = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_nanos", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Timestamp_MetainfoWrapper::Timestamp_fields__nanos_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _Timestamp_fields[] = 
{
  &Timestamp_fields___format_sdf,
  &Timestamp_fields___parse_sdf,
  &Timestamp_fields__nanos,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Timestamp_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Timestamp_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Timestamp_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_c_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Timestamp_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Timestamp_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Timestamp_MetainfoWrapper::Timestamp_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Timestamp_methods_Timestamp_IIIIIII_LRTimestamp__arg_year = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "year", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Timestamp_methods_Timestamp_IIIIIII_LRTimestamp__arg_month = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "month", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Timestamp_methods_Timestamp_IIIIIII_LRTimestamp__arg_day = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "day", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Timestamp_methods_Timestamp_IIIIIII_LRTimestamp__arg_hour = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "hour", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Timestamp_methods_Timestamp_IIIIIII_LRTimestamp__arg_minute = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minute", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Timestamp_methods_Timestamp_IIIIIII_LRTimestamp__arg_second = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "second", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Timestamp_methods_Timestamp_IIIIIII_LRTimestamp__arg_nanos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "nanos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Timestamp_methods_Timestamp_IIIIIII_LRTimestamp__args[] = 
{
  &Timestamp_methods_Timestamp_IIIIIII_LRTimestamp__arg_year,
  &Timestamp_methods_Timestamp_IIIIIII_LRTimestamp__arg_month,
  &Timestamp_methods_Timestamp_IIIIIII_LRTimestamp__arg_day,
  &Timestamp_methods_Timestamp_IIIIIII_LRTimestamp__arg_hour,
  &Timestamp_methods_Timestamp_IIIIIII_LRTimestamp__arg_minute,
  &Timestamp_methods_Timestamp_IIIIIII_LRTimestamp__arg_second,
  &Timestamp_methods_Timestamp_IIIIIII_LRTimestamp__arg_nanos,
  0
};

::acdk::lang::dmi::ClazzInfo* Timestamp_methods_Timestamp_IIIIIII_LRTimestamp__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Timestamp_method_Timestamp_IIIIIII_LRTimestamp_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Timestamp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Timestamp::clazzInfo(), // return type
  "_3_Timestamp", // alternative name of method
  -1, // altlabelHashCode
  Timestamp_methods_Timestamp_IIIIIII_LRTimestamp__args, // the arguments
  0, //arguments count
  Timestamp_methods_Timestamp_IIIIIII_LRTimestamp__exceptions, // the declared exceptions
  Timestamp_MetainfoWrapper::Timestamp_method_Timestamp_IIIIIII_LRTimestamp__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Timestamp_methods_Timestamp_J_LRTimestamp__arg_date = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "date", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Timestamp_methods_Timestamp_J_LRTimestamp__args[] = 
{
  &Timestamp_methods_Timestamp_J_LRTimestamp__arg_date,
  0
};

::acdk::lang::dmi::ClazzInfo* Timestamp_methods_Timestamp_J_LRTimestamp__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Timestamp_method_Timestamp_J_LRTimestamp_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Timestamp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Timestamp::clazzInfo(), // return type
  "_4_Timestamp", // alternative name of method
  -1, // altlabelHashCode
  Timestamp_methods_Timestamp_J_LRTimestamp__args, // the arguments
  0, //arguments count
  Timestamp_methods_Timestamp_J_LRTimestamp__exceptions, // the declared exceptions
  Timestamp_MetainfoWrapper::Timestamp_method_Timestamp_J_LRTimestamp__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Timestamp_methods_after_INLRTimestamp__Z_arg_ts = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ts", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTimestamp::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Timestamp_methods_after_INLRTimestamp__Z_args[] = 
{
  &Timestamp_methods_after_INLRTimestamp__Z_arg_ts,
  0
};

::acdk::lang::dmi::ClazzInfo* Timestamp_methods_after_INLRTimestamp__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Timestamp_method_after_INLRTimestamp__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "after", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_9_after", // alternative name of method
  -1, // altlabelHashCode
  Timestamp_methods_after_INLRTimestamp__Z_args, // the arguments
  0, //arguments count
  Timestamp_methods_after_INLRTimestamp__Z_exceptions, // the declared exceptions
  Timestamp_MetainfoWrapper::Timestamp_method_after_INLRTimestamp__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Timestamp_methods_before_INLRTimestamp__Z_arg_ts = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ts", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTimestamp::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Timestamp_methods_before_INLRTimestamp__Z_args[] = 
{
  &Timestamp_methods_before_INLRTimestamp__Z_arg_ts,
  0
};

::acdk::lang::dmi::ClazzInfo* Timestamp_methods_before_INLRTimestamp__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Timestamp_method_before_INLRTimestamp__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "before", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_8_before", // alternative name of method
  -1, // altlabelHashCode
  Timestamp_methods_before_INLRTimestamp__Z_args, // the arguments
  0, //arguments count
  Timestamp_methods_before_INLRTimestamp__Z_exceptions, // the declared exceptions
  Timestamp_MetainfoWrapper::Timestamp_method_before_INLRTimestamp__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Timestamp_methods_equals_INLRObject__Z_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Timestamp_methods_equals_INLRObject__Z_args[] = 
{
  &Timestamp_methods_equals_INLRObject__Z_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* Timestamp_methods_equals_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Timestamp_method_equals_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_a_equals", // alternative name of method
  -1, // altlabelHashCode
  Timestamp_methods_equals_INLRObject__Z_args, // the arguments
  0, //arguments count
  Timestamp_methods_equals_INLRObject__Z_exceptions, // the declared exceptions
  Timestamp_MetainfoWrapper::Timestamp_method_equals_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Timestamp_methods_equals_INLRTimestamp__Z_arg_ts = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ts", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTimestamp::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Timestamp_methods_equals_INLRTimestamp__Z_args[] = 
{
  &Timestamp_methods_equals_INLRTimestamp__Z_arg_ts,
  0
};

::acdk::lang::dmi::ClazzInfo* Timestamp_methods_equals_INLRTimestamp__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Timestamp_method_equals_INLRTimestamp__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_b_equals", // alternative name of method
  -1, // altlabelHashCode
  Timestamp_methods_equals_INLRTimestamp__Z_args, // the arguments
  0, //arguments count
  Timestamp_methods_equals_INLRTimestamp__Z_exceptions, // the declared exceptions
  Timestamp_MetainfoWrapper::Timestamp_method_equals_INLRTimestamp__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Timestamp_methods_format_sdf__Lacdk_text_RSimpleDateFormat__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Timestamp_methods_format_sdf__Lacdk_text_RSimpleDateFormat__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Timestamp_method_format_sdf__Lacdk_text_RSimpleDateFormat_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "format_sdf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::text::RSimpleDateFormat::clazzInfo(), // return type
  "_1_format_sdf", // alternative name of method
  -1, // altlabelHashCode
  Timestamp_methods_format_sdf__Lacdk_text_RSimpleDateFormat__args, // the arguments
  0, //arguments count
  Timestamp_methods_format_sdf__Lacdk_text_RSimpleDateFormat__exceptions, // the declared exceptions
  Timestamp_MetainfoWrapper::Timestamp_method_format_sdf__Lacdk_text_RSimpleDateFormat__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Timestamp_methods_getNanos__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Timestamp_methods_getNanos__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Timestamp_method_getNanos__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNanos", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_getNanos", // alternative name of method
  -1, // altlabelHashCode
  Timestamp_methods_getNanos__I_args, // the arguments
  0, //arguments count
  Timestamp_methods_getNanos__I_exceptions, // the declared exceptions
  Timestamp_MetainfoWrapper::Timestamp_method_getNanos__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Timestamp_methods_parse_sdf__Lacdk_text_RSimpleDateFormat__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Timestamp_methods_parse_sdf__Lacdk_text_RSimpleDateFormat__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Timestamp_method_parse_sdf__Lacdk_text_RSimpleDateFormat_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parse_sdf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::text::RSimpleDateFormat::clazzInfo(), // return type
  "_0_parse_sdf", // alternative name of method
  -1, // altlabelHashCode
  Timestamp_methods_parse_sdf__Lacdk_text_RSimpleDateFormat__args, // the arguments
  0, //arguments count
  Timestamp_methods_parse_sdf__Lacdk_text_RSimpleDateFormat__exceptions, // the declared exceptions
  Timestamp_MetainfoWrapper::Timestamp_method_parse_sdf__Lacdk_text_RSimpleDateFormat__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Timestamp_methods_setNanos_I_V_arg_nanos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "nanos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Timestamp_methods_setNanos_I_V_args[] = 
{
  &Timestamp_methods_setNanos_I_V_arg_nanos,
  0
};

::acdk::lang::dmi::ClazzInfo* Timestamp_methods_setNanos_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Timestamp_method_setNanos_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setNanos", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_setNanos", // alternative name of method
  -1, // altlabelHashCode
  Timestamp_methods_setNanos_I_V_args, // the arguments
  0, //arguments count
  Timestamp_methods_setNanos_I_V_exceptions, // the declared exceptions
  Timestamp_MetainfoWrapper::Timestamp_method_setNanos_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Timestamp_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Timestamp_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Timestamp_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_5_toString", // alternative name of method
  -1, // altlabelHashCode
  Timestamp_methods_toString__LRString__args, // the arguments
  0, //arguments count
  Timestamp_methods_toString__LRString__exceptions, // the declared exceptions
  Timestamp_MetainfoWrapper::Timestamp_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Timestamp_methods_valueOf_INLRString__LRTimestamp__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Timestamp_methods_valueOf_INLRString__LRTimestamp__args[] = 
{
  &Timestamp_methods_valueOf_INLRString__LRTimestamp__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* Timestamp_methods_valueOf_INLRString__LRTimestamp__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Timestamp_method_valueOf_INLRString__LRTimestamp_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "valueOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTimestamp::clazzInfo(), // return type
  "_2_valueOf", // alternative name of method
  -1, // altlabelHashCode
  Timestamp_methods_valueOf_INLRString__LRTimestamp__args, // the arguments
  0, //arguments count
  Timestamp_methods_valueOf_INLRString__LRTimestamp__exceptions, // the declared exceptions
  Timestamp_MetainfoWrapper::Timestamp_method_valueOf_INLRString__LRTimestamp__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Timestamp_methods[] = 
{
  &Timestamp_method_GetClass__L_acdk_lang_RClass_,
  &Timestamp_method_Timestamp_IIIIIII_LRTimestamp_,
  &Timestamp_method_Timestamp_J_LRTimestamp_,
  &Timestamp_method_after_INLRTimestamp__Z,
  &Timestamp_method_before_INLRTimestamp__Z,
  &Timestamp_method_equals_INLRObject__Z,
  &Timestamp_method_equals_INLRTimestamp__Z,
  &Timestamp_method_format_sdf__Lacdk_text_RSimpleDateFormat_,
  &Timestamp_method_getNanos__I,
  &Timestamp_method_parse_sdf__Lacdk_text_RSimpleDateFormat_,
  &Timestamp_method_setNanos_I_V,
  &Timestamp_method_toString__LRString_,
  &Timestamp_method_valueOf_INLRString__LRTimestamp_,
  0
};


struct Timestamp_MetaInfoInitializer
{  Timestamp_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Timestamp::clazzInfo();
    ci->fields =  _Timestamp_fields;
    ci->methods =  _Timestamp_methods;
    ci->_scopeParent = acdk_sql_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Timestamp_MetaInfoInitializer Timestamp_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace sql

