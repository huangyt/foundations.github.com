// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../sql.h"
#include "../Array.h"
#include "../Blob.h"
#include "../CallableStatement.h"
#include "../Config.h"
#include "../Connection.h"
#include "../DatabaseMetaData.h"
#include "../Driver.h"
#include "../DriverManager.h"
#include "../DriverPropertyInfo.h"
#include "../PreparedStatement.h"
#include "../ResultSet.h"
#include "../ResultSetMetaData.h"
#include "../sql.h"
#include "../SQLConfig.h"
#include "../SQLException.h"
#include "../SQLWarning.h"
#include "../sql_all.h"
#include "../Statement.h"
#include "../Time.h"
#include "../Timestamp.h"
#include "../Types.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace sql { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
Driver_create_array(int length)
{
  return new ObjectArrayImpl<RDriver>(length);
}

//static
::acdk::lang::RObject
Driver_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Driver_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Driver_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Driver::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Driver_method_acceptsURL_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Driver* This = dmi_cast<Driver>(This_);
  ret = This->acceptsURL((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Driver_method_connect_INLRString_INLacdk_util_RProperties__LRConnection__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Driver* This = dmi_cast<Driver>(This_);
    ret = (::acdk::lang::RObject)This->connect((RString)args[0].getObjectVar(), (acdk::util::RProperties)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Driver_method_getMajorVersionNumber__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Driver* This = dmi_cast<Driver>(This_);
  ret = This->getMajorVersionNumber();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Driver_method_getMinorVersion__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Driver* This = dmi_cast<Driver>(This_);
  ret = This->getMinorVersion();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Driver_method_getPropertyInfo_INLRString_INLacdk_util_RProperties__LRDriverPropertyInfoArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Driver* This = dmi_cast<Driver>(This_);
    ret = (::acdk::lang::RObject)This->getPropertyInfo((RString)args[0].getObjectVar(), (acdk::util::RProperties)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Driver_method_jdbcCompliant__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Driver* This = dmi_cast<Driver>(This_);
  ret = This->jdbcCompliant();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Driver_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Driver_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Driver_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Driver_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Driver_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Driver_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Driver_MetainfoWrapper::Driver_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Driver_methods_acceptsURL_INLRString__Z_arg_url = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "url", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Driver_methods_acceptsURL_INLRString__Z_args[] = 
{
  &Driver_methods_acceptsURL_INLRString__Z_arg_url,
  0
};

::acdk::lang::dmi::ClazzInfo* Driver_methods_acceptsURL_INLRString__Z_exceptions[] =
{
  RException::clazzInfo(), 
  0
};

void Driver_acceptsURL_INLRString__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, Exception) == true)
    THROW_INSTANCE( RException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Driver_method_acceptsURL_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "acceptsURL", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_acceptsURL", // alternative name of method
  -1, // altlabelHashCode
  Driver_methods_acceptsURL_INLRString__Z_args, // the arguments
  0, //arguments count
  Driver_methods_acceptsURL_INLRString__Z_exceptions, // the declared exceptions
  Driver_MetainfoWrapper::Driver_method_acceptsURL_INLRString__Z_dispatch, // invoke this method
  Driver_acceptsURL_INLRString__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Driver_methods_connect_INLRString_INLacdk_util_RProperties__LRConnection__arg_url = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "url", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Driver_methods_connect_INLRString_INLacdk_util_RProperties__LRConnection__arg_properties = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "properties", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RProperties::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Driver_methods_connect_INLRString_INLacdk_util_RProperties__LRConnection__args[] = 
{
  &Driver_methods_connect_INLRString_INLacdk_util_RProperties__LRConnection__arg_url,
  &Driver_methods_connect_INLRString_INLacdk_util_RProperties__LRConnection__arg_properties,
  0
};

::acdk::lang::dmi::ClazzInfo* Driver_methods_connect_INLRString_INLacdk_util_RProperties__LRConnection__exceptions[] =
{
  RException::clazzInfo(), 
  0
};

void Driver_connect_INLRString_INLacdk_util_RProperties__LRConnection__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, Exception) == true)
    THROW_INSTANCE( RException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Driver_method_connect_INLRString_INLacdk_util_RProperties__LRConnection_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "connect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RConnection::clazzInfo(), // return type
  "_5_connect", // alternative name of method
  -1, // altlabelHashCode
  Driver_methods_connect_INLRString_INLacdk_util_RProperties__LRConnection__args, // the arguments
  0, //arguments count
  Driver_methods_connect_INLRString_INLacdk_util_RProperties__LRConnection__exceptions, // the declared exceptions
  Driver_MetainfoWrapper::Driver_method_connect_INLRString_INLacdk_util_RProperties__LRConnection__dispatch, // invoke this method
  Driver_connect_INLRString_INLacdk_util_RProperties__LRConnection__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Driver_methods_getMajorVersionNumber__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Driver_methods_getMajorVersionNumber__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Driver_method_getMajorVersionNumber__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMajorVersionNumber", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_0_getMajorVersionNumber", // alternative name of method
  -1, // altlabelHashCode
  Driver_methods_getMajorVersionNumber__I_args, // the arguments
  0, //arguments count
  Driver_methods_getMajorVersionNumber__I_exceptions, // the declared exceptions
  Driver_MetainfoWrapper::Driver_method_getMajorVersionNumber__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Driver_methods_getMinorVersion__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Driver_methods_getMinorVersion__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Driver_method_getMinorVersion__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMinorVersion", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1_getMinorVersion", // alternative name of method
  -1, // altlabelHashCode
  Driver_methods_getMinorVersion__I_args, // the arguments
  0, //arguments count
  Driver_methods_getMinorVersion__I_exceptions, // the declared exceptions
  Driver_MetainfoWrapper::Driver_method_getMinorVersion__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Driver_methods_getPropertyInfo_INLRString_INLacdk_util_RProperties__LRDriverPropertyInfoArray__arg_url = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "url", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Driver_methods_getPropertyInfo_INLRString_INLacdk_util_RProperties__LRDriverPropertyInfoArray__arg_properties = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "properties", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RProperties::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Driver_methods_getPropertyInfo_INLRString_INLacdk_util_RProperties__LRDriverPropertyInfoArray__args[] = 
{
  &Driver_methods_getPropertyInfo_INLRString_INLacdk_util_RProperties__LRDriverPropertyInfoArray__arg_url,
  &Driver_methods_getPropertyInfo_INLRString_INLacdk_util_RProperties__LRDriverPropertyInfoArray__arg_properties,
  0
};

::acdk::lang::dmi::ClazzInfo* Driver_methods_getPropertyInfo_INLRString_INLacdk_util_RProperties__LRDriverPropertyInfoArray__exceptions[] =
{
  RException::clazzInfo(), 
  0
};

void Driver_getPropertyInfo_INLRString_INLacdk_util_RProperties__LRDriverPropertyInfoArray__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, Exception) == true)
    THROW_INSTANCE( RException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Driver_method_getPropertyInfo_INLRString_INLacdk_util_RProperties__LRDriverPropertyInfoArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPropertyInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDriverPropertyInfoArray::clazzInfo(), // return type
  "_3_getPropertyInfo", // alternative name of method
  -1, // altlabelHashCode
  Driver_methods_getPropertyInfo_INLRString_INLacdk_util_RProperties__LRDriverPropertyInfoArray__args, // the arguments
  0, //arguments count
  Driver_methods_getPropertyInfo_INLRString_INLacdk_util_RProperties__LRDriverPropertyInfoArray__exceptions, // the declared exceptions
  Driver_MetainfoWrapper::Driver_method_getPropertyInfo_INLRString_INLacdk_util_RProperties__LRDriverPropertyInfoArray__dispatch, // invoke this method
  Driver_getPropertyInfo_INLRString_INLacdk_util_RProperties__LRDriverPropertyInfoArray__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Driver_methods_jdbcCompliant__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Driver_methods_jdbcCompliant__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Driver_method_jdbcCompliant__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "jdbcCompliant", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_jdbcCompliant", // alternative name of method
  -1, // altlabelHashCode
  Driver_methods_jdbcCompliant__Z_args, // the arguments
  0, //arguments count
  Driver_methods_jdbcCompliant__Z_exceptions, // the declared exceptions
  Driver_MetainfoWrapper::Driver_method_jdbcCompliant__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Driver_methods[] = 
{
  &Driver_method_GetClass__L_acdk_lang_RClass_,
  &Driver_method_acceptsURL_INLRString__Z,
  &Driver_method_connect_INLRString_INLacdk_util_RProperties__LRConnection_,
  &Driver_method_getMajorVersionNumber__I,
  &Driver_method_getMinorVersion__I,
  &Driver_method_getPropertyInfo_INLRString_INLacdk_util_RProperties__LRDriverPropertyInfoArray_,
  &Driver_method_jdbcCompliant__Z,
  0
};


struct Driver_MetaInfoInitializer
{  Driver_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Driver::clazzInfo();
    ci->fields =  _Driver_fields;
    ci->methods =  _Driver_methods;
    ci->_scopeParent = acdk_sql_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Driver_MetaInfoInitializer Driver_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace sql


namespace acdk { 
namespace sql { 


//static
::acdk::lang::RObject
DriverManager_create_array(int length)
{
  return new ObjectArrayImpl<RDriverManager>(length);
}

//static
::acdk::lang::RObject
DriverManager_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DriverManager_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DriverManager_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DriverManager::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DriverManager_method_deregisterDriver_INLRDriver__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DriverManager::deregisterDriver((RDriver)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DriverManager_method_drivers__Lacdk_util_RVector__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DriverManager::drivers();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DriverManager_method_getConnection_INLRString_INLacdk_util_RProperties__LRConnection__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DriverManager::getConnection((RString)args[0].getObjectVar(), (acdk::util::RProperties)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DriverManager_method_getConnection_INLRString__LRConnection__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DriverManager::getConnection((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DriverManager_method_getConnection_INLRString_INLRString_INLRString__LRConnection__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DriverManager::getConnection((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DriverManager_method_getDriver_INLRString__LRDriver__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DriverManager::getDriver((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DriverManager_method_getDrivers__Lacdk_util_RIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DriverManager::getDrivers();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DriverManager_method_getLogWriter__Lacdk_io_RPrintWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DriverManager::getLogWriter();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DriverManager_method_getLoginTimeout__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = DriverManager::getLoginTimeout();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DriverManager_method_println_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DriverManager::println((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DriverManager_method_registerDriver_INLRDriver__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DriverManager::registerDriver((RDriver)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DriverManager_method_setLogWriter_Lacdk_io_RPrintWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DriverManager::setLogWriter((acdk::io::RPrintWriter)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DriverManager_method_setLoginTimeout_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DriverManager::setLoginTimeout(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DriverManager_fields__drivers_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(DriverManager::_drivers, flags);
    else
      DriverManager::_drivers = (acdk::util::RVector)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DriverManager_fields__logWriter_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(DriverManager::_logWriter, flags);
    else
      DriverManager::_logWriter = (acdk::io::RPrintWriter)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DriverManager_fields__loginTimeOut_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(DriverManager::_loginTimeOut, flags);
    else
      DriverManager::_loginTimeOut = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo DriverManager_fields__drivers = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_drivers", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RVector::clazzInfo(),
  DriverManager_MetainfoWrapper::DriverManager_fields__drivers_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DriverManager_fields__logWriter = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_logWriter", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo(),
  DriverManager_MetainfoWrapper::DriverManager_fields__logWriter_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DriverManager_fields__loginTimeOut = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_loginTimeOut", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  DriverManager_MetainfoWrapper::DriverManager_fields__loginTimeOut_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _DriverManager_fields[] = 
{
  &DriverManager_fields__drivers,
  &DriverManager_fields__logWriter,
  &DriverManager_fields__loginTimeOut,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* DriverManager_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DriverManager_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DriverManager_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_d_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DriverManager_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DriverManager_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DriverManager_MetainfoWrapper::DriverManager_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DriverManager_methods_deregisterDriver_INLRDriver__V_arg_driver = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "driver", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDriver::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DriverManager_methods_deregisterDriver_INLRDriver__V_args[] = 
{
  &DriverManager_methods_deregisterDriver_INLRDriver__V_arg_driver,
  0
};

::acdk::lang::dmi::ClazzInfo* DriverManager_methods_deregisterDriver_INLRDriver__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DriverManager_method_deregisterDriver_INLRDriver__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deregisterDriver", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_deregisterDriver", // alternative name of method
  -1, // altlabelHashCode
  DriverManager_methods_deregisterDriver_INLRDriver__V_args, // the arguments
  0, //arguments count
  DriverManager_methods_deregisterDriver_INLRDriver__V_exceptions, // the declared exceptions
  DriverManager_MetainfoWrapper::DriverManager_method_deregisterDriver_INLRDriver__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DriverManager_methods_drivers__Lacdk_util_RVector__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DriverManager_methods_drivers__Lacdk_util_RVector__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DriverManager_method_drivers__Lacdk_util_RVector_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "drivers", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RVector::clazzInfo(), // return type
  "_0_drivers", // alternative name of method
  -1, // altlabelHashCode
  DriverManager_methods_drivers__Lacdk_util_RVector__args, // the arguments
  0, //arguments count
  DriverManager_methods_drivers__Lacdk_util_RVector__exceptions, // the declared exceptions
  DriverManager_MetainfoWrapper::DriverManager_method_drivers__Lacdk_util_RVector__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DriverManager_methods_getConnection_INLRString_INLacdk_util_RProperties__LRConnection__arg_url = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "url", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DriverManager_methods_getConnection_INLRString_INLacdk_util_RProperties__LRConnection__arg_properties = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "properties", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RProperties::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DriverManager_methods_getConnection_INLRString_INLacdk_util_RProperties__LRConnection__args[] = 
{
  &DriverManager_methods_getConnection_INLRString_INLacdk_util_RProperties__LRConnection__arg_url,
  &DriverManager_methods_getConnection_INLRString_INLacdk_util_RProperties__LRConnection__arg_properties,
  0
};

::acdk::lang::dmi::ClazzInfo* DriverManager_methods_getConnection_INLRString_INLacdk_util_RProperties__LRConnection__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DriverManager_getConnection_INLRString_INLacdk_util_RProperties__LRConnection__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DriverManager_method_getConnection_INLRString_INLacdk_util_RProperties__LRConnection_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getConnection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RConnection::clazzInfo(), // return type
  "_c_getConnection", // alternative name of method
  -1, // altlabelHashCode
  DriverManager_methods_getConnection_INLRString_INLacdk_util_RProperties__LRConnection__args, // the arguments
  0, //arguments count
  DriverManager_methods_getConnection_INLRString_INLacdk_util_RProperties__LRConnection__exceptions, // the declared exceptions
  DriverManager_MetainfoWrapper::DriverManager_method_getConnection_INLRString_INLacdk_util_RProperties__LRConnection__dispatch, // invoke this method
  DriverManager_getConnection_INLRString_INLacdk_util_RProperties__LRConnection__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DriverManager_methods_getConnection_INLRString__LRConnection__arg_url = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "url", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DriverManager_methods_getConnection_INLRString__LRConnection__args[] = 
{
  &DriverManager_methods_getConnection_INLRString__LRConnection__arg_url,
  0
};

::acdk::lang::dmi::ClazzInfo* DriverManager_methods_getConnection_INLRString__LRConnection__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DriverManager_getConnection_INLRString__LRConnection__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DriverManager_method_getConnection_INLRString__LRConnection_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getConnection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RConnection::clazzInfo(), // return type
  "_a_getConnection", // alternative name of method
  -1, // altlabelHashCode
  DriverManager_methods_getConnection_INLRString__LRConnection__args, // the arguments
  0, //arguments count
  DriverManager_methods_getConnection_INLRString__LRConnection__exceptions, // the declared exceptions
  DriverManager_MetainfoWrapper::DriverManager_method_getConnection_INLRString__LRConnection__dispatch, // invoke this method
  DriverManager_getConnection_INLRString__LRConnection__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DriverManager_methods_getConnection_INLRString_INLRString_INLRString__LRConnection__arg_url = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "url", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DriverManager_methods_getConnection_INLRString_INLRString_INLRString__LRConnection__arg_user = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "user", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DriverManager_methods_getConnection_INLRString_INLRString_INLRString__LRConnection__arg_password = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "password", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DriverManager_methods_getConnection_INLRString_INLRString_INLRString__LRConnection__args[] = 
{
  &DriverManager_methods_getConnection_INLRString_INLRString_INLRString__LRConnection__arg_url,
  &DriverManager_methods_getConnection_INLRString_INLRString_INLRString__LRConnection__arg_user,
  &DriverManager_methods_getConnection_INLRString_INLRString_INLRString__LRConnection__arg_password,
  0
};

::acdk::lang::dmi::ClazzInfo* DriverManager_methods_getConnection_INLRString_INLRString_INLRString__LRConnection__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DriverManager_getConnection_INLRString_INLRString_INLRString__LRConnection__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DriverManager_method_getConnection_INLRString_INLRString_INLRString__LRConnection_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getConnection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RConnection::clazzInfo(), // return type
  "_b_getConnection", // alternative name of method
  -1, // altlabelHashCode
  DriverManager_methods_getConnection_INLRString_INLRString_INLRString__LRConnection__args, // the arguments
  0, //arguments count
  DriverManager_methods_getConnection_INLRString_INLRString_INLRString__LRConnection__exceptions, // the declared exceptions
  DriverManager_MetainfoWrapper::DriverManager_method_getConnection_INLRString_INLRString_INLRString__LRConnection__dispatch, // invoke this method
  DriverManager_getConnection_INLRString_INLRString_INLRString__LRConnection__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DriverManager_methods_getDriver_INLRString__LRDriver__arg_url = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "url", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DriverManager_methods_getDriver_INLRString__LRDriver__args[] = 
{
  &DriverManager_methods_getDriver_INLRString__LRDriver__arg_url,
  0
};

::acdk::lang::dmi::ClazzInfo* DriverManager_methods_getDriver_INLRString__LRDriver__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DriverManager_getDriver_INLRString__LRDriver__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DriverManager_method_getDriver_INLRString__LRDriver_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDriver", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDriver::clazzInfo(), // return type
  "_9_getDriver", // alternative name of method
  -1, // altlabelHashCode
  DriverManager_methods_getDriver_INLRString__LRDriver__args, // the arguments
  0, //arguments count
  DriverManager_methods_getDriver_INLRString__LRDriver__exceptions, // the declared exceptions
  DriverManager_MetainfoWrapper::DriverManager_method_getDriver_INLRString__LRDriver__dispatch, // invoke this method
  DriverManager_getDriver_INLRString__LRDriver__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DriverManager_methods_getDrivers__Lacdk_util_RIterator__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DriverManager_methods_getDrivers__Lacdk_util_RIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DriverManager_method_getDrivers__Lacdk_util_RIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDrivers", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RIterator::clazzInfo(), // return type
  "_8_getDrivers", // alternative name of method
  -1, // altlabelHashCode
  DriverManager_methods_getDrivers__Lacdk_util_RIterator__args, // the arguments
  0, //arguments count
  DriverManager_methods_getDrivers__Lacdk_util_RIterator__exceptions, // the declared exceptions
  DriverManager_MetainfoWrapper::DriverManager_method_getDrivers__Lacdk_util_RIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DriverManager_methods_getLogWriter__Lacdk_io_RPrintWriter__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DriverManager_methods_getLogWriter__Lacdk_io_RPrintWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DriverManager_method_getLogWriter__Lacdk_io_RPrintWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLogWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo(), // return type
  "_3_getLogWriter", // alternative name of method
  -1, // altlabelHashCode
  DriverManager_methods_getLogWriter__Lacdk_io_RPrintWriter__args, // the arguments
  0, //arguments count
  DriverManager_methods_getLogWriter__Lacdk_io_RPrintWriter__exceptions, // the declared exceptions
  DriverManager_MetainfoWrapper::DriverManager_method_getLogWriter__Lacdk_io_RPrintWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DriverManager_methods_getLoginTimeout__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DriverManager_methods_getLoginTimeout__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DriverManager_method_getLoginTimeout__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLoginTimeout", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1_getLoginTimeout", // alternative name of method
  -1, // altlabelHashCode
  DriverManager_methods_getLoginTimeout__I_args, // the arguments
  0, //arguments count
  DriverManager_methods_getLoginTimeout__I_exceptions, // the declared exceptions
  DriverManager_MetainfoWrapper::DriverManager_method_getLoginTimeout__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DriverManager_methods_println_INLRString__V_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DriverManager_methods_println_INLRString__V_args[] = 
{
  &DriverManager_methods_println_INLRString__V_arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* DriverManager_methods_println_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DriverManager_method_println_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "println", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_println", // alternative name of method
  -1, // altlabelHashCode
  DriverManager_methods_println_INLRString__V_args, // the arguments
  0, //arguments count
  DriverManager_methods_println_INLRString__V_exceptions, // the declared exceptions
  DriverManager_MetainfoWrapper::DriverManager_method_println_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DriverManager_methods_registerDriver_INLRDriver__V_arg_driver = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "driver", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDriver::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DriverManager_methods_registerDriver_INLRDriver__V_args[] = 
{
  &DriverManager_methods_registerDriver_INLRDriver__V_arg_driver,
  0
};

::acdk::lang::dmi::ClazzInfo* DriverManager_methods_registerDriver_INLRDriver__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DriverManager_method_registerDriver_INLRDriver__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "registerDriver", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_registerDriver", // alternative name of method
  -1, // altlabelHashCode
  DriverManager_methods_registerDriver_INLRDriver__V_args, // the arguments
  0, //arguments count
  DriverManager_methods_registerDriver_INLRDriver__V_exceptions, // the declared exceptions
  DriverManager_MetainfoWrapper::DriverManager_method_registerDriver_INLRDriver__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DriverManager_methods_setLogWriter_Lacdk_io_RPrintWriter__V_arg_logWriter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "logWriter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DriverManager_methods_setLogWriter_Lacdk_io_RPrintWriter__V_args[] = 
{
  &DriverManager_methods_setLogWriter_Lacdk_io_RPrintWriter__V_arg_logWriter,
  0
};

::acdk::lang::dmi::ClazzInfo* DriverManager_methods_setLogWriter_Lacdk_io_RPrintWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DriverManager_method_setLogWriter_Lacdk_io_RPrintWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setLogWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_setLogWriter", // alternative name of method
  -1, // altlabelHashCode
  DriverManager_methods_setLogWriter_Lacdk_io_RPrintWriter__V_args, // the arguments
  0, //arguments count
  DriverManager_methods_setLogWriter_Lacdk_io_RPrintWriter__V_exceptions, // the declared exceptions
  DriverManager_MetainfoWrapper::DriverManager_method_setLogWriter_Lacdk_io_RPrintWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DriverManager_methods_setLoginTimeout_I_V_arg_loginTimeOut = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "loginTimeOut", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DriverManager_methods_setLoginTimeout_I_V_args[] = 
{
  &DriverManager_methods_setLoginTimeout_I_V_arg_loginTimeOut,
  0
};

::acdk::lang::dmi::ClazzInfo* DriverManager_methods_setLoginTimeout_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DriverManager_method_setLoginTimeout_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setLoginTimeout", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_setLoginTimeout", // alternative name of method
  -1, // altlabelHashCode
  DriverManager_methods_setLoginTimeout_I_V_args, // the arguments
  0, //arguments count
  DriverManager_methods_setLoginTimeout_I_V_exceptions, // the declared exceptions
  DriverManager_MetainfoWrapper::DriverManager_method_setLoginTimeout_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DriverManager_methods[] = 
{
  &DriverManager_method_GetClass__L_acdk_lang_RClass_,
  &DriverManager_method_deregisterDriver_INLRDriver__V,
  &DriverManager_method_drivers__Lacdk_util_RVector_,
  &DriverManager_method_getConnection_INLRString_INLacdk_util_RProperties__LRConnection_,
  &DriverManager_method_getConnection_INLRString__LRConnection_,
  &DriverManager_method_getConnection_INLRString_INLRString_INLRString__LRConnection_,
  &DriverManager_method_getDriver_INLRString__LRDriver_,
  &DriverManager_method_getDrivers__Lacdk_util_RIterator_,
  &DriverManager_method_getLogWriter__Lacdk_io_RPrintWriter_,
  &DriverManager_method_getLoginTimeout__I,
  &DriverManager_method_println_INLRString__V,
  &DriverManager_method_registerDriver_INLRDriver__V,
  &DriverManager_method_setLogWriter_Lacdk_io_RPrintWriter__V,
  &DriverManager_method_setLoginTimeout_I_V,
  0
};


struct DriverManager_MetaInfoInitializer
{  DriverManager_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DriverManager::clazzInfo();
    ci->fields =  _DriverManager_fields;
    ci->methods =  _DriverManager_methods;
    ci->_scopeParent = acdk_sql_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DriverManager_MetaInfoInitializer DriverManager_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace sql


namespace acdk { 
namespace sql { 

using namespace acdk::lang;
using namespace acdk::io;
using namespace acdk::util;

//static
::acdk::lang::RObject
DriverPropertyInfo_create_array(int length)
{
  return new ObjectArrayImpl<RDriverPropertyInfo>(length);
}

//static
::acdk::lang::RObject
DriverPropertyInfo_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DriverPropertyInfo_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DriverPropertyInfo_method_DriverPropertyInfo_INLRString_INLRString__LRDriverPropertyInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DriverPropertyInfo((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DriverPropertyInfo_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DriverPropertyInfo::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DriverPropertyInfo_fields__name_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DriverPropertyInfo* This = dmi_cast<DriverPropertyInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_name, flags);
    else
      This->_name = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DriverPropertyInfo_fields__value_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DriverPropertyInfo* This = dmi_cast<DriverPropertyInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_value, flags);
    else
      This->_value = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DriverPropertyInfo_fields_choices_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DriverPropertyInfo* This = dmi_cast<DriverPropertyInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->choices, flags);
    else
      This->choices = (RObjectArrayImpl<RString>)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DriverPropertyInfo_fields_description_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DriverPropertyInfo* This = dmi_cast<DriverPropertyInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->description, flags);
    else
      This->description = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DriverPropertyInfo_fields_required_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DriverPropertyInfo* This = dmi_cast<DriverPropertyInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->required, flags);
    else
      This->required = var.getBoolVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo DriverPropertyInfo_fields__name = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_name", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  DriverPropertyInfo_MetainfoWrapper::DriverPropertyInfo_fields__name_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DriverPropertyInfo_fields__value = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_value", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  DriverPropertyInfo_MetainfoWrapper::DriverPropertyInfo_fields__value_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DriverPropertyInfo_fields_choices = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "choices", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArrayImpl<RString>::clazzInfo(),
  DriverPropertyInfo_MetainfoWrapper::DriverPropertyInfo_fields_choices_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DriverPropertyInfo_fields_description = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "description", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  DriverPropertyInfo_MetainfoWrapper::DriverPropertyInfo_fields_description_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DriverPropertyInfo_fields_required = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "required", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  DriverPropertyInfo_MetainfoWrapper::DriverPropertyInfo_fields_required_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _DriverPropertyInfo_fields[] = 
{
  &DriverPropertyInfo_fields__name,
  &DriverPropertyInfo_fields__value,
  &DriverPropertyInfo_fields_choices,
  &DriverPropertyInfo_fields_description,
  &DriverPropertyInfo_fields_required,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo DriverPropertyInfo_methods_DriverPropertyInfo_INLRString_INLRString__LRDriverPropertyInfo__arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DriverPropertyInfo_methods_DriverPropertyInfo_INLRString_INLRString__LRDriverPropertyInfo__arg_v = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "v", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DriverPropertyInfo_methods_DriverPropertyInfo_INLRString_INLRString__LRDriverPropertyInfo__args[] = 
{
  &DriverPropertyInfo_methods_DriverPropertyInfo_INLRString_INLRString__LRDriverPropertyInfo__arg_n,
  &DriverPropertyInfo_methods_DriverPropertyInfo_INLRString_INLRString__LRDriverPropertyInfo__arg_v,
  0
};

::acdk::lang::dmi::ClazzInfo* DriverPropertyInfo_methods_DriverPropertyInfo_INLRString_INLRString__LRDriverPropertyInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DriverPropertyInfo_method_DriverPropertyInfo_INLRString_INLRString__LRDriverPropertyInfo_ = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DriverPropertyInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DriverPropertyInfo::clazzInfo(), // return type
  "_0_DriverPropertyInfo", // alternative name of method
  -1, // altlabelHashCode
  DriverPropertyInfo_methods_DriverPropertyInfo_INLRString_INLRString__LRDriverPropertyInfo__args, // the arguments
  0, //arguments count
  DriverPropertyInfo_methods_DriverPropertyInfo_INLRString_INLRString__LRDriverPropertyInfo__exceptions, // the declared exceptions
  DriverPropertyInfo_MetainfoWrapper::DriverPropertyInfo_method_DriverPropertyInfo_INLRString_INLRString__LRDriverPropertyInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DriverPropertyInfo_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DriverPropertyInfo_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DriverPropertyInfo_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DriverPropertyInfo_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DriverPropertyInfo_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DriverPropertyInfo_MetainfoWrapper::DriverPropertyInfo_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DriverPropertyInfo_methods[] = 
{
  &DriverPropertyInfo_method_DriverPropertyInfo_INLRString_INLRString__LRDriverPropertyInfo_,
  &DriverPropertyInfo_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct DriverPropertyInfo_MetaInfoInitializer
{  DriverPropertyInfo_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DriverPropertyInfo::clazzInfo();
    ci->fields =  _DriverPropertyInfo_fields;
    ci->methods =  _DriverPropertyInfo_methods;
    ci->_scopeParent = acdk_sql_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DriverPropertyInfo_MetaInfoInitializer DriverPropertyInfo_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace sql


namespace acdk { 
namespace sql { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
PreparedStatement_create_array(int length)
{
  return new ObjectArrayImpl<RPreparedStatement>(length);
}

//static
::acdk::lang::RObject
PreparedStatement_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class PreparedStatement_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PreparedStatement_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)PreparedStatement::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PreparedStatement_method_addBatch__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PreparedStatement* This = dmi_cast<PreparedStatement>(This_);
    This->addBatch();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PreparedStatement_method_clearParameters__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PreparedStatement* This = dmi_cast<PreparedStatement>(This_);
    This->clearParameters();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PreparedStatement_method_execute__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PreparedStatement* This = dmi_cast<PreparedStatement>(This_);
  ret = This->execute();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PreparedStatement_method_executeQuery__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PreparedStatement* This = dmi_cast<PreparedStatement>(This_);
    ret = (::acdk::lang::RObject)This->executeQuery();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PreparedStatement_method_executeUpdate__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PreparedStatement* This = dmi_cast<PreparedStatement>(This_);
  ret = This->executeUpdate();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PreparedStatement_method_getMetaData__LRResultSetMetaData__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PreparedStatement* This = dmi_cast<PreparedStatement>(This_);
    ret = (::acdk::lang::RObject)This->getMetaData();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PreparedStatement_method_setBlob_IINLRBlob__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PreparedStatement* This = dmi_cast<PreparedStatement>(This_);
    This->setBlob(args[0].getIntVar(), (RBlob)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PreparedStatement_method_setBoolean_IZ_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PreparedStatement* This = dmi_cast<PreparedStatement>(This_);
    This->setBoolean(args[0].getIntVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PreparedStatement_method_setByte_IB_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PreparedStatement* This = dmi_cast<PreparedStatement>(This_);
    This->setByte(args[0].getIntVar(), args[1].getByteVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PreparedStatement_method_setBytes_IINLRbyteArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PreparedStatement* This = dmi_cast<PreparedStatement>(This_);
    This->setBytes(args[0].getIntVar(), (RbyteArray)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PreparedStatement_method_setDate_IINLacdk_util_RDate__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PreparedStatement* This = dmi_cast<PreparedStatement>(This_);
    This->setDate(args[0].getIntVar(), (acdk::util::RDate)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PreparedStatement_method_setDate_IINLacdk_util_RDate_INLacdk_util_RCalendar__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PreparedStatement* This = dmi_cast<PreparedStatement>(This_);
    This->setDate(args[0].getIntVar(), (acdk::util::RDate)args[1].getObjectVar(), (acdk::util::RCalendar)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PreparedStatement_method_setDouble_ID_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PreparedStatement* This = dmi_cast<PreparedStatement>(This_);
    This->setDouble(args[0].getIntVar(), args[1].getDoubleVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PreparedStatement_method_setFloat_IF_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PreparedStatement* This = dmi_cast<PreparedStatement>(This_);
    This->setFloat(args[0].getIntVar(), args[1].getFloatVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PreparedStatement_method_setInt_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PreparedStatement* This = dmi_cast<PreparedStatement>(This_);
    This->setInt(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PreparedStatement_method_setLong_IJ_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PreparedStatement* This = dmi_cast<PreparedStatement>(This_);
    This->setLong(args[0].getIntVar(), args[1].getLongVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PreparedStatement_method_setNull_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PreparedStatement* This = dmi_cast<PreparedStatement>(This_);
    This->setNull(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PreparedStatement_method_setNull_IIINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PreparedStatement* This = dmi_cast<PreparedStatement>(This_);
    This->setNull(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PreparedStatement_method_setObject_IINLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PreparedStatement* This = dmi_cast<PreparedStatement>(This_);
    This->setObject(args[0].getIntVar(), (RObject)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PreparedStatement_method_setObject_IINLRObject_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PreparedStatement* This = dmi_cast<PreparedStatement>(This_);
    This->setObject(args[0].getIntVar(), (RObject)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PreparedStatement_method_setObject_IINLRObject_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PreparedStatement* This = dmi_cast<PreparedStatement>(This_);
    This->setObject(args[0].getIntVar(), (RObject)args[1].getObjectVar(), args[2].getIntVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PreparedStatement_method_setShort_IS_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PreparedStatement* This = dmi_cast<PreparedStatement>(This_);
    This->setShort(args[0].getIntVar(), args[1].getShortVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PreparedStatement_method_setString_IINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PreparedStatement* This = dmi_cast<PreparedStatement>(This_);
    This->setString(args[0].getIntVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PreparedStatement_method_setTime_IINLRTime__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PreparedStatement* This = dmi_cast<PreparedStatement>(This_);
    This->setTime(args[0].getIntVar(), (RTime)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PreparedStatement_method_setTime_IINLRTime_INLacdk_util_RCalendar__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PreparedStatement* This = dmi_cast<PreparedStatement>(This_);
    This->setTime(args[0].getIntVar(), (RTime)args[1].getObjectVar(), (acdk::util::RCalendar)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PreparedStatement_method_setTimestamp_IINLRTimestamp__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PreparedStatement* This = dmi_cast<PreparedStatement>(This_);
    This->setTimestamp(args[0].getIntVar(), (RTimestamp)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PreparedStatement_method_setTimestamp_IINLRTimestamp_INLacdk_util_RCalendar__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PreparedStatement* This = dmi_cast<PreparedStatement>(This_);
    This->setTimestamp(args[0].getIntVar(), (RTimestamp)args[1].getObjectVar(), (acdk::util::RCalendar)args[2].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _PreparedStatement_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* PreparedStatement_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* PreparedStatement_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PreparedStatement_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_r_GetClass", // alternative name of method
  -1, // altlabelHashCode
  PreparedStatement_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  PreparedStatement_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  PreparedStatement_MetainfoWrapper::PreparedStatement_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* PreparedStatement_methods_addBatch__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* PreparedStatement_methods_addBatch__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PreparedStatement_method_addBatch__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addBatch", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0_addBatch", // alternative name of method
  -1, // altlabelHashCode
  PreparedStatement_methods_addBatch__V_args, // the arguments
  0, //arguments count
  PreparedStatement_methods_addBatch__V_exceptions, // the declared exceptions
  PreparedStatement_MetainfoWrapper::PreparedStatement_method_addBatch__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* PreparedStatement_methods_clearParameters__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* PreparedStatement_methods_clearParameters__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PreparedStatement_method_clearParameters__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clearParameters", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_clearParameters", // alternative name of method
  -1, // altlabelHashCode
  PreparedStatement_methods_clearParameters__V_args, // the arguments
  0, //arguments count
  PreparedStatement_methods_clearParameters__V_exceptions, // the declared exceptions
  PreparedStatement_MetainfoWrapper::PreparedStatement_method_clearParameters__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* PreparedStatement_methods_execute__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* PreparedStatement_methods_execute__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PreparedStatement_method_execute__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_execute", // alternative name of method
  -1, // altlabelHashCode
  PreparedStatement_methods_execute__Z_args, // the arguments
  0, //arguments count
  PreparedStatement_methods_execute__Z_exceptions, // the declared exceptions
  PreparedStatement_MetainfoWrapper::PreparedStatement_method_execute__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* PreparedStatement_methods_executeQuery__LRResultSet__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* PreparedStatement_methods_executeQuery__LRResultSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PreparedStatement_method_executeQuery__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "executeQuery", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_3_executeQuery", // alternative name of method
  -1, // altlabelHashCode
  PreparedStatement_methods_executeQuery__LRResultSet__args, // the arguments
  0, //arguments count
  PreparedStatement_methods_executeQuery__LRResultSet__exceptions, // the declared exceptions
  PreparedStatement_MetainfoWrapper::PreparedStatement_method_executeQuery__LRResultSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* PreparedStatement_methods_executeUpdate__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* PreparedStatement_methods_executeUpdate__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PreparedStatement_method_executeUpdate__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "executeUpdate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_4_executeUpdate", // alternative name of method
  -1, // altlabelHashCode
  PreparedStatement_methods_executeUpdate__I_args, // the arguments
  0, //arguments count
  PreparedStatement_methods_executeUpdate__I_exceptions, // the declared exceptions
  PreparedStatement_MetainfoWrapper::PreparedStatement_method_executeUpdate__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* PreparedStatement_methods_getMetaData__LRResultSetMetaData__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* PreparedStatement_methods_getMetaData__LRResultSetMetaData__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PreparedStatement_method_getMetaData__LRResultSetMetaData_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMetaData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSetMetaData::clazzInfo(), // return type
  "_5_getMetaData", // alternative name of method
  -1, // altlabelHashCode
  PreparedStatement_methods_getMetaData__LRResultSetMetaData__args, // the arguments
  0, //arguments count
  PreparedStatement_methods_getMetaData__LRResultSetMetaData__exceptions, // the declared exceptions
  PreparedStatement_MetainfoWrapper::PreparedStatement_method_getMetaData__LRResultSetMetaData__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setBlob_IINLRBlob__V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setBlob_IINLRBlob__V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBlob::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PreparedStatement_methods_setBlob_IINLRBlob__V_args[] = 
{
  &PreparedStatement_methods_setBlob_IINLRBlob__V_arg_parameterIndex,
  &PreparedStatement_methods_setBlob_IINLRBlob__V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* PreparedStatement_methods_setBlob_IINLRBlob__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PreparedStatement_method_setBlob_IINLRBlob__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setBlob", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_m_setBlob", // alternative name of method
  -1, // altlabelHashCode
  PreparedStatement_methods_setBlob_IINLRBlob__V_args, // the arguments
  0, //arguments count
  PreparedStatement_methods_setBlob_IINLRBlob__V_exceptions, // the declared exceptions
  PreparedStatement_MetainfoWrapper::PreparedStatement_method_setBlob_IINLRBlob__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setBoolean_IZ_V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setBoolean_IZ_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PreparedStatement_methods_setBoolean_IZ_V_args[] = 
{
  &PreparedStatement_methods_setBoolean_IZ_V_arg_parameterIndex,
  &PreparedStatement_methods_setBoolean_IZ_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* PreparedStatement_methods_setBoolean_IZ_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PreparedStatement_method_setBoolean_IZ_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setBoolean", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_setBoolean", // alternative name of method
  -1, // altlabelHashCode
  PreparedStatement_methods_setBoolean_IZ_V_args, // the arguments
  0, //arguments count
  PreparedStatement_methods_setBoolean_IZ_V_exceptions, // the declared exceptions
  PreparedStatement_MetainfoWrapper::PreparedStatement_method_setBoolean_IZ_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setByte_IB_V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setByte_IB_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PreparedStatement_methods_setByte_IB_V_args[] = 
{
  &PreparedStatement_methods_setByte_IB_V_arg_parameterIndex,
  &PreparedStatement_methods_setByte_IB_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* PreparedStatement_methods_setByte_IB_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PreparedStatement_method_setByte_IB_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setByte", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_setByte", // alternative name of method
  -1, // altlabelHashCode
  PreparedStatement_methods_setByte_IB_V_args, // the arguments
  0, //arguments count
  PreparedStatement_methods_setByte_IB_V_exceptions, // the declared exceptions
  PreparedStatement_MetainfoWrapper::PreparedStatement_method_setByte_IB_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setBytes_IINLRbyteArray__V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setBytes_IINLRbyteArray__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PreparedStatement_methods_setBytes_IINLRbyteArray__V_args[] = 
{
  &PreparedStatement_methods_setBytes_IINLRbyteArray__V_arg_parameterIndex,
  &PreparedStatement_methods_setBytes_IINLRbyteArray__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* PreparedStatement_methods_setBytes_IINLRbyteArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PreparedStatement_method_setBytes_IINLRbyteArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setBytes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_setBytes", // alternative name of method
  -1, // altlabelHashCode
  PreparedStatement_methods_setBytes_IINLRbyteArray__V_args, // the arguments
  0, //arguments count
  PreparedStatement_methods_setBytes_IINLRbyteArray__V_exceptions, // the declared exceptions
  PreparedStatement_MetainfoWrapper::PreparedStatement_method_setBytes_IINLRbyteArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setDate_IINLacdk_util_RDate__V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setDate_IINLacdk_util_RDate__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RDate::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PreparedStatement_methods_setDate_IINLacdk_util_RDate__V_args[] = 
{
  &PreparedStatement_methods_setDate_IINLacdk_util_RDate__V_arg_parameterIndex,
  &PreparedStatement_methods_setDate_IINLacdk_util_RDate__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* PreparedStatement_methods_setDate_IINLacdk_util_RDate__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PreparedStatement_method_setDate_IINLacdk_util_RDate__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_setDate", // alternative name of method
  -1, // altlabelHashCode
  PreparedStatement_methods_setDate_IINLacdk_util_RDate__V_args, // the arguments
  0, //arguments count
  PreparedStatement_methods_setDate_IINLacdk_util_RDate__V_exceptions, // the declared exceptions
  PreparedStatement_MetainfoWrapper::PreparedStatement_method_setDate_IINLacdk_util_RDate__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setDate_IINLacdk_util_RDate_INLacdk_util_RCalendar__V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setDate_IINLacdk_util_RDate_INLacdk_util_RCalendar__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RDate::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setDate_IINLacdk_util_RDate_INLacdk_util_RCalendar__V_arg_cal = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cal", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RCalendar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PreparedStatement_methods_setDate_IINLacdk_util_RDate_INLacdk_util_RCalendar__V_args[] = 
{
  &PreparedStatement_methods_setDate_IINLacdk_util_RDate_INLacdk_util_RCalendar__V_arg_parameterIndex,
  &PreparedStatement_methods_setDate_IINLacdk_util_RDate_INLacdk_util_RCalendar__V_arg_x,
  &PreparedStatement_methods_setDate_IINLacdk_util_RDate_INLacdk_util_RCalendar__V_arg_cal,
  0
};

::acdk::lang::dmi::ClazzInfo* PreparedStatement_methods_setDate_IINLacdk_util_RDate_INLacdk_util_RCalendar__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PreparedStatement_method_setDate_IINLacdk_util_RDate_INLacdk_util_RCalendar__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_setDate", // alternative name of method
  -1, // altlabelHashCode
  PreparedStatement_methods_setDate_IINLacdk_util_RDate_INLacdk_util_RCalendar__V_args, // the arguments
  0, //arguments count
  PreparedStatement_methods_setDate_IINLacdk_util_RDate_INLacdk_util_RCalendar__V_exceptions, // the declared exceptions
  PreparedStatement_MetainfoWrapper::PreparedStatement_method_setDate_IINLacdk_util_RDate_INLacdk_util_RCalendar__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setDouble_ID_V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setDouble_ID_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PreparedStatement_methods_setDouble_ID_V_args[] = 
{
  &PreparedStatement_methods_setDouble_ID_V_arg_parameterIndex,
  &PreparedStatement_methods_setDouble_ID_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* PreparedStatement_methods_setDouble_ID_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PreparedStatement_method_setDouble_ID_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDouble", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_setDouble", // alternative name of method
  -1, // altlabelHashCode
  PreparedStatement_methods_setDouble_ID_V_args, // the arguments
  0, //arguments count
  PreparedStatement_methods_setDouble_ID_V_exceptions, // the declared exceptions
  PreparedStatement_MetainfoWrapper::PreparedStatement_method_setDouble_ID_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setFloat_IF_V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setFloat_IF_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PreparedStatement_methods_setFloat_IF_V_args[] = 
{
  &PreparedStatement_methods_setFloat_IF_V_arg_parameterIndex,
  &PreparedStatement_methods_setFloat_IF_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* PreparedStatement_methods_setFloat_IF_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PreparedStatement_method_setFloat_IF_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFloat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_setFloat", // alternative name of method
  -1, // altlabelHashCode
  PreparedStatement_methods_setFloat_IF_V_args, // the arguments
  0, //arguments count
  PreparedStatement_methods_setFloat_IF_V_exceptions, // the declared exceptions
  PreparedStatement_MetainfoWrapper::PreparedStatement_method_setFloat_IF_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setInt_II_V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setInt_II_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PreparedStatement_methods_setInt_II_V_args[] = 
{
  &PreparedStatement_methods_setInt_II_V_arg_parameterIndex,
  &PreparedStatement_methods_setInt_II_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* PreparedStatement_methods_setInt_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PreparedStatement_method_setInt_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setInt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_setInt", // alternative name of method
  -1, // altlabelHashCode
  PreparedStatement_methods_setInt_II_V_args, // the arguments
  0, //arguments count
  PreparedStatement_methods_setInt_II_V_exceptions, // the declared exceptions
  PreparedStatement_MetainfoWrapper::PreparedStatement_method_setInt_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setLong_IJ_V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setLong_IJ_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PreparedStatement_methods_setLong_IJ_V_args[] = 
{
  &PreparedStatement_methods_setLong_IJ_V_arg_parameterIndex,
  &PreparedStatement_methods_setLong_IJ_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* PreparedStatement_methods_setLong_IJ_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PreparedStatement_method_setLong_IJ_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setLong", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_setLong", // alternative name of method
  -1, // altlabelHashCode
  PreparedStatement_methods_setLong_IJ_V_args, // the arguments
  0, //arguments count
  PreparedStatement_methods_setLong_IJ_V_exceptions, // the declared exceptions
  PreparedStatement_MetainfoWrapper::PreparedStatement_method_setLong_IJ_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setNull_II_V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setNull_II_V_arg_sqlType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "sqlType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PreparedStatement_methods_setNull_II_V_args[] = 
{
  &PreparedStatement_methods_setNull_II_V_arg_parameterIndex,
  &PreparedStatement_methods_setNull_II_V_arg_sqlType,
  0
};

::acdk::lang::dmi::ClazzInfo* PreparedStatement_methods_setNull_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PreparedStatement_method_setNull_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setNull", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_setNull", // alternative name of method
  -1, // altlabelHashCode
  PreparedStatement_methods_setNull_II_V_args, // the arguments
  0, //arguments count
  PreparedStatement_methods_setNull_II_V_exceptions, // the declared exceptions
  PreparedStatement_MetainfoWrapper::PreparedStatement_method_setNull_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setNull_IIINLRString__V_arg_paramIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "paramIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setNull_IIINLRString__V_arg_sqlType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "sqlType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setNull_IIINLRString__V_arg_typeName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "typeName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PreparedStatement_methods_setNull_IIINLRString__V_args[] = 
{
  &PreparedStatement_methods_setNull_IIINLRString__V_arg_paramIndex,
  &PreparedStatement_methods_setNull_IIINLRString__V_arg_sqlType,
  &PreparedStatement_methods_setNull_IIINLRString__V_arg_typeName,
  0
};

::acdk::lang::dmi::ClazzInfo* PreparedStatement_methods_setNull_IIINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PreparedStatement_method_setNull_IIINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setNull", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_setNull", // alternative name of method
  -1, // altlabelHashCode
  PreparedStatement_methods_setNull_IIINLRString__V_args, // the arguments
  0, //arguments count
  PreparedStatement_methods_setNull_IIINLRString__V_exceptions, // the declared exceptions
  PreparedStatement_MetainfoWrapper::PreparedStatement_method_setNull_IIINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setObject_IINLRObject__V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setObject_IINLRObject__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PreparedStatement_methods_setObject_IINLRObject__V_args[] = 
{
  &PreparedStatement_methods_setObject_IINLRObject__V_arg_parameterIndex,
  &PreparedStatement_methods_setObject_IINLRObject__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* PreparedStatement_methods_setObject_IINLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PreparedStatement_method_setObject_IINLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_h_setObject", // alternative name of method
  -1, // altlabelHashCode
  PreparedStatement_methods_setObject_IINLRObject__V_args, // the arguments
  0, //arguments count
  PreparedStatement_methods_setObject_IINLRObject__V_exceptions, // the declared exceptions
  PreparedStatement_MetainfoWrapper::PreparedStatement_method_setObject_IINLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setObject_IINLRObject_I_V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setObject_IINLRObject_I_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setObject_IINLRObject_I_V_arg_targetSqlType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "targetSqlType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PreparedStatement_methods_setObject_IINLRObject_I_V_args[] = 
{
  &PreparedStatement_methods_setObject_IINLRObject_I_V_arg_parameterIndex,
  &PreparedStatement_methods_setObject_IINLRObject_I_V_arg_x,
  &PreparedStatement_methods_setObject_IINLRObject_I_V_arg_targetSqlType,
  0
};

::acdk::lang::dmi::ClazzInfo* PreparedStatement_methods_setObject_IINLRObject_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PreparedStatement_method_setObject_IINLRObject_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_i_setObject", // alternative name of method
  -1, // altlabelHashCode
  PreparedStatement_methods_setObject_IINLRObject_I_V_args, // the arguments
  0, //arguments count
  PreparedStatement_methods_setObject_IINLRObject_I_V_exceptions, // the declared exceptions
  PreparedStatement_MetainfoWrapper::PreparedStatement_method_setObject_IINLRObject_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setObject_IINLRObject_II_V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setObject_IINLRObject_II_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setObject_IINLRObject_II_V_arg_targetSqlType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "targetSqlType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setObject_IINLRObject_II_V_arg_scale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "scale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PreparedStatement_methods_setObject_IINLRObject_II_V_args[] = 
{
  &PreparedStatement_methods_setObject_IINLRObject_II_V_arg_parameterIndex,
  &PreparedStatement_methods_setObject_IINLRObject_II_V_arg_x,
  &PreparedStatement_methods_setObject_IINLRObject_II_V_arg_targetSqlType,
  &PreparedStatement_methods_setObject_IINLRObject_II_V_arg_scale,
  0
};

::acdk::lang::dmi::ClazzInfo* PreparedStatement_methods_setObject_IINLRObject_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PreparedStatement_method_setObject_IINLRObject_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_j_setObject", // alternative name of method
  -1, // altlabelHashCode
  PreparedStatement_methods_setObject_IINLRObject_II_V_args, // the arguments
  0, //arguments count
  PreparedStatement_methods_setObject_IINLRObject_II_V_exceptions, // the declared exceptions
  PreparedStatement_MetainfoWrapper::PreparedStatement_method_setObject_IINLRObject_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setShort_IS_V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setShort_IS_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PreparedStatement_methods_setShort_IS_V_args[] = 
{
  &PreparedStatement_methods_setShort_IS_V_arg_parameterIndex,
  &PreparedStatement_methods_setShort_IS_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* PreparedStatement_methods_setShort_IS_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PreparedStatement_method_setShort_IS_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setShort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_k_setShort", // alternative name of method
  -1, // altlabelHashCode
  PreparedStatement_methods_setShort_IS_V_args, // the arguments
  0, //arguments count
  PreparedStatement_methods_setShort_IS_V_exceptions, // the declared exceptions
  PreparedStatement_MetainfoWrapper::PreparedStatement_method_setShort_IS_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setString_IINLRString__V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setString_IINLRString__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PreparedStatement_methods_setString_IINLRString__V_args[] = 
{
  &PreparedStatement_methods_setString_IINLRString__V_arg_parameterIndex,
  &PreparedStatement_methods_setString_IINLRString__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* PreparedStatement_methods_setString_IINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PreparedStatement_method_setString_IINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_l_setString", // alternative name of method
  -1, // altlabelHashCode
  PreparedStatement_methods_setString_IINLRString__V_args, // the arguments
  0, //arguments count
  PreparedStatement_methods_setString_IINLRString__V_exceptions, // the declared exceptions
  PreparedStatement_MetainfoWrapper::PreparedStatement_method_setString_IINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setTime_IINLRTime__V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setTime_IINLRTime__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTime::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PreparedStatement_methods_setTime_IINLRTime__V_args[] = 
{
  &PreparedStatement_methods_setTime_IINLRTime__V_arg_parameterIndex,
  &PreparedStatement_methods_setTime_IINLRTime__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* PreparedStatement_methods_setTime_IINLRTime__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PreparedStatement_method_setTime_IINLRTime__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTime", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_n_setTime", // alternative name of method
  -1, // altlabelHashCode
  PreparedStatement_methods_setTime_IINLRTime__V_args, // the arguments
  0, //arguments count
  PreparedStatement_methods_setTime_IINLRTime__V_exceptions, // the declared exceptions
  PreparedStatement_MetainfoWrapper::PreparedStatement_method_setTime_IINLRTime__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setTime_IINLRTime_INLacdk_util_RCalendar__V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setTime_IINLRTime_INLacdk_util_RCalendar__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTime::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setTime_IINLRTime_INLacdk_util_RCalendar__V_arg_cal = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cal", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RCalendar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PreparedStatement_methods_setTime_IINLRTime_INLacdk_util_RCalendar__V_args[] = 
{
  &PreparedStatement_methods_setTime_IINLRTime_INLacdk_util_RCalendar__V_arg_parameterIndex,
  &PreparedStatement_methods_setTime_IINLRTime_INLacdk_util_RCalendar__V_arg_x,
  &PreparedStatement_methods_setTime_IINLRTime_INLacdk_util_RCalendar__V_arg_cal,
  0
};

::acdk::lang::dmi::ClazzInfo* PreparedStatement_methods_setTime_IINLRTime_INLacdk_util_RCalendar__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PreparedStatement_method_setTime_IINLRTime_INLacdk_util_RCalendar__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTime", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_o_setTime", // alternative name of method
  -1, // altlabelHashCode
  PreparedStatement_methods_setTime_IINLRTime_INLacdk_util_RCalendar__V_args, // the arguments
  0, //arguments count
  PreparedStatement_methods_setTime_IINLRTime_INLacdk_util_RCalendar__V_exceptions, // the declared exceptions
  PreparedStatement_MetainfoWrapper::PreparedStatement_method_setTime_IINLRTime_INLacdk_util_RCalendar__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setTimestamp_IINLRTimestamp__V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setTimestamp_IINLRTimestamp__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTimestamp::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PreparedStatement_methods_setTimestamp_IINLRTimestamp__V_args[] = 
{
  &PreparedStatement_methods_setTimestamp_IINLRTimestamp__V_arg_parameterIndex,
  &PreparedStatement_methods_setTimestamp_IINLRTimestamp__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* PreparedStatement_methods_setTimestamp_IINLRTimestamp__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PreparedStatement_method_setTimestamp_IINLRTimestamp__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTimestamp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_p_setTimestamp", // alternative name of method
  -1, // altlabelHashCode
  PreparedStatement_methods_setTimestamp_IINLRTimestamp__V_args, // the arguments
  0, //arguments count
  PreparedStatement_methods_setTimestamp_IINLRTimestamp__V_exceptions, // the declared exceptions
  PreparedStatement_MetainfoWrapper::PreparedStatement_method_setTimestamp_IINLRTimestamp__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setTimestamp_IINLRTimestamp_INLacdk_util_RCalendar__V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setTimestamp_IINLRTimestamp_INLacdk_util_RCalendar__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTimestamp::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo PreparedStatement_methods_setTimestamp_IINLRTimestamp_INLacdk_util_RCalendar__V_arg_cal = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cal", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RCalendar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PreparedStatement_methods_setTimestamp_IINLRTimestamp_INLacdk_util_RCalendar__V_args[] = 
{
  &PreparedStatement_methods_setTimestamp_IINLRTimestamp_INLacdk_util_RCalendar__V_arg_parameterIndex,
  &PreparedStatement_methods_setTimestamp_IINLRTimestamp_INLacdk_util_RCalendar__V_arg_x,
  &PreparedStatement_methods_setTimestamp_IINLRTimestamp_INLacdk_util_RCalendar__V_arg_cal,
  0
};

::acdk::lang::dmi::ClazzInfo* PreparedStatement_methods_setTimestamp_IINLRTimestamp_INLacdk_util_RCalendar__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PreparedStatement_method_setTimestamp_IINLRTimestamp_INLacdk_util_RCalendar__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTimestamp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_q_setTimestamp", // alternative name of method
  -1, // altlabelHashCode
  PreparedStatement_methods_setTimestamp_IINLRTimestamp_INLacdk_util_RCalendar__V_args, // the arguments
  0, //arguments count
  PreparedStatement_methods_setTimestamp_IINLRTimestamp_INLacdk_util_RCalendar__V_exceptions, // the declared exceptions
  PreparedStatement_MetainfoWrapper::PreparedStatement_method_setTimestamp_IINLRTimestamp_INLacdk_util_RCalendar__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _PreparedStatement_methods[] = 
{
  &PreparedStatement_method_GetClass__L_acdk_lang_RClass_,
  &PreparedStatement_method_addBatch__V,
  &PreparedStatement_method_clearParameters__V,
  &PreparedStatement_method_execute__Z,
  &PreparedStatement_method_executeQuery__LRResultSet_,
  &PreparedStatement_method_executeUpdate__I,
  &PreparedStatement_method_getMetaData__LRResultSetMetaData_,
  &PreparedStatement_method_setBlob_IINLRBlob__V,
  &PreparedStatement_method_setBoolean_IZ_V,
  &PreparedStatement_method_setByte_IB_V,
  &PreparedStatement_method_setBytes_IINLRbyteArray__V,
  &PreparedStatement_method_setDate_IINLacdk_util_RDate__V,
  &PreparedStatement_method_setDate_IINLacdk_util_RDate_INLacdk_util_RCalendar__V,
  &PreparedStatement_method_setDouble_ID_V,
  &PreparedStatement_method_setFloat_IF_V,
  &PreparedStatement_method_setInt_II_V,
  &PreparedStatement_method_setLong_IJ_V,
  &PreparedStatement_method_setNull_II_V,
  &PreparedStatement_method_setNull_IIINLRString__V,
  &PreparedStatement_method_setObject_IINLRObject__V,
  &PreparedStatement_method_setObject_IINLRObject_I_V,
  &PreparedStatement_method_setObject_IINLRObject_II_V,
  &PreparedStatement_method_setShort_IS_V,
  &PreparedStatement_method_setString_IINLRString__V,
  &PreparedStatement_method_setTime_IINLRTime__V,
  &PreparedStatement_method_setTime_IINLRTime_INLacdk_util_RCalendar__V,
  &PreparedStatement_method_setTimestamp_IINLRTimestamp__V,
  &PreparedStatement_method_setTimestamp_IINLRTimestamp_INLacdk_util_RCalendar__V,
  0
};


struct PreparedStatement_MetaInfoInitializer
{  PreparedStatement_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = PreparedStatement::clazzInfo();
    ci->fields =  _PreparedStatement_fields;
    ci->methods =  _PreparedStatement_methods;
    ci->_scopeParent = acdk_sql_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
PreparedStatement_MetaInfoInitializer PreparedStatement_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace sql


namespace acdk { 
namespace sql { 


//static
::acdk::lang::RObject
ResultSet_create_array(int length)
{
  return new ObjectArrayImpl<RResultSet>(length);
}

//static
::acdk::lang::RObject
ResultSet_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ResultSet_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ResultSet::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_absolute_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
  ret = This->absolute(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_afterLast__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->afterLast();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_beforeFirst__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->beforeFirst();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_cancelRowUpdates__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->cancelRowUpdates();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_clearWarnings__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->clearWarnings();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_close__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->close();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_deleteRow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->deleteRow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_findColumn_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
  ret = This->findColumn((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_first__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
  ret = This->first();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getArray_I_LRArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    ret = (::acdk::lang::RObject)This->getArray(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getArray_INLRString__LRArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    ret = (::acdk::lang::RObject)This->getArray((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getAsciiStream_I_Lacdk_io_RReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    ret = (::acdk::lang::RObject)This->getAsciiStream(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getAsciiStream_INLRString__Lacdk_io_RReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    ret = (::acdk::lang::RObject)This->getAsciiStream((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getBinaryStream_I_Lacdk_io_RReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    ret = (::acdk::lang::RObject)This->getBinaryStream(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getBinaryStream_INLRString__Lacdk_io_RReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    ret = (::acdk::lang::RObject)This->getBinaryStream((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getBlob_I_LRBlob__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    ret = (::acdk::lang::RObject)This->getBlob(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getBlob_INLRString__LRBlob__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    ret = (::acdk::lang::RObject)This->getBlob((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getBoolean_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
  ret = This->getBoolean(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getBoolean_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
  ret = This->getBoolean((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getByte_I_B_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
  ret = This->getByte(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getByte_INLRString__B_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
  ret = This->getByte((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getBytes_I_LRbyteArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    ret = (::acdk::lang::RObject)This->getBytes(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getBytes_INLRString__LRbyteArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    ret = (::acdk::lang::RObject)This->getBytes((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getCharacterStream_I_Lacdk_io_RReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    ret = (::acdk::lang::RObject)This->getCharacterStream(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getCharacterStream_INLRString__Lacdk_io_RReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    ret = (::acdk::lang::RObject)This->getCharacterStream((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getConcurrency__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
  ret = This->getConcurrency();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getCursorName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    ret = (::acdk::lang::RObject)This->getCursorName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getDate_I_Lacdk_util_RDate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    ret = (::acdk::lang::RObject)This->getDate(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getDate_INLRString__Lacdk_util_RDate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    ret = (::acdk::lang::RObject)This->getDate((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getDouble_I_D_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
  ret = This->getDouble(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getDouble_INLRString__D_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
  ret = This->getDouble((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getFetchDirection__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
  ret = This->getFetchDirection();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getFetchSize__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
  ret = This->getFetchSize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getFloat_I_F_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
  ret = This->getFloat(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getFloat_INLRString__F_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
  ret = This->getFloat((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getInt_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
  ret = This->getInt(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getInt_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
  ret = This->getInt((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getLong_I_J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
  ret = This->getLong(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getLong_INLRString__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
  ret = This->getLong((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getMetaData__LRResultSetMetaData__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    ret = (::acdk::lang::RObject)This->getMetaData();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getObject_I_LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    ret = (::acdk::lang::RObject)This->getObject(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getObject_IINLacdk_util_RMap__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    ret = (::acdk::lang::RObject)This->getObject(args[0].getIntVar(), (acdk::util::RMap)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getObject_INLRString__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    ret = (::acdk::lang::RObject)This->getObject((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getObject_INLRString_INLacdk_util_RMap__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    ret = (::acdk::lang::RObject)This->getObject((RString)args[0].getObjectVar(), (acdk::util::RMap)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getRow__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
  ret = This->getRow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getShort_I_S_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
  ret = This->getShort(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getShort_INLRString__S_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
  ret = This->getShort((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getStatement__LRStatement__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    ret = (::acdk::lang::RObject)This->getStatement();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getString_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    ret = (::acdk::lang::RObject)This->getString(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getString_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    ret = (::acdk::lang::RObject)This->getString((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getTime_I_LRTime__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    ret = (::acdk::lang::RObject)This->getTime(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getTime_INLRString__LRTime__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    ret = (::acdk::lang::RObject)This->getTime((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getTimestamp_I_LRTimestamp__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    ret = (::acdk::lang::RObject)This->getTimestamp(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getTimestamp_INLRString__LRTimestamp__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    ret = (::acdk::lang::RObject)This->getTimestamp((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getType__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
  ret = This->getType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_getWarnings__LRSQLWarning__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    ret = (::acdk::lang::RObject)This->getWarnings();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_insertRow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->insertRow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_isAfterLast__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
  ret = This->isAfterLast();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_isBeforeFirst__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
  ret = This->isBeforeFirst();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_isFirst__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
  ret = This->isFirst();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_isLast__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
  ret = This->isLast();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_iterator__Lacdk_util_RIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ResultSet::iterator();
    else
        ret = (::acdk::lang::RObject)This->iterator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_last__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
  ret = This->last();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_moveToCurrentRow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->moveToCurrentRow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_moveToInsertRow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->moveToInsertRow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_next__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
  ret = This->next();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_previous__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
  ret = This->previous();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_refreshRow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->refreshRow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_relative_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
  ret = This->relative(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_rowDeleted__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
  ret = This->rowDeleted();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_rowInserted__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
  ret = This->rowInserted();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_rowUpdated__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
  ret = This->rowUpdated();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_setFetchDirection_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->setFetchDirection(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_setFetchSize_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->setFetchSize(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_updateAsciiStream_IINLacdk_io_RReader_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->updateAsciiStream(args[0].getIntVar(), (acdk::io::RReader)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_updateAsciiStream_INLRString_INLacdk_io_RReader_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->updateAsciiStream((RString)args[0].getObjectVar(), (acdk::io::RReader)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_updateBinaryStream_IINLacdk_io_RReader_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->updateBinaryStream(args[0].getIntVar(), (acdk::io::RReader)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_updateBinaryStream_INLRString_INLacdk_io_RReader_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->updateBinaryStream((RString)args[0].getObjectVar(), (acdk::io::RReader)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_updateBoolean_IZ_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->updateBoolean(args[0].getIntVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_updateBoolean_INLRString_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->updateBoolean((RString)args[0].getObjectVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_updateByte_IB_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->updateByte(args[0].getIntVar(), args[1].getByteVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_updateByte_INLRString_B_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->updateByte((RString)args[0].getObjectVar(), args[1].getByteVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_updateBytes_IINLRbyteArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->updateBytes(args[0].getIntVar(), (RbyteArray)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_updateBytes_INLRString_INLRbyteArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->updateBytes((RString)args[0].getObjectVar(), (RbyteArray)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_updateCharacterStream_IINLacdk_io_RReader_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->updateCharacterStream(args[0].getIntVar(), (acdk::io::RReader)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_updateCharacterStream_INLRString_INLacdk_io_RReader_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->updateCharacterStream((RString)args[0].getObjectVar(), (acdk::io::RReader)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_updateDate_IINLacdk_util_RDate__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->updateDate(args[0].getIntVar(), (acdk::util::RDate)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_updateDate_INLRString_INLacdk_util_RDate__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->updateDate((RString)args[0].getObjectVar(), (acdk::util::RDate)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_updateDouble_ID_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->updateDouble(args[0].getIntVar(), args[1].getDoubleVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_updateDouble_INLRString_D_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->updateDouble((RString)args[0].getObjectVar(), args[1].getDoubleVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_updateFloat_IF_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->updateFloat(args[0].getIntVar(), args[1].getFloatVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_updateFloat_INLRString_F_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->updateFloat((RString)args[0].getObjectVar(), args[1].getFloatVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_updateInt_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->updateInt(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_updateInt_INLRString_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->updateInt((RString)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_updateLong_IJ_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->updateLong(args[0].getIntVar(), args[1].getLongVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_updateLong_INLRString_J_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->updateLong((RString)args[0].getObjectVar(), args[1].getLongVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_updateNull_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->updateNull(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_updateNull_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->updateNull((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_updateObject_IINLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->updateObject(args[0].getIntVar(), (RObject)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_updateObject_IINLRObject_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->updateObject(args[0].getIntVar(), (RObject)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_updateObject_INLRString_INLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->updateObject((RString)args[0].getObjectVar(), (RObject)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_updateObject_INLRString_INLRObject_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->updateObject((RString)args[0].getObjectVar(), (RObject)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_updateRow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->updateRow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_updateShort_IS_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->updateShort(args[0].getIntVar(), args[1].getShortVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_updateShort_INLRString_S_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->updateShort((RString)args[0].getObjectVar(), args[1].getShortVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_updateString_IINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->updateString(args[0].getIntVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_updateString_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->updateString((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_updateTime_IINLRTime__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->updateTime(args[0].getIntVar(), (RTime)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_updateTime_INLRString_INLRTime__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->updateTime((RString)args[0].getObjectVar(), (RTime)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_updateTimestamp_IINLRTimestamp__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->updateTimestamp(args[0].getIntVar(), (RTimestamp)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_updateTimestamp_INLRString_INLRTimestamp__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
    This->updateTimestamp((RString)args[0].getObjectVar(), (RTimestamp)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSet_method_wasNull__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSet* This = dmi_cast<ResultSet>(This_);
  ret = This->wasNull();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ResultSet_fields_CONCUR_READ_ONLY_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(ResultSet::CONCUR_READ_ONLY, flags);
    else
      ResultSet::CONCUR_READ_ONLY = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ResultSet_fields_CONCUR_UPDATABLE_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(ResultSet::CONCUR_UPDATABLE, flags);
    else
      ResultSet::CONCUR_UPDATABLE = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ResultSet_fields_FETCH_FORWARD_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(ResultSet::FETCH_FORWARD, flags);
    else
      ResultSet::FETCH_FORWARD = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ResultSet_fields_FETCH_REVERSE_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(ResultSet::FETCH_REVERSE, flags);
    else
      ResultSet::FETCH_REVERSE = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ResultSet_fields_FETCH_UNKNOWN_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(ResultSet::FETCH_UNKNOWN, flags);
    else
      ResultSet::FETCH_UNKNOWN = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ResultSet_fields_TYPE_FORWARD_ONLY_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(ResultSet::TYPE_FORWARD_ONLY, flags);
    else
      ResultSet::TYPE_FORWARD_ONLY = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ResultSet_fields_TYPE_SCROLL_INSENSITIVE_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(ResultSet::TYPE_SCROLL_INSENSITIVE, flags);
    else
      ResultSet::TYPE_SCROLL_INSENSITIVE = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ResultSet_fields_TYPE_SCROLL_SENSITIVE_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(ResultSet::TYPE_SCROLL_SENSITIVE, flags);
    else
      ResultSet::TYPE_SCROLL_SENSITIVE = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ResultSet_fields_CONCUR_READ_ONLY = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "CONCUR_READ_ONLY", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ResultSet_MetainfoWrapper::ResultSet_fields_CONCUR_READ_ONLY_accessor, // read/write access to this fields
  (void*)&ResultSet::CONCUR_READ_ONLY // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ResultSet_fields_CONCUR_UPDATABLE = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "CONCUR_UPDATABLE", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ResultSet_MetainfoWrapper::ResultSet_fields_CONCUR_UPDATABLE_accessor, // read/write access to this fields
  (void*)&ResultSet::CONCUR_UPDATABLE // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ResultSet_fields_FETCH_FORWARD = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "FETCH_FORWARD", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ResultSet_MetainfoWrapper::ResultSet_fields_FETCH_FORWARD_accessor, // read/write access to this fields
  (void*)&ResultSet::FETCH_FORWARD // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ResultSet_fields_FETCH_REVERSE = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "FETCH_REVERSE", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ResultSet_MetainfoWrapper::ResultSet_fields_FETCH_REVERSE_accessor, // read/write access to this fields
  (void*)&ResultSet::FETCH_REVERSE // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ResultSet_fields_FETCH_UNKNOWN = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "FETCH_UNKNOWN", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ResultSet_MetainfoWrapper::ResultSet_fields_FETCH_UNKNOWN_accessor, // read/write access to this fields
  (void*)&ResultSet::FETCH_UNKNOWN // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ResultSet_fields_TYPE_FORWARD_ONLY = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "TYPE_FORWARD_ONLY", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ResultSet_MetainfoWrapper::ResultSet_fields_TYPE_FORWARD_ONLY_accessor, // read/write access to this fields
  (void*)&ResultSet::TYPE_FORWARD_ONLY // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ResultSet_fields_TYPE_SCROLL_INSENSITIVE = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "TYPE_SCROLL_INSENSITIVE", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ResultSet_MetainfoWrapper::ResultSet_fields_TYPE_SCROLL_INSENSITIVE_accessor, // read/write access to this fields
  (void*)&ResultSet::TYPE_SCROLL_INSENSITIVE // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ResultSet_fields_TYPE_SCROLL_SENSITIVE = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "TYPE_SCROLL_SENSITIVE", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ResultSet_MetainfoWrapper::ResultSet_fields_TYPE_SCROLL_SENSITIVE_accessor, // read/write access to this fields
  (void*)&ResultSet::TYPE_SCROLL_SENSITIVE // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ResultSet_fields[] = 
{
  &ResultSet_fields_CONCUR_READ_ONLY,
  &ResultSet_fields_CONCUR_UPDATABLE,
  &ResultSet_fields_FETCH_FORWARD,
  &ResultSet_fields_FETCH_REVERSE,
  &ResultSet_fields_FETCH_UNKNOWN,
  &ResultSet_fields_TYPE_FORWARD_ONLY,
  &ResultSet_fields_TYPE_SCROLL_INSENSITIVE,
  &ResultSet_fields_TYPE_SCROLL_SENSITIVE,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1O_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ResultSet_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_absolute_I_Z_arg_row = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "row", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_absolute_I_Z_args[] = 
{
  &ResultSet_methods_absolute_I_Z_arg_row,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_absolute_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_absolute_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "absolute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_absolute", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_absolute_I_Z_args, // the arguments
  0, //arguments count
  ResultSet_methods_absolute_I_Z_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_absolute_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_afterLast__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_afterLast__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_afterLast__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "afterLast", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_afterLast", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_afterLast__V_args, // the arguments
  0, //arguments count
  ResultSet_methods_afterLast__V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_afterLast__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_beforeFirst__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_beforeFirst__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_beforeFirst__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "beforeFirst", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_beforeFirst", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_beforeFirst__V_args, // the arguments
  0, //arguments count
  ResultSet_methods_beforeFirst__V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_beforeFirst__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_cancelRowUpdates__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_cancelRowUpdates__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_cancelRowUpdates__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "cancelRowUpdates", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_cancelRowUpdates", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_cancelRowUpdates__V_args, // the arguments
  0, //arguments count
  ResultSet_methods_cancelRowUpdates__V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_cancelRowUpdates__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_clearWarnings__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_clearWarnings__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_clearWarnings__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clearWarnings", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_clearWarnings", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_clearWarnings__V_args, // the arguments
  0, //arguments count
  ResultSet_methods_clearWarnings__V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_clearWarnings__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_close__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_close__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_close__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "close", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_close", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_close__V_args, // the arguments
  0, //arguments count
  ResultSet_methods_close__V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_close__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_deleteRow__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_deleteRow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_deleteRow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deleteRow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_deleteRow", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_deleteRow__V_args, // the arguments
  0, //arguments count
  ResultSet_methods_deleteRow__V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_deleteRow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_findColumn_INLRString__I_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_findColumn_INLRString__I_args[] = 
{
  &ResultSet_methods_findColumn_INLRString__I_arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_findColumn_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_findColumn_INLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findColumn", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_8_findColumn", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_findColumn_INLRString__I_args, // the arguments
  0, //arguments count
  ResultSet_methods_findColumn_INLRString__I_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_findColumn_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_first__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_first__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_first__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "first", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_9_first", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_first__Z_args, // the arguments
  0, //arguments count
  ResultSet_methods_first__Z_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_first__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_getArray_I_LRArray__arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getArray_I_LRArray__args[] = 
{
  &ResultSet_methods_getArray_I_LRArray__arg_i,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getArray_I_LRArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getArray_I_LRArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RArray::clazzInfo(), // return type
  "_a_getArray", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getArray_I_LRArray__args, // the arguments
  0, //arguments count
  ResultSet_methods_getArray_I_LRArray__exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getArray_I_LRArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_getArray_INLRString__LRArray__arg_colName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "colName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getArray_INLRString__LRArray__args[] = 
{
  &ResultSet_methods_getArray_INLRString__LRArray__arg_colName,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getArray_INLRString__LRArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getArray_INLRString__LRArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RArray::clazzInfo(), // return type
  "_b_getArray", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getArray_INLRString__LRArray__args, // the arguments
  0, //arguments count
  ResultSet_methods_getArray_INLRString__LRArray__exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getArray_INLRString__LRArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_getAsciiStream_I_Lacdk_io_RReader__arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getAsciiStream_I_Lacdk_io_RReader__args[] = 
{
  &ResultSet_methods_getAsciiStream_I_Lacdk_io_RReader__arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getAsciiStream_I_Lacdk_io_RReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getAsciiStream_I_Lacdk_io_RReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAsciiStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo(), // return type
  "_c_getAsciiStream", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getAsciiStream_I_Lacdk_io_RReader__args, // the arguments
  0, //arguments count
  ResultSet_methods_getAsciiStream_I_Lacdk_io_RReader__exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getAsciiStream_I_Lacdk_io_RReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_getAsciiStream_INLRString__Lacdk_io_RReader__arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getAsciiStream_INLRString__Lacdk_io_RReader__args[] = 
{
  &ResultSet_methods_getAsciiStream_INLRString__Lacdk_io_RReader__arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getAsciiStream_INLRString__Lacdk_io_RReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getAsciiStream_INLRString__Lacdk_io_RReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAsciiStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo(), // return type
  "_d_getAsciiStream", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getAsciiStream_INLRString__Lacdk_io_RReader__args, // the arguments
  0, //arguments count
  ResultSet_methods_getAsciiStream_INLRString__Lacdk_io_RReader__exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getAsciiStream_INLRString__Lacdk_io_RReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_getBinaryStream_I_Lacdk_io_RReader__arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getBinaryStream_I_Lacdk_io_RReader__args[] = 
{
  &ResultSet_methods_getBinaryStream_I_Lacdk_io_RReader__arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getBinaryStream_I_Lacdk_io_RReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getBinaryStream_I_Lacdk_io_RReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBinaryStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo(), // return type
  "_e_getBinaryStream", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getBinaryStream_I_Lacdk_io_RReader__args, // the arguments
  0, //arguments count
  ResultSet_methods_getBinaryStream_I_Lacdk_io_RReader__exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getBinaryStream_I_Lacdk_io_RReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_getBinaryStream_INLRString__Lacdk_io_RReader__arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getBinaryStream_INLRString__Lacdk_io_RReader__args[] = 
{
  &ResultSet_methods_getBinaryStream_INLRString__Lacdk_io_RReader__arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getBinaryStream_INLRString__Lacdk_io_RReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getBinaryStream_INLRString__Lacdk_io_RReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBinaryStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo(), // return type
  "_f_getBinaryStream", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getBinaryStream_INLRString__Lacdk_io_RReader__args, // the arguments
  0, //arguments count
  ResultSet_methods_getBinaryStream_INLRString__Lacdk_io_RReader__exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getBinaryStream_INLRString__Lacdk_io_RReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_getBlob_I_LRBlob__arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getBlob_I_LRBlob__args[] = 
{
  &ResultSet_methods_getBlob_I_LRBlob__arg_i,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getBlob_I_LRBlob__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getBlob_I_LRBlob_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBlob", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBlob::clazzInfo(), // return type
  "_g_getBlob", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getBlob_I_LRBlob__args, // the arguments
  0, //arguments count
  ResultSet_methods_getBlob_I_LRBlob__exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getBlob_I_LRBlob__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_getBlob_INLRString__LRBlob__arg_colName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "colName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getBlob_INLRString__LRBlob__args[] = 
{
  &ResultSet_methods_getBlob_INLRString__LRBlob__arg_colName,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getBlob_INLRString__LRBlob__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getBlob_INLRString__LRBlob_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBlob", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBlob::clazzInfo(), // return type
  "_h_getBlob", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getBlob_INLRString__LRBlob__args, // the arguments
  0, //arguments count
  ResultSet_methods_getBlob_INLRString__LRBlob__exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getBlob_INLRString__LRBlob__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_getBoolean_I_Z_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getBoolean_I_Z_args[] = 
{
  &ResultSet_methods_getBoolean_I_Z_arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getBoolean_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getBoolean_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBoolean", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_i_getBoolean", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getBoolean_I_Z_args, // the arguments
  0, //arguments count
  ResultSet_methods_getBoolean_I_Z_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getBoolean_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_getBoolean_INLRString__Z_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getBoolean_INLRString__Z_args[] = 
{
  &ResultSet_methods_getBoolean_INLRString__Z_arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getBoolean_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getBoolean_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBoolean", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_j_getBoolean", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getBoolean_INLRString__Z_args, // the arguments
  0, //arguments count
  ResultSet_methods_getBoolean_INLRString__Z_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getBoolean_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_getByte_I_B_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getByte_I_B_args[] = 
{
  &ResultSet_methods_getByte_I_B_arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getByte_I_B_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getByte_I_B = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getByte", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz(), // return type
  "_k_getByte", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getByte_I_B_args, // the arguments
  0, //arguments count
  ResultSet_methods_getByte_I_B_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getByte_I_B_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_getByte_INLRString__B_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getByte_INLRString__B_args[] = 
{
  &ResultSet_methods_getByte_INLRString__B_arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getByte_INLRString__B_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getByte_INLRString__B = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getByte", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz(), // return type
  "_l_getByte", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getByte_INLRString__B_args, // the arguments
  0, //arguments count
  ResultSet_methods_getByte_INLRString__B_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getByte_INLRString__B_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_getBytes_I_LRbyteArray__arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getBytes_I_LRbyteArray__args[] = 
{
  &ResultSet_methods_getBytes_I_LRbyteArray__arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getBytes_I_LRbyteArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getBytes_I_LRbyteArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBytes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo(), // return type
  "_m_getBytes", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getBytes_I_LRbyteArray__args, // the arguments
  0, //arguments count
  ResultSet_methods_getBytes_I_LRbyteArray__exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getBytes_I_LRbyteArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_getBytes_INLRString__LRbyteArray__arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getBytes_INLRString__LRbyteArray__args[] = 
{
  &ResultSet_methods_getBytes_INLRString__LRbyteArray__arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getBytes_INLRString__LRbyteArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getBytes_INLRString__LRbyteArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBytes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo(), // return type
  "_n_getBytes", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getBytes_INLRString__LRbyteArray__args, // the arguments
  0, //arguments count
  ResultSet_methods_getBytes_INLRString__LRbyteArray__exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getBytes_INLRString__LRbyteArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_getCharacterStream_I_Lacdk_io_RReader__arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getCharacterStream_I_Lacdk_io_RReader__args[] = 
{
  &ResultSet_methods_getCharacterStream_I_Lacdk_io_RReader__arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getCharacterStream_I_Lacdk_io_RReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getCharacterStream_I_Lacdk_io_RReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCharacterStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo(), // return type
  "_o_getCharacterStream", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getCharacterStream_I_Lacdk_io_RReader__args, // the arguments
  0, //arguments count
  ResultSet_methods_getCharacterStream_I_Lacdk_io_RReader__exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getCharacterStream_I_Lacdk_io_RReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_getCharacterStream_INLRString__Lacdk_io_RReader__arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getCharacterStream_INLRString__Lacdk_io_RReader__args[] = 
{
  &ResultSet_methods_getCharacterStream_INLRString__Lacdk_io_RReader__arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getCharacterStream_INLRString__Lacdk_io_RReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getCharacterStream_INLRString__Lacdk_io_RReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCharacterStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo(), // return type
  "_p_getCharacterStream", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getCharacterStream_INLRString__Lacdk_io_RReader__args, // the arguments
  0, //arguments count
  ResultSet_methods_getCharacterStream_INLRString__Lacdk_io_RReader__exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getCharacterStream_INLRString__Lacdk_io_RReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getConcurrency__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getConcurrency__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getConcurrency__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getConcurrency", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_q_getConcurrency", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getConcurrency__I_args, // the arguments
  0, //arguments count
  ResultSet_methods_getConcurrency__I_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getConcurrency__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getCursorName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getCursorName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getCursorName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCursorName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_r_getCursorName", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getCursorName__LRString__args, // the arguments
  0, //arguments count
  ResultSet_methods_getCursorName__LRString__exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getCursorName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_getDate_I_Lacdk_util_RDate__arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getDate_I_Lacdk_util_RDate__args[] = 
{
  &ResultSet_methods_getDate_I_Lacdk_util_RDate__arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getDate_I_Lacdk_util_RDate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getDate_I_Lacdk_util_RDate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RDate::clazzInfo(), // return type
  "_s_getDate", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getDate_I_Lacdk_util_RDate__args, // the arguments
  0, //arguments count
  ResultSet_methods_getDate_I_Lacdk_util_RDate__exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getDate_I_Lacdk_util_RDate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_getDate_INLRString__Lacdk_util_RDate__arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getDate_INLRString__Lacdk_util_RDate__args[] = 
{
  &ResultSet_methods_getDate_INLRString__Lacdk_util_RDate__arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getDate_INLRString__Lacdk_util_RDate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getDate_INLRString__Lacdk_util_RDate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RDate::clazzInfo(), // return type
  "_t_getDate", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getDate_INLRString__Lacdk_util_RDate__args, // the arguments
  0, //arguments count
  ResultSet_methods_getDate_INLRString__Lacdk_util_RDate__exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getDate_INLRString__Lacdk_util_RDate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_getDouble_I_D_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getDouble_I_D_args[] = 
{
  &ResultSet_methods_getDouble_I_D_arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getDouble_I_D_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getDouble_I_D = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDouble", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(), // return type
  "_u_getDouble", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getDouble_I_D_args, // the arguments
  0, //arguments count
  ResultSet_methods_getDouble_I_D_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getDouble_I_D_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_getDouble_INLRString__D_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getDouble_INLRString__D_args[] = 
{
  &ResultSet_methods_getDouble_INLRString__D_arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getDouble_INLRString__D_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getDouble_INLRString__D = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDouble", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(), // return type
  "_v_getDouble", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getDouble_INLRString__D_args, // the arguments
  0, //arguments count
  ResultSet_methods_getDouble_INLRString__D_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getDouble_INLRString__D_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getFetchDirection__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getFetchDirection__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getFetchDirection__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFetchDirection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_w_getFetchDirection", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getFetchDirection__I_args, // the arguments
  0, //arguments count
  ResultSet_methods_getFetchDirection__I_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getFetchDirection__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getFetchSize__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getFetchSize__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getFetchSize__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFetchSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_x_getFetchSize", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getFetchSize__I_args, // the arguments
  0, //arguments count
  ResultSet_methods_getFetchSize__I_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getFetchSize__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_getFloat_I_F_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getFloat_I_F_args[] = 
{
  &ResultSet_methods_getFloat_I_F_arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getFloat_I_F_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getFloat_I_F = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFloat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz(), // return type
  "_y_getFloat", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getFloat_I_F_args, // the arguments
  0, //arguments count
  ResultSet_methods_getFloat_I_F_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getFloat_I_F_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_getFloat_INLRString__F_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getFloat_INLRString__F_args[] = 
{
  &ResultSet_methods_getFloat_INLRString__F_arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getFloat_INLRString__F_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getFloat_INLRString__F = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFloat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz(), // return type
  "_z_getFloat", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getFloat_INLRString__F_args, // the arguments
  0, //arguments count
  ResultSet_methods_getFloat_INLRString__F_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getFloat_INLRString__F_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_getInt_I_I_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getInt_I_I_args[] = 
{
  &ResultSet_methods_getInt_I_I_arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getInt_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getInt_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_A_getInt", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getInt_I_I_args, // the arguments
  0, //arguments count
  ResultSet_methods_getInt_I_I_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getInt_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_getInt_INLRString__I_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getInt_INLRString__I_args[] = 
{
  &ResultSet_methods_getInt_INLRString__I_arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getInt_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getInt_INLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_B_getInt", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getInt_INLRString__I_args, // the arguments
  0, //arguments count
  ResultSet_methods_getInt_INLRString__I_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getInt_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_getLong_I_J_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getLong_I_J_args[] = 
{
  &ResultSet_methods_getLong_I_J_arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getLong_I_J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getLong_I_J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLong", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_C_getLong", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getLong_I_J_args, // the arguments
  0, //arguments count
  ResultSet_methods_getLong_I_J_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getLong_I_J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_getLong_INLRString__J_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getLong_INLRString__J_args[] = 
{
  &ResultSet_methods_getLong_INLRString__J_arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getLong_INLRString__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getLong_INLRString__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLong", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_D_getLong", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getLong_INLRString__J_args, // the arguments
  0, //arguments count
  ResultSet_methods_getLong_INLRString__J_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getLong_INLRString__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getMetaData__LRResultSetMetaData__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getMetaData__LRResultSetMetaData__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getMetaData__LRResultSetMetaData_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMetaData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSetMetaData::clazzInfo(), // return type
  "_E_getMetaData", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getMetaData__LRResultSetMetaData__args, // the arguments
  0, //arguments count
  ResultSet_methods_getMetaData__LRResultSetMetaData__exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getMetaData__LRResultSetMetaData__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_getObject_I_LRObject__arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getObject_I_LRObject__args[] = 
{
  &ResultSet_methods_getObject_I_LRObject__arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getObject_I_LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getObject_I_LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_F_getObject", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getObject_I_LRObject__args, // the arguments
  0, //arguments count
  ResultSet_methods_getObject_I_LRObject__exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getObject_I_LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_getObject_IINLacdk_util_RMap__LRObject__arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_getObject_IINLacdk_util_RMap__LRObject__arg_map = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "map", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getObject_IINLacdk_util_RMap__LRObject__args[] = 
{
  &ResultSet_methods_getObject_IINLacdk_util_RMap__LRObject__arg_i,
  &ResultSet_methods_getObject_IINLacdk_util_RMap__LRObject__arg_map,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getObject_IINLacdk_util_RMap__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getObject_IINLacdk_util_RMap__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_G_getObject", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getObject_IINLacdk_util_RMap__LRObject__args, // the arguments
  0, //arguments count
  ResultSet_methods_getObject_IINLacdk_util_RMap__LRObject__exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getObject_IINLacdk_util_RMap__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_getObject_INLRString__LRObject__arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getObject_INLRString__LRObject__args[] = 
{
  &ResultSet_methods_getObject_INLRString__LRObject__arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getObject_INLRString__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getObject_INLRString__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_H_getObject", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getObject_INLRString__LRObject__args, // the arguments
  0, //arguments count
  ResultSet_methods_getObject_INLRString__LRObject__exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getObject_INLRString__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_getObject_INLRString_INLacdk_util_RMap__LRObject__arg_colName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "colName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_getObject_INLRString_INLacdk_util_RMap__LRObject__arg_map = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "map", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getObject_INLRString_INLacdk_util_RMap__LRObject__args[] = 
{
  &ResultSet_methods_getObject_INLRString_INLacdk_util_RMap__LRObject__arg_colName,
  &ResultSet_methods_getObject_INLRString_INLacdk_util_RMap__LRObject__arg_map,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getObject_INLRString_INLacdk_util_RMap__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getObject_INLRString_INLacdk_util_RMap__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_I_getObject", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getObject_INLRString_INLacdk_util_RMap__LRObject__args, // the arguments
  0, //arguments count
  ResultSet_methods_getObject_INLRString_INLacdk_util_RMap__LRObject__exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getObject_INLRString_INLacdk_util_RMap__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getRow__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getRow__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getRow__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_J_getRow", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getRow__I_args, // the arguments
  0, //arguments count
  ResultSet_methods_getRow__I_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getRow__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_getShort_I_S_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getShort_I_S_args[] = 
{
  &ResultSet_methods_getShort_I_S_arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getShort_I_S_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getShort_I_S = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getShort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(), // return type
  "_K_getShort", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getShort_I_S_args, // the arguments
  0, //arguments count
  ResultSet_methods_getShort_I_S_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getShort_I_S_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_getShort_INLRString__S_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getShort_INLRString__S_args[] = 
{
  &ResultSet_methods_getShort_INLRString__S_arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getShort_INLRString__S_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getShort_INLRString__S = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getShort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(), // return type
  "_L_getShort", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getShort_INLRString__S_args, // the arguments
  0, //arguments count
  ResultSet_methods_getShort_INLRString__S_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getShort_INLRString__S_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getStatement__LRStatement__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getStatement__LRStatement__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getStatement__LRStatement_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getStatement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStatement::clazzInfo(), // return type
  "_M_getStatement", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getStatement__LRStatement__args, // the arguments
  0, //arguments count
  ResultSet_methods_getStatement__LRStatement__exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getStatement__LRStatement__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_getString_I_LRString__arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getString_I_LRString__args[] = 
{
  &ResultSet_methods_getString_I_LRString__arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getString_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getString_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_N_getString", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getString_I_LRString__args, // the arguments
  0, //arguments count
  ResultSet_methods_getString_I_LRString__exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getString_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_getString_INLRString__LRString__arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getString_INLRString__LRString__args[] = 
{
  &ResultSet_methods_getString_INLRString__LRString__arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getString_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getString_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_O_getString", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getString_INLRString__LRString__args, // the arguments
  0, //arguments count
  ResultSet_methods_getString_INLRString__LRString__exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getString_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_getTime_I_LRTime__arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getTime_I_LRTime__args[] = 
{
  &ResultSet_methods_getTime_I_LRTime__arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getTime_I_LRTime__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getTime_I_LRTime_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTime", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTime::clazzInfo(), // return type
  "_P_getTime", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getTime_I_LRTime__args, // the arguments
  0, //arguments count
  ResultSet_methods_getTime_I_LRTime__exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getTime_I_LRTime__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_getTime_INLRString__LRTime__arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getTime_INLRString__LRTime__args[] = 
{
  &ResultSet_methods_getTime_INLRString__LRTime__arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getTime_INLRString__LRTime__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getTime_INLRString__LRTime_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTime", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTime::clazzInfo(), // return type
  "_Q_getTime", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getTime_INLRString__LRTime__args, // the arguments
  0, //arguments count
  ResultSet_methods_getTime_INLRString__LRTime__exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getTime_INLRString__LRTime__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_getTimestamp_I_LRTimestamp__arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getTimestamp_I_LRTimestamp__args[] = 
{
  &ResultSet_methods_getTimestamp_I_LRTimestamp__arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getTimestamp_I_LRTimestamp__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getTimestamp_I_LRTimestamp_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTimestamp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTimestamp::clazzInfo(), // return type
  "_R_getTimestamp", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getTimestamp_I_LRTimestamp__args, // the arguments
  0, //arguments count
  ResultSet_methods_getTimestamp_I_LRTimestamp__exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getTimestamp_I_LRTimestamp__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_getTimestamp_INLRString__LRTimestamp__arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getTimestamp_INLRString__LRTimestamp__args[] = 
{
  &ResultSet_methods_getTimestamp_INLRString__LRTimestamp__arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getTimestamp_INLRString__LRTimestamp__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getTimestamp_INLRString__LRTimestamp_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTimestamp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTimestamp::clazzInfo(), // return type
  "_S_getTimestamp", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getTimestamp_INLRString__LRTimestamp__args, // the arguments
  0, //arguments count
  ResultSet_methods_getTimestamp_INLRString__LRTimestamp__exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getTimestamp_INLRString__LRTimestamp__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getType__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getType__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getType__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_T_getType", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getType__I_args, // the arguments
  0, //arguments count
  ResultSet_methods_getType__I_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getType__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_getWarnings__LRSQLWarning__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_getWarnings__LRSQLWarning__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_getWarnings__LRSQLWarning_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWarnings", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSQLWarning::clazzInfo(), // return type
  "_U_getWarnings", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_getWarnings__LRSQLWarning__args, // the arguments
  0, //arguments count
  ResultSet_methods_getWarnings__LRSQLWarning__exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_getWarnings__LRSQLWarning__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_insertRow__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_insertRow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_insertRow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insertRow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_V_insertRow", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_insertRow__V_args, // the arguments
  0, //arguments count
  ResultSet_methods_insertRow__V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_insertRow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_isAfterLast__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_isAfterLast__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_isAfterLast__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isAfterLast", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_W_isAfterLast", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_isAfterLast__Z_args, // the arguments
  0, //arguments count
  ResultSet_methods_isAfterLast__Z_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_isAfterLast__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_isBeforeFirst__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_isBeforeFirst__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_isBeforeFirst__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isBeforeFirst", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_X_isBeforeFirst", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_isBeforeFirst__Z_args, // the arguments
  0, //arguments count
  ResultSet_methods_isBeforeFirst__Z_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_isBeforeFirst__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_isFirst__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_isFirst__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_isFirst__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isFirst", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_Y_isFirst", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_isFirst__Z_args, // the arguments
  0, //arguments count
  ResultSet_methods_isFirst__Z_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_isFirst__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_isLast__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_isLast__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_isLast__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isLast", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_Z_isLast", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_isLast__Z_args, // the arguments
  0, //arguments count
  ResultSet_methods_isLast__Z_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_isLast__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_iterator__Lacdk_util_RIterator__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_iterator__Lacdk_util_RIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_iterator__Lacdk_util_RIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "iterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RIterator::clazzInfo(), // return type
  "_0_iterator", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_iterator__Lacdk_util_RIterator__args, // the arguments
  0, //arguments count
  ResultSet_methods_iterator__Lacdk_util_RIterator__exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_iterator__Lacdk_util_RIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_last__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_last__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_last__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "last", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_10_last", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_last__Z_args, // the arguments
  0, //arguments count
  ResultSet_methods_last__Z_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_last__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_moveToCurrentRow__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_moveToCurrentRow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_moveToCurrentRow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "moveToCurrentRow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_11_moveToCurrentRow", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_moveToCurrentRow__V_args, // the arguments
  0, //arguments count
  ResultSet_methods_moveToCurrentRow__V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_moveToCurrentRow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_moveToInsertRow__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_moveToInsertRow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_moveToInsertRow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "moveToInsertRow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_12_moveToInsertRow", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_moveToInsertRow__V_args, // the arguments
  0, //arguments count
  ResultSet_methods_moveToInsertRow__V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_moveToInsertRow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_next__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_next__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_next__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "next", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_13_next", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_next__Z_args, // the arguments
  0, //arguments count
  ResultSet_methods_next__Z_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_next__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_previous__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_previous__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_previous__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "previous", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_14_previous", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_previous__Z_args, // the arguments
  0, //arguments count
  ResultSet_methods_previous__Z_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_previous__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_refreshRow__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_refreshRow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_refreshRow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "refreshRow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_15_refreshRow", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_refreshRow__V_args, // the arguments
  0, //arguments count
  ResultSet_methods_refreshRow__V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_refreshRow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_relative_I_Z_arg_rows = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "rows", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_relative_I_Z_args[] = 
{
  &ResultSet_methods_relative_I_Z_arg_rows,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_relative_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_relative_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "relative", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_16_relative", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_relative_I_Z_args, // the arguments
  0, //arguments count
  ResultSet_methods_relative_I_Z_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_relative_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_rowDeleted__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_rowDeleted__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_rowDeleted__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "rowDeleted", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_17_rowDeleted", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_rowDeleted__Z_args, // the arguments
  0, //arguments count
  ResultSet_methods_rowDeleted__Z_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_rowDeleted__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_rowInserted__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_rowInserted__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_rowInserted__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "rowInserted", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_18_rowInserted", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_rowInserted__Z_args, // the arguments
  0, //arguments count
  ResultSet_methods_rowInserted__Z_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_rowInserted__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_rowUpdated__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_rowUpdated__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_rowUpdated__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "rowUpdated", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_19_rowUpdated", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_rowUpdated__Z_args, // the arguments
  0, //arguments count
  ResultSet_methods_rowUpdated__Z_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_rowUpdated__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_setFetchDirection_I_V_arg_direction = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "direction", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_setFetchDirection_I_V_args[] = 
{
  &ResultSet_methods_setFetchDirection_I_V_arg_direction,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_setFetchDirection_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_setFetchDirection_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFetchDirection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1a_setFetchDirection", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_setFetchDirection_I_V_args, // the arguments
  0, //arguments count
  ResultSet_methods_setFetchDirection_I_V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_setFetchDirection_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_setFetchSize_I_V_arg_rows = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "rows", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_setFetchSize_I_V_args[] = 
{
  &ResultSet_methods_setFetchSize_I_V_arg_rows,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_setFetchSize_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_setFetchSize_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFetchSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1b_setFetchSize", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_setFetchSize_I_V_args, // the arguments
  0, //arguments count
  ResultSet_methods_setFetchSize_I_V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_setFetchSize_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateAsciiStream_IINLacdk_io_RReader_I_V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateAsciiStream_IINLacdk_io_RReader_I_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateAsciiStream_IINLacdk_io_RReader_I_V_arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_updateAsciiStream_IINLacdk_io_RReader_I_V_args[] = 
{
  &ResultSet_methods_updateAsciiStream_IINLacdk_io_RReader_I_V_arg_columnIndex,
  &ResultSet_methods_updateAsciiStream_IINLacdk_io_RReader_I_V_arg_x,
  &ResultSet_methods_updateAsciiStream_IINLacdk_io_RReader_I_V_arg_length,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_updateAsciiStream_IINLacdk_io_RReader_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_updateAsciiStream_IINLacdk_io_RReader_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateAsciiStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1c_updateAsciiStream", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_updateAsciiStream_IINLacdk_io_RReader_I_V_args, // the arguments
  0, //arguments count
  ResultSet_methods_updateAsciiStream_IINLacdk_io_RReader_I_V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_updateAsciiStream_IINLacdk_io_RReader_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateAsciiStream_INLRString_INLacdk_io_RReader_I_V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateAsciiStream_INLRString_INLacdk_io_RReader_I_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateAsciiStream_INLRString_INLacdk_io_RReader_I_V_arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_updateAsciiStream_INLRString_INLacdk_io_RReader_I_V_args[] = 
{
  &ResultSet_methods_updateAsciiStream_INLRString_INLacdk_io_RReader_I_V_arg_columnName,
  &ResultSet_methods_updateAsciiStream_INLRString_INLacdk_io_RReader_I_V_arg_x,
  &ResultSet_methods_updateAsciiStream_INLRString_INLacdk_io_RReader_I_V_arg_length,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_updateAsciiStream_INLRString_INLacdk_io_RReader_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_updateAsciiStream_INLRString_INLacdk_io_RReader_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateAsciiStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1d_updateAsciiStream", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_updateAsciiStream_INLRString_INLacdk_io_RReader_I_V_args, // the arguments
  0, //arguments count
  ResultSet_methods_updateAsciiStream_INLRString_INLacdk_io_RReader_I_V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_updateAsciiStream_INLRString_INLacdk_io_RReader_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateBinaryStream_IINLacdk_io_RReader_I_V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateBinaryStream_IINLacdk_io_RReader_I_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateBinaryStream_IINLacdk_io_RReader_I_V_arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_updateBinaryStream_IINLacdk_io_RReader_I_V_args[] = 
{
  &ResultSet_methods_updateBinaryStream_IINLacdk_io_RReader_I_V_arg_columnIndex,
  &ResultSet_methods_updateBinaryStream_IINLacdk_io_RReader_I_V_arg_x,
  &ResultSet_methods_updateBinaryStream_IINLacdk_io_RReader_I_V_arg_length,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_updateBinaryStream_IINLacdk_io_RReader_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_updateBinaryStream_IINLacdk_io_RReader_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateBinaryStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1e_updateBinaryStream", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_updateBinaryStream_IINLacdk_io_RReader_I_V_args, // the arguments
  0, //arguments count
  ResultSet_methods_updateBinaryStream_IINLacdk_io_RReader_I_V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_updateBinaryStream_IINLacdk_io_RReader_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateBinaryStream_INLRString_INLacdk_io_RReader_I_V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateBinaryStream_INLRString_INLacdk_io_RReader_I_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateBinaryStream_INLRString_INLacdk_io_RReader_I_V_arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_updateBinaryStream_INLRString_INLacdk_io_RReader_I_V_args[] = 
{
  &ResultSet_methods_updateBinaryStream_INLRString_INLacdk_io_RReader_I_V_arg_columnName,
  &ResultSet_methods_updateBinaryStream_INLRString_INLacdk_io_RReader_I_V_arg_x,
  &ResultSet_methods_updateBinaryStream_INLRString_INLacdk_io_RReader_I_V_arg_length,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_updateBinaryStream_INLRString_INLacdk_io_RReader_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_updateBinaryStream_INLRString_INLacdk_io_RReader_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateBinaryStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1f_updateBinaryStream", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_updateBinaryStream_INLRString_INLacdk_io_RReader_I_V_args, // the arguments
  0, //arguments count
  ResultSet_methods_updateBinaryStream_INLRString_INLacdk_io_RReader_I_V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_updateBinaryStream_INLRString_INLacdk_io_RReader_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateBoolean_IZ_V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateBoolean_IZ_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_updateBoolean_IZ_V_args[] = 
{
  &ResultSet_methods_updateBoolean_IZ_V_arg_columnIndex,
  &ResultSet_methods_updateBoolean_IZ_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_updateBoolean_IZ_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_updateBoolean_IZ_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateBoolean", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1g_updateBoolean", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_updateBoolean_IZ_V_args, // the arguments
  0, //arguments count
  ResultSet_methods_updateBoolean_IZ_V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_updateBoolean_IZ_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateBoolean_INLRString_Z_V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateBoolean_INLRString_Z_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_updateBoolean_INLRString_Z_V_args[] = 
{
  &ResultSet_methods_updateBoolean_INLRString_Z_V_arg_columnName,
  &ResultSet_methods_updateBoolean_INLRString_Z_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_updateBoolean_INLRString_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_updateBoolean_INLRString_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateBoolean", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1h_updateBoolean", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_updateBoolean_INLRString_Z_V_args, // the arguments
  0, //arguments count
  ResultSet_methods_updateBoolean_INLRString_Z_V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_updateBoolean_INLRString_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateByte_IB_V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateByte_IB_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_updateByte_IB_V_args[] = 
{
  &ResultSet_methods_updateByte_IB_V_arg_columnIndex,
  &ResultSet_methods_updateByte_IB_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_updateByte_IB_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_updateByte_IB_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateByte", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1i_updateByte", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_updateByte_IB_V_args, // the arguments
  0, //arguments count
  ResultSet_methods_updateByte_IB_V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_updateByte_IB_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateByte_INLRString_B_V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateByte_INLRString_B_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_updateByte_INLRString_B_V_args[] = 
{
  &ResultSet_methods_updateByte_INLRString_B_V_arg_columnName,
  &ResultSet_methods_updateByte_INLRString_B_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_updateByte_INLRString_B_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_updateByte_INLRString_B_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateByte", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1j_updateByte", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_updateByte_INLRString_B_V_args, // the arguments
  0, //arguments count
  ResultSet_methods_updateByte_INLRString_B_V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_updateByte_INLRString_B_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateBytes_IINLRbyteArray__V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateBytes_IINLRbyteArray__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_updateBytes_IINLRbyteArray__V_args[] = 
{
  &ResultSet_methods_updateBytes_IINLRbyteArray__V_arg_columnIndex,
  &ResultSet_methods_updateBytes_IINLRbyteArray__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_updateBytes_IINLRbyteArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_updateBytes_IINLRbyteArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateBytes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1k_updateBytes", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_updateBytes_IINLRbyteArray__V_args, // the arguments
  0, //arguments count
  ResultSet_methods_updateBytes_IINLRbyteArray__V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_updateBytes_IINLRbyteArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateBytes_INLRString_INLRbyteArray__V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateBytes_INLRString_INLRbyteArray__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_updateBytes_INLRString_INLRbyteArray__V_args[] = 
{
  &ResultSet_methods_updateBytes_INLRString_INLRbyteArray__V_arg_columnName,
  &ResultSet_methods_updateBytes_INLRString_INLRbyteArray__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_updateBytes_INLRString_INLRbyteArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_updateBytes_INLRString_INLRbyteArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateBytes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1l_updateBytes", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_updateBytes_INLRString_INLRbyteArray__V_args, // the arguments
  0, //arguments count
  ResultSet_methods_updateBytes_INLRString_INLRbyteArray__V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_updateBytes_INLRString_INLRbyteArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateCharacterStream_IINLacdk_io_RReader_I_V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateCharacterStream_IINLacdk_io_RReader_I_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateCharacterStream_IINLacdk_io_RReader_I_V_arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_updateCharacterStream_IINLacdk_io_RReader_I_V_args[] = 
{
  &ResultSet_methods_updateCharacterStream_IINLacdk_io_RReader_I_V_arg_columnIndex,
  &ResultSet_methods_updateCharacterStream_IINLacdk_io_RReader_I_V_arg_x,
  &ResultSet_methods_updateCharacterStream_IINLacdk_io_RReader_I_V_arg_length,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_updateCharacterStream_IINLacdk_io_RReader_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_updateCharacterStream_IINLacdk_io_RReader_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateCharacterStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1m_updateCharacterStream", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_updateCharacterStream_IINLacdk_io_RReader_I_V_args, // the arguments
  0, //arguments count
  ResultSet_methods_updateCharacterStream_IINLacdk_io_RReader_I_V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_updateCharacterStream_IINLacdk_io_RReader_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateCharacterStream_INLRString_INLacdk_io_RReader_I_V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateCharacterStream_INLRString_INLacdk_io_RReader_I_V_arg_reader = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "reader", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateCharacterStream_INLRString_INLacdk_io_RReader_I_V_arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_updateCharacterStream_INLRString_INLacdk_io_RReader_I_V_args[] = 
{
  &ResultSet_methods_updateCharacterStream_INLRString_INLacdk_io_RReader_I_V_arg_columnName,
  &ResultSet_methods_updateCharacterStream_INLRString_INLacdk_io_RReader_I_V_arg_reader,
  &ResultSet_methods_updateCharacterStream_INLRString_INLacdk_io_RReader_I_V_arg_length,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_updateCharacterStream_INLRString_INLacdk_io_RReader_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_updateCharacterStream_INLRString_INLacdk_io_RReader_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateCharacterStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1n_updateCharacterStream", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_updateCharacterStream_INLRString_INLacdk_io_RReader_I_V_args, // the arguments
  0, //arguments count
  ResultSet_methods_updateCharacterStream_INLRString_INLacdk_io_RReader_I_V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_updateCharacterStream_INLRString_INLacdk_io_RReader_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateDate_IINLacdk_util_RDate__V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateDate_IINLacdk_util_RDate__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RDate::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_updateDate_IINLacdk_util_RDate__V_args[] = 
{
  &ResultSet_methods_updateDate_IINLacdk_util_RDate__V_arg_columnIndex,
  &ResultSet_methods_updateDate_IINLacdk_util_RDate__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_updateDate_IINLacdk_util_RDate__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_updateDate_IINLacdk_util_RDate__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateDate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1o_updateDate", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_updateDate_IINLacdk_util_RDate__V_args, // the arguments
  0, //arguments count
  ResultSet_methods_updateDate_IINLacdk_util_RDate__V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_updateDate_IINLacdk_util_RDate__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateDate_INLRString_INLacdk_util_RDate__V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateDate_INLRString_INLacdk_util_RDate__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RDate::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_updateDate_INLRString_INLacdk_util_RDate__V_args[] = 
{
  &ResultSet_methods_updateDate_INLRString_INLacdk_util_RDate__V_arg_columnName,
  &ResultSet_methods_updateDate_INLRString_INLacdk_util_RDate__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_updateDate_INLRString_INLacdk_util_RDate__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_updateDate_INLRString_INLacdk_util_RDate__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateDate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1p_updateDate", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_updateDate_INLRString_INLacdk_util_RDate__V_args, // the arguments
  0, //arguments count
  ResultSet_methods_updateDate_INLRString_INLacdk_util_RDate__V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_updateDate_INLRString_INLacdk_util_RDate__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateDouble_ID_V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateDouble_ID_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_updateDouble_ID_V_args[] = 
{
  &ResultSet_methods_updateDouble_ID_V_arg_columnIndex,
  &ResultSet_methods_updateDouble_ID_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_updateDouble_ID_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_updateDouble_ID_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateDouble", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1q_updateDouble", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_updateDouble_ID_V_args, // the arguments
  0, //arguments count
  ResultSet_methods_updateDouble_ID_V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_updateDouble_ID_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateDouble_INLRString_D_V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateDouble_INLRString_D_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_updateDouble_INLRString_D_V_args[] = 
{
  &ResultSet_methods_updateDouble_INLRString_D_V_arg_columnName,
  &ResultSet_methods_updateDouble_INLRString_D_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_updateDouble_INLRString_D_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_updateDouble_INLRString_D_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateDouble", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1r_updateDouble", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_updateDouble_INLRString_D_V_args, // the arguments
  0, //arguments count
  ResultSet_methods_updateDouble_INLRString_D_V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_updateDouble_INLRString_D_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateFloat_IF_V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateFloat_IF_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_updateFloat_IF_V_args[] = 
{
  &ResultSet_methods_updateFloat_IF_V_arg_columnIndex,
  &ResultSet_methods_updateFloat_IF_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_updateFloat_IF_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_updateFloat_IF_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateFloat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1s_updateFloat", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_updateFloat_IF_V_args, // the arguments
  0, //arguments count
  ResultSet_methods_updateFloat_IF_V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_updateFloat_IF_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateFloat_INLRString_F_V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateFloat_INLRString_F_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_updateFloat_INLRString_F_V_args[] = 
{
  &ResultSet_methods_updateFloat_INLRString_F_V_arg_columnName,
  &ResultSet_methods_updateFloat_INLRString_F_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_updateFloat_INLRString_F_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_updateFloat_INLRString_F_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateFloat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1t_updateFloat", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_updateFloat_INLRString_F_V_args, // the arguments
  0, //arguments count
  ResultSet_methods_updateFloat_INLRString_F_V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_updateFloat_INLRString_F_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateInt_II_V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateInt_II_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_updateInt_II_V_args[] = 
{
  &ResultSet_methods_updateInt_II_V_arg_columnIndex,
  &ResultSet_methods_updateInt_II_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_updateInt_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_updateInt_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateInt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1u_updateInt", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_updateInt_II_V_args, // the arguments
  0, //arguments count
  ResultSet_methods_updateInt_II_V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_updateInt_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateInt_INLRString_I_V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateInt_INLRString_I_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_updateInt_INLRString_I_V_args[] = 
{
  &ResultSet_methods_updateInt_INLRString_I_V_arg_columnName,
  &ResultSet_methods_updateInt_INLRString_I_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_updateInt_INLRString_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_updateInt_INLRString_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateInt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1v_updateInt", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_updateInt_INLRString_I_V_args, // the arguments
  0, //arguments count
  ResultSet_methods_updateInt_INLRString_I_V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_updateInt_INLRString_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateLong_IJ_V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateLong_IJ_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_updateLong_IJ_V_args[] = 
{
  &ResultSet_methods_updateLong_IJ_V_arg_columnIndex,
  &ResultSet_methods_updateLong_IJ_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_updateLong_IJ_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_updateLong_IJ_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateLong", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1w_updateLong", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_updateLong_IJ_V_args, // the arguments
  0, //arguments count
  ResultSet_methods_updateLong_IJ_V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_updateLong_IJ_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateLong_INLRString_J_V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateLong_INLRString_J_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_updateLong_INLRString_J_V_args[] = 
{
  &ResultSet_methods_updateLong_INLRString_J_V_arg_columnName,
  &ResultSet_methods_updateLong_INLRString_J_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_updateLong_INLRString_J_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_updateLong_INLRString_J_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateLong", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1x_updateLong", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_updateLong_INLRString_J_V_args, // the arguments
  0, //arguments count
  ResultSet_methods_updateLong_INLRString_J_V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_updateLong_INLRString_J_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateNull_I_V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_updateNull_I_V_args[] = 
{
  &ResultSet_methods_updateNull_I_V_arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_updateNull_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_updateNull_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateNull", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1y_updateNull", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_updateNull_I_V_args, // the arguments
  0, //arguments count
  ResultSet_methods_updateNull_I_V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_updateNull_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateNull_INLRString__V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_updateNull_INLRString__V_args[] = 
{
  &ResultSet_methods_updateNull_INLRString__V_arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_updateNull_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_updateNull_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateNull", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1z_updateNull", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_updateNull_INLRString__V_args, // the arguments
  0, //arguments count
  ResultSet_methods_updateNull_INLRString__V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_updateNull_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateObject_IINLRObject__V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateObject_IINLRObject__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_updateObject_IINLRObject__V_args[] = 
{
  &ResultSet_methods_updateObject_IINLRObject__V_arg_columnIndex,
  &ResultSet_methods_updateObject_IINLRObject__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_updateObject_IINLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_updateObject_IINLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1A_updateObject", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_updateObject_IINLRObject__V_args, // the arguments
  0, //arguments count
  ResultSet_methods_updateObject_IINLRObject__V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_updateObject_IINLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateObject_IINLRObject_I_V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateObject_IINLRObject_I_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateObject_IINLRObject_I_V_arg_scale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "scale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_updateObject_IINLRObject_I_V_args[] = 
{
  &ResultSet_methods_updateObject_IINLRObject_I_V_arg_columnIndex,
  &ResultSet_methods_updateObject_IINLRObject_I_V_arg_x,
  &ResultSet_methods_updateObject_IINLRObject_I_V_arg_scale,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_updateObject_IINLRObject_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_updateObject_IINLRObject_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1B_updateObject", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_updateObject_IINLRObject_I_V_args, // the arguments
  0, //arguments count
  ResultSet_methods_updateObject_IINLRObject_I_V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_updateObject_IINLRObject_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateObject_INLRString_INLRObject__V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateObject_INLRString_INLRObject__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_updateObject_INLRString_INLRObject__V_args[] = 
{
  &ResultSet_methods_updateObject_INLRString_INLRObject__V_arg_columnName,
  &ResultSet_methods_updateObject_INLRString_INLRObject__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_updateObject_INLRString_INLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_updateObject_INLRString_INLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1C_updateObject", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_updateObject_INLRString_INLRObject__V_args, // the arguments
  0, //arguments count
  ResultSet_methods_updateObject_INLRString_INLRObject__V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_updateObject_INLRString_INLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateObject_INLRString_INLRObject_I_V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateObject_INLRString_INLRObject_I_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateObject_INLRString_INLRObject_I_V_arg_scale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "scale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_updateObject_INLRString_INLRObject_I_V_args[] = 
{
  &ResultSet_methods_updateObject_INLRString_INLRObject_I_V_arg_columnName,
  &ResultSet_methods_updateObject_INLRString_INLRObject_I_V_arg_x,
  &ResultSet_methods_updateObject_INLRString_INLRObject_I_V_arg_scale,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_updateObject_INLRString_INLRObject_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_updateObject_INLRString_INLRObject_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1D_updateObject", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_updateObject_INLRString_INLRObject_I_V_args, // the arguments
  0, //arguments count
  ResultSet_methods_updateObject_INLRString_INLRObject_I_V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_updateObject_INLRString_INLRObject_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_updateRow__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_updateRow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_updateRow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateRow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1E_updateRow", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_updateRow__V_args, // the arguments
  0, //arguments count
  ResultSet_methods_updateRow__V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_updateRow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateShort_IS_V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateShort_IS_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_updateShort_IS_V_args[] = 
{
  &ResultSet_methods_updateShort_IS_V_arg_columnIndex,
  &ResultSet_methods_updateShort_IS_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_updateShort_IS_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_updateShort_IS_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateShort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1F_updateShort", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_updateShort_IS_V_args, // the arguments
  0, //arguments count
  ResultSet_methods_updateShort_IS_V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_updateShort_IS_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateShort_INLRString_S_V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateShort_INLRString_S_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_updateShort_INLRString_S_V_args[] = 
{
  &ResultSet_methods_updateShort_INLRString_S_V_arg_columnName,
  &ResultSet_methods_updateShort_INLRString_S_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_updateShort_INLRString_S_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_updateShort_INLRString_S_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateShort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1G_updateShort", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_updateShort_INLRString_S_V_args, // the arguments
  0, //arguments count
  ResultSet_methods_updateShort_INLRString_S_V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_updateShort_INLRString_S_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateString_IINLRString__V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateString_IINLRString__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_updateString_IINLRString__V_args[] = 
{
  &ResultSet_methods_updateString_IINLRString__V_arg_columnIndex,
  &ResultSet_methods_updateString_IINLRString__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_updateString_IINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_updateString_IINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1H_updateString", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_updateString_IINLRString__V_args, // the arguments
  0, //arguments count
  ResultSet_methods_updateString_IINLRString__V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_updateString_IINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateString_INLRString_INLRString__V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateString_INLRString_INLRString__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_updateString_INLRString_INLRString__V_args[] = 
{
  &ResultSet_methods_updateString_INLRString_INLRString__V_arg_columnName,
  &ResultSet_methods_updateString_INLRString_INLRString__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_updateString_INLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_updateString_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1I_updateString", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_updateString_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  ResultSet_methods_updateString_INLRString_INLRString__V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_updateString_INLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateTime_IINLRTime__V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateTime_IINLRTime__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTime::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_updateTime_IINLRTime__V_args[] = 
{
  &ResultSet_methods_updateTime_IINLRTime__V_arg_columnIndex,
  &ResultSet_methods_updateTime_IINLRTime__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_updateTime_IINLRTime__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_updateTime_IINLRTime__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateTime", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1J_updateTime", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_updateTime_IINLRTime__V_args, // the arguments
  0, //arguments count
  ResultSet_methods_updateTime_IINLRTime__V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_updateTime_IINLRTime__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateTime_INLRString_INLRTime__V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateTime_INLRString_INLRTime__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTime::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_updateTime_INLRString_INLRTime__V_args[] = 
{
  &ResultSet_methods_updateTime_INLRString_INLRTime__V_arg_columnName,
  &ResultSet_methods_updateTime_INLRString_INLRTime__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_updateTime_INLRString_INLRTime__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_updateTime_INLRString_INLRTime__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateTime", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1K_updateTime", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_updateTime_INLRString_INLRTime__V_args, // the arguments
  0, //arguments count
  ResultSet_methods_updateTime_INLRString_INLRTime__V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_updateTime_INLRString_INLRTime__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateTimestamp_IINLRTimestamp__V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateTimestamp_IINLRTimestamp__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTimestamp::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_updateTimestamp_IINLRTimestamp__V_args[] = 
{
  &ResultSet_methods_updateTimestamp_IINLRTimestamp__V_arg_columnIndex,
  &ResultSet_methods_updateTimestamp_IINLRTimestamp__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_updateTimestamp_IINLRTimestamp__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_updateTimestamp_IINLRTimestamp__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateTimestamp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1L_updateTimestamp", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_updateTimestamp_IINLRTimestamp__V_args, // the arguments
  0, //arguments count
  ResultSet_methods_updateTimestamp_IINLRTimestamp__V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_updateTimestamp_IINLRTimestamp__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateTimestamp_INLRString_INLRTimestamp__V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSet_methods_updateTimestamp_INLRString_INLRTimestamp__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTimestamp::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_updateTimestamp_INLRString_INLRTimestamp__V_args[] = 
{
  &ResultSet_methods_updateTimestamp_INLRString_INLRTimestamp__V_arg_columnName,
  &ResultSet_methods_updateTimestamp_INLRString_INLRTimestamp__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_updateTimestamp_INLRString_INLRTimestamp__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_updateTimestamp_INLRString_INLRTimestamp__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateTimestamp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1M_updateTimestamp", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_updateTimestamp_INLRString_INLRTimestamp__V_args, // the arguments
  0, //arguments count
  ResultSet_methods_updateTimestamp_INLRString_INLRTimestamp__V_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_updateTimestamp_INLRString_INLRTimestamp__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSet_methods_wasNull__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet_methods_wasNull__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSet_method_wasNull__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "wasNull", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1N_wasNull", // alternative name of method
  -1, // altlabelHashCode
  ResultSet_methods_wasNull__Z_args, // the arguments
  0, //arguments count
  ResultSet_methods_wasNull__Z_exceptions, // the declared exceptions
  ResultSet_MetainfoWrapper::ResultSet_method_wasNull__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ResultSet_methods[] = 
{
  &ResultSet_method_GetClass__L_acdk_lang_RClass_,
  &ResultSet_method_absolute_I_Z,
  &ResultSet_method_afterLast__V,
  &ResultSet_method_beforeFirst__V,
  &ResultSet_method_cancelRowUpdates__V,
  &ResultSet_method_clearWarnings__V,
  &ResultSet_method_close__V,
  &ResultSet_method_deleteRow__V,
  &ResultSet_method_findColumn_INLRString__I,
  &ResultSet_method_first__Z,
  &ResultSet_method_getArray_I_LRArray_,
  &ResultSet_method_getArray_INLRString__LRArray_,
  &ResultSet_method_getAsciiStream_I_Lacdk_io_RReader_,
  &ResultSet_method_getAsciiStream_INLRString__Lacdk_io_RReader_,
  &ResultSet_method_getBinaryStream_I_Lacdk_io_RReader_,
  &ResultSet_method_getBinaryStream_INLRString__Lacdk_io_RReader_,
  &ResultSet_method_getBlob_I_LRBlob_,
  &ResultSet_method_getBlob_INLRString__LRBlob_,
  &ResultSet_method_getBoolean_I_Z,
  &ResultSet_method_getBoolean_INLRString__Z,
  &ResultSet_method_getByte_I_B,
  &ResultSet_method_getByte_INLRString__B,
  &ResultSet_method_getBytes_I_LRbyteArray_,
  &ResultSet_method_getBytes_INLRString__LRbyteArray_,
  &ResultSet_method_getCharacterStream_I_Lacdk_io_RReader_,
  &ResultSet_method_getCharacterStream_INLRString__Lacdk_io_RReader_,
  &ResultSet_method_getConcurrency__I,
  &ResultSet_method_getCursorName__LRString_,
  &ResultSet_method_getDate_I_Lacdk_util_RDate_,
  &ResultSet_method_getDate_INLRString__Lacdk_util_RDate_,
  &ResultSet_method_getDouble_I_D,
  &ResultSet_method_getDouble_INLRString__D,
  &ResultSet_method_getFetchDirection__I,
  &ResultSet_method_getFetchSize__I,
  &ResultSet_method_getFloat_I_F,
  &ResultSet_method_getFloat_INLRString__F,
  &ResultSet_method_getInt_I_I,
  &ResultSet_method_getInt_INLRString__I,
  &ResultSet_method_getLong_I_J,
  &ResultSet_method_getLong_INLRString__J,
  &ResultSet_method_getMetaData__LRResultSetMetaData_,
  &ResultSet_method_getObject_I_LRObject_,
  &ResultSet_method_getObject_IINLacdk_util_RMap__LRObject_,
  &ResultSet_method_getObject_INLRString__LRObject_,
  &ResultSet_method_getObject_INLRString_INLacdk_util_RMap__LRObject_,
  &ResultSet_method_getRow__I,
  &ResultSet_method_getShort_I_S,
  &ResultSet_method_getShort_INLRString__S,
  &ResultSet_method_getStatement__LRStatement_,
  &ResultSet_method_getString_I_LRString_,
  &ResultSet_method_getString_INLRString__LRString_,
  &ResultSet_method_getTime_I_LRTime_,
  &ResultSet_method_getTime_INLRString__LRTime_,
  &ResultSet_method_getTimestamp_I_LRTimestamp_,
  &ResultSet_method_getTimestamp_INLRString__LRTimestamp_,
  &ResultSet_method_getType__I,
  &ResultSet_method_getWarnings__LRSQLWarning_,
  &ResultSet_method_insertRow__V,
  &ResultSet_method_isAfterLast__Z,
  &ResultSet_method_isBeforeFirst__Z,
  &ResultSet_method_isFirst__Z,
  &ResultSet_method_isLast__Z,
  &ResultSet_method_iterator__Lacdk_util_RIterator_,
  &ResultSet_method_last__Z,
  &ResultSet_method_moveToCurrentRow__V,
  &ResultSet_method_moveToInsertRow__V,
  &ResultSet_method_next__Z,
  &ResultSet_method_previous__Z,
  &ResultSet_method_refreshRow__V,
  &ResultSet_method_relative_I_Z,
  &ResultSet_method_rowDeleted__Z,
  &ResultSet_method_rowInserted__Z,
  &ResultSet_method_rowUpdated__Z,
  &ResultSet_method_setFetchDirection_I_V,
  &ResultSet_method_setFetchSize_I_V,
  &ResultSet_method_updateAsciiStream_IINLacdk_io_RReader_I_V,
  &ResultSet_method_updateAsciiStream_INLRString_INLacdk_io_RReader_I_V,
  &ResultSet_method_updateBinaryStream_IINLacdk_io_RReader_I_V,
  &ResultSet_method_updateBinaryStream_INLRString_INLacdk_io_RReader_I_V,
  &ResultSet_method_updateBoolean_IZ_V,
  &ResultSet_method_updateBoolean_INLRString_Z_V,
  &ResultSet_method_updateByte_IB_V,
  &ResultSet_method_updateByte_INLRString_B_V,
  &ResultSet_method_updateBytes_IINLRbyteArray__V,
  &ResultSet_method_updateBytes_INLRString_INLRbyteArray__V,
  &ResultSet_method_updateCharacterStream_IINLacdk_io_RReader_I_V,
  &ResultSet_method_updateCharacterStream_INLRString_INLacdk_io_RReader_I_V,
  &ResultSet_method_updateDate_IINLacdk_util_RDate__V,
  &ResultSet_method_updateDate_INLRString_INLacdk_util_RDate__V,
  &ResultSet_method_updateDouble_ID_V,
  &ResultSet_method_updateDouble_INLRString_D_V,
  &ResultSet_method_updateFloat_IF_V,
  &ResultSet_method_updateFloat_INLRString_F_V,
  &ResultSet_method_updateInt_II_V,
  &ResultSet_method_updateInt_INLRString_I_V,
  &ResultSet_method_updateLong_IJ_V,
  &ResultSet_method_updateLong_INLRString_J_V,
  &ResultSet_method_updateNull_I_V,
  &ResultSet_method_updateNull_INLRString__V,
  &ResultSet_method_updateObject_IINLRObject__V,
  &ResultSet_method_updateObject_IINLRObject_I_V,
  &ResultSet_method_updateObject_INLRString_INLRObject__V,
  &ResultSet_method_updateObject_INLRString_INLRObject_I_V,
  &ResultSet_method_updateRow__V,
  &ResultSet_method_updateShort_IS_V,
  &ResultSet_method_updateShort_INLRString_S_V,
  &ResultSet_method_updateString_IINLRString__V,
  &ResultSet_method_updateString_INLRString_INLRString__V,
  &ResultSet_method_updateTime_IINLRTime__V,
  &ResultSet_method_updateTime_INLRString_INLRTime__V,
  &ResultSet_method_updateTimestamp_IINLRTimestamp__V,
  &ResultSet_method_updateTimestamp_INLRString_INLRTimestamp__V,
  &ResultSet_method_wasNull__Z,
  0
};


struct ResultSet_MetaInfoInitializer
{  ResultSet_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ResultSet::clazzInfo();
    ci->fields =  _ResultSet_fields;
    ci->methods =  _ResultSet_methods;
    ci->_scopeParent = acdk_sql_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ResultSet_MetaInfoInitializer ResultSet_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace sql


namespace acdk { 
namespace sql { 


//static
::acdk::lang::RObject
ResultSetIterator_create_array(int length)
{
  return new ObjectArrayImpl<RResultSetIterator>(length);
}

//static
::acdk::lang::RObject
ResultSetIterator_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ResultSetIterator_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSetIterator_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ResultSetIterator::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSetIterator_method_ResultSetIterator_INLRResultSet__LRResultSetIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ResultSetIterator((RResultSet)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSetIterator_method_element__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSetIterator* This = dmi_cast<ResultSetIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ResultSetIterator::element();
    else
        ret = (::acdk::lang::RObject)This->element();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSetIterator_method_hasNext__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSetIterator* This = dmi_cast<ResultSetIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ResultSetIterator::hasNext();
    else
      ret = This->hasNext();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSetIterator_method_next__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSetIterator* This = dmi_cast<ResultSetIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ResultSetIterator::next();
    else
        ret = (::acdk::lang::RObject)This->next();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSetIterator_method_remove__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSetIterator* This = dmi_cast<ResultSetIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ResultSetIterator::remove();
    else
        This->remove();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ResultSetIterator_fields__rset_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ResultSetIterator* This = dmi_cast<ResultSetIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_rset, flags);
    else
      This->_rset = (RResultSet)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ResultSetIterator_fields__rset = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_rset", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(),
  ResultSetIterator_MetainfoWrapper::ResultSetIterator_fields__rset_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ResultSetIterator_fields[] = 
{
  &ResultSetIterator_fields__rset,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSetIterator_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSetIterator_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSetIterator_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ResultSetIterator_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ResultSetIterator_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ResultSetIterator_MetainfoWrapper::ResultSetIterator_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSetIterator_methods_ResultSetIterator_INLRResultSet__LRResultSetIterator__arg_rset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSetIterator_methods_ResultSetIterator_INLRResultSet__LRResultSetIterator__args[] = 
{
  &ResultSetIterator_methods_ResultSetIterator_INLRResultSet__LRResultSetIterator__arg_rset,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSetIterator_methods_ResultSetIterator_INLRResultSet__LRResultSetIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSetIterator_method_ResultSetIterator_INLRResultSet__LRResultSetIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ResultSetIterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ResultSetIterator::clazzInfo(), // return type
  "_0_ResultSetIterator", // alternative name of method
  -1, // altlabelHashCode
  ResultSetIterator_methods_ResultSetIterator_INLRResultSet__LRResultSetIterator__args, // the arguments
  0, //arguments count
  ResultSetIterator_methods_ResultSetIterator_INLRResultSet__LRResultSetIterator__exceptions, // the declared exceptions
  ResultSetIterator_MetainfoWrapper::ResultSetIterator_method_ResultSetIterator_INLRResultSet__LRResultSetIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSetIterator_methods_element__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSetIterator_methods_element__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSetIterator_method_element__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "element", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_3_element", // alternative name of method
  -1, // altlabelHashCode
  ResultSetIterator_methods_element__LRObject__args, // the arguments
  0, //arguments count
  ResultSetIterator_methods_element__LRObject__exceptions, // the declared exceptions
  ResultSetIterator_MetainfoWrapper::ResultSetIterator_method_element__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSetIterator_methods_hasNext__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSetIterator_methods_hasNext__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSetIterator_method_hasNext__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasNext", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_hasNext", // alternative name of method
  -1, // altlabelHashCode
  ResultSetIterator_methods_hasNext__Z_args, // the arguments
  0, //arguments count
  ResultSetIterator_methods_hasNext__Z_exceptions, // the declared exceptions
  ResultSetIterator_MetainfoWrapper::ResultSetIterator_method_hasNext__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSetIterator_methods_next__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSetIterator_methods_next__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSetIterator_method_next__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "next", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_2_next", // alternative name of method
  -1, // altlabelHashCode
  ResultSetIterator_methods_next__LRObject__args, // the arguments
  0, //arguments count
  ResultSetIterator_methods_next__LRObject__exceptions, // the declared exceptions
  ResultSetIterator_MetainfoWrapper::ResultSetIterator_method_next__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSetIterator_methods_remove__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSetIterator_methods_remove__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSetIterator_method_remove__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "remove", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_remove", // alternative name of method
  -1, // altlabelHashCode
  ResultSetIterator_methods_remove__V_args, // the arguments
  0, //arguments count
  ResultSetIterator_methods_remove__V_exceptions, // the declared exceptions
  ResultSetIterator_MetainfoWrapper::ResultSetIterator_method_remove__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ResultSetIterator_methods[] = 
{
  &ResultSetIterator_method_GetClass__L_acdk_lang_RClass_,
  &ResultSetIterator_method_ResultSetIterator_INLRResultSet__LRResultSetIterator_,
  &ResultSetIterator_method_element__LRObject_,
  &ResultSetIterator_method_hasNext__Z,
  &ResultSetIterator_method_next__LRObject_,
  &ResultSetIterator_method_remove__V,
  0
};


struct ResultSetIterator_MetaInfoInitializer
{  ResultSetIterator_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ResultSetIterator::clazzInfo();
    ci->fields =  _ResultSetIterator_fields;
    ci->methods =  _ResultSetIterator_methods;
    ci->_scopeParent = acdk_sql_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ResultSetIterator_MetaInfoInitializer ResultSetIterator_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace sql


namespace acdk { 
namespace sql { 


//static
::acdk::lang::RObject
ResultSetMetaData_create_array(int length)
{
  return new ObjectArrayImpl<RResultSetMetaData>(length);
}

//static
::acdk::lang::RObject
ResultSetMetaData_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ResultSetMetaData_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSetMetaData_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ResultSetMetaData::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSetMetaData_method_getCatalogName_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSetMetaData* This = dmi_cast<ResultSetMetaData>(This_);
    ret = (::acdk::lang::RObject)This->getCatalogName(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSetMetaData_method_getColumnClassName_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSetMetaData* This = dmi_cast<ResultSetMetaData>(This_);
    ret = (::acdk::lang::RObject)This->getColumnClassName(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSetMetaData_method_getColumnCount__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSetMetaData* This = dmi_cast<ResultSetMetaData>(This_);
  ret = This->getColumnCount();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSetMetaData_method_getColumnDisplaySize_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSetMetaData* This = dmi_cast<ResultSetMetaData>(This_);
  ret = This->getColumnDisplaySize(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSetMetaData_method_getColumnLabel_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSetMetaData* This = dmi_cast<ResultSetMetaData>(This_);
    ret = (::acdk::lang::RObject)This->getColumnLabel(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSetMetaData_method_getColumnName_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSetMetaData* This = dmi_cast<ResultSetMetaData>(This_);
    ret = (::acdk::lang::RObject)This->getColumnName(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSetMetaData_method_getColumnType_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSetMetaData* This = dmi_cast<ResultSetMetaData>(This_);
  ret = This->getColumnType(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSetMetaData_method_getColumnTypeName_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSetMetaData* This = dmi_cast<ResultSetMetaData>(This_);
    ret = (::acdk::lang::RObject)This->getColumnTypeName(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSetMetaData_method_getPrecision_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSetMetaData* This = dmi_cast<ResultSetMetaData>(This_);
  ret = This->getPrecision(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSetMetaData_method_getScale_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSetMetaData* This = dmi_cast<ResultSetMetaData>(This_);
  ret = This->getScale(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSetMetaData_method_getSchemaName_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSetMetaData* This = dmi_cast<ResultSetMetaData>(This_);
    ret = (::acdk::lang::RObject)This->getSchemaName(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSetMetaData_method_getTableName_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSetMetaData* This = dmi_cast<ResultSetMetaData>(This_);
    ret = (::acdk::lang::RObject)This->getTableName(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSetMetaData_method_isAutoIncrement_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSetMetaData* This = dmi_cast<ResultSetMetaData>(This_);
  ret = This->isAutoIncrement(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSetMetaData_method_isCaseSensitive_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSetMetaData* This = dmi_cast<ResultSetMetaData>(This_);
  ret = This->isCaseSensitive(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSetMetaData_method_isCurrency_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSetMetaData* This = dmi_cast<ResultSetMetaData>(This_);
  ret = This->isCurrency(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSetMetaData_method_isDefinitelyWritable_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSetMetaData* This = dmi_cast<ResultSetMetaData>(This_);
  ret = This->isDefinitelyWritable(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSetMetaData_method_isNullable_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSetMetaData* This = dmi_cast<ResultSetMetaData>(This_);
  ret = This->isNullable(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSetMetaData_method_isReadOnly_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSetMetaData* This = dmi_cast<ResultSetMetaData>(This_);
  ret = This->isReadOnly(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSetMetaData_method_isSearchable_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSetMetaData* This = dmi_cast<ResultSetMetaData>(This_);
  ret = This->isSearchable(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSetMetaData_method_isSigned_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSetMetaData* This = dmi_cast<ResultSetMetaData>(This_);
  ret = This->isSigned(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResultSetMetaData_method_isWritable_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResultSetMetaData* This = dmi_cast<ResultSetMetaData>(This_);
  ret = This->isWritable(args[0].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ResultSetMetaData_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSetMetaData_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSetMetaData_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResultSetMetaData_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_l_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ResultSetMetaData_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ResultSetMetaData_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ResultSetMetaData_MetainfoWrapper::ResultSetMetaData_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSetMetaData_methods_getCatalogName_I_LRString__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSetMetaData_methods_getCatalogName_I_LRString__args[] = 
{
  &ResultSetMetaData_methods_getCatalogName_I_LRString__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSetMetaData_methods_getCatalogName_I_LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void ResultSetMetaData_getCatalogName_I_LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ResultSetMetaData_method_getCatalogName_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCatalogName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_e_getCatalogName", // alternative name of method
  -1, // altlabelHashCode
  ResultSetMetaData_methods_getCatalogName_I_LRString__args, // the arguments
  0, //arguments count
  ResultSetMetaData_methods_getCatalogName_I_LRString__exceptions, // the declared exceptions
  ResultSetMetaData_MetainfoWrapper::ResultSetMetaData_method_getCatalogName_I_LRString__dispatch, // invoke this method
  ResultSetMetaData_getCatalogName_I_LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSetMetaData_methods_getColumnClassName_I_LRString__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSetMetaData_methods_getColumnClassName_I_LRString__args[] = 
{
  &ResultSetMetaData_methods_getColumnClassName_I_LRString__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSetMetaData_methods_getColumnClassName_I_LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void ResultSetMetaData_getColumnClassName_I_LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ResultSetMetaData_method_getColumnClassName_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColumnClassName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_k_getColumnClassName", // alternative name of method
  -1, // altlabelHashCode
  ResultSetMetaData_methods_getColumnClassName_I_LRString__args, // the arguments
  0, //arguments count
  ResultSetMetaData_methods_getColumnClassName_I_LRString__exceptions, // the declared exceptions
  ResultSetMetaData_MetainfoWrapper::ResultSetMetaData_method_getColumnClassName_I_LRString__dispatch, // invoke this method
  ResultSetMetaData_getColumnClassName_I_LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSetMetaData_methods_getColumnCount__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSetMetaData_methods_getColumnCount__I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void ResultSetMetaData_getColumnCount__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ResultSetMetaData_method_getColumnCount__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColumnCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_0_getColumnCount", // alternative name of method
  -1, // altlabelHashCode
  ResultSetMetaData_methods_getColumnCount__I_args, // the arguments
  0, //arguments count
  ResultSetMetaData_methods_getColumnCount__I_exceptions, // the declared exceptions
  ResultSetMetaData_MetainfoWrapper::ResultSetMetaData_method_getColumnCount__I_dispatch, // invoke this method
  ResultSetMetaData_getColumnCount__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSetMetaData_methods_getColumnDisplaySize_I_I_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSetMetaData_methods_getColumnDisplaySize_I_I_args[] = 
{
  &ResultSetMetaData_methods_getColumnDisplaySize_I_I_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSetMetaData_methods_getColumnDisplaySize_I_I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void ResultSetMetaData_getColumnDisplaySize_I_I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ResultSetMetaData_method_getColumnDisplaySize_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColumnDisplaySize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_getColumnDisplaySize", // alternative name of method
  -1, // altlabelHashCode
  ResultSetMetaData_methods_getColumnDisplaySize_I_I_args, // the arguments
  0, //arguments count
  ResultSetMetaData_methods_getColumnDisplaySize_I_I_exceptions, // the declared exceptions
  ResultSetMetaData_MetainfoWrapper::ResultSetMetaData_method_getColumnDisplaySize_I_I_dispatch, // invoke this method
  ResultSetMetaData_getColumnDisplaySize_I_I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSetMetaData_methods_getColumnLabel_I_LRString__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSetMetaData_methods_getColumnLabel_I_LRString__args[] = 
{
  &ResultSetMetaData_methods_getColumnLabel_I_LRString__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSetMetaData_methods_getColumnLabel_I_LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void ResultSetMetaData_getColumnLabel_I_LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ResultSetMetaData_method_getColumnLabel_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColumnLabel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_8_getColumnLabel", // alternative name of method
  -1, // altlabelHashCode
  ResultSetMetaData_methods_getColumnLabel_I_LRString__args, // the arguments
  0, //arguments count
  ResultSetMetaData_methods_getColumnLabel_I_LRString__exceptions, // the declared exceptions
  ResultSetMetaData_MetainfoWrapper::ResultSetMetaData_method_getColumnLabel_I_LRString__dispatch, // invoke this method
  ResultSetMetaData_getColumnLabel_I_LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSetMetaData_methods_getColumnName_I_LRString__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSetMetaData_methods_getColumnName_I_LRString__args[] = 
{
  &ResultSetMetaData_methods_getColumnName_I_LRString__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSetMetaData_methods_getColumnName_I_LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void ResultSetMetaData_getColumnName_I_LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ResultSetMetaData_method_getColumnName_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColumnName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_9_getColumnName", // alternative name of method
  -1, // altlabelHashCode
  ResultSetMetaData_methods_getColumnName_I_LRString__args, // the arguments
  0, //arguments count
  ResultSetMetaData_methods_getColumnName_I_LRString__exceptions, // the declared exceptions
  ResultSetMetaData_MetainfoWrapper::ResultSetMetaData_method_getColumnName_I_LRString__dispatch, // invoke this method
  ResultSetMetaData_getColumnName_I_LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSetMetaData_methods_getColumnType_I_I_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSetMetaData_methods_getColumnType_I_I_args[] = 
{
  &ResultSetMetaData_methods_getColumnType_I_I_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSetMetaData_methods_getColumnType_I_I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void ResultSetMetaData_getColumnType_I_I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ResultSetMetaData_method_getColumnType_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColumnType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_f_getColumnType", // alternative name of method
  -1, // altlabelHashCode
  ResultSetMetaData_methods_getColumnType_I_I_args, // the arguments
  0, //arguments count
  ResultSetMetaData_methods_getColumnType_I_I_exceptions, // the declared exceptions
  ResultSetMetaData_MetainfoWrapper::ResultSetMetaData_method_getColumnType_I_I_dispatch, // invoke this method
  ResultSetMetaData_getColumnType_I_I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSetMetaData_methods_getColumnTypeName_I_LRString__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSetMetaData_methods_getColumnTypeName_I_LRString__args[] = 
{
  &ResultSetMetaData_methods_getColumnTypeName_I_LRString__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSetMetaData_methods_getColumnTypeName_I_LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void ResultSetMetaData_getColumnTypeName_I_LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ResultSetMetaData_method_getColumnTypeName_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColumnTypeName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_g_getColumnTypeName", // alternative name of method
  -1, // altlabelHashCode
  ResultSetMetaData_methods_getColumnTypeName_I_LRString__args, // the arguments
  0, //arguments count
  ResultSetMetaData_methods_getColumnTypeName_I_LRString__exceptions, // the declared exceptions
  ResultSetMetaData_MetainfoWrapper::ResultSetMetaData_method_getColumnTypeName_I_LRString__dispatch, // invoke this method
  ResultSetMetaData_getColumnTypeName_I_LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSetMetaData_methods_getPrecision_I_I_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSetMetaData_methods_getPrecision_I_I_args[] = 
{
  &ResultSetMetaData_methods_getPrecision_I_I_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSetMetaData_methods_getPrecision_I_I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void ResultSetMetaData_getPrecision_I_I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ResultSetMetaData_method_getPrecision_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPrecision", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_b_getPrecision", // alternative name of method
  -1, // altlabelHashCode
  ResultSetMetaData_methods_getPrecision_I_I_args, // the arguments
  0, //arguments count
  ResultSetMetaData_methods_getPrecision_I_I_exceptions, // the declared exceptions
  ResultSetMetaData_MetainfoWrapper::ResultSetMetaData_method_getPrecision_I_I_dispatch, // invoke this method
  ResultSetMetaData_getPrecision_I_I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSetMetaData_methods_getScale_I_I_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSetMetaData_methods_getScale_I_I_args[] = 
{
  &ResultSetMetaData_methods_getScale_I_I_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSetMetaData_methods_getScale_I_I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void ResultSetMetaData_getScale_I_I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ResultSetMetaData_method_getScale_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getScale", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_c_getScale", // alternative name of method
  -1, // altlabelHashCode
  ResultSetMetaData_methods_getScale_I_I_args, // the arguments
  0, //arguments count
  ResultSetMetaData_methods_getScale_I_I_exceptions, // the declared exceptions
  ResultSetMetaData_MetainfoWrapper::ResultSetMetaData_method_getScale_I_I_dispatch, // invoke this method
  ResultSetMetaData_getScale_I_I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSetMetaData_methods_getSchemaName_I_LRString__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSetMetaData_methods_getSchemaName_I_LRString__args[] = 
{
  &ResultSetMetaData_methods_getSchemaName_I_LRString__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSetMetaData_methods_getSchemaName_I_LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void ResultSetMetaData_getSchemaName_I_LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ResultSetMetaData_method_getSchemaName_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSchemaName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_a_getSchemaName", // alternative name of method
  -1, // altlabelHashCode
  ResultSetMetaData_methods_getSchemaName_I_LRString__args, // the arguments
  0, //arguments count
  ResultSetMetaData_methods_getSchemaName_I_LRString__exceptions, // the declared exceptions
  ResultSetMetaData_MetainfoWrapper::ResultSetMetaData_method_getSchemaName_I_LRString__dispatch, // invoke this method
  ResultSetMetaData_getSchemaName_I_LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSetMetaData_methods_getTableName_I_LRString__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSetMetaData_methods_getTableName_I_LRString__args[] = 
{
  &ResultSetMetaData_methods_getTableName_I_LRString__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSetMetaData_methods_getTableName_I_LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void ResultSetMetaData_getTableName_I_LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ResultSetMetaData_method_getTableName_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTableName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_d_getTableName", // alternative name of method
  -1, // altlabelHashCode
  ResultSetMetaData_methods_getTableName_I_LRString__args, // the arguments
  0, //arguments count
  ResultSetMetaData_methods_getTableName_I_LRString__exceptions, // the declared exceptions
  ResultSetMetaData_MetainfoWrapper::ResultSetMetaData_method_getTableName_I_LRString__dispatch, // invoke this method
  ResultSetMetaData_getTableName_I_LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSetMetaData_methods_isAutoIncrement_I_Z_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSetMetaData_methods_isAutoIncrement_I_Z_args[] = 
{
  &ResultSetMetaData_methods_isAutoIncrement_I_Z_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSetMetaData_methods_isAutoIncrement_I_Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void ResultSetMetaData_isAutoIncrement_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ResultSetMetaData_method_isAutoIncrement_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isAutoIncrement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_isAutoIncrement", // alternative name of method
  -1, // altlabelHashCode
  ResultSetMetaData_methods_isAutoIncrement_I_Z_args, // the arguments
  0, //arguments count
  ResultSetMetaData_methods_isAutoIncrement_I_Z_exceptions, // the declared exceptions
  ResultSetMetaData_MetainfoWrapper::ResultSetMetaData_method_isAutoIncrement_I_Z_dispatch, // invoke this method
  ResultSetMetaData_isAutoIncrement_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSetMetaData_methods_isCaseSensitive_I_Z_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSetMetaData_methods_isCaseSensitive_I_Z_args[] = 
{
  &ResultSetMetaData_methods_isCaseSensitive_I_Z_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSetMetaData_methods_isCaseSensitive_I_Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void ResultSetMetaData_isCaseSensitive_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ResultSetMetaData_method_isCaseSensitive_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isCaseSensitive", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_isCaseSensitive", // alternative name of method
  -1, // altlabelHashCode
  ResultSetMetaData_methods_isCaseSensitive_I_Z_args, // the arguments
  0, //arguments count
  ResultSetMetaData_methods_isCaseSensitive_I_Z_exceptions, // the declared exceptions
  ResultSetMetaData_MetainfoWrapper::ResultSetMetaData_method_isCaseSensitive_I_Z_dispatch, // invoke this method
  ResultSetMetaData_isCaseSensitive_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSetMetaData_methods_isCurrency_I_Z_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSetMetaData_methods_isCurrency_I_Z_args[] = 
{
  &ResultSetMetaData_methods_isCurrency_I_Z_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSetMetaData_methods_isCurrency_I_Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void ResultSetMetaData_isCurrency_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ResultSetMetaData_method_isCurrency_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isCurrency", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_isCurrency", // alternative name of method
  -1, // altlabelHashCode
  ResultSetMetaData_methods_isCurrency_I_Z_args, // the arguments
  0, //arguments count
  ResultSetMetaData_methods_isCurrency_I_Z_exceptions, // the declared exceptions
  ResultSetMetaData_MetainfoWrapper::ResultSetMetaData_method_isCurrency_I_Z_dispatch, // invoke this method
  ResultSetMetaData_isCurrency_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSetMetaData_methods_isDefinitelyWritable_I_Z_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSetMetaData_methods_isDefinitelyWritable_I_Z_args[] = 
{
  &ResultSetMetaData_methods_isDefinitelyWritable_I_Z_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSetMetaData_methods_isDefinitelyWritable_I_Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void ResultSetMetaData_isDefinitelyWritable_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ResultSetMetaData_method_isDefinitelyWritable_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isDefinitelyWritable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_j_isDefinitelyWritable", // alternative name of method
  -1, // altlabelHashCode
  ResultSetMetaData_methods_isDefinitelyWritable_I_Z_args, // the arguments
  0, //arguments count
  ResultSetMetaData_methods_isDefinitelyWritable_I_Z_exceptions, // the declared exceptions
  ResultSetMetaData_MetainfoWrapper::ResultSetMetaData_method_isDefinitelyWritable_I_Z_dispatch, // invoke this method
  ResultSetMetaData_isDefinitelyWritable_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSetMetaData_methods_isNullable_I_I_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSetMetaData_methods_isNullable_I_I_args[] = 
{
  &ResultSetMetaData_methods_isNullable_I_I_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSetMetaData_methods_isNullable_I_I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void ResultSetMetaData_isNullable_I_I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ResultSetMetaData_method_isNullable_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isNullable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_isNullable", // alternative name of method
  -1, // altlabelHashCode
  ResultSetMetaData_methods_isNullable_I_I_args, // the arguments
  0, //arguments count
  ResultSetMetaData_methods_isNullable_I_I_exceptions, // the declared exceptions
  ResultSetMetaData_MetainfoWrapper::ResultSetMetaData_method_isNullable_I_I_dispatch, // invoke this method
  ResultSetMetaData_isNullable_I_I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSetMetaData_methods_isReadOnly_I_Z_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSetMetaData_methods_isReadOnly_I_Z_args[] = 
{
  &ResultSetMetaData_methods_isReadOnly_I_Z_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSetMetaData_methods_isReadOnly_I_Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void ResultSetMetaData_isReadOnly_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ResultSetMetaData_method_isReadOnly_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isReadOnly", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_h_isReadOnly", // alternative name of method
  -1, // altlabelHashCode
  ResultSetMetaData_methods_isReadOnly_I_Z_args, // the arguments
  0, //arguments count
  ResultSetMetaData_methods_isReadOnly_I_Z_exceptions, // the declared exceptions
  ResultSetMetaData_MetainfoWrapper::ResultSetMetaData_method_isReadOnly_I_Z_dispatch, // invoke this method
  ResultSetMetaData_isReadOnly_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSetMetaData_methods_isSearchable_I_Z_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSetMetaData_methods_isSearchable_I_Z_args[] = 
{
  &ResultSetMetaData_methods_isSearchable_I_Z_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSetMetaData_methods_isSearchable_I_Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void ResultSetMetaData_isSearchable_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ResultSetMetaData_method_isSearchable_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isSearchable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_isSearchable", // alternative name of method
  -1, // altlabelHashCode
  ResultSetMetaData_methods_isSearchable_I_Z_args, // the arguments
  0, //arguments count
  ResultSetMetaData_methods_isSearchable_I_Z_exceptions, // the declared exceptions
  ResultSetMetaData_MetainfoWrapper::ResultSetMetaData_method_isSearchable_I_Z_dispatch, // invoke this method
  ResultSetMetaData_isSearchable_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSetMetaData_methods_isSigned_I_Z_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSetMetaData_methods_isSigned_I_Z_args[] = 
{
  &ResultSetMetaData_methods_isSigned_I_Z_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSetMetaData_methods_isSigned_I_Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void ResultSetMetaData_isSigned_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ResultSetMetaData_method_isSigned_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isSigned", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_isSigned", // alternative name of method
  -1, // altlabelHashCode
  ResultSetMetaData_methods_isSigned_I_Z_args, // the arguments
  0, //arguments count
  ResultSetMetaData_methods_isSigned_I_Z_exceptions, // the declared exceptions
  ResultSetMetaData_MetainfoWrapper::ResultSetMetaData_method_isSigned_I_Z_dispatch, // invoke this method
  ResultSetMetaData_isSigned_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResultSetMetaData_methods_isWritable_I_Z_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResultSetMetaData_methods_isWritable_I_Z_args[] = 
{
  &ResultSetMetaData_methods_isWritable_I_Z_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSetMetaData_methods_isWritable_I_Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void ResultSetMetaData_isWritable_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ResultSetMetaData_method_isWritable_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isWritable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_i_isWritable", // alternative name of method
  -1, // altlabelHashCode
  ResultSetMetaData_methods_isWritable_I_Z_args, // the arguments
  0, //arguments count
  ResultSetMetaData_methods_isWritable_I_Z_exceptions, // the declared exceptions
  ResultSetMetaData_MetainfoWrapper::ResultSetMetaData_method_isWritable_I_Z_dispatch, // invoke this method
  ResultSetMetaData_isWritable_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ResultSetMetaData_methods[] = 
{
  &ResultSetMetaData_method_GetClass__L_acdk_lang_RClass_,
  &ResultSetMetaData_method_getCatalogName_I_LRString_,
  &ResultSetMetaData_method_getColumnClassName_I_LRString_,
  &ResultSetMetaData_method_getColumnCount__I,
  &ResultSetMetaData_method_getColumnDisplaySize_I_I,
  &ResultSetMetaData_method_getColumnLabel_I_LRString_,
  &ResultSetMetaData_method_getColumnName_I_LRString_,
  &ResultSetMetaData_method_getColumnType_I_I,
  &ResultSetMetaData_method_getColumnTypeName_I_LRString_,
  &ResultSetMetaData_method_getPrecision_I_I,
  &ResultSetMetaData_method_getScale_I_I,
  &ResultSetMetaData_method_getSchemaName_I_LRString_,
  &ResultSetMetaData_method_getTableName_I_LRString_,
  &ResultSetMetaData_method_isAutoIncrement_I_Z,
  &ResultSetMetaData_method_isCaseSensitive_I_Z,
  &ResultSetMetaData_method_isCurrency_I_Z,
  &ResultSetMetaData_method_isDefinitelyWritable_I_Z,
  &ResultSetMetaData_method_isNullable_I_I,
  &ResultSetMetaData_method_isReadOnly_I_Z,
  &ResultSetMetaData_method_isSearchable_I_Z,
  &ResultSetMetaData_method_isSigned_I_Z,
  &ResultSetMetaData_method_isWritable_I_Z,
  0
};


struct ResultSetMetaData_MetaInfoInitializer
{  ResultSetMetaData_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ResultSetMetaData::clazzInfo();
    ci->fields =  _ResultSetMetaData_fields;
    ci->methods =  _ResultSetMetaData_methods;
    ci->_scopeParent = acdk_sql_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ResultSetMetaData_MetaInfoInitializer ResultSetMetaData_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace sql


namespace acdk { 
namespace sql { 

using namespace acdk::io;

//static
::acdk::lang::RObject
SQLException_create_array(int length)
{
  return new ObjectArrayImpl<RSQLException>(length);
}

//static
::acdk::lang::RObject
SQLException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SQLException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SQLException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SQLException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SQLException_method_SQLException__LRSQLException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SQLException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SQLException_method_SQLException_INLRString__LRSQLException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SQLException((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SQLException_method_SQLException_INLRString_INLRString__LRSQLException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SQLException((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SQLException_method_SQLException_INLRString_INLRString_I_LRSQLException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SQLException((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SQLException_method_getErrorCode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SQLException* This = dmi_cast<SQLException>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SQLException::getErrorCode();
    else
      ret = This->getErrorCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SQLException_method_getNextException__LRSQLException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SQLException* This = dmi_cast<SQLException>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SQLException::getNextException();
    else
        ret = (::acdk::lang::RObject)This->getNextException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SQLException_method_getSQLState__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SQLException* This = dmi_cast<SQLException>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SQLException::getSQLState();
    else
        ret = (::acdk::lang::RObject)This->getSQLState();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SQLException_method_setNextException_INLRSQLException__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SQLException* This = dmi_cast<SQLException>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SQLException::setNextException((RSQLException)args[0].getObjectVar());
    else
        This->setNextException((RSQLException)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SQLException_fields__next_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SQLException* This = dmi_cast<SQLException>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_next, flags);
    else
      This->_next = (RSQLException)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SQLException_fields__sqlState_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SQLException* This = dmi_cast<SQLException>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_sqlState, flags);
    else
      This->_sqlState = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SQLException_fields__vendorCode_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SQLException* This = dmi_cast<SQLException>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_vendorCode, flags);
    else
      This->_vendorCode = var.getIntVar();
    return fieldinf;
  }
};


void ThrowException_SQLException(IN(::acdk::lang::RThrowable) ex)
{
  throw RSQLException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo SQLException_fields__next = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_next", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSQLException::clazzInfo(),
  SQLException_MetainfoWrapper::SQLException_fields__next_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SQLException_fields__sqlState = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_sqlState", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  SQLException_MetainfoWrapper::SQLException_fields__sqlState_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SQLException_fields__vendorCode = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_vendorCode", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  SQLException_MetainfoWrapper::SQLException_fields__vendorCode_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _SQLException_fields[] = 
{
  &SQLException_fields__next,
  &SQLException_fields__sqlState,
  &SQLException_fields__vendorCode,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SQLException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SQLException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SQLException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_8_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SQLException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SQLException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SQLException_MetainfoWrapper::SQLException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SQLException_methods_SQLException__LRSQLException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SQLException_methods_SQLException__LRSQLException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SQLException_method_SQLException__LRSQLException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SQLException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SQLException::clazzInfo(), // return type
  "_0_SQLException", // alternative name of method
  -1, // altlabelHashCode
  SQLException_methods_SQLException__LRSQLException__args, // the arguments
  0, //arguments count
  SQLException_methods_SQLException__LRSQLException__exceptions, // the declared exceptions
  SQLException_MetainfoWrapper::SQLException_method_SQLException__LRSQLException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SQLException_methods_SQLException_INLRString__LRSQLException__arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SQLException_methods_SQLException_INLRString__LRSQLException__args[] = 
{
  &SQLException_methods_SQLException_INLRString__LRSQLException__arg_message,
  0
};

::acdk::lang::dmi::ClazzInfo* SQLException_methods_SQLException_INLRString__LRSQLException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SQLException_method_SQLException_INLRString__LRSQLException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SQLException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SQLException::clazzInfo(), // return type
  "_1_SQLException", // alternative name of method
  -1, // altlabelHashCode
  SQLException_methods_SQLException_INLRString__LRSQLException__args, // the arguments
  0, //arguments count
  SQLException_methods_SQLException_INLRString__LRSQLException__exceptions, // the declared exceptions
  SQLException_MetainfoWrapper::SQLException_method_SQLException_INLRString__LRSQLException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SQLException_methods_SQLException_INLRString_INLRString__LRSQLException__arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SQLException_methods_SQLException_INLRString_INLRString__LRSQLException__arg_sqlState = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sqlState", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SQLException_methods_SQLException_INLRString_INLRString__LRSQLException__args[] = 
{
  &SQLException_methods_SQLException_INLRString_INLRString__LRSQLException__arg_message,
  &SQLException_methods_SQLException_INLRString_INLRString__LRSQLException__arg_sqlState,
  0
};

::acdk::lang::dmi::ClazzInfo* SQLException_methods_SQLException_INLRString_INLRString__LRSQLException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SQLException_method_SQLException_INLRString_INLRString__LRSQLException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SQLException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SQLException::clazzInfo(), // return type
  "_2_SQLException", // alternative name of method
  -1, // altlabelHashCode
  SQLException_methods_SQLException_INLRString_INLRString__LRSQLException__args, // the arguments
  0, //arguments count
  SQLException_methods_SQLException_INLRString_INLRString__LRSQLException__exceptions, // the declared exceptions
  SQLException_MetainfoWrapper::SQLException_method_SQLException_INLRString_INLRString__LRSQLException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SQLException_methods_SQLException_INLRString_INLRString_I_LRSQLException__arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SQLException_methods_SQLException_INLRString_INLRString_I_LRSQLException__arg_sqlState = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sqlState", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SQLException_methods_SQLException_INLRString_INLRString_I_LRSQLException__arg_vendorCode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "vendorCode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SQLException_methods_SQLException_INLRString_INLRString_I_LRSQLException__args[] = 
{
  &SQLException_methods_SQLException_INLRString_INLRString_I_LRSQLException__arg_message,
  &SQLException_methods_SQLException_INLRString_INLRString_I_LRSQLException__arg_sqlState,
  &SQLException_methods_SQLException_INLRString_INLRString_I_LRSQLException__arg_vendorCode,
  0
};

::acdk::lang::dmi::ClazzInfo* SQLException_methods_SQLException_INLRString_INLRString_I_LRSQLException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SQLException_method_SQLException_INLRString_INLRString_I_LRSQLException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SQLException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SQLException::clazzInfo(), // return type
  "_3_SQLException", // alternative name of method
  -1, // altlabelHashCode
  SQLException_methods_SQLException_INLRString_INLRString_I_LRSQLException__args, // the arguments
  0, //arguments count
  SQLException_methods_SQLException_INLRString_INLRString_I_LRSQLException__exceptions, // the declared exceptions
  SQLException_MetainfoWrapper::SQLException_method_SQLException_INLRString_INLRString_I_LRSQLException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SQLException_methods_getErrorCode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SQLException_methods_getErrorCode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SQLException_method_getErrorCode__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getErrorCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_getErrorCode", // alternative name of method
  -1, // altlabelHashCode
  SQLException_methods_getErrorCode__I_args, // the arguments
  0, //arguments count
  SQLException_methods_getErrorCode__I_exceptions, // the declared exceptions
  SQLException_MetainfoWrapper::SQLException_method_getErrorCode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SQLException_methods_getNextException__LRSQLException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SQLException_methods_getNextException__LRSQLException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SQLException_method_getNextException__LRSQLException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNextException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSQLException::clazzInfo(), // return type
  "_6_getNextException", // alternative name of method
  -1, // altlabelHashCode
  SQLException_methods_getNextException__LRSQLException__args, // the arguments
  0, //arguments count
  SQLException_methods_getNextException__LRSQLException__exceptions, // the declared exceptions
  SQLException_MetainfoWrapper::SQLException_method_getNextException__LRSQLException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SQLException_methods_getSQLState__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SQLException_methods_getSQLState__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SQLException_method_getSQLState__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSQLState", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_4_getSQLState", // alternative name of method
  -1, // altlabelHashCode
  SQLException_methods_getSQLState__LRString__args, // the arguments
  0, //arguments count
  SQLException_methods_getSQLState__LRString__exceptions, // the declared exceptions
  SQLException_MetainfoWrapper::SQLException_method_getSQLState__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SQLException_methods_setNextException_INLRSQLException__V_arg_e = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "e", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSQLException::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SQLException_methods_setNextException_INLRSQLException__V_args[] = 
{
  &SQLException_methods_setNextException_INLRSQLException__V_arg_e,
  0
};

::acdk::lang::dmi::ClazzInfo* SQLException_methods_setNextException_INLRSQLException__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SQLException_method_setNextException_INLRSQLException__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setNextException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_setNextException", // alternative name of method
  -1, // altlabelHashCode
  SQLException_methods_setNextException_INLRSQLException__V_args, // the arguments
  0, //arguments count
  SQLException_methods_setNextException_INLRSQLException__V_exceptions, // the declared exceptions
  SQLException_MetainfoWrapper::SQLException_method_setNextException_INLRSQLException__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SQLException_methods[] = 
{
  &SQLException_method_GetClass__L_acdk_lang_RClass_,
  &SQLException_method_SQLException__LRSQLException_,
  &SQLException_method_SQLException_INLRString__LRSQLException_,
  &SQLException_method_SQLException_INLRString_INLRString__LRSQLException_,
  &SQLException_method_SQLException_INLRString_INLRString_I_LRSQLException_,
  &SQLException_method_getErrorCode__I,
  &SQLException_method_getNextException__LRSQLException_,
  &SQLException_method_getSQLState__LRString_,
  &SQLException_method_setNextException_INLRSQLException__V,
  0
};


struct SQLException_MetaInfoInitializer
{  SQLException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SQLException::clazzInfo();
    ci->fields =  _SQLException_fields;
    ci->methods =  _SQLException_methods;
    ci->_scopeParent = acdk_sql_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SQLException_MetaInfoInitializer SQLException_MetaInfoInitializer_staticinstance__;


struct SQLException_clazzInfo_ClazzAttributesResInitializer1
{
  SQLException_clazzInfo_ClazzAttributesResInitializer1()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)SQLException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_SQLException));
  }
};

SQLException_clazzInfo_ClazzAttributesResInitializer1 SQLException_clazzInfo_ClazzAttributesResInitializer1_instance;



} // namespace acdk
} // namespace sql


namespace acdk { 
namespace sql { 

using namespace acdk::lang;
using namespace acdk::io;

//static
::acdk::lang::RObject
SQLWarning_create_array(int length)
{
  return new ObjectArrayImpl<RSQLWarning>(length);
}

//static
::acdk::lang::RObject
SQLWarning_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SQLWarning_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SQLWarning_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SQLWarning::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SQLWarning_method_SQLWarning__LRSQLWarning__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SQLWarning();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SQLWarning_method_SQLWarning_INLRString__LRSQLWarning__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SQLWarning((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SQLWarning_method_SQLWarning_INLRString_INLRString__LRSQLWarning__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SQLWarning((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SQLWarning_method_SQLWarning_INLRString_INLRString_I_LRSQLWarning__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SQLWarning((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SQLWarning_method_getNextWarning__LRSQLWarning__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SQLWarning* This = dmi_cast<SQLWarning>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SQLWarning::getNextWarning();
    else
        ret = (::acdk::lang::RObject)This->getNextWarning();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SQLWarning_method_setNextWarning_INLRSQLWarning__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SQLWarning* This = dmi_cast<SQLWarning>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SQLWarning::setNextWarning((RSQLWarning)args[0].getObjectVar());
    else
        This->setNextWarning((RSQLWarning)args[0].getObjectVar());
    return methinf;
  }
};


void ThrowException_SQLWarning(IN(::acdk::lang::RThrowable) ex)
{
  throw RSQLWarning(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _SQLWarning_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SQLWarning_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SQLWarning_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SQLWarning_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SQLWarning_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SQLWarning_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SQLWarning_MetainfoWrapper::SQLWarning_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SQLWarning_methods_SQLWarning__LRSQLWarning__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SQLWarning_methods_SQLWarning__LRSQLWarning__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SQLWarning_method_SQLWarning__LRSQLWarning_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SQLWarning", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SQLWarning::clazzInfo(), // return type
  "_0_SQLWarning", // alternative name of method
  -1, // altlabelHashCode
  SQLWarning_methods_SQLWarning__LRSQLWarning__args, // the arguments
  0, //arguments count
  SQLWarning_methods_SQLWarning__LRSQLWarning__exceptions, // the declared exceptions
  SQLWarning_MetainfoWrapper::SQLWarning_method_SQLWarning__LRSQLWarning__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SQLWarning_methods_SQLWarning_INLRString__LRSQLWarning__arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SQLWarning_methods_SQLWarning_INLRString__LRSQLWarning__args[] = 
{
  &SQLWarning_methods_SQLWarning_INLRString__LRSQLWarning__arg_message,
  0
};

::acdk::lang::dmi::ClazzInfo* SQLWarning_methods_SQLWarning_INLRString__LRSQLWarning__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SQLWarning_method_SQLWarning_INLRString__LRSQLWarning_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SQLWarning", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SQLWarning::clazzInfo(), // return type
  "_1_SQLWarning", // alternative name of method
  -1, // altlabelHashCode
  SQLWarning_methods_SQLWarning_INLRString__LRSQLWarning__args, // the arguments
  0, //arguments count
  SQLWarning_methods_SQLWarning_INLRString__LRSQLWarning__exceptions, // the declared exceptions
  SQLWarning_MetainfoWrapper::SQLWarning_method_SQLWarning_INLRString__LRSQLWarning__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SQLWarning_methods_SQLWarning_INLRString_INLRString__LRSQLWarning__arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SQLWarning_methods_SQLWarning_INLRString_INLRString__LRSQLWarning__arg_sqlState = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sqlState", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SQLWarning_methods_SQLWarning_INLRString_INLRString__LRSQLWarning__args[] = 
{
  &SQLWarning_methods_SQLWarning_INLRString_INLRString__LRSQLWarning__arg_message,
  &SQLWarning_methods_SQLWarning_INLRString_INLRString__LRSQLWarning__arg_sqlState,
  0
};

::acdk::lang::dmi::ClazzInfo* SQLWarning_methods_SQLWarning_INLRString_INLRString__LRSQLWarning__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SQLWarning_method_SQLWarning_INLRString_INLRString__LRSQLWarning_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SQLWarning", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SQLWarning::clazzInfo(), // return type
  "_2_SQLWarning", // alternative name of method
  -1, // altlabelHashCode
  SQLWarning_methods_SQLWarning_INLRString_INLRString__LRSQLWarning__args, // the arguments
  0, //arguments count
  SQLWarning_methods_SQLWarning_INLRString_INLRString__LRSQLWarning__exceptions, // the declared exceptions
  SQLWarning_MetainfoWrapper::SQLWarning_method_SQLWarning_INLRString_INLRString__LRSQLWarning__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SQLWarning_methods_SQLWarning_INLRString_INLRString_I_LRSQLWarning__arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SQLWarning_methods_SQLWarning_INLRString_INLRString_I_LRSQLWarning__arg_sqlState = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sqlState", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SQLWarning_methods_SQLWarning_INLRString_INLRString_I_LRSQLWarning__arg_vendorCode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "vendorCode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SQLWarning_methods_SQLWarning_INLRString_INLRString_I_LRSQLWarning__args[] = 
{
  &SQLWarning_methods_SQLWarning_INLRString_INLRString_I_LRSQLWarning__arg_message,
  &SQLWarning_methods_SQLWarning_INLRString_INLRString_I_LRSQLWarning__arg_sqlState,
  &SQLWarning_methods_SQLWarning_INLRString_INLRString_I_LRSQLWarning__arg_vendorCode,
  0
};

::acdk::lang::dmi::ClazzInfo* SQLWarning_methods_SQLWarning_INLRString_INLRString_I_LRSQLWarning__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SQLWarning_method_SQLWarning_INLRString_INLRString_I_LRSQLWarning_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SQLWarning", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SQLWarning::clazzInfo(), // return type
  "_3_SQLWarning", // alternative name of method
  -1, // altlabelHashCode
  SQLWarning_methods_SQLWarning_INLRString_INLRString_I_LRSQLWarning__args, // the arguments
  0, //arguments count
  SQLWarning_methods_SQLWarning_INLRString_INLRString_I_LRSQLWarning__exceptions, // the declared exceptions
  SQLWarning_MetainfoWrapper::SQLWarning_method_SQLWarning_INLRString_INLRString_I_LRSQLWarning__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SQLWarning_methods_getNextWarning__LRSQLWarning__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SQLWarning_methods_getNextWarning__LRSQLWarning__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SQLWarning_method_getNextWarning__LRSQLWarning_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNextWarning", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSQLWarning::clazzInfo(), // return type
  "_4_getNextWarning", // alternative name of method
  -1, // altlabelHashCode
  SQLWarning_methods_getNextWarning__LRSQLWarning__args, // the arguments
  0, //arguments count
  SQLWarning_methods_getNextWarning__LRSQLWarning__exceptions, // the declared exceptions
  SQLWarning_MetainfoWrapper::SQLWarning_method_getNextWarning__LRSQLWarning__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SQLWarning_methods_setNextWarning_INLRSQLWarning__V_arg_e = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "e", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSQLWarning::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SQLWarning_methods_setNextWarning_INLRSQLWarning__V_args[] = 
{
  &SQLWarning_methods_setNextWarning_INLRSQLWarning__V_arg_e,
  0
};

::acdk::lang::dmi::ClazzInfo* SQLWarning_methods_setNextWarning_INLRSQLWarning__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SQLWarning_method_setNextWarning_INLRSQLWarning__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setNextWarning", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_setNextWarning", // alternative name of method
  -1, // altlabelHashCode
  SQLWarning_methods_setNextWarning_INLRSQLWarning__V_args, // the arguments
  0, //arguments count
  SQLWarning_methods_setNextWarning_INLRSQLWarning__V_exceptions, // the declared exceptions
  SQLWarning_MetainfoWrapper::SQLWarning_method_setNextWarning_INLRSQLWarning__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SQLWarning_methods[] = 
{
  &SQLWarning_method_GetClass__L_acdk_lang_RClass_,
  &SQLWarning_method_SQLWarning__LRSQLWarning_,
  &SQLWarning_method_SQLWarning_INLRString__LRSQLWarning_,
  &SQLWarning_method_SQLWarning_INLRString_INLRString__LRSQLWarning_,
  &SQLWarning_method_SQLWarning_INLRString_INLRString_I_LRSQLWarning_,
  &SQLWarning_method_getNextWarning__LRSQLWarning_,
  &SQLWarning_method_setNextWarning_INLRSQLWarning__V,
  0
};


struct SQLWarning_MetaInfoInitializer
{  SQLWarning_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SQLWarning::clazzInfo();
    ci->fields =  _SQLWarning_fields;
    ci->methods =  _SQLWarning_methods;
    ci->_scopeParent = acdk_sql_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SQLWarning_MetaInfoInitializer SQLWarning_MetaInfoInitializer_staticinstance__;


struct SQLWarning_clazzInfo_ClazzAttributesResInitializer2
{
  SQLWarning_clazzInfo_ClazzAttributesResInitializer2()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)SQLWarning::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_SQLWarning));
  }
};

SQLWarning_clazzInfo_ClazzAttributesResInitializer2 SQLWarning_clazzInfo_ClazzAttributesResInitializer2_instance;



} // namespace acdk
} // namespace sql

