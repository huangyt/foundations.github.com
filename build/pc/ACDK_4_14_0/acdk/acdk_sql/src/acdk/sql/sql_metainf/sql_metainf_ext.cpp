// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../sql.h"
#include "../Array.h"
#include "../Blob.h"
#include "../CallableStatement.h"
#include "../Config.h"
#include "../Connection.h"
#include "../DatabaseMetaData.h"
#include "../Driver.h"
#include "../DriverManager.h"
#include "../DriverPropertyInfo.h"
#include "../PreparedStatement.h"
#include "../ResultSet.h"
#include "../ResultSetMetaData.h"
#include "../sql.h"
#include "../SQLConfig.h"
#include "../SQLException.h"
#include "../SQLWarning.h"
#include "../sql_all.h"
#include "../Statement.h"
#include "../Time.h"
#include "../Timestamp.h"
#include "../Types.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>


struct acdk::lang::dmi::UnitInfo acdk_sql_unitInfo = {
  ::acdk::lang::dmi::MiUnitInfo, // flags
  0, //attributeRes
  "sql", // name of unit
  -1, // hashCode
  "acdk", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  0 // _firstChild first ClazzInfo of this unit
};

static ::acdk::lang::dmi::RegisterUnitInfo _register_acdk_sql_unitInfo(&acdk_sql_unitInfo);


namespace acdk { 
namespace sql { 


//static
::acdk::lang::RObject
Array_create_array(int length)
{
  return new ObjectArrayImpl<RArray>(length);
}

//static
::acdk::lang::RObject
Array_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Array_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Array_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Array::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Array_method_getArray__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Array* This = dmi_cast<Array>(This_);
    ret = (::acdk::lang::RObject)This->getArray();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Array_method_getArray_INLacdk_util_RMap__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Array* This = dmi_cast<Array>(This_);
    ret = (::acdk::lang::RObject)This->getArray((acdk::util::RMap)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Array_method_getArray_II_LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Array* This = dmi_cast<Array>(This_);
    ret = (::acdk::lang::RObject)This->getArray(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Array_method_getArray_IIINLacdk_util_RMap__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Array* This = dmi_cast<Array>(This_);
    ret = (::acdk::lang::RObject)This->getArray(args[0].getIntVar(), args[1].getIntVar(), (acdk::util::RMap)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Array_method_getBaseType__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Array* This = dmi_cast<Array>(This_);
  ret = This->getBaseType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Array_method_getBaseTypeName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Array* This = dmi_cast<Array>(This_);
    ret = (::acdk::lang::RObject)This->getBaseTypeName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Array_method_getResultSet__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Array* This = dmi_cast<Array>(This_);
    ret = (::acdk::lang::RObject)This->getResultSet();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Array_method_getResultSet_INLacdk_util_RMap__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Array* This = dmi_cast<Array>(This_);
    ret = (::acdk::lang::RObject)This->getResultSet((acdk::util::RMap)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Array_method_getResultSet_II_LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Array* This = dmi_cast<Array>(This_);
    ret = (::acdk::lang::RObject)This->getResultSet(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Array_method_getResultSet_IIINLacdk_util_RMap__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Array* This = dmi_cast<Array>(This_);
    ret = (::acdk::lang::RObject)This->getResultSet(args[0].getIntVar(), args[1].getIntVar(), (acdk::util::RMap)args[2].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Array_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Array_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Array_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Array_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_a_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Array_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Array_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Array_MetainfoWrapper::Array_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Array_methods_getArray__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Array_methods_getArray__LRObject__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void Array_getArray__LRObject__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Array_method_getArray__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_2_getArray", // alternative name of method
  -1, // altlabelHashCode
  Array_methods_getArray__LRObject__args, // the arguments
  0, //arguments count
  Array_methods_getArray__LRObject__exceptions, // the declared exceptions
  Array_MetainfoWrapper::Array_method_getArray__LRObject__dispatch, // invoke this method
  Array_getArray__LRObject__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Array_methods_getArray_INLacdk_util_RMap__LRObject__arg_map = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "map", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Array_methods_getArray_INLacdk_util_RMap__LRObject__args[] = 
{
  &Array_methods_getArray_INLacdk_util_RMap__LRObject__arg_map,
  0
};

::acdk::lang::dmi::ClazzInfo* Array_methods_getArray_INLacdk_util_RMap__LRObject__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void Array_getArray_INLacdk_util_RMap__LRObject__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Array_method_getArray_INLacdk_util_RMap__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_3_getArray", // alternative name of method
  -1, // altlabelHashCode
  Array_methods_getArray_INLacdk_util_RMap__LRObject__args, // the arguments
  0, //arguments count
  Array_methods_getArray_INLacdk_util_RMap__LRObject__exceptions, // the declared exceptions
  Array_MetainfoWrapper::Array_method_getArray_INLacdk_util_RMap__LRObject__dispatch, // invoke this method
  Array_getArray_INLacdk_util_RMap__LRObject__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Array_methods_getArray_II_LRObject__arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Array_methods_getArray_II_LRObject__arg_count = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "count", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Array_methods_getArray_II_LRObject__args[] = 
{
  &Array_methods_getArray_II_LRObject__arg_offset,
  &Array_methods_getArray_II_LRObject__arg_count,
  0
};

::acdk::lang::dmi::ClazzInfo* Array_methods_getArray_II_LRObject__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void Array_getArray_II_LRObject__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Array_method_getArray_II_LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_4_getArray", // alternative name of method
  -1, // altlabelHashCode
  Array_methods_getArray_II_LRObject__args, // the arguments
  0, //arguments count
  Array_methods_getArray_II_LRObject__exceptions, // the declared exceptions
  Array_MetainfoWrapper::Array_method_getArray_II_LRObject__dispatch, // invoke this method
  Array_getArray_II_LRObject__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Array_methods_getArray_IIINLacdk_util_RMap__LRObject__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Array_methods_getArray_IIINLacdk_util_RMap__LRObject__arg_count = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "count", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Array_methods_getArray_IIINLacdk_util_RMap__LRObject__arg_map = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "map", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Array_methods_getArray_IIINLacdk_util_RMap__LRObject__args[] = 
{
  &Array_methods_getArray_IIINLacdk_util_RMap__LRObject__arg_index,
  &Array_methods_getArray_IIINLacdk_util_RMap__LRObject__arg_count,
  &Array_methods_getArray_IIINLacdk_util_RMap__LRObject__arg_map,
  0
};

::acdk::lang::dmi::ClazzInfo* Array_methods_getArray_IIINLacdk_util_RMap__LRObject__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void Array_getArray_IIINLacdk_util_RMap__LRObject__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Array_method_getArray_IIINLacdk_util_RMap__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_5_getArray", // alternative name of method
  -1, // altlabelHashCode
  Array_methods_getArray_IIINLacdk_util_RMap__LRObject__args, // the arguments
  0, //arguments count
  Array_methods_getArray_IIINLacdk_util_RMap__LRObject__exceptions, // the declared exceptions
  Array_MetainfoWrapper::Array_method_getArray_IIINLacdk_util_RMap__LRObject__dispatch, // invoke this method
  Array_getArray_IIINLacdk_util_RMap__LRObject__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Array_methods_getBaseType__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Array_methods_getBaseType__I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void Array_getBaseType__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Array_method_getBaseType__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBaseType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1_getBaseType", // alternative name of method
  -1, // altlabelHashCode
  Array_methods_getBaseType__I_args, // the arguments
  0, //arguments count
  Array_methods_getBaseType__I_exceptions, // the declared exceptions
  Array_MetainfoWrapper::Array_method_getBaseType__I_dispatch, // invoke this method
  Array_getBaseType__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Array_methods_getBaseTypeName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Array_methods_getBaseTypeName__LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void Array_getBaseTypeName__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Array_method_getBaseTypeName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBaseTypeName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_0_getBaseTypeName", // alternative name of method
  -1, // altlabelHashCode
  Array_methods_getBaseTypeName__LRString__args, // the arguments
  0, //arguments count
  Array_methods_getBaseTypeName__LRString__exceptions, // the declared exceptions
  Array_MetainfoWrapper::Array_method_getBaseTypeName__LRString__dispatch, // invoke this method
  Array_getBaseTypeName__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Array_methods_getResultSet__LRResultSet__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Array_methods_getResultSet__LRResultSet__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void Array_getResultSet__LRResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Array_method_getResultSet__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getResultSet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_6_getResultSet", // alternative name of method
  -1, // altlabelHashCode
  Array_methods_getResultSet__LRResultSet__args, // the arguments
  0, //arguments count
  Array_methods_getResultSet__LRResultSet__exceptions, // the declared exceptions
  Array_MetainfoWrapper::Array_method_getResultSet__LRResultSet__dispatch, // invoke this method
  Array_getResultSet__LRResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Array_methods_getResultSet_INLacdk_util_RMap__LRResultSet__arg_map = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "map", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Array_methods_getResultSet_INLacdk_util_RMap__LRResultSet__args[] = 
{
  &Array_methods_getResultSet_INLacdk_util_RMap__LRResultSet__arg_map,
  0
};

::acdk::lang::dmi::ClazzInfo* Array_methods_getResultSet_INLacdk_util_RMap__LRResultSet__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void Array_getResultSet_INLacdk_util_RMap__LRResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Array_method_getResultSet_INLacdk_util_RMap__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getResultSet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_7_getResultSet", // alternative name of method
  -1, // altlabelHashCode
  Array_methods_getResultSet_INLacdk_util_RMap__LRResultSet__args, // the arguments
  0, //arguments count
  Array_methods_getResultSet_INLacdk_util_RMap__LRResultSet__exceptions, // the declared exceptions
  Array_MetainfoWrapper::Array_method_getResultSet_INLacdk_util_RMap__LRResultSet__dispatch, // invoke this method
  Array_getResultSet_INLacdk_util_RMap__LRResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Array_methods_getResultSet_II_LRResultSet__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Array_methods_getResultSet_II_LRResultSet__arg_count = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "count", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Array_methods_getResultSet_II_LRResultSet__args[] = 
{
  &Array_methods_getResultSet_II_LRResultSet__arg_index,
  &Array_methods_getResultSet_II_LRResultSet__arg_count,
  0
};

::acdk::lang::dmi::ClazzInfo* Array_methods_getResultSet_II_LRResultSet__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void Array_getResultSet_II_LRResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Array_method_getResultSet_II_LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getResultSet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_8_getResultSet", // alternative name of method
  -1, // altlabelHashCode
  Array_methods_getResultSet_II_LRResultSet__args, // the arguments
  0, //arguments count
  Array_methods_getResultSet_II_LRResultSet__exceptions, // the declared exceptions
  Array_MetainfoWrapper::Array_method_getResultSet_II_LRResultSet__dispatch, // invoke this method
  Array_getResultSet_II_LRResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Array_methods_getResultSet_IIINLacdk_util_RMap__LRResultSet__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Array_methods_getResultSet_IIINLacdk_util_RMap__LRResultSet__arg_count = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "count", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Array_methods_getResultSet_IIINLacdk_util_RMap__LRResultSet__arg_map = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "map", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Array_methods_getResultSet_IIINLacdk_util_RMap__LRResultSet__args[] = 
{
  &Array_methods_getResultSet_IIINLacdk_util_RMap__LRResultSet__arg_index,
  &Array_methods_getResultSet_IIINLacdk_util_RMap__LRResultSet__arg_count,
  &Array_methods_getResultSet_IIINLacdk_util_RMap__LRResultSet__arg_map,
  0
};

::acdk::lang::dmi::ClazzInfo* Array_methods_getResultSet_IIINLacdk_util_RMap__LRResultSet__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void Array_getResultSet_IIINLacdk_util_RMap__LRResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Array_method_getResultSet_IIINLacdk_util_RMap__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getResultSet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_9_getResultSet", // alternative name of method
  -1, // altlabelHashCode
  Array_methods_getResultSet_IIINLacdk_util_RMap__LRResultSet__args, // the arguments
  0, //arguments count
  Array_methods_getResultSet_IIINLacdk_util_RMap__LRResultSet__exceptions, // the declared exceptions
  Array_MetainfoWrapper::Array_method_getResultSet_IIINLacdk_util_RMap__LRResultSet__dispatch, // invoke this method
  Array_getResultSet_IIINLacdk_util_RMap__LRResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Array_methods[] = 
{
  &Array_method_GetClass__L_acdk_lang_RClass_,
  &Array_method_getArray__LRObject_,
  &Array_method_getArray_INLacdk_util_RMap__LRObject_,
  &Array_method_getArray_II_LRObject_,
  &Array_method_getArray_IIINLacdk_util_RMap__LRObject_,
  &Array_method_getBaseType__I,
  &Array_method_getBaseTypeName__LRString_,
  &Array_method_getResultSet__LRResultSet_,
  &Array_method_getResultSet_INLacdk_util_RMap__LRResultSet_,
  &Array_method_getResultSet_II_LRResultSet_,
  &Array_method_getResultSet_IIINLacdk_util_RMap__LRResultSet_,
  0
};


struct Array_MetaInfoInitializer
{  Array_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Array::clazzInfo();
    ci->fields =  _Array_fields;
    ci->methods =  _Array_methods;
    ci->_scopeParent = acdk_sql_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Array_MetaInfoInitializer Array_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace sql


namespace acdk { 
namespace sql { 


//static
::acdk::lang::RObject
Blob_create_array(int length)
{
  return new ObjectArrayImpl<RBlob>(length);
}

//static
::acdk::lang::RObject
Blob_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Blob_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Blob_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Blob::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Blob_method_getReadByteBuffer__LRReadByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Blob* This = dmi_cast<Blob>(This_);
    ret = (::acdk::lang::RObject)This->getReadByteBuffer();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Blob_method_getReader__Lacdk_io_RReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Blob* This = dmi_cast<Blob>(This_);
    ret = (::acdk::lang::RObject)This->getReader();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Blob_method_getWriter__Lacdk_io_RWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Blob* This = dmi_cast<Blob>(This_);
    ret = (::acdk::lang::RObject)This->getWriter();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Blob_method_length__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Blob* This = dmi_cast<Blob>(This_);
  ret = This->length();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Blob_method_setByteBuffer_INLRReadByteBuffer__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Blob* This = dmi_cast<Blob>(This_);
    This->setByteBuffer((RReadByteBuffer)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Blob_method_truncate_J_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Blob* This = dmi_cast<Blob>(This_);
    This->truncate(args[0].getLongVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Blob_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Blob_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Blob_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Blob_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Blob_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Blob_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Blob_MetainfoWrapper::Blob_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Blob_methods_getReadByteBuffer__LRReadByteBuffer__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Blob_methods_getReadByteBuffer__LRReadByteBuffer__exceptions[] =
{
  RException::clazzInfo(), 
  0
};

void Blob_getReadByteBuffer__LRReadByteBuffer__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, Exception) == true)
    THROW_INSTANCE( RException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Blob_method_getReadByteBuffer__LRReadByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getReadByteBuffer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadByteBuffer::clazzInfo(), // return type
  "_4_getReadByteBuffer", // alternative name of method
  -1, // altlabelHashCode
  Blob_methods_getReadByteBuffer__LRReadByteBuffer__args, // the arguments
  0, //arguments count
  Blob_methods_getReadByteBuffer__LRReadByteBuffer__exceptions, // the declared exceptions
  Blob_MetainfoWrapper::Blob_method_getReadByteBuffer__LRReadByteBuffer__dispatch, // invoke this method
  Blob_getReadByteBuffer__LRReadByteBuffer__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Blob_methods_getReader__Lacdk_io_RReader__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Blob_methods_getReader__Lacdk_io_RReader__exceptions[] =
{
  RException::clazzInfo(), 
  0
};

void Blob_getReader__Lacdk_io_RReader__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, Exception) == true)
    THROW_INSTANCE( RException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Blob_method_getReader__Lacdk_io_RReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo(), // return type
  "_2_getReader", // alternative name of method
  -1, // altlabelHashCode
  Blob_methods_getReader__Lacdk_io_RReader__args, // the arguments
  0, //arguments count
  Blob_methods_getReader__Lacdk_io_RReader__exceptions, // the declared exceptions
  Blob_MetainfoWrapper::Blob_method_getReader__Lacdk_io_RReader__dispatch, // invoke this method
  Blob_getReader__Lacdk_io_RReader__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Blob_methods_getWriter__Lacdk_io_RWriter__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Blob_methods_getWriter__Lacdk_io_RWriter__exceptions[] =
{
  RException::clazzInfo(), 
  0
};

void Blob_getWriter__Lacdk_io_RWriter__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, Exception) == true)
    THROW_INSTANCE( RException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Blob_method_getWriter__Lacdk_io_RWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RWriter::clazzInfo(), // return type
  "_3_getWriter", // alternative name of method
  -1, // altlabelHashCode
  Blob_methods_getWriter__Lacdk_io_RWriter__args, // the arguments
  0, //arguments count
  Blob_methods_getWriter__Lacdk_io_RWriter__exceptions, // the declared exceptions
  Blob_MetainfoWrapper::Blob_method_getWriter__Lacdk_io_RWriter__dispatch, // invoke this method
  Blob_getWriter__Lacdk_io_RWriter__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Blob_methods_length__J_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Blob_methods_length__J_exceptions[] =
{
  RException::clazzInfo(), 
  0
};

void Blob_length__J_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, Exception) == true)
    THROW_INSTANCE( RException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Blob_method_length__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "length", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_0_length", // alternative name of method
  -1, // altlabelHashCode
  Blob_methods_length__J_args, // the arguments
  0, //arguments count
  Blob_methods_length__J_exceptions, // the declared exceptions
  Blob_MetainfoWrapper::Blob_method_length__J_dispatch, // invoke this method
  Blob_length__J_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Blob_methods_setByteBuffer_INLRReadByteBuffer__V_arg_buffer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buffer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadByteBuffer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Blob_methods_setByteBuffer_INLRReadByteBuffer__V_args[] = 
{
  &Blob_methods_setByteBuffer_INLRReadByteBuffer__V_arg_buffer,
  0
};

::acdk::lang::dmi::ClazzInfo* Blob_methods_setByteBuffer_INLRReadByteBuffer__V_exceptions[] =
{
  RException::clazzInfo(), 
  0
};

void Blob_setByteBuffer_INLRReadByteBuffer__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, Exception) == true)
    THROW_INSTANCE( RException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Blob_method_setByteBuffer_INLRReadByteBuffer__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setByteBuffer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_setByteBuffer", // alternative name of method
  -1, // altlabelHashCode
  Blob_methods_setByteBuffer_INLRReadByteBuffer__V_args, // the arguments
  0, //arguments count
  Blob_methods_setByteBuffer_INLRReadByteBuffer__V_exceptions, // the declared exceptions
  Blob_MetainfoWrapper::Blob_method_setByteBuffer_INLRReadByteBuffer__V_dispatch, // invoke this method
  Blob_setByteBuffer_INLRReadByteBuffer__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Blob_methods_truncate_J_V_arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Blob_methods_truncate_J_V_args[] = 
{
  &Blob_methods_truncate_J_V_arg_length,
  0
};

::acdk::lang::dmi::ClazzInfo* Blob_methods_truncate_J_V_exceptions[] =
{
  RException::clazzInfo(), 
  0
};

void Blob_truncate_J_V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, Exception) == true)
    THROW_INSTANCE( RException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Blob_method_truncate_J_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "truncate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_truncate", // alternative name of method
  -1, // altlabelHashCode
  Blob_methods_truncate_J_V_args, // the arguments
  0, //arguments count
  Blob_methods_truncate_J_V_exceptions, // the declared exceptions
  Blob_MetainfoWrapper::Blob_method_truncate_J_V_dispatch, // invoke this method
  Blob_truncate_J_V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Blob_methods[] = 
{
  &Blob_method_GetClass__L_acdk_lang_RClass_,
  &Blob_method_getReadByteBuffer__LRReadByteBuffer_,
  &Blob_method_getReader__Lacdk_io_RReader_,
  &Blob_method_getWriter__Lacdk_io_RWriter_,
  &Blob_method_length__J,
  &Blob_method_setByteBuffer_INLRReadByteBuffer__V,
  &Blob_method_truncate_J_V,
  0
};


struct Blob_MetaInfoInitializer
{  Blob_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Blob::clazzInfo();
    ci->fields =  _Blob_fields;
    ci->methods =  _Blob_methods;
    ci->_scopeParent = acdk_sql_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Blob_MetaInfoInitializer Blob_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace sql


namespace acdk { 
namespace sql { 


//static
::acdk::lang::RObject
StandardMemBlob_create_array(int length)
{
  return new ObjectArrayImpl<RStandardMemBlob>(length);
}

//static
::acdk::lang::RObject
StandardMemBlob_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class StandardMemBlob_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StandardMemBlob_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)StandardMemBlob::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StandardMemBlob_method_StandardMemBlob_INLacdk_lang_RFlexByteBuffer__LRStandardMemBlob__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StandardMemBlob((acdk::lang::RFlexByteBuffer)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StandardMemBlob_method_StandardMemBlob__LRStandardMemBlob__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StandardMemBlob();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StandardMemBlob_method_getReadByteBuffer__LRReadByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StandardMemBlob* This = dmi_cast<StandardMemBlob>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StandardMemBlob::getReadByteBuffer();
    else
        ret = (::acdk::lang::RObject)This->getReadByteBuffer();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StandardMemBlob_method_getReader__Lacdk_io_RReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StandardMemBlob* This = dmi_cast<StandardMemBlob>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StandardMemBlob::getReader();
    else
        ret = (::acdk::lang::RObject)This->getReader();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StandardMemBlob_method_getWriter__Lacdk_io_RWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StandardMemBlob* This = dmi_cast<StandardMemBlob>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StandardMemBlob::getWriter();
    else
        ret = (::acdk::lang::RObject)This->getWriter();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StandardMemBlob_method_length__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StandardMemBlob* This = dmi_cast<StandardMemBlob>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StandardMemBlob::length();
    else
      ret = This->length();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StandardMemBlob_method_setByteBuffer_INLRReadByteBuffer__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StandardMemBlob* This = dmi_cast<StandardMemBlob>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StandardMemBlob::setByteBuffer((RReadByteBuffer)args[0].getObjectVar());
    else
        This->setByteBuffer((RReadByteBuffer)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StandardMemBlob_method_truncate_J_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StandardMemBlob* This = dmi_cast<StandardMemBlob>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StandardMemBlob::truncate(args[0].getLongVar());
    else
        This->truncate(args[0].getLongVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StandardMemBlob_fields__coreBuffer_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    StandardMemBlob* This = dmi_cast<StandardMemBlob>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_coreBuffer, flags);
    else
      This->_coreBuffer = (acdk::lang::RFlexByteBuffer)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo StandardMemBlob_fields__coreBuffer = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_coreBuffer", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RFlexByteBuffer::clazzInfo(),
  StandardMemBlob_MetainfoWrapper::StandardMemBlob_fields__coreBuffer_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _StandardMemBlob_fields[] = 
{
  &StandardMemBlob_fields__coreBuffer,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* StandardMemBlob_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StandardMemBlob_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StandardMemBlob_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_8_GetClass", // alternative name of method
  -1, // altlabelHashCode
  StandardMemBlob_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  StandardMemBlob_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  StandardMemBlob_MetainfoWrapper::StandardMemBlob_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StandardMemBlob_methods_StandardMemBlob_INLacdk_lang_RFlexByteBuffer__LRStandardMemBlob__arg_buffer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buffer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RFlexByteBuffer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StandardMemBlob_methods_StandardMemBlob_INLacdk_lang_RFlexByteBuffer__LRStandardMemBlob__args[] = 
{
  &StandardMemBlob_methods_StandardMemBlob_INLacdk_lang_RFlexByteBuffer__LRStandardMemBlob__arg_buffer,
  0
};

::acdk::lang::dmi::ClazzInfo* StandardMemBlob_methods_StandardMemBlob_INLacdk_lang_RFlexByteBuffer__LRStandardMemBlob__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StandardMemBlob_method_StandardMemBlob_INLacdk_lang_RFlexByteBuffer__LRStandardMemBlob_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "StandardMemBlob", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StandardMemBlob::clazzInfo(), // return type
  "_0_StandardMemBlob", // alternative name of method
  -1, // altlabelHashCode
  StandardMemBlob_methods_StandardMemBlob_INLacdk_lang_RFlexByteBuffer__LRStandardMemBlob__args, // the arguments
  0, //arguments count
  StandardMemBlob_methods_StandardMemBlob_INLacdk_lang_RFlexByteBuffer__LRStandardMemBlob__exceptions, // the declared exceptions
  StandardMemBlob_MetainfoWrapper::StandardMemBlob_method_StandardMemBlob_INLacdk_lang_RFlexByteBuffer__LRStandardMemBlob__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StandardMemBlob_methods_StandardMemBlob__LRStandardMemBlob__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StandardMemBlob_methods_StandardMemBlob__LRStandardMemBlob__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StandardMemBlob_method_StandardMemBlob__LRStandardMemBlob_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "StandardMemBlob", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StandardMemBlob::clazzInfo(), // return type
  "_1_StandardMemBlob", // alternative name of method
  -1, // altlabelHashCode
  StandardMemBlob_methods_StandardMemBlob__LRStandardMemBlob__args, // the arguments
  0, //arguments count
  StandardMemBlob_methods_StandardMemBlob__LRStandardMemBlob__exceptions, // the declared exceptions
  StandardMemBlob_MetainfoWrapper::StandardMemBlob_method_StandardMemBlob__LRStandardMemBlob__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StandardMemBlob_methods_getReadByteBuffer__LRReadByteBuffer__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StandardMemBlob_methods_getReadByteBuffer__LRReadByteBuffer__exceptions[] =
{
  RException::clazzInfo(), 
  0
};

void StandardMemBlob_getReadByteBuffer__LRReadByteBuffer__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, Exception) == true)
    THROW_INSTANCE( RException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo StandardMemBlob_method_getReadByteBuffer__LRReadByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getReadByteBuffer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadByteBuffer::clazzInfo(), // return type
  "_6_getReadByteBuffer", // alternative name of method
  -1, // altlabelHashCode
  StandardMemBlob_methods_getReadByteBuffer__LRReadByteBuffer__args, // the arguments
  0, //arguments count
  StandardMemBlob_methods_getReadByteBuffer__LRReadByteBuffer__exceptions, // the declared exceptions
  StandardMemBlob_MetainfoWrapper::StandardMemBlob_method_getReadByteBuffer__LRReadByteBuffer__dispatch, // invoke this method
  StandardMemBlob_getReadByteBuffer__LRReadByteBuffer__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StandardMemBlob_methods_getReader__Lacdk_io_RReader__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StandardMemBlob_methods_getReader__Lacdk_io_RReader__exceptions[] =
{
  RException::clazzInfo(), 
  0
};

void StandardMemBlob_getReader__Lacdk_io_RReader__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, Exception) == true)
    THROW_INSTANCE( RException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo StandardMemBlob_method_getReader__Lacdk_io_RReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo(), // return type
  "_4_getReader", // alternative name of method
  -1, // altlabelHashCode
  StandardMemBlob_methods_getReader__Lacdk_io_RReader__args, // the arguments
  0, //arguments count
  StandardMemBlob_methods_getReader__Lacdk_io_RReader__exceptions, // the declared exceptions
  StandardMemBlob_MetainfoWrapper::StandardMemBlob_method_getReader__Lacdk_io_RReader__dispatch, // invoke this method
  StandardMemBlob_getReader__Lacdk_io_RReader__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StandardMemBlob_methods_getWriter__Lacdk_io_RWriter__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StandardMemBlob_methods_getWriter__Lacdk_io_RWriter__exceptions[] =
{
  RException::clazzInfo(), 
  0
};

void StandardMemBlob_getWriter__Lacdk_io_RWriter__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, Exception) == true)
    THROW_INSTANCE( RException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo StandardMemBlob_method_getWriter__Lacdk_io_RWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RWriter::clazzInfo(), // return type
  "_5_getWriter", // alternative name of method
  -1, // altlabelHashCode
  StandardMemBlob_methods_getWriter__Lacdk_io_RWriter__args, // the arguments
  0, //arguments count
  StandardMemBlob_methods_getWriter__Lacdk_io_RWriter__exceptions, // the declared exceptions
  StandardMemBlob_MetainfoWrapper::StandardMemBlob_method_getWriter__Lacdk_io_RWriter__dispatch, // invoke this method
  StandardMemBlob_getWriter__Lacdk_io_RWriter__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StandardMemBlob_methods_length__J_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StandardMemBlob_methods_length__J_exceptions[] =
{
  RException::clazzInfo(), 
  0
};

void StandardMemBlob_length__J_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, Exception) == true)
    THROW_INSTANCE( RException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo StandardMemBlob_method_length__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "length", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_2_length", // alternative name of method
  -1, // altlabelHashCode
  StandardMemBlob_methods_length__J_args, // the arguments
  0, //arguments count
  StandardMemBlob_methods_length__J_exceptions, // the declared exceptions
  StandardMemBlob_MetainfoWrapper::StandardMemBlob_method_length__J_dispatch, // invoke this method
  StandardMemBlob_length__J_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StandardMemBlob_methods_setByteBuffer_INLRReadByteBuffer__V_arg_buffer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buffer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadByteBuffer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StandardMemBlob_methods_setByteBuffer_INLRReadByteBuffer__V_args[] = 
{
  &StandardMemBlob_methods_setByteBuffer_INLRReadByteBuffer__V_arg_buffer,
  0
};

::acdk::lang::dmi::ClazzInfo* StandardMemBlob_methods_setByteBuffer_INLRReadByteBuffer__V_exceptions[] =
{
  RException::clazzInfo(), 
  0
};

void StandardMemBlob_setByteBuffer_INLRReadByteBuffer__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, Exception) == true)
    THROW_INSTANCE( RException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo StandardMemBlob_method_setByteBuffer_INLRReadByteBuffer__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setByteBuffer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_setByteBuffer", // alternative name of method
  -1, // altlabelHashCode
  StandardMemBlob_methods_setByteBuffer_INLRReadByteBuffer__V_args, // the arguments
  0, //arguments count
  StandardMemBlob_methods_setByteBuffer_INLRReadByteBuffer__V_exceptions, // the declared exceptions
  StandardMemBlob_MetainfoWrapper::StandardMemBlob_method_setByteBuffer_INLRReadByteBuffer__V_dispatch, // invoke this method
  StandardMemBlob_setByteBuffer_INLRReadByteBuffer__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StandardMemBlob_methods_truncate_J_V_arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StandardMemBlob_methods_truncate_J_V_args[] = 
{
  &StandardMemBlob_methods_truncate_J_V_arg_length,
  0
};

::acdk::lang::dmi::ClazzInfo* StandardMemBlob_methods_truncate_J_V_exceptions[] =
{
  RException::clazzInfo(), 
  0
};

void StandardMemBlob_truncate_J_V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, Exception) == true)
    THROW_INSTANCE( RException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo StandardMemBlob_method_truncate_J_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "truncate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_truncate", // alternative name of method
  -1, // altlabelHashCode
  StandardMemBlob_methods_truncate_J_V_args, // the arguments
  0, //arguments count
  StandardMemBlob_methods_truncate_J_V_exceptions, // the declared exceptions
  StandardMemBlob_MetainfoWrapper::StandardMemBlob_method_truncate_J_V_dispatch, // invoke this method
  StandardMemBlob_truncate_J_V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _StandardMemBlob_methods[] = 
{
  &StandardMemBlob_method_GetClass__L_acdk_lang_RClass_,
  &StandardMemBlob_method_StandardMemBlob_INLacdk_lang_RFlexByteBuffer__LRStandardMemBlob_,
  &StandardMemBlob_method_StandardMemBlob__LRStandardMemBlob_,
  &StandardMemBlob_method_getReadByteBuffer__LRReadByteBuffer_,
  &StandardMemBlob_method_getReader__Lacdk_io_RReader_,
  &StandardMemBlob_method_getWriter__Lacdk_io_RWriter_,
  &StandardMemBlob_method_length__J,
  &StandardMemBlob_method_setByteBuffer_INLRReadByteBuffer__V,
  &StandardMemBlob_method_truncate_J_V,
  0
};


struct StandardMemBlob_MetaInfoInitializer
{  StandardMemBlob_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = StandardMemBlob::clazzInfo();
    ci->fields =  _StandardMemBlob_fields;
    ci->methods =  _StandardMemBlob_methods;
    ci->_scopeParent = acdk_sql_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
StandardMemBlob_MetaInfoInitializer StandardMemBlob_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace sql


namespace acdk { 
namespace sql { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
CallableStatement_create_array(int length)
{
  return new ObjectArrayImpl<RCallableStatement>(length);
}

//static
::acdk::lang::RObject
CallableStatement_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class CallableStatement_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CallableStatement_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)CallableStatement::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CallableStatement_method_getBlob_I_LRBlob__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CallableStatement* This = dmi_cast<CallableStatement>(This_);
    ret = (::acdk::lang::RObject)This->getBlob(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CallableStatement_method_getBoolean_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CallableStatement* This = dmi_cast<CallableStatement>(This_);
  ret = This->getBoolean(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CallableStatement_method_getByte_I_B_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CallableStatement* This = dmi_cast<CallableStatement>(This_);
  ret = This->getByte(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CallableStatement_method_getBytes_I_LRbyteArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CallableStatement* This = dmi_cast<CallableStatement>(This_);
    ret = (::acdk::lang::RObject)This->getBytes(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CallableStatement_method_getDate_I_Lacdk_util_RDate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CallableStatement* This = dmi_cast<CallableStatement>(This_);
    ret = (::acdk::lang::RObject)This->getDate(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CallableStatement_method_getDate_IINLacdk_util_RCalendar__Lacdk_util_RDate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CallableStatement* This = dmi_cast<CallableStatement>(This_);
    ret = (::acdk::lang::RObject)This->getDate(args[0].getIntVar(), (acdk::util::RCalendar)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CallableStatement_method_getDouble_I_D_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CallableStatement* This = dmi_cast<CallableStatement>(This_);
  ret = This->getDouble(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CallableStatement_method_getFloat_I_F_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CallableStatement* This = dmi_cast<CallableStatement>(This_);
  ret = This->getFloat(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CallableStatement_method_getInt_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CallableStatement* This = dmi_cast<CallableStatement>(This_);
  ret = This->getInt(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CallableStatement_method_getLong_I_J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CallableStatement* This = dmi_cast<CallableStatement>(This_);
  ret = This->getLong(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CallableStatement_method_getObject_I_LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CallableStatement* This = dmi_cast<CallableStatement>(This_);
    ret = (::acdk::lang::RObject)This->getObject(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CallableStatement_method_getObject_IINLacdk_util_RMap__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CallableStatement* This = dmi_cast<CallableStatement>(This_);
    ret = (::acdk::lang::RObject)This->getObject(args[0].getIntVar(), (acdk::util::RMap)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CallableStatement_method_getShort_I_S_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CallableStatement* This = dmi_cast<CallableStatement>(This_);
  ret = This->getShort(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CallableStatement_method_getString_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CallableStatement* This = dmi_cast<CallableStatement>(This_);
    ret = (::acdk::lang::RObject)This->getString(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CallableStatement_method_getTime_I_LRTime__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CallableStatement* This = dmi_cast<CallableStatement>(This_);
    ret = (::acdk::lang::RObject)This->getTime(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CallableStatement_method_getTime_IINLacdk_util_RCalendar__LRTime__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CallableStatement* This = dmi_cast<CallableStatement>(This_);
    ret = (::acdk::lang::RObject)This->getTime(args[0].getIntVar(), (acdk::util::RCalendar)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CallableStatement_method_getTimestamp_I_LRTimestamp__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CallableStatement* This = dmi_cast<CallableStatement>(This_);
    ret = (::acdk::lang::RObject)This->getTimestamp(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CallableStatement_method_getTimestamp_IINLacdk_util_RCalendar__LRTimestamp__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CallableStatement* This = dmi_cast<CallableStatement>(This_);
    ret = (::acdk::lang::RObject)This->getTimestamp(args[0].getIntVar(), (acdk::util::RCalendar)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CallableStatement_method_registerOutParameter_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CallableStatement* This = dmi_cast<CallableStatement>(This_);
    This->registerOutParameter(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CallableStatement_method_registerOutParameter_III_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CallableStatement* This = dmi_cast<CallableStatement>(This_);
    This->registerOutParameter(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CallableStatement_method_registerOutParameter_IIINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CallableStatement* This = dmi_cast<CallableStatement>(This_);
    This->registerOutParameter(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CallableStatement_method_wasNull__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CallableStatement* This = dmi_cast<CallableStatement>(This_);
  ret = This->wasNull();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _CallableStatement_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* CallableStatement_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CallableStatement_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CallableStatement_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_m_GetClass", // alternative name of method
  -1, // altlabelHashCode
  CallableStatement_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  CallableStatement_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  CallableStatement_MetainfoWrapper::CallableStatement_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CallableStatement_methods_getBlob_I_LRBlob__arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CallableStatement_methods_getBlob_I_LRBlob__args[] = 
{
  &CallableStatement_methods_getBlob_I_LRBlob__arg_i,
  0
};

::acdk::lang::dmi::ClazzInfo* CallableStatement_methods_getBlob_I_LRBlob__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CallableStatement_method_getBlob_I_LRBlob_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBlob", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBlob::clazzInfo(), // return type
  "_0_getBlob", // alternative name of method
  -1, // altlabelHashCode
  CallableStatement_methods_getBlob_I_LRBlob__args, // the arguments
  0, //arguments count
  CallableStatement_methods_getBlob_I_LRBlob__exceptions, // the declared exceptions
  CallableStatement_MetainfoWrapper::CallableStatement_method_getBlob_I_LRBlob__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CallableStatement_methods_getBoolean_I_Z_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CallableStatement_methods_getBoolean_I_Z_args[] = 
{
  &CallableStatement_methods_getBoolean_I_Z_arg_parameterIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* CallableStatement_methods_getBoolean_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CallableStatement_method_getBoolean_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBoolean", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_getBoolean", // alternative name of method
  -1, // altlabelHashCode
  CallableStatement_methods_getBoolean_I_Z_args, // the arguments
  0, //arguments count
  CallableStatement_methods_getBoolean_I_Z_exceptions, // the declared exceptions
  CallableStatement_MetainfoWrapper::CallableStatement_method_getBoolean_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CallableStatement_methods_getByte_I_B_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CallableStatement_methods_getByte_I_B_args[] = 
{
  &CallableStatement_methods_getByte_I_B_arg_parameterIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* CallableStatement_methods_getByte_I_B_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CallableStatement_method_getByte_I_B = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getByte", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz(), // return type
  "_2_getByte", // alternative name of method
  -1, // altlabelHashCode
  CallableStatement_methods_getByte_I_B_args, // the arguments
  0, //arguments count
  CallableStatement_methods_getByte_I_B_exceptions, // the declared exceptions
  CallableStatement_MetainfoWrapper::CallableStatement_method_getByte_I_B_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CallableStatement_methods_getBytes_I_LRbyteArray__arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CallableStatement_methods_getBytes_I_LRbyteArray__args[] = 
{
  &CallableStatement_methods_getBytes_I_LRbyteArray__arg_parameterIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* CallableStatement_methods_getBytes_I_LRbyteArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CallableStatement_method_getBytes_I_LRbyteArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBytes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo(), // return type
  "_3_getBytes", // alternative name of method
  -1, // altlabelHashCode
  CallableStatement_methods_getBytes_I_LRbyteArray__args, // the arguments
  0, //arguments count
  CallableStatement_methods_getBytes_I_LRbyteArray__exceptions, // the declared exceptions
  CallableStatement_MetainfoWrapper::CallableStatement_method_getBytes_I_LRbyteArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CallableStatement_methods_getDate_I_Lacdk_util_RDate__arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CallableStatement_methods_getDate_I_Lacdk_util_RDate__args[] = 
{
  &CallableStatement_methods_getDate_I_Lacdk_util_RDate__arg_parameterIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* CallableStatement_methods_getDate_I_Lacdk_util_RDate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CallableStatement_method_getDate_I_Lacdk_util_RDate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RDate::clazzInfo(), // return type
  "_4_getDate", // alternative name of method
  -1, // altlabelHashCode
  CallableStatement_methods_getDate_I_Lacdk_util_RDate__args, // the arguments
  0, //arguments count
  CallableStatement_methods_getDate_I_Lacdk_util_RDate__exceptions, // the declared exceptions
  CallableStatement_MetainfoWrapper::CallableStatement_method_getDate_I_Lacdk_util_RDate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CallableStatement_methods_getDate_IINLacdk_util_RCalendar__Lacdk_util_RDate__arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CallableStatement_methods_getDate_IINLacdk_util_RCalendar__Lacdk_util_RDate__arg_cal = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cal", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RCalendar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CallableStatement_methods_getDate_IINLacdk_util_RCalendar__Lacdk_util_RDate__args[] = 
{
  &CallableStatement_methods_getDate_IINLacdk_util_RCalendar__Lacdk_util_RDate__arg_parameterIndex,
  &CallableStatement_methods_getDate_IINLacdk_util_RCalendar__Lacdk_util_RDate__arg_cal,
  0
};

::acdk::lang::dmi::ClazzInfo* CallableStatement_methods_getDate_IINLacdk_util_RCalendar__Lacdk_util_RDate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CallableStatement_method_getDate_IINLacdk_util_RCalendar__Lacdk_util_RDate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RDate::clazzInfo(), // return type
  "_5_getDate", // alternative name of method
  -1, // altlabelHashCode
  CallableStatement_methods_getDate_IINLacdk_util_RCalendar__Lacdk_util_RDate__args, // the arguments
  0, //arguments count
  CallableStatement_methods_getDate_IINLacdk_util_RCalendar__Lacdk_util_RDate__exceptions, // the declared exceptions
  CallableStatement_MetainfoWrapper::CallableStatement_method_getDate_IINLacdk_util_RCalendar__Lacdk_util_RDate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CallableStatement_methods_getDouble_I_D_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CallableStatement_methods_getDouble_I_D_args[] = 
{
  &CallableStatement_methods_getDouble_I_D_arg_parameterIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* CallableStatement_methods_getDouble_I_D_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CallableStatement_method_getDouble_I_D = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDouble", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(), // return type
  "_6_getDouble", // alternative name of method
  -1, // altlabelHashCode
  CallableStatement_methods_getDouble_I_D_args, // the arguments
  0, //arguments count
  CallableStatement_methods_getDouble_I_D_exceptions, // the declared exceptions
  CallableStatement_MetainfoWrapper::CallableStatement_method_getDouble_I_D_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CallableStatement_methods_getFloat_I_F_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CallableStatement_methods_getFloat_I_F_args[] = 
{
  &CallableStatement_methods_getFloat_I_F_arg_parameterIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* CallableStatement_methods_getFloat_I_F_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CallableStatement_method_getFloat_I_F = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFloat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz(), // return type
  "_7_getFloat", // alternative name of method
  -1, // altlabelHashCode
  CallableStatement_methods_getFloat_I_F_args, // the arguments
  0, //arguments count
  CallableStatement_methods_getFloat_I_F_exceptions, // the declared exceptions
  CallableStatement_MetainfoWrapper::CallableStatement_method_getFloat_I_F_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CallableStatement_methods_getInt_I_I_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CallableStatement_methods_getInt_I_I_args[] = 
{
  &CallableStatement_methods_getInt_I_I_arg_parameterIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* CallableStatement_methods_getInt_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CallableStatement_method_getInt_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_8_getInt", // alternative name of method
  -1, // altlabelHashCode
  CallableStatement_methods_getInt_I_I_args, // the arguments
  0, //arguments count
  CallableStatement_methods_getInt_I_I_exceptions, // the declared exceptions
  CallableStatement_MetainfoWrapper::CallableStatement_method_getInt_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CallableStatement_methods_getLong_I_J_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CallableStatement_methods_getLong_I_J_args[] = 
{
  &CallableStatement_methods_getLong_I_J_arg_parameterIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* CallableStatement_methods_getLong_I_J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CallableStatement_method_getLong_I_J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLong", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_9_getLong", // alternative name of method
  -1, // altlabelHashCode
  CallableStatement_methods_getLong_I_J_args, // the arguments
  0, //arguments count
  CallableStatement_methods_getLong_I_J_exceptions, // the declared exceptions
  CallableStatement_MetainfoWrapper::CallableStatement_method_getLong_I_J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CallableStatement_methods_getObject_I_LRObject__arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CallableStatement_methods_getObject_I_LRObject__args[] = 
{
  &CallableStatement_methods_getObject_I_LRObject__arg_parameterIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* CallableStatement_methods_getObject_I_LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CallableStatement_method_getObject_I_LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_a_getObject", // alternative name of method
  -1, // altlabelHashCode
  CallableStatement_methods_getObject_I_LRObject__args, // the arguments
  0, //arguments count
  CallableStatement_methods_getObject_I_LRObject__exceptions, // the declared exceptions
  CallableStatement_MetainfoWrapper::CallableStatement_method_getObject_I_LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CallableStatement_methods_getObject_IINLacdk_util_RMap__LRObject__arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CallableStatement_methods_getObject_IINLacdk_util_RMap__LRObject__arg_map = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "map", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CallableStatement_methods_getObject_IINLacdk_util_RMap__LRObject__args[] = 
{
  &CallableStatement_methods_getObject_IINLacdk_util_RMap__LRObject__arg_i,
  &CallableStatement_methods_getObject_IINLacdk_util_RMap__LRObject__arg_map,
  0
};

::acdk::lang::dmi::ClazzInfo* CallableStatement_methods_getObject_IINLacdk_util_RMap__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CallableStatement_method_getObject_IINLacdk_util_RMap__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_b_getObject", // alternative name of method
  -1, // altlabelHashCode
  CallableStatement_methods_getObject_IINLacdk_util_RMap__LRObject__args, // the arguments
  0, //arguments count
  CallableStatement_methods_getObject_IINLacdk_util_RMap__LRObject__exceptions, // the declared exceptions
  CallableStatement_MetainfoWrapper::CallableStatement_method_getObject_IINLacdk_util_RMap__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CallableStatement_methods_getShort_I_S_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CallableStatement_methods_getShort_I_S_args[] = 
{
  &CallableStatement_methods_getShort_I_S_arg_parameterIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* CallableStatement_methods_getShort_I_S_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CallableStatement_method_getShort_I_S = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getShort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(), // return type
  "_c_getShort", // alternative name of method
  -1, // altlabelHashCode
  CallableStatement_methods_getShort_I_S_args, // the arguments
  0, //arguments count
  CallableStatement_methods_getShort_I_S_exceptions, // the declared exceptions
  CallableStatement_MetainfoWrapper::CallableStatement_method_getShort_I_S_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CallableStatement_methods_getString_I_LRString__arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CallableStatement_methods_getString_I_LRString__args[] = 
{
  &CallableStatement_methods_getString_I_LRString__arg_parameterIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* CallableStatement_methods_getString_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CallableStatement_method_getString_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_d_getString", // alternative name of method
  -1, // altlabelHashCode
  CallableStatement_methods_getString_I_LRString__args, // the arguments
  0, //arguments count
  CallableStatement_methods_getString_I_LRString__exceptions, // the declared exceptions
  CallableStatement_MetainfoWrapper::CallableStatement_method_getString_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CallableStatement_methods_getTime_I_LRTime__arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CallableStatement_methods_getTime_I_LRTime__args[] = 
{
  &CallableStatement_methods_getTime_I_LRTime__arg_parameterIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* CallableStatement_methods_getTime_I_LRTime__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CallableStatement_method_getTime_I_LRTime_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTime", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTime::clazzInfo(), // return type
  "_e_getTime", // alternative name of method
  -1, // altlabelHashCode
  CallableStatement_methods_getTime_I_LRTime__args, // the arguments
  0, //arguments count
  CallableStatement_methods_getTime_I_LRTime__exceptions, // the declared exceptions
  CallableStatement_MetainfoWrapper::CallableStatement_method_getTime_I_LRTime__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CallableStatement_methods_getTime_IINLacdk_util_RCalendar__LRTime__arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CallableStatement_methods_getTime_IINLacdk_util_RCalendar__LRTime__arg_cal = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cal", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RCalendar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CallableStatement_methods_getTime_IINLacdk_util_RCalendar__LRTime__args[] = 
{
  &CallableStatement_methods_getTime_IINLacdk_util_RCalendar__LRTime__arg_parameterIndex,
  &CallableStatement_methods_getTime_IINLacdk_util_RCalendar__LRTime__arg_cal,
  0
};

::acdk::lang::dmi::ClazzInfo* CallableStatement_methods_getTime_IINLacdk_util_RCalendar__LRTime__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CallableStatement_method_getTime_IINLacdk_util_RCalendar__LRTime_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTime", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTime::clazzInfo(), // return type
  "_f_getTime", // alternative name of method
  -1, // altlabelHashCode
  CallableStatement_methods_getTime_IINLacdk_util_RCalendar__LRTime__args, // the arguments
  0, //arguments count
  CallableStatement_methods_getTime_IINLacdk_util_RCalendar__LRTime__exceptions, // the declared exceptions
  CallableStatement_MetainfoWrapper::CallableStatement_method_getTime_IINLacdk_util_RCalendar__LRTime__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CallableStatement_methods_getTimestamp_I_LRTimestamp__arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CallableStatement_methods_getTimestamp_I_LRTimestamp__args[] = 
{
  &CallableStatement_methods_getTimestamp_I_LRTimestamp__arg_parameterIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* CallableStatement_methods_getTimestamp_I_LRTimestamp__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CallableStatement_method_getTimestamp_I_LRTimestamp_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTimestamp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTimestamp::clazzInfo(), // return type
  "_g_getTimestamp", // alternative name of method
  -1, // altlabelHashCode
  CallableStatement_methods_getTimestamp_I_LRTimestamp__args, // the arguments
  0, //arguments count
  CallableStatement_methods_getTimestamp_I_LRTimestamp__exceptions, // the declared exceptions
  CallableStatement_MetainfoWrapper::CallableStatement_method_getTimestamp_I_LRTimestamp__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CallableStatement_methods_getTimestamp_IINLacdk_util_RCalendar__LRTimestamp__arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CallableStatement_methods_getTimestamp_IINLacdk_util_RCalendar__LRTimestamp__arg_cal = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cal", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RCalendar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CallableStatement_methods_getTimestamp_IINLacdk_util_RCalendar__LRTimestamp__args[] = 
{
  &CallableStatement_methods_getTimestamp_IINLacdk_util_RCalendar__LRTimestamp__arg_parameterIndex,
  &CallableStatement_methods_getTimestamp_IINLacdk_util_RCalendar__LRTimestamp__arg_cal,
  0
};

::acdk::lang::dmi::ClazzInfo* CallableStatement_methods_getTimestamp_IINLacdk_util_RCalendar__LRTimestamp__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CallableStatement_method_getTimestamp_IINLacdk_util_RCalendar__LRTimestamp_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTimestamp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTimestamp::clazzInfo(), // return type
  "_h_getTimestamp", // alternative name of method
  -1, // altlabelHashCode
  CallableStatement_methods_getTimestamp_IINLacdk_util_RCalendar__LRTimestamp__args, // the arguments
  0, //arguments count
  CallableStatement_methods_getTimestamp_IINLacdk_util_RCalendar__LRTimestamp__exceptions, // the declared exceptions
  CallableStatement_MetainfoWrapper::CallableStatement_method_getTimestamp_IINLacdk_util_RCalendar__LRTimestamp__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CallableStatement_methods_registerOutParameter_II_V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CallableStatement_methods_registerOutParameter_II_V_arg_sqlType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "sqlType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CallableStatement_methods_registerOutParameter_II_V_args[] = 
{
  &CallableStatement_methods_registerOutParameter_II_V_arg_parameterIndex,
  &CallableStatement_methods_registerOutParameter_II_V_arg_sqlType,
  0
};

::acdk::lang::dmi::ClazzInfo* CallableStatement_methods_registerOutParameter_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CallableStatement_method_registerOutParameter_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "registerOutParameter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_i_registerOutParameter", // alternative name of method
  -1, // altlabelHashCode
  CallableStatement_methods_registerOutParameter_II_V_args, // the arguments
  0, //arguments count
  CallableStatement_methods_registerOutParameter_II_V_exceptions, // the declared exceptions
  CallableStatement_MetainfoWrapper::CallableStatement_method_registerOutParameter_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CallableStatement_methods_registerOutParameter_III_V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CallableStatement_methods_registerOutParameter_III_V_arg_sqlType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "sqlType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CallableStatement_methods_registerOutParameter_III_V_arg_scale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "scale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CallableStatement_methods_registerOutParameter_III_V_args[] = 
{
  &CallableStatement_methods_registerOutParameter_III_V_arg_parameterIndex,
  &CallableStatement_methods_registerOutParameter_III_V_arg_sqlType,
  &CallableStatement_methods_registerOutParameter_III_V_arg_scale,
  0
};

::acdk::lang::dmi::ClazzInfo* CallableStatement_methods_registerOutParameter_III_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CallableStatement_method_registerOutParameter_III_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "registerOutParameter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_j_registerOutParameter", // alternative name of method
  -1, // altlabelHashCode
  CallableStatement_methods_registerOutParameter_III_V_args, // the arguments
  0, //arguments count
  CallableStatement_methods_registerOutParameter_III_V_exceptions, // the declared exceptions
  CallableStatement_MetainfoWrapper::CallableStatement_method_registerOutParameter_III_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CallableStatement_methods_registerOutParameter_IIINLRString__V_arg_paramIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "paramIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CallableStatement_methods_registerOutParameter_IIINLRString__V_arg_sqlType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "sqlType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CallableStatement_methods_registerOutParameter_IIINLRString__V_arg_typeName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "typeName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CallableStatement_methods_registerOutParameter_IIINLRString__V_args[] = 
{
  &CallableStatement_methods_registerOutParameter_IIINLRString__V_arg_paramIndex,
  &CallableStatement_methods_registerOutParameter_IIINLRString__V_arg_sqlType,
  &CallableStatement_methods_registerOutParameter_IIINLRString__V_arg_typeName,
  0
};

::acdk::lang::dmi::ClazzInfo* CallableStatement_methods_registerOutParameter_IIINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CallableStatement_method_registerOutParameter_IIINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "registerOutParameter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_k_registerOutParameter", // alternative name of method
  -1, // altlabelHashCode
  CallableStatement_methods_registerOutParameter_IIINLRString__V_args, // the arguments
  0, //arguments count
  CallableStatement_methods_registerOutParameter_IIINLRString__V_exceptions, // the declared exceptions
  CallableStatement_MetainfoWrapper::CallableStatement_method_registerOutParameter_IIINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CallableStatement_methods_wasNull__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CallableStatement_methods_wasNull__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CallableStatement_method_wasNull__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "wasNull", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_l_wasNull", // alternative name of method
  -1, // altlabelHashCode
  CallableStatement_methods_wasNull__Z_args, // the arguments
  0, //arguments count
  CallableStatement_methods_wasNull__Z_exceptions, // the declared exceptions
  CallableStatement_MetainfoWrapper::CallableStatement_method_wasNull__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _CallableStatement_methods[] = 
{
  &CallableStatement_method_GetClass__L_acdk_lang_RClass_,
  &CallableStatement_method_getBlob_I_LRBlob_,
  &CallableStatement_method_getBoolean_I_Z,
  &CallableStatement_method_getByte_I_B,
  &CallableStatement_method_getBytes_I_LRbyteArray_,
  &CallableStatement_method_getDate_I_Lacdk_util_RDate_,
  &CallableStatement_method_getDate_IINLacdk_util_RCalendar__Lacdk_util_RDate_,
  &CallableStatement_method_getDouble_I_D,
  &CallableStatement_method_getFloat_I_F,
  &CallableStatement_method_getInt_I_I,
  &CallableStatement_method_getLong_I_J,
  &CallableStatement_method_getObject_I_LRObject_,
  &CallableStatement_method_getObject_IINLacdk_util_RMap__LRObject_,
  &CallableStatement_method_getShort_I_S,
  &CallableStatement_method_getString_I_LRString_,
  &CallableStatement_method_getTime_I_LRTime_,
  &CallableStatement_method_getTime_IINLacdk_util_RCalendar__LRTime_,
  &CallableStatement_method_getTimestamp_I_LRTimestamp_,
  &CallableStatement_method_getTimestamp_IINLacdk_util_RCalendar__LRTimestamp_,
  &CallableStatement_method_registerOutParameter_II_V,
  &CallableStatement_method_registerOutParameter_III_V,
  &CallableStatement_method_registerOutParameter_IIINLRString__V,
  &CallableStatement_method_wasNull__Z,
  0
};


struct CallableStatement_MetaInfoInitializer
{  CallableStatement_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = CallableStatement::clazzInfo();
    ci->fields =  _CallableStatement_fields;
    ci->methods =  _CallableStatement_methods;
    ci->_scopeParent = acdk_sql_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
CallableStatement_MetaInfoInitializer CallableStatement_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace sql


namespace acdk { 
namespace sql { 


//static
::acdk::lang::RObject
Connection_create_array(int length)
{
  return new ObjectArrayImpl<RConnection>(length);
}

//static
::acdk::lang::RObject
Connection_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Connection_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Connection_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Connection::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Connection_method_clearWarnings__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Connection* This = dmi_cast<Connection>(This_);
    This->clearWarnings();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Connection_method_close__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Connection* This = dmi_cast<Connection>(This_);
    This->close();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Connection_method_commit__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Connection* This = dmi_cast<Connection>(This_);
    This->commit();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Connection_method_createStatement__LRStatement__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Connection* This = dmi_cast<Connection>(This_);
    ret = (::acdk::lang::RObject)This->createStatement();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Connection_method_createStatement_II_LRStatement__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Connection* This = dmi_cast<Connection>(This_);
    ret = (::acdk::lang::RObject)This->createStatement(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Connection_method_getAutoCommit__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Connection* This = dmi_cast<Connection>(This_);
  ret = This->getAutoCommit();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Connection_method_getCatalog__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Connection* This = dmi_cast<Connection>(This_);
    ret = (::acdk::lang::RObject)This->getCatalog();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Connection_method_getMetaData__LRDatabaseMetaData__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Connection* This = dmi_cast<Connection>(This_);
    ret = (::acdk::lang::RObject)This->getMetaData();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Connection_method_getTransactionIsolation__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Connection* This = dmi_cast<Connection>(This_);
  ret = This->getTransactionIsolation();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Connection_method_getTypeMap__Lacdk_util_RMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Connection* This = dmi_cast<Connection>(This_);
    ret = (::acdk::lang::RObject)This->getTypeMap();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Connection_method_getWarnings__LRSQLWarning__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Connection* This = dmi_cast<Connection>(This_);
    ret = (::acdk::lang::RObject)This->getWarnings();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Connection_method_isClosed__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Connection* This = dmi_cast<Connection>(This_);
  ret = This->isClosed();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Connection_method_isReadOnly__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Connection* This = dmi_cast<Connection>(This_);
  ret = This->isReadOnly();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Connection_method_nativeSQL_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Connection* This = dmi_cast<Connection>(This_);
    ret = (::acdk::lang::RObject)This->nativeSQL((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Connection_method_prepareCall_INLRString__LRCallableStatement__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Connection* This = dmi_cast<Connection>(This_);
    ret = (::acdk::lang::RObject)This->prepareCall((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Connection_method_prepareStatement_INLRString__LRPreparedStatement__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Connection* This = dmi_cast<Connection>(This_);
    ret = (::acdk::lang::RObject)This->prepareStatement((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Connection_method_rollback__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Connection* This = dmi_cast<Connection>(This_);
    This->rollback();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Connection_method_setAutoCommit_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Connection* This = dmi_cast<Connection>(This_);
    This->setAutoCommit(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Connection_method_setCatalog_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Connection* This = dmi_cast<Connection>(This_);
    This->setCatalog((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Connection_method_setReadOnly_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Connection* This = dmi_cast<Connection>(This_);
    This->setReadOnly(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Connection_method_setTransactionIsolation_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Connection* This = dmi_cast<Connection>(This_);
    This->setTransactionIsolation(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Connection_method_setTypeMap_INLacdk_util_RMap__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Connection* This = dmi_cast<Connection>(This_);
    This->setTypeMap((acdk::util::RMap)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Connection_fields_TRANSACTION_NONE_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Connection::TRANSACTION_NONE, flags);
    else
      Connection::TRANSACTION_NONE = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Connection_fields_TRANSACTION_READ_COMMITTED_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Connection::TRANSACTION_READ_COMMITTED, flags);
    else
      Connection::TRANSACTION_READ_COMMITTED = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Connection_fields_TRANSACTION_READ_UNCOMMITTED_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Connection::TRANSACTION_READ_UNCOMMITTED, flags);
    else
      Connection::TRANSACTION_READ_UNCOMMITTED = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Connection_fields_TRANSACTION_REPEATABLE_READ_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Connection::TRANSACTION_REPEATABLE_READ, flags);
    else
      Connection::TRANSACTION_REPEATABLE_READ = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Connection_fields_TRANSACTION_SERIALIZABLE_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Connection::TRANSACTION_SERIALIZABLE, flags);
    else
      Connection::TRANSACTION_SERIALIZABLE = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo Connection_fields_TRANSACTION_NONE = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "TRANSACTION_NONE", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Connection_MetainfoWrapper::Connection_fields_TRANSACTION_NONE_accessor, // read/write access to this fields
  (void*)&Connection::TRANSACTION_NONE // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Connection_fields_TRANSACTION_READ_COMMITTED = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "TRANSACTION_READ_COMMITTED", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Connection_MetainfoWrapper::Connection_fields_TRANSACTION_READ_COMMITTED_accessor, // read/write access to this fields
  (void*)&Connection::TRANSACTION_READ_COMMITTED // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Connection_fields_TRANSACTION_READ_UNCOMMITTED = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "TRANSACTION_READ_UNCOMMITTED", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Connection_MetainfoWrapper::Connection_fields_TRANSACTION_READ_UNCOMMITTED_accessor, // read/write access to this fields
  (void*)&Connection::TRANSACTION_READ_UNCOMMITTED // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Connection_fields_TRANSACTION_REPEATABLE_READ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "TRANSACTION_REPEATABLE_READ", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Connection_MetainfoWrapper::Connection_fields_TRANSACTION_REPEATABLE_READ_accessor, // read/write access to this fields
  (void*)&Connection::TRANSACTION_REPEATABLE_READ // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Connection_fields_TRANSACTION_SERIALIZABLE = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "TRANSACTION_SERIALIZABLE", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Connection_MetainfoWrapper::Connection_fields_TRANSACTION_SERIALIZABLE_accessor, // read/write access to this fields
  (void*)&Connection::TRANSACTION_SERIALIZABLE // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _Connection_fields[] = 
{
  &Connection_fields_TRANSACTION_NONE,
  &Connection_fields_TRANSACTION_READ_COMMITTED,
  &Connection_fields_TRANSACTION_READ_UNCOMMITTED,
  &Connection_fields_TRANSACTION_REPEATABLE_READ,
  &Connection_fields_TRANSACTION_SERIALIZABLE,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Connection_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Connection_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Connection_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_m_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Connection_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Connection_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Connection_MetainfoWrapper::Connection_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Connection_methods_clearWarnings__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Connection_methods_clearWarnings__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Connection_method_clearWarnings__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clearWarnings", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0_clearWarnings", // alternative name of method
  -1, // altlabelHashCode
  Connection_methods_clearWarnings__V_args, // the arguments
  0, //arguments count
  Connection_methods_clearWarnings__V_exceptions, // the declared exceptions
  Connection_MetainfoWrapper::Connection_method_clearWarnings__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Connection_methods_close__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Connection_methods_close__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Connection_method_close__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "close", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_close", // alternative name of method
  -1, // altlabelHashCode
  Connection_methods_close__V_args, // the arguments
  0, //arguments count
  Connection_methods_close__V_exceptions, // the declared exceptions
  Connection_MetainfoWrapper::Connection_method_close__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Connection_methods_commit__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Connection_methods_commit__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Connection_method_commit__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "commit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_commit", // alternative name of method
  -1, // altlabelHashCode
  Connection_methods_commit__V_args, // the arguments
  0, //arguments count
  Connection_methods_commit__V_exceptions, // the declared exceptions
  Connection_MetainfoWrapper::Connection_method_commit__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Connection_methods_createStatement__LRStatement__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Connection_methods_createStatement__LRStatement__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Connection_method_createStatement__LRStatement_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createStatement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStatement::clazzInfo(), // return type
  "_3_createStatement", // alternative name of method
  -1, // altlabelHashCode
  Connection_methods_createStatement__LRStatement__args, // the arguments
  0, //arguments count
  Connection_methods_createStatement__LRStatement__exceptions, // the declared exceptions
  Connection_MetainfoWrapper::Connection_method_createStatement__LRStatement__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Connection_methods_createStatement_II_LRStatement__arg_resultSetType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "resultSetType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Connection_methods_createStatement_II_LRStatement__arg_resultSetConcurrency = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "resultSetConcurrency", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Connection_methods_createStatement_II_LRStatement__args[] = 
{
  &Connection_methods_createStatement_II_LRStatement__arg_resultSetType,
  &Connection_methods_createStatement_II_LRStatement__arg_resultSetConcurrency,
  0
};

::acdk::lang::dmi::ClazzInfo* Connection_methods_createStatement_II_LRStatement__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Connection_method_createStatement_II_LRStatement_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createStatement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStatement::clazzInfo(), // return type
  "_4_createStatement", // alternative name of method
  -1, // altlabelHashCode
  Connection_methods_createStatement_II_LRStatement__args, // the arguments
  0, //arguments count
  Connection_methods_createStatement_II_LRStatement__exceptions, // the declared exceptions
  Connection_MetainfoWrapper::Connection_method_createStatement_II_LRStatement__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Connection_methods_getAutoCommit__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Connection_methods_getAutoCommit__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Connection_method_getAutoCommit__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAutoCommit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_getAutoCommit", // alternative name of method
  -1, // altlabelHashCode
  Connection_methods_getAutoCommit__Z_args, // the arguments
  0, //arguments count
  Connection_methods_getAutoCommit__Z_exceptions, // the declared exceptions
  Connection_MetainfoWrapper::Connection_method_getAutoCommit__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Connection_methods_getCatalog__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Connection_methods_getCatalog__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Connection_method_getCatalog__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCatalog", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_6_getCatalog", // alternative name of method
  -1, // altlabelHashCode
  Connection_methods_getCatalog__LRString__args, // the arguments
  0, //arguments count
  Connection_methods_getCatalog__LRString__exceptions, // the declared exceptions
  Connection_MetainfoWrapper::Connection_method_getCatalog__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Connection_methods_getMetaData__LRDatabaseMetaData__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Connection_methods_getMetaData__LRDatabaseMetaData__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Connection_method_getMetaData__LRDatabaseMetaData_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMetaData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDatabaseMetaData::clazzInfo(), // return type
  "_7_getMetaData", // alternative name of method
  -1, // altlabelHashCode
  Connection_methods_getMetaData__LRDatabaseMetaData__args, // the arguments
  0, //arguments count
  Connection_methods_getMetaData__LRDatabaseMetaData__exceptions, // the declared exceptions
  Connection_MetainfoWrapper::Connection_method_getMetaData__LRDatabaseMetaData__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Connection_methods_getTransactionIsolation__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Connection_methods_getTransactionIsolation__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Connection_method_getTransactionIsolation__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTransactionIsolation", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_8_getTransactionIsolation", // alternative name of method
  -1, // altlabelHashCode
  Connection_methods_getTransactionIsolation__I_args, // the arguments
  0, //arguments count
  Connection_methods_getTransactionIsolation__I_exceptions, // the declared exceptions
  Connection_MetainfoWrapper::Connection_method_getTransactionIsolation__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Connection_methods_getTypeMap__Lacdk_util_RMap__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Connection_methods_getTypeMap__Lacdk_util_RMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Connection_method_getTypeMap__Lacdk_util_RMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTypeMap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RMap::clazzInfo(), // return type
  "_9_getTypeMap", // alternative name of method
  -1, // altlabelHashCode
  Connection_methods_getTypeMap__Lacdk_util_RMap__args, // the arguments
  0, //arguments count
  Connection_methods_getTypeMap__Lacdk_util_RMap__exceptions, // the declared exceptions
  Connection_MetainfoWrapper::Connection_method_getTypeMap__Lacdk_util_RMap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Connection_methods_getWarnings__LRSQLWarning__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Connection_methods_getWarnings__LRSQLWarning__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Connection_method_getWarnings__LRSQLWarning_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWarnings", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSQLWarning::clazzInfo(), // return type
  "_a_getWarnings", // alternative name of method
  -1, // altlabelHashCode
  Connection_methods_getWarnings__LRSQLWarning__args, // the arguments
  0, //arguments count
  Connection_methods_getWarnings__LRSQLWarning__exceptions, // the declared exceptions
  Connection_MetainfoWrapper::Connection_method_getWarnings__LRSQLWarning__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Connection_methods_isClosed__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Connection_methods_isClosed__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Connection_method_isClosed__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isClosed", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_b_isClosed", // alternative name of method
  -1, // altlabelHashCode
  Connection_methods_isClosed__Z_args, // the arguments
  0, //arguments count
  Connection_methods_isClosed__Z_exceptions, // the declared exceptions
  Connection_MetainfoWrapper::Connection_method_isClosed__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Connection_methods_isReadOnly__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Connection_methods_isReadOnly__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Connection_method_isReadOnly__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isReadOnly", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_c_isReadOnly", // alternative name of method
  -1, // altlabelHashCode
  Connection_methods_isReadOnly__Z_args, // the arguments
  0, //arguments count
  Connection_methods_isReadOnly__Z_exceptions, // the declared exceptions
  Connection_MetainfoWrapper::Connection_method_isReadOnly__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Connection_methods_nativeSQL_INLRString__LRString__arg_sql = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sql", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Connection_methods_nativeSQL_INLRString__LRString__args[] = 
{
  &Connection_methods_nativeSQL_INLRString__LRString__arg_sql,
  0
};

::acdk::lang::dmi::ClazzInfo* Connection_methods_nativeSQL_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Connection_method_nativeSQL_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nativeSQL", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_d_nativeSQL", // alternative name of method
  -1, // altlabelHashCode
  Connection_methods_nativeSQL_INLRString__LRString__args, // the arguments
  0, //arguments count
  Connection_methods_nativeSQL_INLRString__LRString__exceptions, // the declared exceptions
  Connection_MetainfoWrapper::Connection_method_nativeSQL_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Connection_methods_prepareCall_INLRString__LRCallableStatement__arg_sql = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sql", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Connection_methods_prepareCall_INLRString__LRCallableStatement__args[] = 
{
  &Connection_methods_prepareCall_INLRString__LRCallableStatement__arg_sql,
  0
};

::acdk::lang::dmi::ClazzInfo* Connection_methods_prepareCall_INLRString__LRCallableStatement__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Connection_method_prepareCall_INLRString__LRCallableStatement_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "prepareCall", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCallableStatement::clazzInfo(), // return type
  "_e_prepareCall", // alternative name of method
  -1, // altlabelHashCode
  Connection_methods_prepareCall_INLRString__LRCallableStatement__args, // the arguments
  0, //arguments count
  Connection_methods_prepareCall_INLRString__LRCallableStatement__exceptions, // the declared exceptions
  Connection_MetainfoWrapper::Connection_method_prepareCall_INLRString__LRCallableStatement__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Connection_methods_prepareStatement_INLRString__LRPreparedStatement__arg_sql = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sql", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Connection_methods_prepareStatement_INLRString__LRPreparedStatement__args[] = 
{
  &Connection_methods_prepareStatement_INLRString__LRPreparedStatement__arg_sql,
  0
};

::acdk::lang::dmi::ClazzInfo* Connection_methods_prepareStatement_INLRString__LRPreparedStatement__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Connection_method_prepareStatement_INLRString__LRPreparedStatement_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "prepareStatement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPreparedStatement::clazzInfo(), // return type
  "_f_prepareStatement", // alternative name of method
  -1, // altlabelHashCode
  Connection_methods_prepareStatement_INLRString__LRPreparedStatement__args, // the arguments
  0, //arguments count
  Connection_methods_prepareStatement_INLRString__LRPreparedStatement__exceptions, // the declared exceptions
  Connection_MetainfoWrapper::Connection_method_prepareStatement_INLRString__LRPreparedStatement__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Connection_methods_rollback__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Connection_methods_rollback__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Connection_method_rollback__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "rollback", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_rollback", // alternative name of method
  -1, // altlabelHashCode
  Connection_methods_rollback__V_args, // the arguments
  0, //arguments count
  Connection_methods_rollback__V_exceptions, // the declared exceptions
  Connection_MetainfoWrapper::Connection_method_rollback__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Connection_methods_setAutoCommit_Z_V_arg_autoCommit = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "autoCommit", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Connection_methods_setAutoCommit_Z_V_args[] = 
{
  &Connection_methods_setAutoCommit_Z_V_arg_autoCommit,
  0
};

::acdk::lang::dmi::ClazzInfo* Connection_methods_setAutoCommit_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Connection_method_setAutoCommit_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setAutoCommit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_h_setAutoCommit", // alternative name of method
  -1, // altlabelHashCode
  Connection_methods_setAutoCommit_Z_V_args, // the arguments
  0, //arguments count
  Connection_methods_setAutoCommit_Z_V_exceptions, // the declared exceptions
  Connection_MetainfoWrapper::Connection_method_setAutoCommit_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Connection_methods_setCatalog_INLRString__V_arg_catalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "catalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Connection_methods_setCatalog_INLRString__V_args[] = 
{
  &Connection_methods_setCatalog_INLRString__V_arg_catalog,
  0
};

::acdk::lang::dmi::ClazzInfo* Connection_methods_setCatalog_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Connection_method_setCatalog_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setCatalog", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_i_setCatalog", // alternative name of method
  -1, // altlabelHashCode
  Connection_methods_setCatalog_INLRString__V_args, // the arguments
  0, //arguments count
  Connection_methods_setCatalog_INLRString__V_exceptions, // the declared exceptions
  Connection_MetainfoWrapper::Connection_method_setCatalog_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Connection_methods_setReadOnly_Z_V_arg_readOnly = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "readOnly", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Connection_methods_setReadOnly_Z_V_args[] = 
{
  &Connection_methods_setReadOnly_Z_V_arg_readOnly,
  0
};

::acdk::lang::dmi::ClazzInfo* Connection_methods_setReadOnly_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Connection_method_setReadOnly_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setReadOnly", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_j_setReadOnly", // alternative name of method
  -1, // altlabelHashCode
  Connection_methods_setReadOnly_Z_V_args, // the arguments
  0, //arguments count
  Connection_methods_setReadOnly_Z_V_exceptions, // the declared exceptions
  Connection_MetainfoWrapper::Connection_method_setReadOnly_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Connection_methods_setTransactionIsolation_I_V_arg_level = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "level", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Connection_methods_setTransactionIsolation_I_V_args[] = 
{
  &Connection_methods_setTransactionIsolation_I_V_arg_level,
  0
};

::acdk::lang::dmi::ClazzInfo* Connection_methods_setTransactionIsolation_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Connection_method_setTransactionIsolation_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTransactionIsolation", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_k_setTransactionIsolation", // alternative name of method
  -1, // altlabelHashCode
  Connection_methods_setTransactionIsolation_I_V_args, // the arguments
  0, //arguments count
  Connection_methods_setTransactionIsolation_I_V_exceptions, // the declared exceptions
  Connection_MetainfoWrapper::Connection_method_setTransactionIsolation_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Connection_methods_setTypeMap_INLacdk_util_RMap__V_arg_map = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "map", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Connection_methods_setTypeMap_INLacdk_util_RMap__V_args[] = 
{
  &Connection_methods_setTypeMap_INLacdk_util_RMap__V_arg_map,
  0
};

::acdk::lang::dmi::ClazzInfo* Connection_methods_setTypeMap_INLacdk_util_RMap__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Connection_method_setTypeMap_INLacdk_util_RMap__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTypeMap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_l_setTypeMap", // alternative name of method
  -1, // altlabelHashCode
  Connection_methods_setTypeMap_INLacdk_util_RMap__V_args, // the arguments
  0, //arguments count
  Connection_methods_setTypeMap_INLacdk_util_RMap__V_exceptions, // the declared exceptions
  Connection_MetainfoWrapper::Connection_method_setTypeMap_INLacdk_util_RMap__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Connection_methods[] = 
{
  &Connection_method_GetClass__L_acdk_lang_RClass_,
  &Connection_method_clearWarnings__V,
  &Connection_method_close__V,
  &Connection_method_commit__V,
  &Connection_method_createStatement__LRStatement_,
  &Connection_method_createStatement_II_LRStatement_,
  &Connection_method_getAutoCommit__Z,
  &Connection_method_getCatalog__LRString_,
  &Connection_method_getMetaData__LRDatabaseMetaData_,
  &Connection_method_getTransactionIsolation__I,
  &Connection_method_getTypeMap__Lacdk_util_RMap_,
  &Connection_method_getWarnings__LRSQLWarning_,
  &Connection_method_isClosed__Z,
  &Connection_method_isReadOnly__Z,
  &Connection_method_nativeSQL_INLRString__LRString_,
  &Connection_method_prepareCall_INLRString__LRCallableStatement_,
  &Connection_method_prepareStatement_INLRString__LRPreparedStatement_,
  &Connection_method_rollback__V,
  &Connection_method_setAutoCommit_Z_V,
  &Connection_method_setCatalog_INLRString__V,
  &Connection_method_setReadOnly_Z_V,
  &Connection_method_setTransactionIsolation_I_V,
  &Connection_method_setTypeMap_INLacdk_util_RMap__V,
  0
};


struct Connection_MetaInfoInitializer
{  Connection_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Connection::clazzInfo();
    ci->fields =  _Connection_fields;
    ci->methods =  _Connection_methods;
    ci->_scopeParent = acdk_sql_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Connection_MetaInfoInitializer Connection_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace sql


namespace acdk { 
namespace sql { 


//static
::acdk::lang::RObject
DatabaseMetaData_create_array(int length)
{
  return new ObjectArrayImpl<RDatabaseMetaData>(length);
}

//static
::acdk::lang::RObject
DatabaseMetaData_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DatabaseMetaData_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DatabaseMetaData::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_allProceduresAreCallable__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->allProceduresAreCallable();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_allTablesAreSelectable__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->allTablesAreSelectable();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_dataDefinitionCausesTransactionCommit__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->dataDefinitionCausesTransactionCommit();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_dataDefinitionIgnoredInTransactions__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->dataDefinitionIgnoredInTransactions();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_deletesAreDetected_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->deletesAreDetected(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_doesMaxRowSizeIncludeBlobs__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->doesMaxRowSizeIncludeBlobs();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
    ret = (::acdk::lang::RObject)This->getBestRowIdentifier((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), args[3].getIntVar(), args[4].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getCatalogSeparator__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
    ret = (::acdk::lang::RObject)This->getCatalogSeparator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getCatalogTerm__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
    ret = (::acdk::lang::RObject)This->getCatalogTerm();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getCatalogs__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
    ret = (::acdk::lang::RObject)This->getCatalogs();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
    ret = (::acdk::lang::RObject)This->getColumnPrivileges((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
    ret = (::acdk::lang::RObject)This->getColumns((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getConnection__LRConnection__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
    ret = (::acdk::lang::RObject)This->getConnection();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
    ret = (::acdk::lang::RObject)This->getCrossReference((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar(), (RString)args[4].getObjectVar(), (RString)args[5].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getDatabaseProductName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
    ret = (::acdk::lang::RObject)This->getDatabaseProductName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getDatabaseProductVersion__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
    ret = (::acdk::lang::RObject)This->getDatabaseProductVersion();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getDateTimeFunctions__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
    ret = (::acdk::lang::RObject)This->getDateTimeFunctions();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getDefaultTransactionIsolation__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->getDefaultTransactionIsolation();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getDriverMajorVersion__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->getDriverMajorVersion();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getDriverMinorVersion__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->getDriverMinorVersion();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getDriverName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
    ret = (::acdk::lang::RObject)This->getDriverName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getDriverVersion__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
    ret = (::acdk::lang::RObject)This->getDriverVersion();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getExportedKeys_INLRString_INLRString_INLRString__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
    ret = (::acdk::lang::RObject)This->getExportedKeys((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getExtraNameCharacters__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
    ret = (::acdk::lang::RObject)This->getExtraNameCharacters();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getIdentiferQuoteString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
    ret = (::acdk::lang::RObject)This->getIdentiferQuoteString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getImportedKeys_INLRString_INLRString_INLRString__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
    ret = (::acdk::lang::RObject)This->getImportedKeys((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getIndexInfo_INLRString_INLRString_INLRString_ZZ_LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
    ret = (::acdk::lang::RObject)This->getIndexInfo((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), args[3].getBoolVar(), args[4].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getMaxBinaryLiteralLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->getMaxBinaryLiteralLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getMaxCatalogNameLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->getMaxCatalogNameLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getMaxCharLiteralLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->getMaxCharLiteralLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getMaxColumnNameLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->getMaxColumnNameLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getMaxColumnsInGroupBy__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->getMaxColumnsInGroupBy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getMaxColumnsInIndex__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->getMaxColumnsInIndex();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getMaxColumnsInOrderBy__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->getMaxColumnsInOrderBy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getMaxColumnsInSelect__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->getMaxColumnsInSelect();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getMaxColumnsInTable__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->getMaxColumnsInTable();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getMaxConnections__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->getMaxConnections();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getMaxCursorNameLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->getMaxCursorNameLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getMaxIndexLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->getMaxIndexLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getMaxProcedureNameLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->getMaxProcedureNameLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getMaxRowSize__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->getMaxRowSize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getMaxSchemaNameLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->getMaxSchemaNameLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getMaxStatementLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->getMaxStatementLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getMaxStatements__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->getMaxStatements();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getMaxTableNameLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->getMaxTableNameLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getMaxTableUserLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->getMaxTableUserLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getMaxTablesInSelect__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->getMaxTablesInSelect();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getNumericFunctions__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
    ret = (::acdk::lang::RObject)This->getNumericFunctions();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getPrimaryKeys_INLRString_INLRString_INLRString__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
    ret = (::acdk::lang::RObject)This->getPrimaryKeys((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
    ret = (::acdk::lang::RObject)This->getProcedureColumns((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getProcedureTerm__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
    ret = (::acdk::lang::RObject)This->getProcedureTerm();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getProcedures_INLRString_INLRString_INLRString__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
    ret = (::acdk::lang::RObject)This->getProcedures((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getSQLKeywords__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
    ret = (::acdk::lang::RObject)This->getSQLKeywords();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getSchemaTerm__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
    ret = (::acdk::lang::RObject)This->getSchemaTerm();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getSchemas__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
    ret = (::acdk::lang::RObject)This->getSchemas();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getSearchStringEscape__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
    ret = (::acdk::lang::RObject)This->getSearchStringEscape();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getStringFunctions__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
    ret = (::acdk::lang::RObject)This->getStringFunctions();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getSystemFunctions__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
    ret = (::acdk::lang::RObject)This->getSystemFunctions();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getTablePrivileges_INLRString_INLRString_INLRString__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
    ret = (::acdk::lang::RObject)This->getTablePrivileges((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getTableTypes__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
    ret = (::acdk::lang::RObject)This->getTableTypes();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getTables_INLRString_INLRString_INLRString__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
    ret = (::acdk::lang::RObject)This->getTables((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getTypeInfo__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
    ret = (::acdk::lang::RObject)This->getTypeInfo();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getUDTs_INLRString_INLRString_INLRString_INLRintArray__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
    ret = (::acdk::lang::RObject)This->getUDTs((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RintArray)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getURL__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
    ret = (::acdk::lang::RObject)This->getURL();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getUserName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
    ret = (::acdk::lang::RObject)This->getUserName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_getVersionColumns_INLRString_INLRString_INLRString__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
    ret = (::acdk::lang::RObject)This->getVersionColumns((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_insertsAreDetected_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->insertsAreDetected(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_isCatalogAtStart__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->isCatalogAtStart();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_isReadOnly__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->isReadOnly();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_nullPlusNonNullIsNull__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->nullPlusNonNullIsNull();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_nullsAreSortedAtEnd__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->nullsAreSortedAtEnd();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_nullsAreSortedAtStart__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->nullsAreSortedAtStart();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_nullsAreSortedHigh__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->nullsAreSortedHigh();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_nullsAreSortedLow__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->nullsAreSortedLow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_othersDeletesAreVisible_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->othersDeletesAreVisible(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_othersInsertsAreVisible_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->othersInsertsAreVisible(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_othersUpdatesAreVisible_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->othersUpdatesAreVisible(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_ownDeletesAreVisible_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->ownDeletesAreVisible(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_ownInsertsAreVisible_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->ownInsertsAreVisible(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_ownUpdatesAreVisible_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->ownUpdatesAreVisible(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_storesLowerCaseIdentifiers__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->storesLowerCaseIdentifiers();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_storesLowerCaseQuotedIdentifiers__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->storesLowerCaseQuotedIdentifiers();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_storesMixedCaseIdentifiers__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->storesMixedCaseIdentifiers();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_storesMixedCaseQuotedIdentifiers__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->storesMixedCaseQuotedIdentifiers();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_storesUpperCaseIdentifiers__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->storesUpperCaseIdentifiers();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_storesUpperCaseQuotedIdentifiers__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->storesUpperCaseQuotedIdentifiers();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsANSI92EntryLevelSQL__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsANSI92EntryLevelSQL();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsANSI92FullSQL__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsANSI92FullSQL();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsANSI92IntermediateSQL__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsANSI92IntermediateSQL();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsAlterTableWithAddColumn__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsAlterTableWithAddColumn();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsAlterTableWithDropColumn__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsAlterTableWithDropColumn();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsBatchUpdates__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsBatchUpdates();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsCatalogInPrivilegeDefinitions__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsCatalogInPrivilegeDefinitions();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsCatalogsInDataManipulation__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsCatalogsInDataManipulation();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsCatalogsInIndexDefinitions__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsCatalogsInIndexDefinitions();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsCatalogsInProcedureCalls__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsCatalogsInProcedureCalls();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsCatalogsInTableDefinitions__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsCatalogsInTableDefinitions();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsColumnAliasing__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsColumnAliasing();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsConvert__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsConvert();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsConvert_II_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsConvert(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsCoreSQLGrammar__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsCoreSQLGrammar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsCorrelatedSubqueries__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsCorrelatedSubqueries();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsDataDefinitionAndDataManipulationTransactions__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsDataDefinitionAndDataManipulationTransactions();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsDataManipulationTransactionsOnly__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsDataManipulationTransactionsOnly();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsDifferentTableCorrelationNames__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsDifferentTableCorrelationNames();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsExpressionsInOrderBy__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsExpressionsInOrderBy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsExtendedSQLGrammar__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsExtendedSQLGrammar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsFullOuterJoins__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsFullOuterJoins();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsGroupBy__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsGroupBy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsGroupByBeyondSelect__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsGroupByBeyondSelect();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsGroupByUnrelated__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsGroupByUnrelated();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsIntegrityEnhancementFacility__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsIntegrityEnhancementFacility();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsLikeEscapeClause__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsLikeEscapeClause();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsLimitedOuterJoins__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsLimitedOuterJoins();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsMinimumSQLGrammar__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsMinimumSQLGrammar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsMixedCaseIdentifiers__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsMixedCaseIdentifiers();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsMixedCaseQuotedIdentifiers__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsMixedCaseQuotedIdentifiers();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsMultipleResultSets__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsMultipleResultSets();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsMultipleTransactions__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsMultipleTransactions();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsNonNullableColumns__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsNonNullableColumns();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsOpenCursorsAcrossCommit__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsOpenCursorsAcrossCommit();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsOpenCursorsAcrossRollback__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsOpenCursorsAcrossRollback();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsOpenStatementsAcrossCommit__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsOpenStatementsAcrossCommit();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsOpenStatementsAcrossRollback__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsOpenStatementsAcrossRollback();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsOrderByUnrelated__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsOrderByUnrelated();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsOuterJoins__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsOuterJoins();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsPositionedDelete__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsPositionedDelete();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsPositionedUpdate__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsPositionedUpdate();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsResultSetConcurrency_II_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsResultSetConcurrency(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsResultType_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsResultType(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsSchemasInDataManipulation__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsSchemasInDataManipulation();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsSchemasInIndexDefinitions__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsSchemasInIndexDefinitions();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsSchemasInPrivilegeDefinitions__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsSchemasInPrivilegeDefinitions();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsSchemasInProcedureCalls__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsSchemasInProcedureCalls();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsSchemasInTableDefinitions__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsSchemasInTableDefinitions();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsSelectForUpdate__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsSelectForUpdate();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsStoredProcedures__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsStoredProcedures();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsSubqueriesInComparisons__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsSubqueriesInComparisons();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsSubqueriesInExists__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsSubqueriesInExists();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsSubqueriesInIns__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsSubqueriesInIns();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsSubqueriesInQuantifieds__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsSubqueriesInQuantifieds();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsTableCorrelationNames__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsTableCorrelationNames();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsTransactionIsolationLevel_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsTransactionIsolationLevel(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsTransactions__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsTransactions();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsUnion__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsUnion();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_supportsUnionAll__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->supportsUnionAll();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_updatesAreDetected_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->updatesAreDetected(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_usesLocalFilePerTable__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->usesLocalFilePerTable();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatabaseMetaData_method_usesLocalFiles__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatabaseMetaData* This = dmi_cast<DatabaseMetaData>(This_);
  ret = This->usesLocalFiles();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _DatabaseMetaData_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2p_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_allProceduresAreCallable__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_allProceduresAreCallable__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_allProceduresAreCallable__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_allProceduresAreCallable__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "allProceduresAreCallable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_0_allProceduresAreCallable", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_allProceduresAreCallable__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_allProceduresAreCallable__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_allProceduresAreCallable__Z_dispatch, // invoke this method
  DatabaseMetaData_allProceduresAreCallable__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_allTablesAreSelectable__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_allTablesAreSelectable__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_allTablesAreSelectable__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_allTablesAreSelectable__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "allTablesAreSelectable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_allTablesAreSelectable", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_allTablesAreSelectable__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_allTablesAreSelectable__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_allTablesAreSelectable__Z_dispatch, // invoke this method
  DatabaseMetaData_allTablesAreSelectable__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_dataDefinitionCausesTransactionCommit__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_dataDefinitionCausesTransactionCommit__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_dataDefinitionCausesTransactionCommit__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_dataDefinitionCausesTransactionCommit__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "dataDefinitionCausesTransactionCommit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1S_dataDefinitionCausesTransactionCommit", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_dataDefinitionCausesTransactionCommit__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_dataDefinitionCausesTransactionCommit__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_dataDefinitionCausesTransactionCommit__Z_dispatch, // invoke this method
  DatabaseMetaData_dataDefinitionCausesTransactionCommit__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_dataDefinitionIgnoredInTransactions__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_dataDefinitionIgnoredInTransactions__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_dataDefinitionIgnoredInTransactions__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_dataDefinitionIgnoredInTransactions__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "dataDefinitionIgnoredInTransactions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1T_dataDefinitionIgnoredInTransactions", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_dataDefinitionIgnoredInTransactions__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_dataDefinitionIgnoredInTransactions__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_dataDefinitionIgnoredInTransactions__Z_dispatch, // invoke this method
  DatabaseMetaData_dataDefinitionIgnoredInTransactions__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_deletesAreDetected_I_Z_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_deletesAreDetected_I_Z_args[] = 
{
  &DatabaseMetaData_methods_deletesAreDetected_I_Z_arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_deletesAreDetected_I_Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_deletesAreDetected_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_deletesAreDetected_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deletesAreDetected", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2k_deletesAreDetected", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_deletesAreDetected_I_Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_deletesAreDetected_I_Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_deletesAreDetected_I_Z_dispatch, // invoke this method
  DatabaseMetaData_deletesAreDetected_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_doesMaxRowSizeIncludeBlobs__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_doesMaxRowSizeIncludeBlobs__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_doesMaxRowSizeIncludeBlobs__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_doesMaxRowSizeIncludeBlobs__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "doesMaxRowSizeIncludeBlobs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1H_doesMaxRowSizeIncludeBlobs", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_doesMaxRowSizeIncludeBlobs__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_doesMaxRowSizeIncludeBlobs__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_doesMaxRowSizeIncludeBlobs__Z_dispatch, // invoke this method
  DatabaseMetaData_doesMaxRowSizeIncludeBlobs__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_LRResultSet__arg_catalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "catalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_LRResultSet__arg_schema = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "schema", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_LRResultSet__arg_table = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "table", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_LRResultSet__arg_scope = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "scope", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_LRResultSet__arg_nullable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "nullable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_LRResultSet__args[] = 
{
  &DatabaseMetaData_methods_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_LRResultSet__arg_catalog,
  &DatabaseMetaData_methods_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_LRResultSet__arg_schema,
  &DatabaseMetaData_methods_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_LRResultSet__arg_table,
  &DatabaseMetaData_methods_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_LRResultSet__arg_scope,
  &DatabaseMetaData_methods_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_LRResultSet__arg_nullable,
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_LRResultSet__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_LRResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBestRowIdentifier", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_23_getBestRowIdentifier", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_LRResultSet__args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_LRResultSet__exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_LRResultSet__dispatch, // invoke this method
  DatabaseMetaData_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_LRResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getCatalogSeparator__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getCatalogSeparator__LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getCatalogSeparator__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getCatalogSeparator__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCatalogSeparator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_12_getCatalogSeparator", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getCatalogSeparator__LRString__args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getCatalogSeparator__LRString__exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getCatalogSeparator__LRString__dispatch, // invoke this method
  DatabaseMetaData_getCatalogSeparator__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getCatalogTerm__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getCatalogTerm__LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getCatalogTerm__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getCatalogTerm__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCatalogTerm", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_10_getCatalogTerm", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getCatalogTerm__LRString__args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getCatalogTerm__LRString__exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getCatalogTerm__LRString__dispatch, // invoke this method
  DatabaseMetaData_getCatalogTerm__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getCatalogs__LRResultSet__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getCatalogs__LRResultSet__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getCatalogs__LRResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getCatalogs__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCatalogs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_1Y_getCatalogs", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getCatalogs__LRResultSet__args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getCatalogs__LRResultSet__exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getCatalogs__LRResultSet__dispatch, // invoke this method
  DatabaseMetaData_getCatalogs__LRResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_catalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "catalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_schema = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "schema", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_table = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "table", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_columnPattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnPattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__LRResultSet__args[] = 
{
  &DatabaseMetaData_methods_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_catalog,
  &DatabaseMetaData_methods_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_schema,
  &DatabaseMetaData_methods_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_table,
  &DatabaseMetaData_methods_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_columnPattern,
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__LRResultSet__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__LRResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColumnPrivileges", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_21_getColumnPrivileges", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__LRResultSet__args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__LRResultSet__exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__LRResultSet__dispatch, // invoke this method
  DatabaseMetaData_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__LRResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_catalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "catalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_schemaPattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "schemaPattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_namePattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "namePattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_columnPattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnPattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__args[] = 
{
  &DatabaseMetaData_methods_getColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_catalog,
  &DatabaseMetaData_methods_getColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_schemaPattern,
  &DatabaseMetaData_methods_getColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_namePattern,
  &DatabaseMetaData_methods_getColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_columnPattern,
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColumns", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_20_getColumns", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__dispatch, // invoke this method
  DatabaseMetaData_getColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getConnection__LRConnection__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getConnection__LRConnection__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getConnection__LRConnection__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getConnection__LRConnection_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getConnection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RConnection::clazzInfo(), // return type
  "_2o_getConnection", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getConnection__LRConnection__args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getConnection__LRConnection__exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getConnection__LRConnection__dispatch, // invoke this method
  DatabaseMetaData_getConnection__LRConnection__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_primCatalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "primCatalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_primSchema = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "primSchema", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_primTable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "primTable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_forCatalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "forCatalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_forSchema = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "forSchema", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_forTable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "forTable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRResultSet__args[] = 
{
  &DatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_primCatalog,
  &DatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_primSchema,
  &DatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_primTable,
  &DatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_forCatalog,
  &DatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_forSchema,
  &DatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_forTable,
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRResultSet__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCrossReference", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_28_getCrossReference", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRResultSet__args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRResultSet__exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRResultSet__dispatch, // invoke this method
  DatabaseMetaData_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getDatabaseProductName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getDatabaseProductName__LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getDatabaseProductName__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getDatabaseProductName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDatabaseProductName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_9_getDatabaseProductName", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getDatabaseProductName__LRString__args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getDatabaseProductName__LRString__exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getDatabaseProductName__LRString__dispatch, // invoke this method
  DatabaseMetaData_getDatabaseProductName__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getDatabaseProductVersion__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getDatabaseProductVersion__LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getDatabaseProductVersion__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getDatabaseProductVersion__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDatabaseProductVersion", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_a_getDatabaseProductVersion", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getDatabaseProductVersion__LRString__args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getDatabaseProductVersion__LRString__exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getDatabaseProductVersion__LRString__dispatch, // invoke this method
  DatabaseMetaData_getDatabaseProductVersion__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getDateTimeFunctions__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getDateTimeFunctions__LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getDateTimeFunctions__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getDateTimeFunctions__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDateTimeFunctions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_u_getDateTimeFunctions", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getDateTimeFunctions__LRString__args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getDateTimeFunctions__LRString__exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getDateTimeFunctions__LRString__dispatch, // invoke this method
  DatabaseMetaData_getDateTimeFunctions__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getDefaultTransactionIsolation__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getDefaultTransactionIsolation__I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getDefaultTransactionIsolation__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getDefaultTransactionIsolation__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDefaultTransactionIsolation", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1N_getDefaultTransactionIsolation", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getDefaultTransactionIsolation__I_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getDefaultTransactionIsolation__I_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getDefaultTransactionIsolation__I_dispatch, // invoke this method
  DatabaseMetaData_getDefaultTransactionIsolation__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getDriverMajorVersion__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getDriverMajorVersion__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getDriverMajorVersion__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDriverMajorVersion", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_d_getDriverMajorVersion", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getDriverMajorVersion__I_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getDriverMajorVersion__I_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getDriverMajorVersion__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getDriverMinorVersion__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getDriverMinorVersion__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getDriverMinorVersion__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDriverMinorVersion", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_e_getDriverMinorVersion", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getDriverMinorVersion__I_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getDriverMinorVersion__I_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getDriverMinorVersion__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getDriverName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getDriverName__LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getDriverName__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getDriverName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDriverName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_b_getDriverName", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getDriverName__LRString__args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getDriverName__LRString__exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getDriverName__LRString__dispatch, // invoke this method
  DatabaseMetaData_getDriverName__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getDriverVersion__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getDriverVersion__LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getDriverVersion__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getDriverVersion__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDriverVersion", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_c_getDriverVersion", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getDriverVersion__LRString__args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getDriverVersion__LRString__exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getDriverVersion__LRString__dispatch, // invoke this method
  DatabaseMetaData_getDriverVersion__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getExportedKeys_INLRString_INLRString_INLRString__LRResultSet__arg_catalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "catalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getExportedKeys_INLRString_INLRString_INLRString__LRResultSet__arg_schema = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "schema", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getExportedKeys_INLRString_INLRString_INLRString__LRResultSet__arg_table = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "table", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getExportedKeys_INLRString_INLRString_INLRString__LRResultSet__args[] = 
{
  &DatabaseMetaData_methods_getExportedKeys_INLRString_INLRString_INLRString__LRResultSet__arg_catalog,
  &DatabaseMetaData_methods_getExportedKeys_INLRString_INLRString_INLRString__LRResultSet__arg_schema,
  &DatabaseMetaData_methods_getExportedKeys_INLRString_INLRString_INLRString__LRResultSet__arg_table,
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getExportedKeys_INLRString_INLRString_INLRString__LRResultSet__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getExportedKeys_INLRString_INLRString_INLRString__LRResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getExportedKeys_INLRString_INLRString_INLRString__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getExportedKeys", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_27_getExportedKeys", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getExportedKeys_INLRString_INLRString_INLRString__LRResultSet__args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getExportedKeys_INLRString_INLRString_INLRString__LRResultSet__exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getExportedKeys_INLRString_INLRString_INLRString__LRResultSet__dispatch, // invoke this method
  DatabaseMetaData_getExportedKeys_INLRString_INLRString_INLRString__LRResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getExtraNameCharacters__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getExtraNameCharacters__LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getExtraNameCharacters__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getExtraNameCharacters__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getExtraNameCharacters", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_w_getExtraNameCharacters", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getExtraNameCharacters__LRString__args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getExtraNameCharacters__LRString__exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getExtraNameCharacters__LRString__dispatch, // invoke this method
  DatabaseMetaData_getExtraNameCharacters__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getIdentiferQuoteString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getIdentiferQuoteString__LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getIdentiferQuoteString__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getIdentiferQuoteString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getIdentiferQuoteString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_p_getIdentiferQuoteString", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getIdentiferQuoteString__LRString__args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getIdentiferQuoteString__LRString__exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getIdentiferQuoteString__LRString__dispatch, // invoke this method
  DatabaseMetaData_getIdentiferQuoteString__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getImportedKeys_INLRString_INLRString_INLRString__LRResultSet__arg_catalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "catalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getImportedKeys_INLRString_INLRString_INLRString__LRResultSet__arg_schema = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "schema", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getImportedKeys_INLRString_INLRString_INLRString__LRResultSet__arg_table = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "table", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getImportedKeys_INLRString_INLRString_INLRString__LRResultSet__args[] = 
{
  &DatabaseMetaData_methods_getImportedKeys_INLRString_INLRString_INLRString__LRResultSet__arg_catalog,
  &DatabaseMetaData_methods_getImportedKeys_INLRString_INLRString_INLRString__LRResultSet__arg_schema,
  &DatabaseMetaData_methods_getImportedKeys_INLRString_INLRString_INLRString__LRResultSet__arg_table,
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getImportedKeys_INLRString_INLRString_INLRString__LRResultSet__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getImportedKeys_INLRString_INLRString_INLRString__LRResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getImportedKeys_INLRString_INLRString_INLRString__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getImportedKeys", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_26_getImportedKeys", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getImportedKeys_INLRString_INLRString_INLRString__LRResultSet__args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getImportedKeys_INLRString_INLRString_INLRString__LRResultSet__exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getImportedKeys_INLRString_INLRString_INLRString__LRResultSet__dispatch, // invoke this method
  DatabaseMetaData_getImportedKeys_INLRString_INLRString_INLRString__LRResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getIndexInfo_INLRString_INLRString_INLRString_ZZ_LRResultSet__arg_catalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "catalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getIndexInfo_INLRString_INLRString_INLRString_ZZ_LRResultSet__arg_schema = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "schema", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getIndexInfo_INLRString_INLRString_INLRString_ZZ_LRResultSet__arg_table = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "table", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getIndexInfo_INLRString_INLRString_INLRString_ZZ_LRResultSet__arg_unique = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "unique", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getIndexInfo_INLRString_INLRString_INLRString_ZZ_LRResultSet__arg_approx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "approx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getIndexInfo_INLRString_INLRString_INLRString_ZZ_LRResultSet__args[] = 
{
  &DatabaseMetaData_methods_getIndexInfo_INLRString_INLRString_INLRString_ZZ_LRResultSet__arg_catalog,
  &DatabaseMetaData_methods_getIndexInfo_INLRString_INLRString_INLRString_ZZ_LRResultSet__arg_schema,
  &DatabaseMetaData_methods_getIndexInfo_INLRString_INLRString_INLRString_ZZ_LRResultSet__arg_table,
  &DatabaseMetaData_methods_getIndexInfo_INLRString_INLRString_INLRString_ZZ_LRResultSet__arg_unique,
  &DatabaseMetaData_methods_getIndexInfo_INLRString_INLRString_INLRString_ZZ_LRResultSet__arg_approx,
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getIndexInfo_INLRString_INLRString_INLRString_ZZ_LRResultSet__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getIndexInfo_INLRString_INLRString_INLRString_ZZ_LRResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getIndexInfo_INLRString_INLRString_INLRString_ZZ_LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getIndexInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_2a_getIndexInfo", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getIndexInfo_INLRString_INLRString_INLRString_ZZ_LRResultSet__args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getIndexInfo_INLRString_INLRString_INLRString_ZZ_LRResultSet__exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getIndexInfo_INLRString_INLRString_INLRString_ZZ_LRResultSet__dispatch, // invoke this method
  DatabaseMetaData_getIndexInfo_INLRString_INLRString_INLRString_ZZ_LRResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getMaxBinaryLiteralLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getMaxBinaryLiteralLength__I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getMaxBinaryLiteralLength__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getMaxBinaryLiteralLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxBinaryLiteralLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1s_getMaxBinaryLiteralLength", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getMaxBinaryLiteralLength__I_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getMaxBinaryLiteralLength__I_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getMaxBinaryLiteralLength__I_dispatch, // invoke this method
  DatabaseMetaData_getMaxBinaryLiteralLength__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getMaxCatalogNameLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getMaxCatalogNameLength__I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getMaxCatalogNameLength__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getMaxCatalogNameLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxCatalogNameLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1F_getMaxCatalogNameLength", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getMaxCatalogNameLength__I_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getMaxCatalogNameLength__I_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getMaxCatalogNameLength__I_dispatch, // invoke this method
  DatabaseMetaData_getMaxCatalogNameLength__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getMaxCharLiteralLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getMaxCharLiteralLength__I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getMaxCharLiteralLength__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getMaxCharLiteralLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxCharLiteralLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1t_getMaxCharLiteralLength", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getMaxCharLiteralLength__I_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getMaxCharLiteralLength__I_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getMaxCharLiteralLength__I_dispatch, // invoke this method
  DatabaseMetaData_getMaxCharLiteralLength__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getMaxColumnNameLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getMaxColumnNameLength__I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getMaxColumnNameLength__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getMaxColumnNameLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxColumnNameLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1u_getMaxColumnNameLength", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getMaxColumnNameLength__I_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getMaxColumnNameLength__I_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getMaxColumnNameLength__I_dispatch, // invoke this method
  DatabaseMetaData_getMaxColumnNameLength__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getMaxColumnsInGroupBy__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getMaxColumnsInGroupBy__I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getMaxColumnsInGroupBy__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getMaxColumnsInGroupBy__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxColumnsInGroupBy", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1v_getMaxColumnsInGroupBy", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getMaxColumnsInGroupBy__I_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getMaxColumnsInGroupBy__I_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getMaxColumnsInGroupBy__I_dispatch, // invoke this method
  DatabaseMetaData_getMaxColumnsInGroupBy__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getMaxColumnsInIndex__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getMaxColumnsInIndex__I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getMaxColumnsInIndex__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getMaxColumnsInIndex__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxColumnsInIndex", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1w_getMaxColumnsInIndex", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getMaxColumnsInIndex__I_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getMaxColumnsInIndex__I_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getMaxColumnsInIndex__I_dispatch, // invoke this method
  DatabaseMetaData_getMaxColumnsInIndex__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getMaxColumnsInOrderBy__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getMaxColumnsInOrderBy__I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getMaxColumnsInOrderBy__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getMaxColumnsInOrderBy__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxColumnsInOrderBy", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1x_getMaxColumnsInOrderBy", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getMaxColumnsInOrderBy__I_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getMaxColumnsInOrderBy__I_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getMaxColumnsInOrderBy__I_dispatch, // invoke this method
  DatabaseMetaData_getMaxColumnsInOrderBy__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getMaxColumnsInSelect__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getMaxColumnsInSelect__I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getMaxColumnsInSelect__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getMaxColumnsInSelect__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxColumnsInSelect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1y_getMaxColumnsInSelect", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getMaxColumnsInSelect__I_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getMaxColumnsInSelect__I_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getMaxColumnsInSelect__I_dispatch, // invoke this method
  DatabaseMetaData_getMaxColumnsInSelect__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getMaxColumnsInTable__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getMaxColumnsInTable__I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getMaxColumnsInTable__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getMaxColumnsInTable__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxColumnsInTable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1z_getMaxColumnsInTable", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getMaxColumnsInTable__I_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getMaxColumnsInTable__I_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getMaxColumnsInTable__I_dispatch, // invoke this method
  DatabaseMetaData_getMaxColumnsInTable__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getMaxConnections__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getMaxConnections__I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getMaxConnections__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getMaxConnections__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxConnections", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1A_getMaxConnections", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getMaxConnections__I_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getMaxConnections__I_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getMaxConnections__I_dispatch, // invoke this method
  DatabaseMetaData_getMaxConnections__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getMaxCursorNameLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getMaxCursorNameLength__I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getMaxCursorNameLength__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getMaxCursorNameLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxCursorNameLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1B_getMaxCursorNameLength", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getMaxCursorNameLength__I_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getMaxCursorNameLength__I_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getMaxCursorNameLength__I_dispatch, // invoke this method
  DatabaseMetaData_getMaxCursorNameLength__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getMaxIndexLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getMaxIndexLength__I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getMaxIndexLength__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getMaxIndexLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxIndexLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1C_getMaxIndexLength", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getMaxIndexLength__I_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getMaxIndexLength__I_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getMaxIndexLength__I_dispatch, // invoke this method
  DatabaseMetaData_getMaxIndexLength__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getMaxProcedureNameLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getMaxProcedureNameLength__I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getMaxProcedureNameLength__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getMaxProcedureNameLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxProcedureNameLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1E_getMaxProcedureNameLength", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getMaxProcedureNameLength__I_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getMaxProcedureNameLength__I_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getMaxProcedureNameLength__I_dispatch, // invoke this method
  DatabaseMetaData_getMaxProcedureNameLength__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getMaxRowSize__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getMaxRowSize__I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getMaxRowSize__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getMaxRowSize__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxRowSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1G_getMaxRowSize", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getMaxRowSize__I_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getMaxRowSize__I_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getMaxRowSize__I_dispatch, // invoke this method
  DatabaseMetaData_getMaxRowSize__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getMaxSchemaNameLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getMaxSchemaNameLength__I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getMaxSchemaNameLength__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getMaxSchemaNameLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxSchemaNameLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1D_getMaxSchemaNameLength", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getMaxSchemaNameLength__I_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getMaxSchemaNameLength__I_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getMaxSchemaNameLength__I_dispatch, // invoke this method
  DatabaseMetaData_getMaxSchemaNameLength__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getMaxStatementLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getMaxStatementLength__I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getMaxStatementLength__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getMaxStatementLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxStatementLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1I_getMaxStatementLength", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getMaxStatementLength__I_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getMaxStatementLength__I_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getMaxStatementLength__I_dispatch, // invoke this method
  DatabaseMetaData_getMaxStatementLength__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getMaxStatements__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getMaxStatements__I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getMaxStatements__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getMaxStatements__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxStatements", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1J_getMaxStatements", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getMaxStatements__I_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getMaxStatements__I_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getMaxStatements__I_dispatch, // invoke this method
  DatabaseMetaData_getMaxStatements__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getMaxTableNameLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getMaxTableNameLength__I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getMaxTableNameLength__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getMaxTableNameLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxTableNameLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1K_getMaxTableNameLength", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getMaxTableNameLength__I_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getMaxTableNameLength__I_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getMaxTableNameLength__I_dispatch, // invoke this method
  DatabaseMetaData_getMaxTableNameLength__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getMaxTableUserLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getMaxTableUserLength__I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getMaxTableUserLength__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getMaxTableUserLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxTableUserLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1M_getMaxTableUserLength", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getMaxTableUserLength__I_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getMaxTableUserLength__I_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getMaxTableUserLength__I_dispatch, // invoke this method
  DatabaseMetaData_getMaxTableUserLength__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getMaxTablesInSelect__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getMaxTablesInSelect__I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getMaxTablesInSelect__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getMaxTablesInSelect__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxTablesInSelect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1L_getMaxTablesInSelect", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getMaxTablesInSelect__I_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getMaxTablesInSelect__I_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getMaxTablesInSelect__I_dispatch, // invoke this method
  DatabaseMetaData_getMaxTablesInSelect__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getNumericFunctions__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getNumericFunctions__LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getNumericFunctions__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getNumericFunctions__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNumericFunctions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_r_getNumericFunctions", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getNumericFunctions__LRString__args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getNumericFunctions__LRString__exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getNumericFunctions__LRString__dispatch, // invoke this method
  DatabaseMetaData_getNumericFunctions__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getPrimaryKeys_INLRString_INLRString_INLRString__LRResultSet__arg_catalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "catalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getPrimaryKeys_INLRString_INLRString_INLRString__LRResultSet__arg_schema = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "schema", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getPrimaryKeys_INLRString_INLRString_INLRString__LRResultSet__arg_table = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "table", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getPrimaryKeys_INLRString_INLRString_INLRString__LRResultSet__args[] = 
{
  &DatabaseMetaData_methods_getPrimaryKeys_INLRString_INLRString_INLRString__LRResultSet__arg_catalog,
  &DatabaseMetaData_methods_getPrimaryKeys_INLRString_INLRString_INLRString__LRResultSet__arg_schema,
  &DatabaseMetaData_methods_getPrimaryKeys_INLRString_INLRString_INLRString__LRResultSet__arg_table,
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getPrimaryKeys_INLRString_INLRString_INLRString__LRResultSet__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getPrimaryKeys_INLRString_INLRString_INLRString__LRResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getPrimaryKeys_INLRString_INLRString_INLRString__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPrimaryKeys", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_25_getPrimaryKeys", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getPrimaryKeys_INLRString_INLRString_INLRString__LRResultSet__args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getPrimaryKeys_INLRString_INLRString_INLRString__LRResultSet__exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getPrimaryKeys_INLRString_INLRString_INLRString__LRResultSet__dispatch, // invoke this method
  DatabaseMetaData_getPrimaryKeys_INLRString_INLRString_INLRString__LRResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_catalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "catalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_schemaPattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "schemaPattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_namePattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "namePattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_columnPattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnPattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__args[] = 
{
  &DatabaseMetaData_methods_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_catalog,
  &DatabaseMetaData_methods_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_schemaPattern,
  &DatabaseMetaData_methods_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_namePattern,
  &DatabaseMetaData_methods_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_columnPattern,
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getProcedureColumns", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_1V_getProcedureColumns", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__dispatch, // invoke this method
  DatabaseMetaData_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getProcedureTerm__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getProcedureTerm__LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getProcedureTerm__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getProcedureTerm__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getProcedureTerm", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_Z_getProcedureTerm", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getProcedureTerm__LRString__args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getProcedureTerm__LRString__exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getProcedureTerm__LRString__dispatch, // invoke this method
  DatabaseMetaData_getProcedureTerm__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getProcedures_INLRString_INLRString_INLRString__LRResultSet__arg_catalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "catalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getProcedures_INLRString_INLRString_INLRString__LRResultSet__arg_schemaPattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "schemaPattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getProcedures_INLRString_INLRString_INLRString__LRResultSet__arg_namePattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "namePattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getProcedures_INLRString_INLRString_INLRString__LRResultSet__args[] = 
{
  &DatabaseMetaData_methods_getProcedures_INLRString_INLRString_INLRString__LRResultSet__arg_catalog,
  &DatabaseMetaData_methods_getProcedures_INLRString_INLRString_INLRString__LRResultSet__arg_schemaPattern,
  &DatabaseMetaData_methods_getProcedures_INLRString_INLRString_INLRString__LRResultSet__arg_namePattern,
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getProcedures_INLRString_INLRString_INLRString__LRResultSet__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getProcedures_INLRString_INLRString_INLRString__LRResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getProcedures_INLRString_INLRString_INLRString__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getProcedures", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_1U_getProcedures", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getProcedures_INLRString_INLRString_INLRString__LRResultSet__args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getProcedures_INLRString_INLRString_INLRString__LRResultSet__exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getProcedures_INLRString_INLRString_INLRString__LRResultSet__dispatch, // invoke this method
  DatabaseMetaData_getProcedures_INLRString_INLRString_INLRString__LRResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getSQLKeywords__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getSQLKeywords__LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getSQLKeywords__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getSQLKeywords__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSQLKeywords", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_q_getSQLKeywords", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getSQLKeywords__LRString__args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getSQLKeywords__LRString__exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getSQLKeywords__LRString__dispatch, // invoke this method
  DatabaseMetaData_getSQLKeywords__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getSchemaTerm__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getSchemaTerm__LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getSchemaTerm__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getSchemaTerm__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSchemaTerm", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_Y_getSchemaTerm", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getSchemaTerm__LRString__args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getSchemaTerm__LRString__exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getSchemaTerm__LRString__dispatch, // invoke this method
  DatabaseMetaData_getSchemaTerm__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getSchemas__LRResultSet__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getSchemas__LRResultSet__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getSchemas__LRResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getSchemas__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSchemas", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_1X_getSchemas", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getSchemas__LRResultSet__args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getSchemas__LRResultSet__exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getSchemas__LRResultSet__dispatch, // invoke this method
  DatabaseMetaData_getSchemas__LRResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getSearchStringEscape__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getSearchStringEscape__LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getSearchStringEscape__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getSearchStringEscape__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSearchStringEscape", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_v_getSearchStringEscape", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getSearchStringEscape__LRString__args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getSearchStringEscape__LRString__exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getSearchStringEscape__LRString__dispatch, // invoke this method
  DatabaseMetaData_getSearchStringEscape__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getStringFunctions__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getStringFunctions__LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getStringFunctions__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getStringFunctions__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getStringFunctions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_s_getStringFunctions", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getStringFunctions__LRString__args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getStringFunctions__LRString__exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getStringFunctions__LRString__dispatch, // invoke this method
  DatabaseMetaData_getStringFunctions__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getSystemFunctions__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getSystemFunctions__LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getSystemFunctions__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getSystemFunctions__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSystemFunctions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_t_getSystemFunctions", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getSystemFunctions__LRString__args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getSystemFunctions__LRString__exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getSystemFunctions__LRString__dispatch, // invoke this method
  DatabaseMetaData_getSystemFunctions__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getTablePrivileges_INLRString_INLRString_INLRString__LRResultSet__arg_catalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "catalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getTablePrivileges_INLRString_INLRString_INLRString__LRResultSet__arg_schema = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "schema", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getTablePrivileges_INLRString_INLRString_INLRString__LRResultSet__arg_table = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "table", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getTablePrivileges_INLRString_INLRString_INLRString__LRResultSet__args[] = 
{
  &DatabaseMetaData_methods_getTablePrivileges_INLRString_INLRString_INLRString__LRResultSet__arg_catalog,
  &DatabaseMetaData_methods_getTablePrivileges_INLRString_INLRString_INLRString__LRResultSet__arg_schema,
  &DatabaseMetaData_methods_getTablePrivileges_INLRString_INLRString_INLRString__LRResultSet__arg_table,
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getTablePrivileges_INLRString_INLRString_INLRString__LRResultSet__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getTablePrivileges_INLRString_INLRString_INLRString__LRResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getTablePrivileges_INLRString_INLRString_INLRString__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTablePrivileges", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_22_getTablePrivileges", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getTablePrivileges_INLRString_INLRString_INLRString__LRResultSet__args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getTablePrivileges_INLRString_INLRString_INLRString__LRResultSet__exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getTablePrivileges_INLRString_INLRString_INLRString__LRResultSet__dispatch, // invoke this method
  DatabaseMetaData_getTablePrivileges_INLRString_INLRString_INLRString__LRResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getTableTypes__LRResultSet__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getTableTypes__LRResultSet__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getTableTypes__LRResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getTableTypes__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTableTypes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_1Z_getTableTypes", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getTableTypes__LRResultSet__args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getTableTypes__LRResultSet__exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getTableTypes__LRResultSet__dispatch, // invoke this method
  DatabaseMetaData_getTableTypes__LRResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getTables_INLRString_INLRString_INLRString__LRResultSet__arg_catalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "catalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getTables_INLRString_INLRString_INLRString__LRResultSet__arg_schemaPattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "schemaPattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getTables_INLRString_INLRString_INLRString__LRResultSet__arg_namePattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "namePattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getTables_INLRString_INLRString_INLRString__LRResultSet__args[] = 
{
  &DatabaseMetaData_methods_getTables_INLRString_INLRString_INLRString__LRResultSet__arg_catalog,
  &DatabaseMetaData_methods_getTables_INLRString_INLRString_INLRString__LRResultSet__arg_schemaPattern,
  &DatabaseMetaData_methods_getTables_INLRString_INLRString_INLRString__LRResultSet__arg_namePattern,
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getTables_INLRString_INLRString_INLRString__LRResultSet__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getTables_INLRString_INLRString_INLRString__LRResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getTables_INLRString_INLRString_INLRString__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTables", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_1W_getTables", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getTables_INLRString_INLRString_INLRString__LRResultSet__args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getTables_INLRString_INLRString_INLRString__LRResultSet__exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getTables_INLRString_INLRString_INLRString__LRResultSet__dispatch, // invoke this method
  DatabaseMetaData_getTables_INLRString_INLRString_INLRString__LRResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getTypeInfo__LRResultSet__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getTypeInfo__LRResultSet__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getTypeInfo__LRResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getTypeInfo__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTypeInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_29_getTypeInfo", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getTypeInfo__LRResultSet__args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getTypeInfo__LRResultSet__exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getTypeInfo__LRResultSet__dispatch, // invoke this method
  DatabaseMetaData_getTypeInfo__LRResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getUDTs_INLRString_INLRString_INLRString_INLRintArray__LRResultSet__arg_catalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "catalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getUDTs_INLRString_INLRString_INLRString_INLRintArray__LRResultSet__arg_schema = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "schema", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getUDTs_INLRString_INLRString_INLRString_INLRintArray__LRResultSet__arg_typePattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "typePattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getUDTs_INLRString_INLRString_INLRString_INLRintArray__LRResultSet__arg_types = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "types", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RintArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getUDTs_INLRString_INLRString_INLRString_INLRintArray__LRResultSet__args[] = 
{
  &DatabaseMetaData_methods_getUDTs_INLRString_INLRString_INLRString_INLRintArray__LRResultSet__arg_catalog,
  &DatabaseMetaData_methods_getUDTs_INLRString_INLRString_INLRString_INLRintArray__LRResultSet__arg_schema,
  &DatabaseMetaData_methods_getUDTs_INLRString_INLRString_INLRString_INLRintArray__LRResultSet__arg_typePattern,
  &DatabaseMetaData_methods_getUDTs_INLRString_INLRString_INLRString_INLRintArray__LRResultSet__arg_types,
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getUDTs_INLRString_INLRString_INLRString_INLRintArray__LRResultSet__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getUDTs_INLRString_INLRString_INLRString_INLRintArray__LRResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getUDTs_INLRString_INLRString_INLRString_INLRintArray__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getUDTs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_2n_getUDTs", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getUDTs_INLRString_INLRString_INLRString_INLRintArray__LRResultSet__args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getUDTs_INLRString_INLRString_INLRString_INLRintArray__LRResultSet__exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getUDTs_INLRString_INLRString_INLRString_INLRintArray__LRResultSet__dispatch, // invoke this method
  DatabaseMetaData_getUDTs_INLRString_INLRString_INLRString_INLRintArray__LRResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getURL__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getURL__LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getURL__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getURL__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getURL", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_getURL", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getURL__LRString__args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getURL__LRString__exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getURL__LRString__dispatch, // invoke this method
  DatabaseMetaData_getURL__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getUserName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getUserName__LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getUserName__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getUserName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getUserName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_getUserName", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getUserName__LRString__args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getUserName__LRString__exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getUserName__LRString__dispatch, // invoke this method
  DatabaseMetaData_getUserName__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getVersionColumns_INLRString_INLRString_INLRString__LRResultSet__arg_catalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "catalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getVersionColumns_INLRString_INLRString_INLRString__LRResultSet__arg_schema = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "schema", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_getVersionColumns_INLRString_INLRString_INLRString__LRResultSet__arg_table = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "table", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_getVersionColumns_INLRString_INLRString_INLRString__LRResultSet__args[] = 
{
  &DatabaseMetaData_methods_getVersionColumns_INLRString_INLRString_INLRString__LRResultSet__arg_catalog,
  &DatabaseMetaData_methods_getVersionColumns_INLRString_INLRString_INLRString__LRResultSet__arg_schema,
  &DatabaseMetaData_methods_getVersionColumns_INLRString_INLRString_INLRString__LRResultSet__arg_table,
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_getVersionColumns_INLRString_INLRString_INLRString__LRResultSet__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_getVersionColumns_INLRString_INLRString_INLRString__LRResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_getVersionColumns_INLRString_INLRString_INLRString__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getVersionColumns", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_24_getVersionColumns", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_getVersionColumns_INLRString_INLRString_INLRString__LRResultSet__args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_getVersionColumns_INLRString_INLRString_INLRString__LRResultSet__exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_getVersionColumns_INLRString_INLRString_INLRString__LRResultSet__dispatch, // invoke this method
  DatabaseMetaData_getVersionColumns_INLRString_INLRString_INLRString__LRResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_insertsAreDetected_I_Z_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_insertsAreDetected_I_Z_args[] = 
{
  &DatabaseMetaData_methods_insertsAreDetected_I_Z_arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_insertsAreDetected_I_Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_insertsAreDetected_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_insertsAreDetected_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insertsAreDetected", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2l_insertsAreDetected", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_insertsAreDetected_I_Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_insertsAreDetected_I_Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_insertsAreDetected_I_Z_dispatch, // invoke this method
  DatabaseMetaData_insertsAreDetected_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_isCatalogAtStart__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_isCatalogAtStart__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_isCatalogAtStart__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_isCatalogAtStart__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isCatalogAtStart", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_11_isCatalogAtStart", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_isCatalogAtStart__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_isCatalogAtStart__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_isCatalogAtStart__Z_dispatch, // invoke this method
  DatabaseMetaData_isCatalogAtStart__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_isReadOnly__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_isReadOnly__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_isReadOnly__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_isReadOnly__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isReadOnly", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_isReadOnly", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_isReadOnly__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_isReadOnly__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_isReadOnly__Z_dispatch, // invoke this method
  DatabaseMetaData_isReadOnly__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_nullPlusNonNullIsNull__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_nullPlusNonNullIsNull__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_nullPlusNonNullIsNull__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_nullPlusNonNullIsNull__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nullPlusNonNullIsNull", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_A_nullPlusNonNullIsNull", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_nullPlusNonNullIsNull__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_nullPlusNonNullIsNull__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_nullPlusNonNullIsNull__Z_dispatch, // invoke this method
  DatabaseMetaData_nullPlusNonNullIsNull__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_nullsAreSortedAtEnd__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_nullsAreSortedAtEnd__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_nullsAreSortedAtEnd__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_nullsAreSortedAtEnd__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nullsAreSortedAtEnd", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_8_nullsAreSortedAtEnd", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_nullsAreSortedAtEnd__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_nullsAreSortedAtEnd__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_nullsAreSortedAtEnd__Z_dispatch, // invoke this method
  DatabaseMetaData_nullsAreSortedAtEnd__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_nullsAreSortedAtStart__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_nullsAreSortedAtStart__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_nullsAreSortedAtStart__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_nullsAreSortedAtStart__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nullsAreSortedAtStart", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_nullsAreSortedAtStart", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_nullsAreSortedAtStart__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_nullsAreSortedAtStart__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_nullsAreSortedAtStart__Z_dispatch, // invoke this method
  DatabaseMetaData_nullsAreSortedAtStart__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_nullsAreSortedHigh__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_nullsAreSortedHigh__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_nullsAreSortedHigh__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_nullsAreSortedHigh__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nullsAreSortedHigh", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_nullsAreSortedHigh", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_nullsAreSortedHigh__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_nullsAreSortedHigh__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_nullsAreSortedHigh__Z_dispatch, // invoke this method
  DatabaseMetaData_nullsAreSortedHigh__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_nullsAreSortedLow__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_nullsAreSortedLow__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_nullsAreSortedLow__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_nullsAreSortedLow__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nullsAreSortedLow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_nullsAreSortedLow", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_nullsAreSortedLow__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_nullsAreSortedLow__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_nullsAreSortedLow__Z_dispatch, // invoke this method
  DatabaseMetaData_nullsAreSortedLow__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_othersDeletesAreVisible_I_Z_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_othersDeletesAreVisible_I_Z_args[] = 
{
  &DatabaseMetaData_methods_othersDeletesAreVisible_I_Z_arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_othersDeletesAreVisible_I_Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_othersDeletesAreVisible_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_othersDeletesAreVisible_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "othersDeletesAreVisible", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2h_othersDeletesAreVisible", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_othersDeletesAreVisible_I_Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_othersDeletesAreVisible_I_Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_othersDeletesAreVisible_I_Z_dispatch, // invoke this method
  DatabaseMetaData_othersDeletesAreVisible_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_othersInsertsAreVisible_I_Z_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_othersInsertsAreVisible_I_Z_args[] = 
{
  &DatabaseMetaData_methods_othersInsertsAreVisible_I_Z_arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_othersInsertsAreVisible_I_Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_othersInsertsAreVisible_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_othersInsertsAreVisible_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "othersInsertsAreVisible", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2i_othersInsertsAreVisible", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_othersInsertsAreVisible_I_Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_othersInsertsAreVisible_I_Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_othersInsertsAreVisible_I_Z_dispatch, // invoke this method
  DatabaseMetaData_othersInsertsAreVisible_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_othersUpdatesAreVisible_I_Z_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_othersUpdatesAreVisible_I_Z_args[] = 
{
  &DatabaseMetaData_methods_othersUpdatesAreVisible_I_Z_arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_othersUpdatesAreVisible_I_Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_othersUpdatesAreVisible_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_othersUpdatesAreVisible_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "othersUpdatesAreVisible", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2g_othersUpdatesAreVisible", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_othersUpdatesAreVisible_I_Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_othersUpdatesAreVisible_I_Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_othersUpdatesAreVisible_I_Z_dispatch, // invoke this method
  DatabaseMetaData_othersUpdatesAreVisible_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_ownDeletesAreVisible_I_Z_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_ownDeletesAreVisible_I_Z_args[] = 
{
  &DatabaseMetaData_methods_ownDeletesAreVisible_I_Z_arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_ownDeletesAreVisible_I_Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_ownDeletesAreVisible_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_ownDeletesAreVisible_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ownDeletesAreVisible", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2e_ownDeletesAreVisible", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_ownDeletesAreVisible_I_Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_ownDeletesAreVisible_I_Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_ownDeletesAreVisible_I_Z_dispatch, // invoke this method
  DatabaseMetaData_ownDeletesAreVisible_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_ownInsertsAreVisible_I_Z_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_ownInsertsAreVisible_I_Z_args[] = 
{
  &DatabaseMetaData_methods_ownInsertsAreVisible_I_Z_arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_ownInsertsAreVisible_I_Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_ownInsertsAreVisible_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_ownInsertsAreVisible_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ownInsertsAreVisible", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2f_ownInsertsAreVisible", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_ownInsertsAreVisible_I_Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_ownInsertsAreVisible_I_Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_ownInsertsAreVisible_I_Z_dispatch, // invoke this method
  DatabaseMetaData_ownInsertsAreVisible_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_ownUpdatesAreVisible_I_Z_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_ownUpdatesAreVisible_I_Z_args[] = 
{
  &DatabaseMetaData_methods_ownUpdatesAreVisible_I_Z_arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_ownUpdatesAreVisible_I_Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_ownUpdatesAreVisible_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_ownUpdatesAreVisible_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ownUpdatesAreVisible", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2d_ownUpdatesAreVisible", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_ownUpdatesAreVisible_I_Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_ownUpdatesAreVisible_I_Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_ownUpdatesAreVisible_I_Z_dispatch, // invoke this method
  DatabaseMetaData_ownUpdatesAreVisible_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_storesLowerCaseIdentifiers__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_storesLowerCaseIdentifiers__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_storesLowerCaseIdentifiers__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_storesLowerCaseIdentifiers__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "storesLowerCaseIdentifiers", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_j_storesLowerCaseIdentifiers", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_storesLowerCaseIdentifiers__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_storesLowerCaseIdentifiers__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_storesLowerCaseIdentifiers__Z_dispatch, // invoke this method
  DatabaseMetaData_storesLowerCaseIdentifiers__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_storesLowerCaseQuotedIdentifiers__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_storesLowerCaseQuotedIdentifiers__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_storesLowerCaseQuotedIdentifiers__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_storesLowerCaseQuotedIdentifiers__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "storesLowerCaseQuotedIdentifiers", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_n_storesLowerCaseQuotedIdentifiers", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_storesLowerCaseQuotedIdentifiers__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_storesLowerCaseQuotedIdentifiers__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_storesLowerCaseQuotedIdentifiers__Z_dispatch, // invoke this method
  DatabaseMetaData_storesLowerCaseQuotedIdentifiers__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_storesMixedCaseIdentifiers__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_storesMixedCaseIdentifiers__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_storesMixedCaseIdentifiers__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_storesMixedCaseIdentifiers__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "storesMixedCaseIdentifiers", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_k_storesMixedCaseIdentifiers", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_storesMixedCaseIdentifiers__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_storesMixedCaseIdentifiers__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_storesMixedCaseIdentifiers__Z_dispatch, // invoke this method
  DatabaseMetaData_storesMixedCaseIdentifiers__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_storesMixedCaseQuotedIdentifiers__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_storesMixedCaseQuotedIdentifiers__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_storesMixedCaseQuotedIdentifiers__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_storesMixedCaseQuotedIdentifiers__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "storesMixedCaseQuotedIdentifiers", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_o_storesMixedCaseQuotedIdentifiers", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_storesMixedCaseQuotedIdentifiers__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_storesMixedCaseQuotedIdentifiers__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_storesMixedCaseQuotedIdentifiers__Z_dispatch, // invoke this method
  DatabaseMetaData_storesMixedCaseQuotedIdentifiers__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_storesUpperCaseIdentifiers__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_storesUpperCaseIdentifiers__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_storesUpperCaseIdentifiers__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_storesUpperCaseIdentifiers__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "storesUpperCaseIdentifiers", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_i_storesUpperCaseIdentifiers", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_storesUpperCaseIdentifiers__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_storesUpperCaseIdentifiers__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_storesUpperCaseIdentifiers__Z_dispatch, // invoke this method
  DatabaseMetaData_storesUpperCaseIdentifiers__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_storesUpperCaseQuotedIdentifiers__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_storesUpperCaseQuotedIdentifiers__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_storesUpperCaseQuotedIdentifiers__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_storesUpperCaseQuotedIdentifiers__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "storesUpperCaseQuotedIdentifiers", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_m_storesUpperCaseQuotedIdentifiers", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_storesUpperCaseQuotedIdentifiers__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_storesUpperCaseQuotedIdentifiers__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_storesUpperCaseQuotedIdentifiers__Z_dispatch, // invoke this method
  DatabaseMetaData_storesUpperCaseQuotedIdentifiers__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsANSI92EntryLevelSQL__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsANSI92EntryLevelSQL__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsANSI92EntryLevelSQL__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsANSI92EntryLevelSQL__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsANSI92EntryLevelSQL", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_R_supportsANSI92EntryLevelSQL", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsANSI92EntryLevelSQL__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsANSI92EntryLevelSQL__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsANSI92EntryLevelSQL__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsANSI92EntryLevelSQL__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsANSI92FullSQL__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsANSI92FullSQL__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsANSI92FullSQL__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsANSI92FullSQL__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsANSI92FullSQL", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_T_supportsANSI92FullSQL", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsANSI92FullSQL__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsANSI92FullSQL__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsANSI92FullSQL__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsANSI92FullSQL__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsANSI92IntermediateSQL__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsANSI92IntermediateSQL__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsANSI92IntermediateSQL__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsANSI92IntermediateSQL__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsANSI92IntermediateSQL", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_S_supportsANSI92IntermediateSQL", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsANSI92IntermediateSQL__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsANSI92IntermediateSQL__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsANSI92IntermediateSQL__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsANSI92IntermediateSQL__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsAlterTableWithAddColumn__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsAlterTableWithAddColumn__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsAlterTableWithAddColumn__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsAlterTableWithAddColumn__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsAlterTableWithAddColumn", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_x_supportsAlterTableWithAddColumn", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsAlterTableWithAddColumn__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsAlterTableWithAddColumn__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsAlterTableWithAddColumn__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsAlterTableWithAddColumn__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsAlterTableWithDropColumn__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsAlterTableWithDropColumn__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsAlterTableWithDropColumn__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsAlterTableWithDropColumn__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsAlterTableWithDropColumn", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_y_supportsAlterTableWithDropColumn", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsAlterTableWithDropColumn__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsAlterTableWithDropColumn__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsAlterTableWithDropColumn__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsAlterTableWithDropColumn__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsBatchUpdates__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsBatchUpdates__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsBatchUpdates__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsBatchUpdates__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsBatchUpdates", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2m_supportsBatchUpdates", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsBatchUpdates__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsBatchUpdates__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsBatchUpdates__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsBatchUpdates__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsCatalogInPrivilegeDefinitions__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsCatalogInPrivilegeDefinitions__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsCatalogInPrivilegeDefinitions__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsCatalogInPrivilegeDefinitions__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsCatalogInPrivilegeDefinitions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1c_supportsCatalogInPrivilegeDefinitions", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsCatalogInPrivilegeDefinitions__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsCatalogInPrivilegeDefinitions__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsCatalogInPrivilegeDefinitions__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsCatalogInPrivilegeDefinitions__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsCatalogsInDataManipulation__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsCatalogsInDataManipulation__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsCatalogsInDataManipulation__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsCatalogsInDataManipulation__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsCatalogsInDataManipulation", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_18_supportsCatalogsInDataManipulation", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsCatalogsInDataManipulation__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsCatalogsInDataManipulation__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsCatalogsInDataManipulation__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsCatalogsInDataManipulation__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsCatalogsInIndexDefinitions__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsCatalogsInIndexDefinitions__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsCatalogsInIndexDefinitions__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsCatalogsInIndexDefinitions__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsCatalogsInIndexDefinitions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1b_supportsCatalogsInIndexDefinitions", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsCatalogsInIndexDefinitions__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsCatalogsInIndexDefinitions__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsCatalogsInIndexDefinitions__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsCatalogsInIndexDefinitions__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsCatalogsInProcedureCalls__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsCatalogsInProcedureCalls__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsCatalogsInProcedureCalls__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsCatalogsInProcedureCalls__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsCatalogsInProcedureCalls", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_19_supportsCatalogsInProcedureCalls", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsCatalogsInProcedureCalls__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsCatalogsInProcedureCalls__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsCatalogsInProcedureCalls__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsCatalogsInProcedureCalls__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsCatalogsInTableDefinitions__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsCatalogsInTableDefinitions__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsCatalogsInTableDefinitions__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsCatalogsInTableDefinitions__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsCatalogsInTableDefinitions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1a_supportsCatalogsInTableDefinitions", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsCatalogsInTableDefinitions__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsCatalogsInTableDefinitions__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsCatalogsInTableDefinitions__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsCatalogsInTableDefinitions__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsColumnAliasing__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsColumnAliasing__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsColumnAliasing__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsColumnAliasing__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsColumnAliasing", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_z_supportsColumnAliasing", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsColumnAliasing__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsColumnAliasing__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsColumnAliasing__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsColumnAliasing__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsConvert__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsConvert__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsConvert__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsConvert__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsConvert", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_B_supportsConvert", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsConvert__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsConvert__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsConvert__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsConvert__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_supportsConvert_II_Z_arg_fromType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "fromType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_supportsConvert_II_Z_arg_toType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "toType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsConvert_II_Z_args[] = 
{
  &DatabaseMetaData_methods_supportsConvert_II_Z_arg_fromType,
  &DatabaseMetaData_methods_supportsConvert_II_Z_arg_toType,
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsConvert_II_Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsConvert_II_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsConvert_II_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsConvert", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_C_supportsConvert", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsConvert_II_Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsConvert_II_Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsConvert_II_Z_dispatch, // invoke this method
  DatabaseMetaData_supportsConvert_II_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsCoreSQLGrammar__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsCoreSQLGrammar__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsCoreSQLGrammar__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsCoreSQLGrammar__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsCoreSQLGrammar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_P_supportsCoreSQLGrammar", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsCoreSQLGrammar__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsCoreSQLGrammar__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsCoreSQLGrammar__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsCoreSQLGrammar__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsCorrelatedSubqueries__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsCorrelatedSubqueries__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsCorrelatedSubqueries__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsCorrelatedSubqueries__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsCorrelatedSubqueries", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1l_supportsCorrelatedSubqueries", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsCorrelatedSubqueries__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsCorrelatedSubqueries__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsCorrelatedSubqueries__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsCorrelatedSubqueries__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsDataDefinitionAndDataManipulationTransactions__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsDataDefinitionAndDataManipulationTransactions__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsDataDefinitionAndDataManipulationTransactions__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsDataDefinitionAndDataManipulationTransactions__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsDataDefinitionAndDataManipulationTransactions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1Q_supportsDataDefinitionAndDataManipulationTransactions", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsDataDefinitionAndDataManipulationTransactions__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsDataDefinitionAndDataManipulationTransactions__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsDataDefinitionAndDataManipulationTransactions__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsDataDefinitionAndDataManipulationTransactions__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsDataManipulationTransactionsOnly__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsDataManipulationTransactionsOnly__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsDataManipulationTransactionsOnly__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsDataManipulationTransactionsOnly__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsDataManipulationTransactionsOnly", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1R_supportsDataManipulationTransactionsOnly", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsDataManipulationTransactionsOnly__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsDataManipulationTransactionsOnly__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsDataManipulationTransactionsOnly__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsDataManipulationTransactionsOnly__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsDifferentTableCorrelationNames__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsDifferentTableCorrelationNames__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsDifferentTableCorrelationNames__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsDifferentTableCorrelationNames__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsDifferentTableCorrelationNames", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_E_supportsDifferentTableCorrelationNames", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsDifferentTableCorrelationNames__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsDifferentTableCorrelationNames__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsDifferentTableCorrelationNames__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsDifferentTableCorrelationNames__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsExpressionsInOrderBy__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsExpressionsInOrderBy__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsExpressionsInOrderBy__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsExpressionsInOrderBy__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsExpressionsInOrderBy", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_F_supportsExpressionsInOrderBy", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsExpressionsInOrderBy__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsExpressionsInOrderBy__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsExpressionsInOrderBy__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsExpressionsInOrderBy__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsExtendedSQLGrammar__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsExtendedSQLGrammar__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsExtendedSQLGrammar__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsExtendedSQLGrammar__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsExtendedSQLGrammar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_Q_supportsExtendedSQLGrammar", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsExtendedSQLGrammar__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsExtendedSQLGrammar__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsExtendedSQLGrammar__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsExtendedSQLGrammar__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsFullOuterJoins__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsFullOuterJoins__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsFullOuterJoins__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsFullOuterJoins__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsFullOuterJoins", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_W_supportsFullOuterJoins", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsFullOuterJoins__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsFullOuterJoins__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsFullOuterJoins__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsFullOuterJoins__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsGroupBy__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsGroupBy__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsGroupBy__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsGroupBy__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsGroupBy", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_H_supportsGroupBy", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsGroupBy__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsGroupBy__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsGroupBy__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsGroupBy__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsGroupByBeyondSelect__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsGroupByBeyondSelect__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsGroupByBeyondSelect__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsGroupByBeyondSelect__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsGroupByBeyondSelect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_J_supportsGroupByBeyondSelect", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsGroupByBeyondSelect__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsGroupByBeyondSelect__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsGroupByBeyondSelect__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsGroupByBeyondSelect__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsGroupByUnrelated__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsGroupByUnrelated__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsGroupByUnrelated__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsGroupByUnrelated__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsGroupByUnrelated", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_I_supportsGroupByUnrelated", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsGroupByUnrelated__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsGroupByUnrelated__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsGroupByUnrelated__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsGroupByUnrelated__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsIntegrityEnhancementFacility__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsIntegrityEnhancementFacility__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsIntegrityEnhancementFacility__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsIntegrityEnhancementFacility__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsIntegrityEnhancementFacility", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_U_supportsIntegrityEnhancementFacility", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsIntegrityEnhancementFacility__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsIntegrityEnhancementFacility__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsIntegrityEnhancementFacility__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsIntegrityEnhancementFacility__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsLikeEscapeClause__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsLikeEscapeClause__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsLikeEscapeClause__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsLikeEscapeClause__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsLikeEscapeClause", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_K_supportsLikeEscapeClause", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsLikeEscapeClause__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsLikeEscapeClause__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsLikeEscapeClause__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsLikeEscapeClause__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsLimitedOuterJoins__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsLimitedOuterJoins__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsLimitedOuterJoins__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsLimitedOuterJoins__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsLimitedOuterJoins", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_X_supportsLimitedOuterJoins", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsLimitedOuterJoins__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsLimitedOuterJoins__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsLimitedOuterJoins__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsLimitedOuterJoins__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsMinimumSQLGrammar__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsMinimumSQLGrammar__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsMinimumSQLGrammar__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsMinimumSQLGrammar__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsMinimumSQLGrammar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_O_supportsMinimumSQLGrammar", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsMinimumSQLGrammar__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsMinimumSQLGrammar__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsMinimumSQLGrammar__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsMinimumSQLGrammar__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsMixedCaseIdentifiers__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsMixedCaseIdentifiers__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsMixedCaseIdentifiers__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsMixedCaseIdentifiers__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsMixedCaseIdentifiers", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_h_supportsMixedCaseIdentifiers", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsMixedCaseIdentifiers__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsMixedCaseIdentifiers__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsMixedCaseIdentifiers__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsMixedCaseIdentifiers__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsMixedCaseQuotedIdentifiers__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsMixedCaseQuotedIdentifiers__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsMixedCaseQuotedIdentifiers__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsMixedCaseQuotedIdentifiers__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsMixedCaseQuotedIdentifiers", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_l_supportsMixedCaseQuotedIdentifiers", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsMixedCaseQuotedIdentifiers__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsMixedCaseQuotedIdentifiers__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsMixedCaseQuotedIdentifiers__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsMixedCaseQuotedIdentifiers__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsMultipleResultSets__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsMultipleResultSets__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsMultipleResultSets__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsMultipleResultSets__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsMultipleResultSets", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_L_supportsMultipleResultSets", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsMultipleResultSets__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsMultipleResultSets__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsMultipleResultSets__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsMultipleResultSets__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsMultipleTransactions__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsMultipleTransactions__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsMultipleTransactions__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsMultipleTransactions__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsMultipleTransactions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_M_supportsMultipleTransactions", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsMultipleTransactions__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsMultipleTransactions__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsMultipleTransactions__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsMultipleTransactions__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsNonNullableColumns__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsNonNullableColumns__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsNonNullableColumns__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsNonNullableColumns__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsNonNullableColumns", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_N_supportsNonNullableColumns", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsNonNullableColumns__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsNonNullableColumns__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsNonNullableColumns__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsNonNullableColumns__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsOpenCursorsAcrossCommit__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsOpenCursorsAcrossCommit__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsOpenCursorsAcrossCommit__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsOpenCursorsAcrossCommit__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsOpenCursorsAcrossCommit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1o_supportsOpenCursorsAcrossCommit", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsOpenCursorsAcrossCommit__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsOpenCursorsAcrossCommit__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsOpenCursorsAcrossCommit__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsOpenCursorsAcrossCommit__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsOpenCursorsAcrossRollback__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsOpenCursorsAcrossRollback__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsOpenCursorsAcrossRollback__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsOpenCursorsAcrossRollback__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsOpenCursorsAcrossRollback", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1p_supportsOpenCursorsAcrossRollback", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsOpenCursorsAcrossRollback__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsOpenCursorsAcrossRollback__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsOpenCursorsAcrossRollback__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsOpenCursorsAcrossRollback__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsOpenStatementsAcrossCommit__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsOpenStatementsAcrossCommit__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsOpenStatementsAcrossCommit__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsOpenStatementsAcrossCommit__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsOpenStatementsAcrossCommit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1q_supportsOpenStatementsAcrossCommit", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsOpenStatementsAcrossCommit__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsOpenStatementsAcrossCommit__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsOpenStatementsAcrossCommit__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsOpenStatementsAcrossCommit__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsOpenStatementsAcrossRollback__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsOpenStatementsAcrossRollback__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsOpenStatementsAcrossRollback__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsOpenStatementsAcrossRollback__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsOpenStatementsAcrossRollback", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1r_supportsOpenStatementsAcrossRollback", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsOpenStatementsAcrossRollback__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsOpenStatementsAcrossRollback__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsOpenStatementsAcrossRollback__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsOpenStatementsAcrossRollback__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsOrderByUnrelated__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsOrderByUnrelated__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsOrderByUnrelated__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsOrderByUnrelated__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsOrderByUnrelated", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_G_supportsOrderByUnrelated", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsOrderByUnrelated__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsOrderByUnrelated__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsOrderByUnrelated__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsOrderByUnrelated__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsOuterJoins__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsOuterJoins__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsOuterJoins__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsOuterJoins__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsOuterJoins", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_V_supportsOuterJoins", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsOuterJoins__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsOuterJoins__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsOuterJoins__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsOuterJoins__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsPositionedDelete__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsPositionedDelete__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsPositionedDelete__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsPositionedDelete__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsPositionedDelete", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1d_supportsPositionedDelete", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsPositionedDelete__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsPositionedDelete__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsPositionedDelete__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsPositionedDelete__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsPositionedUpdate__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsPositionedUpdate__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsPositionedUpdate__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsPositionedUpdate__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsPositionedUpdate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1e_supportsPositionedUpdate", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsPositionedUpdate__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsPositionedUpdate__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsPositionedUpdate__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsPositionedUpdate__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_supportsResultSetConcurrency_II_Z_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_supportsResultSetConcurrency_II_Z_arg_concur = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "concur", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsResultSetConcurrency_II_Z_args[] = 
{
  &DatabaseMetaData_methods_supportsResultSetConcurrency_II_Z_arg_type,
  &DatabaseMetaData_methods_supportsResultSetConcurrency_II_Z_arg_concur,
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsResultSetConcurrency_II_Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsResultSetConcurrency_II_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsResultSetConcurrency_II_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsResultSetConcurrency", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2c_supportsResultSetConcurrency", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsResultSetConcurrency_II_Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsResultSetConcurrency_II_Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsResultSetConcurrency_II_Z_dispatch, // invoke this method
  DatabaseMetaData_supportsResultSetConcurrency_II_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_supportsResultType_I_Z_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsResultType_I_Z_args[] = 
{
  &DatabaseMetaData_methods_supportsResultType_I_Z_arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsResultType_I_Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsResultType_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsResultType_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsResultType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2b_supportsResultType", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsResultType_I_Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsResultType_I_Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsResultType_I_Z_dispatch, // invoke this method
  DatabaseMetaData_supportsResultType_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsSchemasInDataManipulation__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsSchemasInDataManipulation__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsSchemasInDataManipulation__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsSchemasInDataManipulation__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsSchemasInDataManipulation", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_13_supportsSchemasInDataManipulation", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsSchemasInDataManipulation__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsSchemasInDataManipulation__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsSchemasInDataManipulation__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsSchemasInDataManipulation__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsSchemasInIndexDefinitions__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsSchemasInIndexDefinitions__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsSchemasInIndexDefinitions__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsSchemasInIndexDefinitions__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsSchemasInIndexDefinitions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_16_supportsSchemasInIndexDefinitions", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsSchemasInIndexDefinitions__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsSchemasInIndexDefinitions__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsSchemasInIndexDefinitions__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsSchemasInIndexDefinitions__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsSchemasInPrivilegeDefinitions__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsSchemasInPrivilegeDefinitions__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsSchemasInPrivilegeDefinitions__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsSchemasInPrivilegeDefinitions__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsSchemasInPrivilegeDefinitions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_17_supportsSchemasInPrivilegeDefinitions", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsSchemasInPrivilegeDefinitions__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsSchemasInPrivilegeDefinitions__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsSchemasInPrivilegeDefinitions__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsSchemasInPrivilegeDefinitions__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsSchemasInProcedureCalls__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsSchemasInProcedureCalls__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsSchemasInProcedureCalls__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsSchemasInProcedureCalls__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsSchemasInProcedureCalls", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_14_supportsSchemasInProcedureCalls", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsSchemasInProcedureCalls__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsSchemasInProcedureCalls__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsSchemasInProcedureCalls__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsSchemasInProcedureCalls__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsSchemasInTableDefinitions__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsSchemasInTableDefinitions__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsSchemasInTableDefinitions__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsSchemasInTableDefinitions__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsSchemasInTableDefinitions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_15_supportsSchemasInTableDefinitions", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsSchemasInTableDefinitions__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsSchemasInTableDefinitions__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsSchemasInTableDefinitions__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsSchemasInTableDefinitions__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsSelectForUpdate__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsSelectForUpdate__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsSelectForUpdate__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsSelectForUpdate__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsSelectForUpdate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1f_supportsSelectForUpdate", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsSelectForUpdate__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsSelectForUpdate__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsSelectForUpdate__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsSelectForUpdate__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsStoredProcedures__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsStoredProcedures__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsStoredProcedures__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsStoredProcedures__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsStoredProcedures", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1g_supportsStoredProcedures", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsStoredProcedures__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsStoredProcedures__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsStoredProcedures__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsStoredProcedures__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsSubqueriesInComparisons__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsSubqueriesInComparisons__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsSubqueriesInComparisons__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsSubqueriesInComparisons__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsSubqueriesInComparisons", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1h_supportsSubqueriesInComparisons", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsSubqueriesInComparisons__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsSubqueriesInComparisons__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsSubqueriesInComparisons__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsSubqueriesInComparisons__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsSubqueriesInExists__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsSubqueriesInExists__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsSubqueriesInExists__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsSubqueriesInExists__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsSubqueriesInExists", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1i_supportsSubqueriesInExists", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsSubqueriesInExists__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsSubqueriesInExists__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsSubqueriesInExists__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsSubqueriesInExists__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsSubqueriesInIns__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsSubqueriesInIns__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsSubqueriesInIns__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsSubqueriesInIns__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsSubqueriesInIns", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1j_supportsSubqueriesInIns", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsSubqueriesInIns__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsSubqueriesInIns__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsSubqueriesInIns__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsSubqueriesInIns__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsSubqueriesInQuantifieds__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsSubqueriesInQuantifieds__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsSubqueriesInQuantifieds__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsSubqueriesInQuantifieds__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsSubqueriesInQuantifieds", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1k_supportsSubqueriesInQuantifieds", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsSubqueriesInQuantifieds__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsSubqueriesInQuantifieds__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsSubqueriesInQuantifieds__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsSubqueriesInQuantifieds__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsTableCorrelationNames__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsTableCorrelationNames__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsTableCorrelationNames__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsTableCorrelationNames__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsTableCorrelationNames", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_D_supportsTableCorrelationNames", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsTableCorrelationNames__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsTableCorrelationNames__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsTableCorrelationNames__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsTableCorrelationNames__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_supportsTransactionIsolationLevel_I_Z_arg_level = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "level", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsTransactionIsolationLevel_I_Z_args[] = 
{
  &DatabaseMetaData_methods_supportsTransactionIsolationLevel_I_Z_arg_level,
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsTransactionIsolationLevel_I_Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsTransactionIsolationLevel_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsTransactionIsolationLevel_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsTransactionIsolationLevel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1P_supportsTransactionIsolationLevel", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsTransactionIsolationLevel_I_Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsTransactionIsolationLevel_I_Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsTransactionIsolationLevel_I_Z_dispatch, // invoke this method
  DatabaseMetaData_supportsTransactionIsolationLevel_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsTransactions__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsTransactions__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsTransactions__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsTransactions__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsTransactions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1O_supportsTransactions", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsTransactions__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsTransactions__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsTransactions__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsTransactions__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsUnion__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsUnion__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsUnion__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsUnion__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsUnion", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1m_supportsUnion", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsUnion__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsUnion__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsUnion__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsUnion__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_supportsUnionAll__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_supportsUnionAll__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_supportsUnionAll__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_supportsUnionAll__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsUnionAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1n_supportsUnionAll", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_supportsUnionAll__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_supportsUnionAll__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_supportsUnionAll__Z_dispatch, // invoke this method
  DatabaseMetaData_supportsUnionAll__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatabaseMetaData_methods_updatesAreDetected_I_Z_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_updatesAreDetected_I_Z_args[] = 
{
  &DatabaseMetaData_methods_updatesAreDetected_I_Z_arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_updatesAreDetected_I_Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_updatesAreDetected_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_updatesAreDetected_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updatesAreDetected", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2j_updatesAreDetected", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_updatesAreDetected_I_Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_updatesAreDetected_I_Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_updatesAreDetected_I_Z_dispatch, // invoke this method
  DatabaseMetaData_updatesAreDetected_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_usesLocalFilePerTable__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_usesLocalFilePerTable__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_usesLocalFilePerTable__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_usesLocalFilePerTable__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "usesLocalFilePerTable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_g_usesLocalFilePerTable", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_usesLocalFilePerTable__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_usesLocalFilePerTable__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_usesLocalFilePerTable__Z_dispatch, // invoke this method
  DatabaseMetaData_usesLocalFilePerTable__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatabaseMetaData_methods_usesLocalFiles__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData_methods_usesLocalFiles__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void DatabaseMetaData_usesLocalFiles__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DatabaseMetaData_method_usesLocalFiles__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "usesLocalFiles", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_f_usesLocalFiles", // alternative name of method
  -1, // altlabelHashCode
  DatabaseMetaData_methods_usesLocalFiles__Z_args, // the arguments
  0, //arguments count
  DatabaseMetaData_methods_usesLocalFiles__Z_exceptions, // the declared exceptions
  DatabaseMetaData_MetainfoWrapper::DatabaseMetaData_method_usesLocalFiles__Z_dispatch, // invoke this method
  DatabaseMetaData_usesLocalFiles__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DatabaseMetaData_methods[] = 
{
  &DatabaseMetaData_method_GetClass__L_acdk_lang_RClass_,
  &DatabaseMetaData_method_allProceduresAreCallable__Z,
  &DatabaseMetaData_method_allTablesAreSelectable__Z,
  &DatabaseMetaData_method_dataDefinitionCausesTransactionCommit__Z,
  &DatabaseMetaData_method_dataDefinitionIgnoredInTransactions__Z,
  &DatabaseMetaData_method_deletesAreDetected_I_Z,
  &DatabaseMetaData_method_doesMaxRowSizeIncludeBlobs__Z,
  &DatabaseMetaData_method_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_LRResultSet_,
  &DatabaseMetaData_method_getCatalogSeparator__LRString_,
  &DatabaseMetaData_method_getCatalogTerm__LRString_,
  &DatabaseMetaData_method_getCatalogs__LRResultSet_,
  &DatabaseMetaData_method_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__LRResultSet_,
  &DatabaseMetaData_method_getColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet_,
  &DatabaseMetaData_method_getConnection__LRConnection_,
  &DatabaseMetaData_method_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRResultSet_,
  &DatabaseMetaData_method_getDatabaseProductName__LRString_,
  &DatabaseMetaData_method_getDatabaseProductVersion__LRString_,
  &DatabaseMetaData_method_getDateTimeFunctions__LRString_,
  &DatabaseMetaData_method_getDefaultTransactionIsolation__I,
  &DatabaseMetaData_method_getDriverMajorVersion__I,
  &DatabaseMetaData_method_getDriverMinorVersion__I,
  &DatabaseMetaData_method_getDriverName__LRString_,
  &DatabaseMetaData_method_getDriverVersion__LRString_,
  &DatabaseMetaData_method_getExportedKeys_INLRString_INLRString_INLRString__LRResultSet_,
  &DatabaseMetaData_method_getExtraNameCharacters__LRString_,
  &DatabaseMetaData_method_getIdentiferQuoteString__LRString_,
  &DatabaseMetaData_method_getImportedKeys_INLRString_INLRString_INLRString__LRResultSet_,
  &DatabaseMetaData_method_getIndexInfo_INLRString_INLRString_INLRString_ZZ_LRResultSet_,
  &DatabaseMetaData_method_getMaxBinaryLiteralLength__I,
  &DatabaseMetaData_method_getMaxCatalogNameLength__I,
  &DatabaseMetaData_method_getMaxCharLiteralLength__I,
  &DatabaseMetaData_method_getMaxColumnNameLength__I,
  &DatabaseMetaData_method_getMaxColumnsInGroupBy__I,
  &DatabaseMetaData_method_getMaxColumnsInIndex__I,
  &DatabaseMetaData_method_getMaxColumnsInOrderBy__I,
  &DatabaseMetaData_method_getMaxColumnsInSelect__I,
  &DatabaseMetaData_method_getMaxColumnsInTable__I,
  &DatabaseMetaData_method_getMaxConnections__I,
  &DatabaseMetaData_method_getMaxCursorNameLength__I,
  &DatabaseMetaData_method_getMaxIndexLength__I,
  &DatabaseMetaData_method_getMaxProcedureNameLength__I,
  &DatabaseMetaData_method_getMaxRowSize__I,
  &DatabaseMetaData_method_getMaxSchemaNameLength__I,
  &DatabaseMetaData_method_getMaxStatementLength__I,
  &DatabaseMetaData_method_getMaxStatements__I,
  &DatabaseMetaData_method_getMaxTableNameLength__I,
  &DatabaseMetaData_method_getMaxTableUserLength__I,
  &DatabaseMetaData_method_getMaxTablesInSelect__I,
  &DatabaseMetaData_method_getNumericFunctions__LRString_,
  &DatabaseMetaData_method_getPrimaryKeys_INLRString_INLRString_INLRString__LRResultSet_,
  &DatabaseMetaData_method_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet_,
  &DatabaseMetaData_method_getProcedureTerm__LRString_,
  &DatabaseMetaData_method_getProcedures_INLRString_INLRString_INLRString__LRResultSet_,
  &DatabaseMetaData_method_getSQLKeywords__LRString_,
  &DatabaseMetaData_method_getSchemaTerm__LRString_,
  &DatabaseMetaData_method_getSchemas__LRResultSet_,
  &DatabaseMetaData_method_getSearchStringEscape__LRString_,
  &DatabaseMetaData_method_getStringFunctions__LRString_,
  &DatabaseMetaData_method_getSystemFunctions__LRString_,
  &DatabaseMetaData_method_getTablePrivileges_INLRString_INLRString_INLRString__LRResultSet_,
  &DatabaseMetaData_method_getTableTypes__LRResultSet_,
  &DatabaseMetaData_method_getTables_INLRString_INLRString_INLRString__LRResultSet_,
  &DatabaseMetaData_method_getTypeInfo__LRResultSet_,
  &DatabaseMetaData_method_getUDTs_INLRString_INLRString_INLRString_INLRintArray__LRResultSet_,
  &DatabaseMetaData_method_getURL__LRString_,
  &DatabaseMetaData_method_getUserName__LRString_,
  &DatabaseMetaData_method_getVersionColumns_INLRString_INLRString_INLRString__LRResultSet_,
  &DatabaseMetaData_method_insertsAreDetected_I_Z,
  &DatabaseMetaData_method_isCatalogAtStart__Z,
  &DatabaseMetaData_method_isReadOnly__Z,
  &DatabaseMetaData_method_nullPlusNonNullIsNull__Z,
  &DatabaseMetaData_method_nullsAreSortedAtEnd__Z,
  &DatabaseMetaData_method_nullsAreSortedAtStart__Z,
  &DatabaseMetaData_method_nullsAreSortedHigh__Z,
  &DatabaseMetaData_method_nullsAreSortedLow__Z,
  &DatabaseMetaData_method_othersDeletesAreVisible_I_Z,
  &DatabaseMetaData_method_othersInsertsAreVisible_I_Z,
  &DatabaseMetaData_method_othersUpdatesAreVisible_I_Z,
  &DatabaseMetaData_method_ownDeletesAreVisible_I_Z,
  &DatabaseMetaData_method_ownInsertsAreVisible_I_Z,
  &DatabaseMetaData_method_ownUpdatesAreVisible_I_Z,
  &DatabaseMetaData_method_storesLowerCaseIdentifiers__Z,
  &DatabaseMetaData_method_storesLowerCaseQuotedIdentifiers__Z,
  &DatabaseMetaData_method_storesMixedCaseIdentifiers__Z,
  &DatabaseMetaData_method_storesMixedCaseQuotedIdentifiers__Z,
  &DatabaseMetaData_method_storesUpperCaseIdentifiers__Z,
  &DatabaseMetaData_method_storesUpperCaseQuotedIdentifiers__Z,
  &DatabaseMetaData_method_supportsANSI92EntryLevelSQL__Z,
  &DatabaseMetaData_method_supportsANSI92FullSQL__Z,
  &DatabaseMetaData_method_supportsANSI92IntermediateSQL__Z,
  &DatabaseMetaData_method_supportsAlterTableWithAddColumn__Z,
  &DatabaseMetaData_method_supportsAlterTableWithDropColumn__Z,
  &DatabaseMetaData_method_supportsBatchUpdates__Z,
  &DatabaseMetaData_method_supportsCatalogInPrivilegeDefinitions__Z,
  &DatabaseMetaData_method_supportsCatalogsInDataManipulation__Z,
  &DatabaseMetaData_method_supportsCatalogsInIndexDefinitions__Z,
  &DatabaseMetaData_method_supportsCatalogsInProcedureCalls__Z,
  &DatabaseMetaData_method_supportsCatalogsInTableDefinitions__Z,
  &DatabaseMetaData_method_supportsColumnAliasing__Z,
  &DatabaseMetaData_method_supportsConvert__Z,
  &DatabaseMetaData_method_supportsConvert_II_Z,
  &DatabaseMetaData_method_supportsCoreSQLGrammar__Z,
  &DatabaseMetaData_method_supportsCorrelatedSubqueries__Z,
  &DatabaseMetaData_method_supportsDataDefinitionAndDataManipulationTransactions__Z,
  &DatabaseMetaData_method_supportsDataManipulationTransactionsOnly__Z,
  &DatabaseMetaData_method_supportsDifferentTableCorrelationNames__Z,
  &DatabaseMetaData_method_supportsExpressionsInOrderBy__Z,
  &DatabaseMetaData_method_supportsExtendedSQLGrammar__Z,
  &DatabaseMetaData_method_supportsFullOuterJoins__Z,
  &DatabaseMetaData_method_supportsGroupBy__Z,
  &DatabaseMetaData_method_supportsGroupByBeyondSelect__Z,
  &DatabaseMetaData_method_supportsGroupByUnrelated__Z,
  &DatabaseMetaData_method_supportsIntegrityEnhancementFacility__Z,
  &DatabaseMetaData_method_supportsLikeEscapeClause__Z,
  &DatabaseMetaData_method_supportsLimitedOuterJoins__Z,
  &DatabaseMetaData_method_supportsMinimumSQLGrammar__Z,
  &DatabaseMetaData_method_supportsMixedCaseIdentifiers__Z,
  &DatabaseMetaData_method_supportsMixedCaseQuotedIdentifiers__Z,
  &DatabaseMetaData_method_supportsMultipleResultSets__Z,
  &DatabaseMetaData_method_supportsMultipleTransactions__Z,
  &DatabaseMetaData_method_supportsNonNullableColumns__Z,
  &DatabaseMetaData_method_supportsOpenCursorsAcrossCommit__Z,
  &DatabaseMetaData_method_supportsOpenCursorsAcrossRollback__Z,
  &DatabaseMetaData_method_supportsOpenStatementsAcrossCommit__Z,
  &DatabaseMetaData_method_supportsOpenStatementsAcrossRollback__Z,
  &DatabaseMetaData_method_supportsOrderByUnrelated__Z,
  &DatabaseMetaData_method_supportsOuterJoins__Z,
  &DatabaseMetaData_method_supportsPositionedDelete__Z,
  &DatabaseMetaData_method_supportsPositionedUpdate__Z,
  &DatabaseMetaData_method_supportsResultSetConcurrency_II_Z,
  &DatabaseMetaData_method_supportsResultType_I_Z,
  &DatabaseMetaData_method_supportsSchemasInDataManipulation__Z,
  &DatabaseMetaData_method_supportsSchemasInIndexDefinitions__Z,
  &DatabaseMetaData_method_supportsSchemasInPrivilegeDefinitions__Z,
  &DatabaseMetaData_method_supportsSchemasInProcedureCalls__Z,
  &DatabaseMetaData_method_supportsSchemasInTableDefinitions__Z,
  &DatabaseMetaData_method_supportsSelectForUpdate__Z,
  &DatabaseMetaData_method_supportsStoredProcedures__Z,
  &DatabaseMetaData_method_supportsSubqueriesInComparisons__Z,
  &DatabaseMetaData_method_supportsSubqueriesInExists__Z,
  &DatabaseMetaData_method_supportsSubqueriesInIns__Z,
  &DatabaseMetaData_method_supportsSubqueriesInQuantifieds__Z,
  &DatabaseMetaData_method_supportsTableCorrelationNames__Z,
  &DatabaseMetaData_method_supportsTransactionIsolationLevel_I_Z,
  &DatabaseMetaData_method_supportsTransactions__Z,
  &DatabaseMetaData_method_supportsUnion__Z,
  &DatabaseMetaData_method_supportsUnionAll__Z,
  &DatabaseMetaData_method_updatesAreDetected_I_Z,
  &DatabaseMetaData_method_usesLocalFilePerTable__Z,
  &DatabaseMetaData_method_usesLocalFiles__Z,
  0
};


struct DatabaseMetaData_MetaInfoInitializer
{  DatabaseMetaData_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DatabaseMetaData::clazzInfo();
    ci->fields =  _DatabaseMetaData_fields;
    ci->methods =  _DatabaseMetaData_methods;
    ci->_scopeParent = acdk_sql_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DatabaseMetaData_MetaInfoInitializer DatabaseMetaData_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace sql


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) sql_dummyExportFunc() {}
#endif

