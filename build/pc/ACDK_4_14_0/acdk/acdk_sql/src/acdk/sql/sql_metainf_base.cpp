// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "Array.h"
#include "Blob.h"
#include "CallableStatement.h"
#include "Config.h"
#include "Connection.h"
#include "DatabaseMetaData.h"
#include "Driver.h"
#include "DriverManager.h"
#include "DriverPropertyInfo.h"
#include "PreparedStatement.h"
#include "ResultSet.h"
#include "ResultSetMetaData.h"
#include "sql.h"
#include "SQLConfig.h"
#include "SQLException.h"
#include "SQLWarning.h"
#include "sql_all.h"
#include "Statement.h"
#include "Time.h"
#include "Timestamp.h"
#include "Types.h"

namespace acdk { 
namespace sql { 

::acdk::lang::dmi::ClazzSuperInfo* _Array_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* Array::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "Array", // name of class
  -1, // hashCode
  "acdk/sql", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Array_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Array::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Array(Array::clazzInfo());

::acdk::lang::RClass
Array::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Array::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace sql


namespace acdk { 
namespace sql { 

::acdk::lang::dmi::ClazzSuperInfo* _Blob_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* Blob::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "Blob", // name of class
  -1, // hashCode
  "acdk/sql", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Blob_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Blob::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Blob(Blob::clazzInfo());

::acdk::lang::RClass
Blob::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Blob::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace sql


namespace acdk { 
namespace sql { 

::acdk::lang::dmi::ClazzSuperInfo _StandardMemBlob_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _StandardMemBlob_super_Blob =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Blob::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _StandardMemBlob_interfaces[] =
{
  &_StandardMemBlob_super_acdk__lang__Object,
  &_StandardMemBlob_super_Blob,
  0
};

::acdk::lang::dmi::ClazzInfo* StandardMemBlob::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "StandardMemBlob", // name of class
  -1, // hashCode
  "acdk/sql", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _StandardMemBlob_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    StandardMemBlob::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_StandardMemBlob(StandardMemBlob::clazzInfo());

::acdk::lang::RClass
StandardMemBlob::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
StandardMemBlob::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_coreBuffer._ref_this()); // acdk::lang::RFlexByteBuffer _coreBuffer 
}


} // namespace acdk
} // namespace sql


namespace acdk { 
namespace sql { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _CallableStatement_super_PreparedStatement =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  PreparedStatement::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _CallableStatement_interfaces[] =
{
  &_CallableStatement_super_PreparedStatement,
  0
};

::acdk::lang::dmi::ClazzInfo* CallableStatement::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "CallableStatement", // name of class
  -1, // hashCode
  "acdk/sql", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _CallableStatement_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    CallableStatement::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_CallableStatement(CallableStatement::clazzInfo());

::acdk::lang::RClass
CallableStatement::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
CallableStatement::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace sql


namespace acdk { 
namespace sql { 

::acdk::lang::dmi::ClazzSuperInfo* _Connection_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* Connection::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "Connection", // name of class
  -1, // hashCode
  "acdk/sql", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Connection_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Connection::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Connection(Connection::clazzInfo());

::acdk::lang::RClass
Connection::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Connection::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace sql


namespace acdk { 
namespace sql { 


::acdk::lang::dmi::ClazzEnumValueInfo BestRowFlags1_bestRowUnknown = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "bestRowUnknown", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::bestRowUnknown, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo BestRowFlags1_bestRowNotPseudo = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "bestRowNotPseudo", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::bestRowNotPseudo, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo BestRowFlags1_bestRowPseudo = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "bestRowPseudo", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::bestRowPseudo, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* BestRowFlags1_enumValues[] = {
  &BestRowFlags1_bestRowUnknown,
  &BestRowFlags1_bestRowNotPseudo,
  &BestRowFlags1_bestRowPseudo,
0
};

::acdk::lang::dmi::ClazzEnumInfo BestRowFlags1_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "BestRowFlags1", // name
  -1, // hashCode
  "acdk/sql", // ns
  0, // _scopeParent
  0, // _nextSibling
  BestRowFlags1_enumValues, // values
  0, // internal next link
};

::acdk::lang::dmi::RegisterEnumInfo _register_BestRowFlags1(&BestRowFlags1_enumInfo);


} // namespace acdk
} // namespace sql


namespace acdk { 
namespace sql { 


::acdk::lang::dmi::ClazzEnumValueInfo BestRowFlags2_bestRowTemporary = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "bestRowTemporary", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::bestRowTemporary, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo BestRowFlags2_bestRowTransaction = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "bestRowTransaction", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::bestRowTransaction, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo BestRowFlags2_bestRowSession = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "bestRowSession", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::bestRowSession, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* BestRowFlags2_enumValues[] = {
  &BestRowFlags2_bestRowTemporary,
  &BestRowFlags2_bestRowTransaction,
  &BestRowFlags2_bestRowSession,
0
};

::acdk::lang::dmi::ClazzEnumInfo BestRowFlags2_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "BestRowFlags2", // name
  -1, // hashCode
  "acdk/sql", // ns
  0, // _scopeParent
  0, // _nextSibling
  BestRowFlags2_enumValues, // values
  0, // internal next link
};

::acdk::lang::dmi::RegisterEnumInfo _register_BestRowFlags2(&BestRowFlags2_enumInfo);


} // namespace acdk
} // namespace sql


namespace acdk { 
namespace sql { 


::acdk::lang::dmi::ClazzEnumValueInfo ProcedureResultFlags_procedureResultUnknown = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "procedureResultUnknown", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::procedureResultUnknown, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo ProcedureResultFlags_procedureNoResult = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "procedureNoResult", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::procedureNoResult, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo ProcedureResultFlags_procedureReturnsResult = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "procedureReturnsResult", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::procedureReturnsResult, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* ProcedureResultFlags_enumValues[] = {
  &ProcedureResultFlags_procedureResultUnknown,
  &ProcedureResultFlags_procedureNoResult,
  &ProcedureResultFlags_procedureReturnsResult,
0
};

::acdk::lang::dmi::ClazzEnumInfo ProcedureResultFlags_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "ProcedureResultFlags", // name
  -1, // hashCode
  "acdk/sql", // ns
  0, // _scopeParent
  0, // _nextSibling
  ProcedureResultFlags_enumValues, // values
  0, // internal next link
};

::acdk::lang::dmi::RegisterEnumInfo _register_ProcedureResultFlags(&ProcedureResultFlags_enumInfo);


} // namespace acdk
} // namespace sql


namespace acdk { 
namespace sql { 


::acdk::lang::dmi::ClazzEnumValueInfo ProcedureColumnFlags_procedureColumnUnknown = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "procedureColumnUnknown", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::procedureColumnUnknown, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo ProcedureColumnFlags_procedureColumnIn = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "procedureColumnIn", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::procedureColumnIn, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo ProcedureColumnFlags_procedureColumnInOut = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "procedureColumnInOut", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::procedureColumnInOut, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo ProcedureColumnFlags_procedureColumnOut = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "procedureColumnOut", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::procedureColumnOut, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo ProcedureColumnFlags_procedureColumnResult = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "procedureColumnResult", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::procedureColumnResult, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo ProcedureColumnFlags_procedureColumnReturn = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "procedureColumnReturn", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::procedureColumnReturn, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* ProcedureColumnFlags_enumValues[] = {
  &ProcedureColumnFlags_procedureColumnUnknown,
  &ProcedureColumnFlags_procedureColumnIn,
  &ProcedureColumnFlags_procedureColumnInOut,
  &ProcedureColumnFlags_procedureColumnOut,
  &ProcedureColumnFlags_procedureColumnResult,
  &ProcedureColumnFlags_procedureColumnReturn,
0
};

::acdk::lang::dmi::ClazzEnumInfo ProcedureColumnFlags_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "ProcedureColumnFlags", // name
  -1, // hashCode
  "acdk/sql", // ns
  0, // _scopeParent
  0, // _nextSibling
  ProcedureColumnFlags_enumValues, // values
  0, // internal next link
};

::acdk::lang::dmi::RegisterEnumInfo _register_ProcedureColumnFlags(&ProcedureColumnFlags_enumInfo);


} // namespace acdk
} // namespace sql


namespace acdk { 
namespace sql { 


::acdk::lang::dmi::ClazzEnumValueInfo ProcedureNullableFlags_procedureNoNulls = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "procedureNoNulls", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::procedureNoNulls, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo ProcedureNullableFlags_procedureNullable = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "procedureNullable", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::procedureNullable, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo ProcedureNullableFlags_procedureNullableUnknown = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "procedureNullableUnknown", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::procedureNullableUnknown, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* ProcedureNullableFlags_enumValues[] = {
  &ProcedureNullableFlags_procedureNoNulls,
  &ProcedureNullableFlags_procedureNullable,
  &ProcedureNullableFlags_procedureNullableUnknown,
0
};

::acdk::lang::dmi::ClazzEnumInfo ProcedureNullableFlags_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "ProcedureNullableFlags", // name
  -1, // hashCode
  "acdk/sql", // ns
  0, // _scopeParent
  0, // _nextSibling
  ProcedureNullableFlags_enumValues, // values
  0, // internal next link
};

::acdk::lang::dmi::RegisterEnumInfo _register_ProcedureNullableFlags(&ProcedureNullableFlags_enumInfo);


} // namespace acdk
} // namespace sql


namespace acdk { 
namespace sql { 


::acdk::lang::dmi::ClazzEnumValueInfo ColumnNullableFlags_columnNoNulls = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "columnNoNulls", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::columnNoNulls, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo ColumnNullableFlags_columnNullable = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "columnNullable", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::columnNullable, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo ColumnNullableFlags_columnNullableUnknown = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "columnNullableUnknown", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::columnNullableUnknown, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* ColumnNullableFlags_enumValues[] = {
  &ColumnNullableFlags_columnNoNulls,
  &ColumnNullableFlags_columnNullable,
  &ColumnNullableFlags_columnNullableUnknown,
0
};

::acdk::lang::dmi::ClazzEnumInfo ColumnNullableFlags_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "ColumnNullableFlags", // name
  -1, // hashCode
  "acdk/sql", // ns
  0, // _scopeParent
  0, // _nextSibling
  ColumnNullableFlags_enumValues, // values
  0, // internal next link
};

::acdk::lang::dmi::RegisterEnumInfo _register_ColumnNullableFlags(&ColumnNullableFlags_enumInfo);


} // namespace acdk
} // namespace sql


namespace acdk { 
namespace sql { 


::acdk::lang::dmi::ClazzEnumValueInfo VersionColumnFlags_versionColumnUnknown = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "versionColumnUnknown", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::versionColumnUnknown, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo VersionColumnFlags_versionColumnNotPseudo = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "versionColumnNotPseudo", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::versionColumnNotPseudo, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo VersionColumnFlags_versionColumnPseudo = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "versionColumnPseudo", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::versionColumnPseudo, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* VersionColumnFlags_enumValues[] = {
  &VersionColumnFlags_versionColumnUnknown,
  &VersionColumnFlags_versionColumnNotPseudo,
  &VersionColumnFlags_versionColumnPseudo,
0
};

::acdk::lang::dmi::ClazzEnumInfo VersionColumnFlags_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "VersionColumnFlags", // name
  -1, // hashCode
  "acdk/sql", // ns
  0, // _scopeParent
  0, // _nextSibling
  VersionColumnFlags_enumValues, // values
  0, // internal next link
};

::acdk::lang::dmi::RegisterEnumInfo _register_VersionColumnFlags(&VersionColumnFlags_enumInfo);


} // namespace acdk
} // namespace sql


namespace acdk { 
namespace sql { 


::acdk::lang::dmi::ClazzEnumValueInfo ForeignKeyFlags_importedKeyCascade = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "importedKeyCascade", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::importedKeyCascade, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo ForeignKeyFlags_importedKeyRestrict = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "importedKeyRestrict", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::importedKeyRestrict, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo ForeignKeyFlags_importedKeySetNull = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "importedKeySetNull", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::importedKeySetNull, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo ForeignKeyFlags_importedKeyNoAction = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "importedKeyNoAction", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::importedKeyNoAction, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo ForeignKeyFlags_importedKeySetDefault = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "importedKeySetDefault", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::importedKeySetDefault, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo ForeignKeyFlags_importedKeyInitiallyDeferred = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "importedKeyInitiallyDeferred", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::importedKeyInitiallyDeferred, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo ForeignKeyFlags_importedKeyInitiallyImmediate = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "importedKeyInitiallyImmediate", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::importedKeyInitiallyImmediate, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo ForeignKeyFlags_importedKeyNotDeferrable = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "importedKeyNotDeferrable", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::importedKeyNotDeferrable, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* ForeignKeyFlags_enumValues[] = {
  &ForeignKeyFlags_importedKeyCascade,
  &ForeignKeyFlags_importedKeyRestrict,
  &ForeignKeyFlags_importedKeySetNull,
  &ForeignKeyFlags_importedKeyNoAction,
  &ForeignKeyFlags_importedKeySetDefault,
  &ForeignKeyFlags_importedKeyInitiallyDeferred,
  &ForeignKeyFlags_importedKeyInitiallyImmediate,
  &ForeignKeyFlags_importedKeyNotDeferrable,
0
};

::acdk::lang::dmi::ClazzEnumInfo ForeignKeyFlags_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "ForeignKeyFlags", // name
  -1, // hashCode
  "acdk/sql", // ns
  0, // _scopeParent
  0, // _nextSibling
  ForeignKeyFlags_enumValues, // values
  0, // internal next link
};

::acdk::lang::dmi::RegisterEnumInfo _register_ForeignKeyFlags(&ForeignKeyFlags_enumInfo);


} // namespace acdk
} // namespace sql


namespace acdk { 
namespace sql { 


::acdk::lang::dmi::ClazzEnumValueInfo TypeNullableFlags_typeNoNulls = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "typeNoNulls", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::typeNoNulls, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TypeNullableFlags_typeNullable = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "typeNullable", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::typeNullable, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TypeNullableFlags_typeNullableUnknown = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "typeNullableUnknown", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::typeNullableUnknown, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* TypeNullableFlags_enumValues[] = {
  &TypeNullableFlags_typeNoNulls,
  &TypeNullableFlags_typeNullable,
  &TypeNullableFlags_typeNullableUnknown,
0
};

::acdk::lang::dmi::ClazzEnumInfo TypeNullableFlags_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "TypeNullableFlags", // name
  -1, // hashCode
  "acdk/sql", // ns
  0, // _scopeParent
  0, // _nextSibling
  TypeNullableFlags_enumValues, // values
  0, // internal next link
};

::acdk::lang::dmi::RegisterEnumInfo _register_TypeNullableFlags(&TypeNullableFlags_enumInfo);


} // namespace acdk
} // namespace sql


namespace acdk { 
namespace sql { 


::acdk::lang::dmi::ClazzEnumValueInfo TypePredFlags_typePredNone = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "typePredNone", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::typePredNone, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TypePredFlags_typePredChar = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "typePredChar", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::typePredChar, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TypePredFlags_typePredBasic = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "typePredBasic", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::typePredBasic, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TypePredFlags_typeSearchable = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "typeSearchable", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::typeSearchable, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* TypePredFlags_enumValues[] = {
  &TypePredFlags_typePredNone,
  &TypePredFlags_typePredChar,
  &TypePredFlags_typePredBasic,
  &TypePredFlags_typeSearchable,
0
};

::acdk::lang::dmi::ClazzEnumInfo TypePredFlags_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "TypePredFlags", // name
  -1, // hashCode
  "acdk/sql", // ns
  0, // _scopeParent
  0, // _nextSibling
  TypePredFlags_enumValues, // values
  0, // internal next link
};

::acdk::lang::dmi::RegisterEnumInfo _register_TypePredFlags(&TypePredFlags_enumInfo);


} // namespace acdk
} // namespace sql


namespace acdk { 
namespace sql { 


::acdk::lang::dmi::ClazzEnumValueInfo TableIndexFlags_tableIndexStatistic = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "tableIndexStatistic", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::tableIndexStatistic, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TableIndexFlags_tableIndexClustered = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "tableIndexClustered", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::tableIndexClustered, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TableIndexFlags_tableIndexHashed = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "tableIndexHashed", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::tableIndexHashed, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TableIndexFlags_tableIndexOther = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "tableIndexOther", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::tableIndexOther, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* TableIndexFlags_enumValues[] = {
  &TableIndexFlags_tableIndexStatistic,
  &TableIndexFlags_tableIndexClustered,
  &TableIndexFlags_tableIndexHashed,
  &TableIndexFlags_tableIndexOther,
0
};

::acdk::lang::dmi::ClazzEnumInfo TableIndexFlags_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "TableIndexFlags", // name
  -1, // hashCode
  "acdk/sql", // ns
  0, // _scopeParent
  0, // _nextSibling
  TableIndexFlags_enumValues, // values
  0, // internal next link
};

::acdk::lang::dmi::RegisterEnumInfo _register_TableIndexFlags(&TableIndexFlags_enumInfo);


} // namespace acdk
} // namespace sql


namespace acdk { 
namespace sql { 

::acdk::lang::dmi::ClazzSuperInfo* _DatabaseMetaData_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatabaseMetaData::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "DatabaseMetaData", // name of class
  -1, // hashCode
  "acdk/sql", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _DatabaseMetaData_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    DatabaseMetaData::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_DatabaseMetaData(DatabaseMetaData::clazzInfo());

::acdk::lang::RClass
DatabaseMetaData::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
DatabaseMetaData::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace sql


namespace acdk { 
namespace sql { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo* _Driver_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* Driver::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "Driver", // name of class
  -1, // hashCode
  "acdk/sql", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Driver_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Driver::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Driver(Driver::clazzInfo());

::acdk::lang::RClass
Driver::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Driver::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace sql


namespace acdk { 
namespace sql { 

::acdk::lang::dmi::ClazzSuperInfo* _DriverManager_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* DriverManager::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface, // clazz-flags
  0, //AttributesRes
  "DriverManager", // name of class
  -1, // hashCode
  "acdk/sql", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _DriverManager_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    DriverManager::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_DriverManager(DriverManager::clazzInfo());

::acdk::lang::RClass
DriverManager::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
DriverManager::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace sql


namespace acdk { 
namespace sql { 

using namespace acdk::lang;
using namespace acdk::io;
using namespace acdk::util;
::acdk::lang::dmi::ClazzSuperInfo _DriverPropertyInfo_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _DriverPropertyInfo_interfaces[] =
{
  &_DriverPropertyInfo_super_acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* DriverPropertyInfo::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface, // clazz-flags
  0, //AttributesRes
  "DriverPropertyInfo", // name of class
  -1, // hashCode
  "acdk/sql", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _DriverPropertyInfo_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 4, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    DriverPropertyInfo::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_DriverPropertyInfo(DriverPropertyInfo::clazzInfo());

::acdk::lang::RClass
DriverPropertyInfo::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
DriverPropertyInfo::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace sql


namespace acdk { 
namespace sql { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _PreparedStatement_super_Statement =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Statement::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _PreparedStatement_interfaces[] =
{
  &_PreparedStatement_super_Statement,
  0
};

::acdk::lang::dmi::ClazzInfo* PreparedStatement::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "PreparedStatement", // name of class
  -1, // hashCode
  "acdk/sql", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _PreparedStatement_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    PreparedStatement::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_PreparedStatement(PreparedStatement::clazzInfo());

::acdk::lang::RClass
PreparedStatement::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
PreparedStatement::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace sql


namespace acdk { 
namespace sql { 

::acdk::lang::dmi::ClazzSuperInfo* _ResultSet_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSet::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "ResultSet", // name of class
  -1, // hashCode
  "acdk/sql", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ResultSet_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ResultSet::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ResultSet(ResultSet::clazzInfo());

::acdk::lang::RClass
ResultSet::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ResultSet::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace sql


namespace acdk { 
namespace sql { 

::acdk::lang::dmi::ClazzSuperInfo _ResultSetIterator_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _ResultSetIterator_super_acdk__util__Iterator =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::util::Iterator::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ResultSetIterator_interfaces[] =
{
  &_ResultSetIterator_super_acdk__lang__Object,
  &_ResultSetIterator_super_acdk__util__Iterator,
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSetIterator::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ResultSetIterator", // name of class
  -1, // hashCode
  "acdk/sql", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ResultSetIterator_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ResultSetIterator::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ResultSetIterator(ResultSetIterator::clazzInfo());

::acdk::lang::RClass
ResultSetIterator::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ResultSetIterator::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_rset._ref_this()); // RResultSet _rset 
}


} // namespace acdk
} // namespace sql


namespace acdk { 
namespace sql { 


::acdk::lang::dmi::ClazzEnumValueInfo Nullable_ColumnNoNulls = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ColumnNoNulls", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::ColumnNoNulls, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo Nullable_ColumnNullable = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ColumnNullable", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::ColumnNullable, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo Nullable_ColumnNullableUnknown = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ColumnNullableUnknown", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::ColumnNullableUnknown, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* Nullable_enumValues[] = {
  &Nullable_ColumnNoNulls,
  &Nullable_ColumnNullable,
  &Nullable_ColumnNullableUnknown,
0
};

::acdk::lang::dmi::ClazzEnumInfo Nullable_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "Nullable", // name
  -1, // hashCode
  "acdk/sql", // ns
  0, // _scopeParent
  0, // _nextSibling
  Nullable_enumValues, // values
  0, // internal next link
};

::acdk::lang::dmi::RegisterEnumInfo _register_Nullable(&Nullable_enumInfo);


} // namespace acdk
} // namespace sql


namespace acdk { 
namespace sql { 

::acdk::lang::dmi::ClazzSuperInfo* _ResultSetMetaData_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResultSetMetaData::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "ResultSetMetaData", // name of class
  -1, // hashCode
  "acdk/sql", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ResultSetMetaData_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ResultSetMetaData::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ResultSetMetaData(ResultSetMetaData::clazzInfo());

::acdk::lang::RClass
ResultSetMetaData::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ResultSetMetaData::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace sql


namespace acdk { 
namespace sql { 

using namespace acdk::io;
::acdk::lang::dmi::ClazzSuperInfo _SQLException_super___acdk__lang__Exception =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Exception::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _SQLException_super___acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SQLException_interfaces[] =
{
  &_SQLException_super___acdk__lang__Exception,
  &_SQLException_super___acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* SQLException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "SQLException", // name of class
  -1, // hashCode
  "acdk/sql", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SQLException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SQLException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SQLException(SQLException::clazzInfo());

::acdk::lang::RClass
SQLException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SQLException::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Exception)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_next._ref_this()); // RSQLException _next 
  fields.push_back((::acdk::lang::RObject*)this->_sqlState._ref_this()); // RString _sqlState 
}


} // namespace acdk
} // namespace sql


namespace acdk { 
namespace sql { 

using namespace acdk::lang;
using namespace acdk::io;
::acdk::lang::dmi::ClazzSuperInfo _SQLWarning_super_SQLException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  SQLException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _SQLWarning_super_acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SQLWarning_interfaces[] =
{
  &_SQLWarning_super_SQLException,
  &_SQLWarning_super_acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* SQLWarning::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "SQLWarning", // name of class
  -1, // hashCode
  "acdk/sql", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SQLWarning_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SQLWarning::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SQLWarning(SQLWarning::clazzInfo());

::acdk::lang::RClass
SQLWarning::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SQLWarning::getCollectableFields(FieldReferences& fields)
{
  SQLException::getCollectableFields(fields);
}


} // namespace acdk
} // namespace sql


namespace acdk { 
namespace sql { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo* _Statement_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* Statement::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "Statement", // name of class
  -1, // hashCode
  "acdk/sql", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Statement_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Statement::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Statement(Statement::clazzInfo());

::acdk::lang::RClass
Statement::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Statement::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace sql


namespace acdk { 
namespace sql { 

::acdk::lang::dmi::ClazzSuperInfo _Time_super_acdk__util__Date =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::util::Date::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Time_super_acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Time_interfaces[] =
{
  &_Time_super_acdk__util__Date,
  &_Time_super_acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* Time::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "Time", // name of class
  -1, // hashCode
  "acdk/sql", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Time_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Time::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Time(Time::clazzInfo());

::acdk::lang::RClass
Time::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Time::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::util::, Date)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace sql


namespace acdk { 
namespace sql { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _Timestamp_super_acdk__util__Date =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::util::Date::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Timestamp_super_acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Timestamp_interfaces[] =
{
  &_Timestamp_super_acdk__util__Date,
  &_Timestamp_super_acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* Timestamp::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "Timestamp", // name of class
  -1, // hashCode
  "acdk/sql", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Timestamp_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Timestamp::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Timestamp(Timestamp::clazzInfo());

::acdk::lang::RClass
Timestamp::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Timestamp::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::util::, Date)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace sql


namespace acdk { 
namespace sql { 

using namespace acdk::lang;
using namespace acdk::io;
using namespace acdk::util;

::acdk::lang::dmi::ClazzEnumValueInfo SQLType_WLongVarCharSqlType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "WLongVarCharSqlType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::WLongVarCharSqlType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SQLType_WVarCharSqlType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "WVarCharSqlType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::WVarCharSqlType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SQLType_WCharSqlType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "WCharSqlType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::WCharSqlType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SQLType_BitSqlType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "BitSqlType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::BitSqlType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SQLType_TinyIntSqlType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "TinyIntSqlType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::TinyIntSqlType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SQLType_BigIntSqlType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "BigIntSqlType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::BigIntSqlType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SQLType_LongVarBinarySqlType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "LongVarBinarySqlType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::LongVarBinarySqlType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SQLType_VarBinarySqlType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "VarBinarySqlType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::VarBinarySqlType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SQLType_BinarySqlType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "BinarySqlType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::BinarySqlType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SQLType_LongVarCharSqlType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "LongVarCharSqlType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::LongVarCharSqlType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SQLType_NullSqlType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "NullSqlType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::NullSqlType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SQLType_CharSqlType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "CharSqlType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::CharSqlType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SQLType_NumericSqlType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "NumericSqlType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::NumericSqlType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SQLType_DecimalSqlType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "DecimalSqlType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::DecimalSqlType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SQLType_IntegerSqlType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "IntegerSqlType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::IntegerSqlType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SQLType_SmallIntSqlType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SmallIntSqlType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::SmallIntSqlType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SQLType_FloatSqlType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "FloatSqlType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::FloatSqlType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SQLType_RealSqlType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "RealSqlType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::RealSqlType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SQLType_DoubleSqlType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "DoubleSqlType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::DoubleSqlType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SQLType_VarCharSqlType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "VarCharSqlType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::VarCharSqlType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SQLType_OldDateSqlType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "OldDateSqlType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::OldDateSqlType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SQLType_OldTimeSqlType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "OldTimeSqlType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::OldTimeSqlType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SQLType_OldTimeStampSqlType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "OldTimeStampSqlType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::OldTimeStampSqlType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SQLType_DateSqlType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "DateSqlType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::DateSqlType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SQLType_TimeSqlType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "TimeSqlType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::TimeSqlType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SQLType_TimeStampSqlType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "TimeStampSqlType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::TimeStampSqlType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SQLType_OtherSqlType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "OtherSqlType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::OtherSqlType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SQLType_ACDK_ObjectSqlType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ACDK_ObjectSqlType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::ACDK_ObjectSqlType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SQLType_DistinctSqlType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "DistinctSqlType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::DistinctSqlType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SQLType_StructSqlType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "StructSqlType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::StructSqlType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SQLType_ArraySqlType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ArraySqlType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::ArraySqlType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SQLType_BlobSqlType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "BlobSqlType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::BlobSqlType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SQLType_ClobSqlType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ClobSqlType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::ClobSqlType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SQLType_RefSqlType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "RefSqlType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::RefSqlType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SQLType_NativeCharSqlType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "NativeCharSqlType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::NativeCharSqlType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SQLType_NativeVarCharSqlType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "NativeVarCharSqlType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::NativeVarCharSqlType, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* SQLType_enumValues[] = {
  &SQLType_WLongVarCharSqlType,
  &SQLType_WVarCharSqlType,
  &SQLType_WCharSqlType,
  &SQLType_BitSqlType,
  &SQLType_TinyIntSqlType,
  &SQLType_BigIntSqlType,
  &SQLType_LongVarBinarySqlType,
  &SQLType_VarBinarySqlType,
  &SQLType_BinarySqlType,
  &SQLType_LongVarCharSqlType,
  &SQLType_NullSqlType,
  &SQLType_CharSqlType,
  &SQLType_NumericSqlType,
  &SQLType_DecimalSqlType,
  &SQLType_IntegerSqlType,
  &SQLType_SmallIntSqlType,
  &SQLType_FloatSqlType,
  &SQLType_RealSqlType,
  &SQLType_DoubleSqlType,
  &SQLType_VarCharSqlType,
  &SQLType_OldDateSqlType,
  &SQLType_OldTimeSqlType,
  &SQLType_OldTimeStampSqlType,
  &SQLType_DateSqlType,
  &SQLType_TimeSqlType,
  &SQLType_TimeStampSqlType,
  &SQLType_OtherSqlType,
  &SQLType_ACDK_ObjectSqlType,
  &SQLType_DistinctSqlType,
  &SQLType_StructSqlType,
  &SQLType_ArraySqlType,
  &SQLType_BlobSqlType,
  &SQLType_ClobSqlType,
  &SQLType_RefSqlType,
  &SQLType_NativeCharSqlType,
  &SQLType_NativeVarCharSqlType,
0
};

::acdk::lang::dmi::ClazzEnumInfo SQLType_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "SQLType", // name
  -1, // hashCode
  "acdk/sql", // ns
  0, // _scopeParent
  0, // _nextSibling
  SQLType_enumValues, // values
  0, // internal next link
};

::acdk::lang::dmi::RegisterEnumInfo _register_SQLType(&SQLType_enumInfo);


} // namespace acdk
} // namespace sql

