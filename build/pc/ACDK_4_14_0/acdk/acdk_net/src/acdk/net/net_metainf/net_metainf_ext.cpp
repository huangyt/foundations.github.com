// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../net.h"
#include "../Authenticator.h"
#include "../Config.h"
#include "../ContentHandler.h"
#include "../ContentHandlerFactory.h"
#include "../DatagramPacket.h"
#include "../DatagramSocket.h"
#include "../FileNameMap.h"
#include "../FileURLConnection.h"
#include "../HeaderFieldHelper.h"
#include "../HttpURLConnection.h"
#include "../HttpURLConnectionImpl.h"
#include "../InetAddress.h"
#include "../InetSocketAddress.h"
#include "../InetURLConnection.h"
#include "../MalformedURLException.h"
#include "../MimeTypeMapper.h"
#include "../net.h"
#include "../netsysincl.h"
#include "../PasswordAuthentication.h"
#include "../ProtocolException.h"
#include "../ServerSocket.h"
#include "../Socket.h"
#include "../SocketAddress.h"
#include "../SocketException.h"
#include "../SocketImpl.h"
#include "../SocketImplFactory.h"
#include "../SocketLogConsumer.h"
#include "../SocketOptions.h"
#include "../TCPSocket.h"
#include "../TCPSocketFactory.h"
#include "../TransRateReader.h"
#include "../TransRateWriter.h"
#include "../UnknownServiceException.h"
#include "../URL.h"
#include "../URLConnection.h"
#include "../URLDecoder.h"
#include "../URLEncoder.h"
#include "../URLEncoding.h"
#include "../UrlFileSystem.h"
#include "../URLInterface.h"
#include "../URLStreamHandler.h"
#include "../URLStreamHandlerFactory.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>


struct acdk::lang::dmi::UnitInfo acdk_net_unitInfo = {
  ::acdk::lang::dmi::MiUnitInfo, // flags
  0, //attributeRes
  "net", // name of unit
  -1, // hashCode
  "acdk", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  0 // _firstChild first ClazzInfo of this unit
};

static ::acdk::lang::dmi::RegisterUnitInfo _register_acdk_net_unitInfo(&acdk_net_unitInfo);


namespace acdk { 
namespace net { 


//static
::acdk::lang::RObject
Authenticator_create_array(int length)
{
  return new ObjectArrayImpl<RAuthenticator>(length);
}

//static
::acdk::lang::RObject
Authenticator_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Authenticator_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Authenticator_method_Authenticator__LRAuthenticator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Authenticator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Authenticator_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Authenticator::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Authenticator_method_getPasswordAuthentication__LRPasswordAuthentication__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Authenticator* This = dmi_cast<Authenticator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Authenticator::getPasswordAuthentication();
    else
        ret = (::acdk::lang::RObject)This->getPasswordAuthentication();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Authenticator_method_getRequestingPort__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Authenticator* This = dmi_cast<Authenticator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Authenticator::getRequestingPort();
    else
      ret = This->getRequestingPort();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Authenticator_method_getRequestingPrompt__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Authenticator* This = dmi_cast<Authenticator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Authenticator::getRequestingPrompt();
    else
        ret = (::acdk::lang::RObject)This->getRequestingPrompt();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Authenticator_method_getRequestingProtocol__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Authenticator* This = dmi_cast<Authenticator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Authenticator::getRequestingProtocol();
    else
        ret = (::acdk::lang::RObject)This->getRequestingProtocol();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Authenticator_method_getRequestingScheme__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Authenticator* This = dmi_cast<Authenticator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Authenticator::getRequestingScheme();
    else
        ret = (::acdk::lang::RObject)This->getRequestingScheme();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Authenticator_method_getRequestingSite__LRInetAddress__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Authenticator* This = dmi_cast<Authenticator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Authenticator::getRequestingSite();
    else
        ret = (::acdk::lang::RObject)This->getRequestingSite();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Authenticator_method_requestPasswordAuthentication_INLRInetAddress_IINLRString_INLRString_INLRString__LRPasswordAuthentication__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Authenticator::requestPasswordAuthentication(::acdk::lang::dmi::castTo< RInetAddress>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc), ::acdk::lang::dmi::castTo< RString>(args[3], dc), ::acdk::lang::dmi::castTo< RString>(args[4], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Authenticator_method_setDefault_INLRAuthenticator__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Authenticator::setDefault(::acdk::lang::dmi::castTo< RAuthenticator>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Authenticator_fields__addr_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Authenticator* This = dmi_cast<Authenticator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_addr, flags);
    else
      This->_addr = ::acdk::lang::dmi::castTo< RInetAddress>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Authenticator_fields__default_authenticator_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Authenticator::_default_authenticator, flags);
    else
      Authenticator::_default_authenticator = ::acdk::lang::dmi::castTo< RAuthenticator>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Authenticator_fields__port_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Authenticator* This = dmi_cast<Authenticator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_port, flags);
    else
      This->_port = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Authenticator_fields__prompt_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Authenticator* This = dmi_cast<Authenticator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_prompt, flags);
    else
      This->_prompt = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Authenticator_fields__protocol_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Authenticator* This = dmi_cast<Authenticator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_protocol, flags);
    else
      This->_protocol = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Authenticator_fields__scheme_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Authenticator* This = dmi_cast<Authenticator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_scheme, flags);
    else
      This->_scheme = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo Authenticator_fields__addr = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_addr", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetAddress::clazzInfo(),
  Authenticator_MetainfoWrapper::Authenticator_fields__addr_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Authenticator_fields__default_authenticator = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_default_authenticator", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAuthenticator::clazzInfo(),
  Authenticator_MetainfoWrapper::Authenticator_fields__default_authenticator_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Authenticator_fields__port = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_port", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Authenticator_MetainfoWrapper::Authenticator_fields__port_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Authenticator_fields__prompt = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_prompt", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  Authenticator_MetainfoWrapper::Authenticator_fields__prompt_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Authenticator_fields__protocol = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_protocol", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  Authenticator_MetainfoWrapper::Authenticator_fields__protocol_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Authenticator_fields__scheme = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_scheme", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  Authenticator_MetainfoWrapper::Authenticator_fields__scheme_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _Authenticator_fields[] = 
{
  &Authenticator_fields__addr,
  &Authenticator_fields__default_authenticator,
  &Authenticator_fields__port,
  &Authenticator_fields__prompt,
  &Authenticator_fields__protocol,
  &Authenticator_fields__scheme,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Authenticator_methods_Authenticator__LRAuthenticator__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Authenticator_methods_Authenticator__LRAuthenticator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Authenticator_method_Authenticator__LRAuthenticator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Authenticator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Authenticator::clazzInfo(), // return type
  "_2_Authenticator", // alternative name of method
  -1, // altlabelHashCode
  Authenticator_methods_Authenticator__LRAuthenticator__args, // the arguments
  0, //arguments count
  Authenticator_methods_Authenticator__LRAuthenticator__exceptions, // the declared exceptions
  Authenticator_MetainfoWrapper::Authenticator_method_Authenticator__LRAuthenticator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Authenticator_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Authenticator_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Authenticator_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_9_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Authenticator_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Authenticator_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Authenticator_MetainfoWrapper::Authenticator_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Authenticator_methods_getPasswordAuthentication__LRPasswordAuthentication__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Authenticator_methods_getPasswordAuthentication__LRPasswordAuthentication__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Authenticator_method_getPasswordAuthentication__LRPasswordAuthentication_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPasswordAuthentication", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPasswordAuthentication::clazzInfo(), // return type
  "_8_getPasswordAuthentication", // alternative name of method
  -1, // altlabelHashCode
  Authenticator_methods_getPasswordAuthentication__LRPasswordAuthentication__args, // the arguments
  0, //arguments count
  Authenticator_methods_getPasswordAuthentication__LRPasswordAuthentication__exceptions, // the declared exceptions
  Authenticator_MetainfoWrapper::Authenticator_method_getPasswordAuthentication__LRPasswordAuthentication__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Authenticator_methods_getRequestingPort__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Authenticator_methods_getRequestingPort__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Authenticator_method_getRequestingPort__I = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRequestingPort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_4_getRequestingPort", // alternative name of method
  -1, // altlabelHashCode
  Authenticator_methods_getRequestingPort__I_args, // the arguments
  0, //arguments count
  Authenticator_methods_getRequestingPort__I_exceptions, // the declared exceptions
  Authenticator_MetainfoWrapper::Authenticator_method_getRequestingPort__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Authenticator_methods_getRequestingPrompt__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Authenticator_methods_getRequestingPrompt__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Authenticator_method_getRequestingPrompt__LRString_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRequestingPrompt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_6_getRequestingPrompt", // alternative name of method
  -1, // altlabelHashCode
  Authenticator_methods_getRequestingPrompt__LRString__args, // the arguments
  0, //arguments count
  Authenticator_methods_getRequestingPrompt__LRString__exceptions, // the declared exceptions
  Authenticator_MetainfoWrapper::Authenticator_method_getRequestingPrompt__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Authenticator_methods_getRequestingProtocol__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Authenticator_methods_getRequestingProtocol__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Authenticator_method_getRequestingProtocol__LRString_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRequestingProtocol", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_5_getRequestingProtocol", // alternative name of method
  -1, // altlabelHashCode
  Authenticator_methods_getRequestingProtocol__LRString__args, // the arguments
  0, //arguments count
  Authenticator_methods_getRequestingProtocol__LRString__exceptions, // the declared exceptions
  Authenticator_MetainfoWrapper::Authenticator_method_getRequestingProtocol__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Authenticator_methods_getRequestingScheme__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Authenticator_methods_getRequestingScheme__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Authenticator_method_getRequestingScheme__LRString_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRequestingScheme", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_7_getRequestingScheme", // alternative name of method
  -1, // altlabelHashCode
  Authenticator_methods_getRequestingScheme__LRString__args, // the arguments
  0, //arguments count
  Authenticator_methods_getRequestingScheme__LRString__exceptions, // the declared exceptions
  Authenticator_MetainfoWrapper::Authenticator_method_getRequestingScheme__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Authenticator_methods_getRequestingSite__LRInetAddress__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Authenticator_methods_getRequestingSite__LRInetAddress__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Authenticator_method_getRequestingSite__LRInetAddress_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRequestingSite", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetAddress::clazzInfo(), // return type
  "_3_getRequestingSite", // alternative name of method
  -1, // altlabelHashCode
  Authenticator_methods_getRequestingSite__LRInetAddress__args, // the arguments
  0, //arguments count
  Authenticator_methods_getRequestingSite__LRInetAddress__exceptions, // the declared exceptions
  Authenticator_MetainfoWrapper::Authenticator_method_getRequestingSite__LRInetAddress__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Authenticator_methods_requestPasswordAuthentication_INLRInetAddress_IINLRString_INLRString_INLRString__LRPasswordAuthentication__arg_addr = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "addr", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetAddress::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Authenticator_methods_requestPasswordAuthentication_INLRInetAddress_IINLRString_INLRString_INLRString__LRPasswordAuthentication__arg_port = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "port", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Authenticator_methods_requestPasswordAuthentication_INLRInetAddress_IINLRString_INLRString_INLRString__LRPasswordAuthentication__arg_protocol = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "protocol", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Authenticator_methods_requestPasswordAuthentication_INLRInetAddress_IINLRString_INLRString_INLRString__LRPasswordAuthentication__arg_prompt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "prompt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Authenticator_methods_requestPasswordAuthentication_INLRInetAddress_IINLRString_INLRString_INLRString__LRPasswordAuthentication__arg_scheme = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "scheme", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Authenticator_methods_requestPasswordAuthentication_INLRInetAddress_IINLRString_INLRString_INLRString__LRPasswordAuthentication__args[] = 
{
  &Authenticator_methods_requestPasswordAuthentication_INLRInetAddress_IINLRString_INLRString_INLRString__LRPasswordAuthentication__arg_addr,
  &Authenticator_methods_requestPasswordAuthentication_INLRInetAddress_IINLRString_INLRString_INLRString__LRPasswordAuthentication__arg_port,
  &Authenticator_methods_requestPasswordAuthentication_INLRInetAddress_IINLRString_INLRString_INLRString__LRPasswordAuthentication__arg_protocol,
  &Authenticator_methods_requestPasswordAuthentication_INLRInetAddress_IINLRString_INLRString_INLRString__LRPasswordAuthentication__arg_prompt,
  &Authenticator_methods_requestPasswordAuthentication_INLRInetAddress_IINLRString_INLRString_INLRString__LRPasswordAuthentication__arg_scheme,
  0
};

::acdk::lang::dmi::ClazzInfo* Authenticator_methods_requestPasswordAuthentication_INLRInetAddress_IINLRString_INLRString_INLRString__LRPasswordAuthentication__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Authenticator_method_requestPasswordAuthentication_INLRInetAddress_IINLRString_INLRString_INLRString__LRPasswordAuthentication_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "requestPasswordAuthentication", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPasswordAuthentication::clazzInfo(), // return type
  "_1_requestPasswordAuthentication", // alternative name of method
  -1, // altlabelHashCode
  Authenticator_methods_requestPasswordAuthentication_INLRInetAddress_IINLRString_INLRString_INLRString__LRPasswordAuthentication__args, // the arguments
  0, //arguments count
  Authenticator_methods_requestPasswordAuthentication_INLRInetAddress_IINLRString_INLRString_INLRString__LRPasswordAuthentication__exceptions, // the declared exceptions
  Authenticator_MetainfoWrapper::Authenticator_method_requestPasswordAuthentication_INLRInetAddress_IINLRString_INLRString_INLRString__LRPasswordAuthentication__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Authenticator_methods_setDefault_INLRAuthenticator__V_arg_def_auth = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "def_auth", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAuthenticator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Authenticator_methods_setDefault_INLRAuthenticator__V_args[] = 
{
  &Authenticator_methods_setDefault_INLRAuthenticator__V_arg_def_auth,
  0
};

::acdk::lang::dmi::ClazzInfo* Authenticator_methods_setDefault_INLRAuthenticator__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Authenticator_method_setDefault_INLRAuthenticator__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDefault", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0_setDefault", // alternative name of method
  -1, // altlabelHashCode
  Authenticator_methods_setDefault_INLRAuthenticator__V_args, // the arguments
  0, //arguments count
  Authenticator_methods_setDefault_INLRAuthenticator__V_exceptions, // the declared exceptions
  Authenticator_MetainfoWrapper::Authenticator_method_setDefault_INLRAuthenticator__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Authenticator_methods[] = 
{
  &Authenticator_method_Authenticator__LRAuthenticator_,
  &Authenticator_method_GetClass__L_acdk_lang_RClass_,
  &Authenticator_method_getPasswordAuthentication__LRPasswordAuthentication_,
  &Authenticator_method_getRequestingPort__I,
  &Authenticator_method_getRequestingPrompt__LRString_,
  &Authenticator_method_getRequestingProtocol__LRString_,
  &Authenticator_method_getRequestingScheme__LRString_,
  &Authenticator_method_getRequestingSite__LRInetAddress_,
  &Authenticator_method_requestPasswordAuthentication_INLRInetAddress_IINLRString_INLRString_INLRString__LRPasswordAuthentication_,
  &Authenticator_method_setDefault_INLRAuthenticator__V,
  0
};


struct Authenticator_MetaInfoInitializer
{  Authenticator_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Authenticator::clazzInfo();
    ci->fields =  _Authenticator_fields;
    ci->methods =  _Authenticator_methods;
    ci->_scopeParent = acdk_net_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Authenticator_MetaInfoInitializer Authenticator_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 


//static
::acdk::lang::RObject
ContentHandler_create_array(int length)
{
  return new ObjectArrayImpl<RContentHandler>(length);
}

//static
::acdk::lang::RObject
ContentHandler_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ContentHandler_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ContentHandler_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ContentHandler::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ContentHandler_method_getContent_INLRURLConnection__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ContentHandler* This = dmi_cast<ContentHandler>(This_);
    ret = (::acdk::lang::RObject)This->getContent(::acdk::lang::dmi::castTo< RURLConnection>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ContentHandler_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ContentHandler_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ContentHandler_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ContentHandler_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ContentHandler_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ContentHandler_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ContentHandler_MetainfoWrapper::ContentHandler_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ContentHandler_methods_getContent_INLRURLConnection__LRObject__arg_urlcon = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "urlcon", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RURLConnection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ContentHandler_methods_getContent_INLRURLConnection__LRObject__args[] = 
{
  &ContentHandler_methods_getContent_INLRURLConnection__LRObject__arg_urlcon,
  0
};

::acdk::lang::dmi::ClazzInfo* ContentHandler_methods_getContent_INLRURLConnection__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ContentHandler_method_getContent_INLRURLConnection__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getContent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_0_getContent", // alternative name of method
  -1, // altlabelHashCode
  ContentHandler_methods_getContent_INLRURLConnection__LRObject__args, // the arguments
  0, //arguments count
  ContentHandler_methods_getContent_INLRURLConnection__LRObject__exceptions, // the declared exceptions
  ContentHandler_MetainfoWrapper::ContentHandler_method_getContent_INLRURLConnection__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ContentHandler_methods[] = 
{
  &ContentHandler_method_GetClass__L_acdk_lang_RClass_,
  &ContentHandler_method_getContent_INLRURLConnection__LRObject_,
  0
};


struct ContentHandler_MetaInfoInitializer
{  ContentHandler_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ContentHandler::clazzInfo();
    ci->fields =  _ContentHandler_fields;
    ci->methods =  _ContentHandler_methods;
    ci->_scopeParent = acdk_net_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ContentHandler_MetaInfoInitializer ContentHandler_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 


//static
::acdk::lang::RObject
ContentHandlerFactory_create_array(int length)
{
  return new ObjectArrayImpl<RContentHandlerFactory>(length);
}

//static
::acdk::lang::RObject
ContentHandlerFactory_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ContentHandlerFactory_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ContentHandlerFactory_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ContentHandlerFactory::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ContentHandlerFactory_method_createContentHandler_INLRString__LRContentHandler__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ContentHandlerFactory* This = dmi_cast<ContentHandlerFactory>(This_);
    ret = (::acdk::lang::RObject)This->createContentHandler(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ContentHandlerFactory_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ContentHandlerFactory_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ContentHandlerFactory_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ContentHandlerFactory_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ContentHandlerFactory_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ContentHandlerFactory_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ContentHandlerFactory_MetainfoWrapper::ContentHandlerFactory_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ContentHandlerFactory_methods_createContentHandler_INLRString__LRContentHandler__arg_mime_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "mime_type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ContentHandlerFactory_methods_createContentHandler_INLRString__LRContentHandler__args[] = 
{
  &ContentHandlerFactory_methods_createContentHandler_INLRString__LRContentHandler__arg_mime_type,
  0
};

::acdk::lang::dmi::ClazzInfo* ContentHandlerFactory_methods_createContentHandler_INLRString__LRContentHandler__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ContentHandlerFactory_method_createContentHandler_INLRString__LRContentHandler_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createContentHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RContentHandler::clazzInfo(), // return type
  "_0_createContentHandler", // alternative name of method
  -1, // altlabelHashCode
  ContentHandlerFactory_methods_createContentHandler_INLRString__LRContentHandler__args, // the arguments
  0, //arguments count
  ContentHandlerFactory_methods_createContentHandler_INLRString__LRContentHandler__exceptions, // the declared exceptions
  ContentHandlerFactory_MetainfoWrapper::ContentHandlerFactory_method_createContentHandler_INLRString__LRContentHandler__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ContentHandlerFactory_methods[] = 
{
  &ContentHandlerFactory_method_GetClass__L_acdk_lang_RClass_,
  &ContentHandlerFactory_method_createContentHandler_INLRString__LRContentHandler_,
  0
};


struct ContentHandlerFactory_MetaInfoInitializer
{  ContentHandlerFactory_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ContentHandlerFactory::clazzInfo();
    ci->fields =  _ContentHandlerFactory_fields;
    ci->methods =  _ContentHandlerFactory_methods;
    ci->_scopeParent = acdk_net_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ContentHandlerFactory_MetaInfoInitializer ContentHandlerFactory_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 


//static
::acdk::lang::RObject
DatagramPacket_create_array(int length)
{
  return new ObjectArrayImpl<RDatagramPacket>(length);
}

//static
::acdk::lang::RObject
DatagramPacket_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DatagramPacket_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramPacket_method_DatagramPacket_INLRbyteArray_I_LRDatagramPacket__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DatagramPacket(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramPacket_method_DatagramPacket_INLRReadWriteByteBuffer__LRDatagramPacket__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DatagramPacket(::acdk::lang::dmi::castTo< RReadWriteByteBuffer>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramPacket_method_DatagramPacket_INLRbyteArray_IINLRInetAddress_I_LRDatagramPacket__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DatagramPacket(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< RInetAddress>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramPacket_method_DatagramPacket_INLRReadWriteByteBuffer_INLRInetAddress_I_LRDatagramPacket__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DatagramPacket(::acdk::lang::dmi::castTo< RReadWriteByteBuffer>(args[0], dc), ::acdk::lang::dmi::castTo< RInetAddress>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramPacket_method_DatagramPacket_INLRbyteArray_II_LRDatagramPacket__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DatagramPacket(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramPacket_method_DatagramPacket_INLRbyteArray_IIINLRInetAddress_I_LRDatagramPacket__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DatagramPacket(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< RInetAddress>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramPacket_method_DatagramPacket_INLRbyteArray_IIINLRInetSocketAddress__LRDatagramPacket__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DatagramPacket(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< RInetSocketAddress>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramPacket_method_DatagramPacket_INLRbyteArray_IINLRInetSocketAddress__LRDatagramPacket__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DatagramPacket(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< RInetSocketAddress>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramPacket_method_DatagramPacket_INLRReadWriteByteBuffer_INLRInetSocketAddress__LRDatagramPacket__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DatagramPacket(::acdk::lang::dmi::castTo< RReadWriteByteBuffer>(args[0], dc), ::acdk::lang::dmi::castTo< RInetSocketAddress>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramPacket_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DatagramPacket::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramPacket_method_getData__LRReadWriteByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatagramPacket* This = dmi_cast<DatagramPacket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DatagramPacket::getData();
    else
        ret = (::acdk::lang::RObject)This->getData();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramPacket_method_getLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatagramPacket* This = dmi_cast<DatagramPacket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DatagramPacket::getLength();
    else
      ret = This->getLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramPacket_method_getPort__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatagramPacket* This = dmi_cast<DatagramPacket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DatagramPacket::getPort();
    else
      ret = This->getPort();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramPacket_method_getSocketAddress__LRInetSocketAddress__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatagramPacket* This = dmi_cast<DatagramPacket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DatagramPacket::getSocketAddress();
    else
        ret = (::acdk::lang::RObject)This->getSocketAddress();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramPacket_method_setData_INLRbyteArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatagramPacket* This = dmi_cast<DatagramPacket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DatagramPacket::setData(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc));
    else
        This->setData(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramPacket_method_setData_INLRbyteArray_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatagramPacket* This = dmi_cast<DatagramPacket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DatagramPacket::setData(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    else
        This->setData(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramPacket_method_setData_INLRReadWriteByteBuffer__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatagramPacket* This = dmi_cast<DatagramPacket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DatagramPacket::setData(::acdk::lang::dmi::castTo< RReadWriteByteBuffer>(args[0], dc));
    else
        This->setData(::acdk::lang::dmi::castTo< RReadWriteByteBuffer>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramPacket_method_setLength_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatagramPacket* This = dmi_cast<DatagramPacket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DatagramPacket::setLength(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setLength(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramPacket_method_setSocketAddress_INLRInetSocketAddress__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatagramPacket* This = dmi_cast<DatagramPacket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DatagramPacket::setSocketAddress(::acdk::lang::dmi::castTo< RInetSocketAddress>(args[0], dc));
    else
        This->setSocketAddress(::acdk::lang::dmi::castTo< RInetSocketAddress>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DatagramPacket_fields__address_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DatagramPacket* This = dmi_cast<DatagramPacket>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_address, flags);
    else
      This->_address = ::acdk::lang::dmi::castTo< RInetSocketAddress>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DatagramPacket_fields__buffer_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DatagramPacket* This = dmi_cast<DatagramPacket>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_buffer, flags);
    else
      This->_buffer = ::acdk::lang::dmi::castTo< RReadWriteByteBuffer>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo DatagramPacket_fields__address = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_address", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetSocketAddress::clazzInfo(),
  DatagramPacket_MetainfoWrapper::DatagramPacket_fields__address_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DatagramPacket_fields__buffer = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_buffer", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadWriteByteBuffer::clazzInfo(),
  DatagramPacket_MetainfoWrapper::DatagramPacket_fields__buffer_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _DatagramPacket_fields[] = 
{
  &DatagramPacket_fields__address,
  &DatagramPacket_fields__buffer,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramPacket_methods_DatagramPacket_INLRbyteArray_I_LRDatagramPacket__arg_buf = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buf", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramPacket_methods_DatagramPacket_INLRbyteArray_I_LRDatagramPacket__arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramPacket_methods_DatagramPacket_INLRbyteArray_I_LRDatagramPacket__args[] = 
{
  &DatagramPacket_methods_DatagramPacket_INLRbyteArray_I_LRDatagramPacket__arg_buf,
  &DatagramPacket_methods_DatagramPacket_INLRbyteArray_I_LRDatagramPacket__arg_length,
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramPacket_methods_DatagramPacket_INLRbyteArray_I_LRDatagramPacket__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramPacket_method_DatagramPacket_INLRbyteArray_I_LRDatagramPacket_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DatagramPacket", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DatagramPacket::clazzInfo(), // return type
  "_0_DatagramPacket", // alternative name of method
  -1, // altlabelHashCode
  DatagramPacket_methods_DatagramPacket_INLRbyteArray_I_LRDatagramPacket__args, // the arguments
  0, //arguments count
  DatagramPacket_methods_DatagramPacket_INLRbyteArray_I_LRDatagramPacket__exceptions, // the declared exceptions
  DatagramPacket_MetainfoWrapper::DatagramPacket_method_DatagramPacket_INLRbyteArray_I_LRDatagramPacket__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramPacket_methods_DatagramPacket_INLRReadWriteByteBuffer__LRDatagramPacket__arg_buf = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buf", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadWriteByteBuffer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramPacket_methods_DatagramPacket_INLRReadWriteByteBuffer__LRDatagramPacket__args[] = 
{
  &DatagramPacket_methods_DatagramPacket_INLRReadWriteByteBuffer__LRDatagramPacket__arg_buf,
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramPacket_methods_DatagramPacket_INLRReadWriteByteBuffer__LRDatagramPacket__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramPacket_method_DatagramPacket_INLRReadWriteByteBuffer__LRDatagramPacket_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DatagramPacket", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DatagramPacket::clazzInfo(), // return type
  "_1_DatagramPacket", // alternative name of method
  -1, // altlabelHashCode
  DatagramPacket_methods_DatagramPacket_INLRReadWriteByteBuffer__LRDatagramPacket__args, // the arguments
  0, //arguments count
  DatagramPacket_methods_DatagramPacket_INLRReadWriteByteBuffer__LRDatagramPacket__exceptions, // the declared exceptions
  DatagramPacket_MetainfoWrapper::DatagramPacket_method_DatagramPacket_INLRReadWriteByteBuffer__LRDatagramPacket__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramPacket_methods_DatagramPacket_INLRbyteArray_IINLRInetAddress_I_LRDatagramPacket__arg_buf = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buf", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramPacket_methods_DatagramPacket_INLRbyteArray_IINLRInetAddress_I_LRDatagramPacket__arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramPacket_methods_DatagramPacket_INLRbyteArray_IINLRInetAddress_I_LRDatagramPacket__arg_address = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "address", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetAddress::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramPacket_methods_DatagramPacket_INLRbyteArray_IINLRInetAddress_I_LRDatagramPacket__arg_port = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "port", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramPacket_methods_DatagramPacket_INLRbyteArray_IINLRInetAddress_I_LRDatagramPacket__args[] = 
{
  &DatagramPacket_methods_DatagramPacket_INLRbyteArray_IINLRInetAddress_I_LRDatagramPacket__arg_buf,
  &DatagramPacket_methods_DatagramPacket_INLRbyteArray_IINLRInetAddress_I_LRDatagramPacket__arg_length,
  &DatagramPacket_methods_DatagramPacket_INLRbyteArray_IINLRInetAddress_I_LRDatagramPacket__arg_address,
  &DatagramPacket_methods_DatagramPacket_INLRbyteArray_IINLRInetAddress_I_LRDatagramPacket__arg_port,
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramPacket_methods_DatagramPacket_INLRbyteArray_IINLRInetAddress_I_LRDatagramPacket__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramPacket_method_DatagramPacket_INLRbyteArray_IINLRInetAddress_I_LRDatagramPacket_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DatagramPacket", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DatagramPacket::clazzInfo(), // return type
  "_2_DatagramPacket", // alternative name of method
  -1, // altlabelHashCode
  DatagramPacket_methods_DatagramPacket_INLRbyteArray_IINLRInetAddress_I_LRDatagramPacket__args, // the arguments
  0, //arguments count
  DatagramPacket_methods_DatagramPacket_INLRbyteArray_IINLRInetAddress_I_LRDatagramPacket__exceptions, // the declared exceptions
  DatagramPacket_MetainfoWrapper::DatagramPacket_method_DatagramPacket_INLRbyteArray_IINLRInetAddress_I_LRDatagramPacket__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramPacket_methods_DatagramPacket_INLRReadWriteByteBuffer_INLRInetAddress_I_LRDatagramPacket__arg_buf = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buf", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadWriteByteBuffer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramPacket_methods_DatagramPacket_INLRReadWriteByteBuffer_INLRInetAddress_I_LRDatagramPacket__arg_address = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "address", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetAddress::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramPacket_methods_DatagramPacket_INLRReadWriteByteBuffer_INLRInetAddress_I_LRDatagramPacket__arg_port = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "port", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramPacket_methods_DatagramPacket_INLRReadWriteByteBuffer_INLRInetAddress_I_LRDatagramPacket__args[] = 
{
  &DatagramPacket_methods_DatagramPacket_INLRReadWriteByteBuffer_INLRInetAddress_I_LRDatagramPacket__arg_buf,
  &DatagramPacket_methods_DatagramPacket_INLRReadWriteByteBuffer_INLRInetAddress_I_LRDatagramPacket__arg_address,
  &DatagramPacket_methods_DatagramPacket_INLRReadWriteByteBuffer_INLRInetAddress_I_LRDatagramPacket__arg_port,
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramPacket_methods_DatagramPacket_INLRReadWriteByteBuffer_INLRInetAddress_I_LRDatagramPacket__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramPacket_method_DatagramPacket_INLRReadWriteByteBuffer_INLRInetAddress_I_LRDatagramPacket_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DatagramPacket", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DatagramPacket::clazzInfo(), // return type
  "_3_DatagramPacket", // alternative name of method
  -1, // altlabelHashCode
  DatagramPacket_methods_DatagramPacket_INLRReadWriteByteBuffer_INLRInetAddress_I_LRDatagramPacket__args, // the arguments
  0, //arguments count
  DatagramPacket_methods_DatagramPacket_INLRReadWriteByteBuffer_INLRInetAddress_I_LRDatagramPacket__exceptions, // the declared exceptions
  DatagramPacket_MetainfoWrapper::DatagramPacket_method_DatagramPacket_INLRReadWriteByteBuffer_INLRInetAddress_I_LRDatagramPacket__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramPacket_methods_DatagramPacket_INLRbyteArray_II_LRDatagramPacket__arg_buf = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buf", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramPacket_methods_DatagramPacket_INLRbyteArray_II_LRDatagramPacket__arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramPacket_methods_DatagramPacket_INLRbyteArray_II_LRDatagramPacket__arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramPacket_methods_DatagramPacket_INLRbyteArray_II_LRDatagramPacket__args[] = 
{
  &DatagramPacket_methods_DatagramPacket_INLRbyteArray_II_LRDatagramPacket__arg_buf,
  &DatagramPacket_methods_DatagramPacket_INLRbyteArray_II_LRDatagramPacket__arg_offset,
  &DatagramPacket_methods_DatagramPacket_INLRbyteArray_II_LRDatagramPacket__arg_length,
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramPacket_methods_DatagramPacket_INLRbyteArray_II_LRDatagramPacket__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramPacket_method_DatagramPacket_INLRbyteArray_II_LRDatagramPacket_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DatagramPacket", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DatagramPacket::clazzInfo(), // return type
  "_4_DatagramPacket", // alternative name of method
  -1, // altlabelHashCode
  DatagramPacket_methods_DatagramPacket_INLRbyteArray_II_LRDatagramPacket__args, // the arguments
  0, //arguments count
  DatagramPacket_methods_DatagramPacket_INLRbyteArray_II_LRDatagramPacket__exceptions, // the declared exceptions
  DatagramPacket_MetainfoWrapper::DatagramPacket_method_DatagramPacket_INLRbyteArray_II_LRDatagramPacket__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramPacket_methods_DatagramPacket_INLRbyteArray_IIINLRInetAddress_I_LRDatagramPacket__arg_buf = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buf", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramPacket_methods_DatagramPacket_INLRbyteArray_IIINLRInetAddress_I_LRDatagramPacket__arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramPacket_methods_DatagramPacket_INLRbyteArray_IIINLRInetAddress_I_LRDatagramPacket__arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramPacket_methods_DatagramPacket_INLRbyteArray_IIINLRInetAddress_I_LRDatagramPacket__arg_address = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "address", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetAddress::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramPacket_methods_DatagramPacket_INLRbyteArray_IIINLRInetAddress_I_LRDatagramPacket__arg_port = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "port", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramPacket_methods_DatagramPacket_INLRbyteArray_IIINLRInetAddress_I_LRDatagramPacket__args[] = 
{
  &DatagramPacket_methods_DatagramPacket_INLRbyteArray_IIINLRInetAddress_I_LRDatagramPacket__arg_buf,
  &DatagramPacket_methods_DatagramPacket_INLRbyteArray_IIINLRInetAddress_I_LRDatagramPacket__arg_offset,
  &DatagramPacket_methods_DatagramPacket_INLRbyteArray_IIINLRInetAddress_I_LRDatagramPacket__arg_length,
  &DatagramPacket_methods_DatagramPacket_INLRbyteArray_IIINLRInetAddress_I_LRDatagramPacket__arg_address,
  &DatagramPacket_methods_DatagramPacket_INLRbyteArray_IIINLRInetAddress_I_LRDatagramPacket__arg_port,
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramPacket_methods_DatagramPacket_INLRbyteArray_IIINLRInetAddress_I_LRDatagramPacket__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramPacket_method_DatagramPacket_INLRbyteArray_IIINLRInetAddress_I_LRDatagramPacket_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DatagramPacket", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DatagramPacket::clazzInfo(), // return type
  "_5_DatagramPacket", // alternative name of method
  -1, // altlabelHashCode
  DatagramPacket_methods_DatagramPacket_INLRbyteArray_IIINLRInetAddress_I_LRDatagramPacket__args, // the arguments
  0, //arguments count
  DatagramPacket_methods_DatagramPacket_INLRbyteArray_IIINLRInetAddress_I_LRDatagramPacket__exceptions, // the declared exceptions
  DatagramPacket_MetainfoWrapper::DatagramPacket_method_DatagramPacket_INLRbyteArray_IIINLRInetAddress_I_LRDatagramPacket__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramPacket_methods_DatagramPacket_INLRbyteArray_IIINLRInetSocketAddress__LRDatagramPacket__arg_buf = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buf", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramPacket_methods_DatagramPacket_INLRbyteArray_IIINLRInetSocketAddress__LRDatagramPacket__arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramPacket_methods_DatagramPacket_INLRbyteArray_IIINLRInetSocketAddress__LRDatagramPacket__arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramPacket_methods_DatagramPacket_INLRbyteArray_IIINLRInetSocketAddress__LRDatagramPacket__arg_address = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "address", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetSocketAddress::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramPacket_methods_DatagramPacket_INLRbyteArray_IIINLRInetSocketAddress__LRDatagramPacket__args[] = 
{
  &DatagramPacket_methods_DatagramPacket_INLRbyteArray_IIINLRInetSocketAddress__LRDatagramPacket__arg_buf,
  &DatagramPacket_methods_DatagramPacket_INLRbyteArray_IIINLRInetSocketAddress__LRDatagramPacket__arg_offset,
  &DatagramPacket_methods_DatagramPacket_INLRbyteArray_IIINLRInetSocketAddress__LRDatagramPacket__arg_length,
  &DatagramPacket_methods_DatagramPacket_INLRbyteArray_IIINLRInetSocketAddress__LRDatagramPacket__arg_address,
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramPacket_methods_DatagramPacket_INLRbyteArray_IIINLRInetSocketAddress__LRDatagramPacket__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramPacket_method_DatagramPacket_INLRbyteArray_IIINLRInetSocketAddress__LRDatagramPacket_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DatagramPacket", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DatagramPacket::clazzInfo(), // return type
  "_6_DatagramPacket", // alternative name of method
  -1, // altlabelHashCode
  DatagramPacket_methods_DatagramPacket_INLRbyteArray_IIINLRInetSocketAddress__LRDatagramPacket__args, // the arguments
  0, //arguments count
  DatagramPacket_methods_DatagramPacket_INLRbyteArray_IIINLRInetSocketAddress__LRDatagramPacket__exceptions, // the declared exceptions
  DatagramPacket_MetainfoWrapper::DatagramPacket_method_DatagramPacket_INLRbyteArray_IIINLRInetSocketAddress__LRDatagramPacket__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramPacket_methods_DatagramPacket_INLRbyteArray_IINLRInetSocketAddress__LRDatagramPacket__arg_buf = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buf", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramPacket_methods_DatagramPacket_INLRbyteArray_IINLRInetSocketAddress__LRDatagramPacket__arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramPacket_methods_DatagramPacket_INLRbyteArray_IINLRInetSocketAddress__LRDatagramPacket__arg_address = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "address", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetSocketAddress::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramPacket_methods_DatagramPacket_INLRbyteArray_IINLRInetSocketAddress__LRDatagramPacket__args[] = 
{
  &DatagramPacket_methods_DatagramPacket_INLRbyteArray_IINLRInetSocketAddress__LRDatagramPacket__arg_buf,
  &DatagramPacket_methods_DatagramPacket_INLRbyteArray_IINLRInetSocketAddress__LRDatagramPacket__arg_length,
  &DatagramPacket_methods_DatagramPacket_INLRbyteArray_IINLRInetSocketAddress__LRDatagramPacket__arg_address,
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramPacket_methods_DatagramPacket_INLRbyteArray_IINLRInetSocketAddress__LRDatagramPacket__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramPacket_method_DatagramPacket_INLRbyteArray_IINLRInetSocketAddress__LRDatagramPacket_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DatagramPacket", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DatagramPacket::clazzInfo(), // return type
  "_7_DatagramPacket", // alternative name of method
  -1, // altlabelHashCode
  DatagramPacket_methods_DatagramPacket_INLRbyteArray_IINLRInetSocketAddress__LRDatagramPacket__args, // the arguments
  0, //arguments count
  DatagramPacket_methods_DatagramPacket_INLRbyteArray_IINLRInetSocketAddress__LRDatagramPacket__exceptions, // the declared exceptions
  DatagramPacket_MetainfoWrapper::DatagramPacket_method_DatagramPacket_INLRbyteArray_IINLRInetSocketAddress__LRDatagramPacket__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramPacket_methods_DatagramPacket_INLRReadWriteByteBuffer_INLRInetSocketAddress__LRDatagramPacket__arg_buf = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buf", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadWriteByteBuffer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramPacket_methods_DatagramPacket_INLRReadWriteByteBuffer_INLRInetSocketAddress__LRDatagramPacket__arg_address = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "address", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetSocketAddress::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramPacket_methods_DatagramPacket_INLRReadWriteByteBuffer_INLRInetSocketAddress__LRDatagramPacket__args[] = 
{
  &DatagramPacket_methods_DatagramPacket_INLRReadWriteByteBuffer_INLRInetSocketAddress__LRDatagramPacket__arg_buf,
  &DatagramPacket_methods_DatagramPacket_INLRReadWriteByteBuffer_INLRInetSocketAddress__LRDatagramPacket__arg_address,
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramPacket_methods_DatagramPacket_INLRReadWriteByteBuffer_INLRInetSocketAddress__LRDatagramPacket__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramPacket_method_DatagramPacket_INLRReadWriteByteBuffer_INLRInetSocketAddress__LRDatagramPacket_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DatagramPacket", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DatagramPacket::clazzInfo(), // return type
  "_8_DatagramPacket", // alternative name of method
  -1, // altlabelHashCode
  DatagramPacket_methods_DatagramPacket_INLRReadWriteByteBuffer_INLRInetSocketAddress__LRDatagramPacket__args, // the arguments
  0, //arguments count
  DatagramPacket_methods_DatagramPacket_INLRReadWriteByteBuffer_INLRInetSocketAddress__LRDatagramPacket__exceptions, // the declared exceptions
  DatagramPacket_MetainfoWrapper::DatagramPacket_method_DatagramPacket_INLRReadWriteByteBuffer_INLRInetSocketAddress__LRDatagramPacket__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramPacket_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramPacket_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramPacket_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_i_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DatagramPacket_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DatagramPacket_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DatagramPacket_MetainfoWrapper::DatagramPacket_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramPacket_methods_getData__LRReadWriteByteBuffer__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramPacket_methods_getData__LRReadWriteByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramPacket_method_getData__LRReadWriteByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadWriteByteBuffer::clazzInfo(), // return type
  "_9_getData", // alternative name of method
  -1, // altlabelHashCode
  DatagramPacket_methods_getData__LRReadWriteByteBuffer__args, // the arguments
  0, //arguments count
  DatagramPacket_methods_getData__LRReadWriteByteBuffer__exceptions, // the declared exceptions
  DatagramPacket_MetainfoWrapper::DatagramPacket_method_getData__LRReadWriteByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramPacket_methods_getLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramPacket_methods_getLength__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramPacket_method_getLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_a_getLength", // alternative name of method
  -1, // altlabelHashCode
  DatagramPacket_methods_getLength__I_args, // the arguments
  0, //arguments count
  DatagramPacket_methods_getLength__I_exceptions, // the declared exceptions
  DatagramPacket_MetainfoWrapper::DatagramPacket_method_getLength__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramPacket_methods_getPort__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramPacket_methods_getPort__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramPacket_method_getPort__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_b_getPort", // alternative name of method
  -1, // altlabelHashCode
  DatagramPacket_methods_getPort__I_args, // the arguments
  0, //arguments count
  DatagramPacket_methods_getPort__I_exceptions, // the declared exceptions
  DatagramPacket_MetainfoWrapper::DatagramPacket_method_getPort__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramPacket_methods_getSocketAddress__LRInetSocketAddress__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramPacket_methods_getSocketAddress__LRInetSocketAddress__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramPacket_method_getSocketAddress__LRInetSocketAddress_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSocketAddress", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetSocketAddress::clazzInfo(), // return type
  "_c_getSocketAddress", // alternative name of method
  -1, // altlabelHashCode
  DatagramPacket_methods_getSocketAddress__LRInetSocketAddress__args, // the arguments
  0, //arguments count
  DatagramPacket_methods_getSocketAddress__LRInetSocketAddress__exceptions, // the declared exceptions
  DatagramPacket_MetainfoWrapper::DatagramPacket_method_getSocketAddress__LRInetSocketAddress__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramPacket_methods_setData_INLRbyteArray__V_arg_buf = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buf", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramPacket_methods_setData_INLRbyteArray__V_args[] = 
{
  &DatagramPacket_methods_setData_INLRbyteArray__V_arg_buf,
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramPacket_methods_setData_INLRbyteArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramPacket_method_setData_INLRbyteArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_setData", // alternative name of method
  -1, // altlabelHashCode
  DatagramPacket_methods_setData_INLRbyteArray__V_args, // the arguments
  0, //arguments count
  DatagramPacket_methods_setData_INLRbyteArray__V_exceptions, // the declared exceptions
  DatagramPacket_MetainfoWrapper::DatagramPacket_method_setData_INLRbyteArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramPacket_methods_setData_INLRbyteArray_II_V_arg_buf = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buf", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramPacket_methods_setData_INLRbyteArray_II_V_arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramPacket_methods_setData_INLRbyteArray_II_V_arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramPacket_methods_setData_INLRbyteArray_II_V_args[] = 
{
  &DatagramPacket_methods_setData_INLRbyteArray_II_V_arg_buf,
  &DatagramPacket_methods_setData_INLRbyteArray_II_V_arg_offset,
  &DatagramPacket_methods_setData_INLRbyteArray_II_V_arg_length,
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramPacket_methods_setData_INLRbyteArray_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramPacket_method_setData_INLRbyteArray_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_setData", // alternative name of method
  -1, // altlabelHashCode
  DatagramPacket_methods_setData_INLRbyteArray_II_V_args, // the arguments
  0, //arguments count
  DatagramPacket_methods_setData_INLRbyteArray_II_V_exceptions, // the declared exceptions
  DatagramPacket_MetainfoWrapper::DatagramPacket_method_setData_INLRbyteArray_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramPacket_methods_setData_INLRReadWriteByteBuffer__V_arg_buffer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buffer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadWriteByteBuffer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramPacket_methods_setData_INLRReadWriteByteBuffer__V_args[] = 
{
  &DatagramPacket_methods_setData_INLRReadWriteByteBuffer__V_arg_buffer,
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramPacket_methods_setData_INLRReadWriteByteBuffer__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramPacket_method_setData_INLRReadWriteByteBuffer__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_setData", // alternative name of method
  -1, // altlabelHashCode
  DatagramPacket_methods_setData_INLRReadWriteByteBuffer__V_args, // the arguments
  0, //arguments count
  DatagramPacket_methods_setData_INLRReadWriteByteBuffer__V_exceptions, // the declared exceptions
  DatagramPacket_MetainfoWrapper::DatagramPacket_method_setData_INLRReadWriteByteBuffer__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramPacket_methods_setLength_I_V_arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramPacket_methods_setLength_I_V_args[] = 
{
  &DatagramPacket_methods_setLength_I_V_arg_length,
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramPacket_methods_setLength_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramPacket_method_setLength_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_setLength", // alternative name of method
  -1, // altlabelHashCode
  DatagramPacket_methods_setLength_I_V_args, // the arguments
  0, //arguments count
  DatagramPacket_methods_setLength_I_V_exceptions, // the declared exceptions
  DatagramPacket_MetainfoWrapper::DatagramPacket_method_setLength_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramPacket_methods_setSocketAddress_INLRInetSocketAddress__V_arg_address = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "address", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetSocketAddress::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramPacket_methods_setSocketAddress_INLRInetSocketAddress__V_args[] = 
{
  &DatagramPacket_methods_setSocketAddress_INLRInetSocketAddress__V_arg_address,
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramPacket_methods_setSocketAddress_INLRInetSocketAddress__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramPacket_method_setSocketAddress_INLRInetSocketAddress__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSocketAddress", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_h_setSocketAddress", // alternative name of method
  -1, // altlabelHashCode
  DatagramPacket_methods_setSocketAddress_INLRInetSocketAddress__V_args, // the arguments
  0, //arguments count
  DatagramPacket_methods_setSocketAddress_INLRInetSocketAddress__V_exceptions, // the declared exceptions
  DatagramPacket_MetainfoWrapper::DatagramPacket_method_setSocketAddress_INLRInetSocketAddress__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DatagramPacket_methods[] = 
{
  &DatagramPacket_method_DatagramPacket_INLRbyteArray_I_LRDatagramPacket_,
  &DatagramPacket_method_DatagramPacket_INLRReadWriteByteBuffer__LRDatagramPacket_,
  &DatagramPacket_method_DatagramPacket_INLRbyteArray_IINLRInetAddress_I_LRDatagramPacket_,
  &DatagramPacket_method_DatagramPacket_INLRReadWriteByteBuffer_INLRInetAddress_I_LRDatagramPacket_,
  &DatagramPacket_method_DatagramPacket_INLRbyteArray_II_LRDatagramPacket_,
  &DatagramPacket_method_DatagramPacket_INLRbyteArray_IIINLRInetAddress_I_LRDatagramPacket_,
  &DatagramPacket_method_DatagramPacket_INLRbyteArray_IIINLRInetSocketAddress__LRDatagramPacket_,
  &DatagramPacket_method_DatagramPacket_INLRbyteArray_IINLRInetSocketAddress__LRDatagramPacket_,
  &DatagramPacket_method_DatagramPacket_INLRReadWriteByteBuffer_INLRInetSocketAddress__LRDatagramPacket_,
  &DatagramPacket_method_GetClass__L_acdk_lang_RClass_,
  &DatagramPacket_method_getData__LRReadWriteByteBuffer_,
  &DatagramPacket_method_getLength__I,
  &DatagramPacket_method_getPort__I,
  &DatagramPacket_method_getSocketAddress__LRInetSocketAddress_,
  &DatagramPacket_method_setData_INLRbyteArray__V,
  &DatagramPacket_method_setData_INLRbyteArray_II_V,
  &DatagramPacket_method_setData_INLRReadWriteByteBuffer__V,
  &DatagramPacket_method_setLength_I_V,
  &DatagramPacket_method_setSocketAddress_INLRInetSocketAddress__V,
  0
};


struct DatagramPacket_MetaInfoInitializer
{  DatagramPacket_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DatagramPacket::clazzInfo();
    ci->fields =  _DatagramPacket_fields;
    ci->methods =  _DatagramPacket_methods;
    ci->_scopeParent = acdk_net_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DatagramPacket_MetaInfoInitializer DatagramPacket_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 


//static
::acdk::lang::RObject
DatagramSocket_create_array(int length)
{
  return new ObjectArrayImpl<RDatagramSocket>(length);
}

//static
::acdk::lang::RObject
DatagramSocket_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DatagramSocket_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramSocket_method_DatagramSocket__LRDatagramSocket__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DatagramSocket();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramSocket_method_DatagramSocket_I_LRDatagramSocket__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DatagramSocket(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramSocket_method_DatagramSocket_IINLRInetAddress__LRDatagramSocket__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DatagramSocket(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RInetAddress>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramSocket_method_DatagramSocket_INLRInetSocketAddress__LRDatagramSocket__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DatagramSocket(::acdk::lang::dmi::castTo< RInetSocketAddress>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramSocket_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DatagramSocket::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramSocket_method_bind_INLRInetSocketAddress__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatagramSocket* This = dmi_cast<DatagramSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DatagramSocket::bind(::acdk::lang::dmi::castTo< RInetSocketAddress>(args[0], dc));
    else
        This->bind(::acdk::lang::dmi::castTo< RInetSocketAddress>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramSocket_method_close__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatagramSocket* This = dmi_cast<DatagramSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DatagramSocket::close();
    else
        This->close();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramSocket_method_connect_INLRInetAddress_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatagramSocket* This = dmi_cast<DatagramSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DatagramSocket::connect(::acdk::lang::dmi::castTo< RInetAddress>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->connect(::acdk::lang::dmi::castTo< RInetAddress>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramSocket_method_connect_INLRInetSocketAddress__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatagramSocket* This = dmi_cast<DatagramSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DatagramSocket::connect(::acdk::lang::dmi::castTo< RInetSocketAddress>(args[0], dc));
    else
        This->connect(::acdk::lang::dmi::castTo< RInetSocketAddress>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramSocket_method_disconnect__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatagramSocket* This = dmi_cast<DatagramSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DatagramSocket::disconnect();
    else
        This->disconnect();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramSocket_method_getBroadcast__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatagramSocket* This = dmi_cast<DatagramSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DatagramSocket::getBroadcast();
    else
      ret = This->getBroadcast();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramSocket_method_getInetAddress__LRInetAddress__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatagramSocket* This = dmi_cast<DatagramSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DatagramSocket::getInetAddress();
    else
        ret = (::acdk::lang::RObject)This->getInetAddress();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramSocket_method_getLocalAddress__LRInetAddress__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatagramSocket* This = dmi_cast<DatagramSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DatagramSocket::getLocalAddress();
    else
        ret = (::acdk::lang::RObject)This->getLocalAddress();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramSocket_method_getLocalPort__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatagramSocket* This = dmi_cast<DatagramSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DatagramSocket::getLocalPort();
    else
      ret = This->getLocalPort();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramSocket_method_getLocalSocketAddress__LRInetSocketAddress__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatagramSocket* This = dmi_cast<DatagramSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DatagramSocket::getLocalSocketAddress();
    else
        ret = (::acdk::lang::RObject)This->getLocalSocketAddress();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramSocket_method_getPort__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatagramSocket* This = dmi_cast<DatagramSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DatagramSocket::getPort();
    else
      ret = This->getPort();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramSocket_method_getReceiveBufferSize__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatagramSocket* This = dmi_cast<DatagramSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DatagramSocket::getReceiveBufferSize();
    else
      ret = This->getReceiveBufferSize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramSocket_method_getRemoteSocketAddress__LRInetSocketAddress__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatagramSocket* This = dmi_cast<DatagramSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DatagramSocket::getRemoteSocketAddress();
    else
        ret = (::acdk::lang::RObject)This->getRemoteSocketAddress();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramSocket_method_getReuseAddress__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatagramSocket* This = dmi_cast<DatagramSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DatagramSocket::getReuseAddress();
    else
      ret = This->getReuseAddress();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramSocket_method_getSendBufferSize__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatagramSocket* This = dmi_cast<DatagramSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DatagramSocket::getSendBufferSize();
    else
      ret = This->getSendBufferSize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramSocket_method_getSoTimeout__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatagramSocket* This = dmi_cast<DatagramSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DatagramSocket::getSoTimeout();
    else
      ret = This->getSoTimeout();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramSocket_method_getTrafficClass__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatagramSocket* This = dmi_cast<DatagramSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DatagramSocket::getTrafficClass();
    else
      ret = This->getTrafficClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramSocket_method_isBound__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatagramSocket* This = dmi_cast<DatagramSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DatagramSocket::isBound();
    else
      ret = This->isBound();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramSocket_method_isClosed__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatagramSocket* This = dmi_cast<DatagramSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DatagramSocket::isClosed();
    else
      ret = This->isClosed();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramSocket_method_isConnected__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatagramSocket* This = dmi_cast<DatagramSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DatagramSocket::isConnected();
    else
      ret = This->isConnected();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramSocket_method_receive_INLRDatagramPacket__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatagramSocket* This = dmi_cast<DatagramSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DatagramSocket::receive(::acdk::lang::dmi::castTo< RDatagramPacket>(args[0], dc));
    else
        This->receive(::acdk::lang::dmi::castTo< RDatagramPacket>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramSocket_method_send_INLRDatagramPacket__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatagramSocket* This = dmi_cast<DatagramSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DatagramSocket::send(::acdk::lang::dmi::castTo< RDatagramPacket>(args[0], dc));
    else
        This->send(::acdk::lang::dmi::castTo< RDatagramPacket>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramSocket_method_setBroadcast_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatagramSocket* This = dmi_cast<DatagramSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DatagramSocket::setBroadcast(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->setBroadcast(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramSocket_method_setReceiveBufferSize_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatagramSocket* This = dmi_cast<DatagramSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DatagramSocket::setReceiveBufferSize(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setReceiveBufferSize(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramSocket_method_setReuseAddress_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatagramSocket* This = dmi_cast<DatagramSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DatagramSocket::setReuseAddress(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->setReuseAddress(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramSocket_method_setSendBufferSize_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatagramSocket* This = dmi_cast<DatagramSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DatagramSocket::setSendBufferSize(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setSendBufferSize(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramSocket_method_setSoTimeout_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatagramSocket* This = dmi_cast<DatagramSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DatagramSocket::setSoTimeout(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setSoTimeout(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DatagramSocket_method_setTrafficClass_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DatagramSocket* This = dmi_cast<DatagramSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DatagramSocket::setTrafficClass(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setTrafficClass(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DatagramSocket_fields__connected_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DatagramSocket* This = dmi_cast<DatagramSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_connected, flags);
    else
      This->_connected = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DatagramSocket_fields__fd_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DatagramSocket* This = dmi_cast<DatagramSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_fd, flags);
    else
      This->_fd = ::acdk::lang::dmi::castTo< acdk::io::RFileDescriptor>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DatagramSocket_fields__localAddress_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DatagramSocket* This = dmi_cast<DatagramSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_localAddress, flags);
    else
      This->_localAddress = ::acdk::lang::dmi::castTo< RInetSocketAddress>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DatagramSocket_fields__remoteAddress_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DatagramSocket* This = dmi_cast<DatagramSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_remoteAddress, flags);
    else
      This->_remoteAddress = ::acdk::lang::dmi::castTo< RInetSocketAddress>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DatagramSocket_fields__socket_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DatagramSocket* This = dmi_cast<DatagramSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_socket, flags);
    else
      This->_socket = ::acdk::lang::dmi::castTo< RTCPSocket>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo DatagramSocket_fields__connected = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_connected", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  DatagramSocket_MetainfoWrapper::DatagramSocket_fields__connected_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DatagramSocket_fields__fd = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_fd", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RFileDescriptor::clazzInfo(),
  DatagramSocket_MetainfoWrapper::DatagramSocket_fields__fd_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DatagramSocket_fields__localAddress = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_localAddress", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetSocketAddress::clazzInfo(),
  DatagramSocket_MetainfoWrapper::DatagramSocket_fields__localAddress_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DatagramSocket_fields__remoteAddress = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_remoteAddress", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetSocketAddress::clazzInfo(),
  DatagramSocket_MetainfoWrapper::DatagramSocket_fields__remoteAddress_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DatagramSocket_fields__socket = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_socket", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTCPSocket::clazzInfo(),
  DatagramSocket_MetainfoWrapper::DatagramSocket_fields__socket_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _DatagramSocket_fields[] = 
{
  &DatagramSocket_fields__connected,
  &DatagramSocket_fields__fd,
  &DatagramSocket_fields__localAddress,
  &DatagramSocket_fields__remoteAddress,
  &DatagramSocket_fields__socket,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramSocket_methods_DatagramSocket__LRDatagramSocket__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramSocket_methods_DatagramSocket__LRDatagramSocket__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramSocket_method_DatagramSocket__LRDatagramSocket_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DatagramSocket", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DatagramSocket::clazzInfo(), // return type
  "_0_DatagramSocket", // alternative name of method
  -1, // altlabelHashCode
  DatagramSocket_methods_DatagramSocket__LRDatagramSocket__args, // the arguments
  0, //arguments count
  DatagramSocket_methods_DatagramSocket__LRDatagramSocket__exceptions, // the declared exceptions
  DatagramSocket_MetainfoWrapper::DatagramSocket_method_DatagramSocket__LRDatagramSocket__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramSocket_methods_DatagramSocket_I_LRDatagramSocket__arg_port = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "port", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramSocket_methods_DatagramSocket_I_LRDatagramSocket__args[] = 
{
  &DatagramSocket_methods_DatagramSocket_I_LRDatagramSocket__arg_port,
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramSocket_methods_DatagramSocket_I_LRDatagramSocket__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramSocket_method_DatagramSocket_I_LRDatagramSocket_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DatagramSocket", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DatagramSocket::clazzInfo(), // return type
  "_1_DatagramSocket", // alternative name of method
  -1, // altlabelHashCode
  DatagramSocket_methods_DatagramSocket_I_LRDatagramSocket__args, // the arguments
  0, //arguments count
  DatagramSocket_methods_DatagramSocket_I_LRDatagramSocket__exceptions, // the declared exceptions
  DatagramSocket_MetainfoWrapper::DatagramSocket_method_DatagramSocket_I_LRDatagramSocket__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramSocket_methods_DatagramSocket_IINLRInetAddress__LRDatagramSocket__arg_port = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "port", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramSocket_methods_DatagramSocket_IINLRInetAddress__LRDatagramSocket__arg_laddr = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "laddr", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetAddress::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramSocket_methods_DatagramSocket_IINLRInetAddress__LRDatagramSocket__args[] = 
{
  &DatagramSocket_methods_DatagramSocket_IINLRInetAddress__LRDatagramSocket__arg_port,
  &DatagramSocket_methods_DatagramSocket_IINLRInetAddress__LRDatagramSocket__arg_laddr,
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramSocket_methods_DatagramSocket_IINLRInetAddress__LRDatagramSocket__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramSocket_method_DatagramSocket_IINLRInetAddress__LRDatagramSocket_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DatagramSocket", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DatagramSocket::clazzInfo(), // return type
  "_2_DatagramSocket", // alternative name of method
  -1, // altlabelHashCode
  DatagramSocket_methods_DatagramSocket_IINLRInetAddress__LRDatagramSocket__args, // the arguments
  0, //arguments count
  DatagramSocket_methods_DatagramSocket_IINLRInetAddress__LRDatagramSocket__exceptions, // the declared exceptions
  DatagramSocket_MetainfoWrapper::DatagramSocket_method_DatagramSocket_IINLRInetAddress__LRDatagramSocket__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramSocket_methods_DatagramSocket_INLRInetSocketAddress__LRDatagramSocket__arg_bindaddr = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bindaddr", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetSocketAddress::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramSocket_methods_DatagramSocket_INLRInetSocketAddress__LRDatagramSocket__args[] = 
{
  &DatagramSocket_methods_DatagramSocket_INLRInetSocketAddress__LRDatagramSocket__arg_bindaddr,
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramSocket_methods_DatagramSocket_INLRInetSocketAddress__LRDatagramSocket__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramSocket_method_DatagramSocket_INLRInetSocketAddress__LRDatagramSocket_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DatagramSocket", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DatagramSocket::clazzInfo(), // return type
  "_3_DatagramSocket", // alternative name of method
  -1, // altlabelHashCode
  DatagramSocket_methods_DatagramSocket_INLRInetSocketAddress__LRDatagramSocket__args, // the arguments
  0, //arguments count
  DatagramSocket_methods_DatagramSocket_INLRInetSocketAddress__LRDatagramSocket__exceptions, // the declared exceptions
  DatagramSocket_MetainfoWrapper::DatagramSocket_method_DatagramSocket_INLRInetSocketAddress__LRDatagramSocket__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramSocket_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramSocket_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramSocket_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_w_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DatagramSocket_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DatagramSocket_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DatagramSocket_MetainfoWrapper::DatagramSocket_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramSocket_methods_bind_INLRInetSocketAddress__V_arg_addr = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "addr", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetSocketAddress::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramSocket_methods_bind_INLRInetSocketAddress__V_args[] = 
{
  &DatagramSocket_methods_bind_INLRInetSocketAddress__V_arg_addr,
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramSocket_methods_bind_INLRInetSocketAddress__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramSocket_method_bind_INLRInetSocketAddress__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "bind", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_bind", // alternative name of method
  -1, // altlabelHashCode
  DatagramSocket_methods_bind_INLRInetSocketAddress__V_args, // the arguments
  0, //arguments count
  DatagramSocket_methods_bind_INLRInetSocketAddress__V_exceptions, // the declared exceptions
  DatagramSocket_MetainfoWrapper::DatagramSocket_method_bind_INLRInetSocketAddress__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramSocket_methods_close__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramSocket_methods_close__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramSocket_method_close__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "close", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_close", // alternative name of method
  -1, // altlabelHashCode
  DatagramSocket_methods_close__V_args, // the arguments
  0, //arguments count
  DatagramSocket_methods_close__V_exceptions, // the declared exceptions
  DatagramSocket_MetainfoWrapper::DatagramSocket_method_close__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramSocket_methods_connect_INLRInetAddress_I_V_arg_address = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "address", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetAddress::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramSocket_methods_connect_INLRInetAddress_I_V_arg_port = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "port", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramSocket_methods_connect_INLRInetAddress_I_V_args[] = 
{
  &DatagramSocket_methods_connect_INLRInetAddress_I_V_arg_address,
  &DatagramSocket_methods_connect_INLRInetAddress_I_V_arg_port,
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramSocket_methods_connect_INLRInetAddress_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramSocket_method_connect_INLRInetAddress_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "connect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_connect", // alternative name of method
  -1, // altlabelHashCode
  DatagramSocket_methods_connect_INLRInetAddress_I_V_args, // the arguments
  0, //arguments count
  DatagramSocket_methods_connect_INLRInetAddress_I_V_exceptions, // the declared exceptions
  DatagramSocket_MetainfoWrapper::DatagramSocket_method_connect_INLRInetAddress_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramSocket_methods_connect_INLRInetSocketAddress__V_arg_addr = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "addr", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetSocketAddress::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramSocket_methods_connect_INLRInetSocketAddress__V_args[] = 
{
  &DatagramSocket_methods_connect_INLRInetSocketAddress__V_arg_addr,
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramSocket_methods_connect_INLRInetSocketAddress__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramSocket_method_connect_INLRInetSocketAddress__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "connect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_connect", // alternative name of method
  -1, // altlabelHashCode
  DatagramSocket_methods_connect_INLRInetSocketAddress__V_args, // the arguments
  0, //arguments count
  DatagramSocket_methods_connect_INLRInetSocketAddress__V_exceptions, // the declared exceptions
  DatagramSocket_MetainfoWrapper::DatagramSocket_method_connect_INLRInetSocketAddress__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramSocket_methods_disconnect__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramSocket_methods_disconnect__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramSocket_method_disconnect__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "disconnect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_disconnect", // alternative name of method
  -1, // altlabelHashCode
  DatagramSocket_methods_disconnect__V_args, // the arguments
  0, //arguments count
  DatagramSocket_methods_disconnect__V_exceptions, // the declared exceptions
  DatagramSocket_MetainfoWrapper::DatagramSocket_method_disconnect__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramSocket_methods_getBroadcast__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramSocket_methods_getBroadcast__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramSocket_method_getBroadcast__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBroadcast", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_9_getBroadcast", // alternative name of method
  -1, // altlabelHashCode
  DatagramSocket_methods_getBroadcast__Z_args, // the arguments
  0, //arguments count
  DatagramSocket_methods_getBroadcast__Z_exceptions, // the declared exceptions
  DatagramSocket_MetainfoWrapper::DatagramSocket_method_getBroadcast__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramSocket_methods_getInetAddress__LRInetAddress__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramSocket_methods_getInetAddress__LRInetAddress__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramSocket_method_getInetAddress__LRInetAddress_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInetAddress", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetAddress::clazzInfo(), // return type
  "_b_getInetAddress", // alternative name of method
  -1, // altlabelHashCode
  DatagramSocket_methods_getInetAddress__LRInetAddress__args, // the arguments
  0, //arguments count
  DatagramSocket_methods_getInetAddress__LRInetAddress__exceptions, // the declared exceptions
  DatagramSocket_MetainfoWrapper::DatagramSocket_method_getInetAddress__LRInetAddress__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramSocket_methods_getLocalAddress__LRInetAddress__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramSocket_methods_getLocalAddress__LRInetAddress__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramSocket_method_getLocalAddress__LRInetAddress_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLocalAddress", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetAddress::clazzInfo(), // return type
  "_c_getLocalAddress", // alternative name of method
  -1, // altlabelHashCode
  DatagramSocket_methods_getLocalAddress__LRInetAddress__args, // the arguments
  0, //arguments count
  DatagramSocket_methods_getLocalAddress__LRInetAddress__exceptions, // the declared exceptions
  DatagramSocket_MetainfoWrapper::DatagramSocket_method_getLocalAddress__LRInetAddress__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramSocket_methods_getLocalPort__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramSocket_methods_getLocalPort__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramSocket_method_getLocalPort__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLocalPort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_d_getLocalPort", // alternative name of method
  -1, // altlabelHashCode
  DatagramSocket_methods_getLocalPort__I_args, // the arguments
  0, //arguments count
  DatagramSocket_methods_getLocalPort__I_exceptions, // the declared exceptions
  DatagramSocket_MetainfoWrapper::DatagramSocket_method_getLocalPort__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramSocket_methods_getLocalSocketAddress__LRInetSocketAddress__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramSocket_methods_getLocalSocketAddress__LRInetSocketAddress__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramSocket_method_getLocalSocketAddress__LRInetSocketAddress_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLocalSocketAddress", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetSocketAddress::clazzInfo(), // return type
  "_e_getLocalSocketAddress", // alternative name of method
  -1, // altlabelHashCode
  DatagramSocket_methods_getLocalSocketAddress__LRInetSocketAddress__args, // the arguments
  0, //arguments count
  DatagramSocket_methods_getLocalSocketAddress__LRInetSocketAddress__exceptions, // the declared exceptions
  DatagramSocket_MetainfoWrapper::DatagramSocket_method_getLocalSocketAddress__LRInetSocketAddress__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramSocket_methods_getPort__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramSocket_methods_getPort__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramSocket_method_getPort__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_f_getPort", // alternative name of method
  -1, // altlabelHashCode
  DatagramSocket_methods_getPort__I_args, // the arguments
  0, //arguments count
  DatagramSocket_methods_getPort__I_exceptions, // the declared exceptions
  DatagramSocket_MetainfoWrapper::DatagramSocket_method_getPort__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramSocket_methods_getReceiveBufferSize__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramSocket_methods_getReceiveBufferSize__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramSocket_method_getReceiveBufferSize__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getReceiveBufferSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_g_getReceiveBufferSize", // alternative name of method
  -1, // altlabelHashCode
  DatagramSocket_methods_getReceiveBufferSize__I_args, // the arguments
  0, //arguments count
  DatagramSocket_methods_getReceiveBufferSize__I_exceptions, // the declared exceptions
  DatagramSocket_MetainfoWrapper::DatagramSocket_method_getReceiveBufferSize__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramSocket_methods_getRemoteSocketAddress__LRInetSocketAddress__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramSocket_methods_getRemoteSocketAddress__LRInetSocketAddress__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramSocket_method_getRemoteSocketAddress__LRInetSocketAddress_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRemoteSocketAddress", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetSocketAddress::clazzInfo(), // return type
  "_h_getRemoteSocketAddress", // alternative name of method
  -1, // altlabelHashCode
  DatagramSocket_methods_getRemoteSocketAddress__LRInetSocketAddress__args, // the arguments
  0, //arguments count
  DatagramSocket_methods_getRemoteSocketAddress__LRInetSocketAddress__exceptions, // the declared exceptions
  DatagramSocket_MetainfoWrapper::DatagramSocket_method_getRemoteSocketAddress__LRInetSocketAddress__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramSocket_methods_getReuseAddress__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramSocket_methods_getReuseAddress__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramSocket_method_getReuseAddress__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getReuseAddress", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_i_getReuseAddress", // alternative name of method
  -1, // altlabelHashCode
  DatagramSocket_methods_getReuseAddress__Z_args, // the arguments
  0, //arguments count
  DatagramSocket_methods_getReuseAddress__Z_exceptions, // the declared exceptions
  DatagramSocket_MetainfoWrapper::DatagramSocket_method_getReuseAddress__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramSocket_methods_getSendBufferSize__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramSocket_methods_getSendBufferSize__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramSocket_method_getSendBufferSize__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSendBufferSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_k_getSendBufferSize", // alternative name of method
  -1, // altlabelHashCode
  DatagramSocket_methods_getSendBufferSize__I_args, // the arguments
  0, //arguments count
  DatagramSocket_methods_getSendBufferSize__I_exceptions, // the declared exceptions
  DatagramSocket_MetainfoWrapper::DatagramSocket_method_getSendBufferSize__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramSocket_methods_getSoTimeout__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramSocket_methods_getSoTimeout__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramSocket_method_getSoTimeout__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSoTimeout", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_n_getSoTimeout", // alternative name of method
  -1, // altlabelHashCode
  DatagramSocket_methods_getSoTimeout__I_args, // the arguments
  0, //arguments count
  DatagramSocket_methods_getSoTimeout__I_exceptions, // the declared exceptions
  DatagramSocket_MetainfoWrapper::DatagramSocket_method_getSoTimeout__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramSocket_methods_getTrafficClass__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramSocket_methods_getTrafficClass__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramSocket_method_getTrafficClass__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTrafficClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_p_getTrafficClass", // alternative name of method
  -1, // altlabelHashCode
  DatagramSocket_methods_getTrafficClass__I_args, // the arguments
  0, //arguments count
  DatagramSocket_methods_getTrafficClass__I_exceptions, // the declared exceptions
  DatagramSocket_MetainfoWrapper::DatagramSocket_method_getTrafficClass__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramSocket_methods_isBound__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramSocket_methods_isBound__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramSocket_method_isBound__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isBound", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_r_isBound", // alternative name of method
  -1, // altlabelHashCode
  DatagramSocket_methods_isBound__Z_args, // the arguments
  0, //arguments count
  DatagramSocket_methods_isBound__Z_exceptions, // the declared exceptions
  DatagramSocket_MetainfoWrapper::DatagramSocket_method_isBound__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramSocket_methods_isClosed__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramSocket_methods_isClosed__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramSocket_method_isClosed__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isClosed", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_s_isClosed", // alternative name of method
  -1, // altlabelHashCode
  DatagramSocket_methods_isClosed__Z_args, // the arguments
  0, //arguments count
  DatagramSocket_methods_isClosed__Z_exceptions, // the declared exceptions
  DatagramSocket_MetainfoWrapper::DatagramSocket_method_isClosed__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramSocket_methods_isConnected__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramSocket_methods_isConnected__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramSocket_method_isConnected__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isConnected", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_t_isConnected", // alternative name of method
  -1, // altlabelHashCode
  DatagramSocket_methods_isConnected__Z_args, // the arguments
  0, //arguments count
  DatagramSocket_methods_isConnected__Z_exceptions, // the declared exceptions
  DatagramSocket_MetainfoWrapper::DatagramSocket_method_isConnected__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramSocket_methods_receive_INLRDatagramPacket__V_arg_p = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "p", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDatagramPacket::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramSocket_methods_receive_INLRDatagramPacket__V_args[] = 
{
  &DatagramSocket_methods_receive_INLRDatagramPacket__V_arg_p,
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramSocket_methods_receive_INLRDatagramPacket__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramSocket_method_receive_INLRDatagramPacket__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "receive", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_u_receive", // alternative name of method
  -1, // altlabelHashCode
  DatagramSocket_methods_receive_INLRDatagramPacket__V_args, // the arguments
  0, //arguments count
  DatagramSocket_methods_receive_INLRDatagramPacket__V_exceptions, // the declared exceptions
  DatagramSocket_MetainfoWrapper::DatagramSocket_method_receive_INLRDatagramPacket__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramSocket_methods_send_INLRDatagramPacket__V_arg_p = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "p", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDatagramPacket::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramSocket_methods_send_INLRDatagramPacket__V_args[] = 
{
  &DatagramSocket_methods_send_INLRDatagramPacket__V_arg_p,
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramSocket_methods_send_INLRDatagramPacket__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramSocket_method_send_INLRDatagramPacket__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "send", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_v_send", // alternative name of method
  -1, // altlabelHashCode
  DatagramSocket_methods_send_INLRDatagramPacket__V_args, // the arguments
  0, //arguments count
  DatagramSocket_methods_send_INLRDatagramPacket__V_exceptions, // the declared exceptions
  DatagramSocket_MetainfoWrapper::DatagramSocket_method_send_INLRDatagramPacket__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramSocket_methods_setBroadcast_Z_V_arg_on = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "on", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramSocket_methods_setBroadcast_Z_V_args[] = 
{
  &DatagramSocket_methods_setBroadcast_Z_V_arg_on,
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramSocket_methods_setBroadcast_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramSocket_method_setBroadcast_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setBroadcast", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_setBroadcast", // alternative name of method
  -1, // altlabelHashCode
  DatagramSocket_methods_setBroadcast_Z_V_args, // the arguments
  0, //arguments count
  DatagramSocket_methods_setBroadcast_Z_V_exceptions, // the declared exceptions
  DatagramSocket_MetainfoWrapper::DatagramSocket_method_setBroadcast_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramSocket_methods_setReceiveBufferSize_I_V_arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramSocket_methods_setReceiveBufferSize_I_V_args[] = 
{
  &DatagramSocket_methods_setReceiveBufferSize_I_V_arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramSocket_methods_setReceiveBufferSize_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramSocket_method_setReceiveBufferSize_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setReceiveBufferSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_m_setReceiveBufferSize", // alternative name of method
  -1, // altlabelHashCode
  DatagramSocket_methods_setReceiveBufferSize_I_V_args, // the arguments
  0, //arguments count
  DatagramSocket_methods_setReceiveBufferSize_I_V_exceptions, // the declared exceptions
  DatagramSocket_MetainfoWrapper::DatagramSocket_method_setReceiveBufferSize_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramSocket_methods_setReuseAddress_Z_V_arg_on = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "on", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramSocket_methods_setReuseAddress_Z_V_args[] = 
{
  &DatagramSocket_methods_setReuseAddress_Z_V_arg_on,
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramSocket_methods_setReuseAddress_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramSocket_method_setReuseAddress_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setReuseAddress", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_j_setReuseAddress", // alternative name of method
  -1, // altlabelHashCode
  DatagramSocket_methods_setReuseAddress_Z_V_args, // the arguments
  0, //arguments count
  DatagramSocket_methods_setReuseAddress_Z_V_exceptions, // the declared exceptions
  DatagramSocket_MetainfoWrapper::DatagramSocket_method_setReuseAddress_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramSocket_methods_setSendBufferSize_I_V_arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramSocket_methods_setSendBufferSize_I_V_args[] = 
{
  &DatagramSocket_methods_setSendBufferSize_I_V_arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramSocket_methods_setSendBufferSize_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramSocket_method_setSendBufferSize_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSendBufferSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_l_setSendBufferSize", // alternative name of method
  -1, // altlabelHashCode
  DatagramSocket_methods_setSendBufferSize_I_V_args, // the arguments
  0, //arguments count
  DatagramSocket_methods_setSendBufferSize_I_V_exceptions, // the declared exceptions
  DatagramSocket_MetainfoWrapper::DatagramSocket_method_setSendBufferSize_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramSocket_methods_setSoTimeout_I_V_arg_timeout = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "timeout", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramSocket_methods_setSoTimeout_I_V_args[] = 
{
  &DatagramSocket_methods_setSoTimeout_I_V_arg_timeout,
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramSocket_methods_setSoTimeout_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramSocket_method_setSoTimeout_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSoTimeout", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_o_setSoTimeout", // alternative name of method
  -1, // altlabelHashCode
  DatagramSocket_methods_setSoTimeout_I_V_args, // the arguments
  0, //arguments count
  DatagramSocket_methods_setSoTimeout_I_V_exceptions, // the declared exceptions
  DatagramSocket_MetainfoWrapper::DatagramSocket_method_setSoTimeout_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DatagramSocket_methods_setTrafficClass_I_V_arg_tc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "tc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DatagramSocket_methods_setTrafficClass_I_V_args[] = 
{
  &DatagramSocket_methods_setTrafficClass_I_V_arg_tc,
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramSocket_methods_setTrafficClass_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DatagramSocket_method_setTrafficClass_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTrafficClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_q_setTrafficClass", // alternative name of method
  -1, // altlabelHashCode
  DatagramSocket_methods_setTrafficClass_I_V_args, // the arguments
  0, //arguments count
  DatagramSocket_methods_setTrafficClass_I_V_exceptions, // the declared exceptions
  DatagramSocket_MetainfoWrapper::DatagramSocket_method_setTrafficClass_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DatagramSocket_methods[] = 
{
  &DatagramSocket_method_DatagramSocket__LRDatagramSocket_,
  &DatagramSocket_method_DatagramSocket_I_LRDatagramSocket_,
  &DatagramSocket_method_DatagramSocket_IINLRInetAddress__LRDatagramSocket_,
  &DatagramSocket_method_DatagramSocket_INLRInetSocketAddress__LRDatagramSocket_,
  &DatagramSocket_method_GetClass__L_acdk_lang_RClass_,
  &DatagramSocket_method_bind_INLRInetSocketAddress__V,
  &DatagramSocket_method_close__V,
  &DatagramSocket_method_connect_INLRInetAddress_I_V,
  &DatagramSocket_method_connect_INLRInetSocketAddress__V,
  &DatagramSocket_method_disconnect__V,
  &DatagramSocket_method_getBroadcast__Z,
  &DatagramSocket_method_getInetAddress__LRInetAddress_,
  &DatagramSocket_method_getLocalAddress__LRInetAddress_,
  &DatagramSocket_method_getLocalPort__I,
  &DatagramSocket_method_getLocalSocketAddress__LRInetSocketAddress_,
  &DatagramSocket_method_getPort__I,
  &DatagramSocket_method_getReceiveBufferSize__I,
  &DatagramSocket_method_getRemoteSocketAddress__LRInetSocketAddress_,
  &DatagramSocket_method_getReuseAddress__Z,
  &DatagramSocket_method_getSendBufferSize__I,
  &DatagramSocket_method_getSoTimeout__I,
  &DatagramSocket_method_getTrafficClass__I,
  &DatagramSocket_method_isBound__Z,
  &DatagramSocket_method_isClosed__Z,
  &DatagramSocket_method_isConnected__Z,
  &DatagramSocket_method_receive_INLRDatagramPacket__V,
  &DatagramSocket_method_send_INLRDatagramPacket__V,
  &DatagramSocket_method_setBroadcast_Z_V,
  &DatagramSocket_method_setReceiveBufferSize_I_V,
  &DatagramSocket_method_setReuseAddress_Z_V,
  &DatagramSocket_method_setSendBufferSize_I_V,
  &DatagramSocket_method_setSoTimeout_I_V,
  &DatagramSocket_method_setTrafficClass_I_V,
  0
};


struct DatagramSocket_MetaInfoInitializer
{  DatagramSocket_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DatagramSocket::clazzInfo();
    ci->fields =  _DatagramSocket_fields;
    ci->methods =  _DatagramSocket_methods;
    ci->_scopeParent = acdk_net_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DatagramSocket_MetaInfoInitializer DatagramSocket_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 


//static
::acdk::lang::RObject
FileNameMap_create_array(int length)
{
  return new ObjectArrayImpl<RFileNameMap>(length);
}

//static
::acdk::lang::RObject
FileNameMap_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class FileNameMap_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileNameMap_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)FileNameMap::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileNameMap_method_getContentTypeFor_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileNameMap* This = dmi_cast<FileNameMap>(This_);
    ret = (::acdk::lang::RObject)This->getContentTypeFor(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _FileNameMap_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileNameMap_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileNameMap_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileNameMap_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  FileNameMap_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  FileNameMap_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  FileNameMap_MetainfoWrapper::FileNameMap_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileNameMap_methods_getContentTypeFor_INLRString__LRString__arg_filename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "filename", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileNameMap_methods_getContentTypeFor_INLRString__LRString__args[] = 
{
  &FileNameMap_methods_getContentTypeFor_INLRString__LRString__arg_filename,
  0
};

::acdk::lang::dmi::ClazzInfo* FileNameMap_methods_getContentTypeFor_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileNameMap_method_getContentTypeFor_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getContentTypeFor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_0_getContentTypeFor", // alternative name of method
  -1, // altlabelHashCode
  FileNameMap_methods_getContentTypeFor_INLRString__LRString__args, // the arguments
  0, //arguments count
  FileNameMap_methods_getContentTypeFor_INLRString__LRString__exceptions, // the declared exceptions
  FileNameMap_MetainfoWrapper::FileNameMap_method_getContentTypeFor_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _FileNameMap_methods[] = 
{
  &FileNameMap_method_GetClass__L_acdk_lang_RClass_,
  &FileNameMap_method_getContentTypeFor_INLRString__LRString_,
  0
};


struct FileNameMap_MetaInfoInitializer
{  FileNameMap_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = FileNameMap::clazzInfo();
    ci->fields =  _FileNameMap_fields;
    ci->methods =  _FileNameMap_methods;
    ci->_scopeParent = acdk_net_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
FileNameMap_MetaInfoInitializer FileNameMap_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 


//static
::acdk::lang::RObject
FileURLConnection_create_array(int length)
{
  return new ObjectArrayImpl<RFileURLConnection>(length);
}

//static
::acdk::lang::RObject
FileURLConnection_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class FileURLConnection_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileURLConnection_method_FileURLConnection_INLRURL__LRFileURLConnection__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileURLConnection(::acdk::lang::dmi::castTo< RURL>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileURLConnection_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)FileURLConnection::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileURLConnection_method_connect__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileURLConnection* This = dmi_cast<FileURLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FileURLConnection::connect();
    else
        This->connect();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileURLConnection_method_getContentLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileURLConnection* This = dmi_cast<FileURLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FileURLConnection::getContentLength();
    else
      ret = This->getContentLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileURLConnection_method_getInputStream__LRReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileURLConnection* This = dmi_cast<FileURLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->FileURLConnection::getInputStream();
    else
        ret = (::acdk::lang::RObject)This->getInputStream();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileURLConnection_method_getOutputStream__LRWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileURLConnection* This = dmi_cast<FileURLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->FileURLConnection::getOutputStream();
    else
        ret = (::acdk::lang::RObject)This->getOutputStream();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FileURLConnection_fields_file_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    FileURLConnection* This = dmi_cast<FileURLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->file, flags);
    else
      This->file = ::acdk::lang::dmi::castTo< ::acdk::io::RFile>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo FileURLConnection_fields_file = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "file", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::RFile::clazzInfo(),
  FileURLConnection_MetainfoWrapper::FileURLConnection_fields_file_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _FileURLConnection_fields[] = 
{
  &FileURLConnection_fields_file,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo FileURLConnection_methods_FileURLConnection_INLRURL__LRFileURLConnection__arg_url = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "url", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RURL::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileURLConnection_methods_FileURLConnection_INLRURL__LRFileURLConnection__args[] = 
{
  &FileURLConnection_methods_FileURLConnection_INLRURL__LRFileURLConnection__arg_url,
  0
};

::acdk::lang::dmi::ClazzInfo* FileURLConnection_methods_FileURLConnection_INLRURL__LRFileURLConnection__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileURLConnection_method_FileURLConnection_INLRURL__LRFileURLConnection_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "FileURLConnection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileURLConnection::clazzInfo(), // return type
  "_0_FileURLConnection", // alternative name of method
  -1, // altlabelHashCode
  FileURLConnection_methods_FileURLConnection_INLRURL__LRFileURLConnection__args, // the arguments
  0, //arguments count
  FileURLConnection_methods_FileURLConnection_INLRURL__LRFileURLConnection__exceptions, // the declared exceptions
  FileURLConnection_MetainfoWrapper::FileURLConnection_method_FileURLConnection_INLRURL__LRFileURLConnection__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileURLConnection_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileURLConnection_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileURLConnection_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  FileURLConnection_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  FileURLConnection_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  FileURLConnection_MetainfoWrapper::FileURLConnection_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileURLConnection_methods_connect__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileURLConnection_methods_connect__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileURLConnection_method_connect__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "connect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_connect", // alternative name of method
  -1, // altlabelHashCode
  FileURLConnection_methods_connect__V_args, // the arguments
  0, //arguments count
  FileURLConnection_methods_connect__V_exceptions, // the declared exceptions
  FileURLConnection_MetainfoWrapper::FileURLConnection_method_connect__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileURLConnection_methods_getContentLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileURLConnection_methods_getContentLength__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileURLConnection_method_getContentLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getContentLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2_getContentLength", // alternative name of method
  -1, // altlabelHashCode
  FileURLConnection_methods_getContentLength__I_args, // the arguments
  0, //arguments count
  FileURLConnection_methods_getContentLength__I_exceptions, // the declared exceptions
  FileURLConnection_MetainfoWrapper::FileURLConnection_method_getContentLength__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileURLConnection_methods_getInputStream__LRReader__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileURLConnection_methods_getInputStream__LRReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileURLConnection_method_getInputStream__LRReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInputStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReader::clazzInfo(), // return type
  "_3_getInputStream", // alternative name of method
  -1, // altlabelHashCode
  FileURLConnection_methods_getInputStream__LRReader__args, // the arguments
  0, //arguments count
  FileURLConnection_methods_getInputStream__LRReader__exceptions, // the declared exceptions
  FileURLConnection_MetainfoWrapper::FileURLConnection_method_getInputStream__LRReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileURLConnection_methods_getOutputStream__LRWriter__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileURLConnection_methods_getOutputStream__LRWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileURLConnection_method_getOutputStream__LRWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getOutputStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriter::clazzInfo(), // return type
  "_4_getOutputStream", // alternative name of method
  -1, // altlabelHashCode
  FileURLConnection_methods_getOutputStream__LRWriter__args, // the arguments
  0, //arguments count
  FileURLConnection_methods_getOutputStream__LRWriter__exceptions, // the declared exceptions
  FileURLConnection_MetainfoWrapper::FileURLConnection_method_getOutputStream__LRWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _FileURLConnection_methods[] = 
{
  &FileURLConnection_method_FileURLConnection_INLRURL__LRFileURLConnection_,
  &FileURLConnection_method_GetClass__L_acdk_lang_RClass_,
  &FileURLConnection_method_connect__V,
  &FileURLConnection_method_getContentLength__I,
  &FileURLConnection_method_getInputStream__LRReader_,
  &FileURLConnection_method_getOutputStream__LRWriter_,
  0
};


struct FileURLConnection_MetaInfoInitializer
{  FileURLConnection_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = FileURLConnection::clazzInfo();
    ci->fields =  _FileURLConnection_fields;
    ci->methods =  _FileURLConnection_methods;
    ci->_scopeParent = acdk_net_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
FileURLConnection_MetaInfoInitializer FileURLConnection_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
HeaderFieldHelper_create_array(int length)
{
  return new ObjectArrayImpl<RHeaderFieldHelper>(length);
}

//static
::acdk::lang::RObject
HeaderFieldHelper_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class HeaderFieldHelper_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HeaderFieldHelper_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)HeaderFieldHelper::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HeaderFieldHelper_method_HeaderFieldHelper_I_LRHeaderFieldHelper__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new HeaderFieldHelper(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HeaderFieldHelper_method_HeaderFieldHelper__LRHeaderFieldHelper__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new HeaderFieldHelper();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HeaderFieldHelper_method_addHeaderField_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HeaderFieldHelper* This = dmi_cast<HeaderFieldHelper>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->HeaderFieldHelper::addHeaderField(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    else
        This->addHeaderField(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HeaderFieldHelper_method_getHeaderFieldKeyByIndex_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HeaderFieldHelper* This = dmi_cast<HeaderFieldHelper>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->HeaderFieldHelper::getHeaderFieldKeyByIndex(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getHeaderFieldKeyByIndex(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HeaderFieldHelper_method_getHeaderFieldValueByIndex_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HeaderFieldHelper* This = dmi_cast<HeaderFieldHelper>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->HeaderFieldHelper::getHeaderFieldValueByIndex(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getHeaderFieldValueByIndex(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HeaderFieldHelper_method_getNumberOfEntries__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HeaderFieldHelper* This = dmi_cast<HeaderFieldHelper>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->HeaderFieldHelper::getNumberOfEntries();
    else
      ret = This->getNumberOfEntries();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  HeaderFieldHelper_fields__headerFieldKeys_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    HeaderFieldHelper* This = dmi_cast<HeaderFieldHelper>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_headerFieldKeys, flags);
    else
      This->_headerFieldKeys = ::acdk::lang::dmi::castTo< RArrayList>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  HeaderFieldHelper_fields__headerFieldValues_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    HeaderFieldHelper* This = dmi_cast<HeaderFieldHelper>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_headerFieldValues, flags);
    else
      This->_headerFieldValues = ::acdk::lang::dmi::castTo< RArrayList>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo HeaderFieldHelper_fields__headerFieldKeys = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_headerFieldKeys", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RArrayList::clazzInfo(),
  HeaderFieldHelper_MetainfoWrapper::HeaderFieldHelper_fields__headerFieldKeys_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo HeaderFieldHelper_fields__headerFieldValues = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_headerFieldValues", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RArrayList::clazzInfo(),
  HeaderFieldHelper_MetainfoWrapper::HeaderFieldHelper_fields__headerFieldValues_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _HeaderFieldHelper_fields[] = 
{
  &HeaderFieldHelper_fields__headerFieldKeys,
  &HeaderFieldHelper_fields__headerFieldValues,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* HeaderFieldHelper_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HeaderFieldHelper_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HeaderFieldHelper_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  HeaderFieldHelper_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  HeaderFieldHelper_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  HeaderFieldHelper_MetainfoWrapper::HeaderFieldHelper_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HeaderFieldHelper_methods_HeaderFieldHelper_I_LRHeaderFieldHelper__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HeaderFieldHelper_methods_HeaderFieldHelper_I_LRHeaderFieldHelper__args[] = 
{
  &HeaderFieldHelper_methods_HeaderFieldHelper_I_LRHeaderFieldHelper__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* HeaderFieldHelper_methods_HeaderFieldHelper_I_LRHeaderFieldHelper__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HeaderFieldHelper_method_HeaderFieldHelper_I_LRHeaderFieldHelper_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "HeaderFieldHelper", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  HeaderFieldHelper::clazzInfo(), // return type
  "_0_HeaderFieldHelper", // alternative name of method
  -1, // altlabelHashCode
  HeaderFieldHelper_methods_HeaderFieldHelper_I_LRHeaderFieldHelper__args, // the arguments
  0, //arguments count
  HeaderFieldHelper_methods_HeaderFieldHelper_I_LRHeaderFieldHelper__exceptions, // the declared exceptions
  HeaderFieldHelper_MetainfoWrapper::HeaderFieldHelper_method_HeaderFieldHelper_I_LRHeaderFieldHelper__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* HeaderFieldHelper_methods_HeaderFieldHelper__LRHeaderFieldHelper__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HeaderFieldHelper_methods_HeaderFieldHelper__LRHeaderFieldHelper__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HeaderFieldHelper_method_HeaderFieldHelper__LRHeaderFieldHelper_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "HeaderFieldHelper", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  HeaderFieldHelper::clazzInfo(), // return type
  "_1_HeaderFieldHelper", // alternative name of method
  -1, // altlabelHashCode
  HeaderFieldHelper_methods_HeaderFieldHelper__LRHeaderFieldHelper__args, // the arguments
  0, //arguments count
  HeaderFieldHelper_methods_HeaderFieldHelper__LRHeaderFieldHelper__exceptions, // the declared exceptions
  HeaderFieldHelper_MetainfoWrapper::HeaderFieldHelper_method_HeaderFieldHelper__LRHeaderFieldHelper__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HeaderFieldHelper_methods_addHeaderField_INLRString_INLRString__V_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo HeaderFieldHelper_methods_addHeaderField_INLRString_INLRString__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HeaderFieldHelper_methods_addHeaderField_INLRString_INLRString__V_args[] = 
{
  &HeaderFieldHelper_methods_addHeaderField_INLRString_INLRString__V_arg_key,
  &HeaderFieldHelper_methods_addHeaderField_INLRString_INLRString__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* HeaderFieldHelper_methods_addHeaderField_INLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HeaderFieldHelper_method_addHeaderField_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addHeaderField", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_addHeaderField", // alternative name of method
  -1, // altlabelHashCode
  HeaderFieldHelper_methods_addHeaderField_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  HeaderFieldHelper_methods_addHeaderField_INLRString_INLRString__V_exceptions, // the declared exceptions
  HeaderFieldHelper_MetainfoWrapper::HeaderFieldHelper_method_addHeaderField_INLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HeaderFieldHelper_methods_getHeaderFieldKeyByIndex_I_LRString__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HeaderFieldHelper_methods_getHeaderFieldKeyByIndex_I_LRString__args[] = 
{
  &HeaderFieldHelper_methods_getHeaderFieldKeyByIndex_I_LRString__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* HeaderFieldHelper_methods_getHeaderFieldKeyByIndex_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HeaderFieldHelper_method_getHeaderFieldKeyByIndex_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getHeaderFieldKeyByIndex", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_getHeaderFieldKeyByIndex", // alternative name of method
  -1, // altlabelHashCode
  HeaderFieldHelper_methods_getHeaderFieldKeyByIndex_I_LRString__args, // the arguments
  0, //arguments count
  HeaderFieldHelper_methods_getHeaderFieldKeyByIndex_I_LRString__exceptions, // the declared exceptions
  HeaderFieldHelper_MetainfoWrapper::HeaderFieldHelper_method_getHeaderFieldKeyByIndex_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HeaderFieldHelper_methods_getHeaderFieldValueByIndex_I_LRString__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HeaderFieldHelper_methods_getHeaderFieldValueByIndex_I_LRString__args[] = 
{
  &HeaderFieldHelper_methods_getHeaderFieldValueByIndex_I_LRString__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* HeaderFieldHelper_methods_getHeaderFieldValueByIndex_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HeaderFieldHelper_method_getHeaderFieldValueByIndex_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getHeaderFieldValueByIndex", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_4_getHeaderFieldValueByIndex", // alternative name of method
  -1, // altlabelHashCode
  HeaderFieldHelper_methods_getHeaderFieldValueByIndex_I_LRString__args, // the arguments
  0, //arguments count
  HeaderFieldHelper_methods_getHeaderFieldValueByIndex_I_LRString__exceptions, // the declared exceptions
  HeaderFieldHelper_MetainfoWrapper::HeaderFieldHelper_method_getHeaderFieldValueByIndex_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* HeaderFieldHelper_methods_getNumberOfEntries__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HeaderFieldHelper_methods_getNumberOfEntries__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HeaderFieldHelper_method_getNumberOfEntries__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNumberOfEntries", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_getNumberOfEntries", // alternative name of method
  -1, // altlabelHashCode
  HeaderFieldHelper_methods_getNumberOfEntries__I_args, // the arguments
  0, //arguments count
  HeaderFieldHelper_methods_getNumberOfEntries__I_exceptions, // the declared exceptions
  HeaderFieldHelper_MetainfoWrapper::HeaderFieldHelper_method_getNumberOfEntries__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _HeaderFieldHelper_methods[] = 
{
  &HeaderFieldHelper_method_GetClass__L_acdk_lang_RClass_,
  &HeaderFieldHelper_method_HeaderFieldHelper_I_LRHeaderFieldHelper_,
  &HeaderFieldHelper_method_HeaderFieldHelper__LRHeaderFieldHelper_,
  &HeaderFieldHelper_method_addHeaderField_INLRString_INLRString__V,
  &HeaderFieldHelper_method_getHeaderFieldKeyByIndex_I_LRString_,
  &HeaderFieldHelper_method_getHeaderFieldValueByIndex_I_LRString_,
  &HeaderFieldHelper_method_getNumberOfEntries__I,
  0
};


struct HeaderFieldHelper_MetaInfoInitializer
{  HeaderFieldHelper_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = HeaderFieldHelper::clazzInfo();
    ci->fields =  _HeaderFieldHelper_fields;
    ci->methods =  _HeaderFieldHelper_methods;
    ci->_scopeParent = acdk_net_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
HeaderFieldHelper_MetaInfoInitializer HeaderFieldHelper_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 


//static
::acdk::lang::RObject
HttpURLConnection_create_array(int length)
{
  return new ObjectArrayImpl<RHttpURLConnection>(length);
}

//static
::acdk::lang::RObject
HttpURLConnection_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class HttpURLConnection_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HttpURLConnection_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)HttpURLConnection::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HttpURLConnection_method_createSocket_INLRString_I_LRSocket__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HttpURLConnection* This = dmi_cast<HttpURLConnection>(This_);
    ret = (::acdk::lang::RObject)This->createSocket(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HttpURLConnection_method_disconnect__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HttpURLConnection* This = dmi_cast<HttpURLConnection>(This_);
    This->disconnect();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HttpURLConnection_method_getErrorStream__LRReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HttpURLConnection* This = dmi_cast<HttpURLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->HttpURLConnection::getErrorStream();
    else
        ret = (::acdk::lang::RObject)This->getErrorStream();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HttpURLConnection_method_getFollowRedirects__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = HttpURLConnection::getFollowRedirects();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HttpURLConnection_method_getRequestMethod__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HttpURLConnection* This = dmi_cast<HttpURLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->HttpURLConnection::getRequestMethod();
    else
        ret = (::acdk::lang::RObject)This->getRequestMethod();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HttpURLConnection_method_getResponseCode__LHttpResponceCode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HttpURLConnection* This = dmi_cast<HttpURLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = (HttpResponceCode)This->HttpURLConnection::getResponseCode();
    else
      ret = (HttpResponceCode)This->getResponseCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HttpURLConnection_method_getResponseMessage__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HttpURLConnection* This = dmi_cast<HttpURLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->HttpURLConnection::getResponseMessage();
    else
        ret = (::acdk::lang::RObject)This->getResponseMessage();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HttpURLConnection_method_getStandardPort__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HttpURLConnection* This = dmi_cast<HttpURLConnection>(This_);
  ret = This->getStandardPort();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HttpURLConnection_method_setFollowRedirects_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HttpURLConnection::setFollowRedirects(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HttpURLConnection_method_setRequestMethod_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HttpURLConnection* This = dmi_cast<HttpURLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->HttpURLConnection::setRequestMethod(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->setRequestMethod(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HttpURLConnection_method_usingProxy__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HttpURLConnection* This = dmi_cast<HttpURLConnection>(This_);
  ret = This->usingProxy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  HttpURLConnection_fields__follow_redirects_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(HttpURLConnection::_follow_redirects, flags);
    else
      HttpURLConnection::_follow_redirects = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  HttpURLConnection_fields_method_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    HttpURLConnection* This = dmi_cast<HttpURLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->method, flags);
    else
      This->method = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  HttpURLConnection_fields_responseCode_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    HttpURLConnection* This = dmi_cast<HttpURLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->responseCode), flags);
    else
      This->responseCode = (HttpResponceCode)::acdk::lang::dmi::castTo<int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  HttpURLConnection_fields_responseMessage_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    HttpURLConnection* This = dmi_cast<HttpURLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->responseMessage, flags);
    else
      This->responseMessage = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo HttpURLConnection_fields__follow_redirects = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_follow_redirects", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  HttpURLConnection_MetainfoWrapper::HttpURLConnection_fields__follow_redirects_accessor, // read/write access to this fields
  (void*)&HttpURLConnection::_follow_redirects // address of field
};

::acdk::lang::dmi::ClazzFieldInfo HttpURLConnection_fields_method = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "method", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  HttpURLConnection_MetainfoWrapper::HttpURLConnection_fields_method_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo HttpURLConnection_fields_responseCode = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "responseCode", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  HttpURLConnection_MetainfoWrapper::HttpURLConnection_fields_responseCode_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo HttpURLConnection_fields_responseMessage = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "responseMessage", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  HttpURLConnection_MetainfoWrapper::HttpURLConnection_fields_responseMessage_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _HttpURLConnection_fields[] = 
{
  &HttpURLConnection_fields__follow_redirects,
  &HttpURLConnection_fields_method,
  &HttpURLConnection_fields_responseCode,
  &HttpURLConnection_fields_responseMessage,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* HttpURLConnection_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HttpURLConnection_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HttpURLConnection_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_c_GetClass", // alternative name of method
  -1, // altlabelHashCode
  HttpURLConnection_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  HttpURLConnection_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  HttpURLConnection_MetainfoWrapper::HttpURLConnection_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HttpURLConnection_methods_HttpURLConnection_INLRURL__LRHttpURLConnection__arg_url = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "url", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RURL::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HttpURLConnection_methods_HttpURLConnection_INLRURL__LRHttpURLConnection__args[] = 
{
  &HttpURLConnection_methods_HttpURLConnection_INLRURL__LRHttpURLConnection__arg_url,
  0
};

::acdk::lang::dmi::ClazzInfo* HttpURLConnection_methods_HttpURLConnection_INLRURL__LRHttpURLConnection__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HttpURLConnection_method_HttpURLConnection_INLRURL__LRHttpURLConnection_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "HttpURLConnection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  HttpURLConnection::clazzInfo(), // return type
  "_0_HttpURLConnection", // alternative name of method
  -1, // altlabelHashCode
  HttpURLConnection_methods_HttpURLConnection_INLRURL__LRHttpURLConnection__args, // the arguments
  0, //arguments count
  HttpURLConnection_methods_HttpURLConnection_INLRURL__LRHttpURLConnection__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HttpURLConnection_methods_createSocket_INLRString_I_LRSocket__arg_host = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "host", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo HttpURLConnection_methods_createSocket_INLRString_I_LRSocket__arg_port = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "port", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HttpURLConnection_methods_createSocket_INLRString_I_LRSocket__args[] = 
{
  &HttpURLConnection_methods_createSocket_INLRString_I_LRSocket__arg_host,
  &HttpURLConnection_methods_createSocket_INLRString_I_LRSocket__arg_port,
  0
};

::acdk::lang::dmi::ClazzInfo* HttpURLConnection_methods_createSocket_INLRString_I_LRSocket__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HttpURLConnection_method_createSocket_INLRString_I_LRSocket_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createSocket", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSocket::clazzInfo(), // return type
  "_b_createSocket", // alternative name of method
  -1, // altlabelHashCode
  HttpURLConnection_methods_createSocket_INLRString_I_LRSocket__args, // the arguments
  0, //arguments count
  HttpURLConnection_methods_createSocket_INLRString_I_LRSocket__exceptions, // the declared exceptions
  HttpURLConnection_MetainfoWrapper::HttpURLConnection_method_createSocket_INLRString_I_LRSocket__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* HttpURLConnection_methods_disconnect__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HttpURLConnection_methods_disconnect__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HttpURLConnection_method_disconnect__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "disconnect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_disconnect", // alternative name of method
  -1, // altlabelHashCode
  HttpURLConnection_methods_disconnect__V_args, // the arguments
  0, //arguments count
  HttpURLConnection_methods_disconnect__V_exceptions, // the declared exceptions
  HttpURLConnection_MetainfoWrapper::HttpURLConnection_method_disconnect__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* HttpURLConnection_methods_getErrorStream__LRReader__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HttpURLConnection_methods_getErrorStream__LRReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HttpURLConnection_method_getErrorStream__LRReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getErrorStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReader::clazzInfo(), // return type
  "_7_getErrorStream", // alternative name of method
  -1, // altlabelHashCode
  HttpURLConnection_methods_getErrorStream__LRReader__args, // the arguments
  0, //arguments count
  HttpURLConnection_methods_getErrorStream__LRReader__exceptions, // the declared exceptions
  HttpURLConnection_MetainfoWrapper::HttpURLConnection_method_getErrorStream__LRReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* HttpURLConnection_methods_getFollowRedirects__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HttpURLConnection_methods_getFollowRedirects__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HttpURLConnection_method_getFollowRedirects__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFollowRedirects", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_getFollowRedirects", // alternative name of method
  -1, // altlabelHashCode
  HttpURLConnection_methods_getFollowRedirects__Z_args, // the arguments
  0, //arguments count
  HttpURLConnection_methods_getFollowRedirects__Z_exceptions, // the declared exceptions
  HttpURLConnection_MetainfoWrapper::HttpURLConnection_method_getFollowRedirects__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* HttpURLConnection_methods_getRequestMethod__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HttpURLConnection_methods_getRequestMethod__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HttpURLConnection_method_getRequestMethod__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRequestMethod", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_4_getRequestMethod", // alternative name of method
  -1, // altlabelHashCode
  HttpURLConnection_methods_getRequestMethod__LRString__args, // the arguments
  0, //arguments count
  HttpURLConnection_methods_getRequestMethod__LRString__exceptions, // the declared exceptions
  HttpURLConnection_MetainfoWrapper::HttpURLConnection_method_getRequestMethod__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* HttpURLConnection_methods_getResponseCode__LHttpResponceCode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HttpURLConnection_methods_getResponseCode__LHttpResponceCode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HttpURLConnection_method_getResponseCode__LHttpResponceCode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getResponseCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_getResponseCode", // alternative name of method
  -1, // altlabelHashCode
  HttpURLConnection_methods_getResponseCode__LHttpResponceCode__args, // the arguments
  0, //arguments count
  HttpURLConnection_methods_getResponseCode__LHttpResponceCode__exceptions, // the declared exceptions
  HttpURLConnection_MetainfoWrapper::HttpURLConnection_method_getResponseCode__LHttpResponceCode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* HttpURLConnection_methods_getResponseMessage__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HttpURLConnection_methods_getResponseMessage__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HttpURLConnection_method_getResponseMessage__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getResponseMessage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_6_getResponseMessage", // alternative name of method
  -1, // altlabelHashCode
  HttpURLConnection_methods_getResponseMessage__LRString__args, // the arguments
  0, //arguments count
  HttpURLConnection_methods_getResponseMessage__LRString__exceptions, // the declared exceptions
  HttpURLConnection_MetainfoWrapper::HttpURLConnection_method_getResponseMessage__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* HttpURLConnection_methods_getStandardPort__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HttpURLConnection_methods_getStandardPort__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HttpURLConnection_method_getStandardPort__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getStandardPort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_a_getStandardPort", // alternative name of method
  -1, // altlabelHashCode
  HttpURLConnection_methods_getStandardPort__I_args, // the arguments
  0, //arguments count
  HttpURLConnection_methods_getStandardPort__I_exceptions, // the declared exceptions
  HttpURLConnection_MetainfoWrapper::HttpURLConnection_method_getStandardPort__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HttpURLConnection_methods_setFollowRedirects_Z_V_arg_follow = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "follow", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HttpURLConnection_methods_setFollowRedirects_Z_V_args[] = 
{
  &HttpURLConnection_methods_setFollowRedirects_Z_V_arg_follow,
  0
};

::acdk::lang::dmi::ClazzInfo* HttpURLConnection_methods_setFollowRedirects_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HttpURLConnection_method_setFollowRedirects_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFollowRedirects", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_setFollowRedirects", // alternative name of method
  -1, // altlabelHashCode
  HttpURLConnection_methods_setFollowRedirects_Z_V_args, // the arguments
  0, //arguments count
  HttpURLConnection_methods_setFollowRedirects_Z_V_exceptions, // the declared exceptions
  HttpURLConnection_MetainfoWrapper::HttpURLConnection_method_setFollowRedirects_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HttpURLConnection_methods_setRequestMethod_INLRString__V_arg_method = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "method", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HttpURLConnection_methods_setRequestMethod_INLRString__V_args[] = 
{
  &HttpURLConnection_methods_setRequestMethod_INLRString__V_arg_method,
  0
};

::acdk::lang::dmi::ClazzInfo* HttpURLConnection_methods_setRequestMethod_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HttpURLConnection_method_setRequestMethod_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setRequestMethod", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_setRequestMethod", // alternative name of method
  -1, // altlabelHashCode
  HttpURLConnection_methods_setRequestMethod_INLRString__V_args, // the arguments
  0, //arguments count
  HttpURLConnection_methods_setRequestMethod_INLRString__V_exceptions, // the declared exceptions
  HttpURLConnection_MetainfoWrapper::HttpURLConnection_method_setRequestMethod_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* HttpURLConnection_methods_usingProxy__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HttpURLConnection_methods_usingProxy__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HttpURLConnection_method_usingProxy__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "usingProxy", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_9_usingProxy", // alternative name of method
  -1, // altlabelHashCode
  HttpURLConnection_methods_usingProxy__Z_args, // the arguments
  0, //arguments count
  HttpURLConnection_methods_usingProxy__Z_exceptions, // the declared exceptions
  HttpURLConnection_MetainfoWrapper::HttpURLConnection_method_usingProxy__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _HttpURLConnection_methods[] = 
{
  &HttpURLConnection_method_GetClass__L_acdk_lang_RClass_,
  &HttpURLConnection_method_HttpURLConnection_INLRURL__LRHttpURLConnection_,
  &HttpURLConnection_method_createSocket_INLRString_I_LRSocket_,
  &HttpURLConnection_method_disconnect__V,
  &HttpURLConnection_method_getErrorStream__LRReader_,
  &HttpURLConnection_method_getFollowRedirects__Z,
  &HttpURLConnection_method_getRequestMethod__LRString_,
  &HttpURLConnection_method_getResponseCode__LHttpResponceCode_,
  &HttpURLConnection_method_getResponseMessage__LRString_,
  &HttpURLConnection_method_getStandardPort__I,
  &HttpURLConnection_method_setFollowRedirects_Z_V,
  &HttpURLConnection_method_setRequestMethod_INLRString__V,
  &HttpURLConnection_method_usingProxy__Z,
  0
};


struct HttpURLConnection_MetaInfoInitializer
{  HttpURLConnection_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = HttpURLConnection::clazzInfo();
    ci->fields =  _HttpURLConnection_fields;
    ci->methods =  _HttpURLConnection_methods;
    ci->_scopeParent = acdk_net_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
HttpURLConnection_MetaInfoInitializer HttpURLConnection_MetaInfoInitializer_staticinstance__;


struct HttpURLConnection_clazzInfo_ClazzAttributesResInitializer1
{
  HttpURLConnection_clazzInfo_ClazzAttributesResInitializer1()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&HttpURLConnection_method_getResponseCode__LHttpResponceCode_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)HttpResponceCodeMetaInf::GetEnumInfo()));
  }
};

HttpURLConnection_clazzInfo_ClazzAttributesResInitializer1 HttpURLConnection_clazzInfo_ClazzAttributesResInitializer1_instance;



} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 


//static
::acdk::lang::RObject
HttpURLConnectionImpl_create_array(int length)
{
  return new ObjectArrayImpl<RHttpURLConnectionImpl>(length);
}

//static
::acdk::lang::RObject
HttpURLConnectionImpl_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class HttpURLConnectionImpl_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HttpURLConnectionImpl_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)HttpURLConnectionImpl::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HttpURLConnectionImpl_method_HttpURLConnectionImpl_INLRURL__LRHttpURLConnectionImpl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new HttpURLConnectionImpl(::acdk::lang::dmi::castTo< RURL>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HttpURLConnectionImpl_method_connect__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HttpURLConnectionImpl* This = dmi_cast<HttpURLConnectionImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->HttpURLConnectionImpl::connect();
    else
        This->connect();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HttpURLConnectionImpl_method_createSocket_INLRString_I_LRSocket__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HttpURLConnectionImpl* This = dmi_cast<HttpURLConnectionImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->HttpURLConnectionImpl::createSocket(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->createSocket(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HttpURLConnectionImpl_method_disconnect__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HttpURLConnectionImpl* This = dmi_cast<HttpURLConnectionImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->HttpURLConnectionImpl::disconnect();
    else
        This->disconnect();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HttpURLConnectionImpl_method_getHeaderField_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HttpURLConnectionImpl* This = dmi_cast<HttpURLConnectionImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->HttpURLConnectionImpl::getHeaderField(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getHeaderField(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HttpURLConnectionImpl_method_getHeaderFieldCount__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HttpURLConnectionImpl* This = dmi_cast<HttpURLConnectionImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->HttpURLConnectionImpl::getHeaderFieldCount();
    else
      ret = This->getHeaderFieldCount();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HttpURLConnectionImpl_method_getHeaderFieldKey_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HttpURLConnectionImpl* This = dmi_cast<HttpURLConnectionImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->HttpURLConnectionImpl::getHeaderFieldKey(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getHeaderFieldKey(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HttpURLConnectionImpl_method_getInputStream__LRReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HttpURLConnectionImpl* This = dmi_cast<HttpURLConnectionImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->HttpURLConnectionImpl::getInputStream();
    else
        ret = (::acdk::lang::RObject)This->getInputStream();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HttpURLConnectionImpl_method_getStandardPort__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HttpURLConnectionImpl* This = dmi_cast<HttpURLConnectionImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->HttpURLConnectionImpl::getStandardPort();
    else
      ret = This->getStandardPort();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HttpURLConnectionImpl_method_setRequestMethod_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HttpURLConnectionImpl* This = dmi_cast<HttpURLConnectionImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->HttpURLConnectionImpl::setRequestMethod(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->setRequestMethod(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HttpURLConnectionImpl_method_usingProxy__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HttpURLConnectionImpl* This = dmi_cast<HttpURLConnectionImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->HttpURLConnectionImpl::usingProxy();
    else
      ret = This->usingProxy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  HttpURLConnectionImpl_fields_headers_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    HttpURLConnectionImpl* This = dmi_cast<HttpURLConnectionImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->headers, flags);
    else
      This->headers = ::acdk::lang::dmi::castTo< RHeaderFieldHelper>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  HttpURLConnectionImpl_fields_in_stream_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    HttpURLConnectionImpl* This = dmi_cast<HttpURLConnectionImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->in_stream, flags);
    else
      This->in_stream = ::acdk::lang::dmi::castTo< acdk::io::RReader>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  HttpURLConnectionImpl_fields_out_stream_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    HttpURLConnectionImpl* This = dmi_cast<HttpURLConnectionImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->out_stream, flags);
    else
      This->out_stream = ::acdk::lang::dmi::castTo< acdk::io::RWriter>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  HttpURLConnectionImpl_fields_proxy_name_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    HttpURLConnectionImpl* This = dmi_cast<HttpURLConnectionImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->proxy_name, flags);
    else
      This->proxy_name = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  HttpURLConnectionImpl_fields_proxy_port_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    HttpURLConnectionImpl* This = dmi_cast<HttpURLConnectionImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->proxy_port, flags);
    else
      This->proxy_port = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  HttpURLConnectionImpl_fields_socket_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    HttpURLConnectionImpl* This = dmi_cast<HttpURLConnectionImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->socket, flags);
    else
      This->socket = ::acdk::lang::dmi::castTo< RSocket>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  HttpURLConnectionImpl_fields_with_proxy_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    HttpURLConnectionImpl* This = dmi_cast<HttpURLConnectionImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->with_proxy, flags);
    else
      This->with_proxy = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo HttpURLConnectionImpl_fields_headers = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "headers", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RHeaderFieldHelper::clazzInfo(),
  HttpURLConnectionImpl_MetainfoWrapper::HttpURLConnectionImpl_fields_headers_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo HttpURLConnectionImpl_fields_in_stream = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "in_stream", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo(),
  HttpURLConnectionImpl_MetainfoWrapper::HttpURLConnectionImpl_fields_in_stream_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo HttpURLConnectionImpl_fields_out_stream = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "out_stream", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RWriter::clazzInfo(),
  HttpURLConnectionImpl_MetainfoWrapper::HttpURLConnectionImpl_fields_out_stream_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo HttpURLConnectionImpl_fields_proxy_name = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "proxy_name", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  HttpURLConnectionImpl_MetainfoWrapper::HttpURLConnectionImpl_fields_proxy_name_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo HttpURLConnectionImpl_fields_proxy_port = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "proxy_port", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  HttpURLConnectionImpl_MetainfoWrapper::HttpURLConnectionImpl_fields_proxy_port_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo HttpURLConnectionImpl_fields_socket = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "socket", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSocket::clazzInfo(),
  HttpURLConnectionImpl_MetainfoWrapper::HttpURLConnectionImpl_fields_socket_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo HttpURLConnectionImpl_fields_with_proxy = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "with_proxy", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  HttpURLConnectionImpl_MetainfoWrapper::HttpURLConnectionImpl_fields_with_proxy_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _HttpURLConnectionImpl_fields[] = 
{
  &HttpURLConnectionImpl_fields_headers,
  &HttpURLConnectionImpl_fields_in_stream,
  &HttpURLConnectionImpl_fields_out_stream,
  &HttpURLConnectionImpl_fields_proxy_name,
  &HttpURLConnectionImpl_fields_proxy_port,
  &HttpURLConnectionImpl_fields_socket,
  &HttpURLConnectionImpl_fields_with_proxy,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* HttpURLConnectionImpl_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HttpURLConnectionImpl_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HttpURLConnectionImpl_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_b_GetClass", // alternative name of method
  -1, // altlabelHashCode
  HttpURLConnectionImpl_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  HttpURLConnectionImpl_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  HttpURLConnectionImpl_MetainfoWrapper::HttpURLConnectionImpl_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HttpURLConnectionImpl_methods_HttpURLConnectionImpl_INLRURL__LRHttpURLConnectionImpl__arg_url = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "url", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RURL::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HttpURLConnectionImpl_methods_HttpURLConnectionImpl_INLRURL__LRHttpURLConnectionImpl__args[] = 
{
  &HttpURLConnectionImpl_methods_HttpURLConnectionImpl_INLRURL__LRHttpURLConnectionImpl__arg_url,
  0
};

::acdk::lang::dmi::ClazzInfo* HttpURLConnectionImpl_methods_HttpURLConnectionImpl_INLRURL__LRHttpURLConnectionImpl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HttpURLConnectionImpl_method_HttpURLConnectionImpl_INLRURL__LRHttpURLConnectionImpl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "HttpURLConnectionImpl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  HttpURLConnectionImpl::clazzInfo(), // return type
  "_0_HttpURLConnectionImpl", // alternative name of method
  -1, // altlabelHashCode
  HttpURLConnectionImpl_methods_HttpURLConnectionImpl_INLRURL__LRHttpURLConnectionImpl__args, // the arguments
  0, //arguments count
  HttpURLConnectionImpl_methods_HttpURLConnectionImpl_INLRURL__LRHttpURLConnectionImpl__exceptions, // the declared exceptions
  HttpURLConnectionImpl_MetainfoWrapper::HttpURLConnectionImpl_method_HttpURLConnectionImpl_INLRURL__LRHttpURLConnectionImpl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* HttpURLConnectionImpl_methods_connect__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HttpURLConnectionImpl_methods_connect__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HttpURLConnectionImpl_method_connect__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "connect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_connect", // alternative name of method
  -1, // altlabelHashCode
  HttpURLConnectionImpl_methods_connect__V_args, // the arguments
  0, //arguments count
  HttpURLConnectionImpl_methods_connect__V_exceptions, // the declared exceptions
  HttpURLConnectionImpl_MetainfoWrapper::HttpURLConnectionImpl_method_connect__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HttpURLConnectionImpl_methods_createSocket_INLRString_I_LRSocket__arg_host = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "host", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo HttpURLConnectionImpl_methods_createSocket_INLRString_I_LRSocket__arg_port = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "port", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HttpURLConnectionImpl_methods_createSocket_INLRString_I_LRSocket__args[] = 
{
  &HttpURLConnectionImpl_methods_createSocket_INLRString_I_LRSocket__arg_host,
  &HttpURLConnectionImpl_methods_createSocket_INLRString_I_LRSocket__arg_port,
  0
};

::acdk::lang::dmi::ClazzInfo* HttpURLConnectionImpl_methods_createSocket_INLRString_I_LRSocket__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HttpURLConnectionImpl_method_createSocket_INLRString_I_LRSocket_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createSocket", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSocket::clazzInfo(), // return type
  "_a_createSocket", // alternative name of method
  -1, // altlabelHashCode
  HttpURLConnectionImpl_methods_createSocket_INLRString_I_LRSocket__args, // the arguments
  0, //arguments count
  HttpURLConnectionImpl_methods_createSocket_INLRString_I_LRSocket__exceptions, // the declared exceptions
  HttpURLConnectionImpl_MetainfoWrapper::HttpURLConnectionImpl_method_createSocket_INLRString_I_LRSocket__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* HttpURLConnectionImpl_methods_disconnect__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HttpURLConnectionImpl_methods_disconnect__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HttpURLConnectionImpl_method_disconnect__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "disconnect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_disconnect", // alternative name of method
  -1, // altlabelHashCode
  HttpURLConnectionImpl_methods_disconnect__V_args, // the arguments
  0, //arguments count
  HttpURLConnectionImpl_methods_disconnect__V_exceptions, // the declared exceptions
  HttpURLConnectionImpl_MetainfoWrapper::HttpURLConnectionImpl_method_disconnect__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HttpURLConnectionImpl_methods_getHeaderField_I_LRString__arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HttpURLConnectionImpl_methods_getHeaderField_I_LRString__args[] = 
{
  &HttpURLConnectionImpl_methods_getHeaderField_I_LRString__arg_n,
  0
};

::acdk::lang::dmi::ClazzInfo* HttpURLConnectionImpl_methods_getHeaderField_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HttpURLConnectionImpl_method_getHeaderField_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getHeaderField", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_8_getHeaderField", // alternative name of method
  -1, // altlabelHashCode
  HttpURLConnectionImpl_methods_getHeaderField_I_LRString__args, // the arguments
  0, //arguments count
  HttpURLConnectionImpl_methods_getHeaderField_I_LRString__exceptions, // the declared exceptions
  HttpURLConnectionImpl_MetainfoWrapper::HttpURLConnectionImpl_method_getHeaderField_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* HttpURLConnectionImpl_methods_getHeaderFieldCount__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HttpURLConnectionImpl_methods_getHeaderFieldCount__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HttpURLConnectionImpl_method_getHeaderFieldCount__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getHeaderFieldCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_getHeaderFieldCount", // alternative name of method
  -1, // altlabelHashCode
  HttpURLConnectionImpl_methods_getHeaderFieldCount__I_args, // the arguments
  0, //arguments count
  HttpURLConnectionImpl_methods_getHeaderFieldCount__I_exceptions, // the declared exceptions
  HttpURLConnectionImpl_MetainfoWrapper::HttpURLConnectionImpl_method_getHeaderFieldCount__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HttpURLConnectionImpl_methods_getHeaderFieldKey_I_LRString__arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HttpURLConnectionImpl_methods_getHeaderFieldKey_I_LRString__args[] = 
{
  &HttpURLConnectionImpl_methods_getHeaderFieldKey_I_LRString__arg_n,
  0
};

::acdk::lang::dmi::ClazzInfo* HttpURLConnectionImpl_methods_getHeaderFieldKey_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HttpURLConnectionImpl_method_getHeaderFieldKey_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getHeaderFieldKey", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_7_getHeaderFieldKey", // alternative name of method
  -1, // altlabelHashCode
  HttpURLConnectionImpl_methods_getHeaderFieldKey_I_LRString__args, // the arguments
  0, //arguments count
  HttpURLConnectionImpl_methods_getHeaderFieldKey_I_LRString__exceptions, // the declared exceptions
  HttpURLConnectionImpl_MetainfoWrapper::HttpURLConnectionImpl_method_getHeaderFieldKey_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* HttpURLConnectionImpl_methods_getInputStream__LRReader__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HttpURLConnectionImpl_methods_getInputStream__LRReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HttpURLConnectionImpl_method_getInputStream__LRReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInputStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReader::clazzInfo(), // return type
  "_2_getInputStream", // alternative name of method
  -1, // altlabelHashCode
  HttpURLConnectionImpl_methods_getInputStream__LRReader__args, // the arguments
  0, //arguments count
  HttpURLConnectionImpl_methods_getInputStream__LRReader__exceptions, // the declared exceptions
  HttpURLConnectionImpl_MetainfoWrapper::HttpURLConnectionImpl_method_getInputStream__LRReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* HttpURLConnectionImpl_methods_getStandardPort__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HttpURLConnectionImpl_methods_getStandardPort__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HttpURLConnectionImpl_method_getStandardPort__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getStandardPort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_9_getStandardPort", // alternative name of method
  -1, // altlabelHashCode
  HttpURLConnectionImpl_methods_getStandardPort__I_args, // the arguments
  0, //arguments count
  HttpURLConnectionImpl_methods_getStandardPort__I_exceptions, // the declared exceptions
  HttpURLConnectionImpl_MetainfoWrapper::HttpURLConnectionImpl_method_getStandardPort__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HttpURLConnectionImpl_methods_setRequestMethod_INLRString__V_arg_method = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "method", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HttpURLConnectionImpl_methods_setRequestMethod_INLRString__V_args[] = 
{
  &HttpURLConnectionImpl_methods_setRequestMethod_INLRString__V_arg_method,
  0
};

::acdk::lang::dmi::ClazzInfo* HttpURLConnectionImpl_methods_setRequestMethod_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HttpURLConnectionImpl_method_setRequestMethod_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setRequestMethod", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_setRequestMethod", // alternative name of method
  -1, // altlabelHashCode
  HttpURLConnectionImpl_methods_setRequestMethod_INLRString__V_args, // the arguments
  0, //arguments count
  HttpURLConnectionImpl_methods_setRequestMethod_INLRString__V_exceptions, // the declared exceptions
  HttpURLConnectionImpl_MetainfoWrapper::HttpURLConnectionImpl_method_setRequestMethod_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* HttpURLConnectionImpl_methods_usingProxy__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HttpURLConnectionImpl_methods_usingProxy__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HttpURLConnectionImpl_method_usingProxy__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "usingProxy", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_usingProxy", // alternative name of method
  -1, // altlabelHashCode
  HttpURLConnectionImpl_methods_usingProxy__Z_args, // the arguments
  0, //arguments count
  HttpURLConnectionImpl_methods_usingProxy__Z_exceptions, // the declared exceptions
  HttpURLConnectionImpl_MetainfoWrapper::HttpURLConnectionImpl_method_usingProxy__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _HttpURLConnectionImpl_methods[] = 
{
  &HttpURLConnectionImpl_method_GetClass__L_acdk_lang_RClass_,
  &HttpURLConnectionImpl_method_HttpURLConnectionImpl_INLRURL__LRHttpURLConnectionImpl_,
  &HttpURLConnectionImpl_method_connect__V,
  &HttpURLConnectionImpl_method_createSocket_INLRString_I_LRSocket_,
  &HttpURLConnectionImpl_method_disconnect__V,
  &HttpURLConnectionImpl_method_getHeaderField_I_LRString_,
  &HttpURLConnectionImpl_method_getHeaderFieldCount__I,
  &HttpURLConnectionImpl_method_getHeaderFieldKey_I_LRString_,
  &HttpURLConnectionImpl_method_getInputStream__LRReader_,
  &HttpURLConnectionImpl_method_getStandardPort__I,
  &HttpURLConnectionImpl_method_setRequestMethod_INLRString__V,
  &HttpURLConnectionImpl_method_usingProxy__Z,
  0
};


struct HttpURLConnectionImpl_MetaInfoInitializer
{  HttpURLConnectionImpl_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = HttpURLConnectionImpl::clazzInfo();
    ci->fields =  _HttpURLConnectionImpl_fields;
    ci->methods =  _HttpURLConnectionImpl_methods;
    ci->_scopeParent = acdk_net_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
HttpURLConnectionImpl_MetaInfoInitializer HttpURLConnectionImpl_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

using namespace acdk::lang;
using namespace acdk::io;

//static
::acdk::lang::RObject
InetAddress_create_array(int length)
{
  return new ObjectArrayImpl<RInetAddress>(length);
}

//static
::acdk::lang::RObject
InetAddress_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class InetAddress_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InetAddress_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)InetAddress::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InetAddress_method_InetAddress_INLRbyteArray_INLRString__LRInetAddress__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new InetAddress(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InetAddress_method_InetAddress_INLRbyteArray__LRInetAddress__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new InetAddress(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InetAddress_method_InetAddress_IINLRString__LRInetAddress__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new InetAddress(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InetAddress_method_InetAddress_I_LRInetAddress__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new InetAddress(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InetAddress_method_equals_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InetAddress* This = dmi_cast<InetAddress>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->InetAddress::equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InetAddress_method_equals_INLRInetAddress__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InetAddress* This = dmi_cast<InetAddress>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->InetAddress::equals(::acdk::lang::dmi::castTo< RInetAddress>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< RInetAddress>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InetAddress_method_getAddress__LRbyteArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InetAddress* This = dmi_cast<InetAddress>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->InetAddress::getAddress();
    else
        ret = (::acdk::lang::RObject)This->getAddress();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InetAddress_method_getAllByName_INLRString__LRInetAddressArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)InetAddress::getAllByName(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InetAddress_method_getAnyAddress__LRInetAddress__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)InetAddress::getAnyAddress();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InetAddress_method_getByName_INLRString__LRInetAddress__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)InetAddress::getByName(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InetAddress_method_getDefaultHost__LRInetAddress__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)InetAddress::getDefaultHost();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InetAddress_method_getDefaultHostName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)InetAddress::getDefaultHostName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InetAddress_method_getHostAddress__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InetAddress* This = dmi_cast<InetAddress>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->InetAddress::getHostAddress();
    else
        ret = (::acdk::lang::RObject)This->getHostAddress();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InetAddress_method_getHostName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InetAddress* This = dmi_cast<InetAddress>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->InetAddress::getHostName();
    else
        ret = (::acdk::lang::RObject)This->getHostName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InetAddress_method_getLocalHost__LRInetAddress__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)InetAddress::getLocalHost();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InetAddress_method_getLocalHostName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)InetAddress::getLocalHostName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InetAddress_method_getNullHost__LRInetAddress__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)InetAddress::getNullHost();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InetAddress_method_getWildcardHost__LRInetAddress__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)InetAddress::getWildcardHost();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InetAddress_method_hashCode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InetAddress* This = dmi_cast<InetAddress>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->InetAddress::hashCode();
    else
      ret = This->hashCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InetAddress_method_isMulticastAddress__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InetAddress* This = dmi_cast<InetAddress>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->InetAddress::isMulticastAddress();
    else
      ret = This->isMulticastAddress();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InetAddress_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InetAddress* This = dmi_cast<InetAddress>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->InetAddress::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  InetAddress_fields__hostname_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    InetAddress* This = dmi_cast<InetAddress>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_hostname, flags);
    else
      This->_hostname = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  InetAddress_fields__ipNumber_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    InetAddress* This = dmi_cast<InetAddress>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_ipNumber, flags);
    else
      This->_ipNumber = ::acdk::lang::dmi::castTo< RbyteArray>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo InetAddress_fields__hostname = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_hostname", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  InetAddress_MetainfoWrapper::InetAddress_fields__hostname_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo InetAddress_fields__ipNumber = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_ipNumber", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo(),
  InetAddress_MetainfoWrapper::InetAddress_fields__ipNumber_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _InetAddress_fields[] = 
{
  &InetAddress_fields__hostname,
  &InetAddress_fields__ipNumber,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* InetAddress_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InetAddress_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InetAddress_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_l_GetClass", // alternative name of method
  -1, // altlabelHashCode
  InetAddress_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  InetAddress_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  InetAddress_MetainfoWrapper::InetAddress_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo InetAddress_methods_InetAddress_INLRbyteArray_INLRString__LRInetAddress__arg_ipaddr = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ipaddr", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo InetAddress_methods_InetAddress_INLRbyteArray_INLRString__LRInetAddress__arg_hostname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "hostname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* InetAddress_methods_InetAddress_INLRbyteArray_INLRString__LRInetAddress__args[] = 
{
  &InetAddress_methods_InetAddress_INLRbyteArray_INLRString__LRInetAddress__arg_ipaddr,
  &InetAddress_methods_InetAddress_INLRbyteArray_INLRString__LRInetAddress__arg_hostname,
  0
};

::acdk::lang::dmi::ClazzInfo* InetAddress_methods_InetAddress_INLRbyteArray_INLRString__LRInetAddress__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InetAddress_method_InetAddress_INLRbyteArray_INLRString__LRInetAddress_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "InetAddress", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  InetAddress::clazzInfo(), // return type
  "_0_InetAddress", // alternative name of method
  -1, // altlabelHashCode
  InetAddress_methods_InetAddress_INLRbyteArray_INLRString__LRInetAddress__args, // the arguments
  0, //arguments count
  InetAddress_methods_InetAddress_INLRbyteArray_INLRString__LRInetAddress__exceptions, // the declared exceptions
  InetAddress_MetainfoWrapper::InetAddress_method_InetAddress_INLRbyteArray_INLRString__LRInetAddress__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo InetAddress_methods_InetAddress_INLRbyteArray__LRInetAddress__arg_ipaddr = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ipaddr", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* InetAddress_methods_InetAddress_INLRbyteArray__LRInetAddress__args[] = 
{
  &InetAddress_methods_InetAddress_INLRbyteArray__LRInetAddress__arg_ipaddr,
  0
};

::acdk::lang::dmi::ClazzInfo* InetAddress_methods_InetAddress_INLRbyteArray__LRInetAddress__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InetAddress_method_InetAddress_INLRbyteArray__LRInetAddress_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "InetAddress", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  InetAddress::clazzInfo(), // return type
  "_1_InetAddress", // alternative name of method
  -1, // altlabelHashCode
  InetAddress_methods_InetAddress_INLRbyteArray__LRInetAddress__args, // the arguments
  0, //arguments count
  InetAddress_methods_InetAddress_INLRbyteArray__LRInetAddress__exceptions, // the declared exceptions
  InetAddress_MetainfoWrapper::InetAddress_method_InetAddress_INLRbyteArray__LRInetAddress__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo InetAddress_methods_InetAddress_IINLRString__LRInetAddress__arg_ipaddr = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ipaddr", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo InetAddress_methods_InetAddress_IINLRString__LRInetAddress__arg_hostname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "hostname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* InetAddress_methods_InetAddress_IINLRString__LRInetAddress__args[] = 
{
  &InetAddress_methods_InetAddress_IINLRString__LRInetAddress__arg_ipaddr,
  &InetAddress_methods_InetAddress_IINLRString__LRInetAddress__arg_hostname,
  0
};

::acdk::lang::dmi::ClazzInfo* InetAddress_methods_InetAddress_IINLRString__LRInetAddress__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InetAddress_method_InetAddress_IINLRString__LRInetAddress_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "InetAddress", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  InetAddress::clazzInfo(), // return type
  "_2_InetAddress", // alternative name of method
  -1, // altlabelHashCode
  InetAddress_methods_InetAddress_IINLRString__LRInetAddress__args, // the arguments
  0, //arguments count
  InetAddress_methods_InetAddress_IINLRString__LRInetAddress__exceptions, // the declared exceptions
  InetAddress_MetainfoWrapper::InetAddress_method_InetAddress_IINLRString__LRInetAddress__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo InetAddress_methods_InetAddress_I_LRInetAddress__arg_ipaddr = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ipaddr", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* InetAddress_methods_InetAddress_I_LRInetAddress__args[] = 
{
  &InetAddress_methods_InetAddress_I_LRInetAddress__arg_ipaddr,
  0
};

::acdk::lang::dmi::ClazzInfo* InetAddress_methods_InetAddress_I_LRInetAddress__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InetAddress_method_InetAddress_I_LRInetAddress_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "InetAddress", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  InetAddress::clazzInfo(), // return type
  "_3_InetAddress", // alternative name of method
  -1, // altlabelHashCode
  InetAddress_methods_InetAddress_I_LRInetAddress__args, // the arguments
  0, //arguments count
  InetAddress_methods_InetAddress_I_LRInetAddress__exceptions, // the declared exceptions
  InetAddress_MetainfoWrapper::InetAddress_method_InetAddress_I_LRInetAddress__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo InetAddress_methods_equals_INLRObject__Z_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* InetAddress_methods_equals_INLRObject__Z_args[] = 
{
  &InetAddress_methods_equals_INLRObject__Z_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* InetAddress_methods_equals_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InetAddress_method_equals_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_equals", // alternative name of method
  -1, // altlabelHashCode
  InetAddress_methods_equals_INLRObject__Z_args, // the arguments
  0, //arguments count
  InetAddress_methods_equals_INLRObject__Z_exceptions, // the declared exceptions
  InetAddress_MetainfoWrapper::InetAddress_method_equals_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo InetAddress_methods_equals_INLRInetAddress__Z_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetAddress::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* InetAddress_methods_equals_INLRInetAddress__Z_args[] = 
{
  &InetAddress_methods_equals_INLRInetAddress__Z_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* InetAddress_methods_equals_INLRInetAddress__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InetAddress_method_equals_INLRInetAddress__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_equals", // alternative name of method
  -1, // altlabelHashCode
  InetAddress_methods_equals_INLRInetAddress__Z_args, // the arguments
  0, //arguments count
  InetAddress_methods_equals_INLRInetAddress__Z_exceptions, // the declared exceptions
  InetAddress_MetainfoWrapper::InetAddress_method_equals_INLRInetAddress__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InetAddress_methods_getAddress__LRbyteArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InetAddress_methods_getAddress__LRbyteArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InetAddress_method_getAddress__LRbyteArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAddress", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo(), // return type
  "_6_getAddress", // alternative name of method
  -1, // altlabelHashCode
  InetAddress_methods_getAddress__LRbyteArray__args, // the arguments
  0, //arguments count
  InetAddress_methods_getAddress__LRbyteArray__exceptions, // the declared exceptions
  InetAddress_MetainfoWrapper::InetAddress_method_getAddress__LRbyteArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo InetAddress_methods_getAllByName_INLRString__LRInetAddressArray__arg_host = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "host", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* InetAddress_methods_getAllByName_INLRString__LRInetAddressArray__args[] = 
{
  &InetAddress_methods_getAllByName_INLRString__LRInetAddressArray__arg_host,
  0
};

::acdk::lang::dmi::ClazzInfo* InetAddress_methods_getAllByName_INLRString__LRInetAddressArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InetAddress_method_getAllByName_INLRString__LRInetAddressArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAllByName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetAddressArray::clazzInfo(), // return type
  "_c_getAllByName", // alternative name of method
  -1, // altlabelHashCode
  InetAddress_methods_getAllByName_INLRString__LRInetAddressArray__args, // the arguments
  0, //arguments count
  InetAddress_methods_getAllByName_INLRString__LRInetAddressArray__exceptions, // the declared exceptions
  InetAddress_MetainfoWrapper::InetAddress_method_getAllByName_INLRString__LRInetAddressArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InetAddress_methods_getAnyAddress__LRInetAddress__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InetAddress_methods_getAnyAddress__LRInetAddress__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InetAddress_method_getAnyAddress__LRInetAddress_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAnyAddress", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetAddress::clazzInfo(), // return type
  "_i_getAnyAddress", // alternative name of method
  -1, // altlabelHashCode
  InetAddress_methods_getAnyAddress__LRInetAddress__args, // the arguments
  0, //arguments count
  InetAddress_methods_getAnyAddress__LRInetAddress__exceptions, // the declared exceptions
  InetAddress_MetainfoWrapper::InetAddress_method_getAnyAddress__LRInetAddress__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo InetAddress_methods_getByName_INLRString__LRInetAddress__arg_host = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "host", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* InetAddress_methods_getByName_INLRString__LRInetAddress__args[] = 
{
  &InetAddress_methods_getByName_INLRString__LRInetAddress__arg_host,
  0
};

::acdk::lang::dmi::ClazzInfo* InetAddress_methods_getByName_INLRString__LRInetAddress__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InetAddress_method_getByName_INLRString__LRInetAddress_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getByName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetAddress::clazzInfo(), // return type
  "_d_getByName", // alternative name of method
  -1, // altlabelHashCode
  InetAddress_methods_getByName_INLRString__LRInetAddress__args, // the arguments
  0, //arguments count
  InetAddress_methods_getByName_INLRString__LRInetAddress__exceptions, // the declared exceptions
  InetAddress_MetainfoWrapper::InetAddress_method_getByName_INLRString__LRInetAddress__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InetAddress_methods_getDefaultHost__LRInetAddress__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InetAddress_methods_getDefaultHost__LRInetAddress__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InetAddress_method_getDefaultHost__LRInetAddress_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDefaultHost", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetAddress::clazzInfo(), // return type
  "_k_getDefaultHost", // alternative name of method
  -1, // altlabelHashCode
  InetAddress_methods_getDefaultHost__LRInetAddress__args, // the arguments
  0, //arguments count
  InetAddress_methods_getDefaultHost__LRInetAddress__exceptions, // the declared exceptions
  InetAddress_MetainfoWrapper::InetAddress_method_getDefaultHost__LRInetAddress__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InetAddress_methods_getDefaultHostName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InetAddress_methods_getDefaultHostName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InetAddress_method_getDefaultHostName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDefaultHostName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_j_getDefaultHostName", // alternative name of method
  -1, // altlabelHashCode
  InetAddress_methods_getDefaultHostName__LRString__args, // the arguments
  0, //arguments count
  InetAddress_methods_getDefaultHostName__LRString__exceptions, // the declared exceptions
  InetAddress_MetainfoWrapper::InetAddress_method_getDefaultHostName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InetAddress_methods_getHostAddress__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InetAddress_methods_getHostAddress__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InetAddress_method_getHostAddress__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getHostAddress", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_7_getHostAddress", // alternative name of method
  -1, // altlabelHashCode
  InetAddress_methods_getHostAddress__LRString__args, // the arguments
  0, //arguments count
  InetAddress_methods_getHostAddress__LRString__exceptions, // the declared exceptions
  InetAddress_MetainfoWrapper::InetAddress_method_getHostAddress__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InetAddress_methods_getHostName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InetAddress_methods_getHostName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InetAddress_method_getHostName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getHostName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_8_getHostName", // alternative name of method
  -1, // altlabelHashCode
  InetAddress_methods_getHostName__LRString__args, // the arguments
  0, //arguments count
  InetAddress_methods_getHostName__LRString__exceptions, // the declared exceptions
  InetAddress_MetainfoWrapper::InetAddress_method_getHostName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InetAddress_methods_getLocalHost__LRInetAddress__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InetAddress_methods_getLocalHost__LRInetAddress__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InetAddress_method_getLocalHost__LRInetAddress_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLocalHost", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetAddress::clazzInfo(), // return type
  "_f_getLocalHost", // alternative name of method
  -1, // altlabelHashCode
  InetAddress_methods_getLocalHost__LRInetAddress__args, // the arguments
  0, //arguments count
  InetAddress_methods_getLocalHost__LRInetAddress__exceptions, // the declared exceptions
  InetAddress_MetainfoWrapper::InetAddress_method_getLocalHost__LRInetAddress__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InetAddress_methods_getLocalHostName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InetAddress_methods_getLocalHostName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InetAddress_method_getLocalHostName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLocalHostName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_e_getLocalHostName", // alternative name of method
  -1, // altlabelHashCode
  InetAddress_methods_getLocalHostName__LRString__args, // the arguments
  0, //arguments count
  InetAddress_methods_getLocalHostName__LRString__exceptions, // the declared exceptions
  InetAddress_MetainfoWrapper::InetAddress_method_getLocalHostName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InetAddress_methods_getNullHost__LRInetAddress__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InetAddress_methods_getNullHost__LRInetAddress__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InetAddress_method_getNullHost__LRInetAddress_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNullHost", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetAddress::clazzInfo(), // return type
  "_g_getNullHost", // alternative name of method
  -1, // altlabelHashCode
  InetAddress_methods_getNullHost__LRInetAddress__args, // the arguments
  0, //arguments count
  InetAddress_methods_getNullHost__LRInetAddress__exceptions, // the declared exceptions
  InetAddress_MetainfoWrapper::InetAddress_method_getNullHost__LRInetAddress__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InetAddress_methods_getWildcardHost__LRInetAddress__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InetAddress_methods_getWildcardHost__LRInetAddress__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InetAddress_method_getWildcardHost__LRInetAddress_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWildcardHost", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetAddress::clazzInfo(), // return type
  "_h_getWildcardHost", // alternative name of method
  -1, // altlabelHashCode
  InetAddress_methods_getWildcardHost__LRInetAddress__args, // the arguments
  0, //arguments count
  InetAddress_methods_getWildcardHost__LRInetAddress__exceptions, // the declared exceptions
  InetAddress_MetainfoWrapper::InetAddress_method_getWildcardHost__LRInetAddress__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InetAddress_methods_hashCode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InetAddress_methods_hashCode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InetAddress_method_hashCode__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hashCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_9_hashCode", // alternative name of method
  -1, // altlabelHashCode
  InetAddress_methods_hashCode__I_args, // the arguments
  0, //arguments count
  InetAddress_methods_hashCode__I_exceptions, // the declared exceptions
  InetAddress_MetainfoWrapper::InetAddress_method_hashCode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InetAddress_methods_isMulticastAddress__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InetAddress_methods_isMulticastAddress__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InetAddress_method_isMulticastAddress__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isMulticastAddress", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_b_isMulticastAddress", // alternative name of method
  -1, // altlabelHashCode
  InetAddress_methods_isMulticastAddress__Z_args, // the arguments
  0, //arguments count
  InetAddress_methods_isMulticastAddress__Z_exceptions, // the declared exceptions
  InetAddress_MetainfoWrapper::InetAddress_method_isMulticastAddress__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InetAddress_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InetAddress_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InetAddress_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_a_toString", // alternative name of method
  -1, // altlabelHashCode
  InetAddress_methods_toString__LRString__args, // the arguments
  0, //arguments count
  InetAddress_methods_toString__LRString__exceptions, // the declared exceptions
  InetAddress_MetainfoWrapper::InetAddress_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _InetAddress_methods[] = 
{
  &InetAddress_method_GetClass__L_acdk_lang_RClass_,
  &InetAddress_method_InetAddress_INLRbyteArray_INLRString__LRInetAddress_,
  &InetAddress_method_InetAddress_INLRbyteArray__LRInetAddress_,
  &InetAddress_method_InetAddress_IINLRString__LRInetAddress_,
  &InetAddress_method_InetAddress_I_LRInetAddress_,
  &InetAddress_method_equals_INLRObject__Z,
  &InetAddress_method_equals_INLRInetAddress__Z,
  &InetAddress_method_getAddress__LRbyteArray_,
  &InetAddress_method_getAllByName_INLRString__LRInetAddressArray_,
  &InetAddress_method_getAnyAddress__LRInetAddress_,
  &InetAddress_method_getByName_INLRString__LRInetAddress_,
  &InetAddress_method_getDefaultHost__LRInetAddress_,
  &InetAddress_method_getDefaultHostName__LRString_,
  &InetAddress_method_getHostAddress__LRString_,
  &InetAddress_method_getHostName__LRString_,
  &InetAddress_method_getLocalHost__LRInetAddress_,
  &InetAddress_method_getLocalHostName__LRString_,
  &InetAddress_method_getNullHost__LRInetAddress_,
  &InetAddress_method_getWildcardHost__LRInetAddress_,
  &InetAddress_method_hashCode__I,
  &InetAddress_method_isMulticastAddress__Z,
  &InetAddress_method_toString__LRString_,
  0
};


struct InetAddress_MetaInfoInitializer
{  InetAddress_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = InetAddress::clazzInfo();
    ci->fields =  _InetAddress_fields;
    ci->methods =  _InetAddress_methods;
    ci->_scopeParent = acdk_net_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
InetAddress_MetaInfoInitializer InetAddress_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 


//static
::acdk::lang::RObject
InetSocketAddress_create_array(int length)
{
  return new ObjectArrayImpl<RInetSocketAddress>(length);
}

//static
::acdk::lang::RObject
InetSocketAddress_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class InetSocketAddress_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InetSocketAddress_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)InetSocketAddress::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InetSocketAddress_method_InetSocketAddress_INLRInetAddress_I_LRInetSocketAddress__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new InetSocketAddress(::acdk::lang::dmi::castTo< RInetAddress>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InetSocketAddress_method_InetSocketAddress_I_LRInetSocketAddress__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new InetSocketAddress(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InetSocketAddress_method_InetSocketAddress_INLRString_I_LRInetSocketAddress__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new InetSocketAddress(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InetSocketAddress_method_equals_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InetSocketAddress* This = dmi_cast<InetSocketAddress>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->InetSocketAddress::equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InetSocketAddress_method_equals_INLRInetSocketAddress__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InetSocketAddress* This = dmi_cast<InetSocketAddress>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->InetSocketAddress::equals(::acdk::lang::dmi::castTo< RInetSocketAddress>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< RInetSocketAddress>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InetSocketAddress_method_getAddress__LRInetAddress__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InetSocketAddress* This = dmi_cast<InetSocketAddress>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->InetSocketAddress::getAddress();
    else
        ret = (::acdk::lang::RObject)This->getAddress();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InetSocketAddress_method_getHostName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InetSocketAddress* This = dmi_cast<InetSocketAddress>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->InetSocketAddress::getHostName();
    else
        ret = (::acdk::lang::RObject)This->getHostName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InetSocketAddress_method_getPort__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InetSocketAddress* This = dmi_cast<InetSocketAddress>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->InetSocketAddress::getPort();
    else
      ret = This->getPort();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InetSocketAddress_method_hashCode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InetSocketAddress* This = dmi_cast<InetSocketAddress>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->InetSocketAddress::hashCode();
    else
      ret = This->hashCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InetSocketAddress_method_isUnresolved__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InetSocketAddress* This = dmi_cast<InetSocketAddress>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->InetSocketAddress::isUnresolved();
    else
      ret = This->isUnresolved();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InetSocketAddress_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InetSocketAddress* This = dmi_cast<InetSocketAddress>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->InetSocketAddress::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  InetSocketAddress_fields__inetAddress_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    InetSocketAddress* This = dmi_cast<InetSocketAddress>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_inetAddress, flags);
    else
      This->_inetAddress = ::acdk::lang::dmi::castTo< RInetAddress>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  InetSocketAddress_fields__port_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    InetSocketAddress* This = dmi_cast<InetSocketAddress>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_port, flags);
    else
      This->_port = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  InetSocketAddress_fields__resolved_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    InetSocketAddress* This = dmi_cast<InetSocketAddress>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_resolved, flags);
    else
      This->_resolved = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo InetSocketAddress_fields__inetAddress = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_inetAddress", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetAddress::clazzInfo(),
  InetSocketAddress_MetainfoWrapper::InetSocketAddress_fields__inetAddress_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo InetSocketAddress_fields__port = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_port", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  InetSocketAddress_MetainfoWrapper::InetSocketAddress_fields__port_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo InetSocketAddress_fields__resolved = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_resolved", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  InetSocketAddress_MetainfoWrapper::InetSocketAddress_fields__resolved_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _InetSocketAddress_fields[] = 
{
  &InetSocketAddress_fields__inetAddress,
  &InetSocketAddress_fields__port,
  &InetSocketAddress_fields__resolved,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* InetSocketAddress_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InetSocketAddress_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InetSocketAddress_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_b_GetClass", // alternative name of method
  -1, // altlabelHashCode
  InetSocketAddress_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  InetSocketAddress_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  InetSocketAddress_MetainfoWrapper::InetSocketAddress_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo InetSocketAddress_methods_InetSocketAddress_INLRInetAddress_I_LRInetSocketAddress__arg_addr = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "addr", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetAddress::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo InetSocketAddress_methods_InetSocketAddress_INLRInetAddress_I_LRInetSocketAddress__arg_port = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "port", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* InetSocketAddress_methods_InetSocketAddress_INLRInetAddress_I_LRInetSocketAddress__args[] = 
{
  &InetSocketAddress_methods_InetSocketAddress_INLRInetAddress_I_LRInetSocketAddress__arg_addr,
  &InetSocketAddress_methods_InetSocketAddress_INLRInetAddress_I_LRInetSocketAddress__arg_port,
  0
};

::acdk::lang::dmi::ClazzInfo* InetSocketAddress_methods_InetSocketAddress_INLRInetAddress_I_LRInetSocketAddress__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InetSocketAddress_method_InetSocketAddress_INLRInetAddress_I_LRInetSocketAddress_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "InetSocketAddress", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  InetSocketAddress::clazzInfo(), // return type
  "_0_InetSocketAddress", // alternative name of method
  -1, // altlabelHashCode
  InetSocketAddress_methods_InetSocketAddress_INLRInetAddress_I_LRInetSocketAddress__args, // the arguments
  0, //arguments count
  InetSocketAddress_methods_InetSocketAddress_INLRInetAddress_I_LRInetSocketAddress__exceptions, // the declared exceptions
  InetSocketAddress_MetainfoWrapper::InetSocketAddress_method_InetSocketAddress_INLRInetAddress_I_LRInetSocketAddress__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo InetSocketAddress_methods_InetSocketAddress_I_LRInetSocketAddress__arg_port = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "port", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* InetSocketAddress_methods_InetSocketAddress_I_LRInetSocketAddress__args[] = 
{
  &InetSocketAddress_methods_InetSocketAddress_I_LRInetSocketAddress__arg_port,
  0
};

::acdk::lang::dmi::ClazzInfo* InetSocketAddress_methods_InetSocketAddress_I_LRInetSocketAddress__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InetSocketAddress_method_InetSocketAddress_I_LRInetSocketAddress_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "InetSocketAddress", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  InetSocketAddress::clazzInfo(), // return type
  "_1_InetSocketAddress", // alternative name of method
  -1, // altlabelHashCode
  InetSocketAddress_methods_InetSocketAddress_I_LRInetSocketAddress__args, // the arguments
  0, //arguments count
  InetSocketAddress_methods_InetSocketAddress_I_LRInetSocketAddress__exceptions, // the declared exceptions
  InetSocketAddress_MetainfoWrapper::InetSocketAddress_method_InetSocketAddress_I_LRInetSocketAddress__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo InetSocketAddress_methods_InetSocketAddress_INLRString_I_LRInetSocketAddress__arg_hostname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "hostname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo InetSocketAddress_methods_InetSocketAddress_INLRString_I_LRInetSocketAddress__arg_port = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "port", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* InetSocketAddress_methods_InetSocketAddress_INLRString_I_LRInetSocketAddress__args[] = 
{
  &InetSocketAddress_methods_InetSocketAddress_INLRString_I_LRInetSocketAddress__arg_hostname,
  &InetSocketAddress_methods_InetSocketAddress_INLRString_I_LRInetSocketAddress__arg_port,
  0
};

::acdk::lang::dmi::ClazzInfo* InetSocketAddress_methods_InetSocketAddress_INLRString_I_LRInetSocketAddress__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InetSocketAddress_method_InetSocketAddress_INLRString_I_LRInetSocketAddress_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "InetSocketAddress", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  InetSocketAddress::clazzInfo(), // return type
  "_2_InetSocketAddress", // alternative name of method
  -1, // altlabelHashCode
  InetSocketAddress_methods_InetSocketAddress_INLRString_I_LRInetSocketAddress__args, // the arguments
  0, //arguments count
  InetSocketAddress_methods_InetSocketAddress_INLRString_I_LRInetSocketAddress__exceptions, // the declared exceptions
  InetSocketAddress_MetainfoWrapper::InetSocketAddress_method_InetSocketAddress_INLRString_I_LRInetSocketAddress__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo InetSocketAddress_methods_equals_INLRObject__Z_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* InetSocketAddress_methods_equals_INLRObject__Z_args[] = 
{
  &InetSocketAddress_methods_equals_INLRObject__Z_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* InetSocketAddress_methods_equals_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InetSocketAddress_method_equals_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_equals", // alternative name of method
  -1, // altlabelHashCode
  InetSocketAddress_methods_equals_INLRObject__Z_args, // the arguments
  0, //arguments count
  InetSocketAddress_methods_equals_INLRObject__Z_exceptions, // the declared exceptions
  InetSocketAddress_MetainfoWrapper::InetSocketAddress_method_equals_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo InetSocketAddress_methods_equals_INLRInetSocketAddress__Z_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetSocketAddress::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* InetSocketAddress_methods_equals_INLRInetSocketAddress__Z_args[] = 
{
  &InetSocketAddress_methods_equals_INLRInetSocketAddress__Z_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* InetSocketAddress_methods_equals_INLRInetSocketAddress__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InetSocketAddress_method_equals_INLRInetSocketAddress__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_equals", // alternative name of method
  -1, // altlabelHashCode
  InetSocketAddress_methods_equals_INLRInetSocketAddress__Z_args, // the arguments
  0, //arguments count
  InetSocketAddress_methods_equals_INLRInetSocketAddress__Z_exceptions, // the declared exceptions
  InetSocketAddress_MetainfoWrapper::InetSocketAddress_method_equals_INLRInetSocketAddress__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InetSocketAddress_methods_getAddress__LRInetAddress__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InetSocketAddress_methods_getAddress__LRInetAddress__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InetSocketAddress_method_getAddress__LRInetAddress_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAddress", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetAddress::clazzInfo(), // return type
  "_5_getAddress", // alternative name of method
  -1, // altlabelHashCode
  InetSocketAddress_methods_getAddress__LRInetAddress__args, // the arguments
  0, //arguments count
  InetSocketAddress_methods_getAddress__LRInetAddress__exceptions, // the declared exceptions
  InetSocketAddress_MetainfoWrapper::InetSocketAddress_method_getAddress__LRInetAddress__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InetSocketAddress_methods_getHostName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InetSocketAddress_methods_getHostName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InetSocketAddress_method_getHostName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getHostName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_6_getHostName", // alternative name of method
  -1, // altlabelHashCode
  InetSocketAddress_methods_getHostName__LRString__args, // the arguments
  0, //arguments count
  InetSocketAddress_methods_getHostName__LRString__exceptions, // the declared exceptions
  InetSocketAddress_MetainfoWrapper::InetSocketAddress_method_getHostName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InetSocketAddress_methods_getPort__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InetSocketAddress_methods_getPort__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InetSocketAddress_method_getPort__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_getPort", // alternative name of method
  -1, // altlabelHashCode
  InetSocketAddress_methods_getPort__I_args, // the arguments
  0, //arguments count
  InetSocketAddress_methods_getPort__I_exceptions, // the declared exceptions
  InetSocketAddress_MetainfoWrapper::InetSocketAddress_method_getPort__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InetSocketAddress_methods_hashCode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InetSocketAddress_methods_hashCode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InetSocketAddress_method_hashCode__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hashCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_8_hashCode", // alternative name of method
  -1, // altlabelHashCode
  InetSocketAddress_methods_hashCode__I_args, // the arguments
  0, //arguments count
  InetSocketAddress_methods_hashCode__I_exceptions, // the declared exceptions
  InetSocketAddress_MetainfoWrapper::InetSocketAddress_method_hashCode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InetSocketAddress_methods_isUnresolved__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InetSocketAddress_methods_isUnresolved__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InetSocketAddress_method_isUnresolved__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isUnresolved", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_9_isUnresolved", // alternative name of method
  -1, // altlabelHashCode
  InetSocketAddress_methods_isUnresolved__Z_args, // the arguments
  0, //arguments count
  InetSocketAddress_methods_isUnresolved__Z_exceptions, // the declared exceptions
  InetSocketAddress_MetainfoWrapper::InetSocketAddress_method_isUnresolved__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InetSocketAddress_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InetSocketAddress_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InetSocketAddress_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_a_toString", // alternative name of method
  -1, // altlabelHashCode
  InetSocketAddress_methods_toString__LRString__args, // the arguments
  0, //arguments count
  InetSocketAddress_methods_toString__LRString__exceptions, // the declared exceptions
  InetSocketAddress_MetainfoWrapper::InetSocketAddress_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _InetSocketAddress_methods[] = 
{
  &InetSocketAddress_method_GetClass__L_acdk_lang_RClass_,
  &InetSocketAddress_method_InetSocketAddress_INLRInetAddress_I_LRInetSocketAddress_,
  &InetSocketAddress_method_InetSocketAddress_I_LRInetSocketAddress_,
  &InetSocketAddress_method_InetSocketAddress_INLRString_I_LRInetSocketAddress_,
  &InetSocketAddress_method_equals_INLRObject__Z,
  &InetSocketAddress_method_equals_INLRInetSocketAddress__Z,
  &InetSocketAddress_method_getAddress__LRInetAddress_,
  &InetSocketAddress_method_getHostName__LRString_,
  &InetSocketAddress_method_getPort__I,
  &InetSocketAddress_method_hashCode__I,
  &InetSocketAddress_method_isUnresolved__Z,
  &InetSocketAddress_method_toString__LRString_,
  0
};


struct InetSocketAddress_MetaInfoInitializer
{  InetSocketAddress_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = InetSocketAddress::clazzInfo();
    ci->fields =  _InetSocketAddress_fields;
    ci->methods =  _InetSocketAddress_methods;
    ci->_scopeParent = acdk_net_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
InetSocketAddress_MetaInfoInitializer InetSocketAddress_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 


//static
::acdk::lang::RObject
InetURLConnection_create_array(int length)
{
  return new ObjectArrayImpl<RInetURLConnection>(length);
}

//static
::acdk::lang::RObject
InetURLConnection_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class InetURLConnection_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InetURLConnection_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)InetURLConnection::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InetURLConnection_method_InetURLConnection_INLRURL__LRInetURLConnection__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new InetURLConnection(::acdk::lang::dmi::castTo< RURL>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InetURLConnection_method_connect__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InetURLConnection* This = dmi_cast<InetURLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->InetURLConnection::connect();
    else
        This->connect();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InetURLConnection_method_disconnect__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InetURLConnection* This = dmi_cast<InetURLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->InetURLConnection::disconnect();
    else
        This->disconnect();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InetURLConnection_method_getInputStream__LRReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InetURLConnection* This = dmi_cast<InetURLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->InetURLConnection::getInputStream();
    else
        ret = (::acdk::lang::RObject)This->getInputStream();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InetURLConnection_method_getOutputStream__LRWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InetURLConnection* This = dmi_cast<InetURLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->InetURLConnection::getOutputStream();
    else
        ret = (::acdk::lang::RObject)This->getOutputStream();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  InetURLConnection_fields__connected_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    InetURLConnection* This = dmi_cast<InetURLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_connected, flags);
    else
      This->_connected = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  InetURLConnection_fields__in_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    InetURLConnection* This = dmi_cast<InetURLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_in, flags);
    else
      This->_in = ::acdk::lang::dmi::castTo< RReader>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  InetURLConnection_fields__out_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    InetURLConnection* This = dmi_cast<InetURLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_out, flags);
    else
      This->_out = ::acdk::lang::dmi::castTo< RWriter>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  InetURLConnection_fields__socket_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    InetURLConnection* This = dmi_cast<InetURLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_socket, flags);
    else
      This->_socket = ::acdk::lang::dmi::castTo< RSocket>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo InetURLConnection_fields__connected = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_connected", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  InetURLConnection_MetainfoWrapper::InetURLConnection_fields__connected_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo InetURLConnection_fields__in = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_in", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReader::clazzInfo(),
  InetURLConnection_MetainfoWrapper::InetURLConnection_fields__in_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo InetURLConnection_fields__out = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_out", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriter::clazzInfo(),
  InetURLConnection_MetainfoWrapper::InetURLConnection_fields__out_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo InetURLConnection_fields__socket = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_socket", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSocket::clazzInfo(),
  InetURLConnection_MetainfoWrapper::InetURLConnection_fields__socket_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _InetURLConnection_fields[] = 
{
  &InetURLConnection_fields__connected,
  &InetURLConnection_fields__in,
  &InetURLConnection_fields__out,
  &InetURLConnection_fields__socket,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* InetURLConnection_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InetURLConnection_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InetURLConnection_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  InetURLConnection_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  InetURLConnection_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  InetURLConnection_MetainfoWrapper::InetURLConnection_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo InetURLConnection_methods_InetURLConnection_INLRURL__LRInetURLConnection__arg_url = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "url", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RURL::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* InetURLConnection_methods_InetURLConnection_INLRURL__LRInetURLConnection__args[] = 
{
  &InetURLConnection_methods_InetURLConnection_INLRURL__LRInetURLConnection__arg_url,
  0
};

::acdk::lang::dmi::ClazzInfo* InetURLConnection_methods_InetURLConnection_INLRURL__LRInetURLConnection__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InetURLConnection_method_InetURLConnection_INLRURL__LRInetURLConnection_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "InetURLConnection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  InetURLConnection::clazzInfo(), // return type
  "_0_InetURLConnection", // alternative name of method
  -1, // altlabelHashCode
  InetURLConnection_methods_InetURLConnection_INLRURL__LRInetURLConnection__args, // the arguments
  0, //arguments count
  InetURLConnection_methods_InetURLConnection_INLRURL__LRInetURLConnection__exceptions, // the declared exceptions
  InetURLConnection_MetainfoWrapper::InetURLConnection_method_InetURLConnection_INLRURL__LRInetURLConnection__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InetURLConnection_methods_connect__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InetURLConnection_methods_connect__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InetURLConnection_method_connect__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "connect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_connect", // alternative name of method
  -1, // altlabelHashCode
  InetURLConnection_methods_connect__V_args, // the arguments
  0, //arguments count
  InetURLConnection_methods_connect__V_exceptions, // the declared exceptions
  InetURLConnection_MetainfoWrapper::InetURLConnection_method_connect__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InetURLConnection_methods_disconnect__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InetURLConnection_methods_disconnect__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InetURLConnection_method_disconnect__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "disconnect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_disconnect", // alternative name of method
  -1, // altlabelHashCode
  InetURLConnection_methods_disconnect__V_args, // the arguments
  0, //arguments count
  InetURLConnection_methods_disconnect__V_exceptions, // the declared exceptions
  InetURLConnection_MetainfoWrapper::InetURLConnection_method_disconnect__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InetURLConnection_methods_getInputStream__LRReader__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InetURLConnection_methods_getInputStream__LRReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InetURLConnection_method_getInputStream__LRReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInputStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReader::clazzInfo(), // return type
  "_2_getInputStream", // alternative name of method
  -1, // altlabelHashCode
  InetURLConnection_methods_getInputStream__LRReader__args, // the arguments
  0, //arguments count
  InetURLConnection_methods_getInputStream__LRReader__exceptions, // the declared exceptions
  InetURLConnection_MetainfoWrapper::InetURLConnection_method_getInputStream__LRReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InetURLConnection_methods_getOutputStream__LRWriter__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InetURLConnection_methods_getOutputStream__LRWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InetURLConnection_method_getOutputStream__LRWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getOutputStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriter::clazzInfo(), // return type
  "_3_getOutputStream", // alternative name of method
  -1, // altlabelHashCode
  InetURLConnection_methods_getOutputStream__LRWriter__args, // the arguments
  0, //arguments count
  InetURLConnection_methods_getOutputStream__LRWriter__exceptions, // the declared exceptions
  InetURLConnection_MetainfoWrapper::InetURLConnection_method_getOutputStream__LRWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _InetURLConnection_methods[] = 
{
  &InetURLConnection_method_GetClass__L_acdk_lang_RClass_,
  &InetURLConnection_method_InetURLConnection_INLRURL__LRInetURLConnection_,
  &InetURLConnection_method_connect__V,
  &InetURLConnection_method_disconnect__V,
  &InetURLConnection_method_getInputStream__LRReader_,
  &InetURLConnection_method_getOutputStream__LRWriter_,
  0
};


struct InetURLConnection_MetaInfoInitializer
{  InetURLConnection_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = InetURLConnection::clazzInfo();
    ci->fields =  _InetURLConnection_fields;
    ci->methods =  _InetURLConnection_methods;
    ci->_scopeParent = acdk_net_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
InetURLConnection_MetaInfoInitializer InetURLConnection_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

using namespace acdk::io;

//static
::acdk::lang::RObject
MalformedURLException_create_array(int length)
{
  return new ObjectArrayImpl<RMalformedURLException>(length);
}

//static
::acdk::lang::RObject
MalformedURLException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class MalformedURLException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MalformedURLException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)MalformedURLException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MalformedURLException_method_MalformedURLException__LRMalformedURLException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new MalformedURLException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MalformedURLException_method_MalformedURLException_INLRString__LRMalformedURLException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new MalformedURLException(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
};


void ThrowException_MalformedURLException(IN(::acdk::lang::RThrowable) ex)
{
  throw RMalformedURLException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _MalformedURLException_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* MalformedURLException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MalformedURLException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MalformedURLException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  MalformedURLException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  MalformedURLException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  MalformedURLException_MetainfoWrapper::MalformedURLException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MalformedURLException_methods_MalformedURLException__LRMalformedURLException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MalformedURLException_methods_MalformedURLException__LRMalformedURLException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MalformedURLException_method_MalformedURLException__LRMalformedURLException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "MalformedURLException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  MalformedURLException::clazzInfo(), // return type
  "_0_MalformedURLException", // alternative name of method
  -1, // altlabelHashCode
  MalformedURLException_methods_MalformedURLException__LRMalformedURLException__args, // the arguments
  0, //arguments count
  MalformedURLException_methods_MalformedURLException__LRMalformedURLException__exceptions, // the declared exceptions
  MalformedURLException_MetainfoWrapper::MalformedURLException_method_MalformedURLException__LRMalformedURLException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MalformedURLException_methods_MalformedURLException_INLRString__LRMalformedURLException__arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MalformedURLException_methods_MalformedURLException_INLRString__LRMalformedURLException__args[] = 
{
  &MalformedURLException_methods_MalformedURLException_INLRString__LRMalformedURLException__arg_message,
  0
};

::acdk::lang::dmi::ClazzInfo* MalformedURLException_methods_MalformedURLException_INLRString__LRMalformedURLException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MalformedURLException_method_MalformedURLException_INLRString__LRMalformedURLException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "MalformedURLException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  MalformedURLException::clazzInfo(), // return type
  "_1_MalformedURLException", // alternative name of method
  -1, // altlabelHashCode
  MalformedURLException_methods_MalformedURLException_INLRString__LRMalformedURLException__args, // the arguments
  0, //arguments count
  MalformedURLException_methods_MalformedURLException_INLRString__LRMalformedURLException__exceptions, // the declared exceptions
  MalformedURLException_MetainfoWrapper::MalformedURLException_method_MalformedURLException_INLRString__LRMalformedURLException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _MalformedURLException_methods[] = 
{
  &MalformedURLException_method_GetClass__L_acdk_lang_RClass_,
  &MalformedURLException_method_MalformedURLException__LRMalformedURLException_,
  &MalformedURLException_method_MalformedURLException_INLRString__LRMalformedURLException_,
  0
};


struct MalformedURLException_MetaInfoInitializer
{  MalformedURLException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = MalformedURLException::clazzInfo();
    ci->fields =  _MalformedURLException_fields;
    ci->methods =  _MalformedURLException_methods;
    ci->_scopeParent = acdk_net_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
MalformedURLException_MetaInfoInitializer MalformedURLException_MetaInfoInitializer_staticinstance__;


struct MalformedURLException_clazzInfo_ClazzAttributesResInitializer2
{
  MalformedURLException_clazzInfo_ClazzAttributesResInitializer2()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)MalformedURLException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_MalformedURLException));
  }
};

MalformedURLException_clazzInfo_ClazzAttributesResInitializer2 MalformedURLException_clazzInfo_ClazzAttributesResInitializer2_instance;



} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

using namespace acdk::lang;
using namespace acdk::util;

//static
::acdk::lang::RObject
MimeTypeMapper_create_array(int length)
{
  return new ObjectArrayImpl<RMimeTypeMapper>(length);
}

//static
::acdk::lang::RObject
MimeTypeMapper_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class MimeTypeMapper_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MimeTypeMapper_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)MimeTypeMapper::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MimeTypeMapper_method_MimeTypeMapper__LRMimeTypeMapper__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new MimeTypeMapper();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MimeTypeMapper_method_getContentTypeFor_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MimeTypeMapper* This = dmi_cast<MimeTypeMapper>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->MimeTypeMapper::getContentTypeFor(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getContentTypeFor(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MimeTypeMapper_method_mime_types__LRHashMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)MimeTypeMapper::mime_types();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  MimeTypeMapper_fields___mime_types_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(MimeTypeMapper::__mime_types, flags);
    else
      MimeTypeMapper::__mime_types = ::acdk::lang::dmi::castTo< RHashMap>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo MimeTypeMapper_fields___mime_types = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "__mime_types", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RHashMap::clazzInfo(),
  MimeTypeMapper_MetainfoWrapper::MimeTypeMapper_fields___mime_types_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _MimeTypeMapper_fields[] = 
{
  &MimeTypeMapper_fields___mime_types,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* MimeTypeMapper_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MimeTypeMapper_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MimeTypeMapper_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  MimeTypeMapper_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  MimeTypeMapper_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  MimeTypeMapper_MetainfoWrapper::MimeTypeMapper_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MimeTypeMapper_methods_MimeTypeMapper__LRMimeTypeMapper__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MimeTypeMapper_methods_MimeTypeMapper__LRMimeTypeMapper__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MimeTypeMapper_method_MimeTypeMapper__LRMimeTypeMapper_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "MimeTypeMapper", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  MimeTypeMapper::clazzInfo(), // return type
  "_1_MimeTypeMapper", // alternative name of method
  -1, // altlabelHashCode
  MimeTypeMapper_methods_MimeTypeMapper__LRMimeTypeMapper__args, // the arguments
  0, //arguments count
  MimeTypeMapper_methods_MimeTypeMapper__LRMimeTypeMapper__exceptions, // the declared exceptions
  MimeTypeMapper_MetainfoWrapper::MimeTypeMapper_method_MimeTypeMapper__LRMimeTypeMapper__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MimeTypeMapper_methods_getContentTypeFor_INLRString__LRString__arg_filename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "filename", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MimeTypeMapper_methods_getContentTypeFor_INLRString__LRString__args[] = 
{
  &MimeTypeMapper_methods_getContentTypeFor_INLRString__LRString__arg_filename,
  0
};

::acdk::lang::dmi::ClazzInfo* MimeTypeMapper_methods_getContentTypeFor_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MimeTypeMapper_method_getContentTypeFor_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getContentTypeFor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_getContentTypeFor", // alternative name of method
  -1, // altlabelHashCode
  MimeTypeMapper_methods_getContentTypeFor_INLRString__LRString__args, // the arguments
  0, //arguments count
  MimeTypeMapper_methods_getContentTypeFor_INLRString__LRString__exceptions, // the declared exceptions
  MimeTypeMapper_MetainfoWrapper::MimeTypeMapper_method_getContentTypeFor_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MimeTypeMapper_methods_mime_types__LRHashMap__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MimeTypeMapper_methods_mime_types__LRHashMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MimeTypeMapper_method_mime_types__LRHashMap_ = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "mime_types", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RHashMap::clazzInfo(), // return type
  "_0_mime_types", // alternative name of method
  -1, // altlabelHashCode
  MimeTypeMapper_methods_mime_types__LRHashMap__args, // the arguments
  0, //arguments count
  MimeTypeMapper_methods_mime_types__LRHashMap__exceptions, // the declared exceptions
  MimeTypeMapper_MetainfoWrapper::MimeTypeMapper_method_mime_types__LRHashMap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _MimeTypeMapper_methods[] = 
{
  &MimeTypeMapper_method_GetClass__L_acdk_lang_RClass_,
  &MimeTypeMapper_method_MimeTypeMapper__LRMimeTypeMapper_,
  &MimeTypeMapper_method_getContentTypeFor_INLRString__LRString_,
  &MimeTypeMapper_method_mime_types__LRHashMap_,
  0
};


struct MimeTypeMapper_MetaInfoInitializer
{  MimeTypeMapper_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = MimeTypeMapper::clazzInfo();
    ci->fields =  _MimeTypeMapper_fields;
    ci->methods =  _MimeTypeMapper_methods;
    ci->_scopeParent = acdk_net_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
MimeTypeMapper_MetaInfoInitializer MimeTypeMapper_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 


//static
::acdk::lang::RObject
PasswordAuthentication_create_array(int length)
{
  return new ObjectArrayImpl<RPasswordAuthentication>(length);
}

//static
::acdk::lang::RObject
PasswordAuthentication_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class PasswordAuthentication_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PasswordAuthentication_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)PasswordAuthentication::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PasswordAuthentication_method_PasswordAuthentication_INLRString_INLRString__LRPasswordAuthentication__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new PasswordAuthentication(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PasswordAuthentication_method_getPassword__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PasswordAuthentication* This = dmi_cast<PasswordAuthentication>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->PasswordAuthentication::getPassword();
    else
        ret = (::acdk::lang::RObject)This->getPassword();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PasswordAuthentication_method_getUserName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PasswordAuthentication* This = dmi_cast<PasswordAuthentication>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->PasswordAuthentication::getUserName();
    else
        ret = (::acdk::lang::RObject)This->getUserName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  PasswordAuthentication_fields_password_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    PasswordAuthentication* This = dmi_cast<PasswordAuthentication>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->password, flags);
    else
      This->password = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  PasswordAuthentication_fields_username_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    PasswordAuthentication* This = dmi_cast<PasswordAuthentication>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->username, flags);
    else
      This->username = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo PasswordAuthentication_fields_password = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "password", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  PasswordAuthentication_MetainfoWrapper::PasswordAuthentication_fields_password_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo PasswordAuthentication_fields_username = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "username", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  PasswordAuthentication_MetainfoWrapper::PasswordAuthentication_fields_username_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _PasswordAuthentication_fields[] = 
{
  &PasswordAuthentication_fields_password,
  &PasswordAuthentication_fields_username,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* PasswordAuthentication_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* PasswordAuthentication_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PasswordAuthentication_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  PasswordAuthentication_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  PasswordAuthentication_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  PasswordAuthentication_MetainfoWrapper::PasswordAuthentication_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PasswordAuthentication_methods_PasswordAuthentication_INLRString_INLRString__LRPasswordAuthentication__arg_username = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "username", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo PasswordAuthentication_methods_PasswordAuthentication_INLRString_INLRString__LRPasswordAuthentication__arg_password = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "password", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PasswordAuthentication_methods_PasswordAuthentication_INLRString_INLRString__LRPasswordAuthentication__args[] = 
{
  &PasswordAuthentication_methods_PasswordAuthentication_INLRString_INLRString__LRPasswordAuthentication__arg_username,
  &PasswordAuthentication_methods_PasswordAuthentication_INLRString_INLRString__LRPasswordAuthentication__arg_password,
  0
};

::acdk::lang::dmi::ClazzInfo* PasswordAuthentication_methods_PasswordAuthentication_INLRString_INLRString__LRPasswordAuthentication__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PasswordAuthentication_method_PasswordAuthentication_INLRString_INLRString__LRPasswordAuthentication_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "PasswordAuthentication", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  PasswordAuthentication::clazzInfo(), // return type
  "_0_PasswordAuthentication", // alternative name of method
  -1, // altlabelHashCode
  PasswordAuthentication_methods_PasswordAuthentication_INLRString_INLRString__LRPasswordAuthentication__args, // the arguments
  0, //arguments count
  PasswordAuthentication_methods_PasswordAuthentication_INLRString_INLRString__LRPasswordAuthentication__exceptions, // the declared exceptions
  PasswordAuthentication_MetainfoWrapper::PasswordAuthentication_method_PasswordAuthentication_INLRString_INLRString__LRPasswordAuthentication__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* PasswordAuthentication_methods_getPassword__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* PasswordAuthentication_methods_getPassword__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PasswordAuthentication_method_getPassword__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPassword", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_getPassword", // alternative name of method
  -1, // altlabelHashCode
  PasswordAuthentication_methods_getPassword__LRString__args, // the arguments
  0, //arguments count
  PasswordAuthentication_methods_getPassword__LRString__exceptions, // the declared exceptions
  PasswordAuthentication_MetainfoWrapper::PasswordAuthentication_method_getPassword__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* PasswordAuthentication_methods_getUserName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* PasswordAuthentication_methods_getUserName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PasswordAuthentication_method_getUserName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getUserName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_getUserName", // alternative name of method
  -1, // altlabelHashCode
  PasswordAuthentication_methods_getUserName__LRString__args, // the arguments
  0, //arguments count
  PasswordAuthentication_methods_getUserName__LRString__exceptions, // the declared exceptions
  PasswordAuthentication_MetainfoWrapper::PasswordAuthentication_method_getUserName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _PasswordAuthentication_methods[] = 
{
  &PasswordAuthentication_method_GetClass__L_acdk_lang_RClass_,
  &PasswordAuthentication_method_PasswordAuthentication_INLRString_INLRString__LRPasswordAuthentication_,
  &PasswordAuthentication_method_getPassword__LRString_,
  &PasswordAuthentication_method_getUserName__LRString_,
  0
};


struct PasswordAuthentication_MetaInfoInitializer
{  PasswordAuthentication_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = PasswordAuthentication::clazzInfo();
    ci->fields =  _PasswordAuthentication_fields;
    ci->methods =  _PasswordAuthentication_methods;
    ci->_scopeParent = acdk_net_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
PasswordAuthentication_MetaInfoInitializer PasswordAuthentication_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

using namespace acdk::lang;
using namespace acdk::io;

//static
::acdk::lang::RObject
ProtocolException_create_array(int length)
{
  return new ObjectArrayImpl<RProtocolException>(length);
}

//static
::acdk::lang::RObject
ProtocolException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ProtocolException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ProtocolException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ProtocolException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ProtocolException_method_ProtocolException__LRProtocolException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ProtocolException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ProtocolException_method_ProtocolException_INLRString__LRProtocolException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ProtocolException(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
};


void ThrowException_ProtocolException(IN(::acdk::lang::RThrowable) ex)
{
  throw RProtocolException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _ProtocolException_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ProtocolException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ProtocolException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ProtocolException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ProtocolException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ProtocolException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ProtocolException_MetainfoWrapper::ProtocolException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ProtocolException_methods_ProtocolException__LRProtocolException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ProtocolException_methods_ProtocolException__LRProtocolException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ProtocolException_method_ProtocolException__LRProtocolException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ProtocolException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ProtocolException::clazzInfo(), // return type
  "_0_ProtocolException", // alternative name of method
  -1, // altlabelHashCode
  ProtocolException_methods_ProtocolException__LRProtocolException__args, // the arguments
  0, //arguments count
  ProtocolException_methods_ProtocolException__LRProtocolException__exceptions, // the declared exceptions
  ProtocolException_MetainfoWrapper::ProtocolException_method_ProtocolException__LRProtocolException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ProtocolException_methods_ProtocolException_INLRString__LRProtocolException__arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ProtocolException_methods_ProtocolException_INLRString__LRProtocolException__args[] = 
{
  &ProtocolException_methods_ProtocolException_INLRString__LRProtocolException__arg_message,
  0
};

::acdk::lang::dmi::ClazzInfo* ProtocolException_methods_ProtocolException_INLRString__LRProtocolException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ProtocolException_method_ProtocolException_INLRString__LRProtocolException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ProtocolException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ProtocolException::clazzInfo(), // return type
  "_1_ProtocolException", // alternative name of method
  -1, // altlabelHashCode
  ProtocolException_methods_ProtocolException_INLRString__LRProtocolException__args, // the arguments
  0, //arguments count
  ProtocolException_methods_ProtocolException_INLRString__LRProtocolException__exceptions, // the declared exceptions
  ProtocolException_MetainfoWrapper::ProtocolException_method_ProtocolException_INLRString__LRProtocolException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ProtocolException_methods[] = 
{
  &ProtocolException_method_GetClass__L_acdk_lang_RClass_,
  &ProtocolException_method_ProtocolException__LRProtocolException_,
  &ProtocolException_method_ProtocolException_INLRString__LRProtocolException_,
  0
};


struct ProtocolException_MetaInfoInitializer
{  ProtocolException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ProtocolException::clazzInfo();
    ci->fields =  _ProtocolException_fields;
    ci->methods =  _ProtocolException_methods;
    ci->_scopeParent = acdk_net_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ProtocolException_MetaInfoInitializer ProtocolException_MetaInfoInitializer_staticinstance__;


struct ProtocolException_clazzInfo_ClazzAttributesResInitializer3
{
  ProtocolException_clazzInfo_ClazzAttributesResInitializer3()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)ProtocolException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_ProtocolException));
  }
};

ProtocolException_clazzInfo_ClazzAttributesResInitializer3 ProtocolException_clazzInfo_ClazzAttributesResInitializer3_instance;



} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

using namespace acdk::lang;
using namespace acdk::io;

//static
::acdk::lang::RObject
ServerSocket_create_array(int length)
{
  return new ObjectArrayImpl<RServerSocket>(length);
}

//static
::acdk::lang::RObject
ServerSocket_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ServerSocket_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerSocket_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ServerSocket::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerSocket_method_ServerSocket_I_LRServerSocket__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ServerSocket(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerSocket_method_ServerSocket__LRServerSocket__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ServerSocket();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerSocket_method_ServerSocket_II_LRServerSocket__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ServerSocket(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerSocket_method_ServerSocket_IIINLRInetAddress__LRServerSocket__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ServerSocket(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< RInetAddress>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerSocket_method_accept_I_LRSocket__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerSocket* This = dmi_cast<ServerSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ServerSocket::accept(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->accept(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerSocket_method_accept__LRSocket__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerSocket* This = dmi_cast<ServerSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ServerSocket::accept();
    else
        ret = (::acdk::lang::RObject)This->accept();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerSocket_method_close__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerSocket* This = dmi_cast<ServerSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ServerSocket::close();
    else
        This->close();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerSocket_method_getInetAddress__LRInetAddress__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerSocket* This = dmi_cast<ServerSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ServerSocket::getInetAddress();
    else
        ret = (::acdk::lang::RObject)This->getInetAddress();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerSocket_method_getLocalPort__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerSocket* This = dmi_cast<ServerSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ServerSocket::getLocalPort();
    else
      ret = This->getLocalPort();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerSocket_method_getReuseAddress__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerSocket* This = dmi_cast<ServerSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ServerSocket::getReuseAddress();
    else
      ret = This->getReuseAddress();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerSocket_method_getSoTimeout__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerSocket* This = dmi_cast<ServerSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ServerSocket::getSoTimeout();
    else
      ret = This->getSoTimeout();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerSocket_method_getTcpNoDelay__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerSocket* This = dmi_cast<ServerSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ServerSocket::getTcpNoDelay();
    else
      ret = This->getTcpNoDelay();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerSocket_method_implAccept_INLRSocket_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerSocket* This = dmi_cast<ServerSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ServerSocket::implAccept(::acdk::lang::dmi::castTo< RSocket>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
      ret = This->implAccept(::acdk::lang::dmi::castTo< RSocket>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerSocket_method_setReuseAddress_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerSocket* This = dmi_cast<ServerSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ServerSocket::setReuseAddress(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->setReuseAddress(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerSocket_method_setSoTimeout_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerSocket* This = dmi_cast<ServerSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ServerSocket::setSoTimeout(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setSoTimeout(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerSocket_method_setSocketFactory_INLRSocketImplFactory__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerSocket::setSocketFactory(::acdk::lang::dmi::castTo< RSocketImplFactory>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerSocket_method_setTcpNoDelay_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerSocket* This = dmi_cast<ServerSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ServerSocket::setTcpNoDelay(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->setTcpNoDelay(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ServerSocket_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ServerSocket* This = dmi_cast<ServerSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ServerSocket::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ServerSocket_fields__backlog_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ServerSocket* This = dmi_cast<ServerSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_backlog, flags);
    else
      This->_backlog = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ServerSocket_fields__theSocket_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ServerSocket* This = dmi_cast<ServerSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_theSocket, flags);
    else
      This->_theSocket = ::acdk::lang::dmi::castTo< RSocketImpl>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ServerSocket_fields__backlog = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_backlog", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ServerSocket_MetainfoWrapper::ServerSocket_fields__backlog_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ServerSocket_fields__theSocket = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_theSocket", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSocketImpl::clazzInfo(),
  ServerSocket_MetainfoWrapper::ServerSocket_fields__theSocket_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ServerSocket_fields[] = 
{
  &ServerSocket_fields__backlog,
  &ServerSocket_fields__theSocket,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerSocket_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ServerSocket_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerSocket_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_i_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ServerSocket_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ServerSocket_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ServerSocket_MetainfoWrapper::ServerSocket_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerSocket_methods_ServerSocket_I_LRServerSocket__arg_port = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "port", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerSocket_methods_ServerSocket_I_LRServerSocket__args[] = 
{
  &ServerSocket_methods_ServerSocket_I_LRServerSocket__arg_port,
  0
};

::acdk::lang::dmi::ClazzInfo* ServerSocket_methods_ServerSocket_I_LRServerSocket__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerSocket_method_ServerSocket_I_LRServerSocket_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ServerSocket", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ServerSocket::clazzInfo(), // return type
  "_0_ServerSocket", // alternative name of method
  -1, // altlabelHashCode
  ServerSocket_methods_ServerSocket_I_LRServerSocket__args, // the arguments
  0, //arguments count
  ServerSocket_methods_ServerSocket_I_LRServerSocket__exceptions, // the declared exceptions
  ServerSocket_MetainfoWrapper::ServerSocket_method_ServerSocket_I_LRServerSocket__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerSocket_methods_ServerSocket__LRServerSocket__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ServerSocket_methods_ServerSocket__LRServerSocket__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerSocket_method_ServerSocket__LRServerSocket_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ServerSocket", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ServerSocket::clazzInfo(), // return type
  "_1_ServerSocket", // alternative name of method
  -1, // altlabelHashCode
  ServerSocket_methods_ServerSocket__LRServerSocket__args, // the arguments
  0, //arguments count
  ServerSocket_methods_ServerSocket__LRServerSocket__exceptions, // the declared exceptions
  ServerSocket_MetainfoWrapper::ServerSocket_method_ServerSocket__LRServerSocket__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerSocket_methods_ServerSocket_II_LRServerSocket__arg_port = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "port", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerSocket_methods_ServerSocket_II_LRServerSocket__arg_backlog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "backlog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerSocket_methods_ServerSocket_II_LRServerSocket__args[] = 
{
  &ServerSocket_methods_ServerSocket_II_LRServerSocket__arg_port,
  &ServerSocket_methods_ServerSocket_II_LRServerSocket__arg_backlog,
  0
};

::acdk::lang::dmi::ClazzInfo* ServerSocket_methods_ServerSocket_II_LRServerSocket__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerSocket_method_ServerSocket_II_LRServerSocket_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ServerSocket", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ServerSocket::clazzInfo(), // return type
  "_2_ServerSocket", // alternative name of method
  -1, // altlabelHashCode
  ServerSocket_methods_ServerSocket_II_LRServerSocket__args, // the arguments
  0, //arguments count
  ServerSocket_methods_ServerSocket_II_LRServerSocket__exceptions, // the declared exceptions
  ServerSocket_MetainfoWrapper::ServerSocket_method_ServerSocket_II_LRServerSocket__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerSocket_methods_ServerSocket_IIINLRInetAddress__LRServerSocket__arg_port = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "port", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerSocket_methods_ServerSocket_IIINLRInetAddress__LRServerSocket__arg_backlog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "backlog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerSocket_methods_ServerSocket_IIINLRInetAddress__LRServerSocket__arg_bindAddr = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bindAddr", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetAddress::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerSocket_methods_ServerSocket_IIINLRInetAddress__LRServerSocket__args[] = 
{
  &ServerSocket_methods_ServerSocket_IIINLRInetAddress__LRServerSocket__arg_port,
  &ServerSocket_methods_ServerSocket_IIINLRInetAddress__LRServerSocket__arg_backlog,
  &ServerSocket_methods_ServerSocket_IIINLRInetAddress__LRServerSocket__arg_bindAddr,
  0
};

::acdk::lang::dmi::ClazzInfo* ServerSocket_methods_ServerSocket_IIINLRInetAddress__LRServerSocket__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerSocket_method_ServerSocket_IIINLRInetAddress__LRServerSocket_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ServerSocket", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ServerSocket::clazzInfo(), // return type
  "_3_ServerSocket", // alternative name of method
  -1, // altlabelHashCode
  ServerSocket_methods_ServerSocket_IIINLRInetAddress__LRServerSocket__args, // the arguments
  0, //arguments count
  ServerSocket_methods_ServerSocket_IIINLRInetAddress__LRServerSocket__exceptions, // the declared exceptions
  ServerSocket_MetainfoWrapper::ServerSocket_method_ServerSocket_IIINLRInetAddress__LRServerSocket__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerSocket_methods_accept_I_LRSocket__arg_timeOut = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "timeOut", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerSocket_methods_accept_I_LRSocket__args[] = 
{
  &ServerSocket_methods_accept_I_LRSocket__arg_timeOut,
  0
};

::acdk::lang::dmi::ClazzInfo* ServerSocket_methods_accept_I_LRSocket__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerSocket_method_accept_I_LRSocket_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "accept", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSocket::clazzInfo(), // return type
  "_4_accept", // alternative name of method
  -1, // altlabelHashCode
  ServerSocket_methods_accept_I_LRSocket__args, // the arguments
  0, //arguments count
  ServerSocket_methods_accept_I_LRSocket__exceptions, // the declared exceptions
  ServerSocket_MetainfoWrapper::ServerSocket_method_accept_I_LRSocket__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerSocket_methods_accept__LRSocket__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ServerSocket_methods_accept__LRSocket__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerSocket_method_accept__LRSocket_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "accept", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSocket::clazzInfo(), // return type
  "_5_accept", // alternative name of method
  -1, // altlabelHashCode
  ServerSocket_methods_accept__LRSocket__args, // the arguments
  0, //arguments count
  ServerSocket_methods_accept__LRSocket__exceptions, // the declared exceptions
  ServerSocket_MetainfoWrapper::ServerSocket_method_accept__LRSocket__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerSocket_methods_close__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ServerSocket_methods_close__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerSocket_method_close__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "close", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_close", // alternative name of method
  -1, // altlabelHashCode
  ServerSocket_methods_close__V_args, // the arguments
  0, //arguments count
  ServerSocket_methods_close__V_exceptions, // the declared exceptions
  ServerSocket_MetainfoWrapper::ServerSocket_method_close__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerSocket_methods_getInetAddress__LRInetAddress__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ServerSocket_methods_getInetAddress__LRInetAddress__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerSocket_method_getInetAddress__LRInetAddress_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInetAddress", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetAddress::clazzInfo(), // return type
  "_7_getInetAddress", // alternative name of method
  -1, // altlabelHashCode
  ServerSocket_methods_getInetAddress__LRInetAddress__args, // the arguments
  0, //arguments count
  ServerSocket_methods_getInetAddress__LRInetAddress__exceptions, // the declared exceptions
  ServerSocket_MetainfoWrapper::ServerSocket_method_getInetAddress__LRInetAddress__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerSocket_methods_getLocalPort__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ServerSocket_methods_getLocalPort__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerSocket_method_getLocalPort__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLocalPort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_8_getLocalPort", // alternative name of method
  -1, // altlabelHashCode
  ServerSocket_methods_getLocalPort__I_args, // the arguments
  0, //arguments count
  ServerSocket_methods_getLocalPort__I_exceptions, // the declared exceptions
  ServerSocket_MetainfoWrapper::ServerSocket_method_getLocalPort__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerSocket_methods_getReuseAddress__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ServerSocket_methods_getReuseAddress__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerSocket_method_getReuseAddress__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getReuseAddress", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_c_getReuseAddress", // alternative name of method
  -1, // altlabelHashCode
  ServerSocket_methods_getReuseAddress__Z_args, // the arguments
  0, //arguments count
  ServerSocket_methods_getReuseAddress__Z_exceptions, // the declared exceptions
  ServerSocket_MetainfoWrapper::ServerSocket_method_getReuseAddress__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerSocket_methods_getSoTimeout__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ServerSocket_methods_getSoTimeout__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerSocket_method_getSoTimeout__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSoTimeout", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_9_getSoTimeout", // alternative name of method
  -1, // altlabelHashCode
  ServerSocket_methods_getSoTimeout__I_args, // the arguments
  0, //arguments count
  ServerSocket_methods_getSoTimeout__I_exceptions, // the declared exceptions
  ServerSocket_MetainfoWrapper::ServerSocket_method_getSoTimeout__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerSocket_methods_getTcpNoDelay__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ServerSocket_methods_getTcpNoDelay__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerSocket_method_getTcpNoDelay__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTcpNoDelay", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_e_getTcpNoDelay", // alternative name of method
  -1, // altlabelHashCode
  ServerSocket_methods_getTcpNoDelay__Z_args, // the arguments
  0, //arguments count
  ServerSocket_methods_getTcpNoDelay__Z_exceptions, // the declared exceptions
  ServerSocket_MetainfoWrapper::ServerSocket_method_getTcpNoDelay__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerSocket_methods_implAccept_INLRSocket_I_Z_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSocket::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerSocket_methods_implAccept_INLRSocket_I_Z_arg_timeOut = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "timeOut", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerSocket_methods_implAccept_INLRSocket_I_Z_args[] = 
{
  &ServerSocket_methods_implAccept_INLRSocket_I_Z_arg_s,
  &ServerSocket_methods_implAccept_INLRSocket_I_Z_arg_timeOut,
  0
};

::acdk::lang::dmi::ClazzInfo* ServerSocket_methods_implAccept_INLRSocket_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerSocket_method_implAccept_INLRSocket_I_Z = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "implAccept", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_h_implAccept", // alternative name of method
  -1, // altlabelHashCode
  ServerSocket_methods_implAccept_INLRSocket_I_Z_args, // the arguments
  0, //arguments count
  ServerSocket_methods_implAccept_INLRSocket_I_Z_exceptions, // the declared exceptions
  ServerSocket_MetainfoWrapper::ServerSocket_method_implAccept_INLRSocket_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerSocket_methods_setReuseAddress_Z_V_arg_on = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "on", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerSocket_methods_setReuseAddress_Z_V_args[] = 
{
  &ServerSocket_methods_setReuseAddress_Z_V_arg_on,
  0
};

::acdk::lang::dmi::ClazzInfo* ServerSocket_methods_setReuseAddress_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerSocket_method_setReuseAddress_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setReuseAddress", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_setReuseAddress", // alternative name of method
  -1, // altlabelHashCode
  ServerSocket_methods_setReuseAddress_Z_V_args, // the arguments
  0, //arguments count
  ServerSocket_methods_setReuseAddress_Z_V_exceptions, // the declared exceptions
  ServerSocket_MetainfoWrapper::ServerSocket_method_setReuseAddress_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerSocket_methods_setSoTimeout_I_V_arg_timeout = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "timeout", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerSocket_methods_setSoTimeout_I_V_args[] = 
{
  &ServerSocket_methods_setSoTimeout_I_V_arg_timeout,
  0
};

::acdk::lang::dmi::ClazzInfo* ServerSocket_methods_setSoTimeout_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerSocket_method_setSoTimeout_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSoTimeout", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_setSoTimeout", // alternative name of method
  -1, // altlabelHashCode
  ServerSocket_methods_setSoTimeout_I_V_args, // the arguments
  0, //arguments count
  ServerSocket_methods_setSoTimeout_I_V_exceptions, // the declared exceptions
  ServerSocket_MetainfoWrapper::ServerSocket_method_setSoTimeout_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerSocket_methods_setSocketFactory_INLRSocketImplFactory__V_arg_fac = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fac", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSocketImplFactory::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerSocket_methods_setSocketFactory_INLRSocketImplFactory__V_args[] = 
{
  &ServerSocket_methods_setSocketFactory_INLRSocketImplFactory__V_arg_fac,
  0
};

::acdk::lang::dmi::ClazzInfo* ServerSocket_methods_setSocketFactory_INLRSocketImplFactory__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerSocket_method_setSocketFactory_INLRSocketImplFactory__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSocketFactory", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_setSocketFactory", // alternative name of method
  -1, // altlabelHashCode
  ServerSocket_methods_setSocketFactory_INLRSocketImplFactory__V_args, // the arguments
  0, //arguments count
  ServerSocket_methods_setSocketFactory_INLRSocketImplFactory__V_exceptions, // the declared exceptions
  ServerSocket_MetainfoWrapper::ServerSocket_method_setSocketFactory_INLRSocketImplFactory__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ServerSocket_methods_setTcpNoDelay_Z_V_arg_on = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "on", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerSocket_methods_setTcpNoDelay_Z_V_args[] = 
{
  &ServerSocket_methods_setTcpNoDelay_Z_V_arg_on,
  0
};

::acdk::lang::dmi::ClazzInfo* ServerSocket_methods_setTcpNoDelay_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerSocket_method_setTcpNoDelay_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTcpNoDelay", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_setTcpNoDelay", // alternative name of method
  -1, // altlabelHashCode
  ServerSocket_methods_setTcpNoDelay_Z_V_args, // the arguments
  0, //arguments count
  ServerSocket_methods_setTcpNoDelay_Z_V_exceptions, // the declared exceptions
  ServerSocket_MetainfoWrapper::ServerSocket_method_setTcpNoDelay_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ServerSocket_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ServerSocket_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ServerSocket_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_g_toString", // alternative name of method
  -1, // altlabelHashCode
  ServerSocket_methods_toString__LRString__args, // the arguments
  0, //arguments count
  ServerSocket_methods_toString__LRString__exceptions, // the declared exceptions
  ServerSocket_MetainfoWrapper::ServerSocket_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ServerSocket_methods[] = 
{
  &ServerSocket_method_GetClass__L_acdk_lang_RClass_,
  &ServerSocket_method_ServerSocket_I_LRServerSocket_,
  &ServerSocket_method_ServerSocket__LRServerSocket_,
  &ServerSocket_method_ServerSocket_II_LRServerSocket_,
  &ServerSocket_method_ServerSocket_IIINLRInetAddress__LRServerSocket_,
  &ServerSocket_method_accept_I_LRSocket_,
  &ServerSocket_method_accept__LRSocket_,
  &ServerSocket_method_close__V,
  &ServerSocket_method_getInetAddress__LRInetAddress_,
  &ServerSocket_method_getLocalPort__I,
  &ServerSocket_method_getReuseAddress__Z,
  &ServerSocket_method_getSoTimeout__I,
  &ServerSocket_method_getTcpNoDelay__Z,
  &ServerSocket_method_implAccept_INLRSocket_I_Z,
  &ServerSocket_method_setReuseAddress_Z_V,
  &ServerSocket_method_setSoTimeout_I_V,
  &ServerSocket_method_setSocketFactory_INLRSocketImplFactory__V,
  &ServerSocket_method_setTcpNoDelay_Z_V,
  &ServerSocket_method_toString__LRString_,
  0
};


struct ServerSocket_MetaInfoInitializer
{  ServerSocket_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ServerSocket::clazzInfo();
    ci->fields =  _ServerSocket_fields;
    ci->methods =  _ServerSocket_methods;
    ci->_scopeParent = acdk_net_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ServerSocket_MetaInfoInitializer ServerSocket_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

using namespace acdk::lang;
using namespace acdk::io;

//static
::acdk::lang::RObject
Socket_create_array(int length)
{
  return new ObjectArrayImpl<RSocket>(length);
}

//static
::acdk::lang::RObject
Socket_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Socket_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Socket_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Socket::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Socket_method_Socket_INLRSocketImpl__LRSocket__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Socket(::acdk::lang::dmi::castTo< RSocketImpl>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Socket_method_Socket_Z_LRSocket__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Socket(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Socket_method_Socket__LRSocket__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Socket();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Socket_method_Socket_INLRInetAddress_IZ_LRSocket__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Socket(::acdk::lang::dmi::castTo< RInetAddress>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< bool>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Socket_method_Socket_INLRInetAddress_I_LRSocket__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Socket(::acdk::lang::dmi::castTo< RInetAddress>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Socket_method_Socket_INLRString_IZ_LRSocket__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Socket(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< bool>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Socket_method_Socket_INLRString_I_LRSocket__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Socket(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Socket_method__init__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Socket::_init();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Socket_method_close__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Socket* This = dmi_cast<Socket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Socket::close();
    else
        This->close();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Socket_method_connect_INLRInetAddress_II_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Socket* This = dmi_cast<Socket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Socket::connect(::acdk::lang::dmi::castTo< RInetAddress>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    else
      ret = This->connect(::acdk::lang::dmi::castTo< RInetAddress>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Socket_method_connect_INLRString_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Socket* This = dmi_cast<Socket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Socket::connect(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
      ret = This->connect(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Socket_method_connect_INLRInetAddress_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Socket* This = dmi_cast<Socket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Socket::connect(::acdk::lang::dmi::castTo< RInetAddress>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
      ret = This->connect(::acdk::lang::dmi::castTo< RInetAddress>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Socket_method_connect_INLRString_II_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Socket* This = dmi_cast<Socket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Socket::connect(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    else
      ret = This->connect(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Socket_method_getInetAddress__LRInetAddress__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Socket* This = dmi_cast<Socket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Socket::getInetAddress();
    else
        ret = (::acdk::lang::RObject)This->getInetAddress();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Socket_method_getInputStream__LRReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Socket* This = dmi_cast<Socket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Socket::getInputStream();
    else
        ret = (::acdk::lang::RObject)This->getInputStream();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Socket_method_getKeepAlive__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Socket* This = dmi_cast<Socket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Socket::getKeepAlive();
    else
      ret = This->getKeepAlive();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Socket_method_getLocalAddress__LRInetAddress__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Socket* This = dmi_cast<Socket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Socket::getLocalAddress();
    else
        ret = (::acdk::lang::RObject)This->getLocalAddress();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Socket_method_getLocalPort__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Socket* This = dmi_cast<Socket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Socket::getLocalPort();
    else
      ret = This->getLocalPort();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Socket_method_getOutputStream__LRWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Socket* This = dmi_cast<Socket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Socket::getOutputStream();
    else
        ret = (::acdk::lang::RObject)This->getOutputStream();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Socket_method_getPort__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Socket* This = dmi_cast<Socket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Socket::getPort();
    else
      ret = This->getPort();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Socket_method_getReader__LRReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Socket* This = dmi_cast<Socket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Socket::getReader();
    else
        ret = (::acdk::lang::RObject)This->getReader();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Socket_method_getReceiveBufferSize__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Socket* This = dmi_cast<Socket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Socket::getReceiveBufferSize();
    else
      ret = This->getReceiveBufferSize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Socket_method_getReuseAddress__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Socket* This = dmi_cast<Socket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Socket::getReuseAddress();
    else
      ret = This->getReuseAddress();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Socket_method_getSendBufferSize__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Socket* This = dmi_cast<Socket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Socket::getSendBufferSize();
    else
      ret = This->getSendBufferSize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Socket_method_getSoLinger__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Socket* This = dmi_cast<Socket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Socket::getSoLinger();
    else
      ret = This->getSoLinger();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Socket_method_getSoTimeout__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Socket* This = dmi_cast<Socket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Socket::getSoTimeout();
    else
      ret = This->getSoTimeout();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Socket_method_getTcpNoDelay__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Socket* This = dmi_cast<Socket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Socket::getTcpNoDelay();
    else
      ret = This->getTcpNoDelay();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Socket_method_getWriter__LRWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Socket* This = dmi_cast<Socket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Socket::getWriter();
    else
        ret = (::acdk::lang::RObject)This->getWriter();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Socket_method_setKeepAlive_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Socket* This = dmi_cast<Socket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Socket::setKeepAlive(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->setKeepAlive(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Socket_method_setReceiveBufferSize_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Socket* This = dmi_cast<Socket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Socket::setReceiveBufferSize(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setReceiveBufferSize(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Socket_method_setReuseAddress_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Socket* This = dmi_cast<Socket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Socket::setReuseAddress(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->setReuseAddress(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Socket_method_setSendBufferSize_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Socket* This = dmi_cast<Socket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Socket::setSendBufferSize(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setSendBufferSize(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Socket_method_setSoLinger_ZI_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Socket* This = dmi_cast<Socket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Socket::setSoLinger(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->setSoLinger(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Socket_method_setSoTimeout_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Socket* This = dmi_cast<Socket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Socket::setSoTimeout(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setSoTimeout(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Socket_method_setSocketImplFactory_INLRSocketImplFactory__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Socket::setSocketImplFactory(::acdk::lang::dmi::castTo< RSocketImplFactory>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Socket_method_setTcpNoDelay_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Socket* This = dmi_cast<Socket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Socket::setTcpNoDelay(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->setTcpNoDelay(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Socket_method_shutdownInput__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Socket* This = dmi_cast<Socket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Socket::shutdownInput();
    else
        This->shutdownInput();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Socket_method_shutdownOutput__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Socket* This = dmi_cast<Socket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Socket::shutdownOutput();
    else
        This->shutdownOutput();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Socket_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Socket* This = dmi_cast<Socket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Socket::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Socket_fields__asStream_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Socket* This = dmi_cast<Socket>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_asStream, flags);
    else
      This->_asStream = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Socket_fields__factorychanged_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Socket::_factorychanged, flags);
    else
      Socket::_factorychanged = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Socket_fields__initialised_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Socket::_initialised, flags);
    else
      Socket::_initialised = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Socket_fields__opened_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Socket* This = dmi_cast<Socket>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_opened, flags);
    else
      This->_opened = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Socket_fields__theFactory_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Socket::_theFactory, flags);
    else
      Socket::_theFactory = ::acdk::lang::dmi::castTo< RSocketImplFactory>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Socket_fields__theSocket_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Socket* This = dmi_cast<Socket>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_theSocket, flags);
    else
      This->_theSocket = ::acdk::lang::dmi::castTo< RSocketImpl>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo Socket_fields__asStream = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_asStream", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  Socket_MetainfoWrapper::Socket_fields__asStream_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Socket_fields__factorychanged = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_factorychanged", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  Socket_MetainfoWrapper::Socket_fields__factorychanged_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Socket_fields__initialised = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_initialised", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  Socket_MetainfoWrapper::Socket_fields__initialised_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Socket_fields__opened = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_opened", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  Socket_MetainfoWrapper::Socket_fields__opened_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Socket_fields__theFactory = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_theFactory", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSocketImplFactory::clazzInfo(),
  Socket_MetainfoWrapper::Socket_fields__theFactory_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Socket_fields__theSocket = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_theSocket", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSocketImpl::clazzInfo(),
  Socket_MetainfoWrapper::Socket_fields__theSocket_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _Socket_fields[] = 
{
  &Socket_fields__asStream,
  &Socket_fields__factorychanged,
  &Socket_fields__initialised,
  &Socket_fields__opened,
  &Socket_fields__theFactory,
  &Socket_fields__theSocket,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Socket_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Socket_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Socket_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_D_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Socket_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Socket_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Socket_MetainfoWrapper::Socket_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Socket_methods_Socket_INLRSocketImpl__LRSocket__arg_impl = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "impl", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSocketImpl::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Socket_methods_Socket_INLRSocketImpl__LRSocket__args[] = 
{
  &Socket_methods_Socket_INLRSocketImpl__LRSocket__arg_impl,
  0
};

::acdk::lang::dmi::ClazzInfo* Socket_methods_Socket_INLRSocketImpl__LRSocket__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Socket_method_Socket_INLRSocketImpl__LRSocket_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Socket", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Socket::clazzInfo(), // return type
  "_0_Socket", // alternative name of method
  -1, // altlabelHashCode
  Socket_methods_Socket_INLRSocketImpl__LRSocket__args, // the arguments
  0, //arguments count
  Socket_methods_Socket_INLRSocketImpl__LRSocket__exceptions, // the declared exceptions
  Socket_MetainfoWrapper::Socket_method_Socket_INLRSocketImpl__LRSocket__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Socket_methods_Socket_Z_LRSocket__arg_asStream = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "asStream", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Socket_methods_Socket_Z_LRSocket__args[] = 
{
  &Socket_methods_Socket_Z_LRSocket__arg_asStream,
  0
};

::acdk::lang::dmi::ClazzInfo* Socket_methods_Socket_Z_LRSocket__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Socket_method_Socket_Z_LRSocket_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Socket", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Socket::clazzInfo(), // return type
  "_1_Socket", // alternative name of method
  -1, // altlabelHashCode
  Socket_methods_Socket_Z_LRSocket__args, // the arguments
  0, //arguments count
  Socket_methods_Socket_Z_LRSocket__exceptions, // the declared exceptions
  Socket_MetainfoWrapper::Socket_method_Socket_Z_LRSocket__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Socket_methods_Socket__LRSocket__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Socket_methods_Socket__LRSocket__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Socket_method_Socket__LRSocket_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Socket", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Socket::clazzInfo(), // return type
  "_2_Socket", // alternative name of method
  -1, // altlabelHashCode
  Socket_methods_Socket__LRSocket__args, // the arguments
  0, //arguments count
  Socket_methods_Socket__LRSocket__exceptions, // the declared exceptions
  Socket_MetainfoWrapper::Socket_method_Socket__LRSocket__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Socket_methods_Socket_INLRInetAddress_IZ_LRSocket__arg_address = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "address", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetAddress::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Socket_methods_Socket_INLRInetAddress_IZ_LRSocket__arg_port = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "port", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Socket_methods_Socket_INLRInetAddress_IZ_LRSocket__arg_asStream = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "asStream", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Socket_methods_Socket_INLRInetAddress_IZ_LRSocket__args[] = 
{
  &Socket_methods_Socket_INLRInetAddress_IZ_LRSocket__arg_address,
  &Socket_methods_Socket_INLRInetAddress_IZ_LRSocket__arg_port,
  &Socket_methods_Socket_INLRInetAddress_IZ_LRSocket__arg_asStream,
  0
};

::acdk::lang::dmi::ClazzInfo* Socket_methods_Socket_INLRInetAddress_IZ_LRSocket__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Socket_method_Socket_INLRInetAddress_IZ_LRSocket_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Socket", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Socket::clazzInfo(), // return type
  "_3_Socket", // alternative name of method
  -1, // altlabelHashCode
  Socket_methods_Socket_INLRInetAddress_IZ_LRSocket__args, // the arguments
  0, //arguments count
  Socket_methods_Socket_INLRInetAddress_IZ_LRSocket__exceptions, // the declared exceptions
  Socket_MetainfoWrapper::Socket_method_Socket_INLRInetAddress_IZ_LRSocket__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Socket_methods_Socket_INLRInetAddress_I_LRSocket__arg_address = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "address", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetAddress::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Socket_methods_Socket_INLRInetAddress_I_LRSocket__arg_port = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "port", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Socket_methods_Socket_INLRInetAddress_I_LRSocket__args[] = 
{
  &Socket_methods_Socket_INLRInetAddress_I_LRSocket__arg_address,
  &Socket_methods_Socket_INLRInetAddress_I_LRSocket__arg_port,
  0
};

::acdk::lang::dmi::ClazzInfo* Socket_methods_Socket_INLRInetAddress_I_LRSocket__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Socket_method_Socket_INLRInetAddress_I_LRSocket_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Socket", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Socket::clazzInfo(), // return type
  "_4_Socket", // alternative name of method
  -1, // altlabelHashCode
  Socket_methods_Socket_INLRInetAddress_I_LRSocket__args, // the arguments
  0, //arguments count
  Socket_methods_Socket_INLRInetAddress_I_LRSocket__exceptions, // the declared exceptions
  Socket_MetainfoWrapper::Socket_method_Socket_INLRInetAddress_I_LRSocket__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Socket_methods_Socket_INLRString_IZ_LRSocket__arg_host = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "host", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Socket_methods_Socket_INLRString_IZ_LRSocket__arg_port = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "port", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Socket_methods_Socket_INLRString_IZ_LRSocket__arg_asStream = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "asStream", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Socket_methods_Socket_INLRString_IZ_LRSocket__args[] = 
{
  &Socket_methods_Socket_INLRString_IZ_LRSocket__arg_host,
  &Socket_methods_Socket_INLRString_IZ_LRSocket__arg_port,
  &Socket_methods_Socket_INLRString_IZ_LRSocket__arg_asStream,
  0
};

::acdk::lang::dmi::ClazzInfo* Socket_methods_Socket_INLRString_IZ_LRSocket__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Socket_method_Socket_INLRString_IZ_LRSocket_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Socket", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Socket::clazzInfo(), // return type
  "_5_Socket", // alternative name of method
  -1, // altlabelHashCode
  Socket_methods_Socket_INLRString_IZ_LRSocket__args, // the arguments
  0, //arguments count
  Socket_methods_Socket_INLRString_IZ_LRSocket__exceptions, // the declared exceptions
  Socket_MetainfoWrapper::Socket_method_Socket_INLRString_IZ_LRSocket__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Socket_methods_Socket_INLRString_I_LRSocket__arg_host = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "host", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Socket_methods_Socket_INLRString_I_LRSocket__arg_port = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "port", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Socket_methods_Socket_INLRString_I_LRSocket__args[] = 
{
  &Socket_methods_Socket_INLRString_I_LRSocket__arg_host,
  &Socket_methods_Socket_INLRString_I_LRSocket__arg_port,
  0
};

::acdk::lang::dmi::ClazzInfo* Socket_methods_Socket_INLRString_I_LRSocket__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Socket_method_Socket_INLRString_I_LRSocket_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Socket", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Socket::clazzInfo(), // return type
  "_6_Socket", // alternative name of method
  -1, // altlabelHashCode
  Socket_methods_Socket_INLRString_I_LRSocket__args, // the arguments
  0, //arguments count
  Socket_methods_Socket_INLRString_I_LRSocket__exceptions, // the declared exceptions
  Socket_MetainfoWrapper::Socket_method_Socket_INLRString_I_LRSocket__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Socket_methods__init__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Socket_methods__init__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Socket_method__init__V = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_init", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_C__init", // alternative name of method
  -1, // altlabelHashCode
  Socket_methods__init__V_args, // the arguments
  0, //arguments count
  Socket_methods__init__V_exceptions, // the declared exceptions
  Socket_MetainfoWrapper::Socket_method__init__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Socket_methods_close__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Socket_methods_close__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Socket_method_close__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "close", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_close", // alternative name of method
  -1, // altlabelHashCode
  Socket_methods_close__V_args, // the arguments
  0, //arguments count
  Socket_methods_close__V_exceptions, // the declared exceptions
  Socket_MetainfoWrapper::Socket_method_close__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Socket_methods_connect_INLRInetAddress_II_Z_arg_address = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "address", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetAddress::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Socket_methods_connect_INLRInetAddress_II_Z_arg_port = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "port", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Socket_methods_connect_INLRInetAddress_II_Z_arg_timeOut = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "timeOut", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Socket_methods_connect_INLRInetAddress_II_Z_args[] = 
{
  &Socket_methods_connect_INLRInetAddress_II_Z_arg_address,
  &Socket_methods_connect_INLRInetAddress_II_Z_arg_port,
  &Socket_methods_connect_INLRInetAddress_II_Z_arg_timeOut,
  0
};

::acdk::lang::dmi::ClazzInfo* Socket_methods_connect_INLRInetAddress_II_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Socket_method_connect_INLRInetAddress_II_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "connect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_connect", // alternative name of method
  -1, // altlabelHashCode
  Socket_methods_connect_INLRInetAddress_II_Z_args, // the arguments
  0, //arguments count
  Socket_methods_connect_INLRInetAddress_II_Z_exceptions, // the declared exceptions
  Socket_MetainfoWrapper::Socket_method_connect_INLRInetAddress_II_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Socket_methods_connect_INLRString_I_Z_arg_host = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "host", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Socket_methods_connect_INLRString_I_Z_arg_port = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "port", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Socket_methods_connect_INLRString_I_Z_args[] = 
{
  &Socket_methods_connect_INLRString_I_Z_arg_host,
  &Socket_methods_connect_INLRString_I_Z_arg_port,
  0
};

::acdk::lang::dmi::ClazzInfo* Socket_methods_connect_INLRString_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Socket_method_connect_INLRString_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "connect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_a_connect", // alternative name of method
  -1, // altlabelHashCode
  Socket_methods_connect_INLRString_I_Z_args, // the arguments
  0, //arguments count
  Socket_methods_connect_INLRString_I_Z_exceptions, // the declared exceptions
  Socket_MetainfoWrapper::Socket_method_connect_INLRString_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Socket_methods_connect_INLRInetAddress_I_Z_arg_address = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "address", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetAddress::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Socket_methods_connect_INLRInetAddress_I_Z_arg_port = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "port", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Socket_methods_connect_INLRInetAddress_I_Z_args[] = 
{
  &Socket_methods_connect_INLRInetAddress_I_Z_arg_address,
  &Socket_methods_connect_INLRInetAddress_I_Z_arg_port,
  0
};

::acdk::lang::dmi::ClazzInfo* Socket_methods_connect_INLRInetAddress_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Socket_method_connect_INLRInetAddress_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "connect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_8_connect", // alternative name of method
  -1, // altlabelHashCode
  Socket_methods_connect_INLRInetAddress_I_Z_args, // the arguments
  0, //arguments count
  Socket_methods_connect_INLRInetAddress_I_Z_exceptions, // the declared exceptions
  Socket_MetainfoWrapper::Socket_method_connect_INLRInetAddress_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Socket_methods_connect_INLRString_II_Z_arg_host = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "host", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Socket_methods_connect_INLRString_II_Z_arg_port = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "port", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Socket_methods_connect_INLRString_II_Z_arg_timeOut = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "timeOut", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Socket_methods_connect_INLRString_II_Z_args[] = 
{
  &Socket_methods_connect_INLRString_II_Z_arg_host,
  &Socket_methods_connect_INLRString_II_Z_arg_port,
  &Socket_methods_connect_INLRString_II_Z_arg_timeOut,
  0
};

::acdk::lang::dmi::ClazzInfo* Socket_methods_connect_INLRString_II_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Socket_method_connect_INLRString_II_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "connect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_9_connect", // alternative name of method
  -1, // altlabelHashCode
  Socket_methods_connect_INLRString_II_Z_args, // the arguments
  0, //arguments count
  Socket_methods_connect_INLRString_II_Z_exceptions, // the declared exceptions
  Socket_MetainfoWrapper::Socket_method_connect_INLRString_II_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Socket_methods_getInetAddress__LRInetAddress__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Socket_methods_getInetAddress__LRInetAddress__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Socket_method_getInetAddress__LRInetAddress_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInetAddress", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetAddress::clazzInfo(), // return type
  "_c_getInetAddress", // alternative name of method
  -1, // altlabelHashCode
  Socket_methods_getInetAddress__LRInetAddress__args, // the arguments
  0, //arguments count
  Socket_methods_getInetAddress__LRInetAddress__exceptions, // the declared exceptions
  Socket_MetainfoWrapper::Socket_method_getInetAddress__LRInetAddress__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Socket_methods_getInputStream__LRReader__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Socket_methods_getInputStream__LRReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Socket_method_getInputStream__LRReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInputStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReader::clazzInfo(), // return type
  "_d_getInputStream", // alternative name of method
  -1, // altlabelHashCode
  Socket_methods_getInputStream__LRReader__args, // the arguments
  0, //arguments count
  Socket_methods_getInputStream__LRReader__exceptions, // the declared exceptions
  Socket_MetainfoWrapper::Socket_method_getInputStream__LRReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Socket_methods_getKeepAlive__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Socket_methods_getKeepAlive__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Socket_method_getKeepAlive__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getKeepAlive", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_f_getKeepAlive", // alternative name of method
  -1, // altlabelHashCode
  Socket_methods_getKeepAlive__Z_args, // the arguments
  0, //arguments count
  Socket_methods_getKeepAlive__Z_exceptions, // the declared exceptions
  Socket_MetainfoWrapper::Socket_method_getKeepAlive__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Socket_methods_getLocalAddress__LRInetAddress__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Socket_methods_getLocalAddress__LRInetAddress__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Socket_method_getLocalAddress__LRInetAddress_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLocalAddress", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetAddress::clazzInfo(), // return type
  "_g_getLocalAddress", // alternative name of method
  -1, // altlabelHashCode
  Socket_methods_getLocalAddress__LRInetAddress__args, // the arguments
  0, //arguments count
  Socket_methods_getLocalAddress__LRInetAddress__exceptions, // the declared exceptions
  Socket_MetainfoWrapper::Socket_method_getLocalAddress__LRInetAddress__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Socket_methods_getLocalPort__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Socket_methods_getLocalPort__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Socket_method_getLocalPort__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLocalPort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_h_getLocalPort", // alternative name of method
  -1, // altlabelHashCode
  Socket_methods_getLocalPort__I_args, // the arguments
  0, //arguments count
  Socket_methods_getLocalPort__I_exceptions, // the declared exceptions
  Socket_MetainfoWrapper::Socket_method_getLocalPort__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Socket_methods_getOutputStream__LRWriter__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Socket_methods_getOutputStream__LRWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Socket_method_getOutputStream__LRWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getOutputStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriter::clazzInfo(), // return type
  "_i_getOutputStream", // alternative name of method
  -1, // altlabelHashCode
  Socket_methods_getOutputStream__LRWriter__args, // the arguments
  0, //arguments count
  Socket_methods_getOutputStream__LRWriter__exceptions, // the declared exceptions
  Socket_MetainfoWrapper::Socket_method_getOutputStream__LRWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Socket_methods_getPort__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Socket_methods_getPort__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Socket_method_getPort__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_k_getPort", // alternative name of method
  -1, // altlabelHashCode
  Socket_methods_getPort__I_args, // the arguments
  0, //arguments count
  Socket_methods_getPort__I_exceptions, // the declared exceptions
  Socket_MetainfoWrapper::Socket_method_getPort__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Socket_methods_getReader__LRReader__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Socket_methods_getReader__LRReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Socket_method_getReader__LRReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReader::clazzInfo(), // return type
  "_e_getReader", // alternative name of method
  -1, // altlabelHashCode
  Socket_methods_getReader__LRReader__args, // the arguments
  0, //arguments count
  Socket_methods_getReader__LRReader__exceptions, // the declared exceptions
  Socket_MetainfoWrapper::Socket_method_getReader__LRReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Socket_methods_getReceiveBufferSize__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Socket_methods_getReceiveBufferSize__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Socket_method_getReceiveBufferSize__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getReceiveBufferSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_l_getReceiveBufferSize", // alternative name of method
  -1, // altlabelHashCode
  Socket_methods_getReceiveBufferSize__I_args, // the arguments
  0, //arguments count
  Socket_methods_getReceiveBufferSize__I_exceptions, // the declared exceptions
  Socket_MetainfoWrapper::Socket_method_getReceiveBufferSize__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Socket_methods_getReuseAddress__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Socket_methods_getReuseAddress__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Socket_method_getReuseAddress__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getReuseAddress", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_r_getReuseAddress", // alternative name of method
  -1, // altlabelHashCode
  Socket_methods_getReuseAddress__Z_args, // the arguments
  0, //arguments count
  Socket_methods_getReuseAddress__Z_exceptions, // the declared exceptions
  Socket_MetainfoWrapper::Socket_method_getReuseAddress__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Socket_methods_getSendBufferSize__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Socket_methods_getSendBufferSize__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Socket_method_getSendBufferSize__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSendBufferSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_m_getSendBufferSize", // alternative name of method
  -1, // altlabelHashCode
  Socket_methods_getSendBufferSize__I_args, // the arguments
  0, //arguments count
  Socket_methods_getSendBufferSize__I_exceptions, // the declared exceptions
  Socket_MetainfoWrapper::Socket_method_getSendBufferSize__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Socket_methods_getSoLinger__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Socket_methods_getSoLinger__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Socket_method_getSoLinger__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSoLinger", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_n_getSoLinger", // alternative name of method
  -1, // altlabelHashCode
  Socket_methods_getSoLinger__I_args, // the arguments
  0, //arguments count
  Socket_methods_getSoLinger__I_exceptions, // the declared exceptions
  Socket_MetainfoWrapper::Socket_method_getSoLinger__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Socket_methods_getSoTimeout__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Socket_methods_getSoTimeout__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Socket_method_getSoTimeout__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSoTimeout", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_o_getSoTimeout", // alternative name of method
  -1, // altlabelHashCode
  Socket_methods_getSoTimeout__I_args, // the arguments
  0, //arguments count
  Socket_methods_getSoTimeout__I_exceptions, // the declared exceptions
  Socket_MetainfoWrapper::Socket_method_getSoTimeout__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Socket_methods_getTcpNoDelay__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Socket_methods_getTcpNoDelay__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Socket_method_getTcpNoDelay__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTcpNoDelay", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_p_getTcpNoDelay", // alternative name of method
  -1, // altlabelHashCode
  Socket_methods_getTcpNoDelay__Z_args, // the arguments
  0, //arguments count
  Socket_methods_getTcpNoDelay__Z_exceptions, // the declared exceptions
  Socket_MetainfoWrapper::Socket_method_getTcpNoDelay__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Socket_methods_getWriter__LRWriter__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Socket_methods_getWriter__LRWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Socket_method_getWriter__LRWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriter::clazzInfo(), // return type
  "_j_getWriter", // alternative name of method
  -1, // altlabelHashCode
  Socket_methods_getWriter__LRWriter__args, // the arguments
  0, //arguments count
  Socket_methods_getWriter__LRWriter__exceptions, // the declared exceptions
  Socket_MetainfoWrapper::Socket_method_getWriter__LRWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Socket_methods_setKeepAlive_Z_V_arg_on = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "on", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Socket_methods_setKeepAlive_Z_V_args[] = 
{
  &Socket_methods_setKeepAlive_Z_V_arg_on,
  0
};

::acdk::lang::dmi::ClazzInfo* Socket_methods_setKeepAlive_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Socket_method_setKeepAlive_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setKeepAlive", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_q_setKeepAlive", // alternative name of method
  -1, // altlabelHashCode
  Socket_methods_setKeepAlive_Z_V_args, // the arguments
  0, //arguments count
  Socket_methods_setKeepAlive_Z_V_exceptions, // the declared exceptions
  Socket_MetainfoWrapper::Socket_method_setKeepAlive_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Socket_methods_setReceiveBufferSize_I_V_arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Socket_methods_setReceiveBufferSize_I_V_args[] = 
{
  &Socket_methods_setReceiveBufferSize_I_V_arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* Socket_methods_setReceiveBufferSize_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Socket_method_setReceiveBufferSize_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setReceiveBufferSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_t_setReceiveBufferSize", // alternative name of method
  -1, // altlabelHashCode
  Socket_methods_setReceiveBufferSize_I_V_args, // the arguments
  0, //arguments count
  Socket_methods_setReceiveBufferSize_I_V_exceptions, // the declared exceptions
  Socket_MetainfoWrapper::Socket_method_setReceiveBufferSize_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Socket_methods_setReuseAddress_Z_V_arg_on = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "on", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Socket_methods_setReuseAddress_Z_V_args[] = 
{
  &Socket_methods_setReuseAddress_Z_V_arg_on,
  0
};

::acdk::lang::dmi::ClazzInfo* Socket_methods_setReuseAddress_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Socket_method_setReuseAddress_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setReuseAddress", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_s_setReuseAddress", // alternative name of method
  -1, // altlabelHashCode
  Socket_methods_setReuseAddress_Z_V_args, // the arguments
  0, //arguments count
  Socket_methods_setReuseAddress_Z_V_exceptions, // the declared exceptions
  Socket_MetainfoWrapper::Socket_method_setReuseAddress_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Socket_methods_setSendBufferSize_I_V_arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Socket_methods_setSendBufferSize_I_V_args[] = 
{
  &Socket_methods_setSendBufferSize_I_V_arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* Socket_methods_setSendBufferSize_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Socket_method_setSendBufferSize_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSendBufferSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_u_setSendBufferSize", // alternative name of method
  -1, // altlabelHashCode
  Socket_methods_setSendBufferSize_I_V_args, // the arguments
  0, //arguments count
  Socket_methods_setSendBufferSize_I_V_exceptions, // the declared exceptions
  Socket_MetainfoWrapper::Socket_method_setSendBufferSize_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Socket_methods_setSoLinger_ZI_V_arg_on = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "on", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Socket_methods_setSoLinger_ZI_V_arg_linger = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "linger", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Socket_methods_setSoLinger_ZI_V_args[] = 
{
  &Socket_methods_setSoLinger_ZI_V_arg_on,
  &Socket_methods_setSoLinger_ZI_V_arg_linger,
  0
};

::acdk::lang::dmi::ClazzInfo* Socket_methods_setSoLinger_ZI_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Socket_method_setSoLinger_ZI_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSoLinger", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_w_setSoLinger", // alternative name of method
  -1, // altlabelHashCode
  Socket_methods_setSoLinger_ZI_V_args, // the arguments
  0, //arguments count
  Socket_methods_setSoLinger_ZI_V_exceptions, // the declared exceptions
  Socket_MetainfoWrapper::Socket_method_setSoLinger_ZI_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Socket_methods_setSoTimeout_I_V_arg_timeout = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "timeout", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Socket_methods_setSoTimeout_I_V_args[] = 
{
  &Socket_methods_setSoTimeout_I_V_arg_timeout,
  0
};

::acdk::lang::dmi::ClazzInfo* Socket_methods_setSoTimeout_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Socket_method_setSoTimeout_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSoTimeout", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_x_setSoTimeout", // alternative name of method
  -1, // altlabelHashCode
  Socket_methods_setSoTimeout_I_V_args, // the arguments
  0, //arguments count
  Socket_methods_setSoTimeout_I_V_exceptions, // the declared exceptions
  Socket_MetainfoWrapper::Socket_method_setSoTimeout_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Socket_methods_setSocketImplFactory_INLRSocketImplFactory__V_arg_fac = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fac", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSocketImplFactory::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Socket_methods_setSocketImplFactory_INLRSocketImplFactory__V_args[] = 
{
  &Socket_methods_setSocketImplFactory_INLRSocketImplFactory__V_arg_fac,
  0
};

::acdk::lang::dmi::ClazzInfo* Socket_methods_setSocketImplFactory_INLRSocketImplFactory__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Socket_method_setSocketImplFactory_INLRSocketImplFactory__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSocketImplFactory", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_v_setSocketImplFactory", // alternative name of method
  -1, // altlabelHashCode
  Socket_methods_setSocketImplFactory_INLRSocketImplFactory__V_args, // the arguments
  0, //arguments count
  Socket_methods_setSocketImplFactory_INLRSocketImplFactory__V_exceptions, // the declared exceptions
  Socket_MetainfoWrapper::Socket_method_setSocketImplFactory_INLRSocketImplFactory__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Socket_methods_setTcpNoDelay_Z_V_arg_on = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "on", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Socket_methods_setTcpNoDelay_Z_V_args[] = 
{
  &Socket_methods_setTcpNoDelay_Z_V_arg_on,
  0
};

::acdk::lang::dmi::ClazzInfo* Socket_methods_setTcpNoDelay_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Socket_method_setTcpNoDelay_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTcpNoDelay", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_y_setTcpNoDelay", // alternative name of method
  -1, // altlabelHashCode
  Socket_methods_setTcpNoDelay_Z_V_args, // the arguments
  0, //arguments count
  Socket_methods_setTcpNoDelay_Z_V_exceptions, // the declared exceptions
  Socket_MetainfoWrapper::Socket_method_setTcpNoDelay_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Socket_methods_shutdownInput__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Socket_methods_shutdownInput__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Socket_method_shutdownInput__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "shutdownInput", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_z_shutdownInput", // alternative name of method
  -1, // altlabelHashCode
  Socket_methods_shutdownInput__V_args, // the arguments
  0, //arguments count
  Socket_methods_shutdownInput__V_exceptions, // the declared exceptions
  Socket_MetainfoWrapper::Socket_method_shutdownInput__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Socket_methods_shutdownOutput__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Socket_methods_shutdownOutput__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Socket_method_shutdownOutput__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "shutdownOutput", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_A_shutdownOutput", // alternative name of method
  -1, // altlabelHashCode
  Socket_methods_shutdownOutput__V_args, // the arguments
  0, //arguments count
  Socket_methods_shutdownOutput__V_exceptions, // the declared exceptions
  Socket_MetainfoWrapper::Socket_method_shutdownOutput__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Socket_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Socket_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Socket_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_B_toString", // alternative name of method
  -1, // altlabelHashCode
  Socket_methods_toString__LRString__args, // the arguments
  0, //arguments count
  Socket_methods_toString__LRString__exceptions, // the declared exceptions
  Socket_MetainfoWrapper::Socket_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Socket_methods[] = 
{
  &Socket_method_GetClass__L_acdk_lang_RClass_,
  &Socket_method_Socket_INLRSocketImpl__LRSocket_,
  &Socket_method_Socket_Z_LRSocket_,
  &Socket_method_Socket__LRSocket_,
  &Socket_method_Socket_INLRInetAddress_IZ_LRSocket_,
  &Socket_method_Socket_INLRInetAddress_I_LRSocket_,
  &Socket_method_Socket_INLRString_IZ_LRSocket_,
  &Socket_method_Socket_INLRString_I_LRSocket_,
  &Socket_method__init__V,
  &Socket_method_close__V,
  &Socket_method_connect_INLRInetAddress_II_Z,
  &Socket_method_connect_INLRString_I_Z,
  &Socket_method_connect_INLRInetAddress_I_Z,
  &Socket_method_connect_INLRString_II_Z,
  &Socket_method_getInetAddress__LRInetAddress_,
  &Socket_method_getInputStream__LRReader_,
  &Socket_method_getKeepAlive__Z,
  &Socket_method_getLocalAddress__LRInetAddress_,
  &Socket_method_getLocalPort__I,
  &Socket_method_getOutputStream__LRWriter_,
  &Socket_method_getPort__I,
  &Socket_method_getReader__LRReader_,
  &Socket_method_getReceiveBufferSize__I,
  &Socket_method_getReuseAddress__Z,
  &Socket_method_getSendBufferSize__I,
  &Socket_method_getSoLinger__I,
  &Socket_method_getSoTimeout__I,
  &Socket_method_getTcpNoDelay__Z,
  &Socket_method_getWriter__LRWriter_,
  &Socket_method_setKeepAlive_Z_V,
  &Socket_method_setReceiveBufferSize_I_V,
  &Socket_method_setReuseAddress_Z_V,
  &Socket_method_setSendBufferSize_I_V,
  &Socket_method_setSoLinger_ZI_V,
  &Socket_method_setSoTimeout_I_V,
  &Socket_method_setSocketImplFactory_INLRSocketImplFactory__V,
  &Socket_method_setTcpNoDelay_Z_V,
  &Socket_method_shutdownInput__V,
  &Socket_method_shutdownOutput__V,
  &Socket_method_toString__LRString_,
  0
};


struct Socket_MetaInfoInitializer
{  Socket_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Socket::clazzInfo();
    ci->fields =  _Socket_fields;
    ci->methods =  _Socket_methods;
    ci->_scopeParent = acdk_net_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Socket_MetaInfoInitializer Socket_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace net


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) net_dummyExportFunc() {}
#endif

