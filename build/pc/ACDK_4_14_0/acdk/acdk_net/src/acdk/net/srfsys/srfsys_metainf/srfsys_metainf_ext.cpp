// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../srfsys.h"
#include "../Config.h"
#include "../FileInfo.h"
#include "../Message.h"
#include "../ObjectLogReader.h"
#include "../ObjectLogWriter.h"
#include "../SRFileImpl.h"
#include "../SRFileSystemClient.h"
#include "../SRFileSystemServer.h"
#include "../srfsys.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>


struct acdk::lang::dmi::UnitInfo acdk_net_srfsys_unitInfo = {
  ::acdk::lang::dmi::MiUnitInfo, // flags
  0, //attributeRes
  "srfsys", // name of unit
  -1, // hashCode
  "acdk/net", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  0 // _firstChild first ClazzInfo of this unit
};

static ::acdk::lang::dmi::RegisterUnitInfo _register_acdk_net_srfsys_unitInfo(&acdk_net_srfsys_unitInfo);


namespace acdk { 
namespace net { 
namespace srfsys { 


//static
::acdk::lang::RObject
FileInfo_create_array(int length)
{
  return new ObjectArrayImpl<RFileInfo>(length);
}

//static
::acdk::lang::RObject
FileInfo_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class FileInfo_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_FileInfo__LRFileInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileInfo();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_FileInfo_INLRFileInfo__LRFileInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileInfo((RFileInfo)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_FileInfo_INLRString__LRFileInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileInfo((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)FileInfo::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_canRead__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FileInfo::canRead();
    else
      ret = This->canRead();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_canRead_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FileInfo::canRead(args[0].getBoolVar());
    else
        This->canRead(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_canWrite__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FileInfo::canWrite();
    else
      ret = This->canWrite();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_canWrite_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FileInfo::canWrite(args[0].getBoolVar());
    else
        This->canWrite(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_compareTo_INLRFileInfo__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FileInfo::compareTo((RFileInfo)args[0].getObjectVar());
    else
      ret = This->compareTo((RFileInfo)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_compareTo_INLRObject__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FileInfo::compareTo((RObject)args[0].getObjectVar());
    else
      ret = This->compareTo((RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_dump_INL_acdk_io_RPrintWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FileInfo::dump((::acdk::io::RPrintWriter)args[0].getObjectVar());
    else
        This->dump((::acdk::io::RPrintWriter)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_equals_INLRFileInfo__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FileInfo::equals((RFileInfo)args[0].getObjectVar());
    else
      ret = This->equals((RFileInfo)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_equals_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FileInfo::equals((RObject)args[0].getObjectVar());
    else
      ret = This->equals((RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_exists__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FileInfo::exists();
    else
      ret = This->exists();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_exists_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FileInfo::exists(args[0].getBoolVar());
    else
        This->exists(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_flagString_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)FileInfo::flagString(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_getPath__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->FileInfo::getPath();
    else
        ret = (::acdk::lang::RObject)This->getPath();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_isChecked__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FileInfo::isChecked();
    else
      ret = This->isChecked();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_isChecked_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FileInfo::isChecked(args[0].getBoolVar());
    else
        This->isChecked(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_isDirectory__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FileInfo::isDirectory();
    else
      ret = This->isDirectory();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_isDirectory_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FileInfo::isDirectory(args[0].getBoolVar());
    else
        This->isDirectory(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_isFile__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FileInfo::isFile();
    else
      ret = This->isFile();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_isFile_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FileInfo::isFile(args[0].getBoolVar());
    else
        This->isFile(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_isHidden__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FileInfo::isHidden();
    else
      ret = This->isHidden();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_isHidden_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FileInfo::isHidden(args[0].getBoolVar());
    else
        This->isHidden(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_timeToString_J_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)FileInfo::timeToString(args[0].getLongVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->FileInfo::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FileInfo_fields_created_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->created, flags);
    else
      This->created = var.getLongVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FileInfo_fields_digest_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->digest, flags);
    else
      This->digest = var.getLongVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FileInfo_fields_dir_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->dir, flags);
    else
      This->dir = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FileInfo_fields_flags_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->flags, flags);
    else
      This->flags = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FileInfo_fields_modified_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->modified, flags);
    else
      This->modified = var.getLongVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FileInfo_fields_name_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->name, flags);
    else
      This->name = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FileInfo_fields_size_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->size, flags);
    else
      This->size = var.getLongVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo FileInfo_fields_created = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "created", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(),
  FileInfo_MetainfoWrapper::FileInfo_fields_created_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo FileInfo_fields_digest = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "digest", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(),
  FileInfo_MetainfoWrapper::FileInfo_fields_digest_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo FileInfo_fields_dir = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "dir", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  FileInfo_MetainfoWrapper::FileInfo_fields_dir_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo FileInfo_fields_flags = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "flags", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  FileInfo_MetainfoWrapper::FileInfo_fields_flags_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo FileInfo_fields_modified = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "modified", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(),
  FileInfo_MetainfoWrapper::FileInfo_fields_modified_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo FileInfo_fields_name = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "name", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  FileInfo_MetainfoWrapper::FileInfo_fields_name_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo FileInfo_fields_size = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "size", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(),
  FileInfo_MetainfoWrapper::FileInfo_fields_size_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _FileInfo_fields[] = 
{
  &FileInfo_fields_created,
  &FileInfo_fields_digest,
  &FileInfo_fields_dir,
  &FileInfo_fields_flags,
  &FileInfo_fields_modified,
  &FileInfo_fields_name,
  &FileInfo_fields_size,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_FileInfo__LRFileInfo__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_FileInfo__LRFileInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_FileInfo__LRFileInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "FileInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileInfo::clazzInfo(), // return type
  "_0_FileInfo", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_FileInfo__LRFileInfo__args, // the arguments
  0, //arguments count
  FileInfo_methods_FileInfo__LRFileInfo__exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_FileInfo__LRFileInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_FileInfo_INLRFileInfo__LRFileInfo__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_FileInfo_INLRFileInfo__LRFileInfo__args[] = 
{
  &FileInfo_methods_FileInfo_INLRFileInfo__LRFileInfo__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_FileInfo_INLRFileInfo__LRFileInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_FileInfo_INLRFileInfo__LRFileInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "FileInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileInfo::clazzInfo(), // return type
  "_1_FileInfo", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_FileInfo_INLRFileInfo__LRFileInfo__args, // the arguments
  0, //arguments count
  FileInfo_methods_FileInfo_INLRFileInfo__LRFileInfo__exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_FileInfo_INLRFileInfo__LRFileInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_FileInfo_INLRString__LRFileInfo__arg_path = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "path", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_FileInfo_INLRString__LRFileInfo__args[] = 
{
  &FileInfo_methods_FileInfo_INLRString__LRFileInfo__arg_path,
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_FileInfo_INLRString__LRFileInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_FileInfo_INLRString__LRFileInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "FileInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileInfo::clazzInfo(), // return type
  "_2_FileInfo", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_FileInfo_INLRString__LRFileInfo__args, // the arguments
  0, //arguments count
  FileInfo_methods_FileInfo_INLRString__LRFileInfo__exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_FileInfo_INLRString__LRFileInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_q_GetClass", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  FileInfo_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_canRead__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_canRead__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_canRead__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "canRead", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_8_canRead", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_canRead__Z_args, // the arguments
  0, //arguments count
  FileInfo_methods_canRead__Z_exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_canRead__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_canRead_Z_V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_canRead_Z_V_args[] = 
{
  &FileInfo_methods_canRead_Z_V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_canRead_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_canRead_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "canRead", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_canRead", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_canRead_Z_V_args, // the arguments
  0, //arguments count
  FileInfo_methods_canRead_Z_V_exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_canRead_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_canWrite__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_canWrite__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_canWrite__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "canWrite", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_a_canWrite", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_canWrite__Z_args, // the arguments
  0, //arguments count
  FileInfo_methods_canWrite__Z_exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_canWrite__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_canWrite_Z_V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_canWrite_Z_V_args[] = 
{
  &FileInfo_methods_canWrite_Z_V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_canWrite_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_canWrite_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "canWrite", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_canWrite", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_canWrite_Z_V_args, // the arguments
  0, //arguments count
  FileInfo_methods_canWrite_Z_V_exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_canWrite_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_compareTo_INLRFileInfo__I_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_compareTo_INLRFileInfo__I_args[] = 
{
  &FileInfo_methods_compareTo_INLRFileInfo__I_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_compareTo_INLRFileInfo__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_compareTo_INLRFileInfo__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "compareTo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_4_compareTo", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_compareTo_INLRFileInfo__I_args, // the arguments
  0, //arguments count
  FileInfo_methods_compareTo_INLRFileInfo__I_exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_compareTo_INLRFileInfo__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_compareTo_INLRObject__I_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_compareTo_INLRObject__I_args[] = 
{
  &FileInfo_methods_compareTo_INLRObject__I_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_compareTo_INLRObject__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_compareTo_INLRObject__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "compareTo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_compareTo", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_compareTo_INLRObject__I_args, // the arguments
  0, //arguments count
  FileInfo_methods_compareTo_INLRObject__I_exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_compareTo_INLRObject__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_dump_INL_acdk_io_RPrintWriter__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::RPrintWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_dump_INL_acdk_io_RPrintWriter__V_args[] = 
{
  &FileInfo_methods_dump_INL_acdk_io_RPrintWriter__V_arg_out,
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_dump_INL_acdk_io_RPrintWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_dump_INL_acdk_io_RPrintWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "dump", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_n_dump", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_dump_INL_acdk_io_RPrintWriter__V_args, // the arguments
  0, //arguments count
  FileInfo_methods_dump_INL_acdk_io_RPrintWriter__V_exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_dump_INL_acdk_io_RPrintWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_equals_INLRFileInfo__Z_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_equals_INLRFileInfo__Z_args[] = 
{
  &FileInfo_methods_equals_INLRFileInfo__Z_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_equals_INLRFileInfo__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_equals_INLRFileInfo__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_o_equals", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_equals_INLRFileInfo__Z_args, // the arguments
  0, //arguments count
  FileInfo_methods_equals_INLRFileInfo__Z_exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_equals_INLRFileInfo__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_equals_INLRObject__Z_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_equals_INLRObject__Z_args[] = 
{
  &FileInfo_methods_equals_INLRObject__Z_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_equals_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_equals_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_p_equals", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_equals_INLRObject__Z_args, // the arguments
  0, //arguments count
  FileInfo_methods_equals_INLRObject__Z_exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_equals_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_exists__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_exists__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_exists__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "exists", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_exists", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_exists__Z_args, // the arguments
  0, //arguments count
  FileInfo_methods_exists__Z_exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_exists__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_exists_Z_V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_exists_Z_V_args[] = 
{
  &FileInfo_methods_exists_Z_V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_exists_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_exists_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "exists", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_exists", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_exists_Z_V_args, // the arguments
  0, //arguments count
  FileInfo_methods_exists_Z_V_exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_exists_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_flagString_I_LRString__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_flagString_I_LRString__args[] = 
{
  &FileInfo_methods_flagString_I_LRString__arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_flagString_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_flagString_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "flagString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_k_flagString", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_flagString_I_LRString__args, // the arguments
  0, //arguments count
  FileInfo_methods_flagString_I_LRString__exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_flagString_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_getPath__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_getPath__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_getPath__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPath", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_getPath", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_getPath__LRString__args, // the arguments
  0, //arguments count
  FileInfo_methods_getPath__LRString__exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_getPath__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_isChecked__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_isChecked__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_isChecked__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isChecked", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_i_isChecked", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_isChecked__Z_args, // the arguments
  0, //arguments count
  FileInfo_methods_isChecked__Z_exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_isChecked__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_isChecked_Z_V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_isChecked_Z_V_args[] = 
{
  &FileInfo_methods_isChecked_Z_V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_isChecked_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_isChecked_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isChecked", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_j_isChecked", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_isChecked_Z_V_args, // the arguments
  0, //arguments count
  FileInfo_methods_isChecked_Z_V_exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_isChecked_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_isDirectory__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_isDirectory__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_isDirectory__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isDirectory", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_c_isDirectory", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_isDirectory__Z_args, // the arguments
  0, //arguments count
  FileInfo_methods_isDirectory__Z_exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_isDirectory__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_isDirectory_Z_V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_isDirectory_Z_V_args[] = 
{
  &FileInfo_methods_isDirectory_Z_V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_isDirectory_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_isDirectory_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isDirectory", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_isDirectory", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_isDirectory_Z_V_args, // the arguments
  0, //arguments count
  FileInfo_methods_isDirectory_Z_V_exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_isDirectory_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_isFile__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_isFile__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_isFile__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_e_isFile", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_isFile__Z_args, // the arguments
  0, //arguments count
  FileInfo_methods_isFile__Z_exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_isFile__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_isFile_Z_V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_isFile_Z_V_args[] = 
{
  &FileInfo_methods_isFile_Z_V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_isFile_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_isFile_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_isFile", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_isFile_Z_V_args, // the arguments
  0, //arguments count
  FileInfo_methods_isFile_Z_V_exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_isFile_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_isHidden__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_isHidden__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_isHidden__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isHidden", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_g_isHidden", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_isHidden__Z_args, // the arguments
  0, //arguments count
  FileInfo_methods_isHidden__Z_exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_isHidden__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_isHidden_Z_V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_isHidden_Z_V_args[] = 
{
  &FileInfo_methods_isHidden_Z_V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_isHidden_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_isHidden_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isHidden", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_h_isHidden", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_isHidden_Z_V_args, // the arguments
  0, //arguments count
  FileInfo_methods_isHidden_Z_V_exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_isHidden_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_timeToString_J_LRString__arg_time = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "time", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_timeToString_J_LRString__args[] = 
{
  &FileInfo_methods_timeToString_J_LRString__arg_time,
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_timeToString_J_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_timeToString_J_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "timeToString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_l_timeToString", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_timeToString_J_LRString__args, // the arguments
  0, //arguments count
  FileInfo_methods_timeToString_J_LRString__exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_timeToString_J_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_m_toString", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_toString__LRString__args, // the arguments
  0, //arguments count
  FileInfo_methods_toString__LRString__exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _FileInfo_methods[] = 
{
  &FileInfo_method_FileInfo__LRFileInfo_,
  &FileInfo_method_FileInfo_INLRFileInfo__LRFileInfo_,
  &FileInfo_method_FileInfo_INLRString__LRFileInfo_,
  &FileInfo_method_GetClass__L_acdk_lang_RClass_,
  &FileInfo_method_canRead__Z,
  &FileInfo_method_canRead_Z_V,
  &FileInfo_method_canWrite__Z,
  &FileInfo_method_canWrite_Z_V,
  &FileInfo_method_compareTo_INLRFileInfo__I,
  &FileInfo_method_compareTo_INLRObject__I,
  &FileInfo_method_dump_INL_acdk_io_RPrintWriter__V,
  &FileInfo_method_equals_INLRFileInfo__Z,
  &FileInfo_method_equals_INLRObject__Z,
  &FileInfo_method_exists__Z,
  &FileInfo_method_exists_Z_V,
  &FileInfo_method_flagString_I_LRString_,
  &FileInfo_method_getPath__LRString_,
  &FileInfo_method_isChecked__Z,
  &FileInfo_method_isChecked_Z_V,
  &FileInfo_method_isDirectory__Z,
  &FileInfo_method_isDirectory_Z_V,
  &FileInfo_method_isFile__Z,
  &FileInfo_method_isFile_Z_V,
  &FileInfo_method_isHidden__Z,
  &FileInfo_method_isHidden_Z_V,
  &FileInfo_method_timeToString_J_LRString_,
  &FileInfo_method_toString__LRString_,
  0
};


struct FileInfo_MetaInfoInitializer
{  FileInfo_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = FileInfo::clazzInfo();
    ci->fields =  _FileInfo_fields;
    ci->methods =  _FileInfo_methods;
    ci->_scopeParent = acdk_net_srfsys_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
FileInfo_MetaInfoInitializer FileInfo_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace net
} // namespace srfsys


namespace acdk { 
namespace net { 
namespace srfsys { 


//static
::acdk::lang::RObject
Message_create_array(int length)
{
  return new ObjectArrayImpl<RMessage>(length);
}

//static
::acdk::lang::RObject
Message_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Message_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Message_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Message::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Message_method_Message_I_LRMessage__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Message(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Message_method_Message__LRMessage__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Message();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Message_method_execute_INL_acdk_io_RObjectWriter_INLRSRFileSystemServer__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Message* This = dmi_cast<Message>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Message::execute((::acdk::io::RObjectWriter)args[0].getObjectVar(), (RSRFileSystemServer)args[1].getObjectVar());
    else
        This->execute((::acdk::io::RObjectWriter)args[0].getObjectVar(), (RSRFileSystemServer)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Message_method_expectReply__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Message* This = dmi_cast<Message>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Message::expectReply();
    else
      ret = This->expectReply();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Message_method_expectReply_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Message* This = dmi_cast<Message>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Message::expectReply(args[0].getBoolVar());
    else
        This->expectReply(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Message_fields_command_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Message* This = dmi_cast<Message>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->command, flags);
    else
      This->command = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Message_fields_flags_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Message* This = dmi_cast<Message>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->flags, flags);
    else
      This->flags = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo Message_fields_command = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo | 0x200000,
  0, //AttributesRes
  "command", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Message_MetainfoWrapper::Message_fields_command_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Message_fields_flags = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "flags", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Message_MetainfoWrapper::Message_fields_flags_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _Message_fields[] = 
{
  &Message_fields_command,
  &Message_fields_flags,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Message_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Message_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Message_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Message_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Message_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Message_MetainfoWrapper::Message_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Message_methods_Message_I_LRMessage__arg_cmd = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "cmd", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Message_methods_Message_I_LRMessage__args[] = 
{
  &Message_methods_Message_I_LRMessage__arg_cmd,
  0
};

::acdk::lang::dmi::ClazzInfo* Message_methods_Message_I_LRMessage__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Message_method_Message_I_LRMessage_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Message", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Message::clazzInfo(), // return type
  "_0_Message", // alternative name of method
  -1, // altlabelHashCode
  Message_methods_Message_I_LRMessage__args, // the arguments
  0, //arguments count
  Message_methods_Message_I_LRMessage__exceptions, // the declared exceptions
  Message_MetainfoWrapper::Message_method_Message_I_LRMessage__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Message_methods_Message__LRMessage__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Message_methods_Message__LRMessage__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Message_method_Message__LRMessage_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Message", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Message::clazzInfo(), // return type
  "_1_Message", // alternative name of method
  -1, // altlabelHashCode
  Message_methods_Message__LRMessage__args, // the arguments
  0, //arguments count
  Message_methods_Message__LRMessage__exceptions, // the declared exceptions
  Message_MetainfoWrapper::Message_method_Message__LRMessage__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Message_methods_execute_INL_acdk_io_RObjectWriter_INLRSRFileSystemServer__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::RObjectWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Message_methods_execute_INL_acdk_io_RObjectWriter_INLRSRFileSystemServer__V_arg_fserver = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fserver", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSRFileSystemServer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Message_methods_execute_INL_acdk_io_RObjectWriter_INLRSRFileSystemServer__V_args[] = 
{
  &Message_methods_execute_INL_acdk_io_RObjectWriter_INLRSRFileSystemServer__V_arg_out,
  &Message_methods_execute_INL_acdk_io_RObjectWriter_INLRSRFileSystemServer__V_arg_fserver,
  0
};

::acdk::lang::dmi::ClazzInfo* Message_methods_execute_INL_acdk_io_RObjectWriter_INLRSRFileSystemServer__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Message_method_execute_INL_acdk_io_RObjectWriter_INLRSRFileSystemServer__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_execute", // alternative name of method
  -1, // altlabelHashCode
  Message_methods_execute_INL_acdk_io_RObjectWriter_INLRSRFileSystemServer__V_args, // the arguments
  0, //arguments count
  Message_methods_execute_INL_acdk_io_RObjectWriter_INLRSRFileSystemServer__V_exceptions, // the declared exceptions
  Message_MetainfoWrapper::Message_method_execute_INL_acdk_io_RObjectWriter_INLRSRFileSystemServer__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Message_methods_expectReply__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Message_methods_expectReply__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Message_method_expectReply__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "expectReply", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_expectReply", // alternative name of method
  -1, // altlabelHashCode
  Message_methods_expectReply__Z_args, // the arguments
  0, //arguments count
  Message_methods_expectReply__Z_exceptions, // the declared exceptions
  Message_MetainfoWrapper::Message_method_expectReply__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Message_methods_expectReply_Z_V_arg_f = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "f", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Message_methods_expectReply_Z_V_args[] = 
{
  &Message_methods_expectReply_Z_V_arg_f,
  0
};

::acdk::lang::dmi::ClazzInfo* Message_methods_expectReply_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Message_method_expectReply_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "expectReply", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_expectReply", // alternative name of method
  -1, // altlabelHashCode
  Message_methods_expectReply_Z_V_args, // the arguments
  0, //arguments count
  Message_methods_expectReply_Z_V_exceptions, // the declared exceptions
  Message_MetainfoWrapper::Message_method_expectReply_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Message_methods[] = 
{
  &Message_method_GetClass__L_acdk_lang_RClass_,
  &Message_method_Message_I_LRMessage_,
  &Message_method_Message__LRMessage_,
  &Message_method_execute_INL_acdk_io_RObjectWriter_INLRSRFileSystemServer__V,
  &Message_method_expectReply__Z,
  &Message_method_expectReply_Z_V,
  0
};


struct Message_MetaInfoInitializer
{  Message_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Message::clazzInfo();
    ci->fields =  _Message_fields;
    ci->methods =  _Message_methods;
    ci->_scopeParent = acdk_net_srfsys_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Message_MetaInfoInitializer Message_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace net
} // namespace srfsys


namespace acdk { 
namespace net { 
namespace srfsys { 


//static
::acdk::lang::RObject
LoginMessage_create_array(int length)
{
  return new ObjectArrayImpl<RLoginMessage>(length);
}

//static
::acdk::lang::RObject
LoginMessage_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LoginMessage_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LoginMessage_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LoginMessage::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LoginMessage_method_LoginMessage__LRLoginMessage__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LoginMessage();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LoginMessage_method_LoginMessage_INLRString_INLRString__LRLoginMessage__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LoginMessage((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LoginMessage_fields_pass_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LoginMessage* This = dmi_cast<LoginMessage>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->pass, flags);
    else
      This->pass = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LoginMessage_fields_user_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LoginMessage* This = dmi_cast<LoginMessage>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->user, flags);
    else
      This->user = (RString)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo LoginMessage_fields_pass = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "pass", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  LoginMessage_MetainfoWrapper::LoginMessage_fields_pass_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LoginMessage_fields_user = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "user", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  LoginMessage_MetainfoWrapper::LoginMessage_fields_user_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _LoginMessage_fields[] = 
{
  &LoginMessage_fields_pass,
  &LoginMessage_fields_user,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LoginMessage_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LoginMessage_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LoginMessage_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LoginMessage_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LoginMessage_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LoginMessage_MetainfoWrapper::LoginMessage_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LoginMessage_methods_LoginMessage__LRLoginMessage__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LoginMessage_methods_LoginMessage__LRLoginMessage__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LoginMessage_method_LoginMessage__LRLoginMessage_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "LoginMessage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LoginMessage::clazzInfo(), // return type
  "_0_LoginMessage", // alternative name of method
  -1, // altlabelHashCode
  LoginMessage_methods_LoginMessage__LRLoginMessage__args, // the arguments
  0, //arguments count
  LoginMessage_methods_LoginMessage__LRLoginMessage__exceptions, // the declared exceptions
  LoginMessage_MetainfoWrapper::LoginMessage_method_LoginMessage__LRLoginMessage__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LoginMessage_methods_LoginMessage_INLRString_INLRString__LRLoginMessage__arg_u = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "u", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LoginMessage_methods_LoginMessage_INLRString_INLRString__LRLoginMessage__arg_p = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "p", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LoginMessage_methods_LoginMessage_INLRString_INLRString__LRLoginMessage__args[] = 
{
  &LoginMessage_methods_LoginMessage_INLRString_INLRString__LRLoginMessage__arg_u,
  &LoginMessage_methods_LoginMessage_INLRString_INLRString__LRLoginMessage__arg_p,
  0
};

::acdk::lang::dmi::ClazzInfo* LoginMessage_methods_LoginMessage_INLRString_INLRString__LRLoginMessage__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LoginMessage_method_LoginMessage_INLRString_INLRString__LRLoginMessage_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "LoginMessage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LoginMessage::clazzInfo(), // return type
  "_1_LoginMessage", // alternative name of method
  -1, // altlabelHashCode
  LoginMessage_methods_LoginMessage_INLRString_INLRString__LRLoginMessage__args, // the arguments
  0, //arguments count
  LoginMessage_methods_LoginMessage_INLRString_INLRString__LRLoginMessage__exceptions, // the declared exceptions
  LoginMessage_MetainfoWrapper::LoginMessage_method_LoginMessage_INLRString_INLRString__LRLoginMessage__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LoginMessage_methods[] = 
{
  &LoginMessage_method_GetClass__L_acdk_lang_RClass_,
  &LoginMessage_method_LoginMessage__LRLoginMessage_,
  &LoginMessage_method_LoginMessage_INLRString_INLRString__LRLoginMessage_,
  0
};


struct LoginMessage_MetaInfoInitializer
{  LoginMessage_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LoginMessage::clazzInfo();
    ci->fields =  _LoginMessage_fields;
    ci->methods =  _LoginMessage_methods;
    ci->_scopeParent = acdk_net_srfsys_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LoginMessage_MetaInfoInitializer LoginMessage_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace net
} // namespace srfsys


namespace acdk { 
namespace net { 
namespace srfsys { 


//static
::acdk::lang::RObject
ReplyMessage_create_array(int length)
{
  return new ObjectArrayImpl<RReplyMessage>(length);
}

//static
::acdk::lang::RObject
ReplyMessage_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ReplyMessage_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ReplyMessage_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ReplyMessage::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ReplyMessage_method_ReplyMessage_IIINLRString__LRReplyMessage__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ReplyMessage(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ReplyMessage_method_ReplyMessage__LRReplyMessage__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ReplyMessage();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ReplyMessage_method_ReplyMessage_I_LRReplyMessage__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ReplyMessage(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ReplyMessage_method_ReplyMessage_II_LRReplyMessage__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ReplyMessage(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ReplyMessage_fields_code_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ReplyMessage* This = dmi_cast<ReplyMessage>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->code, flags);
    else
      This->code = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ReplyMessage_fields_message_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ReplyMessage* This = dmi_cast<ReplyMessage>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->message, flags);
    else
      This->message = (RString)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ReplyMessage_fields_code = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "code", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ReplyMessage_MetainfoWrapper::ReplyMessage_fields_code_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ReplyMessage_fields_message = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "message", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ReplyMessage_MetainfoWrapper::ReplyMessage_fields_message_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ReplyMessage_fields[] = 
{
  &ReplyMessage_fields_code,
  &ReplyMessage_fields_message,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ReplyMessage_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ReplyMessage_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ReplyMessage_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ReplyMessage_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ReplyMessage_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ReplyMessage_MetainfoWrapper::ReplyMessage_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ReplyMessage_methods_ReplyMessage_IIINLRString__LRReplyMessage__arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ReplyMessage_methods_ReplyMessage_IIINLRString__LRReplyMessage__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ReplyMessage_methods_ReplyMessage_IIINLRString__LRReplyMessage__arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ReplyMessage_methods_ReplyMessage_IIINLRString__LRReplyMessage__args[] = 
{
  &ReplyMessage_methods_ReplyMessage_IIINLRString__LRReplyMessage__arg_type,
  &ReplyMessage_methods_ReplyMessage_IIINLRString__LRReplyMessage__arg_c,
  &ReplyMessage_methods_ReplyMessage_IIINLRString__LRReplyMessage__arg_msg,
  0
};

::acdk::lang::dmi::ClazzInfo* ReplyMessage_methods_ReplyMessage_IIINLRString__LRReplyMessage__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ReplyMessage_method_ReplyMessage_IIINLRString__LRReplyMessage_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ReplyMessage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ReplyMessage::clazzInfo(), // return type
  "_0_ReplyMessage", // alternative name of method
  -1, // altlabelHashCode
  ReplyMessage_methods_ReplyMessage_IIINLRString__LRReplyMessage__args, // the arguments
  0, //arguments count
  ReplyMessage_methods_ReplyMessage_IIINLRString__LRReplyMessage__exceptions, // the declared exceptions
  ReplyMessage_MetainfoWrapper::ReplyMessage_method_ReplyMessage_IIINLRString__LRReplyMessage__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ReplyMessage_methods_ReplyMessage__LRReplyMessage__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ReplyMessage_methods_ReplyMessage__LRReplyMessage__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ReplyMessage_method_ReplyMessage__LRReplyMessage_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ReplyMessage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ReplyMessage::clazzInfo(), // return type
  "_1_ReplyMessage", // alternative name of method
  -1, // altlabelHashCode
  ReplyMessage_methods_ReplyMessage__LRReplyMessage__args, // the arguments
  0, //arguments count
  ReplyMessage_methods_ReplyMessage__LRReplyMessage__exceptions, // the declared exceptions
  ReplyMessage_MetainfoWrapper::ReplyMessage_method_ReplyMessage__LRReplyMessage__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ReplyMessage_methods_ReplyMessage_I_LRReplyMessage__arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ReplyMessage_methods_ReplyMessage_I_LRReplyMessage__args[] = 
{
  &ReplyMessage_methods_ReplyMessage_I_LRReplyMessage__arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* ReplyMessage_methods_ReplyMessage_I_LRReplyMessage__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ReplyMessage_method_ReplyMessage_I_LRReplyMessage_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ReplyMessage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ReplyMessage::clazzInfo(), // return type
  "_2_ReplyMessage", // alternative name of method
  -1, // altlabelHashCode
  ReplyMessage_methods_ReplyMessage_I_LRReplyMessage__args, // the arguments
  0, //arguments count
  ReplyMessage_methods_ReplyMessage_I_LRReplyMessage__exceptions, // the declared exceptions
  ReplyMessage_MetainfoWrapper::ReplyMessage_method_ReplyMessage_I_LRReplyMessage__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ReplyMessage_methods_ReplyMessage_II_LRReplyMessage__arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ReplyMessage_methods_ReplyMessage_II_LRReplyMessage__arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ReplyMessage_methods_ReplyMessage_II_LRReplyMessage__args[] = 
{
  &ReplyMessage_methods_ReplyMessage_II_LRReplyMessage__arg_type,
  &ReplyMessage_methods_ReplyMessage_II_LRReplyMessage__arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* ReplyMessage_methods_ReplyMessage_II_LRReplyMessage__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ReplyMessage_method_ReplyMessage_II_LRReplyMessage_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ReplyMessage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ReplyMessage::clazzInfo(), // return type
  "_3_ReplyMessage", // alternative name of method
  -1, // altlabelHashCode
  ReplyMessage_methods_ReplyMessage_II_LRReplyMessage__args, // the arguments
  0, //arguments count
  ReplyMessage_methods_ReplyMessage_II_LRReplyMessage__exceptions, // the declared exceptions
  ReplyMessage_MetainfoWrapper::ReplyMessage_method_ReplyMessage_II_LRReplyMessage__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ReplyMessage_methods[] = 
{
  &ReplyMessage_method_GetClass__L_acdk_lang_RClass_,
  &ReplyMessage_method_ReplyMessage_IIINLRString__LRReplyMessage_,
  &ReplyMessage_method_ReplyMessage__LRReplyMessage_,
  &ReplyMessage_method_ReplyMessage_I_LRReplyMessage_,
  &ReplyMessage_method_ReplyMessage_II_LRReplyMessage_,
  0
};


struct ReplyMessage_MetaInfoInitializer
{  ReplyMessage_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ReplyMessage::clazzInfo();
    ci->fields =  _ReplyMessage_fields;
    ci->methods =  _ReplyMessage_methods;
    ci->_scopeParent = acdk_net_srfsys_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ReplyMessage_MetaInfoInitializer ReplyMessage_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace net
} // namespace srfsys


namespace acdk { 
namespace net { 
namespace srfsys { 


//static
::acdk::lang::RObject
GetDirMessage_create_array(int length)
{
  return new ObjectArrayImpl<RGetDirMessage>(length);
}

//static
::acdk::lang::RObject
GetDirMessage_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class GetDirMessage_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  GetDirMessage_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)GetDirMessage::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  GetDirMessage_method_GetDirMessage__LRGetDirMessage__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new GetDirMessage();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  GetDirMessage_fields_path_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    GetDirMessage* This = dmi_cast<GetDirMessage>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->path, flags);
    else
      This->path = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  GetDirMessage_fields_recursive_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    GetDirMessage* This = dmi_cast<GetDirMessage>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->recursive, flags);
    else
      This->recursive = var.getBoolVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo GetDirMessage_fields_path = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "path", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  GetDirMessage_MetainfoWrapper::GetDirMessage_fields_path_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo GetDirMessage_fields_recursive = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "recursive", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  GetDirMessage_MetainfoWrapper::GetDirMessage_fields_recursive_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _GetDirMessage_fields[] = 
{
  &GetDirMessage_fields_path,
  &GetDirMessage_fields_recursive,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* GetDirMessage_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* GetDirMessage_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo GetDirMessage_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  GetDirMessage_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  GetDirMessage_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  GetDirMessage_MetainfoWrapper::GetDirMessage_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* GetDirMessage_methods_GetDirMessage__LRGetDirMessage__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* GetDirMessage_methods_GetDirMessage__LRGetDirMessage__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo GetDirMessage_method_GetDirMessage__LRGetDirMessage_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "GetDirMessage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  GetDirMessage::clazzInfo(), // return type
  "_0_GetDirMessage", // alternative name of method
  -1, // altlabelHashCode
  GetDirMessage_methods_GetDirMessage__LRGetDirMessage__args, // the arguments
  0, //arguments count
  GetDirMessage_methods_GetDirMessage__LRGetDirMessage__exceptions, // the declared exceptions
  GetDirMessage_MetainfoWrapper::GetDirMessage_method_GetDirMessage__LRGetDirMessage__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _GetDirMessage_methods[] = 
{
  &GetDirMessage_method_GetClass__L_acdk_lang_RClass_,
  &GetDirMessage_method_GetDirMessage__LRGetDirMessage_,
  0
};


struct GetDirMessage_MetaInfoInitializer
{  GetDirMessage_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = GetDirMessage::clazzInfo();
    ci->fields =  _GetDirMessage_fields;
    ci->methods =  _GetDirMessage_methods;
    ci->_scopeParent = acdk_net_srfsys_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
GetDirMessage_MetaInfoInitializer GetDirMessage_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace net
} // namespace srfsys


namespace acdk { 
namespace net { 
namespace srfsys { 


//static
::acdk::lang::RObject
ReturnDirMessage_create_array(int length)
{
  return new ObjectArrayImpl<RReturnDirMessage>(length);
}

//static
::acdk::lang::RObject
ReturnDirMessage_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ReturnDirMessage_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ReturnDirMessage_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ReturnDirMessage::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ReturnDirMessage_method_ReturnDirMessage__LRReturnDirMessage__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ReturnDirMessage();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ReturnDirMessage_fields_files_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ReturnDirMessage* This = dmi_cast<ReturnDirMessage>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->files, flags);
    else
      This->files = (RFileInfoArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ReturnDirMessage_fields_path_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ReturnDirMessage* This = dmi_cast<ReturnDirMessage>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->path, flags);
    else
      This->path = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ReturnDirMessage_fields_recursive_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ReturnDirMessage* This = dmi_cast<ReturnDirMessage>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->recursive, flags);
    else
      This->recursive = var.getBoolVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ReturnDirMessage_fields_files = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "files", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileInfoArray::clazzInfo(),
  ReturnDirMessage_MetainfoWrapper::ReturnDirMessage_fields_files_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ReturnDirMessage_fields_path = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "path", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ReturnDirMessage_MetainfoWrapper::ReturnDirMessage_fields_path_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ReturnDirMessage_fields_recursive = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "recursive", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  ReturnDirMessage_MetainfoWrapper::ReturnDirMessage_fields_recursive_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ReturnDirMessage_fields[] = 
{
  &ReturnDirMessage_fields_files,
  &ReturnDirMessage_fields_path,
  &ReturnDirMessage_fields_recursive,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ReturnDirMessage_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ReturnDirMessage_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ReturnDirMessage_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ReturnDirMessage_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ReturnDirMessage_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ReturnDirMessage_MetainfoWrapper::ReturnDirMessage_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ReturnDirMessage_methods_ReturnDirMessage__LRReturnDirMessage__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ReturnDirMessage_methods_ReturnDirMessage__LRReturnDirMessage__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ReturnDirMessage_method_ReturnDirMessage__LRReturnDirMessage_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ReturnDirMessage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ReturnDirMessage::clazzInfo(), // return type
  "_0_ReturnDirMessage", // alternative name of method
  -1, // altlabelHashCode
  ReturnDirMessage_methods_ReturnDirMessage__LRReturnDirMessage__args, // the arguments
  0, //arguments count
  ReturnDirMessage_methods_ReturnDirMessage__LRReturnDirMessage__exceptions, // the declared exceptions
  ReturnDirMessage_MetainfoWrapper::ReturnDirMessage_method_ReturnDirMessage__LRReturnDirMessage__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ReturnDirMessage_methods[] = 
{
  &ReturnDirMessage_method_GetClass__L_acdk_lang_RClass_,
  &ReturnDirMessage_method_ReturnDirMessage__LRReturnDirMessage_,
  0
};


struct ReturnDirMessage_MetaInfoInitializer
{  ReturnDirMessage_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ReturnDirMessage::clazzInfo();
    ci->fields =  _ReturnDirMessage_fields;
    ci->methods =  _ReturnDirMessage_methods;
    ci->_scopeParent = acdk_net_srfsys_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ReturnDirMessage_MetaInfoInitializer ReturnDirMessage_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace net
} // namespace srfsys


namespace acdk { 
namespace net { 
namespace srfsys { 


//static
::acdk::lang::RObject
FileOpMessage_create_array(int length)
{
  return new ObjectArrayImpl<RFileOpMessage>(length);
}

//static
::acdk::lang::RObject
FileOpMessage_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class FileOpMessage_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileOpMessage_method_FileOpMessage_I_LRFileOpMessage__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileOpMessage((FileOp)args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileOpMessage_method_FileOpMessage__LRFileOpMessage__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileOpMessage();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileOpMessage_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)FileOpMessage::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileOpMessage_method_overwriteExistant__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileOpMessage* This = dmi_cast<FileOpMessage>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FileOpMessage::overwriteExistant();
    else
      ret = This->overwriteExistant();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FileOpMessage_fields_data_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    FileOpMessage* This = dmi_cast<FileOpMessage>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->data, flags);
    else
      This->data = (RbyteArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FileOpMessage_fields_file_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    FileOpMessage* This = dmi_cast<FileOpMessage>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->file, flags);
    else
      This->file = (RFileInfo)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FileOpMessage_fields_fop_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    FileOpMessage* This = dmi_cast<FileOpMessage>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->fop), flags);
    else
      This->fop = (FileOp)var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FileOpMessage_fields_fopflags_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    FileOpMessage* This = dmi_cast<FileOpMessage>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->fopflags, flags);
    else
      This->fopflags = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo FileOpMessage_fields_data = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "data", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo(),
  FileOpMessage_MetainfoWrapper::FileOpMessage_fields_data_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo FileOpMessage_fields_file = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "file", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileInfo::clazzInfo(),
  FileOpMessage_MetainfoWrapper::FileOpMessage_fields_file_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo FileOpMessage_fields_fop = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "fop", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  FileOpMessage_MetainfoWrapper::FileOpMessage_fields_fop_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo FileOpMessage_fields_fopflags = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "fopflags", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  FileOpMessage_MetainfoWrapper::FileOpMessage_fields_fopflags_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _FileOpMessage_fields[] = 
{
  &FileOpMessage_fields_data,
  &FileOpMessage_fields_file,
  &FileOpMessage_fields_fop,
  &FileOpMessage_fields_fopflags,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo FileOpMessage_methods_FileOpMessage_I_LRFileOpMessage__arg_op = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "op", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileOpMessage_methods_FileOpMessage_I_LRFileOpMessage__args[] = 
{
  &FileOpMessage_methods_FileOpMessage_I_LRFileOpMessage__arg_op,
  0
};

::acdk::lang::dmi::ClazzInfo* FileOpMessage_methods_FileOpMessage_I_LRFileOpMessage__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileOpMessage_method_FileOpMessage_I_LRFileOpMessage_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "FileOpMessage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileOpMessage::clazzInfo(), // return type
  "_0_FileOpMessage", // alternative name of method
  -1, // altlabelHashCode
  FileOpMessage_methods_FileOpMessage_I_LRFileOpMessage__args, // the arguments
  0, //arguments count
  FileOpMessage_methods_FileOpMessage_I_LRFileOpMessage__exceptions, // the declared exceptions
  FileOpMessage_MetainfoWrapper::FileOpMessage_method_FileOpMessage_I_LRFileOpMessage__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileOpMessage_methods_FileOpMessage__LRFileOpMessage__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileOpMessage_methods_FileOpMessage__LRFileOpMessage__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileOpMessage_method_FileOpMessage__LRFileOpMessage_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "FileOpMessage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileOpMessage::clazzInfo(), // return type
  "_1_FileOpMessage", // alternative name of method
  -1, // altlabelHashCode
  FileOpMessage_methods_FileOpMessage__LRFileOpMessage__args, // the arguments
  0, //arguments count
  FileOpMessage_methods_FileOpMessage__LRFileOpMessage__exceptions, // the declared exceptions
  FileOpMessage_MetainfoWrapper::FileOpMessage_method_FileOpMessage__LRFileOpMessage__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileOpMessage_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileOpMessage_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileOpMessage_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  FileOpMessage_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  FileOpMessage_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  FileOpMessage_MetainfoWrapper::FileOpMessage_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileOpMessage_methods_overwriteExistant__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileOpMessage_methods_overwriteExistant__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileOpMessage_method_overwriteExistant__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "overwriteExistant", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_overwriteExistant", // alternative name of method
  -1, // altlabelHashCode
  FileOpMessage_methods_overwriteExistant__Z_args, // the arguments
  0, //arguments count
  FileOpMessage_methods_overwriteExistant__Z_exceptions, // the declared exceptions
  FileOpMessage_MetainfoWrapper::FileOpMessage_method_overwriteExistant__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _FileOpMessage_methods[] = 
{
  &FileOpMessage_method_FileOpMessage_I_LRFileOpMessage_,
  &FileOpMessage_method_FileOpMessage__LRFileOpMessage_,
  &FileOpMessage_method_GetClass__L_acdk_lang_RClass_,
  &FileOpMessage_method_overwriteExistant__Z,
  0
};


struct FileOpMessage_MetaInfoInitializer
{  FileOpMessage_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = FileOpMessage::clazzInfo();
    ci->fields =  _FileOpMessage_fields;
    ci->methods =  _FileOpMessage_methods;
    ci->_scopeParent = acdk_net_srfsys_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
FileOpMessage_MetaInfoInitializer FileOpMessage_MetaInfoInitializer_staticinstance__;


struct FileOpMessage_clazzInfo_ClazzAttributesResInitializer1
{
  FileOpMessage_clazzInfo_ClazzAttributesResInitializer1()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&FileOpMessage_methods_FileOpMessage_I_LRFileOpMessage__arg_op, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)FileOpMetaInf::GetEnumInfo()));
  }
};

FileOpMessage_clazzInfo_ClazzAttributesResInitializer1 FileOpMessage_clazzInfo_ClazzAttributesResInitializer1_instance;



} // namespace acdk
} // namespace net
} // namespace srfsys


namespace acdk { 
namespace net { 
namespace srfsys { 


//static
::acdk::lang::RObject
AdminMessage_create_array(int length)
{
  return new ObjectArrayImpl<RAdminMessage>(length);
}

//static
::acdk::lang::RObject
AdminMessage_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class AdminMessage_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AdminMessage_method_AdminMessage__LRAdminMessage__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AdminMessage();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AdminMessage_method_AdminMessage_I_LRAdminMessage__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AdminMessage((AdminCommand)args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AdminMessage_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AdminMessage::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AdminMessage_fields_adminCommand_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AdminMessage* This = dmi_cast<AdminMessage>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->adminCommand, flags);
    else
      This->adminCommand = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo AdminMessage_fields_adminCommand = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "adminCommand", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  AdminMessage_MetainfoWrapper::AdminMessage_fields_adminCommand_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _AdminMessage_fields[] = 
{
  &AdminMessage_fields_adminCommand,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* AdminMessage_methods_AdminMessage__LRAdminMessage__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AdminMessage_methods_AdminMessage__LRAdminMessage__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AdminMessage_method_AdminMessage__LRAdminMessage_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "AdminMessage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AdminMessage::clazzInfo(), // return type
  "_0_AdminMessage", // alternative name of method
  -1, // altlabelHashCode
  AdminMessage_methods_AdminMessage__LRAdminMessage__args, // the arguments
  0, //arguments count
  AdminMessage_methods_AdminMessage__LRAdminMessage__exceptions, // the declared exceptions
  AdminMessage_MetainfoWrapper::AdminMessage_method_AdminMessage__LRAdminMessage__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AdminMessage_methods_AdminMessage_I_LRAdminMessage__arg_cmd = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "cmd", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AdminMessage_methods_AdminMessage_I_LRAdminMessage__args[] = 
{
  &AdminMessage_methods_AdminMessage_I_LRAdminMessage__arg_cmd,
  0
};

::acdk::lang::dmi::ClazzInfo* AdminMessage_methods_AdminMessage_I_LRAdminMessage__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AdminMessage_method_AdminMessage_I_LRAdminMessage_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "AdminMessage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AdminMessage::clazzInfo(), // return type
  "_1_AdminMessage", // alternative name of method
  -1, // altlabelHashCode
  AdminMessage_methods_AdminMessage_I_LRAdminMessage__args, // the arguments
  0, //arguments count
  AdminMessage_methods_AdminMessage_I_LRAdminMessage__exceptions, // the declared exceptions
  AdminMessage_MetainfoWrapper::AdminMessage_method_AdminMessage_I_LRAdminMessage__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AdminMessage_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AdminMessage_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AdminMessage_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  AdminMessage_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  AdminMessage_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  AdminMessage_MetainfoWrapper::AdminMessage_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _AdminMessage_methods[] = 
{
  &AdminMessage_method_AdminMessage__LRAdminMessage_,
  &AdminMessage_method_AdminMessage_I_LRAdminMessage_,
  &AdminMessage_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct AdminMessage_MetaInfoInitializer
{  AdminMessage_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = AdminMessage::clazzInfo();
    ci->fields =  _AdminMessage_fields;
    ci->methods =  _AdminMessage_methods;
    ci->_scopeParent = acdk_net_srfsys_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
AdminMessage_MetaInfoInitializer AdminMessage_MetaInfoInitializer_staticinstance__;


struct AdminMessage_clazzInfo_ClazzAttributesResInitializer2
{
  AdminMessage_clazzInfo_ClazzAttributesResInitializer2()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&AdminMessage_methods_AdminMessage_I_LRAdminMessage__arg_cmd, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)AdminCommandMetaInf::GetEnumInfo()));
  }
};

AdminMessage_clazzInfo_ClazzAttributesResInitializer2 AdminMessage_clazzInfo_ClazzAttributesResInitializer2_instance;



} // namespace acdk
} // namespace net
} // namespace srfsys


namespace acdk { 
namespace net { 
namespace srfsys { 


//static
::acdk::lang::RObject
ExceptionMessage_create_array(int length)
{
  return new ObjectArrayImpl<RExceptionMessage>(length);
}

//static
::acdk::lang::RObject
ExceptionMessage_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ExceptionMessage_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExceptionMessage_method_ExceptionMessage__LRExceptionMessage__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ExceptionMessage();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExceptionMessage_method_ExceptionMessage_LRThrowable__LRExceptionMessage__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ExceptionMessage((RThrowable)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExceptionMessage_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ExceptionMessage::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ExceptionMessage_fields_exception_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ExceptionMessage* This = dmi_cast<ExceptionMessage>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->exception, flags);
    else
      This->exception = (RThrowable)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ExceptionMessage_fields_exception = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "exception", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThrowable::clazzInfo(),
  ExceptionMessage_MetainfoWrapper::ExceptionMessage_fields_exception_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ExceptionMessage_fields[] = 
{
  &ExceptionMessage_fields_exception,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExceptionMessage_methods_ExceptionMessage__LRExceptionMessage__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ExceptionMessage_methods_ExceptionMessage__LRExceptionMessage__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExceptionMessage_method_ExceptionMessage__LRExceptionMessage_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ExceptionMessage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ExceptionMessage::clazzInfo(), // return type
  "_0_ExceptionMessage", // alternative name of method
  -1, // altlabelHashCode
  ExceptionMessage_methods_ExceptionMessage__LRExceptionMessage__args, // the arguments
  0, //arguments count
  ExceptionMessage_methods_ExceptionMessage__LRExceptionMessage__exceptions, // the declared exceptions
  ExceptionMessage_MetainfoWrapper::ExceptionMessage_method_ExceptionMessage__LRExceptionMessage__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ExceptionMessage_methods_ExceptionMessage_LRThrowable__LRExceptionMessage__arg_ex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThrowable::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExceptionMessage_methods_ExceptionMessage_LRThrowable__LRExceptionMessage__args[] = 
{
  &ExceptionMessage_methods_ExceptionMessage_LRThrowable__LRExceptionMessage__arg_ex,
  0
};

::acdk::lang::dmi::ClazzInfo* ExceptionMessage_methods_ExceptionMessage_LRThrowable__LRExceptionMessage__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExceptionMessage_method_ExceptionMessage_LRThrowable__LRExceptionMessage_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ExceptionMessage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ExceptionMessage::clazzInfo(), // return type
  "_1_ExceptionMessage", // alternative name of method
  -1, // altlabelHashCode
  ExceptionMessage_methods_ExceptionMessage_LRThrowable__LRExceptionMessage__args, // the arguments
  0, //arguments count
  ExceptionMessage_methods_ExceptionMessage_LRThrowable__LRExceptionMessage__exceptions, // the declared exceptions
  ExceptionMessage_MetainfoWrapper::ExceptionMessage_method_ExceptionMessage_LRThrowable__LRExceptionMessage__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExceptionMessage_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ExceptionMessage_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExceptionMessage_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ExceptionMessage_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ExceptionMessage_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ExceptionMessage_MetainfoWrapper::ExceptionMessage_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ExceptionMessage_methods[] = 
{
  &ExceptionMessage_method_ExceptionMessage__LRExceptionMessage_,
  &ExceptionMessage_method_ExceptionMessage_LRThrowable__LRExceptionMessage_,
  &ExceptionMessage_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct ExceptionMessage_MetaInfoInitializer
{  ExceptionMessage_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ExceptionMessage::clazzInfo();
    ci->fields =  _ExceptionMessage_fields;
    ci->methods =  _ExceptionMessage_methods;
    ci->_scopeParent = acdk_net_srfsys_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ExceptionMessage_MetaInfoInitializer ExceptionMessage_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace net
} // namespace srfsys


namespace acdk { 
namespace net { 
namespace srfsys { 


//static
::acdk::lang::RObject
SRFileSystemClient_create_array(int length)
{
  return new ObjectArrayImpl<RSRFileSystemClient>(length);
}

//static
::acdk::lang::RObject
SRFileSystemClient_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SRFileSystemClient_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SRFileSystemClient_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SRFileSystemClient::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SRFileSystemClient_method_SRFileSystemClient__LRSRFileSystemClient__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SRFileSystemClient();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SRFileSystemClient_method_SRFileSystemClient_INLRInetAddress_I_LRSRFileSystemClient__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SRFileSystemClient((RInetAddress)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SRFileSystemClient_method_connect_INLRString_INLRString_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SRFileSystemClient* This = dmi_cast<SRFileSystemClient>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SRFileSystemClient::connect((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    else
      ret = This->connect((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SRFileSystemClient_method_connect_INLRInetAddress_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SRFileSystemClient* This = dmi_cast<SRFileSystemClient>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SRFileSystemClient::connect((RInetAddress)args[0].getObjectVar(), args[1].getIntVar());
    else
        This->connect((RInetAddress)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SRFileSystemClient_method_disconnect__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SRFileSystemClient* This = dmi_cast<SRFileSystemClient>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SRFileSystemClient::disconnect();
    else
        This->disconnect();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SRFileSystemClient_method_file_INLRString__LRFile__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SRFileSystemClient* This = dmi_cast<SRFileSystemClient>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SRFileSystemClient::file((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->file((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SRFileSystemClient_method_findFile_INLRString__LRFileInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SRFileSystemClient* This = dmi_cast<SRFileSystemClient>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SRFileSystemClient::findFile((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->findFile((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SRFileSystemClient_method_getFileImpl_INLRString__LRFileImpl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SRFileSystemClient* This = dmi_cast<SRFileSystemClient>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SRFileSystemClient::getFileImpl((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getFileImpl((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SRFileSystemClient_method_getRootName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SRFileSystemClient* This = dmi_cast<SRFileSystemClient>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SRFileSystemClient::getRootName();
    else
        ret = (::acdk::lang::RObject)This->getRootName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SRFileSystemClient_method_listFiles_INLRString_I_LRFileArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SRFileSystemClient* This = dmi_cast<SRFileSystemClient>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SRFileSystemClient::listFiles((RString)args[0].getObjectVar(), args[1].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->listFiles((RString)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SRFileSystemClient_method_loadFileTree_INLRString_Z_LRFileInfoArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SRFileSystemClient* This = dmi_cast<SRFileSystemClient>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SRFileSystemClient::loadFileTree((RString)args[0].getObjectVar(), args[1].getBoolVar());
    else
        ret = (::acdk::lang::RObject)This->loadFileTree((RString)args[0].getObjectVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SRFileSystemClient_method_loadFileTree_INLRString__LRFileInfoArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SRFileSystemClient* This = dmi_cast<SRFileSystemClient>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SRFileSystemClient::loadFileTree((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->loadFileTree((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SRFileSystemClient_method_login_INLRString_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SRFileSystemClient* This = dmi_cast<SRFileSystemClient>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SRFileSystemClient::login((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
      ret = This->login((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SRFileSystemClient_method_ownsFile_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SRFileSystemClient* This = dmi_cast<SRFileSystemClient>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SRFileSystemClient::ownsFile((RString)args[0].getObjectVar());
    else
      ret = This->ownsFile((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SRFileSystemClient_method_ping_Z_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SRFileSystemClient* This = dmi_cast<SRFileSystemClient>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SRFileSystemClient::ping(args[0].getBoolVar());
    else
      ret = This->ping(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SRFileSystemClient_method_ping__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SRFileSystemClient* This = dmi_cast<SRFileSystemClient>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SRFileSystemClient::ping();
    else
      ret = This->ping();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SRFileSystemClient_method_retriveFile_INLRFileInfo__LRbyteArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SRFileSystemClient* This = dmi_cast<SRFileSystemClient>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SRFileSystemClient::retriveFile((RFileInfo)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->retriveFile((RFileInfo)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SRFileSystemClient_method_sendFile_INLRFileInfo_INLRbyteArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SRFileSystemClient* This = dmi_cast<SRFileSystemClient>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SRFileSystemClient::sendFile((RFileInfo)args[0].getObjectVar(), (RbyteArray)args[1].getObjectVar());
    else
        This->sendFile((RFileInfo)args[0].getObjectVar(), (RbyteArray)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SRFileSystemClient_method_shutdownServer__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SRFileSystemClient* This = dmi_cast<SRFileSystemClient>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SRFileSystemClient::shutdownServer();
    else
        This->shutdownServer();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SRFileSystemClient_method_updateTransRate__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SRFileSystemClient* This = dmi_cast<SRFileSystemClient>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SRFileSystemClient::updateTransRate();
    else
        This->updateTransRate();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SRFileSystemClient_fields__bin_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SRFileSystemClient* This = dmi_cast<SRFileSystemClient>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_bin, flags);
    else
      This->_bin = (::acdk::io::RObjectReader)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SRFileSystemClient_fields__bout_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SRFileSystemClient* This = dmi_cast<SRFileSystemClient>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_bout, flags);
    else
      This->_bout = (::acdk::io::RObjectWriter)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SRFileSystemClient_fields__files_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SRFileSystemClient* This = dmi_cast<SRFileSystemClient>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_files, flags);
    else
      This->_files = (RFileInfoArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SRFileSystemClient_fields__host_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SRFileSystemClient* This = dmi_cast<SRFileSystemClient>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_host, flags);
    else
      This->_host = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SRFileSystemClient_fields__protocolName_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(SRFileSystemClient::_protocolName, flags);
    else
      SRFileSystemClient::_protocolName = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SRFileSystemClient_fields__root_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SRFileSystemClient* This = dmi_cast<SRFileSystemClient>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_root, flags);
    else
      This->_root = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SRFileSystemClient_fields__server_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SRFileSystemClient* This = dmi_cast<SRFileSystemClient>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_server, flags);
    else
      This->_server = (::acdk::net::RSocket)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SRFileSystemClient_fields__transReader_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SRFileSystemClient* This = dmi_cast<SRFileSystemClient>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_transReader, flags);
    else
      This->_transReader = (::acdk::net::RTransRateReader)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SRFileSystemClient_fields__transWriter_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SRFileSystemClient* This = dmi_cast<SRFileSystemClient>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_transWriter, flags);
    else
      This->_transWriter = (::acdk::net::RTransRateWriter)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo SRFileSystemClient_fields__bin = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo | 0x200000,
  0, //AttributesRes
  "_bin", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::RObjectReader::clazzInfo(),
  SRFileSystemClient_MetainfoWrapper::SRFileSystemClient_fields__bin_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SRFileSystemClient_fields__bout = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo | 0x200000,
  0, //AttributesRes
  "_bout", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::RObjectWriter::clazzInfo(),
  SRFileSystemClient_MetainfoWrapper::SRFileSystemClient_fields__bout_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SRFileSystemClient_fields__files = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_files", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileInfoArray::clazzInfo(),
  SRFileSystemClient_MetainfoWrapper::SRFileSystemClient_fields__files_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SRFileSystemClient_fields__host = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_host", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  SRFileSystemClient_MetainfoWrapper::SRFileSystemClient_fields__host_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SRFileSystemClient_fields__protocolName = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_protocolName", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  SRFileSystemClient_MetainfoWrapper::SRFileSystemClient_fields__protocolName_accessor, // read/write access to this fields
  (void*)SRFileSystemClient::_protocolName._ref_this() // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SRFileSystemClient_fields__root = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_root", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  SRFileSystemClient_MetainfoWrapper::SRFileSystemClient_fields__root_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SRFileSystemClient_fields__server = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo | 0x200000,
  0, //AttributesRes
  "_server", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::net::RSocket::clazzInfo(),
  SRFileSystemClient_MetainfoWrapper::SRFileSystemClient_fields__server_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SRFileSystemClient_fields__transReader = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo | 0x200000,
  0, //AttributesRes
  "_transReader", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::net::RTransRateReader::clazzInfo(),
  SRFileSystemClient_MetainfoWrapper::SRFileSystemClient_fields__transReader_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SRFileSystemClient_fields__transWriter = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo | 0x200000,
  0, //AttributesRes
  "_transWriter", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::net::RTransRateWriter::clazzInfo(),
  SRFileSystemClient_MetainfoWrapper::SRFileSystemClient_fields__transWriter_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _SRFileSystemClient_fields[] = 
{
  &SRFileSystemClient_fields__bin,
  &SRFileSystemClient_fields__bout,
  &SRFileSystemClient_fields__files,
  &SRFileSystemClient_fields__host,
  &SRFileSystemClient_fields__protocolName,
  &SRFileSystemClient_fields__root,
  &SRFileSystemClient_fields__server,
  &SRFileSystemClient_fields__transReader,
  &SRFileSystemClient_fields__transWriter,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SRFileSystemClient_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SRFileSystemClient_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SRFileSystemClient_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_k_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SRFileSystemClient_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SRFileSystemClient_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SRFileSystemClient_MetainfoWrapper::SRFileSystemClient_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SRFileSystemClient_methods_SRFileSystemClient__LRSRFileSystemClient__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SRFileSystemClient_methods_SRFileSystemClient__LRSRFileSystemClient__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SRFileSystemClient_method_SRFileSystemClient__LRSRFileSystemClient_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SRFileSystemClient", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SRFileSystemClient::clazzInfo(), // return type
  "_0_SRFileSystemClient", // alternative name of method
  -1, // altlabelHashCode
  SRFileSystemClient_methods_SRFileSystemClient__LRSRFileSystemClient__args, // the arguments
  0, //arguments count
  SRFileSystemClient_methods_SRFileSystemClient__LRSRFileSystemClient__exceptions, // the declared exceptions
  SRFileSystemClient_MetainfoWrapper::SRFileSystemClient_method_SRFileSystemClient__LRSRFileSystemClient__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SRFileSystemClient_methods_SRFileSystemClient_INLRInetAddress_I_LRSRFileSystemClient__arg_address = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "address", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetAddress::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SRFileSystemClient_methods_SRFileSystemClient_INLRInetAddress_I_LRSRFileSystemClient__arg_port = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "port", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SRFileSystemClient_methods_SRFileSystemClient_INLRInetAddress_I_LRSRFileSystemClient__args[] = 
{
  &SRFileSystemClient_methods_SRFileSystemClient_INLRInetAddress_I_LRSRFileSystemClient__arg_address,
  &SRFileSystemClient_methods_SRFileSystemClient_INLRInetAddress_I_LRSRFileSystemClient__arg_port,
  0
};

::acdk::lang::dmi::ClazzInfo* SRFileSystemClient_methods_SRFileSystemClient_INLRInetAddress_I_LRSRFileSystemClient__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SRFileSystemClient_method_SRFileSystemClient_INLRInetAddress_I_LRSRFileSystemClient_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SRFileSystemClient", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SRFileSystemClient::clazzInfo(), // return type
  "_1_SRFileSystemClient", // alternative name of method
  -1, // altlabelHashCode
  SRFileSystemClient_methods_SRFileSystemClient_INLRInetAddress_I_LRSRFileSystemClient__args, // the arguments
  0, //arguments count
  SRFileSystemClient_methods_SRFileSystemClient_INLRInetAddress_I_LRSRFileSystemClient__exceptions, // the declared exceptions
  SRFileSystemClient_MetainfoWrapper::SRFileSystemClient_method_SRFileSystemClient_INLRInetAddress_I_LRSRFileSystemClient__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SRFileSystemClient_methods_connect_INLRString_INLRString_INLRString__Z_arg_constr = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "constr", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SRFileSystemClient_methods_connect_INLRString_INLRString_INLRString__Z_arg_username = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "username", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SRFileSystemClient_methods_connect_INLRString_INLRString_INLRString__Z_arg_pass = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pass", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SRFileSystemClient_methods_connect_INLRString_INLRString_INLRString__Z_args[] = 
{
  &SRFileSystemClient_methods_connect_INLRString_INLRString_INLRString__Z_arg_constr,
  &SRFileSystemClient_methods_connect_INLRString_INLRString_INLRString__Z_arg_username,
  &SRFileSystemClient_methods_connect_INLRString_INLRString_INLRString__Z_arg_pass,
  0
};

::acdk::lang::dmi::ClazzInfo* SRFileSystemClient_methods_connect_INLRString_INLRString_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SRFileSystemClient_method_connect_INLRString_INLRString_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "connect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_connect", // alternative name of method
  -1, // altlabelHashCode
  SRFileSystemClient_methods_connect_INLRString_INLRString_INLRString__Z_args, // the arguments
  0, //arguments count
  SRFileSystemClient_methods_connect_INLRString_INLRString_INLRString__Z_exceptions, // the declared exceptions
  SRFileSystemClient_MetainfoWrapper::SRFileSystemClient_method_connect_INLRString_INLRString_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SRFileSystemClient_methods_connect_INLRInetAddress_I_V_arg_address = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "address", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetAddress::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SRFileSystemClient_methods_connect_INLRInetAddress_I_V_arg_port = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "port", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SRFileSystemClient_methods_connect_INLRInetAddress_I_V_args[] = 
{
  &SRFileSystemClient_methods_connect_INLRInetAddress_I_V_arg_address,
  &SRFileSystemClient_methods_connect_INLRInetAddress_I_V_arg_port,
  0
};

::acdk::lang::dmi::ClazzInfo* SRFileSystemClient_methods_connect_INLRInetAddress_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SRFileSystemClient_method_connect_INLRInetAddress_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "connect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_connect", // alternative name of method
  -1, // altlabelHashCode
  SRFileSystemClient_methods_connect_INLRInetAddress_I_V_args, // the arguments
  0, //arguments count
  SRFileSystemClient_methods_connect_INLRInetAddress_I_V_exceptions, // the declared exceptions
  SRFileSystemClient_MetainfoWrapper::SRFileSystemClient_method_connect_INLRInetAddress_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SRFileSystemClient_methods_disconnect__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SRFileSystemClient_methods_disconnect__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SRFileSystemClient_method_disconnect__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "disconnect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_i_disconnect", // alternative name of method
  -1, // altlabelHashCode
  SRFileSystemClient_methods_disconnect__V_args, // the arguments
  0, //arguments count
  SRFileSystemClient_methods_disconnect__V_exceptions, // the declared exceptions
  SRFileSystemClient_MetainfoWrapper::SRFileSystemClient_method_disconnect__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SRFileSystemClient_methods_file_INLRString__LRFile__arg_path = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "path", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SRFileSystemClient_methods_file_INLRString__LRFile__args[] = 
{
  &SRFileSystemClient_methods_file_INLRString__LRFile__arg_path,
  0
};

::acdk::lang::dmi::ClazzInfo* SRFileSystemClient_methods_file_INLRString__LRFile__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SRFileSystemClient_method_file_INLRString__LRFile_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "file", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFile::clazzInfo(), // return type
  "_f_file", // alternative name of method
  -1, // altlabelHashCode
  SRFileSystemClient_methods_file_INLRString__LRFile__args, // the arguments
  0, //arguments count
  SRFileSystemClient_methods_file_INLRString__LRFile__exceptions, // the declared exceptions
  SRFileSystemClient_MetainfoWrapper::SRFileSystemClient_method_file_INLRString__LRFile__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SRFileSystemClient_methods_findFile_INLRString__LRFileInfo__arg_fqfile = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fqfile", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SRFileSystemClient_methods_findFile_INLRString__LRFileInfo__args[] = 
{
  &SRFileSystemClient_methods_findFile_INLRString__LRFileInfo__arg_fqfile,
  0
};

::acdk::lang::dmi::ClazzInfo* SRFileSystemClient_methods_findFile_INLRString__LRFileInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SRFileSystemClient_method_findFile_INLRString__LRFileInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileInfo::clazzInfo(), // return type
  "_h_findFile", // alternative name of method
  -1, // altlabelHashCode
  SRFileSystemClient_methods_findFile_INLRString__LRFileInfo__args, // the arguments
  0, //arguments count
  SRFileSystemClient_methods_findFile_INLRString__LRFileInfo__exceptions, // the declared exceptions
  SRFileSystemClient_MetainfoWrapper::SRFileSystemClient_method_findFile_INLRString__LRFileInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SRFileSystemClient_methods_getFileImpl_INLRString__LRFileImpl__arg_fqpath = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fqpath", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SRFileSystemClient_methods_getFileImpl_INLRString__LRFileImpl__args[] = 
{
  &SRFileSystemClient_methods_getFileImpl_INLRString__LRFileImpl__arg_fqpath,
  0
};

::acdk::lang::dmi::ClazzInfo* SRFileSystemClient_methods_getFileImpl_INLRString__LRFileImpl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SRFileSystemClient_method_getFileImpl_INLRString__LRFileImpl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFileImpl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileImpl::clazzInfo(), // return type
  "_g_getFileImpl", // alternative name of method
  -1, // altlabelHashCode
  SRFileSystemClient_methods_getFileImpl_INLRString__LRFileImpl__args, // the arguments
  0, //arguments count
  SRFileSystemClient_methods_getFileImpl_INLRString__LRFileImpl__exceptions, // the declared exceptions
  SRFileSystemClient_MetainfoWrapper::SRFileSystemClient_method_getFileImpl_INLRString__LRFileImpl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SRFileSystemClient_methods_getRootName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SRFileSystemClient_methods_getRootName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SRFileSystemClient_method_getRootName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRootName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_4_getRootName", // alternative name of method
  -1, // altlabelHashCode
  SRFileSystemClient_methods_getRootName__LRString__args, // the arguments
  0, //arguments count
  SRFileSystemClient_methods_getRootName__LRString__exceptions, // the declared exceptions
  SRFileSystemClient_MetainfoWrapper::SRFileSystemClient_method_getRootName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SRFileSystemClient_methods_listFiles_INLRString_I_LRFileArray__arg_directory = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "directory", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SRFileSystemClient_methods_listFiles_INLRString_I_LRFileArray__arg_listflags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "listflags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SRFileSystemClient_methods_listFiles_INLRString_I_LRFileArray__args[] = 
{
  &SRFileSystemClient_methods_listFiles_INLRString_I_LRFileArray__arg_directory,
  &SRFileSystemClient_methods_listFiles_INLRString_I_LRFileArray__arg_listflags,
  0
};

::acdk::lang::dmi::ClazzInfo* SRFileSystemClient_methods_listFiles_INLRString_I_LRFileArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SRFileSystemClient_method_listFiles_INLRString_I_LRFileArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "listFiles", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileArray::clazzInfo(), // return type
  "_e_listFiles", // alternative name of method
  -1, // altlabelHashCode
  SRFileSystemClient_methods_listFiles_INLRString_I_LRFileArray__args, // the arguments
  0, //arguments count
  SRFileSystemClient_methods_listFiles_INLRString_I_LRFileArray__exceptions, // the declared exceptions
  SRFileSystemClient_MetainfoWrapper::SRFileSystemClient_method_listFiles_INLRString_I_LRFileArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SRFileSystemClient_methods_loadFileTree_INLRString_Z_LRFileInfoArray__arg_root = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "root", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SRFileSystemClient_methods_loadFileTree_INLRString_Z_LRFileInfoArray__arg_recursive = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "recursive", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SRFileSystemClient_methods_loadFileTree_INLRString_Z_LRFileInfoArray__args[] = 
{
  &SRFileSystemClient_methods_loadFileTree_INLRString_Z_LRFileInfoArray__arg_root,
  &SRFileSystemClient_methods_loadFileTree_INLRString_Z_LRFileInfoArray__arg_recursive,
  0
};

::acdk::lang::dmi::ClazzInfo* SRFileSystemClient_methods_loadFileTree_INLRString_Z_LRFileInfoArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SRFileSystemClient_method_loadFileTree_INLRString_Z_LRFileInfoArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "loadFileTree", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileInfoArray::clazzInfo(), // return type
  "_b_loadFileTree", // alternative name of method
  -1, // altlabelHashCode
  SRFileSystemClient_methods_loadFileTree_INLRString_Z_LRFileInfoArray__args, // the arguments
  0, //arguments count
  SRFileSystemClient_methods_loadFileTree_INLRString_Z_LRFileInfoArray__exceptions, // the declared exceptions
  SRFileSystemClient_MetainfoWrapper::SRFileSystemClient_method_loadFileTree_INLRString_Z_LRFileInfoArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SRFileSystemClient_methods_loadFileTree_INLRString__LRFileInfoArray__arg_root = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "root", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SRFileSystemClient_methods_loadFileTree_INLRString__LRFileInfoArray__args[] = 
{
  &SRFileSystemClient_methods_loadFileTree_INLRString__LRFileInfoArray__arg_root,
  0
};

::acdk::lang::dmi::ClazzInfo* SRFileSystemClient_methods_loadFileTree_INLRString__LRFileInfoArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SRFileSystemClient_method_loadFileTree_INLRString__LRFileInfoArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "loadFileTree", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileInfoArray::clazzInfo(), // return type
  "_c_loadFileTree", // alternative name of method
  -1, // altlabelHashCode
  SRFileSystemClient_methods_loadFileTree_INLRString__LRFileInfoArray__args, // the arguments
  0, //arguments count
  SRFileSystemClient_methods_loadFileTree_INLRString__LRFileInfoArray__exceptions, // the declared exceptions
  SRFileSystemClient_MetainfoWrapper::SRFileSystemClient_method_loadFileTree_INLRString__LRFileInfoArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SRFileSystemClient_methods_login_INLRString_INLRString__Z_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SRFileSystemClient_methods_login_INLRString_INLRString__Z_arg_passwd = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "passwd", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SRFileSystemClient_methods_login_INLRString_INLRString__Z_args[] = 
{
  &SRFileSystemClient_methods_login_INLRString_INLRString__Z_arg_name,
  &SRFileSystemClient_methods_login_INLRString_INLRString__Z_arg_passwd,
  0
};

::acdk::lang::dmi::ClazzInfo* SRFileSystemClient_methods_login_INLRString_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SRFileSystemClient_method_login_INLRString_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "login", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_login", // alternative name of method
  -1, // altlabelHashCode
  SRFileSystemClient_methods_login_INLRString_INLRString__Z_args, // the arguments
  0, //arguments count
  SRFileSystemClient_methods_login_INLRString_INLRString__Z_exceptions, // the declared exceptions
  SRFileSystemClient_MetainfoWrapper::SRFileSystemClient_method_login_INLRString_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SRFileSystemClient_methods_ownsFile_INLRString__Z_arg_fqfname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fqfname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SRFileSystemClient_methods_ownsFile_INLRString__Z_args[] = 
{
  &SRFileSystemClient_methods_ownsFile_INLRString__Z_arg_fqfname,
  0
};

::acdk::lang::dmi::ClazzInfo* SRFileSystemClient_methods_ownsFile_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SRFileSystemClient_method_ownsFile_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ownsFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_d_ownsFile", // alternative name of method
  -1, // altlabelHashCode
  SRFileSystemClient_methods_ownsFile_INLRString__Z_args, // the arguments
  0, //arguments count
  SRFileSystemClient_methods_ownsFile_INLRString__Z_exceptions, // the declared exceptions
  SRFileSystemClient_MetainfoWrapper::SRFileSystemClient_method_ownsFile_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SRFileSystemClient_methods_ping_Z_Z_arg_returnping = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "returnping", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SRFileSystemClient_methods_ping_Z_Z_args[] = 
{
  &SRFileSystemClient_methods_ping_Z_Z_arg_returnping,
  0
};

::acdk::lang::dmi::ClazzInfo* SRFileSystemClient_methods_ping_Z_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SRFileSystemClient_method_ping_Z_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ping", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_8_ping", // alternative name of method
  -1, // altlabelHashCode
  SRFileSystemClient_methods_ping_Z_Z_args, // the arguments
  0, //arguments count
  SRFileSystemClient_methods_ping_Z_Z_exceptions, // the declared exceptions
  SRFileSystemClient_MetainfoWrapper::SRFileSystemClient_method_ping_Z_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SRFileSystemClient_methods_ping__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SRFileSystemClient_methods_ping__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SRFileSystemClient_method_ping__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "ping", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_9_ping", // alternative name of method
  -1, // altlabelHashCode
  SRFileSystemClient_methods_ping__Z_args, // the arguments
  0, //arguments count
  SRFileSystemClient_methods_ping__Z_exceptions, // the declared exceptions
  SRFileSystemClient_MetainfoWrapper::SRFileSystemClient_method_ping__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SRFileSystemClient_methods_retriveFile_INLRFileInfo__LRbyteArray__arg_fileInfo = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fileInfo", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SRFileSystemClient_methods_retriveFile_INLRFileInfo__LRbyteArray__args[] = 
{
  &SRFileSystemClient_methods_retriveFile_INLRFileInfo__LRbyteArray__arg_fileInfo,
  0
};

::acdk::lang::dmi::ClazzInfo* SRFileSystemClient_methods_retriveFile_INLRFileInfo__LRbyteArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SRFileSystemClient_method_retriveFile_INLRFileInfo__LRbyteArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "retriveFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo(), // return type
  "_6_retriveFile", // alternative name of method
  -1, // altlabelHashCode
  SRFileSystemClient_methods_retriveFile_INLRFileInfo__LRbyteArray__args, // the arguments
  0, //arguments count
  SRFileSystemClient_methods_retriveFile_INLRFileInfo__LRbyteArray__exceptions, // the declared exceptions
  SRFileSystemClient_MetainfoWrapper::SRFileSystemClient_method_retriveFile_INLRFileInfo__LRbyteArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SRFileSystemClient_methods_sendFile_INLRFileInfo_INLRbyteArray__V_arg_fileInfo = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fileInfo", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SRFileSystemClient_methods_sendFile_INLRFileInfo_INLRbyteArray__V_arg_cont = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cont", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SRFileSystemClient_methods_sendFile_INLRFileInfo_INLRbyteArray__V_args[] = 
{
  &SRFileSystemClient_methods_sendFile_INLRFileInfo_INLRbyteArray__V_arg_fileInfo,
  &SRFileSystemClient_methods_sendFile_INLRFileInfo_INLRbyteArray__V_arg_cont,
  0
};

::acdk::lang::dmi::ClazzInfo* SRFileSystemClient_methods_sendFile_INLRFileInfo_INLRbyteArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SRFileSystemClient_method_sendFile_INLRFileInfo_INLRbyteArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "sendFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_sendFile", // alternative name of method
  -1, // altlabelHashCode
  SRFileSystemClient_methods_sendFile_INLRFileInfo_INLRbyteArray__V_args, // the arguments
  0, //arguments count
  SRFileSystemClient_methods_sendFile_INLRFileInfo_INLRbyteArray__V_exceptions, // the declared exceptions
  SRFileSystemClient_MetainfoWrapper::SRFileSystemClient_method_sendFile_INLRFileInfo_INLRbyteArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SRFileSystemClient_methods_shutdownServer__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SRFileSystemClient_methods_shutdownServer__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SRFileSystemClient_method_shutdownServer__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "shutdownServer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_shutdownServer", // alternative name of method
  -1, // altlabelHashCode
  SRFileSystemClient_methods_shutdownServer__V_args, // the arguments
  0, //arguments count
  SRFileSystemClient_methods_shutdownServer__V_exceptions, // the declared exceptions
  SRFileSystemClient_MetainfoWrapper::SRFileSystemClient_method_shutdownServer__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SRFileSystemClient_methods_updateTransRate__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SRFileSystemClient_methods_updateTransRate__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SRFileSystemClient_method_updateTransRate__V = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateTransRate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_j_updateTransRate", // alternative name of method
  -1, // altlabelHashCode
  SRFileSystemClient_methods_updateTransRate__V_args, // the arguments
  0, //arguments count
  SRFileSystemClient_methods_updateTransRate__V_exceptions, // the declared exceptions
  SRFileSystemClient_MetainfoWrapper::SRFileSystemClient_method_updateTransRate__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SRFileSystemClient_methods[] = 
{
  &SRFileSystemClient_method_GetClass__L_acdk_lang_RClass_,
  &SRFileSystemClient_method_SRFileSystemClient__LRSRFileSystemClient_,
  &SRFileSystemClient_method_SRFileSystemClient_INLRInetAddress_I_LRSRFileSystemClient_,
  &SRFileSystemClient_method_connect_INLRString_INLRString_INLRString__Z,
  &SRFileSystemClient_method_connect_INLRInetAddress_I_V,
  &SRFileSystemClient_method_disconnect__V,
  &SRFileSystemClient_method_file_INLRString__LRFile_,
  &SRFileSystemClient_method_findFile_INLRString__LRFileInfo_,
  &SRFileSystemClient_method_getFileImpl_INLRString__LRFileImpl_,
  &SRFileSystemClient_method_getRootName__LRString_,
  &SRFileSystemClient_method_listFiles_INLRString_I_LRFileArray_,
  &SRFileSystemClient_method_loadFileTree_INLRString_Z_LRFileInfoArray_,
  &SRFileSystemClient_method_loadFileTree_INLRString__LRFileInfoArray_,
  &SRFileSystemClient_method_login_INLRString_INLRString__Z,
  &SRFileSystemClient_method_ownsFile_INLRString__Z,
  &SRFileSystemClient_method_ping_Z_Z,
  &SRFileSystemClient_method_ping__Z,
  &SRFileSystemClient_method_retriveFile_INLRFileInfo__LRbyteArray_,
  &SRFileSystemClient_method_sendFile_INLRFileInfo_INLRbyteArray__V,
  &SRFileSystemClient_method_shutdownServer__V,
  &SRFileSystemClient_method_updateTransRate__V,
  0
};


struct SRFileSystemClient_MetaInfoInitializer
{  SRFileSystemClient_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SRFileSystemClient::clazzInfo();
    ci->fields =  _SRFileSystemClient_fields;
    ci->methods =  _SRFileSystemClient_methods;
    ci->_scopeParent = acdk_net_srfsys_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SRFileSystemClient_MetaInfoInitializer SRFileSystemClient_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace net
} // namespace srfsys


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) srfsys_dummyExportFunc() {}
#endif

