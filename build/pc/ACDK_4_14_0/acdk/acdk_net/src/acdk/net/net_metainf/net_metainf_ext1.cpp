// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../net.h"
#include "../Authenticator.h"
#include "../Config.h"
#include "../ContentHandler.h"
#include "../ContentHandlerFactory.h"
#include "../DatagramPacket.h"
#include "../DatagramSocket.h"
#include "../FileNameMap.h"
#include "../FileURLConnection.h"
#include "../HeaderFieldHelper.h"
#include "../HttpURLConnection.h"
#include "../HttpURLConnectionImpl.h"
#include "../InetAddress.h"
#include "../InetSocketAddress.h"
#include "../InetURLConnection.h"
#include "../MalformedURLException.h"
#include "../MimeTypeMapper.h"
#include "../net.h"
#include "../netsysincl.h"
#include "../PasswordAuthentication.h"
#include "../ProtocolException.h"
#include "../ServerSocket.h"
#include "../Socket.h"
#include "../SocketAddress.h"
#include "../SocketException.h"
#include "../SocketImpl.h"
#include "../SocketImplFactory.h"
#include "../SocketLogConsumer.h"
#include "../SocketOptions.h"
#include "../TCPSocket.h"
#include "../TCPSocketFactory.h"
#include "../TransRateReader.h"
#include "../TransRateWriter.h"
#include "../UnknownServiceException.h"
#include "../URL.h"
#include "../URLConnection.h"
#include "../URLDecoder.h"
#include "../URLEncoder.h"
#include "../URLEncoding.h"
#include "../UrlFileSystem.h"
#include "../URLInterface.h"
#include "../URLStreamHandler.h"
#include "../URLStreamHandlerFactory.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace net { 


//static
::acdk::lang::RObject
SocketAddress_create_array(int length)
{
  return new ObjectArrayImpl<RSocketAddress>(length);
}

//static
::acdk::lang::RObject
SocketAddress_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SocketAddress_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SocketAddress_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SocketAddress::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SocketAddress_method_SocketAddress__LRSocketAddress__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SocketAddress();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _SocketAddress_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SocketAddress_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SocketAddress_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SocketAddress_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SocketAddress_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SocketAddress_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SocketAddress_MetainfoWrapper::SocketAddress_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SocketAddress_methods_SocketAddress__LRSocketAddress__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SocketAddress_methods_SocketAddress__LRSocketAddress__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SocketAddress_method_SocketAddress__LRSocketAddress_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SocketAddress", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SocketAddress::clazzInfo(), // return type
  "_0_SocketAddress", // alternative name of method
  -1, // altlabelHashCode
  SocketAddress_methods_SocketAddress__LRSocketAddress__args, // the arguments
  0, //arguments count
  SocketAddress_methods_SocketAddress__LRSocketAddress__exceptions, // the declared exceptions
  SocketAddress_MetainfoWrapper::SocketAddress_method_SocketAddress__LRSocketAddress__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SocketAddress_methods[] = 
{
  &SocketAddress_method_GetClass__L_acdk_lang_RClass_,
  &SocketAddress_method_SocketAddress__LRSocketAddress_,
  0
};


struct SocketAddress_MetaInfoInitializer
{  SocketAddress_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SocketAddress::clazzInfo();
    ci->fields =  _SocketAddress_fields;
    ci->methods =  _SocketAddress_methods;
    ci->_scopeParent = acdk_net_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SocketAddress_MetaInfoInitializer SocketAddress_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
SocketException_create_array(int length)
{
  return new ObjectArrayImpl<RSocketException>(length);
}

//static
::acdk::lang::RObject
SocketException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SocketException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SocketException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SocketException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SocketException_method_SocketException__LRSocketException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SocketException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SocketException_method_SocketException_INLRString__LRSocketException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SocketException(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
};


void ThrowException_SocketException(IN(::acdk::lang::RThrowable) ex)
{
  throw RSocketException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _SocketException_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SocketException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SocketException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SocketException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SocketException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SocketException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SocketException_MetainfoWrapper::SocketException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SocketException_methods_SocketException__LRSocketException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SocketException_methods_SocketException__LRSocketException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SocketException_method_SocketException__LRSocketException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SocketException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SocketException::clazzInfo(), // return type
  "_0_SocketException", // alternative name of method
  -1, // altlabelHashCode
  SocketException_methods_SocketException__LRSocketException__args, // the arguments
  0, //arguments count
  SocketException_methods_SocketException__LRSocketException__exceptions, // the declared exceptions
  SocketException_MetainfoWrapper::SocketException_method_SocketException__LRSocketException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SocketException_methods_SocketException_INLRString__LRSocketException__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SocketException_methods_SocketException_INLRString__LRSocketException__args[] = 
{
  &SocketException_methods_SocketException_INLRString__LRSocketException__arg_what,
  0
};

::acdk::lang::dmi::ClazzInfo* SocketException_methods_SocketException_INLRString__LRSocketException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SocketException_method_SocketException_INLRString__LRSocketException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SocketException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SocketException::clazzInfo(), // return type
  "_1_SocketException", // alternative name of method
  -1, // altlabelHashCode
  SocketException_methods_SocketException_INLRString__LRSocketException__args, // the arguments
  0, //arguments count
  SocketException_methods_SocketException_INLRString__LRSocketException__exceptions, // the declared exceptions
  SocketException_MetainfoWrapper::SocketException_method_SocketException_INLRString__LRSocketException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SocketException_methods[] = 
{
  &SocketException_method_GetClass__L_acdk_lang_RClass_,
  &SocketException_method_SocketException__LRSocketException_,
  &SocketException_method_SocketException_INLRString__LRSocketException_,
  0
};


struct SocketException_MetaInfoInitializer
{  SocketException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SocketException::clazzInfo();
    ci->fields =  _SocketException_fields;
    ci->methods =  _SocketException_methods;
    ci->_scopeParent = acdk_net_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SocketException_MetaInfoInitializer SocketException_MetaInfoInitializer_staticinstance__;


struct SocketException_clazzInfo_ClazzAttributesResInitializer4
{
  SocketException_clazzInfo_ClazzAttributesResInitializer4()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)SocketException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_SocketException));
  }
};

SocketException_clazzInfo_ClazzAttributesResInitializer4 SocketException_clazzInfo_ClazzAttributesResInitializer4_instance;



} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 


//static
::acdk::lang::RObject
SocketImpl_create_array(int length)
{
  return new ObjectArrayImpl<RSocketImpl>(length);
}

//static
::acdk::lang::RObject
SocketImpl_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SocketImpl_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SocketImpl_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SocketImpl::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SocketImpl_method_accept_INLRSocketImpl_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SocketImpl* This = dmi_cast<SocketImpl>(This_);
  ret = This->accept(::acdk::lang::dmi::castTo< RSocketImpl>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SocketImpl_method_accept_INLRSocketImpl__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SocketImpl* This = dmi_cast<SocketImpl>(This_);
  ret = This->accept(::acdk::lang::dmi::castTo< RSocketImpl>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SocketImpl_method_available__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SocketImpl* This = dmi_cast<SocketImpl>(This_);
  ret = This->available();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SocketImpl_method_bind_INLRInetAddress_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SocketImpl* This = dmi_cast<SocketImpl>(This_);
    This->bind(::acdk::lang::dmi::castTo< RInetAddress>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SocketImpl_method_close__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SocketImpl* This = dmi_cast<SocketImpl>(This_);
    This->close();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SocketImpl_method_connect_INLRInetAddress_II_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SocketImpl* This = dmi_cast<SocketImpl>(This_);
  ret = This->connect(::acdk::lang::dmi::castTo< RInetAddress>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SocketImpl_method_connect_INLRInetAddress_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SocketImpl* This = dmi_cast<SocketImpl>(This_);
  ret = This->connect(::acdk::lang::dmi::castTo< RInetAddress>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SocketImpl_method_connect_INLRString_II_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SocketImpl* This = dmi_cast<SocketImpl>(This_);
  ret = This->connect(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SocketImpl_method_connect_INLRString_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SocketImpl* This = dmi_cast<SocketImpl>(This_);
  ret = This->connect(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SocketImpl_method_create_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SocketImpl* This = dmi_cast<SocketImpl>(This_);
    This->create(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SocketImpl_method_getFileDescriptor__L_acdk_io_RFileDescriptor__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SocketImpl* This = dmi_cast<SocketImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SocketImpl::getFileDescriptor();
    else
        ret = (::acdk::lang::RObject)This->getFileDescriptor();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SocketImpl_method_getInetAddress__LRInetAddress__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SocketImpl* This = dmi_cast<SocketImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SocketImpl::getInetAddress();
    else
        ret = (::acdk::lang::RObject)This->getInetAddress();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SocketImpl_method_getInputStream__LRReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SocketImpl* This = dmi_cast<SocketImpl>(This_);
    ret = (::acdk::lang::RObject)This->getInputStream();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SocketImpl_method_getLocalPort__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SocketImpl* This = dmi_cast<SocketImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SocketImpl::getLocalPort();
    else
      ret = This->getLocalPort();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SocketImpl_method_getOption_I_LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SocketImpl* This = dmi_cast<SocketImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SocketImpl::getOption(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getOption(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SocketImpl_method_getOutputStream__LRWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SocketImpl* This = dmi_cast<SocketImpl>(This_);
    ret = (::acdk::lang::RObject)This->getOutputStream();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SocketImpl_method_getPort__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SocketImpl* This = dmi_cast<SocketImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SocketImpl::getPort();
    else
      ret = This->getPort();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SocketImpl_method_getSockOption_INL_acdk_io_RFileDescriptor_I_LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SocketImpl::getSockOption(::acdk::lang::dmi::castTo< ::acdk::io::RFileDescriptor>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SocketImpl_method_listen_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SocketImpl* This = dmi_cast<SocketImpl>(This_);
    This->listen(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SocketImpl_method_setOption_IINLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SocketImpl* This = dmi_cast<SocketImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SocketImpl::setOption(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    else
        This->setOption(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SocketImpl_method_setSockOption_INL_acdk_io_RFileDescriptor_IINLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SocketImpl::setSockOption(::acdk::lang::dmi::castTo< ::acdk::io::RFileDescriptor>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< RObject>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SocketImpl_method_shutdownInput__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SocketImpl* This = dmi_cast<SocketImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SocketImpl::shutdownInput();
    else
        This->shutdownInput();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SocketImpl_method_shutdownOutput__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SocketImpl* This = dmi_cast<SocketImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SocketImpl::shutdownOutput();
    else
        This->shutdownOutput();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SocketImpl_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SocketImpl* This = dmi_cast<SocketImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SocketImpl::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SocketImpl_fields_address_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SocketImpl* This = dmi_cast<SocketImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->address, flags);
    else
      This->address = ::acdk::lang::dmi::castTo< RInetAddress>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SocketImpl_fields_fd_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SocketImpl* This = dmi_cast<SocketImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->fd, flags);
    else
      This->fd = ::acdk::lang::dmi::castTo< ::acdk::io::RFileDescriptor>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SocketImpl_fields_localport_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SocketImpl* This = dmi_cast<SocketImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->localport, flags);
    else
      This->localport = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SocketImpl_fields_port_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SocketImpl* This = dmi_cast<SocketImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->port, flags);
    else
      This->port = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo SocketImpl_fields_address = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "address", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetAddress::clazzInfo(),
  SocketImpl_MetainfoWrapper::SocketImpl_fields_address_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SocketImpl_fields_fd = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "fd", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::RFileDescriptor::clazzInfo(),
  SocketImpl_MetainfoWrapper::SocketImpl_fields_fd_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SocketImpl_fields_localport = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "localport", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  SocketImpl_MetainfoWrapper::SocketImpl_fields_localport_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SocketImpl_fields_port = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "port", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  SocketImpl_MetainfoWrapper::SocketImpl_fields_port_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _SocketImpl_fields[] = 
{
  &SocketImpl_fields_address,
  &SocketImpl_fields_fd,
  &SocketImpl_fields_localport,
  &SocketImpl_fields_port,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SocketImpl_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SocketImpl_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SocketImpl_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_p_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SocketImpl_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SocketImpl_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SocketImpl_MetainfoWrapper::SocketImpl_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SocketImpl_methods_SocketImpl__LRSocketImpl__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SocketImpl_methods_SocketImpl__LRSocketImpl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SocketImpl_method_SocketImpl__LRSocketImpl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SocketImpl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SocketImpl::clazzInfo(), // return type
  "_0_SocketImpl", // alternative name of method
  -1, // altlabelHashCode
  SocketImpl_methods_SocketImpl__LRSocketImpl__args, // the arguments
  0, //arguments count
  SocketImpl_methods_SocketImpl__LRSocketImpl__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SocketImpl_methods_accept_INLRSocketImpl_I_Z_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSocketImpl::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SocketImpl_methods_accept_INLRSocketImpl_I_Z_arg_timeOut = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "timeOut", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SocketImpl_methods_accept_INLRSocketImpl_I_Z_args[] = 
{
  &SocketImpl_methods_accept_INLRSocketImpl_I_Z_arg_s,
  &SocketImpl_methods_accept_INLRSocketImpl_I_Z_arg_timeOut,
  0
};

::acdk::lang::dmi::ClazzInfo* SocketImpl_methods_accept_INLRSocketImpl_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SocketImpl_method_accept_INLRSocketImpl_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "accept", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_accept", // alternative name of method
  -1, // altlabelHashCode
  SocketImpl_methods_accept_INLRSocketImpl_I_Z_args, // the arguments
  0, //arguments count
  SocketImpl_methods_accept_INLRSocketImpl_I_Z_exceptions, // the declared exceptions
  SocketImpl_MetainfoWrapper::SocketImpl_method_accept_INLRSocketImpl_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SocketImpl_methods_accept_INLRSocketImpl__Z_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSocketImpl::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SocketImpl_methods_accept_INLRSocketImpl__Z_args[] = 
{
  &SocketImpl_methods_accept_INLRSocketImpl__Z_arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* SocketImpl_methods_accept_INLRSocketImpl__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SocketImpl_method_accept_INLRSocketImpl__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract,// class flags, like static, Constructor
  0, //AttributesRes
  "accept", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_accept", // alternative name of method
  -1, // altlabelHashCode
  SocketImpl_methods_accept_INLRSocketImpl__Z_args, // the arguments
  0, //arguments count
  SocketImpl_methods_accept_INLRSocketImpl__Z_exceptions, // the declared exceptions
  SocketImpl_MetainfoWrapper::SocketImpl_method_accept_INLRSocketImpl__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SocketImpl_methods_available__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SocketImpl_methods_available__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SocketImpl_method_available__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "available", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3_available", // alternative name of method
  -1, // altlabelHashCode
  SocketImpl_methods_available__I_args, // the arguments
  0, //arguments count
  SocketImpl_methods_available__I_exceptions, // the declared exceptions
  SocketImpl_MetainfoWrapper::SocketImpl_method_available__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SocketImpl_methods_bind_INLRInetAddress_I_V_arg_host = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "host", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetAddress::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SocketImpl_methods_bind_INLRInetAddress_I_V_arg_port = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "port", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SocketImpl_methods_bind_INLRInetAddress_I_V_args[] = 
{
  &SocketImpl_methods_bind_INLRInetAddress_I_V_arg_host,
  &SocketImpl_methods_bind_INLRInetAddress_I_V_arg_port,
  0
};

::acdk::lang::dmi::ClazzInfo* SocketImpl_methods_bind_INLRInetAddress_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SocketImpl_method_bind_INLRInetAddress_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "bind", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_bind", // alternative name of method
  -1, // altlabelHashCode
  SocketImpl_methods_bind_INLRInetAddress_I_V_args, // the arguments
  0, //arguments count
  SocketImpl_methods_bind_INLRInetAddress_I_V_exceptions, // the declared exceptions
  SocketImpl_MetainfoWrapper::SocketImpl_method_bind_INLRInetAddress_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SocketImpl_methods_close__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SocketImpl_methods_close__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SocketImpl_method_close__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "close", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_close", // alternative name of method
  -1, // altlabelHashCode
  SocketImpl_methods_close__V_args, // the arguments
  0, //arguments count
  SocketImpl_methods_close__V_exceptions, // the declared exceptions
  SocketImpl_MetainfoWrapper::SocketImpl_method_close__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SocketImpl_methods_connect_INLRInetAddress_II_Z_arg_address = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "address", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetAddress::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SocketImpl_methods_connect_INLRInetAddress_II_Z_arg_port = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "port", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SocketImpl_methods_connect_INLRInetAddress_II_Z_arg_timeOut = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "timeOut", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SocketImpl_methods_connect_INLRInetAddress_II_Z_args[] = 
{
  &SocketImpl_methods_connect_INLRInetAddress_II_Z_arg_address,
  &SocketImpl_methods_connect_INLRInetAddress_II_Z_arg_port,
  &SocketImpl_methods_connect_INLRInetAddress_II_Z_arg_timeOut,
  0
};

::acdk::lang::dmi::ClazzInfo* SocketImpl_methods_connect_INLRInetAddress_II_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SocketImpl_method_connect_INLRInetAddress_II_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "connect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_connect", // alternative name of method
  -1, // altlabelHashCode
  SocketImpl_methods_connect_INLRInetAddress_II_Z_args, // the arguments
  0, //arguments count
  SocketImpl_methods_connect_INLRInetAddress_II_Z_exceptions, // the declared exceptions
  SocketImpl_MetainfoWrapper::SocketImpl_method_connect_INLRInetAddress_II_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SocketImpl_methods_connect_INLRInetAddress_I_Z_arg_address = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "address", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetAddress::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SocketImpl_methods_connect_INLRInetAddress_I_Z_arg_port = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "port", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SocketImpl_methods_connect_INLRInetAddress_I_Z_args[] = 
{
  &SocketImpl_methods_connect_INLRInetAddress_I_Z_arg_address,
  &SocketImpl_methods_connect_INLRInetAddress_I_Z_arg_port,
  0
};

::acdk::lang::dmi::ClazzInfo* SocketImpl_methods_connect_INLRInetAddress_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SocketImpl_method_connect_INLRInetAddress_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract,// class flags, like static, Constructor
  0, //AttributesRes
  "connect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_connect", // alternative name of method
  -1, // altlabelHashCode
  SocketImpl_methods_connect_INLRInetAddress_I_Z_args, // the arguments
  0, //arguments count
  SocketImpl_methods_connect_INLRInetAddress_I_Z_exceptions, // the declared exceptions
  SocketImpl_MetainfoWrapper::SocketImpl_method_connect_INLRInetAddress_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SocketImpl_methods_connect_INLRString_II_Z_arg_host = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "host", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SocketImpl_methods_connect_INLRString_II_Z_arg_port = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "port", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SocketImpl_methods_connect_INLRString_II_Z_arg_timeOut = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "timeOut", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SocketImpl_methods_connect_INLRString_II_Z_args[] = 
{
  &SocketImpl_methods_connect_INLRString_II_Z_arg_host,
  &SocketImpl_methods_connect_INLRString_II_Z_arg_port,
  &SocketImpl_methods_connect_INLRString_II_Z_arg_timeOut,
  0
};

::acdk::lang::dmi::ClazzInfo* SocketImpl_methods_connect_INLRString_II_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SocketImpl_method_connect_INLRString_II_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "connect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_8_connect", // alternative name of method
  -1, // altlabelHashCode
  SocketImpl_methods_connect_INLRString_II_Z_args, // the arguments
  0, //arguments count
  SocketImpl_methods_connect_INLRString_II_Z_exceptions, // the declared exceptions
  SocketImpl_MetainfoWrapper::SocketImpl_method_connect_INLRString_II_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SocketImpl_methods_connect_INLRString_I_Z_arg_host = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "host", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SocketImpl_methods_connect_INLRString_I_Z_arg_port = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "port", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SocketImpl_methods_connect_INLRString_I_Z_args[] = 
{
  &SocketImpl_methods_connect_INLRString_I_Z_arg_host,
  &SocketImpl_methods_connect_INLRString_I_Z_arg_port,
  0
};

::acdk::lang::dmi::ClazzInfo* SocketImpl_methods_connect_INLRString_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SocketImpl_method_connect_INLRString_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract,// class flags, like static, Constructor
  0, //AttributesRes
  "connect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_9_connect", // alternative name of method
  -1, // altlabelHashCode
  SocketImpl_methods_connect_INLRString_I_Z_args, // the arguments
  0, //arguments count
  SocketImpl_methods_connect_INLRString_I_Z_exceptions, // the declared exceptions
  SocketImpl_MetainfoWrapper::SocketImpl_method_connect_INLRString_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SocketImpl_methods_create_Z_V_arg_stream = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "stream", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SocketImpl_methods_create_Z_V_args[] = 
{
  &SocketImpl_methods_create_Z_V_arg_stream,
  0
};

::acdk::lang::dmi::ClazzInfo* SocketImpl_methods_create_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SocketImpl_method_create_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_create", // alternative name of method
  -1, // altlabelHashCode
  SocketImpl_methods_create_Z_V_args, // the arguments
  0, //arguments count
  SocketImpl_methods_create_Z_V_exceptions, // the declared exceptions
  SocketImpl_MetainfoWrapper::SocketImpl_method_create_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SocketImpl_methods_getFileDescriptor__L_acdk_io_RFileDescriptor__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SocketImpl_methods_getFileDescriptor__L_acdk_io_RFileDescriptor__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SocketImpl_method_getFileDescriptor__L_acdk_io_RFileDescriptor_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFileDescriptor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::RFileDescriptor::clazzInfo(), // return type
  "_b_getFileDescriptor", // alternative name of method
  -1, // altlabelHashCode
  SocketImpl_methods_getFileDescriptor__L_acdk_io_RFileDescriptor__args, // the arguments
  0, //arguments count
  SocketImpl_methods_getFileDescriptor__L_acdk_io_RFileDescriptor__exceptions, // the declared exceptions
  SocketImpl_MetainfoWrapper::SocketImpl_method_getFileDescriptor__L_acdk_io_RFileDescriptor__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SocketImpl_methods_getInetAddress__LRInetAddress__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SocketImpl_methods_getInetAddress__LRInetAddress__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SocketImpl_method_getInetAddress__LRInetAddress_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInetAddress", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetAddress::clazzInfo(), // return type
  "_c_getInetAddress", // alternative name of method
  -1, // altlabelHashCode
  SocketImpl_methods_getInetAddress__LRInetAddress__args, // the arguments
  0, //arguments count
  SocketImpl_methods_getInetAddress__LRInetAddress__exceptions, // the declared exceptions
  SocketImpl_MetainfoWrapper::SocketImpl_method_getInetAddress__LRInetAddress__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SocketImpl_methods_getInputStream__LRReader__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SocketImpl_methods_getInputStream__LRReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SocketImpl_method_getInputStream__LRReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInputStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReader::clazzInfo(), // return type
  "_d_getInputStream", // alternative name of method
  -1, // altlabelHashCode
  SocketImpl_methods_getInputStream__LRReader__args, // the arguments
  0, //arguments count
  SocketImpl_methods_getInputStream__LRReader__exceptions, // the declared exceptions
  SocketImpl_MetainfoWrapper::SocketImpl_method_getInputStream__LRReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SocketImpl_methods_getLocalPort__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SocketImpl_methods_getLocalPort__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SocketImpl_method_getLocalPort__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLocalPort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_e_getLocalPort", // alternative name of method
  -1, // altlabelHashCode
  SocketImpl_methods_getLocalPort__I_args, // the arguments
  0, //arguments count
  SocketImpl_methods_getLocalPort__I_exceptions, // the declared exceptions
  SocketImpl_MetainfoWrapper::SocketImpl_method_getLocalPort__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SocketImpl_methods_getOption_I_LRObject__arg_optID = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "optID", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SocketImpl_methods_getOption_I_LRObject__args[] = 
{
  &SocketImpl_methods_getOption_I_LRObject__arg_optID,
  0
};

::acdk::lang::dmi::ClazzInfo* SocketImpl_methods_getOption_I_LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SocketImpl_method_getOption_I_LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getOption", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_k_getOption", // alternative name of method
  -1, // altlabelHashCode
  SocketImpl_methods_getOption_I_LRObject__args, // the arguments
  0, //arguments count
  SocketImpl_methods_getOption_I_LRObject__exceptions, // the declared exceptions
  SocketImpl_MetainfoWrapper::SocketImpl_method_getOption_I_LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SocketImpl_methods_getOutputStream__LRWriter__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SocketImpl_methods_getOutputStream__LRWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SocketImpl_method_getOutputStream__LRWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getOutputStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriter::clazzInfo(), // return type
  "_f_getOutputStream", // alternative name of method
  -1, // altlabelHashCode
  SocketImpl_methods_getOutputStream__LRWriter__args, // the arguments
  0, //arguments count
  SocketImpl_methods_getOutputStream__LRWriter__exceptions, // the declared exceptions
  SocketImpl_MetainfoWrapper::SocketImpl_method_getOutputStream__LRWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SocketImpl_methods_getPort__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SocketImpl_methods_getPort__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SocketImpl_method_getPort__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_g_getPort", // alternative name of method
  -1, // altlabelHashCode
  SocketImpl_methods_getPort__I_args, // the arguments
  0, //arguments count
  SocketImpl_methods_getPort__I_exceptions, // the declared exceptions
  SocketImpl_MetainfoWrapper::SocketImpl_method_getPort__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SocketImpl_methods_getSockOption_INL_acdk_io_RFileDescriptor_I_LRObject__arg_fd = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fd", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::RFileDescriptor::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SocketImpl_methods_getSockOption_INL_acdk_io_RFileDescriptor_I_LRObject__arg_optId = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "optId", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SocketImpl_methods_getSockOption_INL_acdk_io_RFileDescriptor_I_LRObject__args[] = 
{
  &SocketImpl_methods_getSockOption_INL_acdk_io_RFileDescriptor_I_LRObject__arg_fd,
  &SocketImpl_methods_getSockOption_INL_acdk_io_RFileDescriptor_I_LRObject__arg_optId,
  0
};

::acdk::lang::dmi::ClazzInfo* SocketImpl_methods_getSockOption_INL_acdk_io_RFileDescriptor_I_LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SocketImpl_method_getSockOption_INL_acdk_io_RFileDescriptor_I_LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSockOption", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_m_getSockOption", // alternative name of method
  -1, // altlabelHashCode
  SocketImpl_methods_getSockOption_INL_acdk_io_RFileDescriptor_I_LRObject__args, // the arguments
  0, //arguments count
  SocketImpl_methods_getSockOption_INL_acdk_io_RFileDescriptor_I_LRObject__exceptions, // the declared exceptions
  SocketImpl_MetainfoWrapper::SocketImpl_method_getSockOption_INL_acdk_io_RFileDescriptor_I_LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SocketImpl_methods_listen_I_V_arg_backlog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "backlog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SocketImpl_methods_listen_I_V_args[] = 
{
  &SocketImpl_methods_listen_I_V_arg_backlog,
  0
};

::acdk::lang::dmi::ClazzInfo* SocketImpl_methods_listen_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SocketImpl_method_listen_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "listen", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_h_listen", // alternative name of method
  -1, // altlabelHashCode
  SocketImpl_methods_listen_I_V_args, // the arguments
  0, //arguments count
  SocketImpl_methods_listen_I_V_exceptions, // the declared exceptions
  SocketImpl_MetainfoWrapper::SocketImpl_method_listen_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SocketImpl_methods_setOption_IINLRObject__V_arg_optID = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "optID", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SocketImpl_methods_setOption_IINLRObject__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SocketImpl_methods_setOption_IINLRObject__V_args[] = 
{
  &SocketImpl_methods_setOption_IINLRObject__V_arg_optID,
  &SocketImpl_methods_setOption_IINLRObject__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* SocketImpl_methods_setOption_IINLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SocketImpl_method_setOption_IINLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setOption", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_l_setOption", // alternative name of method
  -1, // altlabelHashCode
  SocketImpl_methods_setOption_IINLRObject__V_args, // the arguments
  0, //arguments count
  SocketImpl_methods_setOption_IINLRObject__V_exceptions, // the declared exceptions
  SocketImpl_MetainfoWrapper::SocketImpl_method_setOption_IINLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SocketImpl_methods_setSockOption_INL_acdk_io_RFileDescriptor_IINLRObject__V_arg_fd = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fd", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::RFileDescriptor::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SocketImpl_methods_setSockOption_INL_acdk_io_RFileDescriptor_IINLRObject__V_arg_optID = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "optID", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SocketImpl_methods_setSockOption_INL_acdk_io_RFileDescriptor_IINLRObject__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SocketImpl_methods_setSockOption_INL_acdk_io_RFileDescriptor_IINLRObject__V_args[] = 
{
  &SocketImpl_methods_setSockOption_INL_acdk_io_RFileDescriptor_IINLRObject__V_arg_fd,
  &SocketImpl_methods_setSockOption_INL_acdk_io_RFileDescriptor_IINLRObject__V_arg_optID,
  &SocketImpl_methods_setSockOption_INL_acdk_io_RFileDescriptor_IINLRObject__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* SocketImpl_methods_setSockOption_INL_acdk_io_RFileDescriptor_IINLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SocketImpl_method_setSockOption_INL_acdk_io_RFileDescriptor_IINLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSockOption", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_n_setSockOption", // alternative name of method
  -1, // altlabelHashCode
  SocketImpl_methods_setSockOption_INL_acdk_io_RFileDescriptor_IINLRObject__V_args, // the arguments
  0, //arguments count
  SocketImpl_methods_setSockOption_INL_acdk_io_RFileDescriptor_IINLRObject__V_exceptions, // the declared exceptions
  SocketImpl_MetainfoWrapper::SocketImpl_method_setSockOption_INL_acdk_io_RFileDescriptor_IINLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SocketImpl_methods_shutdownInput__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SocketImpl_methods_shutdownInput__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SocketImpl_method_shutdownInput__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "shutdownInput", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_i_shutdownInput", // alternative name of method
  -1, // altlabelHashCode
  SocketImpl_methods_shutdownInput__V_args, // the arguments
  0, //arguments count
  SocketImpl_methods_shutdownInput__V_exceptions, // the declared exceptions
  SocketImpl_MetainfoWrapper::SocketImpl_method_shutdownInput__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SocketImpl_methods_shutdownOutput__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SocketImpl_methods_shutdownOutput__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SocketImpl_method_shutdownOutput__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "shutdownOutput", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_j_shutdownOutput", // alternative name of method
  -1, // altlabelHashCode
  SocketImpl_methods_shutdownOutput__V_args, // the arguments
  0, //arguments count
  SocketImpl_methods_shutdownOutput__V_exceptions, // the declared exceptions
  SocketImpl_MetainfoWrapper::SocketImpl_method_shutdownOutput__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SocketImpl_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SocketImpl_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SocketImpl_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_o_toString", // alternative name of method
  -1, // altlabelHashCode
  SocketImpl_methods_toString__LRString__args, // the arguments
  0, //arguments count
  SocketImpl_methods_toString__LRString__exceptions, // the declared exceptions
  SocketImpl_MetainfoWrapper::SocketImpl_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SocketImpl_methods[] = 
{
  &SocketImpl_method_GetClass__L_acdk_lang_RClass_,
  &SocketImpl_method_SocketImpl__LRSocketImpl_,
  &SocketImpl_method_accept_INLRSocketImpl_I_Z,
  &SocketImpl_method_accept_INLRSocketImpl__Z,
  &SocketImpl_method_available__I,
  &SocketImpl_method_bind_INLRInetAddress_I_V,
  &SocketImpl_method_close__V,
  &SocketImpl_method_connect_INLRInetAddress_II_Z,
  &SocketImpl_method_connect_INLRInetAddress_I_Z,
  &SocketImpl_method_connect_INLRString_II_Z,
  &SocketImpl_method_connect_INLRString_I_Z,
  &SocketImpl_method_create_Z_V,
  &SocketImpl_method_getFileDescriptor__L_acdk_io_RFileDescriptor_,
  &SocketImpl_method_getInetAddress__LRInetAddress_,
  &SocketImpl_method_getInputStream__LRReader_,
  &SocketImpl_method_getLocalPort__I,
  &SocketImpl_method_getOption_I_LRObject_,
  &SocketImpl_method_getOutputStream__LRWriter_,
  &SocketImpl_method_getPort__I,
  &SocketImpl_method_getSockOption_INL_acdk_io_RFileDescriptor_I_LRObject_,
  &SocketImpl_method_listen_I_V,
  &SocketImpl_method_setOption_IINLRObject__V,
  &SocketImpl_method_setSockOption_INL_acdk_io_RFileDescriptor_IINLRObject__V,
  &SocketImpl_method_shutdownInput__V,
  &SocketImpl_method_shutdownOutput__V,
  &SocketImpl_method_toString__LRString_,
  0
};


struct SocketImpl_MetaInfoInitializer
{  SocketImpl_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SocketImpl::clazzInfo();
    ci->fields =  _SocketImpl_fields;
    ci->methods =  _SocketImpl_methods;
    ci->_scopeParent = acdk_net_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SocketImpl_MetaInfoInitializer SocketImpl_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
SocketImplFactory_create_array(int length)
{
  return new ObjectArrayImpl<RSocketImplFactory>(length);
}

//static
::acdk::lang::RObject
SocketImplFactory_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SocketImplFactory_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SocketImplFactory_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SocketImplFactory::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SocketImplFactory_method_createSocketImpl__LRSocketImpl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SocketImplFactory* This = dmi_cast<SocketImplFactory>(This_);
    ret = (::acdk::lang::RObject)This->createSocketImpl();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _SocketImplFactory_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SocketImplFactory_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SocketImplFactory_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SocketImplFactory_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SocketImplFactory_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SocketImplFactory_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SocketImplFactory_MetainfoWrapper::SocketImplFactory_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SocketImplFactory_methods_SocketImplFactory__LRSocketImplFactory__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SocketImplFactory_methods_SocketImplFactory__LRSocketImplFactory__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SocketImplFactory_method_SocketImplFactory__LRSocketImplFactory_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SocketImplFactory", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SocketImplFactory::clazzInfo(), // return type
  "_0_SocketImplFactory", // alternative name of method
  -1, // altlabelHashCode
  SocketImplFactory_methods_SocketImplFactory__LRSocketImplFactory__args, // the arguments
  0, //arguments count
  SocketImplFactory_methods_SocketImplFactory__LRSocketImplFactory__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SocketImplFactory_methods_createSocketImpl__LRSocketImpl__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SocketImplFactory_methods_createSocketImpl__LRSocketImpl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SocketImplFactory_method_createSocketImpl__LRSocketImpl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createSocketImpl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSocketImpl::clazzInfo(), // return type
  "_1_createSocketImpl", // alternative name of method
  -1, // altlabelHashCode
  SocketImplFactory_methods_createSocketImpl__LRSocketImpl__args, // the arguments
  0, //arguments count
  SocketImplFactory_methods_createSocketImpl__LRSocketImpl__exceptions, // the declared exceptions
  SocketImplFactory_MetainfoWrapper::SocketImplFactory_method_createSocketImpl__LRSocketImpl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SocketImplFactory_methods[] = 
{
  &SocketImplFactory_method_GetClass__L_acdk_lang_RClass_,
  &SocketImplFactory_method_SocketImplFactory__LRSocketImplFactory_,
  &SocketImplFactory_method_createSocketImpl__LRSocketImpl_,
  0
};


struct SocketImplFactory_MetaInfoInitializer
{  SocketImplFactory_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SocketImplFactory::clazzInfo();
    ci->fields =  _SocketImplFactory_fields;
    ci->methods =  _SocketImplFactory_methods;
    ci->_scopeParent = acdk_net_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SocketImplFactory_MetaInfoInitializer SocketImplFactory_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

using namespace acdk::lang;
using namespace acdk::io;

//static
::acdk::lang::RObject
SocketOptions_create_array(int length)
{
  return new ObjectArrayImpl<RSocketOptions>(length);
}

//static
::acdk::lang::RObject
SocketOptions_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SocketOptions_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SocketOptions_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SocketOptions::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SocketOptions_method_getOption_I_LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SocketOptions* This = dmi_cast<SocketOptions>(This_);
    ret = (::acdk::lang::RObject)This->getOption(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SocketOptions_method_setOption_IINLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SocketOptions* This = dmi_cast<SocketOptions>(This_);
    This->setOption(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _SocketOptions_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SocketOptions_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SocketOptions_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SocketOptions_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SocketOptions_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SocketOptions_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SocketOptions_MetainfoWrapper::SocketOptions_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SocketOptions_methods_getOption_I_LRObject__arg_optID = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "optID", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SocketOptions_methods_getOption_I_LRObject__args[] = 
{
  &SocketOptions_methods_getOption_I_LRObject__arg_optID,
  0
};

::acdk::lang::dmi::ClazzInfo* SocketOptions_methods_getOption_I_LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SocketOptions_method_getOption_I_LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getOption", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_0_getOption", // alternative name of method
  -1, // altlabelHashCode
  SocketOptions_methods_getOption_I_LRObject__args, // the arguments
  0, //arguments count
  SocketOptions_methods_getOption_I_LRObject__exceptions, // the declared exceptions
  SocketOptions_MetainfoWrapper::SocketOptions_method_getOption_I_LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SocketOptions_methods_setOption_IINLRObject__V_arg_optID = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "optID", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SocketOptions_methods_setOption_IINLRObject__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SocketOptions_methods_setOption_IINLRObject__V_args[] = 
{
  &SocketOptions_methods_setOption_IINLRObject__V_arg_optID,
  &SocketOptions_methods_setOption_IINLRObject__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* SocketOptions_methods_setOption_IINLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SocketOptions_method_setOption_IINLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setOption", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_setOption", // alternative name of method
  -1, // altlabelHashCode
  SocketOptions_methods_setOption_IINLRObject__V_args, // the arguments
  0, //arguments count
  SocketOptions_methods_setOption_IINLRObject__V_exceptions, // the declared exceptions
  SocketOptions_MetainfoWrapper::SocketOptions_method_setOption_IINLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SocketOptions_methods[] = 
{
  &SocketOptions_method_GetClass__L_acdk_lang_RClass_,
  &SocketOptions_method_getOption_I_LRObject_,
  &SocketOptions_method_setOption_IINLRObject__V,
  0
};


struct SocketOptions_MetaInfoInitializer
{  SocketOptions_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SocketOptions::clazzInfo();
    ci->fields =  _SocketOptions_fields;
    ci->methods =  _SocketOptions_methods;
    ci->_scopeParent = acdk_net_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SocketOptions_MetaInfoInitializer SocketOptions_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

using namespace acdk::lang;
using namespace acdk::io;

//static
::acdk::lang::RObject
TCPSocket_create_array(int length)
{
  return new ObjectArrayImpl<RTCPSocket>(length);
}

//static
::acdk::lang::RObject
TCPSocket_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TCPSocket_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TCPSocket_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TCPSocket::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TCPSocket_method_TCPSocket__LRTCPSocket__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TCPSocket();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TCPSocket_method__resolveLocalPortAddress__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TCPSocket::_resolveLocalPortAddress();
    else
        This->_resolveLocalPortAddress();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TCPSocket_method_accept_INLRSocketImpl_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TCPSocket::accept(::acdk::lang::dmi::castTo< RSocketImpl>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
      ret = This->accept(::acdk::lang::dmi::castTo< RSocketImpl>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TCPSocket_method_accept_INLRSocketImpl__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TCPSocket::accept(::acdk::lang::dmi::castTo< RSocketImpl>(args[0], dc));
    else
      ret = This->accept(::acdk::lang::dmi::castTo< RSocketImpl>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TCPSocket_method_available__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TCPSocket::available();
    else
      ret = This->available();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TCPSocket_method_bind_INLRInetAddress_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TCPSocket::bind(::acdk::lang::dmi::castTo< RInetAddress>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->bind(::acdk::lang::dmi::castTo< RInetAddress>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TCPSocket_method_close__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TCPSocket::close();
    else
        This->close();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TCPSocket_method_connect_INLRInetAddress_II_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TCPSocket::connect(::acdk::lang::dmi::castTo< RInetAddress>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    else
      ret = This->connect(::acdk::lang::dmi::castTo< RInetAddress>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TCPSocket_method_connect_INLRInetAddress_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TCPSocket::connect(::acdk::lang::dmi::castTo< RInetAddress>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
      ret = This->connect(::acdk::lang::dmi::castTo< RInetAddress>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TCPSocket_method_connect_INLRString_II_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TCPSocket::connect(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    else
      ret = This->connect(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TCPSocket_method_connect_INLRString_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TCPSocket::connect(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
      ret = This->connect(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TCPSocket_method_create_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TCPSocket::create(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->create(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TCPSocket_method_flush__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TCPSocket::flush();
    else
        This->flush();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TCPSocket_method_getDeviceName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TCPSocket::getDeviceName();
    else
        ret = (::acdk::lang::RObject)This->getDeviceName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TCPSocket_method_getInetAddress__LRInetAddress__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TCPSocket::getInetAddress();
    else
        ret = (::acdk::lang::RObject)This->getInetAddress();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TCPSocket_method_getInputStream__LRReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TCPSocket::getInputStream();
    else
        ret = (::acdk::lang::RObject)This->getInputStream();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TCPSocket_method_getLocalPort__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TCPSocket::getLocalPort();
    else
      ret = This->getLocalPort();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TCPSocket_method_getOutputStream__LRWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TCPSocket::getOutputStream();
    else
        ret = (::acdk::lang::RObject)This->getOutputStream();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TCPSocket_method_getSetSocketErrno_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TCPSocket::getSetSocketErrno(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->getSetSocketErrno(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TCPSocket_method_getSetSocketErrno__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TCPSocket::getSetSocketErrno();
    else
      ret = This->getSetSocketErrno();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TCPSocket_method_getSoTimeout__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TCPSocket::getSoTimeout();
    else
      ret = This->getSoTimeout();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TCPSocket_method_isBound__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TCPSocket::isBound();
    else
      ret = This->isBound();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TCPSocket_method_isConnected__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TCPSocket::isConnected();
    else
      ret = This->isConnected();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TCPSocket_method_isReadable__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TCPSocket::isReadable();
    else
      ret = This->isReadable();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TCPSocket_method_isWriteable__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TCPSocket::isWriteable();
    else
      ret = This->isWriteable();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TCPSocket_method_listen_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TCPSocket::listen(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->listen(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TCPSocket_method_mark_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TCPSocket::mark(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->mark(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TCPSocket_method_markSupported__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TCPSocket::markSupported();
    else
      ret = This->markSupported();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TCPSocket_method_read_INLRbyteArray__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TCPSocket::read(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc));
    else
      ret = This->read(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TCPSocket_method_read_INLRbyteArray_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TCPSocket::read(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
      ret = This->read(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TCPSocket_method_read__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TCPSocket::read();
    else
      ret = This->read();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TCPSocket_method_read_INLRbyteArray_II_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TCPSocket::read(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    else
      ret = This->read(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TCPSocket_method_ready__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TCPSocket::ready();
    else
      ret = This->ready();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TCPSocket_method_receive_INLRDatagramPacket__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TCPSocket::receive(::acdk::lang::dmi::castTo< RDatagramPacket>(args[0], dc));
    else
        This->receive(::acdk::lang::dmi::castTo< RDatagramPacket>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TCPSocket_method_reset__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TCPSocket::reset();
    else
        This->reset();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TCPSocket_method_seek_IJ_J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TCPSocket::seek((::acdk::io::SeekPos)::acdk::lang::dmi::castTo<int>(args[0], dc), ::acdk::lang::dmi::castTo< jlong>(args[1], dc));
    else
      ret = This->seek((::acdk::io::SeekPos)::acdk::lang::dmi::castTo<int>(args[0], dc), ::acdk::lang::dmi::castTo< jlong>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TCPSocket_method_send_INLRDatagramPacket__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TCPSocket::send(::acdk::lang::dmi::castTo< RDatagramPacket>(args[0], dc));
    else
        This->send(::acdk::lang::dmi::castTo< RDatagramPacket>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TCPSocket_method_setSoTimeout_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TCPSocket::setSoTimeout(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setSoTimeout(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TCPSocket_method_skip_J_J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TCPSocket::skip(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
      ret = This->skip(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TCPSocket_method_write_B_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TCPSocket::write(::acdk::lang::dmi::castTo< byte>(args[0], dc));
    else
        This->write(::acdk::lang::dmi::castTo< byte>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TCPSocket_method_write_INLRbyteArray_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TCPSocket::write(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->write(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TCPSocket_method_write_INLRbyteArray_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TCPSocket::write(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    else
        This->write(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TCPSocket_method_write_INLRbyteArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TCPSocket::write(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc));
    else
        This->write(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TCPSocket_fields__bound_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_bound, flags);
    else
      This->_bound = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TCPSocket_fields__connected_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_connected, flags);
    else
      This->_connected = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TCPSocket_fields__eof_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_eof, flags);
    else
      This->_eof = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TCPSocket_fields__eofReturned_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TCPSocket* This = dmi_cast<TCPSocket>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_eofReturned, flags);
    else
      This->_eofReturned = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo TCPSocket_fields__bound = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_bound", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  TCPSocket_MetainfoWrapper::TCPSocket_fields__bound_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TCPSocket_fields__connected = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_connected", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  TCPSocket_MetainfoWrapper::TCPSocket_fields__connected_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TCPSocket_fields__eof = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_eof", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  TCPSocket_MetainfoWrapper::TCPSocket_fields__eof_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TCPSocket_fields__eofReturned = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_eofReturned", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  TCPSocket_MetainfoWrapper::TCPSocket_fields__eofReturned_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _TCPSocket_fields[] = 
{
  &TCPSocket_fields__bound,
  &TCPSocket_fields__connected,
  &TCPSocket_fields__eof,
  &TCPSocket_fields__eofReturned,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TCPSocket_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TCPSocket_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TCPSocket_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_H_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TCPSocket_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TCPSocket_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TCPSocket_MetainfoWrapper::TCPSocket_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TCPSocket_methods_TCPSocket__LRTCPSocket__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TCPSocket_methods_TCPSocket__LRTCPSocket__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TCPSocket_method_TCPSocket__LRTCPSocket_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TCPSocket", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TCPSocket::clazzInfo(), // return type
  "_0_TCPSocket", // alternative name of method
  -1, // altlabelHashCode
  TCPSocket_methods_TCPSocket__LRTCPSocket__args, // the arguments
  0, //arguments count
  TCPSocket_methods_TCPSocket__LRTCPSocket__exceptions, // the declared exceptions
  TCPSocket_MetainfoWrapper::TCPSocket_method_TCPSocket__LRTCPSocket__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TCPSocket_methods__resolveLocalPortAddress__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TCPSocket_methods__resolveLocalPortAddress__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TCPSocket_method__resolveLocalPortAddress__V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_resolveLocalPortAddress", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_G__resolveLocalPortAddress", // alternative name of method
  -1, // altlabelHashCode
  TCPSocket_methods__resolveLocalPortAddress__V_args, // the arguments
  0, //arguments count
  TCPSocket_methods__resolveLocalPortAddress__V_exceptions, // the declared exceptions
  TCPSocket_MetainfoWrapper::TCPSocket_method__resolveLocalPortAddress__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TCPSocket_methods_accept_INLRSocketImpl_I_Z_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSocketImpl::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TCPSocket_methods_accept_INLRSocketImpl_I_Z_arg_timeOut = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "timeOut", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TCPSocket_methods_accept_INLRSocketImpl_I_Z_args[] = 
{
  &TCPSocket_methods_accept_INLRSocketImpl_I_Z_arg_s,
  &TCPSocket_methods_accept_INLRSocketImpl_I_Z_arg_timeOut,
  0
};

::acdk::lang::dmi::ClazzInfo* TCPSocket_methods_accept_INLRSocketImpl_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TCPSocket_method_accept_INLRSocketImpl_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "accept", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_accept", // alternative name of method
  -1, // altlabelHashCode
  TCPSocket_methods_accept_INLRSocketImpl_I_Z_args, // the arguments
  0, //arguments count
  TCPSocket_methods_accept_INLRSocketImpl_I_Z_exceptions, // the declared exceptions
  TCPSocket_MetainfoWrapper::TCPSocket_method_accept_INLRSocketImpl_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TCPSocket_methods_accept_INLRSocketImpl__Z_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSocketImpl::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TCPSocket_methods_accept_INLRSocketImpl__Z_args[] = 
{
  &TCPSocket_methods_accept_INLRSocketImpl__Z_arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* TCPSocket_methods_accept_INLRSocketImpl__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TCPSocket_method_accept_INLRSocketImpl__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "accept", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_accept", // alternative name of method
  -1, // altlabelHashCode
  TCPSocket_methods_accept_INLRSocketImpl__Z_args, // the arguments
  0, //arguments count
  TCPSocket_methods_accept_INLRSocketImpl__Z_exceptions, // the declared exceptions
  TCPSocket_MetainfoWrapper::TCPSocket_method_accept_INLRSocketImpl__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TCPSocket_methods_available__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TCPSocket_methods_available__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TCPSocket_method_available__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "available", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3_available", // alternative name of method
  -1, // altlabelHashCode
  TCPSocket_methods_available__I_args, // the arguments
  0, //arguments count
  TCPSocket_methods_available__I_exceptions, // the declared exceptions
  TCPSocket_MetainfoWrapper::TCPSocket_method_available__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TCPSocket_methods_bind_INLRInetAddress_I_V_arg_host = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "host", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetAddress::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TCPSocket_methods_bind_INLRInetAddress_I_V_arg_port = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "port", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TCPSocket_methods_bind_INLRInetAddress_I_V_args[] = 
{
  &TCPSocket_methods_bind_INLRInetAddress_I_V_arg_host,
  &TCPSocket_methods_bind_INLRInetAddress_I_V_arg_port,
  0
};

::acdk::lang::dmi::ClazzInfo* TCPSocket_methods_bind_INLRInetAddress_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TCPSocket_method_bind_INLRInetAddress_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "bind", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_bind", // alternative name of method
  -1, // altlabelHashCode
  TCPSocket_methods_bind_INLRInetAddress_I_V_args, // the arguments
  0, //arguments count
  TCPSocket_methods_bind_INLRInetAddress_I_V_exceptions, // the declared exceptions
  TCPSocket_MetainfoWrapper::TCPSocket_method_bind_INLRInetAddress_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TCPSocket_methods_close__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TCPSocket_methods_close__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TCPSocket_method_close__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "close", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_close", // alternative name of method
  -1, // altlabelHashCode
  TCPSocket_methods_close__V_args, // the arguments
  0, //arguments count
  TCPSocket_methods_close__V_exceptions, // the declared exceptions
  TCPSocket_MetainfoWrapper::TCPSocket_method_close__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TCPSocket_methods_connect_INLRInetAddress_II_Z_arg_address = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "address", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetAddress::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TCPSocket_methods_connect_INLRInetAddress_II_Z_arg_port = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "port", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TCPSocket_methods_connect_INLRInetAddress_II_Z_arg_timeOut = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "timeOut", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TCPSocket_methods_connect_INLRInetAddress_II_Z_args[] = 
{
  &TCPSocket_methods_connect_INLRInetAddress_II_Z_arg_address,
  &TCPSocket_methods_connect_INLRInetAddress_II_Z_arg_port,
  &TCPSocket_methods_connect_INLRInetAddress_II_Z_arg_timeOut,
  0
};

::acdk::lang::dmi::ClazzInfo* TCPSocket_methods_connect_INLRInetAddress_II_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TCPSocket_method_connect_INLRInetAddress_II_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "connect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_connect", // alternative name of method
  -1, // altlabelHashCode
  TCPSocket_methods_connect_INLRInetAddress_II_Z_args, // the arguments
  0, //arguments count
  TCPSocket_methods_connect_INLRInetAddress_II_Z_exceptions, // the declared exceptions
  TCPSocket_MetainfoWrapper::TCPSocket_method_connect_INLRInetAddress_II_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TCPSocket_methods_connect_INLRInetAddress_I_Z_arg_address = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "address", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetAddress::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TCPSocket_methods_connect_INLRInetAddress_I_Z_arg_port = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "port", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TCPSocket_methods_connect_INLRInetAddress_I_Z_args[] = 
{
  &TCPSocket_methods_connect_INLRInetAddress_I_Z_arg_address,
  &TCPSocket_methods_connect_INLRInetAddress_I_Z_arg_port,
  0
};

::acdk::lang::dmi::ClazzInfo* TCPSocket_methods_connect_INLRInetAddress_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TCPSocket_method_connect_INLRInetAddress_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "connect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_connect", // alternative name of method
  -1, // altlabelHashCode
  TCPSocket_methods_connect_INLRInetAddress_I_Z_args, // the arguments
  0, //arguments count
  TCPSocket_methods_connect_INLRInetAddress_I_Z_exceptions, // the declared exceptions
  TCPSocket_MetainfoWrapper::TCPSocket_method_connect_INLRInetAddress_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TCPSocket_methods_connect_INLRString_II_Z_arg_host = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "host", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TCPSocket_methods_connect_INLRString_II_Z_arg_port = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "port", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TCPSocket_methods_connect_INLRString_II_Z_arg_timeOut = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "timeOut", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TCPSocket_methods_connect_INLRString_II_Z_args[] = 
{
  &TCPSocket_methods_connect_INLRString_II_Z_arg_host,
  &TCPSocket_methods_connect_INLRString_II_Z_arg_port,
  &TCPSocket_methods_connect_INLRString_II_Z_arg_timeOut,
  0
};

::acdk::lang::dmi::ClazzInfo* TCPSocket_methods_connect_INLRString_II_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TCPSocket_method_connect_INLRString_II_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "connect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_8_connect", // alternative name of method
  -1, // altlabelHashCode
  TCPSocket_methods_connect_INLRString_II_Z_args, // the arguments
  0, //arguments count
  TCPSocket_methods_connect_INLRString_II_Z_exceptions, // the declared exceptions
  TCPSocket_MetainfoWrapper::TCPSocket_method_connect_INLRString_II_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TCPSocket_methods_connect_INLRString_I_Z_arg_host = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "host", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TCPSocket_methods_connect_INLRString_I_Z_arg_port = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "port", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TCPSocket_methods_connect_INLRString_I_Z_args[] = 
{
  &TCPSocket_methods_connect_INLRString_I_Z_arg_host,
  &TCPSocket_methods_connect_INLRString_I_Z_arg_port,
  0
};

::acdk::lang::dmi::ClazzInfo* TCPSocket_methods_connect_INLRString_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TCPSocket_method_connect_INLRString_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "connect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_9_connect", // alternative name of method
  -1, // altlabelHashCode
  TCPSocket_methods_connect_INLRString_I_Z_args, // the arguments
  0, //arguments count
  TCPSocket_methods_connect_INLRString_I_Z_exceptions, // the declared exceptions
  TCPSocket_MetainfoWrapper::TCPSocket_method_connect_INLRString_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TCPSocket_methods_create_Z_V_arg_stream = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "stream", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TCPSocket_methods_create_Z_V_args[] = 
{
  &TCPSocket_methods_create_Z_V_arg_stream,
  0
};

::acdk::lang::dmi::ClazzInfo* TCPSocket_methods_create_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TCPSocket_method_create_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_create", // alternative name of method
  -1, // altlabelHashCode
  TCPSocket_methods_create_Z_V_args, // the arguments
  0, //arguments count
  TCPSocket_methods_create_Z_V_exceptions, // the declared exceptions
  TCPSocket_MetainfoWrapper::TCPSocket_method_create_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TCPSocket_methods_flush__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TCPSocket_methods_flush__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TCPSocket_method_flush__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "flush", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_q_flush", // alternative name of method
  -1, // altlabelHashCode
  TCPSocket_methods_flush__V_args, // the arguments
  0, //arguments count
  TCPSocket_methods_flush__V_exceptions, // the declared exceptions
  TCPSocket_MetainfoWrapper::TCPSocket_method_flush__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TCPSocket_methods_getDeviceName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TCPSocket_methods_getDeviceName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TCPSocket_method_getDeviceName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDeviceName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_v_getDeviceName", // alternative name of method
  -1, // altlabelHashCode
  TCPSocket_methods_getDeviceName__LRString__args, // the arguments
  0, //arguments count
  TCPSocket_methods_getDeviceName__LRString__exceptions, // the declared exceptions
  TCPSocket_MetainfoWrapper::TCPSocket_method_getDeviceName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TCPSocket_methods_getInetAddress__LRInetAddress__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TCPSocket_methods_getInetAddress__LRInetAddress__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TCPSocket_method_getInetAddress__LRInetAddress_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInetAddress", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInetAddress::clazzInfo(), // return type
  "_b_getInetAddress", // alternative name of method
  -1, // altlabelHashCode
  TCPSocket_methods_getInetAddress__LRInetAddress__args, // the arguments
  0, //arguments count
  TCPSocket_methods_getInetAddress__LRInetAddress__exceptions, // the declared exceptions
  TCPSocket_MetainfoWrapper::TCPSocket_method_getInetAddress__LRInetAddress__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TCPSocket_methods_getInputStream__LRReader__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TCPSocket_methods_getInputStream__LRReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TCPSocket_method_getInputStream__LRReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInputStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReader::clazzInfo(), // return type
  "_d_getInputStream", // alternative name of method
  -1, // altlabelHashCode
  TCPSocket_methods_getInputStream__LRReader__args, // the arguments
  0, //arguments count
  TCPSocket_methods_getInputStream__LRReader__exceptions, // the declared exceptions
  TCPSocket_MetainfoWrapper::TCPSocket_method_getInputStream__LRReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TCPSocket_methods_getLocalPort__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TCPSocket_methods_getLocalPort__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TCPSocket_method_getLocalPort__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLocalPort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_c_getLocalPort", // alternative name of method
  -1, // altlabelHashCode
  TCPSocket_methods_getLocalPort__I_args, // the arguments
  0, //arguments count
  TCPSocket_methods_getLocalPort__I_exceptions, // the declared exceptions
  TCPSocket_MetainfoWrapper::TCPSocket_method_getLocalPort__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TCPSocket_methods_getOutputStream__LRWriter__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TCPSocket_methods_getOutputStream__LRWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TCPSocket_method_getOutputStream__LRWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getOutputStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriter::clazzInfo(), // return type
  "_e_getOutputStream", // alternative name of method
  -1, // altlabelHashCode
  TCPSocket_methods_getOutputStream__LRWriter__args, // the arguments
  0, //arguments count
  TCPSocket_methods_getOutputStream__LRWriter__exceptions, // the declared exceptions
  TCPSocket_MetainfoWrapper::TCPSocket_method_getOutputStream__LRWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TCPSocket_methods_getSetSocketErrno_I_I_arg_newErrno = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "newErrno", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TCPSocket_methods_getSetSocketErrno_I_I_args[] = 
{
  &TCPSocket_methods_getSetSocketErrno_I_I_arg_newErrno,
  0
};

::acdk::lang::dmi::ClazzInfo* TCPSocket_methods_getSetSocketErrno_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TCPSocket_method_getSetSocketErrno_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSetSocketErrno", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_E_getSetSocketErrno", // alternative name of method
  -1, // altlabelHashCode
  TCPSocket_methods_getSetSocketErrno_I_I_args, // the arguments
  0, //arguments count
  TCPSocket_methods_getSetSocketErrno_I_I_exceptions, // the declared exceptions
  TCPSocket_MetainfoWrapper::TCPSocket_method_getSetSocketErrno_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TCPSocket_methods_getSetSocketErrno__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TCPSocket_methods_getSetSocketErrno__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TCPSocket_method_getSetSocketErrno__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getSetSocketErrno", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_F_getSetSocketErrno", // alternative name of method
  -1, // altlabelHashCode
  TCPSocket_methods_getSetSocketErrno__I_args, // the arguments
  0, //arguments count
  TCPSocket_methods_getSetSocketErrno__I_exceptions, // the declared exceptions
  TCPSocket_MetainfoWrapper::TCPSocket_method_getSetSocketErrno__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TCPSocket_methods_getSoTimeout__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TCPSocket_methods_getSoTimeout__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TCPSocket_method_getSoTimeout__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSoTimeout", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_C_getSoTimeout", // alternative name of method
  -1, // altlabelHashCode
  TCPSocket_methods_getSoTimeout__I_args, // the arguments
  0, //arguments count
  TCPSocket_methods_getSoTimeout__I_exceptions, // the declared exceptions
  TCPSocket_MetainfoWrapper::TCPSocket_method_getSoTimeout__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TCPSocket_methods_isBound__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TCPSocket_methods_isBound__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TCPSocket_method_isBound__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isBound", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_D_isBound", // alternative name of method
  -1, // altlabelHashCode
  TCPSocket_methods_isBound__Z_args, // the arguments
  0, //arguments count
  TCPSocket_methods_isBound__Z_exceptions, // the declared exceptions
  TCPSocket_MetainfoWrapper::TCPSocket_method_isBound__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TCPSocket_methods_isConnected__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TCPSocket_methods_isConnected__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TCPSocket_method_isConnected__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isConnected", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_y_isConnected", // alternative name of method
  -1, // altlabelHashCode
  TCPSocket_methods_isConnected__Z_args, // the arguments
  0, //arguments count
  TCPSocket_methods_isConnected__Z_exceptions, // the declared exceptions
  TCPSocket_MetainfoWrapper::TCPSocket_method_isConnected__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TCPSocket_methods_isReadable__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TCPSocket_methods_isReadable__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TCPSocket_method_isReadable__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isReadable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_x_isReadable", // alternative name of method
  -1, // altlabelHashCode
  TCPSocket_methods_isReadable__Z_args, // the arguments
  0, //arguments count
  TCPSocket_methods_isReadable__Z_exceptions, // the declared exceptions
  TCPSocket_MetainfoWrapper::TCPSocket_method_isReadable__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TCPSocket_methods_isWriteable__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TCPSocket_methods_isWriteable__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TCPSocket_method_isWriteable__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isWriteable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_w_isWriteable", // alternative name of method
  -1, // altlabelHashCode
  TCPSocket_methods_isWriteable__Z_args, // the arguments
  0, //arguments count
  TCPSocket_methods_isWriteable__Z_exceptions, // the declared exceptions
  TCPSocket_MetainfoWrapper::TCPSocket_method_isWriteable__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TCPSocket_methods_listen_I_V_arg_backlog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "backlog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TCPSocket_methods_listen_I_V_args[] = 
{
  &TCPSocket_methods_listen_I_V_arg_backlog,
  0
};

::acdk::lang::dmi::ClazzInfo* TCPSocket_methods_listen_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TCPSocket_method_listen_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "listen", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_listen", // alternative name of method
  -1, // altlabelHashCode
  TCPSocket_methods_listen_I_V_args, // the arguments
  0, //arguments count
  TCPSocket_methods_listen_I_V_exceptions, // the declared exceptions
  TCPSocket_MetainfoWrapper::TCPSocket_method_listen_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TCPSocket_methods_mark_I_V_arg_readAheadLimit = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "readAheadLimit", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TCPSocket_methods_mark_I_V_args[] = 
{
  &TCPSocket_methods_mark_I_V_arg_readAheadLimit,
  0
};

::acdk::lang::dmi::ClazzInfo* TCPSocket_methods_mark_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TCPSocket_method_mark_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "mark", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_m_mark", // alternative name of method
  -1, // altlabelHashCode
  TCPSocket_methods_mark_I_V_args, // the arguments
  0, //arguments count
  TCPSocket_methods_mark_I_V_exceptions, // the declared exceptions
  TCPSocket_MetainfoWrapper::TCPSocket_method_mark_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TCPSocket_methods_markSupported__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TCPSocket_methods_markSupported__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TCPSocket_method_markSupported__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "markSupported", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_n_markSupported", // alternative name of method
  -1, // altlabelHashCode
  TCPSocket_methods_markSupported__Z_args, // the arguments
  0, //arguments count
  TCPSocket_methods_markSupported__Z_exceptions, // the declared exceptions
  TCPSocket_MetainfoWrapper::TCPSocket_method_markSupported__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TCPSocket_methods_read_INLRbyteArray__I_arg_buffer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buffer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TCPSocket_methods_read_INLRbyteArray__I_args[] = 
{
  &TCPSocket_methods_read_INLRbyteArray__I_arg_buffer,
  0
};

::acdk::lang::dmi::ClazzInfo* TCPSocket_methods_read_INLRbyteArray__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TCPSocket_method_read_INLRbyteArray__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "read", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_k_read", // alternative name of method
  -1, // altlabelHashCode
  TCPSocket_methods_read_INLRbyteArray__I_args, // the arguments
  0, //arguments count
  TCPSocket_methods_read_INLRbyteArray__I_exceptions, // the declared exceptions
  TCPSocket_MetainfoWrapper::TCPSocket_method_read_INLRbyteArray__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TCPSocket_methods_read_INLRbyteArray_I_I_arg_buffer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buffer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TCPSocket_methods_read_INLRbyteArray_I_I_arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TCPSocket_methods_read_INLRbyteArray_I_I_args[] = 
{
  &TCPSocket_methods_read_INLRbyteArray_I_I_arg_buffer,
  &TCPSocket_methods_read_INLRbyteArray_I_I_arg_offset,
  0
};

::acdk::lang::dmi::ClazzInfo* TCPSocket_methods_read_INLRbyteArray_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TCPSocket_method_read_INLRbyteArray_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "read", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_l_read", // alternative name of method
  -1, // altlabelHashCode
  TCPSocket_methods_read_INLRbyteArray_I_I_args, // the arguments
  0, //arguments count
  TCPSocket_methods_read_INLRbyteArray_I_I_exceptions, // the declared exceptions
  TCPSocket_MetainfoWrapper::TCPSocket_method_read_INLRbyteArray_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TCPSocket_methods_read__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TCPSocket_methods_read__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TCPSocket_method_read__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "read", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_i_read", // alternative name of method
  -1, // altlabelHashCode
  TCPSocket_methods_read__I_args, // the arguments
  0, //arguments count
  TCPSocket_methods_read__I_exceptions, // the declared exceptions
  TCPSocket_MetainfoWrapper::TCPSocket_method_read__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TCPSocket_methods_read_INLRbyteArray_II_I_arg_buffer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buffer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TCPSocket_methods_read_INLRbyteArray_II_I_arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TCPSocket_methods_read_INLRbyteArray_II_I_arg_len = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "len", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TCPSocket_methods_read_INLRbyteArray_II_I_args[] = 
{
  &TCPSocket_methods_read_INLRbyteArray_II_I_arg_buffer,
  &TCPSocket_methods_read_INLRbyteArray_II_I_arg_offset,
  &TCPSocket_methods_read_INLRbyteArray_II_I_arg_len,
  0
};

::acdk::lang::dmi::ClazzInfo* TCPSocket_methods_read_INLRbyteArray_II_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TCPSocket_method_read_INLRbyteArray_II_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "read", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_j_read", // alternative name of method
  -1, // altlabelHashCode
  TCPSocket_methods_read_INLRbyteArray_II_I_args, // the arguments
  0, //arguments count
  TCPSocket_methods_read_INLRbyteArray_II_I_exceptions, // the declared exceptions
  TCPSocket_MetainfoWrapper::TCPSocket_method_read_INLRbyteArray_II_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TCPSocket_methods_ready__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TCPSocket_methods_ready__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TCPSocket_method_ready__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ready", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_p_ready", // alternative name of method
  -1, // altlabelHashCode
  TCPSocket_methods_ready__Z_args, // the arguments
  0, //arguments count
  TCPSocket_methods_ready__Z_exceptions, // the declared exceptions
  TCPSocket_MetainfoWrapper::TCPSocket_method_ready__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TCPSocket_methods_receive_INLRDatagramPacket__V_arg_packet = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "packet", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDatagramPacket::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TCPSocket_methods_receive_INLRDatagramPacket__V_args[] = 
{
  &TCPSocket_methods_receive_INLRDatagramPacket__V_arg_packet,
  0
};

::acdk::lang::dmi::ClazzInfo* TCPSocket_methods_receive_INLRDatagramPacket__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TCPSocket_method_receive_INLRDatagramPacket__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "receive", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_A_receive", // alternative name of method
  -1, // altlabelHashCode
  TCPSocket_methods_receive_INLRDatagramPacket__V_args, // the arguments
  0, //arguments count
  TCPSocket_methods_receive_INLRDatagramPacket__V_exceptions, // the declared exceptions
  TCPSocket_MetainfoWrapper::TCPSocket_method_receive_INLRDatagramPacket__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TCPSocket_methods_reset__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TCPSocket_methods_reset__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TCPSocket_method_reset__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "reset", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_o_reset", // alternative name of method
  -1, // altlabelHashCode
  TCPSocket_methods_reset__V_args, // the arguments
  0, //arguments count
  TCPSocket_methods_reset__V_exceptions, // the declared exceptions
  TCPSocket_MetainfoWrapper::TCPSocket_method_reset__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TCPSocket_methods_seek_IJ_J_arg_seekrel = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "seekrel", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TCPSocket_methods_seek_IJ_J_arg_seekpos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "seekpos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TCPSocket_methods_seek_IJ_J_args[] = 
{
  &TCPSocket_methods_seek_IJ_J_arg_seekrel,
  &TCPSocket_methods_seek_IJ_J_arg_seekpos,
  0
};

::acdk::lang::dmi::ClazzInfo* TCPSocket_methods_seek_IJ_J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TCPSocket_method_seek_IJ_J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "seek", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_g_seek", // alternative name of method
  -1, // altlabelHashCode
  TCPSocket_methods_seek_IJ_J_args, // the arguments
  0, //arguments count
  TCPSocket_methods_seek_IJ_J_exceptions, // the declared exceptions
  TCPSocket_MetainfoWrapper::TCPSocket_method_seek_IJ_J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TCPSocket_methods_send_INLRDatagramPacket__V_arg_packet = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "packet", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDatagramPacket::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TCPSocket_methods_send_INLRDatagramPacket__V_args[] = 
{
  &TCPSocket_methods_send_INLRDatagramPacket__V_arg_packet,
  0
};

::acdk::lang::dmi::ClazzInfo* TCPSocket_methods_send_INLRDatagramPacket__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TCPSocket_method_send_INLRDatagramPacket__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "send", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_z_send", // alternative name of method
  -1, // altlabelHashCode
  TCPSocket_methods_send_INLRDatagramPacket__V_args, // the arguments
  0, //arguments count
  TCPSocket_methods_send_INLRDatagramPacket__V_exceptions, // the declared exceptions
  TCPSocket_MetainfoWrapper::TCPSocket_method_send_INLRDatagramPacket__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TCPSocket_methods_setSoTimeout_I_V_arg_timeOut = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "timeOut", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TCPSocket_methods_setSoTimeout_I_V_args[] = 
{
  &TCPSocket_methods_setSoTimeout_I_V_arg_timeOut,
  0
};

::acdk::lang::dmi::ClazzInfo* TCPSocket_methods_setSoTimeout_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TCPSocket_method_setSoTimeout_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSoTimeout", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_B_setSoTimeout", // alternative name of method
  -1, // altlabelHashCode
  TCPSocket_methods_setSoTimeout_I_V_args, // the arguments
  0, //arguments count
  TCPSocket_methods_setSoTimeout_I_V_exceptions, // the declared exceptions
  TCPSocket_MetainfoWrapper::TCPSocket_method_setSoTimeout_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TCPSocket_methods_skip_J_J_arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TCPSocket_methods_skip_J_J_args[] = 
{
  &TCPSocket_methods_skip_J_J_arg_n,
  0
};

::acdk::lang::dmi::ClazzInfo* TCPSocket_methods_skip_J_J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TCPSocket_method_skip_J_J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "skip", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_h_skip", // alternative name of method
  -1, // altlabelHashCode
  TCPSocket_methods_skip_J_J_args, // the arguments
  0, //arguments count
  TCPSocket_methods_skip_J_J_exceptions, // the declared exceptions
  TCPSocket_MetainfoWrapper::TCPSocket_method_skip_J_J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TCPSocket_methods_write_B_V_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TCPSocket_methods_write_B_V_args[] = 
{
  &TCPSocket_methods_write_B_V_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* TCPSocket_methods_write_B_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TCPSocket_method_write_B_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "write", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_r_write", // alternative name of method
  -1, // altlabelHashCode
  TCPSocket_methods_write_B_V_args, // the arguments
  0, //arguments count
  TCPSocket_methods_write_B_V_exceptions, // the declared exceptions
  TCPSocket_MetainfoWrapper::TCPSocket_method_write_B_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TCPSocket_methods_write_INLRbyteArray_I_V_arg_ch = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ch", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TCPSocket_methods_write_INLRbyteArray_I_V_arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TCPSocket_methods_write_INLRbyteArray_I_V_args[] = 
{
  &TCPSocket_methods_write_INLRbyteArray_I_V_arg_ch,
  &TCPSocket_methods_write_INLRbyteArray_I_V_arg_offset,
  0
};

::acdk::lang::dmi::ClazzInfo* TCPSocket_methods_write_INLRbyteArray_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TCPSocket_method_write_INLRbyteArray_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "write", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_u_write", // alternative name of method
  -1, // altlabelHashCode
  TCPSocket_methods_write_INLRbyteArray_I_V_args, // the arguments
  0, //arguments count
  TCPSocket_methods_write_INLRbyteArray_I_V_exceptions, // the declared exceptions
  TCPSocket_MetainfoWrapper::TCPSocket_method_write_INLRbyteArray_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TCPSocket_methods_write_INLRbyteArray_II_V_arg_ch = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ch", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TCPSocket_methods_write_INLRbyteArray_II_V_arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TCPSocket_methods_write_INLRbyteArray_II_V_arg_len = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "len", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TCPSocket_methods_write_INLRbyteArray_II_V_args[] = 
{
  &TCPSocket_methods_write_INLRbyteArray_II_V_arg_ch,
  &TCPSocket_methods_write_INLRbyteArray_II_V_arg_offset,
  &TCPSocket_methods_write_INLRbyteArray_II_V_arg_len,
  0
};

::acdk::lang::dmi::ClazzInfo* TCPSocket_methods_write_INLRbyteArray_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TCPSocket_method_write_INLRbyteArray_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "write", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_s_write", // alternative name of method
  -1, // altlabelHashCode
  TCPSocket_methods_write_INLRbyteArray_II_V_args, // the arguments
  0, //arguments count
  TCPSocket_methods_write_INLRbyteArray_II_V_exceptions, // the declared exceptions
  TCPSocket_MetainfoWrapper::TCPSocket_method_write_INLRbyteArray_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TCPSocket_methods_write_INLRbyteArray__V_arg_ch = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ch", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TCPSocket_methods_write_INLRbyteArray__V_args[] = 
{
  &TCPSocket_methods_write_INLRbyteArray__V_arg_ch,
  0
};

::acdk::lang::dmi::ClazzInfo* TCPSocket_methods_write_INLRbyteArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TCPSocket_method_write_INLRbyteArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "write", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_t_write", // alternative name of method
  -1, // altlabelHashCode
  TCPSocket_methods_write_INLRbyteArray__V_args, // the arguments
  0, //arguments count
  TCPSocket_methods_write_INLRbyteArray__V_exceptions, // the declared exceptions
  TCPSocket_MetainfoWrapper::TCPSocket_method_write_INLRbyteArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TCPSocket_methods[] = 
{
  &TCPSocket_method_GetClass__L_acdk_lang_RClass_,
  &TCPSocket_method_TCPSocket__LRTCPSocket_,
  &TCPSocket_method__resolveLocalPortAddress__V,
  &TCPSocket_method_accept_INLRSocketImpl_I_Z,
  &TCPSocket_method_accept_INLRSocketImpl__Z,
  &TCPSocket_method_available__I,
  &TCPSocket_method_bind_INLRInetAddress_I_V,
  &TCPSocket_method_close__V,
  &TCPSocket_method_connect_INLRInetAddress_II_Z,
  &TCPSocket_method_connect_INLRInetAddress_I_Z,
  &TCPSocket_method_connect_INLRString_II_Z,
  &TCPSocket_method_connect_INLRString_I_Z,
  &TCPSocket_method_create_Z_V,
  &TCPSocket_method_flush__V,
  &TCPSocket_method_getDeviceName__LRString_,
  &TCPSocket_method_getInetAddress__LRInetAddress_,
  &TCPSocket_method_getInputStream__LRReader_,
  &TCPSocket_method_getLocalPort__I,
  &TCPSocket_method_getOutputStream__LRWriter_,
  &TCPSocket_method_getSetSocketErrno_I_I,
  &TCPSocket_method_getSetSocketErrno__I,
  &TCPSocket_method_getSoTimeout__I,
  &TCPSocket_method_isBound__Z,
  &TCPSocket_method_isConnected__Z,
  &TCPSocket_method_isReadable__Z,
  &TCPSocket_method_isWriteable__Z,
  &TCPSocket_method_listen_I_V,
  &TCPSocket_method_mark_I_V,
  &TCPSocket_method_markSupported__Z,
  &TCPSocket_method_read_INLRbyteArray__I,
  &TCPSocket_method_read_INLRbyteArray_I_I,
  &TCPSocket_method_read__I,
  &TCPSocket_method_read_INLRbyteArray_II_I,
  &TCPSocket_method_ready__Z,
  &TCPSocket_method_receive_INLRDatagramPacket__V,
  &TCPSocket_method_reset__V,
  &TCPSocket_method_seek_IJ_J,
  &TCPSocket_method_send_INLRDatagramPacket__V,
  &TCPSocket_method_setSoTimeout_I_V,
  &TCPSocket_method_skip_J_J,
  &TCPSocket_method_write_B_V,
  &TCPSocket_method_write_INLRbyteArray_I_V,
  &TCPSocket_method_write_INLRbyteArray_II_V,
  &TCPSocket_method_write_INLRbyteArray__V,
  0
};


struct TCPSocket_MetaInfoInitializer
{  TCPSocket_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TCPSocket::clazzInfo();
    ci->fields =  _TCPSocket_fields;
    ci->methods =  _TCPSocket_methods;
    ci->_scopeParent = acdk_net_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TCPSocket_MetaInfoInitializer TCPSocket_MetaInfoInitializer_staticinstance__;


struct TCPSocket_clazzInfo_ClazzAttributesResInitializer5
{
  TCPSocket_clazzInfo_ClazzAttributesResInitializer5()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&TCPSocket_methods_seek_IJ_J_arg_seekrel, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)::acdk::io::SeekPosMetaInf::GetEnumInfo()));
  }
};

TCPSocket_clazzInfo_ClazzAttributesResInitializer5 TCPSocket_clazzInfo_ClazzAttributesResInitializer5_instance;



} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

using namespace acdk::lang;
using namespace acdk::io;

//static
::acdk::lang::RObject
TransListener_create_array(int length)
{
  return new ObjectArrayImpl<RTransListener>(length);
}

//static
::acdk::lang::RObject
TransListener_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TransListener_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TransListener_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TransListener::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TransListener_method_listen_INBII_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TransListener* This = dmi_cast<TransListener>(This_);
  ret = This->listen(::acdk::lang::dmi::castTo< byte>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _TransListener_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TransListener_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TransListener_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TransListener_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TransListener_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TransListener_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TransListener_MetainfoWrapper::TransListener_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TransListener_methods_listen_INBII_Z_arg_block = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "block", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TransListener_methods_listen_INBII_Z_arg_block_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "block_size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TransListener_methods_listen_INBII_Z_arg_millisecs = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "millisecs", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TransListener_methods_listen_INBII_Z_args[] = 
{
  &TransListener_methods_listen_INBII_Z_arg_block,
  &TransListener_methods_listen_INBII_Z_arg_block_size,
  &TransListener_methods_listen_INBII_Z_arg_millisecs,
  0
};

::acdk::lang::dmi::ClazzInfo* TransListener_methods_listen_INBII_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TransListener_method_listen_INBII_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "listen", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_0_listen", // alternative name of method
  -1, // altlabelHashCode
  TransListener_methods_listen_INBII_Z_args, // the arguments
  0, //arguments count
  TransListener_methods_listen_INBII_Z_exceptions, // the declared exceptions
  TransListener_MetainfoWrapper::TransListener_method_listen_INBII_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TransListener_methods[] = 
{
  &TransListener_method_GetClass__L_acdk_lang_RClass_,
  &TransListener_method_listen_INBII_Z,
  0
};


struct TransListener_MetaInfoInitializer
{  TransListener_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TransListener::clazzInfo();
    ci->fields =  _TransListener_fields;
    ci->methods =  _TransListener_methods;
    ci->_scopeParent = acdk_net_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TransListener_MetaInfoInitializer TransListener_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

using namespace acdk::lang;
using namespace acdk::io;

//static
::acdk::lang::RObject
TransRateReader_create_array(int length)
{
  return new ObjectArrayImpl<RTransRateReader>(length);
}

//static
::acdk::lang::RObject
TransRateReader_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TransRateReader_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TransRateReader_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TransRateReader::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TransRateReader_method_TransRateReader_INL_acdk_io_RReader_I_LRTransRateReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TransRateReader(::acdk::lang::dmi::castTo< ::acdk::io::RReader>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TransRateReader_method_read__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TransRateReader* This = dmi_cast<TransRateReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TransRateReader::read();
    else
      ret = This->read();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TransRateReader_method_setBytesPerSecondRate_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TransRateReader* This = dmi_cast<TransRateReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TransRateReader::setBytesPerSecondRate(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setBytesPerSecondRate(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TransRateReader_fields__blockSize_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TransRateReader* This = dmi_cast<TransRateReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_blockSize, flags);
    else
      This->_blockSize = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TransRateReader_fields__bytePerSecondRate_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TransRateReader* This = dmi_cast<TransRateReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_bytePerSecondRate, flags);
    else
      This->_bytePerSecondRate = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TransRateReader_fields__bytesRead_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TransRateReader* This = dmi_cast<TransRateReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_bytesRead, flags);
    else
      This->_bytesRead = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TransRateReader_fields__bytesWhileSleepASec_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TransRateReader* This = dmi_cast<TransRateReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_bytesWhileSleepASec, flags);
    else
      This->_bytesWhileSleepASec = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TransRateReader_fields__listener_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TransRateReader* This = dmi_cast<TransRateReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_listener, flags);
    else
      This->_listener = ::acdk::lang::dmi::castTo< RTransListener>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo TransRateReader_fields__blockSize = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_blockSize", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TransRateReader_MetainfoWrapper::TransRateReader_fields__blockSize_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TransRateReader_fields__bytePerSecondRate = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_bytePerSecondRate", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TransRateReader_MetainfoWrapper::TransRateReader_fields__bytePerSecondRate_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TransRateReader_fields__bytesRead = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_bytesRead", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TransRateReader_MetainfoWrapper::TransRateReader_fields__bytesRead_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TransRateReader_fields__bytesWhileSleepASec = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_bytesWhileSleepASec", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TransRateReader_MetainfoWrapper::TransRateReader_fields__bytesWhileSleepASec_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TransRateReader_fields__listener = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_listener", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTransListener::clazzInfo(),
  TransRateReader_MetainfoWrapper::TransRateReader_fields__listener_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _TransRateReader_fields[] = 
{
  &TransRateReader_fields__blockSize,
  &TransRateReader_fields__bytePerSecondRate,
  &TransRateReader_fields__bytesRead,
  &TransRateReader_fields__bytesWhileSleepASec,
  &TransRateReader_fields__listener,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TransRateReader_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TransRateReader_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TransRateReader_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TransRateReader_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TransRateReader_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TransRateReader_MetainfoWrapper::TransRateReader_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TransRateReader_methods_TransRateReader_INL_acdk_io_RReader_I_LRTransRateReader__arg_in = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "in", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TransRateReader_methods_TransRateReader_INL_acdk_io_RReader_I_LRTransRateReader__arg_bytesPerSecond = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bytesPerSecond", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TransRateReader_methods_TransRateReader_INL_acdk_io_RReader_I_LRTransRateReader__args[] = 
{
  &TransRateReader_methods_TransRateReader_INL_acdk_io_RReader_I_LRTransRateReader__arg_in,
  &TransRateReader_methods_TransRateReader_INL_acdk_io_RReader_I_LRTransRateReader__arg_bytesPerSecond,
  0
};

::acdk::lang::dmi::ClazzInfo* TransRateReader_methods_TransRateReader_INL_acdk_io_RReader_I_LRTransRateReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TransRateReader_method_TransRateReader_INL_acdk_io_RReader_I_LRTransRateReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TransRateReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TransRateReader::clazzInfo(), // return type
  "_0_TransRateReader", // alternative name of method
  -1, // altlabelHashCode
  TransRateReader_methods_TransRateReader_INL_acdk_io_RReader_I_LRTransRateReader__args, // the arguments
  0, //arguments count
  TransRateReader_methods_TransRateReader_INL_acdk_io_RReader_I_LRTransRateReader__exceptions, // the declared exceptions
  TransRateReader_MetainfoWrapper::TransRateReader_method_TransRateReader_INL_acdk_io_RReader_I_LRTransRateReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TransRateReader_methods_read__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TransRateReader_methods_read__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TransRateReader_method_read__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "read", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1_read", // alternative name of method
  -1, // altlabelHashCode
  TransRateReader_methods_read__I_args, // the arguments
  0, //arguments count
  TransRateReader_methods_read__I_exceptions, // the declared exceptions
  TransRateReader_MetainfoWrapper::TransRateReader_method_read__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TransRateReader_methods_setBytesPerSecondRate_I_V_arg_newrate = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "newrate", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TransRateReader_methods_setBytesPerSecondRate_I_V_args[] = 
{
  &TransRateReader_methods_setBytesPerSecondRate_I_V_arg_newrate,
  0
};

::acdk::lang::dmi::ClazzInfo* TransRateReader_methods_setBytesPerSecondRate_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TransRateReader_method_setBytesPerSecondRate_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setBytesPerSecondRate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_setBytesPerSecondRate", // alternative name of method
  -1, // altlabelHashCode
  TransRateReader_methods_setBytesPerSecondRate_I_V_args, // the arguments
  0, //arguments count
  TransRateReader_methods_setBytesPerSecondRate_I_V_exceptions, // the declared exceptions
  TransRateReader_MetainfoWrapper::TransRateReader_method_setBytesPerSecondRate_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TransRateReader_methods[] = 
{
  &TransRateReader_method_GetClass__L_acdk_lang_RClass_,
  &TransRateReader_method_TransRateReader_INL_acdk_io_RReader_I_LRTransRateReader_,
  &TransRateReader_method_read__I,
  &TransRateReader_method_setBytesPerSecondRate_I_V,
  0
};


struct TransRateReader_MetaInfoInitializer
{  TransRateReader_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TransRateReader::clazzInfo();
    ci->fields =  _TransRateReader_fields;
    ci->methods =  _TransRateReader_methods;
    ci->_scopeParent = acdk_net_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TransRateReader_MetaInfoInitializer TransRateReader_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

using namespace acdk::lang;
using namespace acdk::io;

//static
::acdk::lang::RObject
TransRateWriter_create_array(int length)
{
  return new ObjectArrayImpl<RTransRateWriter>(length);
}

//static
::acdk::lang::RObject
TransRateWriter_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TransRateWriter_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TransRateWriter_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TransRateWriter::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TransRateWriter_method_TransRateWriter_INL_acdk_io_RWriter_I_LRTransRateWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TransRateWriter(::acdk::lang::dmi::castTo< ::acdk::io::RWriter>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TransRateWriter_method_setBytesPerSecondRate_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TransRateWriter* This = dmi_cast<TransRateWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TransRateWriter::setBytesPerSecondRate(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setBytesPerSecondRate(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TransRateWriter_method_write_INLRbyteArray_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TransRateWriter* This = dmi_cast<TransRateWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TransRateWriter::write(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    else
        This->write(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TransRateWriter_method_write_INLRbyteArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TransRateWriter* This = dmi_cast<TransRateWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TransRateWriter::write(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc));
    else
        This->write(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TransRateWriter_method_write_INLRbyteArray_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TransRateWriter* This = dmi_cast<TransRateWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TransRateWriter::write(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->write(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TransRateWriter_fields__blockSize_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TransRateWriter* This = dmi_cast<TransRateWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_blockSize, flags);
    else
      This->_blockSize = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TransRateWriter_fields__bytePerSecondRate_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TransRateWriter* This = dmi_cast<TransRateWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_bytePerSecondRate, flags);
    else
      This->_bytePerSecondRate = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TransRateWriter_fields__bytesWhileSleepASec_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TransRateWriter* This = dmi_cast<TransRateWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_bytesWhileSleepASec, flags);
    else
      This->_bytesWhileSleepASec = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TransRateWriter_fields__bytesWritten_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TransRateWriter* This = dmi_cast<TransRateWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_bytesWritten, flags);
    else
      This->_bytesWritten = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TransRateWriter_fields__listener_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TransRateWriter* This = dmi_cast<TransRateWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_listener, flags);
    else
      This->_listener = ::acdk::lang::dmi::castTo< RTransListener>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo TransRateWriter_fields__blockSize = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_blockSize", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TransRateWriter_MetainfoWrapper::TransRateWriter_fields__blockSize_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TransRateWriter_fields__bytePerSecondRate = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_bytePerSecondRate", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TransRateWriter_MetainfoWrapper::TransRateWriter_fields__bytePerSecondRate_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TransRateWriter_fields__bytesWhileSleepASec = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_bytesWhileSleepASec", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TransRateWriter_MetainfoWrapper::TransRateWriter_fields__bytesWhileSleepASec_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TransRateWriter_fields__bytesWritten = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_bytesWritten", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TransRateWriter_MetainfoWrapper::TransRateWriter_fields__bytesWritten_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TransRateWriter_fields__listener = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_listener", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTransListener::clazzInfo(),
  TransRateWriter_MetainfoWrapper::TransRateWriter_fields__listener_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _TransRateWriter_fields[] = 
{
  &TransRateWriter_fields__blockSize,
  &TransRateWriter_fields__bytePerSecondRate,
  &TransRateWriter_fields__bytesWhileSleepASec,
  &TransRateWriter_fields__bytesWritten,
  &TransRateWriter_fields__listener,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TransRateWriter_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TransRateWriter_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TransRateWriter_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TransRateWriter_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TransRateWriter_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TransRateWriter_MetainfoWrapper::TransRateWriter_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TransRateWriter_methods_TransRateWriter_INL_acdk_io_RWriter_I_LRTransRateWriter__arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::RWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TransRateWriter_methods_TransRateWriter_INL_acdk_io_RWriter_I_LRTransRateWriter__arg_bytesPerSecond = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bytesPerSecond", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TransRateWriter_methods_TransRateWriter_INL_acdk_io_RWriter_I_LRTransRateWriter__args[] = 
{
  &TransRateWriter_methods_TransRateWriter_INL_acdk_io_RWriter_I_LRTransRateWriter__arg_out,
  &TransRateWriter_methods_TransRateWriter_INL_acdk_io_RWriter_I_LRTransRateWriter__arg_bytesPerSecond,
  0
};

::acdk::lang::dmi::ClazzInfo* TransRateWriter_methods_TransRateWriter_INL_acdk_io_RWriter_I_LRTransRateWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TransRateWriter_method_TransRateWriter_INL_acdk_io_RWriter_I_LRTransRateWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TransRateWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TransRateWriter::clazzInfo(), // return type
  "_0_TransRateWriter", // alternative name of method
  -1, // altlabelHashCode
  TransRateWriter_methods_TransRateWriter_INL_acdk_io_RWriter_I_LRTransRateWriter__args, // the arguments
  0, //arguments count
  TransRateWriter_methods_TransRateWriter_INL_acdk_io_RWriter_I_LRTransRateWriter__exceptions, // the declared exceptions
  TransRateWriter_MetainfoWrapper::TransRateWriter_method_TransRateWriter_INL_acdk_io_RWriter_I_LRTransRateWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TransRateWriter_methods_setBytesPerSecondRate_I_V_arg_newrate = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "newrate", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TransRateWriter_methods_setBytesPerSecondRate_I_V_args[] = 
{
  &TransRateWriter_methods_setBytesPerSecondRate_I_V_arg_newrate,
  0
};

::acdk::lang::dmi::ClazzInfo* TransRateWriter_methods_setBytesPerSecondRate_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TransRateWriter_method_setBytesPerSecondRate_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setBytesPerSecondRate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_setBytesPerSecondRate", // alternative name of method
  -1, // altlabelHashCode
  TransRateWriter_methods_setBytesPerSecondRate_I_V_args, // the arguments
  0, //arguments count
  TransRateWriter_methods_setBytesPerSecondRate_I_V_exceptions, // the declared exceptions
  TransRateWriter_MetainfoWrapper::TransRateWriter_method_setBytesPerSecondRate_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TransRateWriter_methods_write_INLRbyteArray_II_V_arg_ch = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ch", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TransRateWriter_methods_write_INLRbyteArray_II_V_arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TransRateWriter_methods_write_INLRbyteArray_II_V_arg_len = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "len", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TransRateWriter_methods_write_INLRbyteArray_II_V_args[] = 
{
  &TransRateWriter_methods_write_INLRbyteArray_II_V_arg_ch,
  &TransRateWriter_methods_write_INLRbyteArray_II_V_arg_offset,
  &TransRateWriter_methods_write_INLRbyteArray_II_V_arg_len,
  0
};

::acdk::lang::dmi::ClazzInfo* TransRateWriter_methods_write_INLRbyteArray_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TransRateWriter_method_write_INLRbyteArray_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "write", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_write", // alternative name of method
  -1, // altlabelHashCode
  TransRateWriter_methods_write_INLRbyteArray_II_V_args, // the arguments
  0, //arguments count
  TransRateWriter_methods_write_INLRbyteArray_II_V_exceptions, // the declared exceptions
  TransRateWriter_MetainfoWrapper::TransRateWriter_method_write_INLRbyteArray_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TransRateWriter_methods_write_INLRbyteArray__V_arg_ch = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ch", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TransRateWriter_methods_write_INLRbyteArray__V_args[] = 
{
  &TransRateWriter_methods_write_INLRbyteArray__V_arg_ch,
  0
};

::acdk::lang::dmi::ClazzInfo* TransRateWriter_methods_write_INLRbyteArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TransRateWriter_method_write_INLRbyteArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "write", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_write", // alternative name of method
  -1, // altlabelHashCode
  TransRateWriter_methods_write_INLRbyteArray__V_args, // the arguments
  0, //arguments count
  TransRateWriter_methods_write_INLRbyteArray__V_exceptions, // the declared exceptions
  TransRateWriter_MetainfoWrapper::TransRateWriter_method_write_INLRbyteArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TransRateWriter_methods_write_INLRbyteArray_I_V_arg_ch = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ch", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TransRateWriter_methods_write_INLRbyteArray_I_V_arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TransRateWriter_methods_write_INLRbyteArray_I_V_args[] = 
{
  &TransRateWriter_methods_write_INLRbyteArray_I_V_arg_ch,
  &TransRateWriter_methods_write_INLRbyteArray_I_V_arg_offset,
  0
};

::acdk::lang::dmi::ClazzInfo* TransRateWriter_methods_write_INLRbyteArray_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TransRateWriter_method_write_INLRbyteArray_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "write", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_write", // alternative name of method
  -1, // altlabelHashCode
  TransRateWriter_methods_write_INLRbyteArray_I_V_args, // the arguments
  0, //arguments count
  TransRateWriter_methods_write_INLRbyteArray_I_V_exceptions, // the declared exceptions
  TransRateWriter_MetainfoWrapper::TransRateWriter_method_write_INLRbyteArray_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TransRateWriter_methods[] = 
{
  &TransRateWriter_method_GetClass__L_acdk_lang_RClass_,
  &TransRateWriter_method_TransRateWriter_INL_acdk_io_RWriter_I_LRTransRateWriter_,
  &TransRateWriter_method_setBytesPerSecondRate_I_V,
  &TransRateWriter_method_write_INLRbyteArray_II_V,
  &TransRateWriter_method_write_INLRbyteArray__V,
  &TransRateWriter_method_write_INLRbyteArray_I_V,
  0
};


struct TransRateWriter_MetaInfoInitializer
{  TransRateWriter_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TransRateWriter::clazzInfo();
    ci->fields =  _TransRateWriter_fields;
    ci->methods =  _TransRateWriter_methods;
    ci->_scopeParent = acdk_net_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TransRateWriter_MetaInfoInitializer TransRateWriter_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

using namespace acdk::io;

//static
::acdk::lang::RObject
UnknownServiceException_create_array(int length)
{
  return new ObjectArrayImpl<RUnknownServiceException>(length);
}

//static
::acdk::lang::RObject
UnknownServiceException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class UnknownServiceException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UnknownServiceException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)UnknownServiceException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UnknownServiceException_method_UnknownServiceException__LRUnknownServiceException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new UnknownServiceException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UnknownServiceException_method_UnknownServiceException_INLRString__LRUnknownServiceException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new UnknownServiceException(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
};


void ThrowException_UnknownServiceException(IN(::acdk::lang::RThrowable) ex)
{
  throw RUnknownServiceException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _UnknownServiceException_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* UnknownServiceException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* UnknownServiceException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UnknownServiceException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  UnknownServiceException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  UnknownServiceException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  UnknownServiceException_MetainfoWrapper::UnknownServiceException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* UnknownServiceException_methods_UnknownServiceException__LRUnknownServiceException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* UnknownServiceException_methods_UnknownServiceException__LRUnknownServiceException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UnknownServiceException_method_UnknownServiceException__LRUnknownServiceException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "UnknownServiceException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  UnknownServiceException::clazzInfo(), // return type
  "_0_UnknownServiceException", // alternative name of method
  -1, // altlabelHashCode
  UnknownServiceException_methods_UnknownServiceException__LRUnknownServiceException__args, // the arguments
  0, //arguments count
  UnknownServiceException_methods_UnknownServiceException__LRUnknownServiceException__exceptions, // the declared exceptions
  UnknownServiceException_MetainfoWrapper::UnknownServiceException_method_UnknownServiceException__LRUnknownServiceException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UnknownServiceException_methods_UnknownServiceException_INLRString__LRUnknownServiceException__arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UnknownServiceException_methods_UnknownServiceException_INLRString__LRUnknownServiceException__args[] = 
{
  &UnknownServiceException_methods_UnknownServiceException_INLRString__LRUnknownServiceException__arg_message,
  0
};

::acdk::lang::dmi::ClazzInfo* UnknownServiceException_methods_UnknownServiceException_INLRString__LRUnknownServiceException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UnknownServiceException_method_UnknownServiceException_INLRString__LRUnknownServiceException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "UnknownServiceException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  UnknownServiceException::clazzInfo(), // return type
  "_1_UnknownServiceException", // alternative name of method
  -1, // altlabelHashCode
  UnknownServiceException_methods_UnknownServiceException_INLRString__LRUnknownServiceException__args, // the arguments
  0, //arguments count
  UnknownServiceException_methods_UnknownServiceException_INLRString__LRUnknownServiceException__exceptions, // the declared exceptions
  UnknownServiceException_MetainfoWrapper::UnknownServiceException_method_UnknownServiceException_INLRString__LRUnknownServiceException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _UnknownServiceException_methods[] = 
{
  &UnknownServiceException_method_GetClass__L_acdk_lang_RClass_,
  &UnknownServiceException_method_UnknownServiceException__LRUnknownServiceException_,
  &UnknownServiceException_method_UnknownServiceException_INLRString__LRUnknownServiceException_,
  0
};


struct UnknownServiceException_MetaInfoInitializer
{  UnknownServiceException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = UnknownServiceException::clazzInfo();
    ci->fields =  _UnknownServiceException_fields;
    ci->methods =  _UnknownServiceException_methods;
    ci->_scopeParent = acdk_net_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
UnknownServiceException_MetaInfoInitializer UnknownServiceException_MetaInfoInitializer_staticinstance__;


struct UnknownServiceException_clazzInfo_ClazzAttributesResInitializer6
{
  UnknownServiceException_clazzInfo_ClazzAttributesResInitializer6()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)UnknownServiceException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_UnknownServiceException));
  }
};

UnknownServiceException_clazzInfo_ClazzAttributesResInitializer6 UnknownServiceException_clazzInfo_ClazzAttributesResInitializer6_instance;



} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
URL_create_array(int length)
{
  return new ObjectArrayImpl<RURL>(length);
}

//static
::acdk::lang::RObject
URL_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class URL_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URL_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)URL::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URL_method_URL_INLRString_INLRString_INLRString__LRURL__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new URL(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URL_method_URL_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRURLStreamHandler__LRURL__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new URL(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< RString>(args[3], dc), ::acdk::lang::dmi::castTo< RString>(args[4], dc), ::acdk::lang::dmi::castTo< RString>(args[5], dc), ::acdk::lang::dmi::castTo< RURLStreamHandler>(args[6], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URL_method_URL_INLRString_INLRString_IINLRString__LRURL__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new URL(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< RString>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URL_method_URL_INLRString_INLRString_IINLRString_INLRString__LRURL__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new URL(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< RString>(args[3], dc), ::acdk::lang::dmi::castTo< RString>(args[4], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URL_method_URL_INLRURL_INLRString_INLRURLStreamHandler__LRURL__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new URL(::acdk::lang::dmi::castTo< RURL>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< RURLStreamHandler>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URL_method_URL_INLRURL_INLRString__LRURL__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new URL(::acdk::lang::dmi::castTo< RURL>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URL_method_URL_INLRString_INLRString_IINLRString_INLRString_INLRString__LRURL__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new URL(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< RString>(args[3], dc), ::acdk::lang::dmi::castTo< RString>(args[4], dc), ::acdk::lang::dmi::castTo< RString>(args[5], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URL_method_URL_INLRString__LRURL__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new URL(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URL_method__URLbyContext_INLRURL_INLRString_INLRURLStreamHandler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URL* This = dmi_cast<URL>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->URL::_URLbyContext(::acdk::lang::dmi::castTo< RURL>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< RURLStreamHandler>(args[2], dc));
    else
        This->_URLbyContext(::acdk::lang::dmi::castTo< RURL>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< RURLStreamHandler>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URL_method__URLbyContext_INLRURL_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URL* This = dmi_cast<URL>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->URL::_URLbyContext(::acdk::lang::dmi::castTo< RURL>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    else
        This->_URLbyContext(::acdk::lang::dmi::castTo< RURL>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URL_method__URLinit_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRURLStreamHandler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URL* This = dmi_cast<URL>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->URL::_URLinit(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< RString>(args[3], dc), ::acdk::lang::dmi::castTo< RString>(args[4], dc), ::acdk::lang::dmi::castTo< RString>(args[5], dc), ::acdk::lang::dmi::castTo< RURLStreamHandler>(args[6], dc));
    else
        This->_URLinit(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< RString>(args[3], dc), ::acdk::lang::dmi::castTo< RString>(args[4], dc), ::acdk::lang::dmi::castTo< RString>(args[5], dc), ::acdk::lang::dmi::castTo< RURLStreamHandler>(args[6], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URL_method_compareTo_INLRObject__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URL* This = dmi_cast<URL>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->URL::compareTo(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->compareTo(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URL_method_equals_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URL* This = dmi_cast<URL>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->URL::equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URL_method_fileAsUrlName_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)URL::fileAsUrlName(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URL_method_fileAsUrlName_INLacdk_io_RFile__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)URL::fileAsUrlName(::acdk::lang::dmi::castTo< acdk::io::RFile>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URL_method_getContent__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URL* This = dmi_cast<URL>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->URL::getContent();
    else
        ret = (::acdk::lang::RObject)This->getContent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URL_method_getFile__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URL* This = dmi_cast<URL>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->URL::getFile();
    else
        ret = (::acdk::lang::RObject)This->getFile();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URL_method_getHost__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URL* This = dmi_cast<URL>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->URL::getHost();
    else
        ret = (::acdk::lang::RObject)This->getHost();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URL_method_getPassword__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URL* This = dmi_cast<URL>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->URL::getPassword();
    else
        ret = (::acdk::lang::RObject)This->getPassword();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URL_method_getPort__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URL* This = dmi_cast<URL>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->URL::getPort();
    else
      ret = This->getPort();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URL_method_getProtocol__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URL* This = dmi_cast<URL>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->URL::getProtocol();
    else
        ret = (::acdk::lang::RObject)This->getProtocol();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URL_method_getRef__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URL* This = dmi_cast<URL>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->URL::getRef();
    else
        ret = (::acdk::lang::RObject)This->getRef();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URL_method_getUser__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URL* This = dmi_cast<URL>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->URL::getUser();
    else
        ret = (::acdk::lang::RObject)This->getUser();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URL_method_hashCode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URL* This = dmi_cast<URL>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->URL::hashCode();
    else
      ret = This->hashCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URL_method_openConnection__LRURLConnection__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URL* This = dmi_cast<URL>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->URL::openConnection();
    else
        ret = (::acdk::lang::RObject)This->openConnection();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URL_method_openStream__LRReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URL* This = dmi_cast<URL>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->URL::openStream();
    else
        ret = (::acdk::lang::RObject)This->openStream();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URL_method_sameFile_INLRURLInterface__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URL* This = dmi_cast<URL>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->URL::sameFile(::acdk::lang::dmi::castTo< RURLInterface>(args[0], dc));
    else
      ret = This->sameFile(::acdk::lang::dmi::castTo< RURLInterface>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URL_method_set_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URL* This = dmi_cast<URL>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->URL::set(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< RString>(args[3], dc), ::acdk::lang::dmi::castTo< RString>(args[4], dc), ::acdk::lang::dmi::castTo< RString>(args[5], dc), ::acdk::lang::dmi::castTo< RString>(args[6], dc));
    else
        This->set(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< RString>(args[3], dc), ::acdk::lang::dmi::castTo< RString>(args[4], dc), ::acdk::lang::dmi::castTo< RString>(args[5], dc), ::acdk::lang::dmi::castTo< RString>(args[6], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URL_method_setFile_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URL* This = dmi_cast<URL>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->URL::setFile(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->setFile(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URL_method_setPassword_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URL* This = dmi_cast<URL>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->URL::setPassword(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->setPassword(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URL_method_setPort_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URL* This = dmi_cast<URL>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->URL::setPort(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setPort(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URL_method_setRef_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URL* This = dmi_cast<URL>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->URL::setRef(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->setRef(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URL_method_setUser_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URL* This = dmi_cast<URL>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->URL::setUser(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->setUser(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URL_method_toExternalForm__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URL* This = dmi_cast<URL>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->URL::toExternalForm();
    else
        ret = (::acdk::lang::RObject)This->toExternalForm();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URL_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URL* This = dmi_cast<URL>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->URL::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  URL_fields_file_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    URL* This = dmi_cast<URL>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->file, flags);
    else
      This->file = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  URL_fields_host_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    URL* This = dmi_cast<URL>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->host, flags);
    else
      This->host = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  URL_fields_password_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    URL* This = dmi_cast<URL>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->password, flags);
    else
      This->password = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  URL_fields_ph_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    URL* This = dmi_cast<URL>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->ph, flags);
    else
      This->ph = ::acdk::lang::dmi::castTo< RURLStreamHandler>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  URL_fields_port_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    URL* This = dmi_cast<URL>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->port, flags);
    else
      This->port = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  URL_fields_protocol_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    URL* This = dmi_cast<URL>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->protocol, flags);
    else
      This->protocol = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  URL_fields_ref_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    URL* This = dmi_cast<URL>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->ref, flags);
    else
      This->ref = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  URL_fields_user_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    URL* This = dmi_cast<URL>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->user, flags);
    else
      This->user = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo URL_fields_file = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "file", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  URL_MetainfoWrapper::URL_fields_file_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo URL_fields_host = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "host", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  URL_MetainfoWrapper::URL_fields_host_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo URL_fields_password = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "password", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  URL_MetainfoWrapper::URL_fields_password_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo URL_fields_ph = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "ph", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RURLStreamHandler::clazzInfo(),
  URL_MetainfoWrapper::URL_fields_ph_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo URL_fields_port = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "port", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  URL_MetainfoWrapper::URL_fields_port_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo URL_fields_protocol = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "protocol", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  URL_MetainfoWrapper::URL_fields_protocol_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo URL_fields_ref = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "ref", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  URL_MetainfoWrapper::URL_fields_ref_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo URL_fields_user = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "user", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  URL_MetainfoWrapper::URL_fields_user_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _URL_fields[] = 
{
  &URL_fields_file,
  &URL_fields_host,
  &URL_fields_password,
  &URL_fields_ph,
  &URL_fields_port,
  &URL_fields_protocol,
  &URL_fields_ref,
  &URL_fields_user,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* URL_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* URL_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URL_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_z_GetClass", // alternative name of method
  -1, // altlabelHashCode
  URL_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  URL_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  URL_MetainfoWrapper::URL_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_URL_INLRString_INLRString_INLRString__LRURL__arg_protocol = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "protocol", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_URL_INLRString_INLRString_INLRString__LRURL__arg_host = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "host", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_URL_INLRString_INLRString_INLRString__LRURL__arg_file = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "file", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URL_methods_URL_INLRString_INLRString_INLRString__LRURL__args[] = 
{
  &URL_methods_URL_INLRString_INLRString_INLRString__LRURL__arg_protocol,
  &URL_methods_URL_INLRString_INLRString_INLRString__LRURL__arg_host,
  &URL_methods_URL_INLRString_INLRString_INLRString__LRURL__arg_file,
  0
};

::acdk::lang::dmi::ClazzInfo* URL_methods_URL_INLRString_INLRString_INLRString__LRURL__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URL_method_URL_INLRString_INLRString_INLRString__LRURL_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "URL", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  URL::clazzInfo(), // return type
  "_0_URL", // alternative name of method
  -1, // altlabelHashCode
  URL_methods_URL_INLRString_INLRString_INLRString__LRURL__args, // the arguments
  0, //arguments count
  URL_methods_URL_INLRString_INLRString_INLRString__LRURL__exceptions, // the declared exceptions
  URL_MetainfoWrapper::URL_method_URL_INLRString_INLRString_INLRString__LRURL__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_URL_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRURLStreamHandler__LRURL__arg_protocol = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "protocol", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_URL_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRURLStreamHandler__LRURL__arg_host = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "host", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_URL_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRURLStreamHandler__LRURL__arg_port = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "port", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_URL_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRURLStreamHandler__LRURL__arg_file = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "file", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_URL_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRURLStreamHandler__LRURL__arg_user = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "user", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_URL_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRURLStreamHandler__LRURL__arg_pass = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pass", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_URL_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRURLStreamHandler__LRURL__arg_ph = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "ph", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RURLStreamHandler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URL_methods_URL_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRURLStreamHandler__LRURL__args[] = 
{
  &URL_methods_URL_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRURLStreamHandler__LRURL__arg_protocol,
  &URL_methods_URL_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRURLStreamHandler__LRURL__arg_host,
  &URL_methods_URL_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRURLStreamHandler__LRURL__arg_port,
  &URL_methods_URL_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRURLStreamHandler__LRURL__arg_file,
  &URL_methods_URL_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRURLStreamHandler__LRURL__arg_user,
  &URL_methods_URL_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRURLStreamHandler__LRURL__arg_pass,
  &URL_methods_URL_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRURLStreamHandler__LRURL__arg_ph,
  0
};

::acdk::lang::dmi::ClazzInfo* URL_methods_URL_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRURLStreamHandler__LRURL__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URL_method_URL_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRURLStreamHandler__LRURL_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "URL", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  URL::clazzInfo(), // return type
  "_1_URL", // alternative name of method
  -1, // altlabelHashCode
  URL_methods_URL_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRURLStreamHandler__LRURL__args, // the arguments
  0, //arguments count
  URL_methods_URL_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRURLStreamHandler__LRURL__exceptions, // the declared exceptions
  URL_MetainfoWrapper::URL_method_URL_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRURLStreamHandler__LRURL__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_URL_INLRString_INLRString_IINLRString__LRURL__arg_protocol = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "protocol", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_URL_INLRString_INLRString_IINLRString__LRURL__arg_host = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "host", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_URL_INLRString_INLRString_IINLRString__LRURL__arg_port = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "port", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_URL_INLRString_INLRString_IINLRString__LRURL__arg_file = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "file", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URL_methods_URL_INLRString_INLRString_IINLRString__LRURL__args[] = 
{
  &URL_methods_URL_INLRString_INLRString_IINLRString__LRURL__arg_protocol,
  &URL_methods_URL_INLRString_INLRString_IINLRString__LRURL__arg_host,
  &URL_methods_URL_INLRString_INLRString_IINLRString__LRURL__arg_port,
  &URL_methods_URL_INLRString_INLRString_IINLRString__LRURL__arg_file,
  0
};

::acdk::lang::dmi::ClazzInfo* URL_methods_URL_INLRString_INLRString_IINLRString__LRURL__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URL_method_URL_INLRString_INLRString_IINLRString__LRURL_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "URL", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  URL::clazzInfo(), // return type
  "_2_URL", // alternative name of method
  -1, // altlabelHashCode
  URL_methods_URL_INLRString_INLRString_IINLRString__LRURL__args, // the arguments
  0, //arguments count
  URL_methods_URL_INLRString_INLRString_IINLRString__LRURL__exceptions, // the declared exceptions
  URL_MetainfoWrapper::URL_method_URL_INLRString_INLRString_IINLRString__LRURL__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_URL_INLRString_INLRString_IINLRString_INLRString__LRURL__arg_protocol = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "protocol", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_URL_INLRString_INLRString_IINLRString_INLRString__LRURL__arg_host = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "host", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_URL_INLRString_INLRString_IINLRString_INLRString__LRURL__arg_port = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "port", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_URL_INLRString_INLRString_IINLRString_INLRString__LRURL__arg_file = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "file", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_URL_INLRString_INLRString_IINLRString_INLRString__LRURL__arg_user = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "user", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URL_methods_URL_INLRString_INLRString_IINLRString_INLRString__LRURL__args[] = 
{
  &URL_methods_URL_INLRString_INLRString_IINLRString_INLRString__LRURL__arg_protocol,
  &URL_methods_URL_INLRString_INLRString_IINLRString_INLRString__LRURL__arg_host,
  &URL_methods_URL_INLRString_INLRString_IINLRString_INLRString__LRURL__arg_port,
  &URL_methods_URL_INLRString_INLRString_IINLRString_INLRString__LRURL__arg_file,
  &URL_methods_URL_INLRString_INLRString_IINLRString_INLRString__LRURL__arg_user,
  0
};

::acdk::lang::dmi::ClazzInfo* URL_methods_URL_INLRString_INLRString_IINLRString_INLRString__LRURL__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URL_method_URL_INLRString_INLRString_IINLRString_INLRString__LRURL_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "URL", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  URL::clazzInfo(), // return type
  "_3_URL", // alternative name of method
  -1, // altlabelHashCode
  URL_methods_URL_INLRString_INLRString_IINLRString_INLRString__LRURL__args, // the arguments
  0, //arguments count
  URL_methods_URL_INLRString_INLRString_IINLRString_INLRString__LRURL__exceptions, // the declared exceptions
  URL_MetainfoWrapper::URL_method_URL_INLRString_INLRString_IINLRString_INLRString__LRURL__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_URL_INLRURL_INLRString_INLRURLStreamHandler__LRURL__arg_context = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "context", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RURL::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_URL_INLRURL_INLRString_INLRURLStreamHandler__LRURL__arg_url = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "url", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_URL_INLRURL_INLRString_INLRURLStreamHandler__LRURL__arg_ph = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "ph", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RURLStreamHandler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URL_methods_URL_INLRURL_INLRString_INLRURLStreamHandler__LRURL__args[] = 
{
  &URL_methods_URL_INLRURL_INLRString_INLRURLStreamHandler__LRURL__arg_context,
  &URL_methods_URL_INLRURL_INLRString_INLRURLStreamHandler__LRURL__arg_url,
  &URL_methods_URL_INLRURL_INLRString_INLRURLStreamHandler__LRURL__arg_ph,
  0
};

::acdk::lang::dmi::ClazzInfo* URL_methods_URL_INLRURL_INLRString_INLRURLStreamHandler__LRURL__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URL_method_URL_INLRURL_INLRString_INLRURLStreamHandler__LRURL_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "URL", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  URL::clazzInfo(), // return type
  "_6_URL", // alternative name of method
  -1, // altlabelHashCode
  URL_methods_URL_INLRURL_INLRString_INLRURLStreamHandler__LRURL__args, // the arguments
  0, //arguments count
  URL_methods_URL_INLRURL_INLRString_INLRURLStreamHandler__LRURL__exceptions, // the declared exceptions
  URL_MetainfoWrapper::URL_method_URL_INLRURL_INLRString_INLRURLStreamHandler__LRURL__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_URL_INLRURL_INLRString__LRURL__arg_context = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "context", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RURL::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_URL_INLRURL_INLRString__LRURL__arg_url = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "url", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URL_methods_URL_INLRURL_INLRString__LRURL__args[] = 
{
  &URL_methods_URL_INLRURL_INLRString__LRURL__arg_context,
  &URL_methods_URL_INLRURL_INLRString__LRURL__arg_url,
  0
};

::acdk::lang::dmi::ClazzInfo* URL_methods_URL_INLRURL_INLRString__LRURL__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URL_method_URL_INLRURL_INLRString__LRURL_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "URL", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  URL::clazzInfo(), // return type
  "_7_URL", // alternative name of method
  -1, // altlabelHashCode
  URL_methods_URL_INLRURL_INLRString__LRURL__args, // the arguments
  0, //arguments count
  URL_methods_URL_INLRURL_INLRString__LRURL__exceptions, // the declared exceptions
  URL_MetainfoWrapper::URL_method_URL_INLRURL_INLRString__LRURL__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_URL_INLRString_INLRString_IINLRString_INLRString_INLRString__LRURL__arg_protocol = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "protocol", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_URL_INLRString_INLRString_IINLRString_INLRString_INLRString__LRURL__arg_host = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "host", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_URL_INLRString_INLRString_IINLRString_INLRString_INLRString__LRURL__arg_port = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "port", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_URL_INLRString_INLRString_IINLRString_INLRString_INLRString__LRURL__arg_file = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "file", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_URL_INLRString_INLRString_IINLRString_INLRString_INLRString__LRURL__arg_user = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "user", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_URL_INLRString_INLRString_IINLRString_INLRString_INLRString__LRURL__arg_pass = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pass", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URL_methods_URL_INLRString_INLRString_IINLRString_INLRString_INLRString__LRURL__args[] = 
{
  &URL_methods_URL_INLRString_INLRString_IINLRString_INLRString_INLRString__LRURL__arg_protocol,
  &URL_methods_URL_INLRString_INLRString_IINLRString_INLRString_INLRString__LRURL__arg_host,
  &URL_methods_URL_INLRString_INLRString_IINLRString_INLRString_INLRString__LRURL__arg_port,
  &URL_methods_URL_INLRString_INLRString_IINLRString_INLRString_INLRString__LRURL__arg_file,
  &URL_methods_URL_INLRString_INLRString_IINLRString_INLRString_INLRString__LRURL__arg_user,
  &URL_methods_URL_INLRString_INLRString_IINLRString_INLRString_INLRString__LRURL__arg_pass,
  0
};

::acdk::lang::dmi::ClazzInfo* URL_methods_URL_INLRString_INLRString_IINLRString_INLRString_INLRString__LRURL__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URL_method_URL_INLRString_INLRString_IINLRString_INLRString_INLRString__LRURL_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "URL", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  URL::clazzInfo(), // return type
  "_4_URL", // alternative name of method
  -1, // altlabelHashCode
  URL_methods_URL_INLRString_INLRString_IINLRString_INLRString_INLRString__LRURL__args, // the arguments
  0, //arguments count
  URL_methods_URL_INLRString_INLRString_IINLRString_INLRString_INLRString__LRURL__exceptions, // the declared exceptions
  URL_MetainfoWrapper::URL_method_URL_INLRString_INLRString_IINLRString_INLRString_INLRString__LRURL__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_URL_INLRString__LRURL__arg_url = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "url", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URL_methods_URL_INLRString__LRURL__args[] = 
{
  &URL_methods_URL_INLRString__LRURL__arg_url,
  0
};

::acdk::lang::dmi::ClazzInfo* URL_methods_URL_INLRString__LRURL__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URL_method_URL_INLRString__LRURL_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "URL", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  URL::clazzInfo(), // return type
  "_a_URL", // alternative name of method
  -1, // altlabelHashCode
  URL_methods_URL_INLRString__LRURL__args, // the arguments
  0, //arguments count
  URL_methods_URL_INLRString__LRURL__exceptions, // the declared exceptions
  URL_MetainfoWrapper::URL_method_URL_INLRString__LRURL__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods__URLbyContext_INLRURL_INLRString_INLRURLStreamHandler__V_arg_context = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "context", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RURL::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods__URLbyContext_INLRURL_INLRString_INLRURLStreamHandler__V_arg_url = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "url", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods__URLbyContext_INLRURL_INLRString_INLRURLStreamHandler__V_arg_ph = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "ph", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RURLStreamHandler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URL_methods__URLbyContext_INLRURL_INLRString_INLRURLStreamHandler__V_args[] = 
{
  &URL_methods__URLbyContext_INLRURL_INLRString_INLRURLStreamHandler__V_arg_context,
  &URL_methods__URLbyContext_INLRURL_INLRString_INLRURLStreamHandler__V_arg_url,
  &URL_methods__URLbyContext_INLRURL_INLRString_INLRURLStreamHandler__V_arg_ph,
  0
};

::acdk::lang::dmi::ClazzInfo* URL_methods__URLbyContext_INLRURL_INLRString_INLRURLStreamHandler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URL_method__URLbyContext_INLRURL_INLRString_INLRURLStreamHandler__V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_URLbyContext", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8__URLbyContext", // alternative name of method
  -1, // altlabelHashCode
  URL_methods__URLbyContext_INLRURL_INLRString_INLRURLStreamHandler__V_args, // the arguments
  0, //arguments count
  URL_methods__URLbyContext_INLRURL_INLRString_INLRURLStreamHandler__V_exceptions, // the declared exceptions
  URL_MetainfoWrapper::URL_method__URLbyContext_INLRURL_INLRString_INLRURLStreamHandler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods__URLbyContext_INLRURL_INLRString__V_arg_context = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "context", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RURL::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods__URLbyContext_INLRURL_INLRString__V_arg_url = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "url", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URL_methods__URLbyContext_INLRURL_INLRString__V_args[] = 
{
  &URL_methods__URLbyContext_INLRURL_INLRString__V_arg_context,
  &URL_methods__URLbyContext_INLRURL_INLRString__V_arg_url,
  0
};

::acdk::lang::dmi::ClazzInfo* URL_methods__URLbyContext_INLRURL_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URL_method__URLbyContext_INLRURL_INLRString__V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "_URLbyContext", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9__URLbyContext", // alternative name of method
  -1, // altlabelHashCode
  URL_methods__URLbyContext_INLRURL_INLRString__V_args, // the arguments
  0, //arguments count
  URL_methods__URLbyContext_INLRURL_INLRString__V_exceptions, // the declared exceptions
  URL_MetainfoWrapper::URL_method__URLbyContext_INLRURL_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods__URLinit_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRURLStreamHandler__V_arg_protocol = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "protocol", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods__URLinit_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRURLStreamHandler__V_arg_host = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "host", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods__URLinit_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRURLStreamHandler__V_arg_port = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "port", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods__URLinit_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRURLStreamHandler__V_arg_user = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "user", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods__URLinit_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRURLStreamHandler__V_arg_pass = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pass", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods__URLinit_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRURLStreamHandler__V_arg_file = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "file", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods__URLinit_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRURLStreamHandler__V_arg_ph = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ph", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RURLStreamHandler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URL_methods__URLinit_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRURLStreamHandler__V_args[] = 
{
  &URL_methods__URLinit_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRURLStreamHandler__V_arg_protocol,
  &URL_methods__URLinit_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRURLStreamHandler__V_arg_host,
  &URL_methods__URLinit_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRURLStreamHandler__V_arg_port,
  &URL_methods__URLinit_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRURLStreamHandler__V_arg_user,
  &URL_methods__URLinit_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRURLStreamHandler__V_arg_pass,
  &URL_methods__URLinit_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRURLStreamHandler__V_arg_file,
  &URL_methods__URLinit_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRURLStreamHandler__V_arg_ph,
  0
};

::acdk::lang::dmi::ClazzInfo* URL_methods__URLinit_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRURLStreamHandler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URL_method__URLinit_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRURLStreamHandler__V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_URLinit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5__URLinit", // alternative name of method
  -1, // altlabelHashCode
  URL_methods__URLinit_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRURLStreamHandler__V_args, // the arguments
  0, //arguments count
  URL_methods__URLinit_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRURLStreamHandler__V_exceptions, // the declared exceptions
  URL_MetainfoWrapper::URL_method__URLinit_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRURLStreamHandler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_compareTo_INLRObject__I_arg_url = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "url", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URL_methods_compareTo_INLRObject__I_args[] = 
{
  &URL_methods_compareTo_INLRObject__I_arg_url,
  0
};

::acdk::lang::dmi::ClazzInfo* URL_methods_compareTo_INLRObject__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URL_method_compareTo_INLRObject__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "compareTo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_p_compareTo", // alternative name of method
  -1, // altlabelHashCode
  URL_methods_compareTo_INLRObject__I_args, // the arguments
  0, //arguments count
  URL_methods_compareTo_INLRObject__I_exceptions, // the declared exceptions
  URL_MetainfoWrapper::URL_method_compareTo_INLRObject__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_equals_INLRObject__Z_arg_url = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "url", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URL_methods_equals_INLRObject__Z_args[] = 
{
  &URL_methods_equals_INLRObject__Z_arg_url,
  0
};

::acdk::lang::dmi::ClazzInfo* URL_methods_equals_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URL_method_equals_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_n_equals", // alternative name of method
  -1, // altlabelHashCode
  URL_methods_equals_INLRObject__Z_args, // the arguments
  0, //arguments count
  URL_methods_equals_INLRObject__Z_exceptions, // the declared exceptions
  URL_MetainfoWrapper::URL_method_equals_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_fileAsUrlName_INLRString__LRString__arg_fileName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fileName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URL_methods_fileAsUrlName_INLRString__LRString__args[] = 
{
  &URL_methods_fileAsUrlName_INLRString__LRString__arg_fileName,
  0
};

::acdk::lang::dmi::ClazzInfo* URL_methods_fileAsUrlName_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URL_method_fileAsUrlName_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "fileAsUrlName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_w_fileAsUrlName", // alternative name of method
  -1, // altlabelHashCode
  URL_methods_fileAsUrlName_INLRString__LRString__args, // the arguments
  0, //arguments count
  URL_methods_fileAsUrlName_INLRString__LRString__exceptions, // the declared exceptions
  URL_MetainfoWrapper::URL_method_fileAsUrlName_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_fileAsUrlName_INLacdk_io_RFile__LRString__arg_file = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "file", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RFile::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URL_methods_fileAsUrlName_INLacdk_io_RFile__LRString__args[] = 
{
  &URL_methods_fileAsUrlName_INLacdk_io_RFile__LRString__arg_file,
  0
};

::acdk::lang::dmi::ClazzInfo* URL_methods_fileAsUrlName_INLacdk_io_RFile__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URL_method_fileAsUrlName_INLacdk_io_RFile__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "fileAsUrlName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_x_fileAsUrlName", // alternative name of method
  -1, // altlabelHashCode
  URL_methods_fileAsUrlName_INLacdk_io_RFile__LRString__args, // the arguments
  0, //arguments count
  URL_methods_fileAsUrlName_INLacdk_io_RFile__LRString__exceptions, // the declared exceptions
  URL_MetainfoWrapper::URL_method_fileAsUrlName_INLacdk_io_RFile__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* URL_methods_getContent__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* URL_methods_getContent__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URL_method_getContent__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getContent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_u_getContent", // alternative name of method
  -1, // altlabelHashCode
  URL_methods_getContent__LRObject__args, // the arguments
  0, //arguments count
  URL_methods_getContent__LRObject__exceptions, // the declared exceptions
  URL_MetainfoWrapper::URL_method_getContent__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* URL_methods_getFile__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* URL_methods_getFile__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URL_method_getFile__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_f_getFile", // alternative name of method
  -1, // altlabelHashCode
  URL_methods_getFile__LRString__args, // the arguments
  0, //arguments count
  URL_methods_getFile__LRString__exceptions, // the declared exceptions
  URL_MetainfoWrapper::URL_method_getFile__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* URL_methods_getHost__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* URL_methods_getHost__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URL_method_getHost__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getHost", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_c_getHost", // alternative name of method
  -1, // altlabelHashCode
  URL_methods_getHost__LRString__args, // the arguments
  0, //arguments count
  URL_methods_getHost__LRString__exceptions, // the declared exceptions
  URL_MetainfoWrapper::URL_method_getHost__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* URL_methods_getPassword__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* URL_methods_getPassword__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URL_method_getPassword__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPassword", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_j_getPassword", // alternative name of method
  -1, // altlabelHashCode
  URL_methods_getPassword__LRString__args, // the arguments
  0, //arguments count
  URL_methods_getPassword__LRString__exceptions, // the declared exceptions
  URL_MetainfoWrapper::URL_method_getPassword__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* URL_methods_getPort__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* URL_methods_getPort__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URL_method_getPort__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_d_getPort", // alternative name of method
  -1, // altlabelHashCode
  URL_methods_getPort__I_args, // the arguments
  0, //arguments count
  URL_methods_getPort__I_exceptions, // the declared exceptions
  URL_MetainfoWrapper::URL_method_getPort__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* URL_methods_getProtocol__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* URL_methods_getProtocol__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URL_method_getProtocol__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getProtocol", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_b_getProtocol", // alternative name of method
  -1, // altlabelHashCode
  URL_methods_getProtocol__LRString__args, // the arguments
  0, //arguments count
  URL_methods_getProtocol__LRString__exceptions, // the declared exceptions
  URL_MetainfoWrapper::URL_method_getProtocol__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* URL_methods_getRef__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* URL_methods_getRef__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URL_method_getRef__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRef", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_l_getRef", // alternative name of method
  -1, // altlabelHashCode
  URL_methods_getRef__LRString__args, // the arguments
  0, //arguments count
  URL_methods_getRef__LRString__exceptions, // the declared exceptions
  URL_MetainfoWrapper::URL_method_getRef__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* URL_methods_getUser__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* URL_methods_getUser__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URL_method_getUser__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getUser", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_h_getUser", // alternative name of method
  -1, // altlabelHashCode
  URL_methods_getUser__LRString__args, // the arguments
  0, //arguments count
  URL_methods_getUser__LRString__exceptions, // the declared exceptions
  URL_MetainfoWrapper::URL_method_getUser__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* URL_methods_hashCode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* URL_methods_hashCode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URL_method_hashCode__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hashCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_v_hashCode", // alternative name of method
  -1, // altlabelHashCode
  URL_methods_hashCode__I_args, // the arguments
  0, //arguments count
  URL_methods_hashCode__I_exceptions, // the declared exceptions
  URL_MetainfoWrapper::URL_method_hashCode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* URL_methods_openConnection__LRURLConnection__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* URL_methods_openConnection__LRURLConnection__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URL_method_openConnection__LRURLConnection_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "openConnection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RURLConnection::clazzInfo(), // return type
  "_s_openConnection", // alternative name of method
  -1, // altlabelHashCode
  URL_methods_openConnection__LRURLConnection__args, // the arguments
  0, //arguments count
  URL_methods_openConnection__LRURLConnection__exceptions, // the declared exceptions
  URL_MetainfoWrapper::URL_method_openConnection__LRURLConnection__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* URL_methods_openStream__LRReader__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* URL_methods_openStream__LRReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URL_method_openStream__LRReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "openStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReader::clazzInfo(), // return type
  "_t_openStream", // alternative name of method
  -1, // altlabelHashCode
  URL_methods_openStream__LRReader__args, // the arguments
  0, //arguments count
  URL_methods_openStream__LRReader__exceptions, // the declared exceptions
  URL_MetainfoWrapper::URL_method_openStream__LRReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_sameFile_INLRURLInterface__Z_arg_url = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "url", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RURLInterface::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URL_methods_sameFile_INLRURLInterface__Z_args[] = 
{
  &URL_methods_sameFile_INLRURLInterface__Z_arg_url,
  0
};

::acdk::lang::dmi::ClazzInfo* URL_methods_sameFile_INLRURLInterface__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URL_method_sameFile_INLRURLInterface__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "sameFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_o_sameFile", // alternative name of method
  -1, // altlabelHashCode
  URL_methods_sameFile_INLRURLInterface__Z_args, // the arguments
  0, //arguments count
  URL_methods_sameFile_INLRURLInterface__Z_exceptions, // the declared exceptions
  URL_MetainfoWrapper::URL_method_sameFile_INLRURLInterface__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_set_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRString__V_arg_protocol = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "protocol", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_set_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRString__V_arg_host = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "host", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_set_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRString__V_arg_port = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "port", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_set_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRString__V_arg_user = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "user", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_set_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRString__V_arg_password = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "password", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_set_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRString__V_arg_file = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "file", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_set_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRString__V_arg_ref = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ref", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URL_methods_set_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRString__V_args[] = 
{
  &URL_methods_set_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRString__V_arg_protocol,
  &URL_methods_set_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRString__V_arg_host,
  &URL_methods_set_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRString__V_arg_port,
  &URL_methods_set_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRString__V_arg_user,
  &URL_methods_set_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRString__V_arg_password,
  &URL_methods_set_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRString__V_arg_file,
  &URL_methods_set_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRString__V_arg_ref,
  0
};

::acdk::lang::dmi::ClazzInfo* URL_methods_set_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URL_method_set_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "set", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_y_set", // alternative name of method
  -1, // altlabelHashCode
  URL_methods_set_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  URL_methods_set_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRString__V_exceptions, // the declared exceptions
  URL_MetainfoWrapper::URL_method_set_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_setFile_INLRString__V_arg_fn = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fn", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URL_methods_setFile_INLRString__V_args[] = 
{
  &URL_methods_setFile_INLRString__V_arg_fn,
  0
};

::acdk::lang::dmi::ClazzInfo* URL_methods_setFile_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URL_method_setFile_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_setFile", // alternative name of method
  -1, // altlabelHashCode
  URL_methods_setFile_INLRString__V_args, // the arguments
  0, //arguments count
  URL_methods_setFile_INLRString__V_exceptions, // the declared exceptions
  URL_MetainfoWrapper::URL_method_setFile_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_setPassword_INLRString__V_arg_p = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "p", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URL_methods_setPassword_INLRString__V_args[] = 
{
  &URL_methods_setPassword_INLRString__V_arg_p,
  0
};

::acdk::lang::dmi::ClazzInfo* URL_methods_setPassword_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URL_method_setPassword_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setPassword", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_k_setPassword", // alternative name of method
  -1, // altlabelHashCode
  URL_methods_setPassword_INLRString__V_args, // the arguments
  0, //arguments count
  URL_methods_setPassword_INLRString__V_exceptions, // the declared exceptions
  URL_MetainfoWrapper::URL_method_setPassword_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_setPort_I_V_arg_portno = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "portno", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URL_methods_setPort_I_V_args[] = 
{
  &URL_methods_setPort_I_V_arg_portno,
  0
};

::acdk::lang::dmi::ClazzInfo* URL_methods_setPort_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URL_method_setPort_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setPort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_setPort", // alternative name of method
  -1, // altlabelHashCode
  URL_methods_setPort_I_V_args, // the arguments
  0, //arguments count
  URL_methods_setPort_I_V_exceptions, // the declared exceptions
  URL_MetainfoWrapper::URL_method_setPort_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_setRef_INLRString__V_arg_r = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "r", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URL_methods_setRef_INLRString__V_args[] = 
{
  &URL_methods_setRef_INLRString__V_arg_r,
  0
};

::acdk::lang::dmi::ClazzInfo* URL_methods_setRef_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URL_method_setRef_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setRef", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_m_setRef", // alternative name of method
  -1, // altlabelHashCode
  URL_methods_setRef_INLRString__V_args, // the arguments
  0, //arguments count
  URL_methods_setRef_INLRString__V_exceptions, // the declared exceptions
  URL_MetainfoWrapper::URL_method_setRef_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URL_methods_setUser_INLRString__V_arg_u = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "u", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URL_methods_setUser_INLRString__V_args[] = 
{
  &URL_methods_setUser_INLRString__V_arg_u,
  0
};

::acdk::lang::dmi::ClazzInfo* URL_methods_setUser_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URL_method_setUser_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setUser", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_i_setUser", // alternative name of method
  -1, // altlabelHashCode
  URL_methods_setUser_INLRString__V_args, // the arguments
  0, //arguments count
  URL_methods_setUser_INLRString__V_exceptions, // the declared exceptions
  URL_MetainfoWrapper::URL_method_setUser_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* URL_methods_toExternalForm__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* URL_methods_toExternalForm__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URL_method_toExternalForm__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toExternalForm", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_q_toExternalForm", // alternative name of method
  -1, // altlabelHashCode
  URL_methods_toExternalForm__LRString__args, // the arguments
  0, //arguments count
  URL_methods_toExternalForm__LRString__exceptions, // the declared exceptions
  URL_MetainfoWrapper::URL_method_toExternalForm__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* URL_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* URL_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URL_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_r_toString", // alternative name of method
  -1, // altlabelHashCode
  URL_methods_toString__LRString__args, // the arguments
  0, //arguments count
  URL_methods_toString__LRString__exceptions, // the declared exceptions
  URL_MetainfoWrapper::URL_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _URL_methods[] = 
{
  &URL_method_GetClass__L_acdk_lang_RClass_,
  &URL_method_URL_INLRString_INLRString_INLRString__LRURL_,
  &URL_method_URL_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRURLStreamHandler__LRURL_,
  &URL_method_URL_INLRString_INLRString_IINLRString__LRURL_,
  &URL_method_URL_INLRString_INLRString_IINLRString_INLRString__LRURL_,
  &URL_method_URL_INLRURL_INLRString_INLRURLStreamHandler__LRURL_,
  &URL_method_URL_INLRURL_INLRString__LRURL_,
  &URL_method_URL_INLRString_INLRString_IINLRString_INLRString_INLRString__LRURL_,
  &URL_method_URL_INLRString__LRURL_,
  &URL_method__URLbyContext_INLRURL_INLRString_INLRURLStreamHandler__V,
  &URL_method__URLbyContext_INLRURL_INLRString__V,
  &URL_method__URLinit_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRURLStreamHandler__V,
  &URL_method_compareTo_INLRObject__I,
  &URL_method_equals_INLRObject__Z,
  &URL_method_fileAsUrlName_INLRString__LRString_,
  &URL_method_fileAsUrlName_INLacdk_io_RFile__LRString_,
  &URL_method_getContent__LRObject_,
  &URL_method_getFile__LRString_,
  &URL_method_getHost__LRString_,
  &URL_method_getPassword__LRString_,
  &URL_method_getPort__I,
  &URL_method_getProtocol__LRString_,
  &URL_method_getRef__LRString_,
  &URL_method_getUser__LRString_,
  &URL_method_hashCode__I,
  &URL_method_openConnection__LRURLConnection_,
  &URL_method_openStream__LRReader_,
  &URL_method_sameFile_INLRURLInterface__Z,
  &URL_method_set_INLRString_INLRString_IINLRString_INLRString_INLRString_INLRString__V,
  &URL_method_setFile_INLRString__V,
  &URL_method_setPassword_INLRString__V,
  &URL_method_setPort_I_V,
  &URL_method_setRef_INLRString__V,
  &URL_method_setUser_INLRString__V,
  &URL_method_toExternalForm__LRString_,
  &URL_method_toString__LRString_,
  0
};


struct URL_MetaInfoInitializer
{  URL_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = URL::clazzInfo();
    ci->fields =  _URL_fields;
    ci->methods =  _URL_methods;
    ci->_scopeParent = acdk_net_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
URL_MetaInfoInitializer URL_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
URLConnection_create_array(int length)
{
  return new ObjectArrayImpl<RURLConnection>(length);
}

//static
::acdk::lang::RObject
URLConnection_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class URLConnection_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLConnection_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)URLConnection::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLConnection_method_connect__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URLConnection* This = dmi_cast<URLConnection>(This_);
    This->connect();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLConnection_method_getAllowUserInteraction__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URLConnection* This = dmi_cast<URLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->URLConnection::getAllowUserInteraction();
    else
      ret = This->getAllowUserInteraction();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLConnection_method_getContent__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URLConnection* This = dmi_cast<URLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->URLConnection::getContent();
    else
        ret = (::acdk::lang::RObject)This->getContent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLConnection_method_getContentEncoding__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URLConnection* This = dmi_cast<URLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->URLConnection::getContentEncoding();
    else
        ret = (::acdk::lang::RObject)This->getContentEncoding();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLConnection_method_getContentLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URLConnection* This = dmi_cast<URLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->URLConnection::getContentLength();
    else
      ret = This->getContentLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLConnection_method_getContentType__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URLConnection* This = dmi_cast<URLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->URLConnection::getContentType();
    else
        ret = (::acdk::lang::RObject)This->getContentType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLConnection_method_getDate__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URLConnection* This = dmi_cast<URLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->URLConnection::getDate();
    else
      ret = This->getDate();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLConnection_method_getDefaultAllowUserInteraction__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = URLConnection::getDefaultAllowUserInteraction();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLConnection_method_getDefaultRequestProperty_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)URLConnection::getDefaultRequestProperty(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLConnection_method_getDefaultUseCaches__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = URLConnection::getDefaultUseCaches();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLConnection_method_getDoInput__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URLConnection* This = dmi_cast<URLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->URLConnection::getDoInput();
    else
      ret = This->getDoInput();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLConnection_method_getDoOutput__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URLConnection* This = dmi_cast<URLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->URLConnection::getDoOutput();
    else
      ret = This->getDoOutput();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLConnection_method_getExpiration__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URLConnection* This = dmi_cast<URLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->URLConnection::getExpiration();
    else
      ret = This->getExpiration();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLConnection_method_getFileNameMap__LRFileNameMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)URLConnection::getFileNameMap();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLConnection_method_getHeaderField_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URLConnection* This = dmi_cast<URLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->URLConnection::getHeaderField(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getHeaderField(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLConnection_method_getHeaderField_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URLConnection* This = dmi_cast<URLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->URLConnection::getHeaderField(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getHeaderField(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLConnection_method_getHeaderFieldDate_INLRString_J_J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URLConnection* This = dmi_cast<URLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->URLConnection::getHeaderFieldDate(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< jlong>(args[1], dc));
    else
      ret = This->getHeaderFieldDate(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< jlong>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLConnection_method_getHeaderFieldInt_INLRString_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URLConnection* This = dmi_cast<URLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->URLConnection::getHeaderFieldInt(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
      ret = This->getHeaderFieldInt(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLConnection_method_getHeaderFieldKey_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URLConnection* This = dmi_cast<URLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->URLConnection::getHeaderFieldKey(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getHeaderFieldKey(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLConnection_method_getIfModifiedSince__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URLConnection* This = dmi_cast<URLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->URLConnection::getIfModifiedSince();
    else
      ret = This->getIfModifiedSince();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLConnection_method_getInputStream__LRReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URLConnection* This = dmi_cast<URLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->URLConnection::getInputStream();
    else
        ret = (::acdk::lang::RObject)This->getInputStream();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLConnection_method_getLastModified__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URLConnection* This = dmi_cast<URLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->URLConnection::getLastModified();
    else
      ret = This->getLastModified();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLConnection_method_getOutputStream__LRWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URLConnection* This = dmi_cast<URLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->URLConnection::getOutputStream();
    else
        ret = (::acdk::lang::RObject)This->getOutputStream();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLConnection_method_getRequestProperty_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URLConnection* This = dmi_cast<URLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->URLConnection::getRequestProperty(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getRequestProperty(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLConnection_method_getURL__LRURL__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URLConnection* This = dmi_cast<URLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->URLConnection::getURL();
    else
        ret = (::acdk::lang::RObject)This->getURL();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLConnection_method_getUseCaches__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URLConnection* This = dmi_cast<URLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->URLConnection::getUseCaches();
    else
      ret = This->getUseCaches();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLConnection_method_guessContentTypeFromName_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)URLConnection::guessContentTypeFromName(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLConnection_method_guessContentTypeFromStream_INLRReader__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)URLConnection::guessContentTypeFromStream(::acdk::lang::dmi::castTo< RReader>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLConnection_method_setAllowUserInteraction_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URLConnection* This = dmi_cast<URLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->URLConnection::setAllowUserInteraction(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->setAllowUserInteraction(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLConnection_method_setContentHandlerFactory_INLRContentHandlerFactory__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URLConnection::setContentHandlerFactory(::acdk::lang::dmi::castTo< RContentHandlerFactory>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLConnection_method_setDefaultAllowUserInteraction_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URLConnection::setDefaultAllowUserInteraction(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLConnection_method_setDefaultRequestProperty_INLRString_LRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URLConnection::setDefaultRequestProperty(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLConnection_method_setDefaultUseCaches_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URLConnection::setDefaultUseCaches(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLConnection_method_setDoInput_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URLConnection* This = dmi_cast<URLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->URLConnection::setDoInput(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->setDoInput(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLConnection_method_setDoOutput_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URLConnection* This = dmi_cast<URLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->URLConnection::setDoOutput(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->setDoOutput(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLConnection_method_setFileNameMap_INLRFileNameMap__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URLConnection::setFileNameMap(::acdk::lang::dmi::castTo< RFileNameMap>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLConnection_method_setIfModifiedSince_J_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URLConnection* This = dmi_cast<URLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->URLConnection::setIfModifiedSince(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
        This->setIfModifiedSince(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLConnection_method_setRequestProperty_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URLConnection* This = dmi_cast<URLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->URLConnection::setRequestProperty(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    else
        This->setRequestProperty(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLConnection_method_setUseCaches_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URLConnection* This = dmi_cast<URLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->URLConnection::setUseCaches(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->setUseCaches(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLConnection_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URLConnection* This = dmi_cast<URLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->URLConnection::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  URLConnection_fields_allowUserInteraction_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    URLConnection* This = dmi_cast<URLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->allowUserInteraction, flags);
    else
      This->allowUserInteraction = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  URLConnection_fields_connected_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    URLConnection* This = dmi_cast<URLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->connected, flags);
    else
      This->connected = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  URLConnection_fields_def_allow_user_inter_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(URLConnection::def_allow_user_inter, flags);
    else
      URLConnection::def_allow_user_inter = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  URLConnection_fields_def_req_props_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(URLConnection::def_req_props, flags);
    else
      URLConnection::def_req_props = ::acdk::lang::dmi::castTo< RHashMap>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  URLConnection_fields_def_use_caches_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(URLConnection::def_use_caches, flags);
    else
      URLConnection::def_use_caches = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  URLConnection_fields_doInput_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    URLConnection* This = dmi_cast<URLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->doInput, flags);
    else
      This->doInput = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  URLConnection_fields_doOutput_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    URLConnection* This = dmi_cast<URLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->doOutput, flags);
    else
      This->doOutput = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  URLConnection_fields_factory_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(URLConnection::factory, flags);
    else
      URLConnection::factory = ::acdk::lang::dmi::castTo< RContentHandlerFactory>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  URLConnection_fields_fileNameMap_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(URLConnection::fileNameMap, flags);
    else
      URLConnection::fileNameMap = ::acdk::lang::dmi::castTo< RFileNameMap>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  URLConnection_fields_ifModifiedSince_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    URLConnection* This = dmi_cast<URLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->ifModifiedSince, flags);
    else
      This->ifModifiedSince = ::acdk::lang::dmi::castTo< jlong>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  URLConnection_fields_req_props_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    URLConnection* This = dmi_cast<URLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->req_props, flags);
    else
      This->req_props = ::acdk::lang::dmi::castTo< RHashMap>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  URLConnection_fields_url_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    URLConnection* This = dmi_cast<URLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->url, flags);
    else
      This->url = ::acdk::lang::dmi::castTo< RURL>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  URLConnection_fields_useCaches_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    URLConnection* This = dmi_cast<URLConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->useCaches, flags);
    else
      This->useCaches = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo URLConnection_fields_allowUserInteraction = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "allowUserInteraction", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  URLConnection_MetainfoWrapper::URLConnection_fields_allowUserInteraction_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo URLConnection_fields_connected = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "connected", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  URLConnection_MetainfoWrapper::URLConnection_fields_connected_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo URLConnection_fields_def_allow_user_inter = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "def_allow_user_inter", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  URLConnection_MetainfoWrapper::URLConnection_fields_def_allow_user_inter_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo URLConnection_fields_def_req_props = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "def_req_props", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RHashMap::clazzInfo(),
  URLConnection_MetainfoWrapper::URLConnection_fields_def_req_props_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo URLConnection_fields_def_use_caches = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "def_use_caches", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  URLConnection_MetainfoWrapper::URLConnection_fields_def_use_caches_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo URLConnection_fields_doInput = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "doInput", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  URLConnection_MetainfoWrapper::URLConnection_fields_doInput_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo URLConnection_fields_doOutput = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "doOutput", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  URLConnection_MetainfoWrapper::URLConnection_fields_doOutput_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo URLConnection_fields_factory = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "factory", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RContentHandlerFactory::clazzInfo(),
  URLConnection_MetainfoWrapper::URLConnection_fields_factory_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo URLConnection_fields_fileNameMap = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "fileNameMap", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileNameMap::clazzInfo(),
  URLConnection_MetainfoWrapper::URLConnection_fields_fileNameMap_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo URLConnection_fields_ifModifiedSince = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "ifModifiedSince", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(),
  URLConnection_MetainfoWrapper::URLConnection_fields_ifModifiedSince_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo URLConnection_fields_req_props = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "req_props", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RHashMap::clazzInfo(),
  URLConnection_MetainfoWrapper::URLConnection_fields_req_props_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo URLConnection_fields_url = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "url", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RURL::clazzInfo(),
  URLConnection_MetainfoWrapper::URLConnection_fields_url_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo URLConnection_fields_useCaches = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "useCaches", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  URLConnection_MetainfoWrapper::URLConnection_fields_useCaches_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _URLConnection_fields[] = 
{
  &URLConnection_fields_allowUserInteraction,
  &URLConnection_fields_connected,
  &URLConnection_fields_def_allow_user_inter,
  &URLConnection_fields_def_req_props,
  &URLConnection_fields_def_use_caches,
  &URLConnection_fields_doInput,
  &URLConnection_fields_doOutput,
  &URLConnection_fields_factory,
  &URLConnection_fields_fileNameMap,
  &URLConnection_fields_ifModifiedSince,
  &URLConnection_fields_req_props,
  &URLConnection_fields_url,
  &URLConnection_fields_useCaches,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLConnection_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* URLConnection_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLConnection_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_F_GetClass", // alternative name of method
  -1, // altlabelHashCode
  URLConnection_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  URLConnection_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  URLConnection_MetainfoWrapper::URLConnection_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URLConnection_methods_URLConnection_INLRURL__LRURLConnection__arg_url = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "url", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RURL::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLConnection_methods_URLConnection_INLRURL__LRURLConnection__args[] = 
{
  &URLConnection_methods_URLConnection_INLRURL__LRURLConnection__arg_url,
  0
};

::acdk::lang::dmi::ClazzInfo* URLConnection_methods_URLConnection_INLRURL__LRURLConnection__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLConnection_method_URLConnection_INLRURL__LRURLConnection_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "URLConnection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  URLConnection::clazzInfo(), // return type
  "_0_URLConnection", // alternative name of method
  -1, // altlabelHashCode
  URLConnection_methods_URLConnection_INLRURL__LRURLConnection__args, // the arguments
  0, //arguments count
  URLConnection_methods_URLConnection_INLRURL__LRURLConnection__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLConnection_methods_connect__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* URLConnection_methods_connect__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLConnection_method_connect__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "connect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_o_connect", // alternative name of method
  -1, // altlabelHashCode
  URLConnection_methods_connect__V_args, // the arguments
  0, //arguments count
  URLConnection_methods_connect__V_exceptions, // the declared exceptions
  URLConnection_MetainfoWrapper::URLConnection_method_connect__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLConnection_methods_getAllowUserInteraction__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* URLConnection_methods_getAllowUserInteraction__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLConnection_method_getAllowUserInteraction__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAllowUserInteraction", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_b_getAllowUserInteraction", // alternative name of method
  -1, // altlabelHashCode
  URLConnection_methods_getAllowUserInteraction__Z_args, // the arguments
  0, //arguments count
  URLConnection_methods_getAllowUserInteraction__Z_exceptions, // the declared exceptions
  URLConnection_MetainfoWrapper::URLConnection_method_getAllowUserInteraction__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLConnection_methods_getContent__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* URLConnection_methods_getContent__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLConnection_method_getContent__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getContent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_C_getContent", // alternative name of method
  -1, // altlabelHashCode
  URLConnection_methods_getContent__LRObject__args, // the arguments
  0, //arguments count
  URLConnection_methods_getContent__LRObject__exceptions, // the declared exceptions
  URLConnection_MetainfoWrapper::URLConnection_method_getContent__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLConnection_methods_getContentEncoding__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* URLConnection_methods_getContentEncoding__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLConnection_method_getContentEncoding__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getContentEncoding", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_r_getContentEncoding", // alternative name of method
  -1, // altlabelHashCode
  URLConnection_methods_getContentEncoding__LRString__args, // the arguments
  0, //arguments count
  URLConnection_methods_getContentEncoding__LRString__exceptions, // the declared exceptions
  URLConnection_MetainfoWrapper::URLConnection_method_getContentEncoding__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLConnection_methods_getContentLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* URLConnection_methods_getContentLength__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLConnection_method_getContentLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getContentLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_s_getContentLength", // alternative name of method
  -1, // altlabelHashCode
  URLConnection_methods_getContentLength__I_args, // the arguments
  0, //arguments count
  URLConnection_methods_getContentLength__I_exceptions, // the declared exceptions
  URLConnection_MetainfoWrapper::URLConnection_method_getContentLength__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLConnection_methods_getContentType__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* URLConnection_methods_getContentType__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLConnection_method_getContentType__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getContentType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_t_getContentType", // alternative name of method
  -1, // altlabelHashCode
  URLConnection_methods_getContentType__LRString__args, // the arguments
  0, //arguments count
  URLConnection_methods_getContentType__LRString__exceptions, // the declared exceptions
  URLConnection_MetainfoWrapper::URLConnection_method_getContentType__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLConnection_methods_getDate__J_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* URLConnection_methods_getDate__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLConnection_method_getDate__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_u_getDate", // alternative name of method
  -1, // altlabelHashCode
  URLConnection_methods_getDate__J_args, // the arguments
  0, //arguments count
  URLConnection_methods_getDate__J_exceptions, // the declared exceptions
  URLConnection_MetainfoWrapper::URLConnection_method_getDate__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLConnection_methods_getDefaultAllowUserInteraction__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* URLConnection_methods_getDefaultAllowUserInteraction__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLConnection_method_getDefaultAllowUserInteraction__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDefaultAllowUserInteraction", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_getDefaultAllowUserInteraction", // alternative name of method
  -1, // altlabelHashCode
  URLConnection_methods_getDefaultAllowUserInteraction__Z_args, // the arguments
  0, //arguments count
  URLConnection_methods_getDefaultAllowUserInteraction__Z_exceptions, // the declared exceptions
  URLConnection_MetainfoWrapper::URLConnection_method_getDefaultAllowUserInteraction__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URLConnection_methods_getDefaultRequestProperty_INLRString__LRString__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLConnection_methods_getDefaultRequestProperty_INLRString__LRString__args[] = 
{
  &URLConnection_methods_getDefaultRequestProperty_INLRString__LRString__arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* URLConnection_methods_getDefaultRequestProperty_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLConnection_method_getDefaultRequestProperty_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDefaultRequestProperty", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_4_getDefaultRequestProperty", // alternative name of method
  -1, // altlabelHashCode
  URLConnection_methods_getDefaultRequestProperty_INLRString__LRString__args, // the arguments
  0, //arguments count
  URLConnection_methods_getDefaultRequestProperty_INLRString__LRString__exceptions, // the declared exceptions
  URLConnection_MetainfoWrapper::URLConnection_method_getDefaultRequestProperty_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLConnection_methods_getDefaultUseCaches__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* URLConnection_methods_getDefaultUseCaches__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLConnection_method_getDefaultUseCaches__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDefaultUseCaches", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_9_getDefaultUseCaches", // alternative name of method
  -1, // altlabelHashCode
  URLConnection_methods_getDefaultUseCaches__Z_args, // the arguments
  0, //arguments count
  URLConnection_methods_getDefaultUseCaches__Z_exceptions, // the declared exceptions
  URLConnection_MetainfoWrapper::URLConnection_method_getDefaultUseCaches__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLConnection_methods_getDoInput__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* URLConnection_methods_getDoInput__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLConnection_method_getDoInput__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDoInput", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_d_getDoInput", // alternative name of method
  -1, // altlabelHashCode
  URLConnection_methods_getDoInput__Z_args, // the arguments
  0, //arguments count
  URLConnection_methods_getDoInput__Z_exceptions, // the declared exceptions
  URLConnection_MetainfoWrapper::URLConnection_method_getDoInput__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLConnection_methods_getDoOutput__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* URLConnection_methods_getDoOutput__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLConnection_method_getDoOutput__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDoOutput", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_f_getDoOutput", // alternative name of method
  -1, // altlabelHashCode
  URLConnection_methods_getDoOutput__Z_args, // the arguments
  0, //arguments count
  URLConnection_methods_getDoOutput__Z_exceptions, // the declared exceptions
  URLConnection_MetainfoWrapper::URLConnection_method_getDoOutput__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLConnection_methods_getExpiration__J_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* URLConnection_methods_getExpiration__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLConnection_method_getExpiration__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getExpiration", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_v_getExpiration", // alternative name of method
  -1, // altlabelHashCode
  URLConnection_methods_getExpiration__J_args, // the arguments
  0, //arguments count
  URLConnection_methods_getExpiration__J_exceptions, // the declared exceptions
  URLConnection_MetainfoWrapper::URLConnection_method_getExpiration__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLConnection_methods_getFileNameMap__LRFileNameMap__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* URLConnection_methods_getFileNameMap__LRFileNameMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLConnection_method_getFileNameMap__LRFileNameMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFileNameMap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileNameMap::clazzInfo(), // return type
  "_7_getFileNameMap", // alternative name of method
  -1, // altlabelHashCode
  URLConnection_methods_getFileNameMap__LRFileNameMap__args, // the arguments
  0, //arguments count
  URLConnection_methods_getFileNameMap__LRFileNameMap__exceptions, // the declared exceptions
  URLConnection_MetainfoWrapper::URLConnection_method_getFileNameMap__LRFileNameMap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URLConnection_methods_getHeaderField_I_LRString__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLConnection_methods_getHeaderField_I_LRString__args[] = 
{
  &URLConnection_methods_getHeaderField_I_LRString__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* URLConnection_methods_getHeaderField_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLConnection_method_getHeaderField_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getHeaderField", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_y_getHeaderField", // alternative name of method
  -1, // altlabelHashCode
  URLConnection_methods_getHeaderField_I_LRString__args, // the arguments
  0, //arguments count
  URLConnection_methods_getHeaderField_I_LRString__exceptions, // the declared exceptions
  URLConnection_MetainfoWrapper::URLConnection_method_getHeaderField_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URLConnection_methods_getHeaderField_INLRString__LRString__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLConnection_methods_getHeaderField_INLRString__LRString__args[] = 
{
  &URLConnection_methods_getHeaderField_INLRString__LRString__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* URLConnection_methods_getHeaderField_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLConnection_method_getHeaderField_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getHeaderField", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_z_getHeaderField", // alternative name of method
  -1, // altlabelHashCode
  URLConnection_methods_getHeaderField_INLRString__LRString__args, // the arguments
  0, //arguments count
  URLConnection_methods_getHeaderField_INLRString__LRString__exceptions, // the declared exceptions
  URLConnection_MetainfoWrapper::URLConnection_method_getHeaderField_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URLConnection_methods_getHeaderFieldDate_INLRString_J_J_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URLConnection_methods_getHeaderFieldDate_INLRString_J_J_arg_def = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "def", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLConnection_methods_getHeaderFieldDate_INLRString_J_J_args[] = 
{
  &URLConnection_methods_getHeaderFieldDate_INLRString_J_J_arg_key,
  &URLConnection_methods_getHeaderFieldDate_INLRString_J_J_arg_def,
  0
};

::acdk::lang::dmi::ClazzInfo* URLConnection_methods_getHeaderFieldDate_INLRString_J_J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLConnection_method_getHeaderFieldDate_INLRString_J_J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getHeaderFieldDate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_A_getHeaderFieldDate", // alternative name of method
  -1, // altlabelHashCode
  URLConnection_methods_getHeaderFieldDate_INLRString_J_J_args, // the arguments
  0, //arguments count
  URLConnection_methods_getHeaderFieldDate_INLRString_J_J_exceptions, // the declared exceptions
  URLConnection_MetainfoWrapper::URLConnection_method_getHeaderFieldDate_INLRString_J_J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URLConnection_methods_getHeaderFieldInt_INLRString_I_I_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URLConnection_methods_getHeaderFieldInt_INLRString_I_I_arg_def = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "def", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLConnection_methods_getHeaderFieldInt_INLRString_I_I_args[] = 
{
  &URLConnection_methods_getHeaderFieldInt_INLRString_I_I_arg_key,
  &URLConnection_methods_getHeaderFieldInt_INLRString_I_I_arg_def,
  0
};

::acdk::lang::dmi::ClazzInfo* URLConnection_methods_getHeaderFieldInt_INLRString_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLConnection_method_getHeaderFieldInt_INLRString_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getHeaderFieldInt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_B_getHeaderFieldInt", // alternative name of method
  -1, // altlabelHashCode
  URLConnection_methods_getHeaderFieldInt_INLRString_I_I_args, // the arguments
  0, //arguments count
  URLConnection_methods_getHeaderFieldInt_INLRString_I_I_exceptions, // the declared exceptions
  URLConnection_MetainfoWrapper::URLConnection_method_getHeaderFieldInt_INLRString_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URLConnection_methods_getHeaderFieldKey_I_LRString__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLConnection_methods_getHeaderFieldKey_I_LRString__args[] = 
{
  &URLConnection_methods_getHeaderFieldKey_I_LRString__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* URLConnection_methods_getHeaderFieldKey_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLConnection_method_getHeaderFieldKey_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getHeaderFieldKey", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_x_getHeaderFieldKey", // alternative name of method
  -1, // altlabelHashCode
  URLConnection_methods_getHeaderFieldKey_I_LRString__args, // the arguments
  0, //arguments count
  URLConnection_methods_getHeaderFieldKey_I_LRString__exceptions, // the declared exceptions
  URLConnection_MetainfoWrapper::URLConnection_method_getHeaderFieldKey_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLConnection_methods_getIfModifiedSince__J_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* URLConnection_methods_getIfModifiedSince__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLConnection_method_getIfModifiedSince__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getIfModifiedSince", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_j_getIfModifiedSince", // alternative name of method
  -1, // altlabelHashCode
  URLConnection_methods_getIfModifiedSince__J_args, // the arguments
  0, //arguments count
  URLConnection_methods_getIfModifiedSince__J_exceptions, // the declared exceptions
  URLConnection_MetainfoWrapper::URLConnection_method_getIfModifiedSince__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLConnection_methods_getInputStream__LRReader__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* URLConnection_methods_getInputStream__LRReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLConnection_method_getInputStream__LRReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInputStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReader::clazzInfo(), // return type
  "_p_getInputStream", // alternative name of method
  -1, // altlabelHashCode
  URLConnection_methods_getInputStream__LRReader__args, // the arguments
  0, //arguments count
  URLConnection_methods_getInputStream__LRReader__exceptions, // the declared exceptions
  URLConnection_MetainfoWrapper::URLConnection_method_getInputStream__LRReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLConnection_methods_getLastModified__J_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* URLConnection_methods_getLastModified__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLConnection_method_getLastModified__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLastModified", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_w_getLastModified", // alternative name of method
  -1, // altlabelHashCode
  URLConnection_methods_getLastModified__J_args, // the arguments
  0, //arguments count
  URLConnection_methods_getLastModified__J_exceptions, // the declared exceptions
  URLConnection_MetainfoWrapper::URLConnection_method_getLastModified__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLConnection_methods_getOutputStream__LRWriter__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* URLConnection_methods_getOutputStream__LRWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLConnection_method_getOutputStream__LRWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getOutputStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriter::clazzInfo(), // return type
  "_q_getOutputStream", // alternative name of method
  -1, // altlabelHashCode
  URLConnection_methods_getOutputStream__LRWriter__args, // the arguments
  0, //arguments count
  URLConnection_methods_getOutputStream__LRWriter__exceptions, // the declared exceptions
  URLConnection_MetainfoWrapper::URLConnection_method_getOutputStream__LRWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URLConnection_methods_getRequestProperty_INLRString__LRString__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLConnection_methods_getRequestProperty_INLRString__LRString__args[] = 
{
  &URLConnection_methods_getRequestProperty_INLRString__LRString__arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* URLConnection_methods_getRequestProperty_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLConnection_method_getRequestProperty_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRequestProperty", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_l_getRequestProperty", // alternative name of method
  -1, // altlabelHashCode
  URLConnection_methods_getRequestProperty_INLRString__LRString__args, // the arguments
  0, //arguments count
  URLConnection_methods_getRequestProperty_INLRString__LRString__exceptions, // the declared exceptions
  URLConnection_MetainfoWrapper::URLConnection_method_getRequestProperty_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLConnection_methods_getURL__LRURL__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* URLConnection_methods_getURL__LRURL__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLConnection_method_getURL__LRURL_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getURL", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RURL::clazzInfo(), // return type
  "_n_getURL", // alternative name of method
  -1, // altlabelHashCode
  URLConnection_methods_getURL__LRURL__args, // the arguments
  0, //arguments count
  URLConnection_methods_getURL__LRURL__exceptions, // the declared exceptions
  URLConnection_MetainfoWrapper::URLConnection_method_getURL__LRURL__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLConnection_methods_getUseCaches__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* URLConnection_methods_getUseCaches__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLConnection_method_getUseCaches__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getUseCaches", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_h_getUseCaches", // alternative name of method
  -1, // altlabelHashCode
  URLConnection_methods_getUseCaches__Z_args, // the arguments
  0, //arguments count
  URLConnection_methods_getUseCaches__Z_exceptions, // the declared exceptions
  URLConnection_MetainfoWrapper::URLConnection_method_getUseCaches__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URLConnection_methods_guessContentTypeFromName_INLRString__LRString__arg_filename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "filename", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLConnection_methods_guessContentTypeFromName_INLRString__LRString__args[] = 
{
  &URLConnection_methods_guessContentTypeFromName_INLRString__LRString__arg_filename,
  0
};

::acdk::lang::dmi::ClazzInfo* URLConnection_methods_guessContentTypeFromName_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLConnection_method_guessContentTypeFromName_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "guessContentTypeFromName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_E_guessContentTypeFromName", // alternative name of method
  -1, // altlabelHashCode
  URLConnection_methods_guessContentTypeFromName_INLRString__LRString__args, // the arguments
  0, //arguments count
  URLConnection_methods_guessContentTypeFromName_INLRString__LRString__exceptions, // the declared exceptions
  URLConnection_MetainfoWrapper::URLConnection_method_guessContentTypeFromName_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URLConnection_methods_guessContentTypeFromStream_INLRReader__LRString__arg_is = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "is", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLConnection_methods_guessContentTypeFromStream_INLRReader__LRString__args[] = 
{
  &URLConnection_methods_guessContentTypeFromStream_INLRReader__LRString__arg_is,
  0
};

::acdk::lang::dmi::ClazzInfo* URLConnection_methods_guessContentTypeFromStream_INLRReader__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLConnection_method_guessContentTypeFromStream_INLRReader__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "guessContentTypeFromStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_6_guessContentTypeFromStream", // alternative name of method
  -1, // altlabelHashCode
  URLConnection_methods_guessContentTypeFromStream_INLRReader__LRString__args, // the arguments
  0, //arguments count
  URLConnection_methods_guessContentTypeFromStream_INLRReader__LRString__exceptions, // the declared exceptions
  URLConnection_MetainfoWrapper::URLConnection_method_guessContentTypeFromStream_INLRReader__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URLConnection_methods_setAllowUserInteraction_Z_V_arg_allow = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "allow", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLConnection_methods_setAllowUserInteraction_Z_V_args[] = 
{
  &URLConnection_methods_setAllowUserInteraction_Z_V_arg_allow,
  0
};

::acdk::lang::dmi::ClazzInfo* URLConnection_methods_setAllowUserInteraction_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLConnection_method_setAllowUserInteraction_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setAllowUserInteraction", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_setAllowUserInteraction", // alternative name of method
  -1, // altlabelHashCode
  URLConnection_methods_setAllowUserInteraction_Z_V_args, // the arguments
  0, //arguments count
  URLConnection_methods_setAllowUserInteraction_Z_V_exceptions, // the declared exceptions
  URLConnection_MetainfoWrapper::URLConnection_method_setAllowUserInteraction_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URLConnection_methods_setContentHandlerFactory_INLRContentHandlerFactory__V_arg_fac = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fac", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RContentHandlerFactory::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLConnection_methods_setContentHandlerFactory_INLRContentHandlerFactory__V_args[] = 
{
  &URLConnection_methods_setContentHandlerFactory_INLRContentHandlerFactory__V_arg_fac,
  0
};

::acdk::lang::dmi::ClazzInfo* URLConnection_methods_setContentHandlerFactory_INLRContentHandlerFactory__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLConnection_method_setContentHandlerFactory_INLRContentHandlerFactory__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setContentHandlerFactory", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_setContentHandlerFactory", // alternative name of method
  -1, // altlabelHashCode
  URLConnection_methods_setContentHandlerFactory_INLRContentHandlerFactory__V_args, // the arguments
  0, //arguments count
  URLConnection_methods_setContentHandlerFactory_INLRContentHandlerFactory__V_exceptions, // the declared exceptions
  URLConnection_MetainfoWrapper::URLConnection_method_setContentHandlerFactory_INLRContentHandlerFactory__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URLConnection_methods_setDefaultAllowUserInteraction_Z_V_arg_allow = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "allow", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLConnection_methods_setDefaultAllowUserInteraction_Z_V_args[] = 
{
  &URLConnection_methods_setDefaultAllowUserInteraction_Z_V_arg_allow,
  0
};

::acdk::lang::dmi::ClazzInfo* URLConnection_methods_setDefaultAllowUserInteraction_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLConnection_method_setDefaultAllowUserInteraction_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDefaultAllowUserInteraction", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_setDefaultAllowUserInteraction", // alternative name of method
  -1, // altlabelHashCode
  URLConnection_methods_setDefaultAllowUserInteraction_Z_V_args, // the arguments
  0, //arguments count
  URLConnection_methods_setDefaultAllowUserInteraction_Z_V_exceptions, // the declared exceptions
  URLConnection_MetainfoWrapper::URLConnection_method_setDefaultAllowUserInteraction_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URLConnection_methods_setDefaultRequestProperty_INLRString_LRString__V_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URLConnection_methods_setDefaultRequestProperty_INLRString_LRString__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLConnection_methods_setDefaultRequestProperty_INLRString_LRString__V_args[] = 
{
  &URLConnection_methods_setDefaultRequestProperty_INLRString_LRString__V_arg_key,
  &URLConnection_methods_setDefaultRequestProperty_INLRString_LRString__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* URLConnection_methods_setDefaultRequestProperty_INLRString_LRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLConnection_method_setDefaultRequestProperty_INLRString_LRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDefaultRequestProperty", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_setDefaultRequestProperty", // alternative name of method
  -1, // altlabelHashCode
  URLConnection_methods_setDefaultRequestProperty_INLRString_LRString__V_args, // the arguments
  0, //arguments count
  URLConnection_methods_setDefaultRequestProperty_INLRString_LRString__V_exceptions, // the declared exceptions
  URLConnection_MetainfoWrapper::URLConnection_method_setDefaultRequestProperty_INLRString_LRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URLConnection_methods_setDefaultUseCaches_Z_V_arg_use = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "use", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLConnection_methods_setDefaultUseCaches_Z_V_args[] = 
{
  &URLConnection_methods_setDefaultUseCaches_Z_V_arg_use,
  0
};

::acdk::lang::dmi::ClazzInfo* URLConnection_methods_setDefaultUseCaches_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLConnection_method_setDefaultUseCaches_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDefaultUseCaches", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_setDefaultUseCaches", // alternative name of method
  -1, // altlabelHashCode
  URLConnection_methods_setDefaultUseCaches_Z_V_args, // the arguments
  0, //arguments count
  URLConnection_methods_setDefaultUseCaches_Z_V_exceptions, // the declared exceptions
  URLConnection_MetainfoWrapper::URLConnection_method_setDefaultUseCaches_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URLConnection_methods_setDoInput_Z_V_arg_input = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "input", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLConnection_methods_setDoInput_Z_V_args[] = 
{
  &URLConnection_methods_setDoInput_Z_V_arg_input,
  0
};

::acdk::lang::dmi::ClazzInfo* URLConnection_methods_setDoInput_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLConnection_method_setDoInput_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDoInput", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_setDoInput", // alternative name of method
  -1, // altlabelHashCode
  URLConnection_methods_setDoInput_Z_V_args, // the arguments
  0, //arguments count
  URLConnection_methods_setDoInput_Z_V_exceptions, // the declared exceptions
  URLConnection_MetainfoWrapper::URLConnection_method_setDoInput_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URLConnection_methods_setDoOutput_Z_V_arg_output = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "output", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLConnection_methods_setDoOutput_Z_V_args[] = 
{
  &URLConnection_methods_setDoOutput_Z_V_arg_output,
  0
};

::acdk::lang::dmi::ClazzInfo* URLConnection_methods_setDoOutput_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLConnection_method_setDoOutput_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDoOutput", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_setDoOutput", // alternative name of method
  -1, // altlabelHashCode
  URLConnection_methods_setDoOutput_Z_V_args, // the arguments
  0, //arguments count
  URLConnection_methods_setDoOutput_Z_V_exceptions, // the declared exceptions
  URLConnection_MetainfoWrapper::URLConnection_method_setDoOutput_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URLConnection_methods_setFileNameMap_INLRFileNameMap__V_arg_fileNameMap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fileNameMap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileNameMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLConnection_methods_setFileNameMap_INLRFileNameMap__V_args[] = 
{
  &URLConnection_methods_setFileNameMap_INLRFileNameMap__V_arg_fileNameMap,
  0
};

::acdk::lang::dmi::ClazzInfo* URLConnection_methods_setFileNameMap_INLRFileNameMap__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLConnection_method_setFileNameMap_INLRFileNameMap__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFileNameMap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_setFileNameMap", // alternative name of method
  -1, // altlabelHashCode
  URLConnection_methods_setFileNameMap_INLRFileNameMap__V_args, // the arguments
  0, //arguments count
  URLConnection_methods_setFileNameMap_INLRFileNameMap__V_exceptions, // the declared exceptions
  URLConnection_MetainfoWrapper::URLConnection_method_setFileNameMap_INLRFileNameMap__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URLConnection_methods_setIfModifiedSince_J_V_arg_modified_since = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "modified_since", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLConnection_methods_setIfModifiedSince_J_V_args[] = 
{
  &URLConnection_methods_setIfModifiedSince_J_V_arg_modified_since,
  0
};

::acdk::lang::dmi::ClazzInfo* URLConnection_methods_setIfModifiedSince_J_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLConnection_method_setIfModifiedSince_J_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setIfModifiedSince", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_k_setIfModifiedSince", // alternative name of method
  -1, // altlabelHashCode
  URLConnection_methods_setIfModifiedSince_J_V_args, // the arguments
  0, //arguments count
  URLConnection_methods_setIfModifiedSince_J_V_exceptions, // the declared exceptions
  URLConnection_MetainfoWrapper::URLConnection_method_setIfModifiedSince_J_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URLConnection_methods_setRequestProperty_INLRString_INLRString__V_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URLConnection_methods_setRequestProperty_INLRString_INLRString__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLConnection_methods_setRequestProperty_INLRString_INLRString__V_args[] = 
{
  &URLConnection_methods_setRequestProperty_INLRString_INLRString__V_arg_key,
  &URLConnection_methods_setRequestProperty_INLRString_INLRString__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* URLConnection_methods_setRequestProperty_INLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLConnection_method_setRequestProperty_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setRequestProperty", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_m_setRequestProperty", // alternative name of method
  -1, // altlabelHashCode
  URLConnection_methods_setRequestProperty_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  URLConnection_methods_setRequestProperty_INLRString_INLRString__V_exceptions, // the declared exceptions
  URLConnection_MetainfoWrapper::URLConnection_method_setRequestProperty_INLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URLConnection_methods_setUseCaches_Z_V_arg_use_caches = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "use_caches", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLConnection_methods_setUseCaches_Z_V_args[] = 
{
  &URLConnection_methods_setUseCaches_Z_V_arg_use_caches,
  0
};

::acdk::lang::dmi::ClazzInfo* URLConnection_methods_setUseCaches_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLConnection_method_setUseCaches_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setUseCaches", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_i_setUseCaches", // alternative name of method
  -1, // altlabelHashCode
  URLConnection_methods_setUseCaches_Z_V_args, // the arguments
  0, //arguments count
  URLConnection_methods_setUseCaches_Z_V_exceptions, // the declared exceptions
  URLConnection_MetainfoWrapper::URLConnection_method_setUseCaches_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLConnection_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* URLConnection_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLConnection_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_D_toString", // alternative name of method
  -1, // altlabelHashCode
  URLConnection_methods_toString__LRString__args, // the arguments
  0, //arguments count
  URLConnection_methods_toString__LRString__exceptions, // the declared exceptions
  URLConnection_MetainfoWrapper::URLConnection_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _URLConnection_methods[] = 
{
  &URLConnection_method_GetClass__L_acdk_lang_RClass_,
  &URLConnection_method_URLConnection_INLRURL__LRURLConnection_,
  &URLConnection_method_connect__V,
  &URLConnection_method_getAllowUserInteraction__Z,
  &URLConnection_method_getContent__LRObject_,
  &URLConnection_method_getContentEncoding__LRString_,
  &URLConnection_method_getContentLength__I,
  &URLConnection_method_getContentType__LRString_,
  &URLConnection_method_getDate__J,
  &URLConnection_method_getDefaultAllowUserInteraction__Z,
  &URLConnection_method_getDefaultRequestProperty_INLRString__LRString_,
  &URLConnection_method_getDefaultUseCaches__Z,
  &URLConnection_method_getDoInput__Z,
  &URLConnection_method_getDoOutput__Z,
  &URLConnection_method_getExpiration__J,
  &URLConnection_method_getFileNameMap__LRFileNameMap_,
  &URLConnection_method_getHeaderField_I_LRString_,
  &URLConnection_method_getHeaderField_INLRString__LRString_,
  &URLConnection_method_getHeaderFieldDate_INLRString_J_J,
  &URLConnection_method_getHeaderFieldInt_INLRString_I_I,
  &URLConnection_method_getHeaderFieldKey_I_LRString_,
  &URLConnection_method_getIfModifiedSince__J,
  &URLConnection_method_getInputStream__LRReader_,
  &URLConnection_method_getLastModified__J,
  &URLConnection_method_getOutputStream__LRWriter_,
  &URLConnection_method_getRequestProperty_INLRString__LRString_,
  &URLConnection_method_getURL__LRURL_,
  &URLConnection_method_getUseCaches__Z,
  &URLConnection_method_guessContentTypeFromName_INLRString__LRString_,
  &URLConnection_method_guessContentTypeFromStream_INLRReader__LRString_,
  &URLConnection_method_setAllowUserInteraction_Z_V,
  &URLConnection_method_setContentHandlerFactory_INLRContentHandlerFactory__V,
  &URLConnection_method_setDefaultAllowUserInteraction_Z_V,
  &URLConnection_method_setDefaultRequestProperty_INLRString_LRString__V,
  &URLConnection_method_setDefaultUseCaches_Z_V,
  &URLConnection_method_setDoInput_Z_V,
  &URLConnection_method_setDoOutput_Z_V,
  &URLConnection_method_setFileNameMap_INLRFileNameMap__V,
  &URLConnection_method_setIfModifiedSince_J_V,
  &URLConnection_method_setRequestProperty_INLRString_INLRString__V,
  &URLConnection_method_setUseCaches_Z_V,
  &URLConnection_method_toString__LRString_,
  0
};


struct URLConnection_MetaInfoInitializer
{  URLConnection_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = URLConnection::clazzInfo();
    ci->fields =  _URLConnection_fields;
    ci->methods =  _URLConnection_methods;
    ci->_scopeParent = acdk_net_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
URLConnection_MetaInfoInitializer URLConnection_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 


//static
::acdk::lang::RObject
URLDecoder_create_array(int length)
{
  return new ObjectArrayImpl<RURLDecoder>(length);
}

//static
::acdk::lang::RObject
URLDecoder_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class URLDecoder_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLDecoder_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)URLDecoder::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLDecoder_method_URLDecoder_INLacdk_locale_REncoding_II_LRURLDecoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new URLDecoder(::acdk::lang::dmi::castTo< acdk::locale::REncoding>(args[0], dc), (acdk::locale::CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[1], dc), (acdk::locale::CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLDecoder_method_URLDecoder_INLacdk_locale_REncoding__LRURLDecoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new URLDecoder(::acdk::lang::dmi::castTo< acdk::locale::REncoding>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLDecoder_method_URLDecoder_INLacdk_locale_REncoding_I_LRURLDecoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new URLDecoder(::acdk::lang::dmi::castTo< acdk::locale::REncoding>(args[0], dc), (acdk::locale::CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLDecoder_method_URLDecoder_II_LRURLDecoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new URLDecoder((acdk::locale::CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc), (acdk::locale::CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLDecoder_method_URLDecoder__LRURLDecoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new URLDecoder();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLDecoder_method_URLDecoder_I_LRURLDecoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new URLDecoder((acdk::locale::CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLDecoder_method_decode_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URLDecoder* This = dmi_cast<URLDecoder>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->URLDecoder::decode(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->decode(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLDecoder_method_decodeToChar_INLacdk_io_RReader__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URLDecoder* This = dmi_cast<URLDecoder>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->URLDecoder::decodeToChar(::acdk::lang::dmi::castTo< acdk::io::RReader>(args[0], dc));
    else
      ret = This->decodeToChar(::acdk::lang::dmi::castTo< acdk::io::RReader>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLDecoder_method_decodeToString_INLacdk_io_RReader_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URLDecoder* This = dmi_cast<URLDecoder>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->URLDecoder::decodeToString(::acdk::lang::dmi::castTo< acdk::io::RReader>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->decodeToString(::acdk::lang::dmi::castTo< acdk::io::RReader>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLDecoder_method_decodeToString_INLacdk_io_RReader__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    URLDecoder* This = dmi_cast<URLDecoder>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->URLDecoder::decodeToString(::acdk::lang::dmi::castTo< acdk::io::RReader>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->decodeToString(::acdk::lang::dmi::castTo< acdk::io::RReader>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLDecoder_method_unhex_C_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = URLDecoder::unhex(::acdk::lang::dmi::castTo< char>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _URLDecoder_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLDecoder_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* URLDecoder_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLDecoder_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_b_GetClass", // alternative name of method
  -1, // altlabelHashCode
  URLDecoder_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  URLDecoder_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  URLDecoder_MetainfoWrapper::URLDecoder_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URLDecoder_methods_URLDecoder_INLacdk_locale_REncoding_II_LRURLDecoder__arg_encoding = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "encoding", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::REncoding::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URLDecoder_methods_URLDecoder_INLacdk_locale_REncoding_II_LRURLDecoder__arg_onMalformed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onMalformed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URLDecoder_methods_URLDecoder_INLacdk_locale_REncoding_II_LRURLDecoder__arg_onUnmappable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onUnmappable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLDecoder_methods_URLDecoder_INLacdk_locale_REncoding_II_LRURLDecoder__args[] = 
{
  &URLDecoder_methods_URLDecoder_INLacdk_locale_REncoding_II_LRURLDecoder__arg_encoding,
  &URLDecoder_methods_URLDecoder_INLacdk_locale_REncoding_II_LRURLDecoder__arg_onMalformed,
  &URLDecoder_methods_URLDecoder_INLacdk_locale_REncoding_II_LRURLDecoder__arg_onUnmappable,
  0
};

::acdk::lang::dmi::ClazzInfo* URLDecoder_methods_URLDecoder_INLacdk_locale_REncoding_II_LRURLDecoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLDecoder_method_URLDecoder_INLacdk_locale_REncoding_II_LRURLDecoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "URLDecoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  URLDecoder::clazzInfo(), // return type
  "_0_URLDecoder", // alternative name of method
  -1, // altlabelHashCode
  URLDecoder_methods_URLDecoder_INLacdk_locale_REncoding_II_LRURLDecoder__args, // the arguments
  0, //arguments count
  URLDecoder_methods_URLDecoder_INLacdk_locale_REncoding_II_LRURLDecoder__exceptions, // the declared exceptions
  URLDecoder_MetainfoWrapper::URLDecoder_method_URLDecoder_INLacdk_locale_REncoding_II_LRURLDecoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URLDecoder_methods_URLDecoder_INLacdk_locale_REncoding__LRURLDecoder__arg_encoding = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "encoding", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::REncoding::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLDecoder_methods_URLDecoder_INLacdk_locale_REncoding__LRURLDecoder__args[] = 
{
  &URLDecoder_methods_URLDecoder_INLacdk_locale_REncoding__LRURLDecoder__arg_encoding,
  0
};

::acdk::lang::dmi::ClazzInfo* URLDecoder_methods_URLDecoder_INLacdk_locale_REncoding__LRURLDecoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLDecoder_method_URLDecoder_INLacdk_locale_REncoding__LRURLDecoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "URLDecoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  URLDecoder::clazzInfo(), // return type
  "_1_URLDecoder", // alternative name of method
  -1, // altlabelHashCode
  URLDecoder_methods_URLDecoder_INLacdk_locale_REncoding__LRURLDecoder__args, // the arguments
  0, //arguments count
  URLDecoder_methods_URLDecoder_INLacdk_locale_REncoding__LRURLDecoder__exceptions, // the declared exceptions
  URLDecoder_MetainfoWrapper::URLDecoder_method_URLDecoder_INLacdk_locale_REncoding__LRURLDecoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URLDecoder_methods_URLDecoder_INLacdk_locale_REncoding_I_LRURLDecoder__arg_encoding = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "encoding", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::REncoding::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URLDecoder_methods_URLDecoder_INLacdk_locale_REncoding_I_LRURLDecoder__arg_onMalformed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onMalformed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLDecoder_methods_URLDecoder_INLacdk_locale_REncoding_I_LRURLDecoder__args[] = 
{
  &URLDecoder_methods_URLDecoder_INLacdk_locale_REncoding_I_LRURLDecoder__arg_encoding,
  &URLDecoder_methods_URLDecoder_INLacdk_locale_REncoding_I_LRURLDecoder__arg_onMalformed,
  0
};

::acdk::lang::dmi::ClazzInfo* URLDecoder_methods_URLDecoder_INLacdk_locale_REncoding_I_LRURLDecoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLDecoder_method_URLDecoder_INLacdk_locale_REncoding_I_LRURLDecoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "URLDecoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  URLDecoder::clazzInfo(), // return type
  "_2_URLDecoder", // alternative name of method
  -1, // altlabelHashCode
  URLDecoder_methods_URLDecoder_INLacdk_locale_REncoding_I_LRURLDecoder__args, // the arguments
  0, //arguments count
  URLDecoder_methods_URLDecoder_INLacdk_locale_REncoding_I_LRURLDecoder__exceptions, // the declared exceptions
  URLDecoder_MetainfoWrapper::URLDecoder_method_URLDecoder_INLacdk_locale_REncoding_I_LRURLDecoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URLDecoder_methods_URLDecoder_II_LRURLDecoder__arg_onMalformed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onMalformed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URLDecoder_methods_URLDecoder_II_LRURLDecoder__arg_onUnmappable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onUnmappable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLDecoder_methods_URLDecoder_II_LRURLDecoder__args[] = 
{
  &URLDecoder_methods_URLDecoder_II_LRURLDecoder__arg_onMalformed,
  &URLDecoder_methods_URLDecoder_II_LRURLDecoder__arg_onUnmappable,
  0
};

::acdk::lang::dmi::ClazzInfo* URLDecoder_methods_URLDecoder_II_LRURLDecoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLDecoder_method_URLDecoder_II_LRURLDecoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "URLDecoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  URLDecoder::clazzInfo(), // return type
  "_3_URLDecoder", // alternative name of method
  -1, // altlabelHashCode
  URLDecoder_methods_URLDecoder_II_LRURLDecoder__args, // the arguments
  0, //arguments count
  URLDecoder_methods_URLDecoder_II_LRURLDecoder__exceptions, // the declared exceptions
  URLDecoder_MetainfoWrapper::URLDecoder_method_URLDecoder_II_LRURLDecoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLDecoder_methods_URLDecoder__LRURLDecoder__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* URLDecoder_methods_URLDecoder__LRURLDecoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLDecoder_method_URLDecoder__LRURLDecoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "URLDecoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  URLDecoder::clazzInfo(), // return type
  "_4_URLDecoder", // alternative name of method
  -1, // altlabelHashCode
  URLDecoder_methods_URLDecoder__LRURLDecoder__args, // the arguments
  0, //arguments count
  URLDecoder_methods_URLDecoder__LRURLDecoder__exceptions, // the declared exceptions
  URLDecoder_MetainfoWrapper::URLDecoder_method_URLDecoder__LRURLDecoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URLDecoder_methods_URLDecoder_I_LRURLDecoder__arg_onMalformed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onMalformed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLDecoder_methods_URLDecoder_I_LRURLDecoder__args[] = 
{
  &URLDecoder_methods_URLDecoder_I_LRURLDecoder__arg_onMalformed,
  0
};

::acdk::lang::dmi::ClazzInfo* URLDecoder_methods_URLDecoder_I_LRURLDecoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLDecoder_method_URLDecoder_I_LRURLDecoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "URLDecoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  URLDecoder::clazzInfo(), // return type
  "_5_URLDecoder", // alternative name of method
  -1, // altlabelHashCode
  URLDecoder_methods_URLDecoder_I_LRURLDecoder__args, // the arguments
  0, //arguments count
  URLDecoder_methods_URLDecoder_I_LRURLDecoder__exceptions, // the declared exceptions
  URLDecoder_MetainfoWrapper::URLDecoder_method_URLDecoder_I_LRURLDecoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URLDecoder_methods_decode_INLRString__LRString__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLDecoder_methods_decode_INLRString__LRString__args[] = 
{
  &URLDecoder_methods_decode_INLRString__LRString__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* URLDecoder_methods_decode_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLDecoder_method_decode_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "decode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_9_decode", // alternative name of method
  -1, // altlabelHashCode
  URLDecoder_methods_decode_INLRString__LRString__args, // the arguments
  0, //arguments count
  URLDecoder_methods_decode_INLRString__LRString__exceptions, // the declared exceptions
  URLDecoder_MetainfoWrapper::URLDecoder_method_decode_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URLDecoder_methods_decodeToChar_INLacdk_io_RReader__I_arg_in = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "in", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLDecoder_methods_decodeToChar_INLacdk_io_RReader__I_args[] = 
{
  &URLDecoder_methods_decodeToChar_INLacdk_io_RReader__I_arg_in,
  0
};

::acdk::lang::dmi::ClazzInfo* URLDecoder_methods_decodeToChar_INLacdk_io_RReader__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLDecoder_method_decodeToChar_INLacdk_io_RReader__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "decodeToChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_decodeToChar", // alternative name of method
  -1, // altlabelHashCode
  URLDecoder_methods_decodeToChar_INLacdk_io_RReader__I_args, // the arguments
  0, //arguments count
  URLDecoder_methods_decodeToChar_INLacdk_io_RReader__I_exceptions, // the declared exceptions
  URLDecoder_MetainfoWrapper::URLDecoder_method_decodeToChar_INLacdk_io_RReader__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URLDecoder_methods_decodeToString_INLacdk_io_RReader_I_LRString__arg_in = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "in", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URLDecoder_methods_decodeToString_INLacdk_io_RReader_I_LRString__arg_stopOn = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "stopOn", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLDecoder_methods_decodeToString_INLacdk_io_RReader_I_LRString__args[] = 
{
  &URLDecoder_methods_decodeToString_INLacdk_io_RReader_I_LRString__arg_in,
  &URLDecoder_methods_decodeToString_INLacdk_io_RReader_I_LRString__arg_stopOn,
  0
};

::acdk::lang::dmi::ClazzInfo* URLDecoder_methods_decodeToString_INLacdk_io_RReader_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLDecoder_method_decodeToString_INLacdk_io_RReader_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "decodeToString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_7_decodeToString", // alternative name of method
  -1, // altlabelHashCode
  URLDecoder_methods_decodeToString_INLacdk_io_RReader_I_LRString__args, // the arguments
  0, //arguments count
  URLDecoder_methods_decodeToString_INLacdk_io_RReader_I_LRString__exceptions, // the declared exceptions
  URLDecoder_MetainfoWrapper::URLDecoder_method_decodeToString_INLacdk_io_RReader_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URLDecoder_methods_decodeToString_INLacdk_io_RReader__LRString__arg_in = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "in", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLDecoder_methods_decodeToString_INLacdk_io_RReader__LRString__args[] = 
{
  &URLDecoder_methods_decodeToString_INLacdk_io_RReader__LRString__arg_in,
  0
};

::acdk::lang::dmi::ClazzInfo* URLDecoder_methods_decodeToString_INLacdk_io_RReader__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLDecoder_method_decodeToString_INLacdk_io_RReader__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "decodeToString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_8_decodeToString", // alternative name of method
  -1, // altlabelHashCode
  URLDecoder_methods_decodeToString_INLacdk_io_RReader__LRString__args, // the arguments
  0, //arguments count
  URLDecoder_methods_decodeToString_INLacdk_io_RReader__LRString__exceptions, // the declared exceptions
  URLDecoder_MetainfoWrapper::URLDecoder_method_decodeToString_INLacdk_io_RReader__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URLDecoder_methods_unhex_C_I_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLDecoder_methods_unhex_C_I_args[] = 
{
  &URLDecoder_methods_unhex_C_I_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* URLDecoder_methods_unhex_C_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLDecoder_method_unhex_C_I = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "unhex", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_a_unhex", // alternative name of method
  -1, // altlabelHashCode
  URLDecoder_methods_unhex_C_I_args, // the arguments
  0, //arguments count
  URLDecoder_methods_unhex_C_I_exceptions, // the declared exceptions
  URLDecoder_MetainfoWrapper::URLDecoder_method_unhex_C_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _URLDecoder_methods[] = 
{
  &URLDecoder_method_GetClass__L_acdk_lang_RClass_,
  &URLDecoder_method_URLDecoder_INLacdk_locale_REncoding_II_LRURLDecoder_,
  &URLDecoder_method_URLDecoder_INLacdk_locale_REncoding__LRURLDecoder_,
  &URLDecoder_method_URLDecoder_INLacdk_locale_REncoding_I_LRURLDecoder_,
  &URLDecoder_method_URLDecoder_II_LRURLDecoder_,
  &URLDecoder_method_URLDecoder__LRURLDecoder_,
  &URLDecoder_method_URLDecoder_I_LRURLDecoder_,
  &URLDecoder_method_decode_INLRString__LRString_,
  &URLDecoder_method_decodeToChar_INLacdk_io_RReader__I,
  &URLDecoder_method_decodeToString_INLacdk_io_RReader_I_LRString_,
  &URLDecoder_method_decodeToString_INLacdk_io_RReader__LRString_,
  &URLDecoder_method_unhex_C_I,
  0
};


struct URLDecoder_MetaInfoInitializer
{  URLDecoder_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = URLDecoder::clazzInfo();
    ci->fields =  _URLDecoder_fields;
    ci->methods =  _URLDecoder_methods;
    ci->_scopeParent = acdk_net_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
URLDecoder_MetaInfoInitializer URLDecoder_MetaInfoInitializer_staticinstance__;


struct URLDecoder_clazzInfo_ClazzAttributesResInitializer7
{
  URLDecoder_clazzInfo_ClazzAttributesResInitializer7()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&URLDecoder_methods_URLDecoder_INLacdk_locale_REncoding_II_LRURLDecoder__arg_onMalformed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)acdk::locale::CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&URLDecoder_methods_URLDecoder_INLacdk_locale_REncoding_I_LRURLDecoder__arg_onMalformed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)acdk::locale::CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&URLDecoder_methods_URLDecoder_INLacdk_locale_REncoding_II_LRURLDecoder__arg_onUnmappable, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)acdk::locale::CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&URLDecoder_methods_URLDecoder_II_LRURLDecoder__arg_onMalformed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)acdk::locale::CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&URLDecoder_methods_URLDecoder_I_LRURLDecoder__arg_onMalformed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)acdk::locale::CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&URLDecoder_methods_URLDecoder_II_LRURLDecoder__arg_onUnmappable, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)acdk::locale::CodingErrorActionMetaInf::GetEnumInfo()));
  }
};

URLDecoder_clazzInfo_ClazzAttributesResInitializer7 URLDecoder_clazzInfo_ClazzAttributesResInitializer7_instance;



} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 


//static
::acdk::lang::RObject
URLEncoder_create_array(int length)
{
  return new ObjectArrayImpl<RURLEncoder>(length);
}

//static
::acdk::lang::RObject
URLEncoder_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class URLEncoder_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLEncoder_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)URLEncoder::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLEncoder_method_URLEncoder__LRURLEncoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new URLEncoder();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLEncoder_method_URLEncoder_I_LRURLEncoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new URLEncoder((acdk::locale::CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLEncoder_method_URLEncoder_INLacdk_locale_REncoding_II_LRURLEncoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new URLEncoder(::acdk::lang::dmi::castTo< acdk::locale::REncoding>(args[0], dc), (acdk::locale::CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[1], dc), (acdk::locale::CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLEncoder_method_URLEncoder_INLacdk_locale_REncoding__LRURLEncoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new URLEncoder(::acdk::lang::dmi::castTo< acdk::locale::REncoding>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLEncoder_method_URLEncoder_INLacdk_locale_REncoding_I_LRURLEncoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new URLEncoder(::acdk::lang::dmi::castTo< acdk::locale::REncoding>(args[0], dc), (acdk::locale::CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  URLEncoder_method_URLEncoder_II_LRURLEncoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new URLEncoder((acdk::locale::CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc), (acdk::locale::CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[1], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _URLEncoder_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLEncoder_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* URLEncoder_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLEncoder_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  URLEncoder_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  URLEncoder_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  URLEncoder_MetainfoWrapper::URLEncoder_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLEncoder_methods_URLEncoder__LRURLEncoder__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* URLEncoder_methods_URLEncoder__LRURLEncoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLEncoder_method_URLEncoder__LRURLEncoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "URLEncoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  URLEncoder::clazzInfo(), // return type
  "_4_URLEncoder", // alternative name of method
  -1, // altlabelHashCode
  URLEncoder_methods_URLEncoder__LRURLEncoder__args, // the arguments
  0, //arguments count
  URLEncoder_methods_URLEncoder__LRURLEncoder__exceptions, // the declared exceptions
  URLEncoder_MetainfoWrapper::URLEncoder_method_URLEncoder__LRURLEncoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URLEncoder_methods_URLEncoder_I_LRURLEncoder__arg_onMalformed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onMalformed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLEncoder_methods_URLEncoder_I_LRURLEncoder__args[] = 
{
  &URLEncoder_methods_URLEncoder_I_LRURLEncoder__arg_onMalformed,
  0
};

::acdk::lang::dmi::ClazzInfo* URLEncoder_methods_URLEncoder_I_LRURLEncoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLEncoder_method_URLEncoder_I_LRURLEncoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "URLEncoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  URLEncoder::clazzInfo(), // return type
  "_5_URLEncoder", // alternative name of method
  -1, // altlabelHashCode
  URLEncoder_methods_URLEncoder_I_LRURLEncoder__args, // the arguments
  0, //arguments count
  URLEncoder_methods_URLEncoder_I_LRURLEncoder__exceptions, // the declared exceptions
  URLEncoder_MetainfoWrapper::URLEncoder_method_URLEncoder_I_LRURLEncoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URLEncoder_methods_URLEncoder_INLacdk_locale_REncoding_II_LRURLEncoder__arg_encoding = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "encoding", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::REncoding::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URLEncoder_methods_URLEncoder_INLacdk_locale_REncoding_II_LRURLEncoder__arg_onMalformed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onMalformed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URLEncoder_methods_URLEncoder_INLacdk_locale_REncoding_II_LRURLEncoder__arg_onUnmappable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onUnmappable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLEncoder_methods_URLEncoder_INLacdk_locale_REncoding_II_LRURLEncoder__args[] = 
{
  &URLEncoder_methods_URLEncoder_INLacdk_locale_REncoding_II_LRURLEncoder__arg_encoding,
  &URLEncoder_methods_URLEncoder_INLacdk_locale_REncoding_II_LRURLEncoder__arg_onMalformed,
  &URLEncoder_methods_URLEncoder_INLacdk_locale_REncoding_II_LRURLEncoder__arg_onUnmappable,
  0
};

::acdk::lang::dmi::ClazzInfo* URLEncoder_methods_URLEncoder_INLacdk_locale_REncoding_II_LRURLEncoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLEncoder_method_URLEncoder_INLacdk_locale_REncoding_II_LRURLEncoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "URLEncoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  URLEncoder::clazzInfo(), // return type
  "_0_URLEncoder", // alternative name of method
  -1, // altlabelHashCode
  URLEncoder_methods_URLEncoder_INLacdk_locale_REncoding_II_LRURLEncoder__args, // the arguments
  0, //arguments count
  URLEncoder_methods_URLEncoder_INLacdk_locale_REncoding_II_LRURLEncoder__exceptions, // the declared exceptions
  URLEncoder_MetainfoWrapper::URLEncoder_method_URLEncoder_INLacdk_locale_REncoding_II_LRURLEncoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URLEncoder_methods_URLEncoder_INLacdk_locale_REncoding__LRURLEncoder__arg_encoding = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "encoding", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::REncoding::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLEncoder_methods_URLEncoder_INLacdk_locale_REncoding__LRURLEncoder__args[] = 
{
  &URLEncoder_methods_URLEncoder_INLacdk_locale_REncoding__LRURLEncoder__arg_encoding,
  0
};

::acdk::lang::dmi::ClazzInfo* URLEncoder_methods_URLEncoder_INLacdk_locale_REncoding__LRURLEncoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLEncoder_method_URLEncoder_INLacdk_locale_REncoding__LRURLEncoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "URLEncoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  URLEncoder::clazzInfo(), // return type
  "_1_URLEncoder", // alternative name of method
  -1, // altlabelHashCode
  URLEncoder_methods_URLEncoder_INLacdk_locale_REncoding__LRURLEncoder__args, // the arguments
  0, //arguments count
  URLEncoder_methods_URLEncoder_INLacdk_locale_REncoding__LRURLEncoder__exceptions, // the declared exceptions
  URLEncoder_MetainfoWrapper::URLEncoder_method_URLEncoder_INLacdk_locale_REncoding__LRURLEncoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URLEncoder_methods_URLEncoder_INLacdk_locale_REncoding_I_LRURLEncoder__arg_encoding = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "encoding", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::REncoding::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URLEncoder_methods_URLEncoder_INLacdk_locale_REncoding_I_LRURLEncoder__arg_onMalformed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onMalformed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLEncoder_methods_URLEncoder_INLacdk_locale_REncoding_I_LRURLEncoder__args[] = 
{
  &URLEncoder_methods_URLEncoder_INLacdk_locale_REncoding_I_LRURLEncoder__arg_encoding,
  &URLEncoder_methods_URLEncoder_INLacdk_locale_REncoding_I_LRURLEncoder__arg_onMalformed,
  0
};

::acdk::lang::dmi::ClazzInfo* URLEncoder_methods_URLEncoder_INLacdk_locale_REncoding_I_LRURLEncoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLEncoder_method_URLEncoder_INLacdk_locale_REncoding_I_LRURLEncoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "URLEncoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  URLEncoder::clazzInfo(), // return type
  "_2_URLEncoder", // alternative name of method
  -1, // altlabelHashCode
  URLEncoder_methods_URLEncoder_INLacdk_locale_REncoding_I_LRURLEncoder__args, // the arguments
  0, //arguments count
  URLEncoder_methods_URLEncoder_INLacdk_locale_REncoding_I_LRURLEncoder__exceptions, // the declared exceptions
  URLEncoder_MetainfoWrapper::URLEncoder_method_URLEncoder_INLacdk_locale_REncoding_I_LRURLEncoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo URLEncoder_methods_URLEncoder_II_LRURLEncoder__arg_onMalformed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onMalformed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo URLEncoder_methods_URLEncoder_II_LRURLEncoder__arg_onUnmappable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onUnmappable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* URLEncoder_methods_URLEncoder_II_LRURLEncoder__args[] = 
{
  &URLEncoder_methods_URLEncoder_II_LRURLEncoder__arg_onMalformed,
  &URLEncoder_methods_URLEncoder_II_LRURLEncoder__arg_onUnmappable,
  0
};

::acdk::lang::dmi::ClazzInfo* URLEncoder_methods_URLEncoder_II_LRURLEncoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo URLEncoder_method_URLEncoder_II_LRURLEncoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "URLEncoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  URLEncoder::clazzInfo(), // return type
  "_3_URLEncoder", // alternative name of method
  -1, // altlabelHashCode
  URLEncoder_methods_URLEncoder_II_LRURLEncoder__args, // the arguments
  0, //arguments count
  URLEncoder_methods_URLEncoder_II_LRURLEncoder__exceptions, // the declared exceptions
  URLEncoder_MetainfoWrapper::URLEncoder_method_URLEncoder_II_LRURLEncoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _URLEncoder_methods[] = 
{
  &URLEncoder_method_GetClass__L_acdk_lang_RClass_,
  &URLEncoder_method_URLEncoder__LRURLEncoder_,
  &URLEncoder_method_URLEncoder_I_LRURLEncoder_,
  &URLEncoder_method_URLEncoder_INLacdk_locale_REncoding_II_LRURLEncoder_,
  &URLEncoder_method_URLEncoder_INLacdk_locale_REncoding__LRURLEncoder_,
  &URLEncoder_method_URLEncoder_INLacdk_locale_REncoding_I_LRURLEncoder_,
  &URLEncoder_method_URLEncoder_II_LRURLEncoder_,
  0
};


struct URLEncoder_MetaInfoInitializer
{  URLEncoder_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = URLEncoder::clazzInfo();
    ci->fields =  _URLEncoder_fields;
    ci->methods =  _URLEncoder_methods;
    ci->_scopeParent = acdk_net_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
URLEncoder_MetaInfoInitializer URLEncoder_MetaInfoInitializer_staticinstance__;


struct URLEncoder_clazzInfo_ClazzAttributesResInitializer8
{
  URLEncoder_clazzInfo_ClazzAttributesResInitializer8()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&URLEncoder_methods_URLEncoder_INLacdk_locale_REncoding_II_LRURLEncoder__arg_onMalformed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)acdk::locale::CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&URLEncoder_methods_URLEncoder_INLacdk_locale_REncoding_I_LRURLEncoder__arg_onMalformed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)acdk::locale::CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&URLEncoder_methods_URLEncoder_INLacdk_locale_REncoding_II_LRURLEncoder__arg_onUnmappable, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)acdk::locale::CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&URLEncoder_methods_URLEncoder_II_LRURLEncoder__arg_onMalformed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)acdk::locale::CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&URLEncoder_methods_URLEncoder_I_LRURLEncoder__arg_onMalformed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)acdk::locale::CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&URLEncoder_methods_URLEncoder_II_LRURLEncoder__arg_onUnmappable, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)acdk::locale::CodingErrorActionMetaInf::GetEnumInfo()));
  }
};

URLEncoder_clazzInfo_ClazzAttributesResInitializer8 URLEncoder_clazzInfo_ClazzAttributesResInitializer8_instance;



} // namespace acdk
} // namespace net

