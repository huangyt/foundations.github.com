// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "Authenticator.h"
#include "Config.h"
#include "ContentHandler.h"
#include "ContentHandlerFactory.h"
#include "DatagramPacket.h"
#include "DatagramSocket.h"
#include "FileNameMap.h"
#include "FileURLConnection.h"
#include "HeaderFieldHelper.h"
#include "HttpURLConnection.h"
#include "HttpURLConnectionImpl.h"
#include "InetAddress.h"
#include "InetSocketAddress.h"
#include "InetURLConnection.h"
#include "MalformedURLException.h"
#include "MimeTypeMapper.h"
#include "net.h"
#include "netsysincl.h"
#include "PasswordAuthentication.h"
#include "ProtocolException.h"
#include "ServerSocket.h"
#include "Socket.h"
#include "SocketAddress.h"
#include "SocketException.h"
#include "SocketImpl.h"
#include "SocketImplFactory.h"
#include "SocketLogConsumer.h"
#include "SocketOptions.h"
#include "TCPSocket.h"
#include "TCPSocketFactory.h"
#include "TransRateReader.h"
#include "TransRateWriter.h"
#include "UnknownServiceException.h"
#include "URL.h"
#include "URLConnection.h"
#include "URLDecoder.h"
#include "URLEncoder.h"
#include "URLEncoding.h"
#include "UrlFileSystem.h"
#include "URLInterface.h"
#include "URLStreamHandler.h"
#include "URLStreamHandlerFactory.h"

namespace acdk { 
namespace net { 

::acdk::lang::dmi::ClazzSuperInfo _Authenticator_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Authenticator_interfaces[] =
{
  &_Authenticator_super_acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* Authenticator::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "Authenticator", // name of class
  -1, // hashCode
  "acdk/net", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Authenticator_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 5, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Authenticator::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Authenticator(Authenticator::clazzInfo());

::acdk::lang::RClass
Authenticator::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Authenticator::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_addr._ref_this()); // RInetAddress _addr 
  fields.push_back((::acdk::lang::RObject*)this->_prompt._ref_this()); // RString _prompt 
  fields.push_back((::acdk::lang::RObject*)this->_protocol._ref_this()); // RString _protocol 
  fields.push_back((::acdk::lang::RObject*)this->_scheme._ref_this()); // RString _scheme 
}


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

::acdk::lang::dmi::ClazzSuperInfo* _ContentHandler_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* ContentHandler::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "ContentHandler", // name of class
  -1, // hashCode
  "acdk/net", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ContentHandler_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ContentHandler::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ContentHandler(ContentHandler::clazzInfo());

::acdk::lang::RClass
ContentHandler::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ContentHandler::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

::acdk::lang::dmi::ClazzSuperInfo* _ContentHandlerFactory_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* ContentHandlerFactory::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "ContentHandlerFactory", // name of class
  -1, // hashCode
  "acdk/net", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ContentHandlerFactory_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ContentHandlerFactory::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ContentHandlerFactory(ContentHandlerFactory::clazzInfo());

::acdk::lang::RClass
ContentHandlerFactory::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ContentHandlerFactory::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

::acdk::lang::dmi::ClazzSuperInfo _DatagramPacket_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _DatagramPacket_interfaces[] =
{
  &_DatagramPacket_super_acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramPacket::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "DatagramPacket", // name of class
  -1, // hashCode
  "acdk/net", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _DatagramPacket_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    DatagramPacket::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_DatagramPacket(DatagramPacket::clazzInfo());

::acdk::lang::RClass
DatagramPacket::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
DatagramPacket::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_address._ref_this()); // RInetSocketAddress _address 
  fields.push_back((::acdk::lang::RObject*)this->_buffer._ref_this()); // RReadWriteByteBuffer _buffer 
}


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

::acdk::lang::dmi::ClazzSuperInfo _DatagramSocket_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _DatagramSocket_interfaces[] =
{
  &_DatagramSocket_super_acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* DatagramSocket::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "DatagramSocket", // name of class
  -1, // hashCode
  "acdk/net", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _DatagramSocket_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 4, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    DatagramSocket::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_DatagramSocket(DatagramSocket::clazzInfo());

::acdk::lang::RClass
DatagramSocket::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
DatagramSocket::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_fd._ref_this()); // acdk::io::RFileDescriptor _fd 
  fields.push_back((::acdk::lang::RObject*)this->_localAddress._ref_this()); // RInetSocketAddress _localAddress 
  fields.push_back((::acdk::lang::RObject*)this->_remoteAddress._ref_this()); // RInetSocketAddress _remoteAddress 
  fields.push_back((::acdk::lang::RObject*)this->_socket._ref_this()); // RTCPSocket _socket 
}


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

::acdk::lang::dmi::ClazzSuperInfo* _FileNameMap_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileNameMap::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "FileNameMap", // name of class
  -1, // hashCode
  "acdk/net", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _FileNameMap_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    FileNameMap::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_FileNameMap(FileNameMap::clazzInfo());

::acdk::lang::RClass
FileNameMap::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
FileNameMap::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

::acdk::lang::dmi::ClazzSuperInfo _FileURLConnection_super_URLConnection =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  URLConnection::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _FileURLConnection_interfaces[] =
{
  &_FileURLConnection_super_URLConnection,
  0
};

::acdk::lang::dmi::ClazzInfo* FileURLConnection::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "FileURLConnection", // name of class
  -1, // hashCode
  "acdk/net", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _FileURLConnection_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    FileURLConnection::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_FileURLConnection(FileURLConnection::clazzInfo());

::acdk::lang::RClass
FileURLConnection::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
FileURLConnection::getCollectableFields(FieldReferences& fields)
{
  URLConnection::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->file._ref_this()); // ::acdk::io::RFile file 
}


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _HeaderFieldHelper_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _HeaderFieldHelper_interfaces[] =
{
  &_HeaderFieldHelper_super_acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* HeaderFieldHelper::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "HeaderFieldHelper", // name of class
  -1, // hashCode
  "acdk/net", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _HeaderFieldHelper_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    HeaderFieldHelper::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_HeaderFieldHelper(HeaderFieldHelper::clazzInfo());

::acdk::lang::RClass
HeaderFieldHelper::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
HeaderFieldHelper::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_headerFieldKeys._ref_this()); // RArrayList _headerFieldKeys 
  fields.push_back((::acdk::lang::RObject*)this->_headerFieldValues._ref_this()); // RArrayList _headerFieldValues 
}


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 


::acdk::lang::dmi::ClazzEnumValueInfo HttpResponceCode_HTTP_UNKNOWN = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "HTTP_UNKNOWN", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::HTTP_UNKNOWN, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo HttpResponceCode_HTTP_OK = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "HTTP_OK", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::HTTP_OK, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo HttpResponceCode_HTTP_CREATED = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "HTTP_CREATED", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::HTTP_CREATED, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo HttpResponceCode_HTTP_ACCEPTED = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "HTTP_ACCEPTED", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::HTTP_ACCEPTED, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo HttpResponceCode_HTTP_NOT_AUTHORITATIVE = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "HTTP_NOT_AUTHORITATIVE", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::HTTP_NOT_AUTHORITATIVE, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo HttpResponceCode_HTTP_NO_CONTENT = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "HTTP_NO_CONTENT", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::HTTP_NO_CONTENT, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo HttpResponceCode_HTTP_RESET = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "HTTP_RESET", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::HTTP_RESET, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo HttpResponceCode_HTTP_PARTIAL = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "HTTP_PARTIAL", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::HTTP_PARTIAL, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo HttpResponceCode_HTTP_MULT_CHOICE = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "HTTP_MULT_CHOICE", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::HTTP_MULT_CHOICE, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo HttpResponceCode_HTTP_MOVED_PERM = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "HTTP_MOVED_PERM", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::HTTP_MOVED_PERM, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo HttpResponceCode_HTTP_MOVED_TEMP = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "HTTP_MOVED_TEMP", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::HTTP_MOVED_TEMP, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo HttpResponceCode_HTTP_SEE_OTHER = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "HTTP_SEE_OTHER", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::HTTP_SEE_OTHER, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo HttpResponceCode_HTTP_NOT_MODIFIED = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "HTTP_NOT_MODIFIED", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::HTTP_NOT_MODIFIED, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo HttpResponceCode_HTTP_USE_PROXY = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "HTTP_USE_PROXY", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::HTTP_USE_PROXY, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo HttpResponceCode_HTTP_BAD_REQUEST = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "HTTP_BAD_REQUEST", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::HTTP_BAD_REQUEST, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo HttpResponceCode_HTTP_UNAUTHORIZED = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "HTTP_UNAUTHORIZED", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::HTTP_UNAUTHORIZED, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo HttpResponceCode_HTTP_PAYMENT_REQUIRED = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "HTTP_PAYMENT_REQUIRED", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::HTTP_PAYMENT_REQUIRED, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo HttpResponceCode_HTTP_FORBIDDEN = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "HTTP_FORBIDDEN", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::HTTP_FORBIDDEN, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo HttpResponceCode_HTTP_NOT_FOUND = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "HTTP_NOT_FOUND", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::HTTP_NOT_FOUND, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo HttpResponceCode_HTTP_BAD_METHOD = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "HTTP_BAD_METHOD", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::HTTP_BAD_METHOD, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo HttpResponceCode_HTTP_NOT_ACCEPTABLE = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "HTTP_NOT_ACCEPTABLE", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::HTTP_NOT_ACCEPTABLE, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo HttpResponceCode_HTTP_PROXY_AUTH = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "HTTP_PROXY_AUTH", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::HTTP_PROXY_AUTH, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo HttpResponceCode_HTTP_CLIENT_TIMEOUT = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "HTTP_CLIENT_TIMEOUT", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::HTTP_CLIENT_TIMEOUT, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo HttpResponceCode_HTTP_CONFLICT = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "HTTP_CONFLICT", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::HTTP_CONFLICT, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo HttpResponceCode_HTTP_GONE = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "HTTP_GONE", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::HTTP_GONE, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo HttpResponceCode_HTTP_LENGTH_REQUIRED = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "HTTP_LENGTH_REQUIRED", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::HTTP_LENGTH_REQUIRED, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo HttpResponceCode_HTTP_PRECON_FAILED = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "HTTP_PRECON_FAILED", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::HTTP_PRECON_FAILED, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo HttpResponceCode_HTTP_ENTITY_TOO_LARGE = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "HTTP_ENTITY_TOO_LARGE", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::HTTP_ENTITY_TOO_LARGE, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo HttpResponceCode_HTTP_REQ_TOO_LONG = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "HTTP_REQ_TOO_LONG", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::HTTP_REQ_TOO_LONG, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo HttpResponceCode_HTTP_UNSUPPORTED_TYPE = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "HTTP_UNSUPPORTED_TYPE", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::HTTP_UNSUPPORTED_TYPE, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo HttpResponceCode_HTTP_SERVER_ERROR = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "HTTP_SERVER_ERROR", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::HTTP_SERVER_ERROR, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo HttpResponceCode_HTTP_INTERNAL_ERROR = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "HTTP_INTERNAL_ERROR", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::HTTP_INTERNAL_ERROR, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo HttpResponceCode_HTTP_BAD_GATEWAY = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "HTTP_BAD_GATEWAY", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::HTTP_BAD_GATEWAY, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo HttpResponceCode_HTTP_UNAVAILABLE = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "HTTP_UNAVAILABLE", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::HTTP_UNAVAILABLE, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo HttpResponceCode_HTTP_GATEWAY_TIMEOUT = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "HTTP_GATEWAY_TIMEOUT", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::HTTP_GATEWAY_TIMEOUT, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo HttpResponceCode_HTTP_VERSION = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "HTTP_VERSION", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::HTTP_VERSION, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* HttpResponceCode_enumValues[] = {
  &HttpResponceCode_HTTP_UNKNOWN,
  &HttpResponceCode_HTTP_OK,
  &HttpResponceCode_HTTP_CREATED,
  &HttpResponceCode_HTTP_ACCEPTED,
  &HttpResponceCode_HTTP_NOT_AUTHORITATIVE,
  &HttpResponceCode_HTTP_NO_CONTENT,
  &HttpResponceCode_HTTP_RESET,
  &HttpResponceCode_HTTP_PARTIAL,
  &HttpResponceCode_HTTP_MULT_CHOICE,
  &HttpResponceCode_HTTP_MOVED_PERM,
  &HttpResponceCode_HTTP_MOVED_TEMP,
  &HttpResponceCode_HTTP_SEE_OTHER,
  &HttpResponceCode_HTTP_NOT_MODIFIED,
  &HttpResponceCode_HTTP_USE_PROXY,
  &HttpResponceCode_HTTP_BAD_REQUEST,
  &HttpResponceCode_HTTP_UNAUTHORIZED,
  &HttpResponceCode_HTTP_PAYMENT_REQUIRED,
  &HttpResponceCode_HTTP_FORBIDDEN,
  &HttpResponceCode_HTTP_NOT_FOUND,
  &HttpResponceCode_HTTP_BAD_METHOD,
  &HttpResponceCode_HTTP_NOT_ACCEPTABLE,
  &HttpResponceCode_HTTP_PROXY_AUTH,
  &HttpResponceCode_HTTP_CLIENT_TIMEOUT,
  &HttpResponceCode_HTTP_CONFLICT,
  &HttpResponceCode_HTTP_GONE,
  &HttpResponceCode_HTTP_LENGTH_REQUIRED,
  &HttpResponceCode_HTTP_PRECON_FAILED,
  &HttpResponceCode_HTTP_ENTITY_TOO_LARGE,
  &HttpResponceCode_HTTP_REQ_TOO_LONG,
  &HttpResponceCode_HTTP_UNSUPPORTED_TYPE,
  &HttpResponceCode_HTTP_SERVER_ERROR,
  &HttpResponceCode_HTTP_INTERNAL_ERROR,
  &HttpResponceCode_HTTP_BAD_GATEWAY,
  &HttpResponceCode_HTTP_UNAVAILABLE,
  &HttpResponceCode_HTTP_GATEWAY_TIMEOUT,
  &HttpResponceCode_HTTP_VERSION,
0
};

::acdk::lang::dmi::ClazzEnumInfo* HttpResponceCodeMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo HttpResponceCode_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "HttpResponceCode", // name
  -1, // hashCode
  "acdk/net", // ns
  0, // _scopeParent
  0, // _nextSibling
  HttpResponceCode_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_HttpResponceCode(&HttpResponceCode_enumInfo);

  return &HttpResponceCode_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_HttpResponceCodeEnumInfo(HttpResponceCodeMetaInf::GetEnumInfo());


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

::acdk::lang::dmi::ClazzSuperInfo _HttpURLConnection_super_URLConnection =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  URLConnection::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _HttpURLConnection_interfaces[] =
{
  &_HttpURLConnection_super_URLConnection,
  0
};

::acdk::lang::dmi::ClazzInfo* HttpURLConnection::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "HttpURLConnection", // name of class
  -1, // hashCode
  "acdk/net", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _HttpURLConnection_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    HttpURLConnection::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_HttpURLConnection(HttpURLConnection::clazzInfo());

::acdk::lang::RClass
HttpURLConnection::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
HttpURLConnection::getCollectableFields(FieldReferences& fields)
{
  URLConnection::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->method._ref_this()); // RString method 
  fields.push_back((::acdk::lang::RObject*)this->responseMessage._ref_this()); // RString responseMessage 
}


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

::acdk::lang::dmi::ClazzSuperInfo _HttpURLConnectionImpl_super_HttpURLConnection =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  HttpURLConnection::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _HttpURLConnectionImpl_interfaces[] =
{
  &_HttpURLConnectionImpl_super_HttpURLConnection,
  0
};

::acdk::lang::dmi::ClazzInfo* HttpURLConnectionImpl::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "HttpURLConnectionImpl", // name of class
  -1, // hashCode
  "acdk/net", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _HttpURLConnectionImpl_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 5, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    HttpURLConnectionImpl::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_HttpURLConnectionImpl(HttpURLConnectionImpl::clazzInfo());

::acdk::lang::RClass
HttpURLConnectionImpl::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
HttpURLConnectionImpl::getCollectableFields(FieldReferences& fields)
{
  HttpURLConnection::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->headers._ref_this()); // RHeaderFieldHelper headers 
  fields.push_back((::acdk::lang::RObject*)this->in_stream._ref_this()); // acdk::io::RReader in_stream 
  fields.push_back((::acdk::lang::RObject*)this->out_stream._ref_this()); // acdk::io::RWriter out_stream 
  fields.push_back((::acdk::lang::RObject*)this->proxy_name._ref_this()); // RString proxy_name 
  fields.push_back((::acdk::lang::RObject*)this->socket._ref_this()); // RSocket socket 
}


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

using namespace acdk::lang;
using namespace acdk::io;
::acdk::lang::dmi::ClazzSuperInfo _InetAddress_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _InetAddress_super___acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _InetAddress_interfaces[] =
{
  &_InetAddress_super___acdk__lang__Object,
  &_InetAddress_super___acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* InetAddress::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "InetAddress", // name of class
  -1, // hashCode
  "acdk/net", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _InetAddress_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    InetAddress::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_InetAddress(InetAddress::clazzInfo());

::acdk::lang::RClass
InetAddress::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
InetAddress::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_hostname._ref_this()); // RString _hostname 
  fields.push_back((::acdk::lang::RObject*)this->_ipNumber._ref_this()); // RbyteArray _ipNumber 
}


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

::acdk::lang::dmi::ClazzSuperInfo _InetSocketAddress_super_SocketAddress =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  SocketAddress::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _InetSocketAddress_super_acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _InetSocketAddress_interfaces[] =
{
  &_InetSocketAddress_super_SocketAddress,
  &_InetSocketAddress_super_acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* InetSocketAddress::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "InetSocketAddress", // name of class
  -1, // hashCode
  "acdk/net", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _InetSocketAddress_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    InetSocketAddress::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_InetSocketAddress(InetSocketAddress::clazzInfo());

::acdk::lang::RClass
InetSocketAddress::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
InetSocketAddress::getCollectableFields(FieldReferences& fields)
{
  SocketAddress::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_inetAddress._ref_this()); // RInetAddress _inetAddress 
}


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

::acdk::lang::dmi::ClazzSuperInfo _InetURLConnection_super_URLConnection =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  URLConnection::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _InetURLConnection_interfaces[] =
{
  &_InetURLConnection_super_URLConnection,
  0
};

::acdk::lang::dmi::ClazzInfo* InetURLConnection::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "InetURLConnection", // name of class
  -1, // hashCode
  "acdk/net", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _InetURLConnection_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 3, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    InetURLConnection::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_InetURLConnection(InetURLConnection::clazzInfo());

::acdk::lang::RClass
InetURLConnection::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
InetURLConnection::getCollectableFields(FieldReferences& fields)
{
  URLConnection::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_in._ref_this()); // RReader _in 
  fields.push_back((::acdk::lang::RObject*)this->_out._ref_this()); // RWriter _out 
  fields.push_back((::acdk::lang::RObject*)this->_socket._ref_this()); // RSocket _socket 
}


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

using namespace acdk::io;
::acdk::lang::dmi::ClazzSuperInfo _MalformedURLException_super_IOException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  IOException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _MalformedURLException_interfaces[] =
{
  &_MalformedURLException_super_IOException,
  0
};

::acdk::lang::dmi::ClazzInfo* MalformedURLException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "MalformedURLException", // name of class
  -1, // hashCode
  "acdk/net", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _MalformedURLException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    MalformedURLException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_MalformedURLException(MalformedURLException::clazzInfo());

::acdk::lang::RClass
MalformedURLException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
MalformedURLException::getCollectableFields(FieldReferences& fields)
{
  IOException::getCollectableFields(fields);
}


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

using namespace acdk::lang;
using namespace acdk::util;
::acdk::lang::dmi::ClazzSuperInfo _MimeTypeMapper_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _MimeTypeMapper_super_FileNameMap =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  FileNameMap::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _MimeTypeMapper_interfaces[] =
{
  &_MimeTypeMapper_super_acdk__lang__Object,
  &_MimeTypeMapper_super_FileNameMap,
  0
};

::acdk::lang::dmi::ClazzInfo* MimeTypeMapper::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "MimeTypeMapper", // name of class
  -1, // hashCode
  "acdk/net", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _MimeTypeMapper_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    MimeTypeMapper::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_MimeTypeMapper(MimeTypeMapper::clazzInfo());

::acdk::lang::RClass
MimeTypeMapper::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
MimeTypeMapper::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

::acdk::lang::dmi::ClazzSuperInfo _PasswordAuthentication_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _PasswordAuthentication_interfaces[] =
{
  &_PasswordAuthentication_super___acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* PasswordAuthentication::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "PasswordAuthentication", // name of class
  -1, // hashCode
  "acdk/net", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _PasswordAuthentication_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    PasswordAuthentication::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_PasswordAuthentication(PasswordAuthentication::clazzInfo());

::acdk::lang::RClass
PasswordAuthentication::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
PasswordAuthentication::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->password._ref_this()); // RString password 
  fields.push_back((::acdk::lang::RObject*)this->username._ref_this()); // RString username 
}


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

using namespace acdk::lang;
using namespace acdk::io;
::acdk::lang::dmi::ClazzSuperInfo _ProtocolException_super___acdk__io__IOException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::io::IOException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ProtocolException_interfaces[] =
{
  &_ProtocolException_super___acdk__io__IOException,
  0
};

::acdk::lang::dmi::ClazzInfo* ProtocolException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ProtocolException", // name of class
  -1, // hashCode
  "acdk/net", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ProtocolException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ProtocolException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ProtocolException(ProtocolException::clazzInfo());

::acdk::lang::RClass
ProtocolException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ProtocolException::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::io::, IOException)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

using namespace acdk::lang;
using namespace acdk::io;
::acdk::lang::dmi::ClazzSuperInfo _ServerSocket_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ServerSocket_interfaces[] =
{
  &_ServerSocket_super_acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* ServerSocket::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ServerSocket", // name of class
  -1, // hashCode
  "acdk/net", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ServerSocket_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ServerSocket::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ServerSocket(ServerSocket::clazzInfo());

::acdk::lang::RClass
ServerSocket::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ServerSocket::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_theSocket._ref_this()); // RSocketImpl _theSocket 
}


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

using namespace acdk::lang;
using namespace acdk::io;
::acdk::lang::dmi::ClazzSuperInfo _Socket_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Socket_interfaces[] =
{
  &_Socket_super_acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* Socket::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "Socket", // name of class
  -1, // hashCode
  "acdk/net", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Socket_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Socket::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Socket(Socket::clazzInfo());

::acdk::lang::RClass
Socket::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Socket::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_theSocket._ref_this()); // RSocketImpl _theSocket 
}


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

::acdk::lang::dmi::ClazzSuperInfo _SocketAddress_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SocketAddress_interfaces[] =
{
  &_SocketAddress_super_acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* SocketAddress::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "SocketAddress", // name of class
  -1, // hashCode
  "acdk/net", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SocketAddress_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SocketAddress::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SocketAddress(SocketAddress::clazzInfo());

::acdk::lang::RClass
SocketAddress::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SocketAddress::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _SocketException_super_acdk__io__IOException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::io::IOException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SocketException_interfaces[] =
{
  &_SocketException_super_acdk__io__IOException,
  0
};

::acdk::lang::dmi::ClazzInfo* SocketException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "SocketException", // name of class
  -1, // hashCode
  "acdk/net", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SocketException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SocketException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SocketException(SocketException::clazzInfo());

::acdk::lang::RClass
SocketException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SocketException::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::io::, IOException)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

::acdk::lang::dmi::ClazzSuperInfo _SocketImpl_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _SocketImpl_super___acdk__net__SocketOptions =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::net::SocketOptions::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SocketImpl_interfaces[] =
{
  &_SocketImpl_super___acdk__lang__Object,
  &_SocketImpl_super___acdk__net__SocketOptions,
  0
};

::acdk::lang::dmi::ClazzInfo* SocketImpl::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "SocketImpl", // name of class
  -1, // hashCode
  "acdk/net", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SocketImpl_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SocketImpl::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SocketImpl(SocketImpl::clazzInfo());

::acdk::lang::RClass
SocketImpl::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SocketImpl::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->address._ref_this()); // RInetAddress address 
  fields.push_back((::acdk::lang::RObject*)this->fd._ref_this()); // ::acdk::io::RFileDescriptor fd 
}


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo* _SocketImplFactory_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* SocketImplFactory::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "SocketImplFactory", // name of class
  -1, // hashCode
  "acdk/net", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SocketImplFactory_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SocketImplFactory::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SocketImplFactory(SocketImplFactory::clazzInfo());

::acdk::lang::RClass
SocketImplFactory::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SocketImplFactory::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

using namespace acdk::lang;
using namespace acdk::io;

::acdk::lang::dmi::ClazzEnumValueInfo SocketOption__TCP_NODELAY = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "_TCP_NODELAY", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::_TCP_NODELAY, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SocketOption__IP_MULTICAST_IF = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "_IP_MULTICAST_IF", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::_IP_MULTICAST_IF, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SocketOption__SO_BINDADDR = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "_SO_BINDADDR", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::_SO_BINDADDR, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SocketOption__SO_REUSEADDR = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "_SO_REUSEADDR", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::_SO_REUSEADDR, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SocketOption__SO_LINGER = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "_SO_LINGER", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::_SO_LINGER, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SocketOption__SO_SNDBUF = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "_SO_SNDBUF", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::_SO_SNDBUF, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SocketOption__SO_RCVBUF = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "_SO_RCVBUF", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::_SO_RCVBUF, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SocketOption__SO_TIMEOUT = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "_SO_TIMEOUT", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::_SO_TIMEOUT, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SocketOption__SO_RCVTIMEO = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "_SO_RCVTIMEO", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::_SO_RCVTIMEO, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SocketOption__SO_SNDTIMEO = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "_SO_SNDTIMEO", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::_SO_SNDTIMEO, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SocketOption__SO_KEEPALIVE = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "_SO_KEEPALIVE", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::_SO_KEEPALIVE, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SocketOption__SO_BROADCAST = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "_SO_BROADCAST", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::_SO_BROADCAST, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SocketOption__IP_TOS = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "_IP_TOS", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::_IP_TOS, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* SocketOption_enumValues[] = {
  &SocketOption__TCP_NODELAY,
  &SocketOption__IP_MULTICAST_IF,
  &SocketOption__SO_BINDADDR,
  &SocketOption__SO_REUSEADDR,
  &SocketOption__SO_LINGER,
  &SocketOption__SO_SNDBUF,
  &SocketOption__SO_RCVBUF,
  &SocketOption__SO_TIMEOUT,
  &SocketOption__SO_RCVTIMEO,
  &SocketOption__SO_SNDTIMEO,
  &SocketOption__SO_KEEPALIVE,
  &SocketOption__SO_BROADCAST,
  &SocketOption__IP_TOS,
0
};

::acdk::lang::dmi::ClazzEnumInfo* SocketOptionMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo SocketOption_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "SocketOption", // name
  -1, // hashCode
  "acdk/net", // ns
  0, // _scopeParent
  0, // _nextSibling
  SocketOption_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_SocketOption(&SocketOption_enumInfo);

  return &SocketOption_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_SocketOptionEnumInfo(SocketOptionMetaInf::GetEnumInfo());


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

using namespace acdk::lang;
using namespace acdk::io;
::acdk::lang::dmi::ClazzSuperInfo* _SocketOptions_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* SocketOptions::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "SocketOptions", // name of class
  -1, // hashCode
  "acdk/net", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SocketOptions_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SocketOptions::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SocketOptions(SocketOptions::clazzInfo());

::acdk::lang::RClass
SocketOptions::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SocketOptions::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

using namespace acdk::lang;
using namespace acdk::io;
::acdk::lang::dmi::ClazzSuperInfo _TCPSocket_super_SocketImpl =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  SocketImpl::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _TCPSocket_super_acdk__io__Reader =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::Reader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _TCPSocket_super_acdk__io__Writer =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::Writer::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _TCPSocket_super_acdk__io__Storage =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::Storage::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TCPSocket_interfaces[] =
{
  &_TCPSocket_super_SocketImpl,
  &_TCPSocket_super_acdk__io__Reader,
  &_TCPSocket_super_acdk__io__Writer,
  &_TCPSocket_super_acdk__io__Storage,
  0
};

::acdk::lang::dmi::ClazzInfo* TCPSocket::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "TCPSocket", // name of class
  -1, // hashCode
  "acdk/net", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TCPSocket_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TCPSocket::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TCPSocket(TCPSocket::clazzInfo());

::acdk::lang::RClass
TCPSocket::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TCPSocket::getCollectableFields(FieldReferences& fields)
{
  SocketImpl::getCollectableFields(fields);
}


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

using namespace acdk::lang;
using namespace acdk::io;
::acdk::lang::dmi::ClazzSuperInfo* _TransListener_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* TransListener::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "TransListener", // name of class
  -1, // hashCode
  "acdk/net", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TransListener_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TransListener::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TransListener(TransListener::clazzInfo());

::acdk::lang::RClass
TransListener::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TransListener::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

using namespace acdk::lang;
using namespace acdk::io;
::acdk::lang::dmi::ClazzSuperInfo _TransRateReader_super_acdk__io__AbstractFilterReader =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::io::AbstractFilterReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TransRateReader_interfaces[] =
{
  &_TransRateReader_super_acdk__io__AbstractFilterReader,
  0
};

::acdk::lang::dmi::ClazzInfo* TransRateReader::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "TransRateReader", // name of class
  -1, // hashCode
  "acdk/net", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TransRateReader_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TransRateReader::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TransRateReader(TransRateReader::clazzInfo());

::acdk::lang::RClass
TransRateReader::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TransRateReader::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::io::, AbstractFilterReader)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_listener._ref_this()); // RTransListener _listener 
}


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

using namespace acdk::lang;
using namespace acdk::io;
::acdk::lang::dmi::ClazzSuperInfo _TransRateWriter_super_acdk__io__AbstractFilterWriter =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::io::AbstractFilterWriter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TransRateWriter_interfaces[] =
{
  &_TransRateWriter_super_acdk__io__AbstractFilterWriter,
  0
};

::acdk::lang::dmi::ClazzInfo* TransRateWriter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "TransRateWriter", // name of class
  -1, // hashCode
  "acdk/net", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TransRateWriter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TransRateWriter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TransRateWriter(TransRateWriter::clazzInfo());

::acdk::lang::RClass
TransRateWriter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TransRateWriter::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::io::, AbstractFilterWriter)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_listener._ref_this()); // RTransListener _listener 
}


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

using namespace acdk::io;
::acdk::lang::dmi::ClazzSuperInfo _UnknownServiceException_super___acdk__io__IOException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::io::IOException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _UnknownServiceException_interfaces[] =
{
  &_UnknownServiceException_super___acdk__io__IOException,
  0
};

::acdk::lang::dmi::ClazzInfo* UnknownServiceException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "UnknownServiceException", // name of class
  -1, // hashCode
  "acdk/net", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _UnknownServiceException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    UnknownServiceException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_UnknownServiceException(UnknownServiceException::clazzInfo());

::acdk::lang::RClass
UnknownServiceException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
UnknownServiceException::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::io::, IOException)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _URL_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _URL_super___acdk__net__URLInterface =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::net::URLInterface::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _URL_interfaces[] =
{
  &_URL_super___acdk__lang__Object,
  &_URL_super___acdk__net__URLInterface,
  0
};

::acdk::lang::dmi::ClazzInfo* URL::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "URL", // name of class
  -1, // hashCode
  "acdk/net", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _URL_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 7, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    URL::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_URL(URL::clazzInfo());

::acdk::lang::RClass
URL::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
URL::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->file._ref_this()); // RString file 
  fields.push_back((::acdk::lang::RObject*)this->host._ref_this()); // RString host 
  fields.push_back((::acdk::lang::RObject*)this->password._ref_this()); // RString password 
  fields.push_back((::acdk::lang::RObject*)this->ph._ref_this()); // RURLStreamHandler ph 
  fields.push_back((::acdk::lang::RObject*)this->protocol._ref_this()); // RString protocol 
  fields.push_back((::acdk::lang::RObject*)this->ref._ref_this()); // RString ref 
  fields.push_back((::acdk::lang::RObject*)this->user._ref_this()); // RString user 
}


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _URLConnection_super_Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _URLConnection_interfaces[] =
{
  &_URLConnection_super_Object,
  0
};

::acdk::lang::dmi::ClazzInfo* URLConnection::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "URLConnection", // name of class
  -1, // hashCode
  "acdk/net", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _URLConnection_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 5, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    URLConnection::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_URLConnection(URLConnection::clazzInfo());

::acdk::lang::RClass
URLConnection::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
URLConnection::getCollectableFields(FieldReferences& fields)
{
  Object::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->req_props._ref_this()); // RHashMap req_props 
  fields.push_back((::acdk::lang::RObject*)this->url._ref_this()); // RURL url 
}


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

::acdk::lang::dmi::ClazzSuperInfo _URLDecoder_super_acdk__locale__Decoder =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::locale::Decoder::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _URLDecoder_interfaces[] =
{
  &_URLDecoder_super_acdk__locale__Decoder,
  0
};

::acdk::lang::dmi::ClazzInfo* URLDecoder::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "URLDecoder", // name of class
  -1, // hashCode
  "acdk/net", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _URLDecoder_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    URLDecoder::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_URLDecoder(URLDecoder::clazzInfo());

::acdk::lang::RClass
URLDecoder::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
URLDecoder::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::locale::, Decoder)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

::acdk::lang::dmi::ClazzSuperInfo _URLEncoder_super_acdk__locale__Encoder =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::locale::Encoder::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _URLEncoder_interfaces[] =
{
  &_URLEncoder_super_acdk__locale__Encoder,
  0
};

::acdk::lang::dmi::ClazzInfo* URLEncoder::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiNoDmiProxy, // clazz-flags
  0, //AttributesRes
  "URLEncoder", // name of class
  -1, // hashCode
  "acdk/net", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _URLEncoder_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    URLEncoder::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_URLEncoder(URLEncoder::clazzInfo());

::acdk::lang::RClass
URLEncoder::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
URLEncoder::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::locale::, Encoder)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

::acdk::lang::dmi::ClazzSuperInfo _URLEncoding_super_acdk__locale__Encoding =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::locale::Encoding::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _URLEncoding_interfaces[] =
{
  &_URLEncoding_super_acdk__locale__Encoding,
  0
};

::acdk::lang::dmi::ClazzInfo* URLEncoding::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "URLEncoding", // name of class
  -1, // hashCode
  "acdk/net", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _URLEncoding_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    URLEncoding::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_URLEncoding(URLEncoding::clazzInfo());

::acdk::lang::RClass
URLEncoding::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
URLEncoding::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::locale::, Encoding)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

::acdk::lang::dmi::ClazzSuperInfo _UrlFileImpl_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _UrlFileImpl_super___acdk__io__FileImpl =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::io::FileImpl::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _UrlFileImpl_interfaces[] =
{
  &_UrlFileImpl_super___acdk__lang__Object,
  &_UrlFileImpl_super___acdk__io__FileImpl,
  0
};

::acdk::lang::dmi::ClazzInfo* UrlFileImpl::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiNoDmiProxy, // clazz-flags
  0, //AttributesRes
  "UrlFileImpl", // name of class
  -1, // hashCode
  "acdk/net", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _UrlFileImpl_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    UrlFileImpl::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_UrlFileImpl(UrlFileImpl::clazzInfo());

::acdk::lang::RClass
UrlFileImpl::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
UrlFileImpl::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_connection._ref_this()); // RURLConnection _connection 
  fields.push_back((::acdk::lang::RObject*)this->_url._ref_this()); // RURL _url 
}


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

::acdk::lang::dmi::ClazzSuperInfo _UrlFileSystem_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _UrlFileSystem_super_acdk__io__FileSystem =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::FileSystem::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _UrlFileSystem_interfaces[] =
{
  &_UrlFileSystem_super_acdk__lang__Object,
  &_UrlFileSystem_super_acdk__io__FileSystem,
  0
};

::acdk::lang::dmi::ClazzInfo* UrlFileSystem::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "UrlFileSystem", // name of class
  -1, // hashCode
  "acdk/net", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _UrlFileSystem_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    UrlFileSystem::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_UrlFileSystem(UrlFileSystem::clazzInfo());

::acdk::lang::RClass
UrlFileSystem::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
UrlFileSystem::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_rootUrl._ref_this()); // RURL _rootUrl 
}


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

::acdk::lang::dmi::ClazzSuperInfo _UrlFileSystemFactory_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _UrlFileSystemFactory_super_acdk__io__FileSystemFactory =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::FileSystemFactory::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _UrlFileSystemFactory_interfaces[] =
{
  &_UrlFileSystemFactory_super___acdk__lang__Object,
  &_UrlFileSystemFactory_super_acdk__io__FileSystemFactory,
  0
};

::acdk::lang::dmi::ClazzInfo* UrlFileSystemFactory::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "UrlFileSystemFactory", // name of class
  -1, // hashCode
  "acdk/net", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _UrlFileSystemFactory_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    UrlFileSystemFactory::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_UrlFileSystemFactory(UrlFileSystemFactory::clazzInfo());

::acdk::lang::RClass
UrlFileSystemFactory::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
UrlFileSystemFactory::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

using namespace acdk::lang;
using namespace acdk::io;
::acdk::lang::dmi::ClazzSuperInfo* _URLInterface_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* URLInterface::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "URLInterface", // name of class
  -1, // hashCode
  "acdk/net", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _URLInterface_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    URLInterface::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_URLInterface(URLInterface::clazzInfo());

::acdk::lang::RClass
URLInterface::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
URLInterface::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

using namespace acdk::lang;
using namespace acdk::util;
::acdk::lang::dmi::ClazzSuperInfo _URLStreamHandler_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _URLStreamHandler_interfaces[] =
{
  &_URLStreamHandler_super___acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* URLStreamHandler::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "URLStreamHandler", // name of class
  -1, // hashCode
  "acdk/net", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _URLStreamHandler_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    URLStreamHandler::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_URLStreamHandler(URLStreamHandler::clazzInfo());

::acdk::lang::RClass
URLStreamHandler::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
URLStreamHandler::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace net


namespace acdk { 
namespace net { 

::acdk::lang::dmi::ClazzSuperInfo* _URLStreamHandlerFactory_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* URLStreamHandlerFactory::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "URLStreamHandlerFactory", // name of class
  -1, // hashCode
  "acdk/net", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _URLStreamHandlerFactory_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    URLStreamHandlerFactory::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_URLStreamHandlerFactory(URLStreamHandlerFactory::clazzInfo());

::acdk::lang::RClass
URLStreamHandlerFactory::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
URLStreamHandlerFactory::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace net

