// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../ftp.h"
#include "../Config.h"
#include "../ftp.h"
#include "../FTPClient.h"
#include "../FTPFileImpl.h"
#include "../FTPFileSystem.h"
#include "../FTPURLConnection.h"
#include "../FTPUrlStreamHandler.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace net { 
namespace ftp { 


//static
::acdk::lang::RObject
FTPFileSystemFactory_create_array(int length)
{
  return new ObjectArrayImpl<RFTPFileSystemFactory>(length);
}

//static
::acdk::lang::RObject
FTPFileSystemFactory_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class FTPFileSystemFactory_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FTPFileSystemFactory_method_FTPFileSystemFactory__LRFTPFileSystemFactory__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FTPFileSystemFactory();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FTPFileSystemFactory_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)FTPFileSystemFactory::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FTPFileSystemFactory_method_create_INLRString__LRFileSystem__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FTPFileSystemFactory* This = dmi_cast<FTPFileSystemFactory>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->FTPFileSystemFactory::create((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->create((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FTPFileSystemFactory_method_handleFile_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FTPFileSystemFactory* This = dmi_cast<FTPFileSystemFactory>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FTPFileSystemFactory::handleFile((RString)args[0].getObjectVar());
    else
      ret = This->handleFile((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FTPFileSystemFactory_method_isRootFileSystem__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FTPFileSystemFactory* This = dmi_cast<FTPFileSystemFactory>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FTPFileSystemFactory::isRootFileSystem();
    else
      ret = This->isRootFileSystem();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _FTPFileSystemFactory_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* FTPFileSystemFactory_methods_FTPFileSystemFactory__LRFTPFileSystemFactory__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FTPFileSystemFactory_methods_FTPFileSystemFactory__LRFTPFileSystemFactory__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FTPFileSystemFactory_method_FTPFileSystemFactory__LRFTPFileSystemFactory_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "FTPFileSystemFactory", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FTPFileSystemFactory::clazzInfo(), // return type
  "_0_FTPFileSystemFactory", // alternative name of method
  -1, // altlabelHashCode
  FTPFileSystemFactory_methods_FTPFileSystemFactory__LRFTPFileSystemFactory__args, // the arguments
  0, //arguments count
  FTPFileSystemFactory_methods_FTPFileSystemFactory__LRFTPFileSystemFactory__exceptions, // the declared exceptions
  FTPFileSystemFactory_MetainfoWrapper::FTPFileSystemFactory_method_FTPFileSystemFactory__LRFTPFileSystemFactory__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FTPFileSystemFactory_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FTPFileSystemFactory_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FTPFileSystemFactory_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  FTPFileSystemFactory_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  FTPFileSystemFactory_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  FTPFileSystemFactory_MetainfoWrapper::FTPFileSystemFactory_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FTPFileSystemFactory_methods_create_INLRString__LRFileSystem__arg_file = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "file", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FTPFileSystemFactory_methods_create_INLRString__LRFileSystem__args[] = 
{
  &FTPFileSystemFactory_methods_create_INLRString__LRFileSystem__arg_file,
  0
};

::acdk::lang::dmi::ClazzInfo* FTPFileSystemFactory_methods_create_INLRString__LRFileSystem__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FTPFileSystemFactory_method_create_INLRString__LRFileSystem_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileSystem::clazzInfo(), // return type
  "_3_create", // alternative name of method
  -1, // altlabelHashCode
  FTPFileSystemFactory_methods_create_INLRString__LRFileSystem__args, // the arguments
  0, //arguments count
  FTPFileSystemFactory_methods_create_INLRString__LRFileSystem__exceptions, // the declared exceptions
  FTPFileSystemFactory_MetainfoWrapper::FTPFileSystemFactory_method_create_INLRString__LRFileSystem__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FTPFileSystemFactory_methods_handleFile_INLRString__I_arg_file = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "file", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FTPFileSystemFactory_methods_handleFile_INLRString__I_args[] = 
{
  &FTPFileSystemFactory_methods_handleFile_INLRString__I_arg_file,
  0
};

::acdk::lang::dmi::ClazzInfo* FTPFileSystemFactory_methods_handleFile_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FTPFileSystemFactory_method_handleFile_INLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "handleFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2_handleFile", // alternative name of method
  -1, // altlabelHashCode
  FTPFileSystemFactory_methods_handleFile_INLRString__I_args, // the arguments
  0, //arguments count
  FTPFileSystemFactory_methods_handleFile_INLRString__I_exceptions, // the declared exceptions
  FTPFileSystemFactory_MetainfoWrapper::FTPFileSystemFactory_method_handleFile_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FTPFileSystemFactory_methods_isRootFileSystem__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FTPFileSystemFactory_methods_isRootFileSystem__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FTPFileSystemFactory_method_isRootFileSystem__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isRootFileSystem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_isRootFileSystem", // alternative name of method
  -1, // altlabelHashCode
  FTPFileSystemFactory_methods_isRootFileSystem__Z_args, // the arguments
  0, //arguments count
  FTPFileSystemFactory_methods_isRootFileSystem__Z_exceptions, // the declared exceptions
  FTPFileSystemFactory_MetainfoWrapper::FTPFileSystemFactory_method_isRootFileSystem__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _FTPFileSystemFactory_methods[] = 
{
  &FTPFileSystemFactory_method_FTPFileSystemFactory__LRFTPFileSystemFactory_,
  &FTPFileSystemFactory_method_GetClass__L_acdk_lang_RClass_,
  &FTPFileSystemFactory_method_create_INLRString__LRFileSystem_,
  &FTPFileSystemFactory_method_handleFile_INLRString__I,
  &FTPFileSystemFactory_method_isRootFileSystem__Z,
  0
};


struct FTPFileSystemFactory_MetaInfoInitializer
{  FTPFileSystemFactory_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = FTPFileSystemFactory::clazzInfo();
    ci->fields =  _FTPFileSystemFactory_fields;
    ci->methods =  _FTPFileSystemFactory_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
FTPFileSystemFactory_MetaInfoInitializer FTPFileSystemFactory_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace net
} // namespace ftp


namespace acdk { 
namespace net { 
namespace ftp { 


//static
::acdk::lang::RObject
FTPURLStreamHandler_create_array(int length)
{
  return new ObjectArrayImpl<RFTPURLStreamHandler>(length);
}

//static
::acdk::lang::RObject
FTPURLStreamHandler_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class FTPURLStreamHandler_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FTPURLStreamHandler_method_FTPURLStreamHandler__LRFTPURLStreamHandler__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FTPURLStreamHandler();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FTPURLStreamHandler_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)FTPURLStreamHandler::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FTPURLStreamHandler_method_createInstance__Lacdk_net_RURLStreamHandler__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FTPURLStreamHandler* This = dmi_cast<FTPURLStreamHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->FTPURLStreamHandler::createInstance();
    else
        ret = (::acdk::lang::RObject)This->createInstance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FTPURLStreamHandler_method_openConnection_INLacdk_net_RURL__Lacdk_net_RURLConnection__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FTPURLStreamHandler* This = dmi_cast<FTPURLStreamHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->FTPURLStreamHandler::openConnection((acdk::net::RURL)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->openConnection((acdk::net::RURL)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FTPURLStreamHandler_method_parseURL_INLRURL_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FTPURLStreamHandler* This = dmi_cast<FTPURLStreamHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FTPURLStreamHandler::parseURL((RURL)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        This->parseURL((RURL)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _FTPURLStreamHandler_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* FTPURLStreamHandler_methods_FTPURLStreamHandler__LRFTPURLStreamHandler__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FTPURLStreamHandler_methods_FTPURLStreamHandler__LRFTPURLStreamHandler__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FTPURLStreamHandler_method_FTPURLStreamHandler__LRFTPURLStreamHandler_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "FTPURLStreamHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FTPURLStreamHandler::clazzInfo(), // return type
  "_0_FTPURLStreamHandler", // alternative name of method
  -1, // altlabelHashCode
  FTPURLStreamHandler_methods_FTPURLStreamHandler__LRFTPURLStreamHandler__args, // the arguments
  0, //arguments count
  FTPURLStreamHandler_methods_FTPURLStreamHandler__LRFTPURLStreamHandler__exceptions, // the declared exceptions
  FTPURLStreamHandler_MetainfoWrapper::FTPURLStreamHandler_method_FTPURLStreamHandler__LRFTPURLStreamHandler__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FTPURLStreamHandler_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FTPURLStreamHandler_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FTPURLStreamHandler_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  FTPURLStreamHandler_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  FTPURLStreamHandler_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  FTPURLStreamHandler_MetainfoWrapper::FTPURLStreamHandler_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FTPURLStreamHandler_methods_createInstance__Lacdk_net_RURLStreamHandler__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FTPURLStreamHandler_methods_createInstance__Lacdk_net_RURLStreamHandler__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FTPURLStreamHandler_method_createInstance__Lacdk_net_RURLStreamHandler_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createInstance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::net::RURLStreamHandler::clazzInfo(), // return type
  "_3_createInstance", // alternative name of method
  -1, // altlabelHashCode
  FTPURLStreamHandler_methods_createInstance__Lacdk_net_RURLStreamHandler__args, // the arguments
  0, //arguments count
  FTPURLStreamHandler_methods_createInstance__Lacdk_net_RURLStreamHandler__exceptions, // the declared exceptions
  FTPURLStreamHandler_MetainfoWrapper::FTPURLStreamHandler_method_createInstance__Lacdk_net_RURLStreamHandler__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FTPURLStreamHandler_methods_openConnection_INLacdk_net_RURL__Lacdk_net_RURLConnection__arg_url = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "url", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::net::RURL::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FTPURLStreamHandler_methods_openConnection_INLacdk_net_RURL__Lacdk_net_RURLConnection__args[] = 
{
  &FTPURLStreamHandler_methods_openConnection_INLacdk_net_RURL__Lacdk_net_RURLConnection__arg_url,
  0
};

::acdk::lang::dmi::ClazzInfo* FTPURLStreamHandler_methods_openConnection_INLacdk_net_RURL__Lacdk_net_RURLConnection__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FTPURLStreamHandler_method_openConnection_INLacdk_net_RURL__Lacdk_net_RURLConnection_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "openConnection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::net::RURLConnection::clazzInfo(), // return type
  "_2_openConnection", // alternative name of method
  -1, // altlabelHashCode
  FTPURLStreamHandler_methods_openConnection_INLacdk_net_RURL__Lacdk_net_RURLConnection__args, // the arguments
  0, //arguments count
  FTPURLStreamHandler_methods_openConnection_INLacdk_net_RURL__Lacdk_net_RURLConnection__exceptions, // the declared exceptions
  FTPURLStreamHandler_MetainfoWrapper::FTPURLStreamHandler_method_openConnection_INLacdk_net_RURL__Lacdk_net_RURLConnection__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FTPURLStreamHandler_methods_parseURL_INLRURL_INLRString__V_arg_url = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "url", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RURL::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FTPURLStreamHandler_methods_parseURL_INLRURL_INLRString__V_arg_url_string = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "url_string", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FTPURLStreamHandler_methods_parseURL_INLRURL_INLRString__V_args[] = 
{
  &FTPURLStreamHandler_methods_parseURL_INLRURL_INLRString__V_arg_url,
  &FTPURLStreamHandler_methods_parseURL_INLRURL_INLRString__V_arg_url_string,
  0
};

::acdk::lang::dmi::ClazzInfo* FTPURLStreamHandler_methods_parseURL_INLRURL_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FTPURLStreamHandler_method_parseURL_INLRURL_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parseURL", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_parseURL", // alternative name of method
  -1, // altlabelHashCode
  FTPURLStreamHandler_methods_parseURL_INLRURL_INLRString__V_args, // the arguments
  0, //arguments count
  FTPURLStreamHandler_methods_parseURL_INLRURL_INLRString__V_exceptions, // the declared exceptions
  FTPURLStreamHandler_MetainfoWrapper::FTPURLStreamHandler_method_parseURL_INLRURL_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _FTPURLStreamHandler_methods[] = 
{
  &FTPURLStreamHandler_method_FTPURLStreamHandler__LRFTPURLStreamHandler_,
  &FTPURLStreamHandler_method_GetClass__L_acdk_lang_RClass_,
  &FTPURLStreamHandler_method_createInstance__Lacdk_net_RURLStreamHandler_,
  &FTPURLStreamHandler_method_openConnection_INLacdk_net_RURL__Lacdk_net_RURLConnection_,
  &FTPURLStreamHandler_method_parseURL_INLRURL_INLRString__V,
  0
};


struct FTPURLStreamHandler_MetaInfoInitializer
{  FTPURLStreamHandler_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = FTPURLStreamHandler::clazzInfo();
    ci->fields =  _FTPURLStreamHandler_fields;
    ci->methods =  _FTPURLStreamHandler_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
FTPURLStreamHandler_MetaInfoInitializer FTPURLStreamHandler_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace net
} // namespace ftp


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) ftp_dummyExportFunc() {}
#endif

