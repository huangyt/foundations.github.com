// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "Config.h"
#include "FileInfo.h"
#include "Message.h"
#include "ObjectLogReader.h"
#include "ObjectLogWriter.h"
#include "SRFileImpl.h"
#include "SRFileSystemClient.h"
#include "SRFileSystemServer.h"
#include "srfsys.h"

namespace acdk { 
namespace net { 
namespace srfsys { 

::acdk::lang::dmi::ClazzSuperInfo _FileInfo_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _FileInfo_super___acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _FileInfo_super___acdk__lang__Comparable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::lang::Comparable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _FileInfo_interfaces[] =
{
  &_FileInfo_super___acdk__lang__Object,
  &_FileInfo_super___acdk__io__Serializable,
  &_FileInfo_super___acdk__lang__Comparable,
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "FileInfo", // name of class
  -1, // hashCode
  "acdk/net/srfsys", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _FileInfo_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    FileInfo::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_FileInfo(FileInfo::clazzInfo());

::acdk::lang::RClass
FileInfo::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
FileInfo::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->dir._ref_this()); // RString dir 
  fields.push_back((::acdk::lang::RObject*)this->name._ref_this()); // RString name 
}


} // namespace acdk
} // namespace net
} // namespace srfsys


namespace acdk { 
namespace net { 
namespace srfsys { 


::acdk::lang::dmi::ClazzEnumValueInfo MessageCommand_Unknown = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "Unknown", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::srfsys::Unknown, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo MessageCommand_MsgLogin = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "MsgLogin", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::srfsys::MsgLogin, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo MessageCommand_MsgReplyMessage = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "MsgReplyMessage", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::srfsys::MsgReplyMessage, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo MessageCommand_MsgGetDirList = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "MsgGetDirList", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::srfsys::MsgGetDirList, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo MessageCommand_MsgReturnDirList = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "MsgReturnDirList", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::srfsys::MsgReturnDirList, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo MessageCommand_MsgFileOp = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "MsgFileOp", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::srfsys::MsgFileOp, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo MessageCommand_MsgAdmin = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "MsgAdmin", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::srfsys::MsgAdmin, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo MessageCommand_MsgException = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "MsgException", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::srfsys::MsgException, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* MessageCommand_enumValues[] = {
  &MessageCommand_Unknown,
  &MessageCommand_MsgLogin,
  &MessageCommand_MsgReplyMessage,
  &MessageCommand_MsgGetDirList,
  &MessageCommand_MsgReturnDirList,
  &MessageCommand_MsgFileOp,
  &MessageCommand_MsgAdmin,
  &MessageCommand_MsgException,
0
};

::acdk::lang::dmi::ClazzEnumInfo* MessageCommandMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo MessageCommand_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "MessageCommand", // name
  -1, // hashCode
  "acdk/net/srfsys", // ns
  0, // _scopeParent
  0, // _nextSibling
  MessageCommand_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_MessageCommand(&MessageCommand_enumInfo);

  return &MessageCommand_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_MessageCommandEnumInfo(MessageCommandMetaInf::GetEnumInfo());


} // namespace acdk
} // namespace net
} // namespace srfsys


namespace acdk { 
namespace net { 
namespace srfsys { 


::acdk::lang::dmi::ClazzEnumValueInfo FileOp_FileNop = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "FileNop", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::srfsys::FileNop, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo FileOp_FileDelete = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "FileDelete", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::srfsys::FileDelete, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo FileOp_FileSend = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "FileSend", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::srfsys::FileSend, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo FileOp_FileReceive = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "FileReceive", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::srfsys::FileReceive, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo FileOp_FileMove = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "FileMove", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::srfsys::FileMove, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* FileOp_enumValues[] = {
  &FileOp_FileNop,
  &FileOp_FileDelete,
  &FileOp_FileSend,
  &FileOp_FileReceive,
  &FileOp_FileMove,
0
};

::acdk::lang::dmi::ClazzEnumInfo* FileOpMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo FileOp_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "FileOp", // name
  -1, // hashCode
  "acdk/net/srfsys", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileOp_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_FileOp(&FileOp_enumInfo);

  return &FileOp_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_FileOpEnumInfo(FileOpMetaInf::GetEnumInfo());


} // namespace acdk
} // namespace net
} // namespace srfsys


namespace acdk { 
namespace net { 
namespace srfsys { 


::acdk::lang::dmi::ClazzEnumValueInfo FopFlags_DontOverWriteExistant = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "DontOverWriteExistant", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::srfsys::DontOverWriteExistant, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* FopFlags_enumValues[] = {
  &FopFlags_DontOverWriteExistant,
0
};

::acdk::lang::dmi::ClazzEnumInfo* FopFlagsMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo FopFlags_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "FopFlags", // name
  -1, // hashCode
  "acdk/net/srfsys", // ns
  0, // _scopeParent
  0, // _nextSibling
  FopFlags_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_FopFlags(&FopFlags_enumInfo);

  return &FopFlags_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_FopFlagsEnumInfo(FopFlagsMetaInf::GetEnumInfo());


} // namespace acdk
} // namespace net
} // namespace srfsys


namespace acdk { 
namespace net { 
namespace srfsys { 


::acdk::lang::dmi::ClazzEnumValueInfo AdminCommand_AdminCmdNop = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "AdminCmdNop", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::srfsys::AdminCmdNop, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo AdminCommand_AdminDisconnect = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "AdminDisconnect", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::srfsys::AdminDisconnect, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo AdminCommand_AdminCmdShutdown = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "AdminCmdShutdown", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::srfsys::AdminCmdShutdown, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo AdminCommand_AdminCmdPing = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "AdminCmdPing", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::net::srfsys::AdminCmdPing, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* AdminCommand_enumValues[] = {
  &AdminCommand_AdminCmdNop,
  &AdminCommand_AdminDisconnect,
  &AdminCommand_AdminCmdShutdown,
  &AdminCommand_AdminCmdPing,
0
};

::acdk::lang::dmi::ClazzEnumInfo* AdminCommandMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo AdminCommand_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "AdminCommand", // name
  -1, // hashCode
  "acdk/net/srfsys", // ns
  0, // _scopeParent
  0, // _nextSibling
  AdminCommand_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_AdminCommand(&AdminCommand_enumInfo);

  return &AdminCommand_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_AdminCommandEnumInfo(AdminCommandMetaInf::GetEnumInfo());


} // namespace acdk
} // namespace net
} // namespace srfsys


namespace acdk { 
namespace net { 
namespace srfsys { 

::acdk::lang::dmi::ClazzSuperInfo _Message_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Message_super___acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Message_interfaces[] =
{
  &_Message_super___acdk__lang__Object,
  &_Message_super___acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* Message::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "Message", // name of class
  -1, // hashCode
  "acdk/net/srfsys", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Message_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Message::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Message(Message::clazzInfo());

::acdk::lang::RClass
Message::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Message::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace net
} // namespace srfsys


namespace acdk { 
namespace net { 
namespace srfsys { 

::acdk::lang::dmi::ClazzSuperInfo _LoginMessage_super_Message =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Message::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _LoginMessage_interfaces[] =
{
  &_LoginMessage_super_Message,
  0
};

::acdk::lang::dmi::ClazzInfo* LoginMessage::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "LoginMessage", // name of class
  -1, // hashCode
  "acdk/net/srfsys", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _LoginMessage_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    LoginMessage::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_LoginMessage(LoginMessage::clazzInfo());

::acdk::lang::RClass
LoginMessage::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
LoginMessage::getCollectableFields(FieldReferences& fields)
{
  Message::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->pass._ref_this()); // RString pass 
  fields.push_back((::acdk::lang::RObject*)this->user._ref_this()); // RString user 
}


} // namespace acdk
} // namespace net
} // namespace srfsys


namespace acdk { 
namespace net { 
namespace srfsys { 

::acdk::lang::dmi::ClazzSuperInfo _ReplyMessage_super_Message =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Message::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ReplyMessage_interfaces[] =
{
  &_ReplyMessage_super_Message,
  0
};

::acdk::lang::dmi::ClazzInfo* ReplyMessage::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ReplyMessage", // name of class
  -1, // hashCode
  "acdk/net/srfsys", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ReplyMessage_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ReplyMessage::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ReplyMessage(ReplyMessage::clazzInfo());

::acdk::lang::RClass
ReplyMessage::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ReplyMessage::getCollectableFields(FieldReferences& fields)
{
  Message::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->message._ref_this()); // RString message 
}


} // namespace acdk
} // namespace net
} // namespace srfsys


namespace acdk { 
namespace net { 
namespace srfsys { 

::acdk::lang::dmi::ClazzSuperInfo _GetDirMessage_super_Message =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Message::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _GetDirMessage_interfaces[] =
{
  &_GetDirMessage_super_Message,
  0
};

::acdk::lang::dmi::ClazzInfo* GetDirMessage::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "GetDirMessage", // name of class
  -1, // hashCode
  "acdk/net/srfsys", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _GetDirMessage_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    GetDirMessage::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_GetDirMessage(GetDirMessage::clazzInfo());

::acdk::lang::RClass
GetDirMessage::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
GetDirMessage::getCollectableFields(FieldReferences& fields)
{
  Message::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->path._ref_this()); // RString path 
}


} // namespace acdk
} // namespace net
} // namespace srfsys


namespace acdk { 
namespace net { 
namespace srfsys { 

::acdk::lang::dmi::ClazzSuperInfo _ReturnDirMessage_super_ReplyMessage =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ReplyMessage::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ReturnDirMessage_interfaces[] =
{
  &_ReturnDirMessage_super_ReplyMessage,
  0
};

::acdk::lang::dmi::ClazzInfo* ReturnDirMessage::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ReturnDirMessage", // name of class
  -1, // hashCode
  "acdk/net/srfsys", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ReturnDirMessage_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ReturnDirMessage::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ReturnDirMessage(ReturnDirMessage::clazzInfo());

::acdk::lang::RClass
ReturnDirMessage::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ReturnDirMessage::getCollectableFields(FieldReferences& fields)
{
  ReplyMessage::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->files._ref_this()); // RFileInfoArray files 
  fields.push_back((::acdk::lang::RObject*)this->path._ref_this()); // RString path 
}


} // namespace acdk
} // namespace net
} // namespace srfsys


namespace acdk { 
namespace net { 
namespace srfsys { 

::acdk::lang::dmi::ClazzSuperInfo _FileOpMessage_super_Message =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Message::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _FileOpMessage_interfaces[] =
{
  &_FileOpMessage_super_Message,
  0
};

::acdk::lang::dmi::ClazzInfo* FileOpMessage::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "FileOpMessage", // name of class
  -1, // hashCode
  "acdk/net/srfsys", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _FileOpMessage_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    FileOpMessage::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_FileOpMessage(FileOpMessage::clazzInfo());

::acdk::lang::RClass
FileOpMessage::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
FileOpMessage::getCollectableFields(FieldReferences& fields)
{
  Message::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->data._ref_this()); // RbyteArray data 
  fields.push_back((::acdk::lang::RObject*)this->file._ref_this()); // RFileInfo file 
}


} // namespace acdk
} // namespace net
} // namespace srfsys


namespace acdk { 
namespace net { 
namespace srfsys { 

::acdk::lang::dmi::ClazzSuperInfo _AdminMessage_super_Message =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Message::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _AdminMessage_interfaces[] =
{
  &_AdminMessage_super_Message,
  0
};

::acdk::lang::dmi::ClazzInfo* AdminMessage::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "AdminMessage", // name of class
  -1, // hashCode
  "acdk/net/srfsys", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _AdminMessage_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    AdminMessage::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_AdminMessage(AdminMessage::clazzInfo());

::acdk::lang::RClass
AdminMessage::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
AdminMessage::getCollectableFields(FieldReferences& fields)
{
  Message::getCollectableFields(fields);
}


} // namespace acdk
} // namespace net
} // namespace srfsys


namespace acdk { 
namespace net { 
namespace srfsys { 

::acdk::lang::dmi::ClazzSuperInfo _ExceptionMessage_super_ReplyMessage =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ReplyMessage::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ExceptionMessage_interfaces[] =
{
  &_ExceptionMessage_super_ReplyMessage,
  0
};

::acdk::lang::dmi::ClazzInfo* ExceptionMessage::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ExceptionMessage", // name of class
  -1, // hashCode
  "acdk/net/srfsys", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ExceptionMessage_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ExceptionMessage::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ExceptionMessage(ExceptionMessage::clazzInfo());

::acdk::lang::RClass
ExceptionMessage::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ExceptionMessage::getCollectableFields(FieldReferences& fields)
{
  ReplyMessage::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->exception._ref_this()); // RThrowable exception 
}


} // namespace acdk
} // namespace net
} // namespace srfsys


namespace acdk { 
namespace net { 
namespace srfsys { 

::acdk::lang::dmi::ClazzSuperInfo _SRFileSystemClient_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _SRFileSystemClient_super___acdk__io__FileSystem =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::io::FileSystem::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SRFileSystemClient_interfaces[] =
{
  &_SRFileSystemClient_super___acdk__lang__Object,
  &_SRFileSystemClient_super___acdk__io__FileSystem,
  0
};

::acdk::lang::dmi::ClazzInfo* SRFileSystemClient::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "SRFileSystemClient", // name of class
  -1, // hashCode
  "acdk/net/srfsys", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SRFileSystemClient_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 9, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SRFileSystemClient::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SRFileSystemClient(SRFileSystemClient::clazzInfo());

::acdk::lang::RClass
SRFileSystemClient::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SRFileSystemClient::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_bin._ref_this()); // ::acdk::io::RObjectReader _bin 
  fields.push_back((::acdk::lang::RObject*)this->_bout._ref_this()); // ::acdk::io::RObjectWriter _bout 
  fields.push_back((::acdk::lang::RObject*)this->_files._ref_this()); // RFileInfoArray _files 
  fields.push_back((::acdk::lang::RObject*)this->_host._ref_this()); // RString _host 
  fields.push_back((::acdk::lang::RObject*)this->_root._ref_this()); // RString _root 
  fields.push_back((::acdk::lang::RObject*)this->_server._ref_this()); // ::acdk::net::RSocket _server 
  fields.push_back((::acdk::lang::RObject*)this->_transReader._ref_this()); // ::acdk::net::RTransRateReader _transReader 
  fields.push_back((::acdk::lang::RObject*)this->_transWriter._ref_this()); // ::acdk::net::RTransRateWriter _transWriter 
}


} // namespace acdk
} // namespace net
} // namespace srfsys

