// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "Config.h"
#include "HTTPSUrlStreamHandler.h"
#include "SSLSocket.h"

namespace acdkx { 
namespace net { 
namespace ssl { 

::acdk::lang::dmi::ClazzSuperInfo _HTTPSUrlConnection_super_acdk__net__HttpURLConnectionImpl =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::net::HttpURLConnectionImpl::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _HTTPSUrlConnection_interfaces[] =
{
  &_HTTPSUrlConnection_super_acdk__net__HttpURLConnectionImpl,
  0
};

::acdk::lang::dmi::ClazzInfo* HTTPSUrlConnection::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "HTTPSUrlConnection", // name of class
  -1, // hashCode
  "acdkx/net/ssl", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _HTTPSUrlConnection_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // user defined info
  0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_HTTPSUrlConnection(HTTPSUrlConnection::clazzInfo());

::acdk::lang::RClass
HTTPSUrlConnection::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
HTTPSUrlConnection::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::net::, HttpURLConnectionImpl)::getCollectableFields(fields);
}


} // namespace acdkx
} // namespace net
} // namespace ssl


namespace acdkx { 
namespace net { 
namespace ssl { 

::acdk::lang::dmi::ClazzSuperInfo _HTTPSUrlStreamHandler_super_acdk__net__URLStreamHandler =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::net::URLStreamHandler::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _HTTPSUrlStreamHandler_interfaces[] =
{
  &_HTTPSUrlStreamHandler_super_acdk__net__URLStreamHandler,
  0
};

::acdk::lang::dmi::ClazzInfo* HTTPSUrlStreamHandler::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "HTTPSUrlStreamHandler", // name of class
  -1, // hashCode
  "acdkx/net/ssl", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _HTTPSUrlStreamHandler_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // user defined info
  0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_HTTPSUrlStreamHandler(HTTPSUrlStreamHandler::clazzInfo());

::acdk::lang::RClass
HTTPSUrlStreamHandler::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
HTTPSUrlStreamHandler::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::net::, URLStreamHandler)::getCollectableFields(fields);
}


} // namespace acdkx
} // namespace net
} // namespace ssl


namespace acdkx { 
namespace net { 
namespace ssl { 

::acdk::lang::dmi::ClazzSuperInfo _HTTPSUrlStreamHandlerFactory_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _HTTPSUrlStreamHandlerFactory_super_acdk__net__URLStreamHandlerFactory =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::net::URLStreamHandlerFactory::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _HTTPSUrlStreamHandlerFactory_interfaces[] =
{
  &_HTTPSUrlStreamHandlerFactory_super_acdk__lang__Object,
  &_HTTPSUrlStreamHandlerFactory_super_acdk__net__URLStreamHandlerFactory,
  0
};

::acdk::lang::dmi::ClazzInfo* HTTPSUrlStreamHandlerFactory::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "HTTPSUrlStreamHandlerFactory", // name of class
  -1, // hashCode
  "acdkx/net/ssl", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _HTTPSUrlStreamHandlerFactory_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  &HTTPSUrlStreamHandlerFactory::create_instance, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // user defined info
  0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_HTTPSUrlStreamHandlerFactory(HTTPSUrlStreamHandlerFactory::clazzInfo());

::acdk::lang::RClass
HTTPSUrlStreamHandlerFactory::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
HTTPSUrlStreamHandlerFactory::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdkx
} // namespace net
} // namespace ssl


namespace acdkx { 
namespace net { 
namespace ssl { 

::acdk::lang::dmi::ClazzSuperInfo _SSLSocket_super_Socket =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Socket::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SSLSocket_interfaces[] =
{
  &_SSLSocket_super_Socket,
  0
};

::acdk::lang::dmi::ClazzInfo* SSLSocket::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "SSLSocket", // name of class
  -1, // hashCode
  "acdkx/net/ssl", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SSLSocket_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // user defined info
  0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SSLSocket(SSLSocket::clazzInfo());

::acdk::lang::RClass
SSLSocket::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SSLSocket::getCollectableFields(FieldReferences& fields)
{
  Socket::getCollectableFields(fields);
}


} // namespace acdkx
} // namespace net
} // namespace ssl

