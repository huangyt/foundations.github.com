// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "ServerSocketFactory.h"
#include "SocketFactory.h"

namespace acdkx { 
namespace net { 

::acdk::lang::dmi::ClazzSuperInfo _ServerSocketFactory_super_Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ServerSocketFactory_interfaces[] =
{
  &_ServerSocketFactory_super_Object,
  0
};

::acdk::lang::dmi::ClazzInfo* ServerSocketFactory::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "ServerSocketFactory", // name of class
  "acdkx/net", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  _ServerSocketFactory_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // user defined info
  0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ServerSocketFactory(ServerSocketFactory::clazzInfo());

::acdk::lang::RClass
ServerSocketFactory::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ServerSocketFactory::getCollectableFields(FieldReferences& fields)
{
  Object::getCollectableFields(fields);
}


} // namespace acdkx
} // namespace net


namespace acdkx { 
namespace net { 

::acdk::lang::dmi::ClazzSuperInfo _SocketFactory_super_Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SocketFactory_interfaces[] =
{
  &_SocketFactory_super_Object,
  0
};

::acdk::lang::dmi::ClazzInfo* SocketFactory::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "SocketFactory", // name of class
  "acdkx/net", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  _SocketFactory_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // user defined info
  0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SocketFactory(SocketFactory::clazzInfo());

::acdk::lang::RClass
SocketFactory::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SocketFactory::getCollectableFields(FieldReferences& fields)
{
  Object::getCollectableFields(fields);
}


} // namespace acdkx
} // namespace net

