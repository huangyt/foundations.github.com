// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../rmi.h"
#include "../Config.h"
#include "../Naming.h"
#include "../Remote.h"
#include "../rmi.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace java { 
namespace rmi { 


//static
::acdk::lang::RObject
Naming_create_array(int length)
{
  return new ObjectArrayImpl<RNaming>(length);
}

//static
::acdk::lang::RObject
Naming_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Naming_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Naming_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Naming::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Naming_method_bind_INLRString_INLRRemote__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Naming::bind((RString)args[0].getObjectVar(), (RRemote)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Naming_method_list_INLRString__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Naming::list((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Naming_method_lookup_INLRString__LRRemote__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Naming::lookup((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Naming_method_rebind_INLRString_INLRRemote__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Naming::rebind((RString)args[0].getObjectVar(), (RRemote)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Naming_method_unbind_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Naming::unbind((RString)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Naming_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Naming_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Naming_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Naming_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Naming_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Naming_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Naming_MetainfoWrapper::Naming_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Naming_methods_bind_INLRString_INLRRemote__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Naming_methods_bind_INLRString_INLRRemote__V_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRemote::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Naming_methods_bind_INLRString_INLRRemote__V_args[] = 
{
  &Naming_methods_bind_INLRString_INLRRemote__V_arg_name,
  &Naming_methods_bind_INLRString_INLRRemote__V_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* Naming_methods_bind_INLRString_INLRRemote__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Naming_method_bind_INLRString_INLRRemote__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "bind", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0_bind", // alternative name of method
  -1, // altlabelHashCode
  Naming_methods_bind_INLRString_INLRRemote__V_args, // the arguments
  0, //arguments count
  Naming_methods_bind_INLRString_INLRRemote__V_exceptions, // the declared exceptions
  Naming_MetainfoWrapper::Naming_method_bind_INLRString_INLRRemote__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Naming_methods_list_INLRString__LRStringArray__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Naming_methods_list_INLRString__LRStringArray__args[] = 
{
  &Naming_methods_list_INLRString__LRStringArray__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* Naming_methods_list_INLRString__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Naming_method_list_INLRString__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "list", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_1_list", // alternative name of method
  -1, // altlabelHashCode
  Naming_methods_list_INLRString__LRStringArray__args, // the arguments
  0, //arguments count
  Naming_methods_list_INLRString__LRStringArray__exceptions, // the declared exceptions
  Naming_MetainfoWrapper::Naming_method_list_INLRString__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Naming_methods_lookup_INLRString__LRRemote__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Naming_methods_lookup_INLRString__LRRemote__args[] = 
{
  &Naming_methods_lookup_INLRString__LRRemote__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* Naming_methods_lookup_INLRString__LRRemote__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Naming_method_lookup_INLRString__LRRemote_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lookup", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRemote::clazzInfo(), // return type
  "_2_lookup", // alternative name of method
  -1, // altlabelHashCode
  Naming_methods_lookup_INLRString__LRRemote__args, // the arguments
  0, //arguments count
  Naming_methods_lookup_INLRString__LRRemote__exceptions, // the declared exceptions
  Naming_MetainfoWrapper::Naming_method_lookup_INLRString__LRRemote__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Naming_methods_rebind_INLRString_INLRRemote__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Naming_methods_rebind_INLRString_INLRRemote__V_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRemote::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Naming_methods_rebind_INLRString_INLRRemote__V_args[] = 
{
  &Naming_methods_rebind_INLRString_INLRRemote__V_arg_name,
  &Naming_methods_rebind_INLRString_INLRRemote__V_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* Naming_methods_rebind_INLRString_INLRRemote__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Naming_method_rebind_INLRString_INLRRemote__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "rebind", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_rebind", // alternative name of method
  -1, // altlabelHashCode
  Naming_methods_rebind_INLRString_INLRRemote__V_args, // the arguments
  0, //arguments count
  Naming_methods_rebind_INLRString_INLRRemote__V_exceptions, // the declared exceptions
  Naming_MetainfoWrapper::Naming_method_rebind_INLRString_INLRRemote__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Naming_methods_unbind_INLRString__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Naming_methods_unbind_INLRString__V_args[] = 
{
  &Naming_methods_unbind_INLRString__V_arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* Naming_methods_unbind_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Naming_method_unbind_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "unbind", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_unbind", // alternative name of method
  -1, // altlabelHashCode
  Naming_methods_unbind_INLRString__V_args, // the arguments
  0, //arguments count
  Naming_methods_unbind_INLRString__V_exceptions, // the declared exceptions
  Naming_MetainfoWrapper::Naming_method_unbind_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Naming_methods[] = 
{
  &Naming_method_GetClass__L_acdk_lang_RClass_,
  &Naming_method_bind_INLRString_INLRRemote__V,
  &Naming_method_list_INLRString__LRStringArray_,
  &Naming_method_lookup_INLRString__LRRemote_,
  &Naming_method_rebind_INLRString_INLRRemote__V,
  &Naming_method_unbind_INLRString__V,
  0
};


struct Naming_MetaInfoInitializer
{  Naming_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Naming::clazzInfo();
    ci->fields =  _Naming_fields;
    ci->methods =  _Naming_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Naming_MetaInfoInitializer Naming_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace java
} // namespace rmi


namespace acdk { 
namespace java { 
namespace rmi { 


//static
::acdk::lang::RObject
Remote_create_array(int length)
{
  return new ObjectArrayImpl<RRemote>(length);
}

//static
::acdk::lang::RObject
Remote_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Remote_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Remote_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Remote::GetClass();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Remote_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Remote_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Remote_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Remote_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_0_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Remote_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Remote_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Remote_MetainfoWrapper::Remote_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Remote_methods[] = 
{
  &Remote_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct Remote_MetaInfoInitializer
{  Remote_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Remote::clazzInfo();
    ci->fields =  _Remote_fields;
    ci->methods =  _Remote_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Remote_MetaInfoInitializer Remote_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace java
} // namespace rmi


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) rmi_dummyExportFunc() {}
#endif

