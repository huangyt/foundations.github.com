// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../odbctests.h"
#include "../dbconnect.h"
#include "../odbctests.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace tools { 
namespace odbctests { 

using namespace acdk::lang;
using namespace acdk::sql;

//static
::acdk::lang::RObject
DBConnect_create_array(int length)
{
  return new ObjectArrayImpl<RDBConnect>(length);
}

//static
::acdk::lang::RObject
DBConnect_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DBConnect_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DBConnect_method_DBConnect__LRDBConnect__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DBConnect();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DBConnect_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DBConnect::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DBConnect_method_connect_LRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DBConnect* This = dmi_cast<DBConnect>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DBConnect::connect((RString)args[0].getObjectVar());
    else
      ret = This->connect((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DBConnect_method_execute_LRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DBConnect* This = dmi_cast<DBConnect>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DBConnect::execute((RString)args[0].getObjectVar());
    else
        This->execute((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DBConnect_method_executeQuery_LRString__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DBConnect* This = dmi_cast<DBConnect>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DBConnect::executeQuery((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->executeQuery((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DBConnect_method_executeUpdate_LRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DBConnect* This = dmi_cast<DBConnect>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DBConnect::executeUpdate((RString)args[0].getObjectVar());
    else
        This->executeUpdate((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DBConnect_method_getNumberOfTestRecords__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DBConnect* This = dmi_cast<DBConnect>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DBConnect::getNumberOfTestRecords();
    else
      ret = This->getNumberOfTestRecords();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DBConnect_method_getStartTime__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DBConnect* This = dmi_cast<DBConnect>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DBConnect::getStartTime();
    else
      ret = This->getStartTime();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DBConnect_method_getStatus__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DBConnect* This = dmi_cast<DBConnect>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DBConnect::getStatus();
    else
      ret = This->getStatus();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DBConnect_method_getTestSuccessful__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DBConnect* This = dmi_cast<DBConnect>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DBConnect::getTestSuccessful();
    else
      ret = This->getTestSuccessful();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DBConnect_method_getTestTable__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DBConnect* This = dmi_cast<DBConnect>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DBConnect::getTestTable();
    else
        ret = (::acdk::lang::RObject)This->getTestTable();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DBConnect_method_getURL__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DBConnect* This = dmi_cast<DBConnect>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DBConnect::getURL();
    else
        ret = (::acdk::lang::RObject)This->getURL();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DBConnect_method_init_LRString_ILRConnection_L_acdk_io_RPrintWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DBConnect* This = dmi_cast<DBConnect>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DBConnect::init((RString)args[0].getObjectVar(), args[1].getIntVar(), (RConnection)args[2].getObjectVar(), (::acdk::io::RPrintWriter)args[3].getObjectVar());
    else
        This->init((RString)args[0].getObjectVar(), args[1].getIntVar(), (RConnection)args[2].getObjectVar(), (::acdk::io::RPrintWriter)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DBConnect_method_init_LRString_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DBConnect* This = dmi_cast<DBConnect>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DBConnect::init((RString)args[0].getObjectVar(), args[1].getIntVar());
    else
        This->init((RString)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DBConnect_method_init_LRString_ILRConnection__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DBConnect* This = dmi_cast<DBConnect>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DBConnect::init((RString)args[0].getObjectVar(), args[1].getIntVar(), (RConnection)args[2].getObjectVar());
    else
        This->init((RString)args[0].getObjectVar(), args[1].getIntVar(), (RConnection)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DBConnect_method_loadDriver_LRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DBConnect::loadDriver((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DBConnect_method_print_LRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DBConnect* This = dmi_cast<DBConnect>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DBConnect::print((RString)args[0].getObjectVar());
    else
        This->print((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DBConnect_method_println_LRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DBConnect* This = dmi_cast<DBConnect>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DBConnect::println((RString)args[0].getObjectVar());
    else
        This->println((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DBConnect_method_run__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DBConnect* This = dmi_cast<DBConnect>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DBConnect::run();
    else
        This->run();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DBConnect_method_setNumberOfTestRecords_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DBConnect* This = dmi_cast<DBConnect>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DBConnect::setNumberOfTestRecords(args[0].getIntVar());
    else
        This->setNumberOfTestRecords(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DBConnect_method_setStartTime_J_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DBConnect* This = dmi_cast<DBConnect>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DBConnect::setStartTime(args[0].getLongVar());
    else
        This->setStartTime(args[0].getLongVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DBConnect_method_setStatus_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DBConnect* This = dmi_cast<DBConnect>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DBConnect::setStatus(args[0].getBoolVar());
    else
        This->setStatus(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DBConnect_method_setTestSuccessful_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DBConnect* This = dmi_cast<DBConnect>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DBConnect::setTestSuccessful(args[0].getBoolVar());
    else
        This->setTestSuccessful(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DBConnect_method_setTestTable_LRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DBConnect* This = dmi_cast<DBConnect>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DBConnect::setTestTable((RString)args[0].getObjectVar());
    else
        This->setTestTable((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DBConnect_method_setURL_LRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DBConnect* This = dmi_cast<DBConnect>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DBConnect::setURL((RString)args[0].getObjectVar());
    else
        This->setURL((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DBConnect_fields__connection_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DBConnect* This = dmi_cast<DBConnect>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_connection, flags);
    else
      This->_connection = (RConnection)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DBConnect_fields__connectionProperties_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DBConnect* This = dmi_cast<DBConnect>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_connectionProperties, flags);
    else
      This->_connectionProperties = (::acdk::util::RProperties)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DBConnect_fields__driver_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DBConnect* This = dmi_cast<DBConnect>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_driver, flags);
    else
      This->_driver = (RDriver)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DBConnect_fields__numberOfTestRecords_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DBConnect* This = dmi_cast<DBConnect>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_numberOfTestRecords, flags);
    else
      This->_numberOfTestRecords = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DBConnect_fields__out_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DBConnect* This = dmi_cast<DBConnect>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_out, flags);
    else
      This->_out = (::acdk::io::RPrintWriter)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DBConnect_fields__sizeOfTimeStamp_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DBConnect* This = dmi_cast<DBConnect>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_sizeOfTimeStamp, flags);
    else
      This->_sizeOfTimeStamp = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DBConnect_fields__starttime_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DBConnect* This = dmi_cast<DBConnect>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_starttime, flags);
    else
      This->_starttime = var.getLongVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DBConnect_fields__status_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DBConnect* This = dmi_cast<DBConnect>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_status, flags);
    else
      This->_status = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DBConnect_fields__testSuccessful_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DBConnect* This = dmi_cast<DBConnect>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_testSuccessful, flags);
    else
      This->_testSuccessful = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DBConnect_fields__testTable_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DBConnect* This = dmi_cast<DBConnect>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_testTable, flags);
    else
      This->_testTable = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DBConnect_fields__url_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DBConnect* This = dmi_cast<DBConnect>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_url, flags);
    else
      This->_url = (RString)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo DBConnect_fields__connection = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_connection", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RConnection::clazzInfo(),
  DBConnect_MetainfoWrapper::DBConnect_fields__connection_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DBConnect_fields__connectionProperties = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_connectionProperties", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::RProperties::clazzInfo(),
  DBConnect_MetainfoWrapper::DBConnect_fields__connectionProperties_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DBConnect_fields__driver = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_driver", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDriver::clazzInfo(),
  DBConnect_MetainfoWrapper::DBConnect_fields__driver_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DBConnect_fields__numberOfTestRecords = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_numberOfTestRecords", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  DBConnect_MetainfoWrapper::DBConnect_fields__numberOfTestRecords_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DBConnect_fields__out = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_out", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::RPrintWriter::clazzInfo(),
  DBConnect_MetainfoWrapper::DBConnect_fields__out_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DBConnect_fields__sizeOfTimeStamp = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_sizeOfTimeStamp", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  DBConnect_MetainfoWrapper::DBConnect_fields__sizeOfTimeStamp_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DBConnect_fields__starttime = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_starttime", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(),
  DBConnect_MetainfoWrapper::DBConnect_fields__starttime_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DBConnect_fields__status = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_status", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  DBConnect_MetainfoWrapper::DBConnect_fields__status_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DBConnect_fields__testSuccessful = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_testSuccessful", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  DBConnect_MetainfoWrapper::DBConnect_fields__testSuccessful_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DBConnect_fields__testTable = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_testTable", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  DBConnect_MetainfoWrapper::DBConnect_fields__testTable_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DBConnect_fields__url = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_url", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  DBConnect_MetainfoWrapper::DBConnect_fields__url_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _DBConnect_fields[] = 
{
  &DBConnect_fields__connection,
  &DBConnect_fields__connectionProperties,
  &DBConnect_fields__driver,
  &DBConnect_fields__numberOfTestRecords,
  &DBConnect_fields__out,
  &DBConnect_fields__sizeOfTimeStamp,
  &DBConnect_fields__starttime,
  &DBConnect_fields__status,
  &DBConnect_fields__testSuccessful,
  &DBConnect_fields__testTable,
  &DBConnect_fields__url,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* DBConnect_methods_DBConnect__LRDBConnect__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DBConnect_methods_DBConnect__LRDBConnect__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DBConnect_method_DBConnect__LRDBConnect_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DBConnect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DBConnect::clazzInfo(), // return type
  "_4_DBConnect", // alternative name of method
  -1, // altlabelHashCode
  DBConnect_methods_DBConnect__LRDBConnect__args, // the arguments
  0, //arguments count
  DBConnect_methods_DBConnect__LRDBConnect__exceptions, // the declared exceptions
  DBConnect_MetainfoWrapper::DBConnect_method_DBConnect__LRDBConnect__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DBConnect_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DBConnect_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DBConnect_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_o_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DBConnect_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DBConnect_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DBConnect_MetainfoWrapper::DBConnect_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DBConnect_methods_connect_LRString__Z_arg_url = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "url", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DBConnect_methods_connect_LRString__Z_args[] = 
{
  &DBConnect_methods_connect_LRString__Z_arg_url,
  0
};

::acdk::lang::dmi::ClazzInfo* DBConnect_methods_connect_LRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DBConnect_method_connect_LRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "connect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_g_connect", // alternative name of method
  -1, // altlabelHashCode
  DBConnect_methods_connect_LRString__Z_args, // the arguments
  0, //arguments count
  DBConnect_methods_connect_LRString__Z_exceptions, // the declared exceptions
  DBConnect_MetainfoWrapper::DBConnect_method_connect_LRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DBConnect_methods_execute_LRString__V_arg_sql = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "sql", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DBConnect_methods_execute_LRString__V_args[] = 
{
  &DBConnect_methods_execute_LRString__V_arg_sql,
  0
};

::acdk::lang::dmi::ClazzInfo* DBConnect_methods_execute_LRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DBConnect_method_execute_LRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_h_execute", // alternative name of method
  -1, // altlabelHashCode
  DBConnect_methods_execute_LRString__V_args, // the arguments
  0, //arguments count
  DBConnect_methods_execute_LRString__V_exceptions, // the declared exceptions
  DBConnect_MetainfoWrapper::DBConnect_method_execute_LRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DBConnect_methods_executeQuery_LRString__LRResultSet__arg_sql = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "sql", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DBConnect_methods_executeQuery_LRString__LRResultSet__args[] = 
{
  &DBConnect_methods_executeQuery_LRString__LRResultSet__arg_sql,
  0
};

::acdk::lang::dmi::ClazzInfo* DBConnect_methods_executeQuery_LRString__LRResultSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DBConnect_method_executeQuery_LRString__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "executeQuery", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_j_executeQuery", // alternative name of method
  -1, // altlabelHashCode
  DBConnect_methods_executeQuery_LRString__LRResultSet__args, // the arguments
  0, //arguments count
  DBConnect_methods_executeQuery_LRString__LRResultSet__exceptions, // the declared exceptions
  DBConnect_MetainfoWrapper::DBConnect_method_executeQuery_LRString__LRResultSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DBConnect_methods_executeUpdate_LRString__V_arg_sql = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "sql", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DBConnect_methods_executeUpdate_LRString__V_args[] = 
{
  &DBConnect_methods_executeUpdate_LRString__V_arg_sql,
  0
};

::acdk::lang::dmi::ClazzInfo* DBConnect_methods_executeUpdate_LRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DBConnect_method_executeUpdate_LRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "executeUpdate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_i_executeUpdate", // alternative name of method
  -1, // altlabelHashCode
  DBConnect_methods_executeUpdate_LRString__V_args, // the arguments
  0, //arguments count
  DBConnect_methods_executeUpdate_LRString__V_exceptions, // the declared exceptions
  DBConnect_MetainfoWrapper::DBConnect_method_executeUpdate_LRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DBConnect_methods_getNumberOfTestRecords__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DBConnect_methods_getNumberOfTestRecords__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DBConnect_method_getNumberOfTestRecords__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNumberOfTestRecords", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_c_getNumberOfTestRecords", // alternative name of method
  -1, // altlabelHashCode
  DBConnect_methods_getNumberOfTestRecords__I_args, // the arguments
  0, //arguments count
  DBConnect_methods_getNumberOfTestRecords__I_exceptions, // the declared exceptions
  DBConnect_MetainfoWrapper::DBConnect_method_getNumberOfTestRecords__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DBConnect_methods_getStartTime__J_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DBConnect_methods_getStartTime__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DBConnect_method_getStartTime__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getStartTime", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_e_getStartTime", // alternative name of method
  -1, // altlabelHashCode
  DBConnect_methods_getStartTime__J_args, // the arguments
  0, //arguments count
  DBConnect_methods_getStartTime__J_exceptions, // the declared exceptions
  DBConnect_MetainfoWrapper::DBConnect_method_getStartTime__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DBConnect_methods_getStatus__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DBConnect_methods_getStatus__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DBConnect_method_getStatus__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getStatus", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_9_getStatus", // alternative name of method
  -1, // altlabelHashCode
  DBConnect_methods_getStatus__Z_args, // the arguments
  0, //arguments count
  DBConnect_methods_getStatus__Z_exceptions, // the declared exceptions
  DBConnect_MetainfoWrapper::DBConnect_method_getStatus__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DBConnect_methods_getTestSuccessful__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DBConnect_methods_getTestSuccessful__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DBConnect_method_getTestSuccessful__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTestSuccessful", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_f_getTestSuccessful", // alternative name of method
  -1, // altlabelHashCode
  DBConnect_methods_getTestSuccessful__Z_args, // the arguments
  0, //arguments count
  DBConnect_methods_getTestSuccessful__Z_exceptions, // the declared exceptions
  DBConnect_MetainfoWrapper::DBConnect_method_getTestSuccessful__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DBConnect_methods_getTestTable__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DBConnect_methods_getTestTable__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DBConnect_method_getTestTable__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTestTable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_a_getTestTable", // alternative name of method
  -1, // altlabelHashCode
  DBConnect_methods_getTestTable__LRString__args, // the arguments
  0, //arguments count
  DBConnect_methods_getTestTable__LRString__exceptions, // the declared exceptions
  DBConnect_MetainfoWrapper::DBConnect_method_getTestTable__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DBConnect_methods_getURL__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DBConnect_methods_getURL__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DBConnect_method_getURL__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getURL", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_8_getURL", // alternative name of method
  -1, // altlabelHashCode
  DBConnect_methods_getURL__LRString__args, // the arguments
  0, //arguments count
  DBConnect_methods_getURL__LRString__exceptions, // the declared exceptions
  DBConnect_MetainfoWrapper::DBConnect_method_getURL__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DBConnect_methods_init_LRString_ILRConnection_L_acdk_io_RPrintWriter__V_arg_testtable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "testtable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DBConnect_methods_init_LRString_ILRConnection_L_acdk_io_RPrintWriter__V_arg_numberOfTestRecords = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "numberOfTestRecords", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DBConnect_methods_init_LRString_ILRConnection_L_acdk_io_RPrintWriter__V_arg_connection = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "connection", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RConnection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DBConnect_methods_init_LRString_ILRConnection_L_acdk_io_RPrintWriter__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::RPrintWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DBConnect_methods_init_LRString_ILRConnection_L_acdk_io_RPrintWriter__V_args[] = 
{
  &DBConnect_methods_init_LRString_ILRConnection_L_acdk_io_RPrintWriter__V_arg_testtable,
  &DBConnect_methods_init_LRString_ILRConnection_L_acdk_io_RPrintWriter__V_arg_numberOfTestRecords,
  &DBConnect_methods_init_LRString_ILRConnection_L_acdk_io_RPrintWriter__V_arg_connection,
  &DBConnect_methods_init_LRString_ILRConnection_L_acdk_io_RPrintWriter__V_arg_out,
  0
};

::acdk::lang::dmi::ClazzInfo* DBConnect_methods_init_LRString_ILRConnection_L_acdk_io_RPrintWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DBConnect_method_init_LRString_ILRConnection_L_acdk_io_RPrintWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "init", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_init", // alternative name of method
  -1, // altlabelHashCode
  DBConnect_methods_init_LRString_ILRConnection_L_acdk_io_RPrintWriter__V_args, // the arguments
  0, //arguments count
  DBConnect_methods_init_LRString_ILRConnection_L_acdk_io_RPrintWriter__V_exceptions, // the declared exceptions
  DBConnect_MetainfoWrapper::DBConnect_method_init_LRString_ILRConnection_L_acdk_io_RPrintWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DBConnect_methods_init_LRString_I_V_arg_testtable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "testtable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DBConnect_methods_init_LRString_I_V_arg_numberOfTestRecords = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "numberOfTestRecords", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DBConnect_methods_init_LRString_I_V_args[] = 
{
  &DBConnect_methods_init_LRString_I_V_arg_testtable,
  &DBConnect_methods_init_LRString_I_V_arg_numberOfTestRecords,
  0
};

::acdk::lang::dmi::ClazzInfo* DBConnect_methods_init_LRString_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DBConnect_method_init_LRString_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "init", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_init", // alternative name of method
  -1, // altlabelHashCode
  DBConnect_methods_init_LRString_I_V_args, // the arguments
  0, //arguments count
  DBConnect_methods_init_LRString_I_V_exceptions, // the declared exceptions
  DBConnect_MetainfoWrapper::DBConnect_method_init_LRString_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DBConnect_methods_init_LRString_ILRConnection__V_arg_testtable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "testtable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DBConnect_methods_init_LRString_ILRConnection__V_arg_numberOfTestRecords = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "numberOfTestRecords", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DBConnect_methods_init_LRString_ILRConnection__V_arg_connection = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "connection", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RConnection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DBConnect_methods_init_LRString_ILRConnection__V_args[] = 
{
  &DBConnect_methods_init_LRString_ILRConnection__V_arg_testtable,
  &DBConnect_methods_init_LRString_ILRConnection__V_arg_numberOfTestRecords,
  &DBConnect_methods_init_LRString_ILRConnection__V_arg_connection,
  0
};

::acdk::lang::dmi::ClazzInfo* DBConnect_methods_init_LRString_ILRConnection__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DBConnect_method_init_LRString_ILRConnection__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "init", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_init", // alternative name of method
  -1, // altlabelHashCode
  DBConnect_methods_init_LRString_ILRConnection__V_args, // the arguments
  0, //arguments count
  DBConnect_methods_init_LRString_ILRConnection__V_exceptions, // the declared exceptions
  DBConnect_MetainfoWrapper::DBConnect_method_init_LRString_ILRConnection__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DBConnect_methods_loadDriver_LRString__V_arg_driverClassName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "driverClassName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DBConnect_methods_loadDriver_LRString__V_args[] = 
{
  &DBConnect_methods_loadDriver_LRString__V_arg_driverClassName,
  0
};

::acdk::lang::dmi::ClazzInfo* DBConnect_methods_loadDriver_LRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DBConnect_method_loadDriver_LRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "loadDriver", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_l_loadDriver", // alternative name of method
  -1, // altlabelHashCode
  DBConnect_methods_loadDriver_LRString__V_args, // the arguments
  0, //arguments count
  DBConnect_methods_loadDriver_LRString__V_exceptions, // the declared exceptions
  DBConnect_MetainfoWrapper::DBConnect_method_loadDriver_LRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DBConnect_methods_print_LRString__V_arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DBConnect_methods_print_LRString__V_args[] = 
{
  &DBConnect_methods_print_LRString__V_arg_message,
  0
};

::acdk::lang::dmi::ClazzInfo* DBConnect_methods_print_LRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DBConnect_method_print_LRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "print", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_n_print", // alternative name of method
  -1, // altlabelHashCode
  DBConnect_methods_print_LRString__V_args, // the arguments
  0, //arguments count
  DBConnect_methods_print_LRString__V_exceptions, // the declared exceptions
  DBConnect_MetainfoWrapper::DBConnect_method_print_LRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DBConnect_methods_println_LRString__V_arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DBConnect_methods_println_LRString__V_args[] = 
{
  &DBConnect_methods_println_LRString__V_arg_message,
  0
};

::acdk::lang::dmi::ClazzInfo* DBConnect_methods_println_LRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DBConnect_method_println_LRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "println", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_m_println", // alternative name of method
  -1, // altlabelHashCode
  DBConnect_methods_println_LRString__V_args, // the arguments
  0, //arguments count
  DBConnect_methods_println_LRString__V_exceptions, // the declared exceptions
  DBConnect_MetainfoWrapper::DBConnect_method_println_LRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DBConnect_methods_run__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DBConnect_methods_run__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DBConnect_method_run__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "run", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_k_run", // alternative name of method
  -1, // altlabelHashCode
  DBConnect_methods_run__V_args, // the arguments
  0, //arguments count
  DBConnect_methods_run__V_exceptions, // the declared exceptions
  DBConnect_MetainfoWrapper::DBConnect_method_run__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DBConnect_methods_setNumberOfTestRecords_I_V_arg_newVal = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "newVal", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DBConnect_methods_setNumberOfTestRecords_I_V_args[] = 
{
  &DBConnect_methods_setNumberOfTestRecords_I_V_arg_newVal,
  0
};

::acdk::lang::dmi::ClazzInfo* DBConnect_methods_setNumberOfTestRecords_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DBConnect_method_setNumberOfTestRecords_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setNumberOfTestRecords", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_setNumberOfTestRecords", // alternative name of method
  -1, // altlabelHashCode
  DBConnect_methods_setNumberOfTestRecords_I_V_args, // the arguments
  0, //arguments count
  DBConnect_methods_setNumberOfTestRecords_I_V_exceptions, // the declared exceptions
  DBConnect_MetainfoWrapper::DBConnect_method_setNumberOfTestRecords_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DBConnect_methods_setStartTime_J_V_arg_starttime = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "starttime", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DBConnect_methods_setStartTime_J_V_args[] = 
{
  &DBConnect_methods_setStartTime_J_V_arg_starttime,
  0
};

::acdk::lang::dmi::ClazzInfo* DBConnect_methods_setStartTime_J_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DBConnect_method_setStartTime_J_V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setStartTime", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_setStartTime", // alternative name of method
  -1, // altlabelHashCode
  DBConnect_methods_setStartTime_J_V_args, // the arguments
  0, //arguments count
  DBConnect_methods_setStartTime_J_V_exceptions, // the declared exceptions
  DBConnect_MetainfoWrapper::DBConnect_method_setStartTime_J_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DBConnect_methods_setStatus_Z_V_arg_stat = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "stat", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DBConnect_methods_setStatus_Z_V_args[] = 
{
  &DBConnect_methods_setStatus_Z_V_arg_stat,
  0
};

::acdk::lang::dmi::ClazzInfo* DBConnect_methods_setStatus_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DBConnect_method_setStatus_Z_V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setStatus", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0_setStatus", // alternative name of method
  -1, // altlabelHashCode
  DBConnect_methods_setStatus_Z_V_args, // the arguments
  0, //arguments count
  DBConnect_methods_setStatus_Z_V_exceptions, // the declared exceptions
  DBConnect_MetainfoWrapper::DBConnect_method_setStatus_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DBConnect_methods_setTestSuccessful_Z_V_arg_stat = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "stat", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DBConnect_methods_setTestSuccessful_Z_V_args[] = 
{
  &DBConnect_methods_setTestSuccessful_Z_V_arg_stat,
  0
};

::acdk::lang::dmi::ClazzInfo* DBConnect_methods_setTestSuccessful_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DBConnect_method_setTestSuccessful_Z_V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTestSuccessful", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_setTestSuccessful", // alternative name of method
  -1, // altlabelHashCode
  DBConnect_methods_setTestSuccessful_Z_V_args, // the arguments
  0, //arguments count
  DBConnect_methods_setTestSuccessful_Z_V_exceptions, // the declared exceptions
  DBConnect_MetainfoWrapper::DBConnect_method_setTestSuccessful_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DBConnect_methods_setTestTable_LRString__V_arg_table = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "table", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DBConnect_methods_setTestTable_LRString__V_args[] = 
{
  &DBConnect_methods_setTestTable_LRString__V_arg_table,
  0
};

::acdk::lang::dmi::ClazzInfo* DBConnect_methods_setTestTable_LRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DBConnect_method_setTestTable_LRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTestTable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_setTestTable", // alternative name of method
  -1, // altlabelHashCode
  DBConnect_methods_setTestTable_LRString__V_args, // the arguments
  0, //arguments count
  DBConnect_methods_setTestTable_LRString__V_exceptions, // the declared exceptions
  DBConnect_MetainfoWrapper::DBConnect_method_setTestTable_LRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DBConnect_methods_setURL_LRString__V_arg_url = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "url", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DBConnect_methods_setURL_LRString__V_args[] = 
{
  &DBConnect_methods_setURL_LRString__V_arg_url,
  0
};

::acdk::lang::dmi::ClazzInfo* DBConnect_methods_setURL_LRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DBConnect_method_setURL_LRString__V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setURL", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_setURL", // alternative name of method
  -1, // altlabelHashCode
  DBConnect_methods_setURL_LRString__V_args, // the arguments
  0, //arguments count
  DBConnect_methods_setURL_LRString__V_exceptions, // the declared exceptions
  DBConnect_MetainfoWrapper::DBConnect_method_setURL_LRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DBConnect_methods[] = 
{
  &DBConnect_method_DBConnect__LRDBConnect_,
  &DBConnect_method_GetClass__L_acdk_lang_RClass_,
  &DBConnect_method_connect_LRString__Z,
  &DBConnect_method_execute_LRString__V,
  &DBConnect_method_executeQuery_LRString__LRResultSet_,
  &DBConnect_method_executeUpdate_LRString__V,
  &DBConnect_method_getNumberOfTestRecords__I,
  &DBConnect_method_getStartTime__J,
  &DBConnect_method_getStatus__Z,
  &DBConnect_method_getTestSuccessful__Z,
  &DBConnect_method_getTestTable__LRString_,
  &DBConnect_method_getURL__LRString_,
  &DBConnect_method_init_LRString_ILRConnection_L_acdk_io_RPrintWriter__V,
  &DBConnect_method_init_LRString_I_V,
  &DBConnect_method_init_LRString_ILRConnection__V,
  &DBConnect_method_loadDriver_LRString__V,
  &DBConnect_method_print_LRString__V,
  &DBConnect_method_println_LRString__V,
  &DBConnect_method_run__V,
  &DBConnect_method_setNumberOfTestRecords_I_V,
  &DBConnect_method_setStartTime_J_V,
  &DBConnect_method_setStatus_Z_V,
  &DBConnect_method_setTestSuccessful_Z_V,
  &DBConnect_method_setTestTable_LRString__V,
  &DBConnect_method_setURL_LRString__V,
  0
};


struct DBConnect_MetaInfoInitializer
{  DBConnect_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DBConnect::clazzInfo();
    ci->fields =  _DBConnect_fields;
    ci->methods =  _DBConnect_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DBConnect_MetaInfoInitializer DBConnect_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace tools
} // namespace odbctests


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) odbctests_dummyExportFunc() {}
#endif

