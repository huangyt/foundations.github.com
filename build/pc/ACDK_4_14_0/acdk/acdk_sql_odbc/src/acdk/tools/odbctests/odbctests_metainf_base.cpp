// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "dbconnect.h"
#include "odbctests.h"

namespace acdk { 
namespace tools { 
namespace odbctests { 

using namespace acdk::lang;
using namespace acdk::sql;
::acdk::lang::dmi::ClazzSuperInfo _DBConnect_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _DBConnect_super_Runnable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Runnable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _DBConnect_interfaces[] =
{
  &_DBConnect_super_acdk__lang__Object,
  &_DBConnect_super_Runnable,
  0
};

::acdk::lang::dmi::ClazzInfo* DBConnect::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "DBConnect", // name of class
  -1, // hashCode
  "acdk/tools/odbctests", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _DBConnect_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 6, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    DBConnect::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_DBConnect(DBConnect::clazzInfo());

::acdk::lang::RClass
DBConnect::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
DBConnect::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_connection._ref_this()); // RConnection _connection 
  fields.push_back((::acdk::lang::RObject*)this->_connectionProperties._ref_this()); // ::acdk::util::RProperties _connectionProperties 
  fields.push_back((::acdk::lang::RObject*)this->_driver._ref_this()); // RDriver _driver 
  fields.push_back((::acdk::lang::RObject*)this->_out._ref_this()); // ::acdk::io::RPrintWriter _out 
  fields.push_back((::acdk::lang::RObject*)this->_testTable._ref_this()); // RString _testTable 
  fields.push_back((::acdk::lang::RObject*)this->_url._ref_this()); // RString _url 
}


} // namespace acdk
} // namespace tools
} // namespace odbctests

