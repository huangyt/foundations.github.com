// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "Config.h"
#include "odbc.h"
#include "ODBCArray.h"
#include "ODBCCallableStatement.h"
#include "ODBCColumn.h"
#include "ODBCConnection.h"
#include "ODBCDatabaseMetaData.h"
#include "ODBCDriver.h"
#include "ODBCHandle.h"
#include "ODBCPreparedStatement.h"
#include "ODBCResultSet.h"
#include "ODBCResultSetMetaData.h"
#include "ODBCStatement.h"

namespace acdk { 
namespace sql { 
namespace odbc { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _ODBCArray_super_Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _ODBCArray_super___acdk__sql__Array =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::sql::Array::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ODBCArray_interfaces[] =
{
  &_ODBCArray_super_Object,
  &_ODBCArray_super___acdk__sql__Array,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCArray::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ODBCArray", // name of class
  -1, // hashCode
  "acdk/sql/odbc", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ODBCArray_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ODBCArray::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ODBCArray(ODBCArray::clazzInfo());

::acdk::lang::RClass
ODBCArray::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ODBCArray::getCollectableFields(FieldReferences& fields)
{
  Object::getCollectableFields(fields);
}


} // namespace acdk
} // namespace sql
} // namespace odbc


namespace acdk { 
namespace sql { 
namespace odbc { 

using namespace acdk::lang;
using namespace acdk::sql;
::acdk::lang::dmi::ClazzSuperInfo _ODBCCallableStatement_super_ODBCPreparedStatement =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ODBCPreparedStatement::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _ODBCCallableStatement_super_CallableStatement =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  CallableStatement::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ODBCCallableStatement_interfaces[] =
{
  &_ODBCCallableStatement_super_ODBCPreparedStatement,
  &_ODBCCallableStatement_super_CallableStatement,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCCallableStatement::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ODBCCallableStatement", // name of class
  -1, // hashCode
  "acdk/sql/odbc", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ODBCCallableStatement_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ODBCCallableStatement::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ODBCCallableStatement(ODBCCallableStatement::clazzInfo());

::acdk::lang::RClass
ODBCCallableStatement::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ODBCCallableStatement::getCollectableFields(FieldReferences& fields)
{
  ODBCPreparedStatement::getCollectableFields(fields);
}


} // namespace acdk
} // namespace sql
} // namespace odbc


namespace acdk { 
namespace sql { 
namespace odbc { 

using namespace acdk::lang;

::acdk::lang::dmi::ClazzEnumValueInfo AttributeFlag_AF_invalid = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "AF_invalid", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::odbc::AF_invalid, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo AttributeFlag_AF_valid = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "AF_valid", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::odbc::AF_valid, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo AttributeFlag_AF_failed = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "AF_failed", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::odbc::AF_failed, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* AttributeFlag_enumValues[] = {
  &AttributeFlag_AF_invalid,
  &AttributeFlag_AF_valid,
  &AttributeFlag_AF_failed,
0
};

::acdk::lang::dmi::ClazzEnumInfo* AttributeFlagMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo AttributeFlag_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "AttributeFlag", // name
  -1, // hashCode
  "acdk/sql/odbc", // ns
  0, // _scopeParent
  0, // _nextSibling
  AttributeFlag_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_AttributeFlag(&AttributeFlag_enumInfo);

  return &AttributeFlag_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_AttributeFlagEnumInfo(AttributeFlagMetaInf::GetEnumInfo());


} // namespace acdk
} // namespace sql
} // namespace odbc


namespace acdk { 
namespace sql { 
namespace odbc { 

using namespace acdk::lang;

::acdk::lang::dmi::ClazzEnumValueInfo AttributeID_AI_autoIncrement = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "AI_autoIncrement", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::odbc::AI_autoIncrement, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo AttributeID_AI_caseSensitive = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "AI_caseSensitive", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::odbc::AI_caseSensitive, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo AttributeID_AI_displaySize = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "AI_displaySize", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::odbc::AI_displaySize, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo AttributeID_AI_fixedPrecScale = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "AI_fixedPrecScale", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::odbc::AI_fixedPrecScale, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo AttributeID_AI_nullable = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "AI_nullable", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::odbc::AI_nullable, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo AttributeID_AI_octetLength = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "AI_octetLength", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::odbc::AI_octetLength, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo AttributeID_AI_precision = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "AI_precision", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::odbc::AI_precision, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo AttributeID_AI_scale = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "AI_scale", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::odbc::AI_scale, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo AttributeID_AI_searchable = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "AI_searchable", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::odbc::AI_searchable, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo AttributeID_AI_columnName = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "AI_columnName", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::odbc::AI_columnName, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo AttributeID_AI_catalogName = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "AI_catalogName", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::odbc::AI_catalogName, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo AttributeID_AI_columnLabel = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "AI_columnLabel", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::odbc::AI_columnLabel, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo AttributeID_AI_schemaName = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "AI_schemaName", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::odbc::AI_schemaName, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo AttributeID_AI_tableName = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "AI_tableName", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::odbc::AI_tableName, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo AttributeID_AI_columnType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "AI_columnType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::odbc::AI_columnType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo AttributeID_AI_columnTypeName = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "AI_columnTypeName", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::odbc::AI_columnTypeName, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo AttributeID_AI_unsigned = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "AI_unsigned", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::odbc::AI_unsigned, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo AttributeID_AI_writable = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "AI_writable", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::odbc::AI_writable, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* AttributeID_enumValues[] = {
  &AttributeID_AI_autoIncrement,
  &AttributeID_AI_caseSensitive,
  &AttributeID_AI_displaySize,
  &AttributeID_AI_fixedPrecScale,
  &AttributeID_AI_nullable,
  &AttributeID_AI_octetLength,
  &AttributeID_AI_precision,
  &AttributeID_AI_scale,
  &AttributeID_AI_searchable,
  &AttributeID_AI_columnName,
  &AttributeID_AI_catalogName,
  &AttributeID_AI_columnLabel,
  &AttributeID_AI_schemaName,
  &AttributeID_AI_tableName,
  &AttributeID_AI_columnType,
  &AttributeID_AI_columnTypeName,
  &AttributeID_AI_unsigned,
  &AttributeID_AI_writable,
0
};

::acdk::lang::dmi::ClazzEnumInfo* AttributeIDMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo AttributeID_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "AttributeID", // name
  -1, // hashCode
  "acdk/sql/odbc", // ns
  0, // _scopeParent
  0, // _nextSibling
  AttributeID_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_AttributeID(&AttributeID_enumInfo);

  return &AttributeID_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_AttributeIDEnumInfo(AttributeIDMetaInf::GetEnumInfo());


} // namespace acdk
} // namespace sql
} // namespace odbc


namespace acdk { 
namespace sql { 
namespace odbc { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _ODBCColumn_super_Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ODBCColumn_interfaces[] =
{
  &_ODBCColumn_super_Object,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ODBCColumn", // name of class
  -1, // hashCode
  "acdk/sql/odbc", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ODBCColumn_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 8, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ODBCColumn::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ODBCColumn(ODBCColumn::clazzInfo());

::acdk::lang::RClass
ODBCColumn::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ODBCColumn::getCollectableFields(FieldReferences& fields)
{
  Object::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->__hndl._ref_this()); // RODBCHandle __hndl 
  fields.push_back((::acdk::lang::RObject*)this->_catalogName._ref_this()); // RString _catalogName 
  fields.push_back((::acdk::lang::RObject*)this->_columnLabel._ref_this()); // RString _columnLabel 
  fields.push_back((::acdk::lang::RObject*)this->_columnName._ref_this()); // RString _columnName 
  fields.push_back((::acdk::lang::RObject*)this->_columnTypeName._ref_this()); // RString _columnTypeName 
  fields.push_back((::acdk::lang::RObject*)this->_obj._ref_this()); // RObject _obj 
  fields.push_back((::acdk::lang::RObject*)this->_schemaName._ref_this()); // RString _schemaName 
  fields.push_back((::acdk::lang::RObject*)this->_tableName._ref_this()); // RString _tableName 
}


} // namespace acdk
} // namespace sql
} // namespace odbc


namespace acdk { 
namespace sql { 
namespace odbc { 

using namespace acdk::lang;
using namespace acdk::sql;
::acdk::lang::dmi::ClazzSuperInfo _ODBCConnection_super_Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _ODBCConnection_super___acdk__sql__Connection =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::sql::Connection::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ODBCConnection_interfaces[] =
{
  &_ODBCConnection_super_Object,
  &_ODBCConnection_super___acdk__sql__Connection,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCConnection::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ODBCConnection", // name of class
  -1, // hashCode
  "acdk/sql/odbc", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ODBCConnection_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 4, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ODBCConnection::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ODBCConnection(ODBCConnection::clazzInfo());

::acdk::lang::RClass
ODBCConnection::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ODBCConnection::getCollectableFields(FieldReferences& fields)
{
  Object::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_dbch._ref_this()); // RODBCHandle _dbch 
  fields.push_back((::acdk::lang::RObject*)this->_driver._ref_this()); // RODBCDriver _driver 
  fields.push_back((::acdk::lang::RObject*)this->_prop._ref_this()); // acdk::util::RProperties _prop 
  fields.push_back((::acdk::lang::RObject*)this->_url._ref_this()); // RString _url 
}


} // namespace acdk
} // namespace sql
} // namespace odbc


namespace acdk { 
namespace sql { 
namespace odbc { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _ODBCDatabaseMetaData_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _ODBCDatabaseMetaData_super___acdk__sql__DatabaseMetaData =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::sql::DatabaseMetaData::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ODBCDatabaseMetaData_interfaces[] =
{
  &_ODBCDatabaseMetaData_super___acdk__lang__Object,
  &_ODBCDatabaseMetaData_super___acdk__sql__DatabaseMetaData,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ODBCDatabaseMetaData", // name of class
  -1, // hashCode
  "acdk/sql/odbc", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ODBCDatabaseMetaData_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ODBCDatabaseMetaData::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ODBCDatabaseMetaData(ODBCDatabaseMetaData::clazzInfo());

::acdk::lang::RClass
ODBCDatabaseMetaData::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ODBCDatabaseMetaData::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_conn._ref_this()); // RODBCConnection _conn 
}


} // namespace acdk
} // namespace sql
} // namespace odbc


namespace acdk { 
namespace sql { 
namespace odbc { 

using namespace acdk::lang;
using namespace acdk::sql;
::acdk::lang::dmi::ClazzSuperInfo _ODBCDriver_super_Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _ODBCDriver_super___acdk__sql__Driver =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::sql::Driver::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ODBCDriver_interfaces[] =
{
  &_ODBCDriver_super_Object,
  &_ODBCDriver_super___acdk__sql__Driver,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDriver::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ODBCDriver", // name of class
  -1, // hashCode
  "acdk/sql/odbc", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ODBCDriver_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  &ODBCDriver::create_instance, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ODBCDriver::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ODBCDriver(ODBCDriver::clazzInfo());

::acdk::lang::RClass
ODBCDriver::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ODBCDriver::getCollectableFields(FieldReferences& fields)
{
  Object::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_envh._ref_this()); // RODBCHandle _envh 
}


} // namespace acdk
} // namespace sql
} // namespace odbc


namespace acdk { 
namespace sql { 
namespace odbc { 

::acdk::lang::dmi::ClazzSuperInfo _ODBCStatusRecord_super_Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ODBCStatusRecord_interfaces[] =
{
  &_ODBCStatusRecord_super_Object,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCStatusRecord::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ODBCStatusRecord", // name of class
  -1, // hashCode
  "acdk/sql/odbc", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ODBCStatusRecord_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 5, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ODBCStatusRecord::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ODBCStatusRecord(ODBCStatusRecord::clazzInfo());

::acdk::lang::RClass
ODBCStatusRecord::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ODBCStatusRecord::getCollectableFields(FieldReferences& fields)
{
  Object::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_classOrigin._ref_this()); // RString _classOrigin 
  fields.push_back((::acdk::lang::RObject*)this->_connectionName._ref_this()); // RString _connectionName 
  fields.push_back((::acdk::lang::RObject*)this->_messageText._ref_this()); // RString _messageText 
  fields.push_back((::acdk::lang::RObject*)this->_sqlState._ref_this()); // RString _sqlState 
  fields.push_back((::acdk::lang::RObject*)this->_subClassOrigin._ref_this()); // RString _subClassOrigin 
}


} // namespace acdk
} // namespace sql
} // namespace odbc


namespace acdk { 
namespace sql { 
namespace odbc { 

::acdk::lang::dmi::ClazzSuperInfo _ODBCHandle_super_Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ODBCHandle_interfaces[] =
{
  &_ODBCHandle_super_Object,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCHandle::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ODBCHandle", // name of class
  -1, // hashCode
  "acdk/sql/odbc", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ODBCHandle_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 4, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ODBCHandle::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ODBCHandle(ODBCHandle::clazzInfo());

::acdk::lang::RClass
ODBCHandle::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ODBCHandle::getCollectableFields(FieldReferences& fields)
{
  Object::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_dynamicFunction._ref_this()); // RString _dynamicFunction 
  fields.push_back((::acdk::lang::RObject*)this->_excpt._ref_this()); // ::acdk::sql::RSQLException _excpt 
  fields.push_back((::acdk::lang::RObject*)this->_statusRecords._ref_this()); // RODBCStatusRecordArray _statusRecords 
  fields.push_back((::acdk::lang::RObject*)this->_warng._ref_this()); // ::acdk::sql::RSQLWarning _warng 
}


} // namespace acdk
} // namespace sql
} // namespace odbc


namespace acdk { 
namespace sql { 
namespace odbc { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _ODBCParam_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ODBCParam_interfaces[] =
{
  &_ODBCParam_super_acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCParam::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ODBCParam", // name of class
  -1, // hashCode
  "acdk/sql/odbc", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ODBCParam_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ODBCParam::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ODBCParam(ODBCParam::clazzInfo());

::acdk::lang::RClass
ODBCParam::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ODBCParam::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace sql
} // namespace odbc


namespace acdk { 
namespace sql { 
namespace odbc { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _ODBCPreparedStatement_super_ODBCStatement =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ODBCStatement::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _ODBCPreparedStatement_super_PreparedStatement =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  PreparedStatement::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ODBCPreparedStatement_interfaces[] =
{
  &_ODBCPreparedStatement_super_ODBCStatement,
  &_ODBCPreparedStatement_super_PreparedStatement,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCPreparedStatement::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ODBCPreparedStatement", // name of class
  -1, // hashCode
  "acdk/sql/odbc", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ODBCPreparedStatement_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ODBCPreparedStatement::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ODBCPreparedStatement(ODBCPreparedStatement::clazzInfo());

::acdk::lang::RClass
ODBCPreparedStatement::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ODBCPreparedStatement::getCollectableFields(FieldReferences& fields)
{
  ODBCStatement::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_args._ref_this()); // RODBCParamArray _args 
  fields.push_back((::acdk::lang::RObject*)this->_clause._ref_this()); // RString _clause 
}


} // namespace acdk
} // namespace sql
} // namespace odbc


namespace acdk { 
namespace sql { 
namespace odbc { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _ODBCResultSet_super_Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _ODBCResultSet_super___acdk__sql__ResultSet =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::sql::ResultSet::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ODBCResultSet_interfaces[] =
{
  &_ODBCResultSet_super_Object,
  &_ODBCResultSet_super___acdk__sql__ResultSet,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ODBCResultSet", // name of class
  -1, // hashCode
  "acdk/sql/odbc", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ODBCResultSet_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 3, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ODBCResultSet::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ODBCResultSet(ODBCResultSet::clazzInfo());

::acdk::lang::RClass
ODBCResultSet::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ODBCResultSet::getCollectableFields(FieldReferences& fields)
{
  Object::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->__hndl._ref_this()); // RODBCHandle __hndl 
  fields.push_back((::acdk::lang::RObject*)this->_colDesc._ref_this()); // RODBCColumnArray _colDesc 
  fields.push_back((::acdk::lang::RObject*)this->_stmt._ref_this()); // RODBCStatement _stmt 
}


} // namespace acdk
} // namespace sql
} // namespace odbc


namespace acdk { 
namespace sql { 
namespace odbc { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _ODBCResultSetMetaData_super_Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _ODBCResultSetMetaData_super___acdk__sql__ResultSetMetaData =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::sql::ResultSetMetaData::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ODBCResultSetMetaData_interfaces[] =
{
  &_ODBCResultSetMetaData_super_Object,
  &_ODBCResultSetMetaData_super___acdk__sql__ResultSetMetaData,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSetMetaData::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ODBCResultSetMetaData", // name of class
  -1, // hashCode
  "acdk/sql/odbc", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ODBCResultSetMetaData_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ODBCResultSetMetaData::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ODBCResultSetMetaData(ODBCResultSetMetaData::clazzInfo());

::acdk::lang::RClass
ODBCResultSetMetaData::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ODBCResultSetMetaData::getCollectableFields(FieldReferences& fields)
{
  Object::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_rset._ref_this()); // RODBCResultSet _rset 
}


} // namespace acdk
} // namespace sql
} // namespace odbc


namespace acdk { 
namespace sql { 
namespace odbc { 

using namespace acdk::lang;

::acdk::lang::dmi::ClazzEnumValueInfo FetchDirection_FETCH_REVERSE = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "FETCH_REVERSE", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::odbc::FETCH_REVERSE, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo FetchDirection_FETCH_UNKNOWN = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "FETCH_UNKNOWN", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::odbc::FETCH_UNKNOWN, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo FetchDirection_FETCH_FORWARD = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "FETCH_FORWARD", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::odbc::FETCH_FORWARD, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* FetchDirection_enumValues[] = {
  &FetchDirection_FETCH_REVERSE,
  &FetchDirection_FETCH_UNKNOWN,
  &FetchDirection_FETCH_FORWARD,
0
};

::acdk::lang::dmi::ClazzEnumInfo* FetchDirectionMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo FetchDirection_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "FetchDirection", // name
  -1, // hashCode
  "acdk/sql/odbc", // ns
  0, // _scopeParent
  0, // _nextSibling
  FetchDirection_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_FetchDirection(&FetchDirection_enumInfo);

  return &FetchDirection_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_FetchDirectionEnumInfo(FetchDirectionMetaInf::GetEnumInfo());


} // namespace acdk
} // namespace sql
} // namespace odbc


namespace acdk { 
namespace sql { 
namespace odbc { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _ODBCStatement_super_Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _ODBCStatement_super___acdk__sql__Statement =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::sql::Statement::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ODBCStatement_interfaces[] =
{
  &_ODBCStatement_super_Object,
  &_ODBCStatement_super___acdk__sql__Statement,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCStatement::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ODBCStatement", // name of class
  -1, // hashCode
  "acdk/sql/odbc", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ODBCStatement_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 3, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ODBCStatement::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ODBCStatement(ODBCStatement::clazzInfo());

::acdk::lang::RClass
ODBCStatement::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ODBCStatement::getCollectableFields(FieldReferences& fields)
{
  Object::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_conn._ref_this()); // RODBCConnection _conn 
  fields.push_back((::acdk::lang::RObject*)this->_sql._ref_this()); // RString _sql 
  fields.push_back((::acdk::lang::RObject*)this->_stmth._ref_this()); // RODBCHandle _stmth 
}


} // namespace acdk
} // namespace sql
} // namespace odbc

