// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../odbc.h"
#include "../Config.h"
#include "../odbc.h"
#include "../ODBCArray.h"
#include "../ODBCCallableStatement.h"
#include "../ODBCColumn.h"
#include "../ODBCConnection.h"
#include "../ODBCDatabaseMetaData.h"
#include "../ODBCDriver.h"
#include "../ODBCHandle.h"
#include "../ODBCPreparedStatement.h"
#include "../ODBCResultSet.h"
#include "../ODBCResultSetMetaData.h"
#include "../ODBCStatement.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>


struct acdk::lang::dmi::UnitInfo acdk_sql_odbc_unitInfo = {
  ::acdk::lang::dmi::MiUnitInfo, // flags
  0, //attributeRes
  "odbc", // name of unit
  -1, // hashCode
  "acdk/sql", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  0 // _firstChild first ClazzInfo of this unit
};

static ::acdk::lang::dmi::RegisterUnitInfo _register_acdk_sql_odbc_unitInfo(&acdk_sql_odbc_unitInfo);


namespace acdk { 
namespace sql { 
namespace odbc { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
ODBCArray_create_array(int length)
{
  return new ObjectArrayImpl<RODBCArray>(length);
}

//static
::acdk::lang::RObject
ODBCArray_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ODBCArray_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCArray_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ODBCArray::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCArray_method_getArray__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCArray* This = dmi_cast<ODBCArray>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCArray::getArray();
    else
        ret = (::acdk::lang::RObject)This->getArray();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCArray_method_getArray_INLacdk_util_RMap__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCArray* This = dmi_cast<ODBCArray>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCArray::getArray((acdk::util::RMap)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getArray((acdk::util::RMap)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCArray_method_getBaseType__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCArray* This = dmi_cast<ODBCArray>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCArray::getBaseType();
    else
      ret = This->getBaseType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCArray_method_getBaseTypeName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCArray* This = dmi_cast<ODBCArray>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCArray::getBaseTypeName();
    else
        ret = (::acdk::lang::RObject)This->getBaseTypeName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCArray_method_getResultSet__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCArray* This = dmi_cast<ODBCArray>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCArray::getResultSet();
    else
        ret = (::acdk::lang::RObject)This->getResultSet();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCArray_method_getResultSet_INLacdk_util_RMap__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCArray* This = dmi_cast<ODBCArray>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCArray::getResultSet((acdk::util::RMap)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getResultSet((acdk::util::RMap)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ODBCArray_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCArray_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCArray_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCArray_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_a_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ODBCArray_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ODBCArray_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ODBCArray_MetainfoWrapper::ODBCArray_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCArray_methods_getArray__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCArray_methods_getArray__LRObject__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCArray_getArray__LRObject__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCArray_method_getArray__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_2_getArray", // alternative name of method
  -1, // altlabelHashCode
  ODBCArray_methods_getArray__LRObject__args, // the arguments
  0, //arguments count
  ODBCArray_methods_getArray__LRObject__exceptions, // the declared exceptions
  ODBCArray_MetainfoWrapper::ODBCArray_method_getArray__LRObject__dispatch, // invoke this method
  ODBCArray_getArray__LRObject__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCArray_methods_getArray_INLacdk_util_RMap__LRObject__arg_map = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "map", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCArray_methods_getArray_INLacdk_util_RMap__LRObject__args[] = 
{
  &ODBCArray_methods_getArray_INLacdk_util_RMap__LRObject__arg_map,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCArray_methods_getArray_INLacdk_util_RMap__LRObject__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCArray_getArray_INLacdk_util_RMap__LRObject__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCArray_method_getArray_INLacdk_util_RMap__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_3_getArray", // alternative name of method
  -1, // altlabelHashCode
  ODBCArray_methods_getArray_INLacdk_util_RMap__LRObject__args, // the arguments
  0, //arguments count
  ODBCArray_methods_getArray_INLacdk_util_RMap__LRObject__exceptions, // the declared exceptions
  ODBCArray_MetainfoWrapper::ODBCArray_method_getArray_INLacdk_util_RMap__LRObject__dispatch, // invoke this method
  ODBCArray_getArray_INLacdk_util_RMap__LRObject__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCArray_methods_getBaseType__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCArray_methods_getBaseType__I_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCArray_getBaseType__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCArray_method_getBaseType__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBaseType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1_getBaseType", // alternative name of method
  -1, // altlabelHashCode
  ODBCArray_methods_getBaseType__I_args, // the arguments
  0, //arguments count
  ODBCArray_methods_getBaseType__I_exceptions, // the declared exceptions
  ODBCArray_MetainfoWrapper::ODBCArray_method_getBaseType__I_dispatch, // invoke this method
  ODBCArray_getBaseType__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCArray_methods_getBaseTypeName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCArray_methods_getBaseTypeName__LRString__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCArray_getBaseTypeName__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCArray_method_getBaseTypeName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBaseTypeName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_0_getBaseTypeName", // alternative name of method
  -1, // altlabelHashCode
  ODBCArray_methods_getBaseTypeName__LRString__args, // the arguments
  0, //arguments count
  ODBCArray_methods_getBaseTypeName__LRString__exceptions, // the declared exceptions
  ODBCArray_MetainfoWrapper::ODBCArray_method_getBaseTypeName__LRString__dispatch, // invoke this method
  ODBCArray_getBaseTypeName__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCArray_methods_getResultSet__LRResultSet__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCArray_methods_getResultSet__LRResultSet__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCArray_getResultSet__LRResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCArray_method_getResultSet__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getResultSet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_6_getResultSet", // alternative name of method
  -1, // altlabelHashCode
  ODBCArray_methods_getResultSet__LRResultSet__args, // the arguments
  0, //arguments count
  ODBCArray_methods_getResultSet__LRResultSet__exceptions, // the declared exceptions
  ODBCArray_MetainfoWrapper::ODBCArray_method_getResultSet__LRResultSet__dispatch, // invoke this method
  ODBCArray_getResultSet__LRResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCArray_methods_getResultSet_INLacdk_util_RMap__LRResultSet__arg_map = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "map", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCArray_methods_getResultSet_INLacdk_util_RMap__LRResultSet__args[] = 
{
  &ODBCArray_methods_getResultSet_INLacdk_util_RMap__LRResultSet__arg_map,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCArray_methods_getResultSet_INLacdk_util_RMap__LRResultSet__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCArray_getResultSet_INLacdk_util_RMap__LRResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCArray_method_getResultSet_INLacdk_util_RMap__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getResultSet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_7_getResultSet", // alternative name of method
  -1, // altlabelHashCode
  ODBCArray_methods_getResultSet_INLacdk_util_RMap__LRResultSet__args, // the arguments
  0, //arguments count
  ODBCArray_methods_getResultSet_INLacdk_util_RMap__LRResultSet__exceptions, // the declared exceptions
  ODBCArray_MetainfoWrapper::ODBCArray_method_getResultSet_INLacdk_util_RMap__LRResultSet__dispatch, // invoke this method
  ODBCArray_getResultSet_INLacdk_util_RMap__LRResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ODBCArray_methods[] = 
{
  &ODBCArray_method_GetClass__L_acdk_lang_RClass_,
  &ODBCArray_method_getArray__LRObject_,
  &ODBCArray_method_getArray_INLacdk_util_RMap__LRObject_,
  &ODBCArray_method_getBaseType__I,
  &ODBCArray_method_getBaseTypeName__LRString_,
  &ODBCArray_method_getResultSet__LRResultSet_,
  &ODBCArray_method_getResultSet_INLacdk_util_RMap__LRResultSet_,
  0
};


struct ODBCArray_MetaInfoInitializer
{  ODBCArray_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ODBCArray::clazzInfo();
    ci->fields =  _ODBCArray_fields;
    ci->methods =  _ODBCArray_methods;
    ci->_scopeParent = acdk_sql_odbc_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ODBCArray_MetaInfoInitializer ODBCArray_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace sql
} // namespace odbc


namespace acdk { 
namespace sql { 
namespace odbc { 

using namespace acdk::lang;
using namespace acdk::sql;

//static
::acdk::lang::RObject
ODBCCallableStatement_create_array(int length)
{
  return new ObjectArrayImpl<RODBCCallableStatement>(length);
}

//static
::acdk::lang::RObject
ODBCCallableStatement_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ODBCCallableStatement_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCCallableStatement_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ODBCCallableStatement::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCCallableStatement_method_ODBCCallableStatement_INLRODBCConnection_INLRString__LRODBCCallableStatement__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ODBCCallableStatement((RODBCConnection)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCCallableStatement_method_getBlob_I_LRBlob__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCCallableStatement* This = dmi_cast<ODBCCallableStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCCallableStatement::getBlob(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getBlob(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCCallableStatement_method_getBoolean_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCCallableStatement* This = dmi_cast<ODBCCallableStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCCallableStatement::getBoolean(args[0].getIntVar());
    else
      ret = This->getBoolean(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCCallableStatement_method_getByte_I_B_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCCallableStatement* This = dmi_cast<ODBCCallableStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCCallableStatement::getByte(args[0].getIntVar());
    else
      ret = This->getByte(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCCallableStatement_method_getBytes_I_LRbyteArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCCallableStatement* This = dmi_cast<ODBCCallableStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCCallableStatement::getBytes(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getBytes(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCCallableStatement_method_getDate_I_LRDate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCCallableStatement* This = dmi_cast<ODBCCallableStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCCallableStatement::getDate(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getDate(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCCallableStatement_method_getDate_IINLacdk_util_RCalendar__LRDate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCCallableStatement* This = dmi_cast<ODBCCallableStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCCallableStatement::getDate(args[0].getIntVar(), (acdk::util::RCalendar)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getDate(args[0].getIntVar(), (acdk::util::RCalendar)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCCallableStatement_method_getDouble_I_D_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCCallableStatement* This = dmi_cast<ODBCCallableStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCCallableStatement::getDouble(args[0].getIntVar());
    else
      ret = This->getDouble(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCCallableStatement_method_getFloat_I_F_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCCallableStatement* This = dmi_cast<ODBCCallableStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCCallableStatement::getFloat(args[0].getIntVar());
    else
      ret = This->getFloat(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCCallableStatement_method_getInt_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCCallableStatement* This = dmi_cast<ODBCCallableStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCCallableStatement::getInt(args[0].getIntVar());
    else
      ret = This->getInt(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCCallableStatement_method_getLong_I_J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCCallableStatement* This = dmi_cast<ODBCCallableStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCCallableStatement::getLong(args[0].getIntVar());
    else
      ret = This->getLong(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCCallableStatement_method_getObject_I_LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCCallableStatement* This = dmi_cast<ODBCCallableStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCCallableStatement::getObject(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getObject(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCCallableStatement_method_getObject_IINLRMap__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCCallableStatement* This = dmi_cast<ODBCCallableStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCCallableStatement::getObject(args[0].getIntVar(), (RMap)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getObject(args[0].getIntVar(), (RMap)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCCallableStatement_method_getShort_I_S_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCCallableStatement* This = dmi_cast<ODBCCallableStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCCallableStatement::getShort(args[0].getIntVar());
    else
      ret = This->getShort(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCCallableStatement_method_getString_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCCallableStatement* This = dmi_cast<ODBCCallableStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCCallableStatement::getString(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getString(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCCallableStatement_method_getTime_I_LRTime__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCCallableStatement* This = dmi_cast<ODBCCallableStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCCallableStatement::getTime(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getTime(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCCallableStatement_method_getTime_IINLRCalendar__LRTime__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCCallableStatement* This = dmi_cast<ODBCCallableStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCCallableStatement::getTime(args[0].getIntVar(), (RCalendar)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getTime(args[0].getIntVar(), (RCalendar)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCCallableStatement_method_getTimestamp_I_LRTimestamp__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCCallableStatement* This = dmi_cast<ODBCCallableStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCCallableStatement::getTimestamp(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getTimestamp(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCCallableStatement_method_getTimestamp_IINLRCalendar__LRTimestamp__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCCallableStatement* This = dmi_cast<ODBCCallableStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCCallableStatement::getTimestamp(args[0].getIntVar(), (RCalendar)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getTimestamp(args[0].getIntVar(), (RCalendar)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCCallableStatement_method_init_INLacdk_util_RProperties__LRODBCStatement__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCCallableStatement* This = dmi_cast<ODBCCallableStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCCallableStatement::init((acdk::util::RProperties)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->init((acdk::util::RProperties)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCCallableStatement_method_registerOutParameter_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCCallableStatement* This = dmi_cast<ODBCCallableStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCCallableStatement::registerOutParameter(args[0].getIntVar(), args[1].getIntVar());
    else
        This->registerOutParameter(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCCallableStatement_method_registerOutParameter_III_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCCallableStatement* This = dmi_cast<ODBCCallableStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCCallableStatement::registerOutParameter(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar());
    else
        This->registerOutParameter(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCCallableStatement_method_registerOutParameter_IIINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCCallableStatement* This = dmi_cast<ODBCCallableStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCCallableStatement::registerOutParameter(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    else
        This->registerOutParameter(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCCallableStatement_method_wasNull__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCCallableStatement* This = dmi_cast<ODBCCallableStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCCallableStatement::wasNull();
    else
      ret = This->wasNull();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ODBCCallableStatement_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCCallableStatement_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCCallableStatement_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCCallableStatement_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_o_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ODBCCallableStatement_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ODBCCallableStatement_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ODBCCallableStatement_MetainfoWrapper::ODBCCallableStatement_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCCallableStatement_methods_ODBCCallableStatement_INLRODBCConnection_INLRString__LRODBCCallableStatement__arg_conn = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "conn", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RODBCConnection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCCallableStatement_methods_ODBCCallableStatement_INLRODBCConnection_INLRString__LRODBCCallableStatement__arg_clause = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "clause", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCCallableStatement_methods_ODBCCallableStatement_INLRODBCConnection_INLRString__LRODBCCallableStatement__args[] = 
{
  &ODBCCallableStatement_methods_ODBCCallableStatement_INLRODBCConnection_INLRString__LRODBCCallableStatement__arg_conn,
  &ODBCCallableStatement_methods_ODBCCallableStatement_INLRODBCConnection_INLRString__LRODBCCallableStatement__arg_clause,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCCallableStatement_methods_ODBCCallableStatement_INLRODBCConnection_INLRString__LRODBCCallableStatement__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCCallableStatement_method_ODBCCallableStatement_INLRODBCConnection_INLRString__LRODBCCallableStatement_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ODBCCallableStatement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ODBCCallableStatement::clazzInfo(), // return type
  "_0_ODBCCallableStatement", // alternative name of method
  -1, // altlabelHashCode
  ODBCCallableStatement_methods_ODBCCallableStatement_INLRODBCConnection_INLRString__LRODBCCallableStatement__args, // the arguments
  0, //arguments count
  ODBCCallableStatement_methods_ODBCCallableStatement_INLRODBCConnection_INLRString__LRODBCCallableStatement__exceptions, // the declared exceptions
  ODBCCallableStatement_MetainfoWrapper::ODBCCallableStatement_method_ODBCCallableStatement_INLRODBCConnection_INLRString__LRODBCCallableStatement__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCCallableStatement_methods_getBlob_I_LRBlob__arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCCallableStatement_methods_getBlob_I_LRBlob__args[] = 
{
  &ODBCCallableStatement_methods_getBlob_I_LRBlob__arg_i,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCCallableStatement_methods_getBlob_I_LRBlob__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCCallableStatement_method_getBlob_I_LRBlob_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBlob", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBlob::clazzInfo(), // return type
  "_2_getBlob", // alternative name of method
  -1, // altlabelHashCode
  ODBCCallableStatement_methods_getBlob_I_LRBlob__args, // the arguments
  0, //arguments count
  ODBCCallableStatement_methods_getBlob_I_LRBlob__exceptions, // the declared exceptions
  ODBCCallableStatement_MetainfoWrapper::ODBCCallableStatement_method_getBlob_I_LRBlob__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCCallableStatement_methods_getBoolean_I_Z_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCCallableStatement_methods_getBoolean_I_Z_args[] = 
{
  &ODBCCallableStatement_methods_getBoolean_I_Z_arg_parameterIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCCallableStatement_methods_getBoolean_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCCallableStatement_method_getBoolean_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBoolean", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_getBoolean", // alternative name of method
  -1, // altlabelHashCode
  ODBCCallableStatement_methods_getBoolean_I_Z_args, // the arguments
  0, //arguments count
  ODBCCallableStatement_methods_getBoolean_I_Z_exceptions, // the declared exceptions
  ODBCCallableStatement_MetainfoWrapper::ODBCCallableStatement_method_getBoolean_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCCallableStatement_methods_getByte_I_B_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCCallableStatement_methods_getByte_I_B_args[] = 
{
  &ODBCCallableStatement_methods_getByte_I_B_arg_parameterIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCCallableStatement_methods_getByte_I_B_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCCallableStatement_method_getByte_I_B = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getByte", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz(), // return type
  "_4_getByte", // alternative name of method
  -1, // altlabelHashCode
  ODBCCallableStatement_methods_getByte_I_B_args, // the arguments
  0, //arguments count
  ODBCCallableStatement_methods_getByte_I_B_exceptions, // the declared exceptions
  ODBCCallableStatement_MetainfoWrapper::ODBCCallableStatement_method_getByte_I_B_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCCallableStatement_methods_getBytes_I_LRbyteArray__arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCCallableStatement_methods_getBytes_I_LRbyteArray__args[] = 
{
  &ODBCCallableStatement_methods_getBytes_I_LRbyteArray__arg_parameterIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCCallableStatement_methods_getBytes_I_LRbyteArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCCallableStatement_method_getBytes_I_LRbyteArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBytes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo(), // return type
  "_5_getBytes", // alternative name of method
  -1, // altlabelHashCode
  ODBCCallableStatement_methods_getBytes_I_LRbyteArray__args, // the arguments
  0, //arguments count
  ODBCCallableStatement_methods_getBytes_I_LRbyteArray__exceptions, // the declared exceptions
  ODBCCallableStatement_MetainfoWrapper::ODBCCallableStatement_method_getBytes_I_LRbyteArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCCallableStatement_methods_getDate_I_LRDate__arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCCallableStatement_methods_getDate_I_LRDate__args[] = 
{
  &ODBCCallableStatement_methods_getDate_I_LRDate__arg_parameterIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCCallableStatement_methods_getDate_I_LRDate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCCallableStatement_method_getDate_I_LRDate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDate::clazzInfo(), // return type
  "_6_getDate", // alternative name of method
  -1, // altlabelHashCode
  ODBCCallableStatement_methods_getDate_I_LRDate__args, // the arguments
  0, //arguments count
  ODBCCallableStatement_methods_getDate_I_LRDate__exceptions, // the declared exceptions
  ODBCCallableStatement_MetainfoWrapper::ODBCCallableStatement_method_getDate_I_LRDate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCCallableStatement_methods_getDate_IINLacdk_util_RCalendar__LRDate__arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCCallableStatement_methods_getDate_IINLacdk_util_RCalendar__LRDate__arg_cal = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cal", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RCalendar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCCallableStatement_methods_getDate_IINLacdk_util_RCalendar__LRDate__args[] = 
{
  &ODBCCallableStatement_methods_getDate_IINLacdk_util_RCalendar__LRDate__arg_parameterIndex,
  &ODBCCallableStatement_methods_getDate_IINLacdk_util_RCalendar__LRDate__arg_cal,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCCallableStatement_methods_getDate_IINLacdk_util_RCalendar__LRDate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCCallableStatement_method_getDate_IINLacdk_util_RCalendar__LRDate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDate::clazzInfo(), // return type
  "_7_getDate", // alternative name of method
  -1, // altlabelHashCode
  ODBCCallableStatement_methods_getDate_IINLacdk_util_RCalendar__LRDate__args, // the arguments
  0, //arguments count
  ODBCCallableStatement_methods_getDate_IINLacdk_util_RCalendar__LRDate__exceptions, // the declared exceptions
  ODBCCallableStatement_MetainfoWrapper::ODBCCallableStatement_method_getDate_IINLacdk_util_RCalendar__LRDate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCCallableStatement_methods_getDouble_I_D_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCCallableStatement_methods_getDouble_I_D_args[] = 
{
  &ODBCCallableStatement_methods_getDouble_I_D_arg_parameterIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCCallableStatement_methods_getDouble_I_D_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCCallableStatement_method_getDouble_I_D = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDouble", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(), // return type
  "_8_getDouble", // alternative name of method
  -1, // altlabelHashCode
  ODBCCallableStatement_methods_getDouble_I_D_args, // the arguments
  0, //arguments count
  ODBCCallableStatement_methods_getDouble_I_D_exceptions, // the declared exceptions
  ODBCCallableStatement_MetainfoWrapper::ODBCCallableStatement_method_getDouble_I_D_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCCallableStatement_methods_getFloat_I_F_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCCallableStatement_methods_getFloat_I_F_args[] = 
{
  &ODBCCallableStatement_methods_getFloat_I_F_arg_parameterIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCCallableStatement_methods_getFloat_I_F_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCCallableStatement_method_getFloat_I_F = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFloat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz(), // return type
  "_9_getFloat", // alternative name of method
  -1, // altlabelHashCode
  ODBCCallableStatement_methods_getFloat_I_F_args, // the arguments
  0, //arguments count
  ODBCCallableStatement_methods_getFloat_I_F_exceptions, // the declared exceptions
  ODBCCallableStatement_MetainfoWrapper::ODBCCallableStatement_method_getFloat_I_F_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCCallableStatement_methods_getInt_I_I_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCCallableStatement_methods_getInt_I_I_args[] = 
{
  &ODBCCallableStatement_methods_getInt_I_I_arg_parameterIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCCallableStatement_methods_getInt_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCCallableStatement_method_getInt_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_a_getInt", // alternative name of method
  -1, // altlabelHashCode
  ODBCCallableStatement_methods_getInt_I_I_args, // the arguments
  0, //arguments count
  ODBCCallableStatement_methods_getInt_I_I_exceptions, // the declared exceptions
  ODBCCallableStatement_MetainfoWrapper::ODBCCallableStatement_method_getInt_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCCallableStatement_methods_getLong_I_J_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCCallableStatement_methods_getLong_I_J_args[] = 
{
  &ODBCCallableStatement_methods_getLong_I_J_arg_parameterIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCCallableStatement_methods_getLong_I_J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCCallableStatement_method_getLong_I_J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLong", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_b_getLong", // alternative name of method
  -1, // altlabelHashCode
  ODBCCallableStatement_methods_getLong_I_J_args, // the arguments
  0, //arguments count
  ODBCCallableStatement_methods_getLong_I_J_exceptions, // the declared exceptions
  ODBCCallableStatement_MetainfoWrapper::ODBCCallableStatement_method_getLong_I_J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCCallableStatement_methods_getObject_I_LRObject__arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCCallableStatement_methods_getObject_I_LRObject__args[] = 
{
  &ODBCCallableStatement_methods_getObject_I_LRObject__arg_parameterIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCCallableStatement_methods_getObject_I_LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCCallableStatement_method_getObject_I_LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_c_getObject", // alternative name of method
  -1, // altlabelHashCode
  ODBCCallableStatement_methods_getObject_I_LRObject__args, // the arguments
  0, //arguments count
  ODBCCallableStatement_methods_getObject_I_LRObject__exceptions, // the declared exceptions
  ODBCCallableStatement_MetainfoWrapper::ODBCCallableStatement_method_getObject_I_LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCCallableStatement_methods_getObject_IINLRMap__LRObject__arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCCallableStatement_methods_getObject_IINLRMap__LRObject__arg_map = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "map", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCCallableStatement_methods_getObject_IINLRMap__LRObject__args[] = 
{
  &ODBCCallableStatement_methods_getObject_IINLRMap__LRObject__arg_i,
  &ODBCCallableStatement_methods_getObject_IINLRMap__LRObject__arg_map,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCCallableStatement_methods_getObject_IINLRMap__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCCallableStatement_method_getObject_IINLRMap__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_d_getObject", // alternative name of method
  -1, // altlabelHashCode
  ODBCCallableStatement_methods_getObject_IINLRMap__LRObject__args, // the arguments
  0, //arguments count
  ODBCCallableStatement_methods_getObject_IINLRMap__LRObject__exceptions, // the declared exceptions
  ODBCCallableStatement_MetainfoWrapper::ODBCCallableStatement_method_getObject_IINLRMap__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCCallableStatement_methods_getShort_I_S_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCCallableStatement_methods_getShort_I_S_args[] = 
{
  &ODBCCallableStatement_methods_getShort_I_S_arg_parameterIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCCallableStatement_methods_getShort_I_S_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCCallableStatement_method_getShort_I_S = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getShort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(), // return type
  "_e_getShort", // alternative name of method
  -1, // altlabelHashCode
  ODBCCallableStatement_methods_getShort_I_S_args, // the arguments
  0, //arguments count
  ODBCCallableStatement_methods_getShort_I_S_exceptions, // the declared exceptions
  ODBCCallableStatement_MetainfoWrapper::ODBCCallableStatement_method_getShort_I_S_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCCallableStatement_methods_getString_I_LRString__arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCCallableStatement_methods_getString_I_LRString__args[] = 
{
  &ODBCCallableStatement_methods_getString_I_LRString__arg_parameterIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCCallableStatement_methods_getString_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCCallableStatement_method_getString_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_f_getString", // alternative name of method
  -1, // altlabelHashCode
  ODBCCallableStatement_methods_getString_I_LRString__args, // the arguments
  0, //arguments count
  ODBCCallableStatement_methods_getString_I_LRString__exceptions, // the declared exceptions
  ODBCCallableStatement_MetainfoWrapper::ODBCCallableStatement_method_getString_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCCallableStatement_methods_getTime_I_LRTime__arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCCallableStatement_methods_getTime_I_LRTime__args[] = 
{
  &ODBCCallableStatement_methods_getTime_I_LRTime__arg_parameterIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCCallableStatement_methods_getTime_I_LRTime__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCCallableStatement_method_getTime_I_LRTime_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTime", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTime::clazzInfo(), // return type
  "_g_getTime", // alternative name of method
  -1, // altlabelHashCode
  ODBCCallableStatement_methods_getTime_I_LRTime__args, // the arguments
  0, //arguments count
  ODBCCallableStatement_methods_getTime_I_LRTime__exceptions, // the declared exceptions
  ODBCCallableStatement_MetainfoWrapper::ODBCCallableStatement_method_getTime_I_LRTime__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCCallableStatement_methods_getTime_IINLRCalendar__LRTime__arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCCallableStatement_methods_getTime_IINLRCalendar__LRTime__arg_cal = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cal", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCalendar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCCallableStatement_methods_getTime_IINLRCalendar__LRTime__args[] = 
{
  &ODBCCallableStatement_methods_getTime_IINLRCalendar__LRTime__arg_parameterIndex,
  &ODBCCallableStatement_methods_getTime_IINLRCalendar__LRTime__arg_cal,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCCallableStatement_methods_getTime_IINLRCalendar__LRTime__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCCallableStatement_method_getTime_IINLRCalendar__LRTime_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTime", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTime::clazzInfo(), // return type
  "_h_getTime", // alternative name of method
  -1, // altlabelHashCode
  ODBCCallableStatement_methods_getTime_IINLRCalendar__LRTime__args, // the arguments
  0, //arguments count
  ODBCCallableStatement_methods_getTime_IINLRCalendar__LRTime__exceptions, // the declared exceptions
  ODBCCallableStatement_MetainfoWrapper::ODBCCallableStatement_method_getTime_IINLRCalendar__LRTime__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCCallableStatement_methods_getTimestamp_I_LRTimestamp__arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCCallableStatement_methods_getTimestamp_I_LRTimestamp__args[] = 
{
  &ODBCCallableStatement_methods_getTimestamp_I_LRTimestamp__arg_parameterIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCCallableStatement_methods_getTimestamp_I_LRTimestamp__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCCallableStatement_method_getTimestamp_I_LRTimestamp_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTimestamp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTimestamp::clazzInfo(), // return type
  "_i_getTimestamp", // alternative name of method
  -1, // altlabelHashCode
  ODBCCallableStatement_methods_getTimestamp_I_LRTimestamp__args, // the arguments
  0, //arguments count
  ODBCCallableStatement_methods_getTimestamp_I_LRTimestamp__exceptions, // the declared exceptions
  ODBCCallableStatement_MetainfoWrapper::ODBCCallableStatement_method_getTimestamp_I_LRTimestamp__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCCallableStatement_methods_getTimestamp_IINLRCalendar__LRTimestamp__arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCCallableStatement_methods_getTimestamp_IINLRCalendar__LRTimestamp__arg_cal = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cal", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCalendar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCCallableStatement_methods_getTimestamp_IINLRCalendar__LRTimestamp__args[] = 
{
  &ODBCCallableStatement_methods_getTimestamp_IINLRCalendar__LRTimestamp__arg_parameterIndex,
  &ODBCCallableStatement_methods_getTimestamp_IINLRCalendar__LRTimestamp__arg_cal,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCCallableStatement_methods_getTimestamp_IINLRCalendar__LRTimestamp__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCCallableStatement_method_getTimestamp_IINLRCalendar__LRTimestamp_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTimestamp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTimestamp::clazzInfo(), // return type
  "_j_getTimestamp", // alternative name of method
  -1, // altlabelHashCode
  ODBCCallableStatement_methods_getTimestamp_IINLRCalendar__LRTimestamp__args, // the arguments
  0, //arguments count
  ODBCCallableStatement_methods_getTimestamp_IINLRCalendar__LRTimestamp__exceptions, // the declared exceptions
  ODBCCallableStatement_MetainfoWrapper::ODBCCallableStatement_method_getTimestamp_IINLRCalendar__LRTimestamp__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCCallableStatement_methods_init_INLacdk_util_RProperties__LRODBCStatement__arg_prop = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "prop", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RProperties::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCCallableStatement_methods_init_INLacdk_util_RProperties__LRODBCStatement__args[] = 
{
  &ODBCCallableStatement_methods_init_INLacdk_util_RProperties__LRODBCStatement__arg_prop,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCCallableStatement_methods_init_INLacdk_util_RProperties__LRODBCStatement__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCCallableStatement_method_init_INLacdk_util_RProperties__LRODBCStatement_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "init", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RODBCStatement::clazzInfo(), // return type
  "_1_init", // alternative name of method
  -1, // altlabelHashCode
  ODBCCallableStatement_methods_init_INLacdk_util_RProperties__LRODBCStatement__args, // the arguments
  0, //arguments count
  ODBCCallableStatement_methods_init_INLacdk_util_RProperties__LRODBCStatement__exceptions, // the declared exceptions
  ODBCCallableStatement_MetainfoWrapper::ODBCCallableStatement_method_init_INLacdk_util_RProperties__LRODBCStatement__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCCallableStatement_methods_registerOutParameter_II_V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCCallableStatement_methods_registerOutParameter_II_V_arg_sqlType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "sqlType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCCallableStatement_methods_registerOutParameter_II_V_args[] = 
{
  &ODBCCallableStatement_methods_registerOutParameter_II_V_arg_parameterIndex,
  &ODBCCallableStatement_methods_registerOutParameter_II_V_arg_sqlType,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCCallableStatement_methods_registerOutParameter_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCCallableStatement_method_registerOutParameter_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "registerOutParameter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_k_registerOutParameter", // alternative name of method
  -1, // altlabelHashCode
  ODBCCallableStatement_methods_registerOutParameter_II_V_args, // the arguments
  0, //arguments count
  ODBCCallableStatement_methods_registerOutParameter_II_V_exceptions, // the declared exceptions
  ODBCCallableStatement_MetainfoWrapper::ODBCCallableStatement_method_registerOutParameter_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCCallableStatement_methods_registerOutParameter_III_V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCCallableStatement_methods_registerOutParameter_III_V_arg_sqlType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "sqlType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCCallableStatement_methods_registerOutParameter_III_V_arg_scale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "scale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCCallableStatement_methods_registerOutParameter_III_V_args[] = 
{
  &ODBCCallableStatement_methods_registerOutParameter_III_V_arg_parameterIndex,
  &ODBCCallableStatement_methods_registerOutParameter_III_V_arg_sqlType,
  &ODBCCallableStatement_methods_registerOutParameter_III_V_arg_scale,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCCallableStatement_methods_registerOutParameter_III_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCCallableStatement_method_registerOutParameter_III_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "registerOutParameter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_l_registerOutParameter", // alternative name of method
  -1, // altlabelHashCode
  ODBCCallableStatement_methods_registerOutParameter_III_V_args, // the arguments
  0, //arguments count
  ODBCCallableStatement_methods_registerOutParameter_III_V_exceptions, // the declared exceptions
  ODBCCallableStatement_MetainfoWrapper::ODBCCallableStatement_method_registerOutParameter_III_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCCallableStatement_methods_registerOutParameter_IIINLRString__V_arg_paramIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "paramIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCCallableStatement_methods_registerOutParameter_IIINLRString__V_arg_sqlType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "sqlType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCCallableStatement_methods_registerOutParameter_IIINLRString__V_arg_typeName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "typeName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCCallableStatement_methods_registerOutParameter_IIINLRString__V_args[] = 
{
  &ODBCCallableStatement_methods_registerOutParameter_IIINLRString__V_arg_paramIndex,
  &ODBCCallableStatement_methods_registerOutParameter_IIINLRString__V_arg_sqlType,
  &ODBCCallableStatement_methods_registerOutParameter_IIINLRString__V_arg_typeName,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCCallableStatement_methods_registerOutParameter_IIINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCCallableStatement_method_registerOutParameter_IIINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "registerOutParameter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_m_registerOutParameter", // alternative name of method
  -1, // altlabelHashCode
  ODBCCallableStatement_methods_registerOutParameter_IIINLRString__V_args, // the arguments
  0, //arguments count
  ODBCCallableStatement_methods_registerOutParameter_IIINLRString__V_exceptions, // the declared exceptions
  ODBCCallableStatement_MetainfoWrapper::ODBCCallableStatement_method_registerOutParameter_IIINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCCallableStatement_methods_wasNull__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCCallableStatement_methods_wasNull__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCCallableStatement_method_wasNull__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "wasNull", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_n_wasNull", // alternative name of method
  -1, // altlabelHashCode
  ODBCCallableStatement_methods_wasNull__Z_args, // the arguments
  0, //arguments count
  ODBCCallableStatement_methods_wasNull__Z_exceptions, // the declared exceptions
  ODBCCallableStatement_MetainfoWrapper::ODBCCallableStatement_method_wasNull__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ODBCCallableStatement_methods[] = 
{
  &ODBCCallableStatement_method_GetClass__L_acdk_lang_RClass_,
  &ODBCCallableStatement_method_ODBCCallableStatement_INLRODBCConnection_INLRString__LRODBCCallableStatement_,
  &ODBCCallableStatement_method_getBlob_I_LRBlob_,
  &ODBCCallableStatement_method_getBoolean_I_Z,
  &ODBCCallableStatement_method_getByte_I_B,
  &ODBCCallableStatement_method_getBytes_I_LRbyteArray_,
  &ODBCCallableStatement_method_getDate_I_LRDate_,
  &ODBCCallableStatement_method_getDate_IINLacdk_util_RCalendar__LRDate_,
  &ODBCCallableStatement_method_getDouble_I_D,
  &ODBCCallableStatement_method_getFloat_I_F,
  &ODBCCallableStatement_method_getInt_I_I,
  &ODBCCallableStatement_method_getLong_I_J,
  &ODBCCallableStatement_method_getObject_I_LRObject_,
  &ODBCCallableStatement_method_getObject_IINLRMap__LRObject_,
  &ODBCCallableStatement_method_getShort_I_S,
  &ODBCCallableStatement_method_getString_I_LRString_,
  &ODBCCallableStatement_method_getTime_I_LRTime_,
  &ODBCCallableStatement_method_getTime_IINLRCalendar__LRTime_,
  &ODBCCallableStatement_method_getTimestamp_I_LRTimestamp_,
  &ODBCCallableStatement_method_getTimestamp_IINLRCalendar__LRTimestamp_,
  &ODBCCallableStatement_method_init_INLacdk_util_RProperties__LRODBCStatement_,
  &ODBCCallableStatement_method_registerOutParameter_II_V,
  &ODBCCallableStatement_method_registerOutParameter_III_V,
  &ODBCCallableStatement_method_registerOutParameter_IIINLRString__V,
  &ODBCCallableStatement_method_wasNull__Z,
  0
};


struct ODBCCallableStatement_MetaInfoInitializer
{  ODBCCallableStatement_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ODBCCallableStatement::clazzInfo();
    ci->fields =  _ODBCCallableStatement_fields;
    ci->methods =  _ODBCCallableStatement_methods;
    ci->_scopeParent = acdk_sql_odbc_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ODBCCallableStatement_MetaInfoInitializer ODBCCallableStatement_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace sql
} // namespace odbc


namespace acdk { 
namespace sql { 
namespace odbc { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
ODBCColumn_create_array(int length)
{
  return new ObjectArrayImpl<RODBCColumn>(length);
}

//static
::acdk::lang::RObject
ODBCColumn_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ODBCColumn_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ODBCColumn::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_ODBCColumn__LRODBCColumn__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ODBCColumn();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_ODBCColumn_INLRODBCHandle_I_LRODBCColumn__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ODBCColumn((RODBCHandle)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method__chkAttr_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCColumn::_chkAttr((AttributeID)args[0].getIntVar());
    else
        This->_chkAttr((AttributeID)args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method__chkNull__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCColumn::_chkNull();
    else
        This->_chkNull();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method__getAttribute_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCColumn::_getAttribute((AttributeID)args[0].getIntVar());
    else
      ret = This->_getAttribute((AttributeID)args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method__getData__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCColumn::_getData();
    else
        ret = (::acdk::lang::RObject)This->_getData();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method__getNumber__LRNumber__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCColumn::_getNumber();
    else
        ret = (::acdk::lang::RObject)This->_getNumber();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method__getODBCHandle__LRODBCHandle__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCColumn::_getODBCHandle();
    else
        ret = (::acdk::lang::RObject)This->_getODBCHandle();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method__zeroData__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCColumn::_zeroData();
    else
        This->_zeroData();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_getArray__LRArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCColumn::getArray();
    else
        ret = (::acdk::lang::RObject)This->getArray();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_getAsciiStream__Lacdk_io_RReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCColumn::getAsciiStream();
    else
        ret = (::acdk::lang::RObject)This->getAsciiStream();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_getBinaryStream__Lacdk_io_RReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCColumn::getBinaryStream();
    else
        ret = (::acdk::lang::RObject)This->getBinaryStream();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_getBlob__LRBlob__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCColumn::getBlob();
    else
        ret = (::acdk::lang::RObject)This->getBlob();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_getBoolean__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCColumn::getBoolean();
    else
      ret = This->getBoolean();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_getByte__B_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCColumn::getByte();
    else
      ret = This->getByte();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_getBytes__LRbyteArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCColumn::getBytes();
    else
        ret = (::acdk::lang::RObject)This->getBytes();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_getCatalogName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCColumn::getCatalogName();
    else
        ret = (::acdk::lang::RObject)This->getCatalogName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_getCharacterStream__Lacdk_io_RReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCColumn::getCharacterStream();
    else
        ret = (::acdk::lang::RObject)This->getCharacterStream();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_getColumnClassName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCColumn::getColumnClassName();
    else
        ret = (::acdk::lang::RObject)This->getColumnClassName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_getColumnCount__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCColumn::getColumnCount();
    else
      ret = This->getColumnCount();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_getColumnDisplaySize__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCColumn::getColumnDisplaySize();
    else
      ret = This->getColumnDisplaySize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_getColumnLabel__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCColumn::getColumnLabel();
    else
        ret = (::acdk::lang::RObject)This->getColumnLabel();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_getColumnName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCColumn::getColumnName();
    else
        ret = (::acdk::lang::RObject)This->getColumnName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_getColumnTypeName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCColumn::getColumnTypeName();
    else
        ret = (::acdk::lang::RObject)This->getColumnTypeName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_getConcurrency__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCColumn::getConcurrency();
    else
      ret = This->getConcurrency();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_getCursorName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCColumn::getCursorName();
    else
        ret = (::acdk::lang::RObject)This->getCursorName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_getDate__Lacdk_util_RDate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCColumn::getDate();
    else
        ret = (::acdk::lang::RObject)This->getDate();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_getDouble__D_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCColumn::getDouble();
    else
      ret = This->getDouble();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_getFloat__F_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCColumn::getFloat();
    else
      ret = This->getFloat();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_getInt__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCColumn::getInt();
    else
      ret = This->getInt();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_getLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCColumn::getLength();
    else
      ret = This->getLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_getLong__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCColumn::getLong();
    else
      ret = This->getLong();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_getNumber__LRNumber__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCColumn::getNumber();
    else
        ret = (::acdk::lang::RObject)This->getNumber();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_getObject__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCColumn::getObject();
    else
        ret = (::acdk::lang::RObject)This->getObject();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_getObject_INLacdk_util_RMap__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCColumn::getObject((acdk::util::RMap)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getObject((acdk::util::RMap)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_getPrecision__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCColumn::getPrecision();
    else
      ret = This->getPrecision();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_getScale__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCColumn::getScale();
    else
      ret = This->getScale();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_getSchemaName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCColumn::getSchemaName();
    else
        ret = (::acdk::lang::RObject)This->getSchemaName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_getShort__S_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCColumn::getShort();
    else
      ret = This->getShort();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_getString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCColumn::getString();
    else
        ret = (::acdk::lang::RObject)This->getString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_getTableName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCColumn::getTableName();
    else
        ret = (::acdk::lang::RObject)This->getTableName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_getTime__LRTime__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCColumn::getTime();
    else
        ret = (::acdk::lang::RObject)This->getTime();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_getTimestamp__LRTimestamp__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCColumn::getTimestamp();
    else
        ret = (::acdk::lang::RObject)This->getTimestamp();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_isAutoIncrement__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCColumn::isAutoIncrement();
    else
      ret = This->isAutoIncrement();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_isCaseSensitive__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCColumn::isCaseSensitive();
    else
      ret = This->isCaseSensitive();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_isCurrency__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCColumn::isCurrency();
    else
      ret = This->isCurrency();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_isDefinitelyWritable__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCColumn::isDefinitelyWritable();
    else
      ret = This->isDefinitelyWritable();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_isNullable__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCColumn::isNullable();
    else
      ret = This->isNullable();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_isReadOnly__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCColumn::isReadOnly();
    else
      ret = This->isReadOnly();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_isSearchable__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCColumn::isSearchable();
    else
      ret = This->isSearchable();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_isSigned__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCColumn::isSigned();
    else
      ret = This->isSigned();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_isWritable__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCColumn::isWritable();
    else
      ret = This->isWritable();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_updateAsciiStream_INLacdk_io_RReader_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCColumn::updateAsciiStream((acdk::io::RReader)args[0].getObjectVar(), args[1].getIntVar());
    else
        This->updateAsciiStream((acdk::io::RReader)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_updateBinaryStream_INLacdk_io_RReader_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCColumn::updateBinaryStream((acdk::io::RReader)args[0].getObjectVar(), args[1].getIntVar());
    else
        This->updateBinaryStream((acdk::io::RReader)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_updateBoolean_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCColumn::updateBoolean(args[0].getBoolVar());
    else
        This->updateBoolean(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_updateByte_B_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCColumn::updateByte(args[0].getByteVar());
    else
        This->updateByte(args[0].getByteVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_updateBytes_INLRbyteArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCColumn::updateBytes((RbyteArray)args[0].getObjectVar());
    else
        This->updateBytes((RbyteArray)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_updateCharacterStream_INLacdk_io_RReader_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCColumn::updateCharacterStream((acdk::io::RReader)args[0].getObjectVar(), args[1].getIntVar());
    else
        This->updateCharacterStream((acdk::io::RReader)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_updateDate_INLacdk_util_RDate__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCColumn::updateDate((acdk::util::RDate)args[0].getObjectVar());
    else
        This->updateDate((acdk::util::RDate)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_updateDouble_D_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCColumn::updateDouble(args[0].getDoubleVar());
    else
        This->updateDouble(args[0].getDoubleVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_updateFloat_F_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCColumn::updateFloat(args[0].getFloatVar());
    else
        This->updateFloat(args[0].getFloatVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_updateInt_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCColumn::updateInt(args[0].getIntVar());
    else
        This->updateInt(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_updateLong_J_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCColumn::updateLong(args[0].getLongVar());
    else
        This->updateLong(args[0].getLongVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_updateNull__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCColumn::updateNull();
    else
        This->updateNull();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_updateObject_INLRObject_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCColumn::updateObject((RObject)args[0].getObjectVar(), args[1].getIntVar());
    else
        This->updateObject((RObject)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_updateShort_S_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCColumn::updateShort(args[0].getShortVar());
    else
        This->updateShort(args[0].getShortVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_updateString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCColumn::updateString((RString)args[0].getObjectVar());
    else
        This->updateString((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_updateTime_INLRTime__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCColumn::updateTime((RTime)args[0].getObjectVar());
    else
        This->updateTime((RTime)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_updateTimestamp_INLRTimestamp__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCColumn::updateTimestamp((RTimestamp)args[0].getObjectVar());
    else
        This->updateTimestamp((RTimestamp)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCColumn_method_wasNull__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCColumn::wasNull();
    else
      ret = This->wasNull();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCColumn_fields___hndl_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->__hndl, flags);
    else
      This->__hndl = (RODBCHandle)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCColumn_fields__autoIncrement_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_autoIncrement, flags);
    else
      This->_autoIncrement = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCColumn_fields__autoIncrementFlag_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->_autoIncrementFlag), flags);
    else
      This->_autoIncrementFlag = (AttributeFlag)var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCColumn_fields__caseSensitive_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_caseSensitive, flags);
    else
      This->_caseSensitive = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCColumn_fields__caseSensitiveFlag_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->_caseSensitiveFlag), flags);
    else
      This->_caseSensitiveFlag = (AttributeFlag)var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCColumn_fields__catalogName_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_catalogName, flags);
    else
      This->_catalogName = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCColumn_fields__catalogNameFlag_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->_catalogNameFlag), flags);
    else
      This->_catalogNameFlag = (AttributeFlag)var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCColumn_fields__col_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_col, flags);
    else
      This->_col = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCColumn_fields__columnLabel_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_columnLabel, flags);
    else
      This->_columnLabel = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCColumn_fields__columnLabelFlag_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->_columnLabelFlag), flags);
    else
      This->_columnLabelFlag = (AttributeFlag)var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCColumn_fields__columnName_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_columnName, flags);
    else
      This->_columnName = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCColumn_fields__columnNameFlag_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->_columnNameFlag), flags);
    else
      This->_columnNameFlag = (AttributeFlag)var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCColumn_fields__columnTypeFlag_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->_columnTypeFlag), flags);
    else
      This->_columnTypeFlag = (AttributeFlag)var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCColumn_fields__columnTypeName_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_columnTypeName, flags);
    else
      This->_columnTypeName = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCColumn_fields__columnTypeNameFlag_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->_columnTypeNameFlag), flags);
    else
      This->_columnTypeNameFlag = (AttributeFlag)var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCColumn_fields__displaySize_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_displaySize, flags);
    else
      This->_displaySize = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCColumn_fields__displaySizeFlag_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->_displaySizeFlag), flags);
    else
      This->_displaySizeFlag = (AttributeFlag)var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCColumn_fields__fixedPrecScale_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_fixedPrecScale, flags);
    else
      This->_fixedPrecScale = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCColumn_fields__fixedPrecScaleFlag_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->_fixedPrecScaleFlag), flags);
    else
      This->_fixedPrecScaleFlag = (AttributeFlag)var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCColumn_fields__nullableFlag_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->_nullableFlag), flags);
    else
      This->_nullableFlag = (AttributeFlag)var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCColumn_fields__obj_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_obj, flags);
    else
      This->_obj = (RObject)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCColumn_fields__octetLength_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_octetLength, flags);
    else
      This->_octetLength = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCColumn_fields__octetLengthFlag_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->_octetLengthFlag), flags);
    else
      This->_octetLengthFlag = (AttributeFlag)var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCColumn_fields__precision_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_precision, flags);
    else
      This->_precision = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCColumn_fields__precisionFlag_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->_precisionFlag), flags);
    else
      This->_precisionFlag = (AttributeFlag)var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCColumn_fields__scale_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_scale, flags);
    else
      This->_scale = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCColumn_fields__scaleFlag_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->_scaleFlag), flags);
    else
      This->_scaleFlag = (AttributeFlag)var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCColumn_fields__schemaName_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_schemaName, flags);
    else
      This->_schemaName = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCColumn_fields__schemaNameFlag_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->_schemaNameFlag), flags);
    else
      This->_schemaNameFlag = (AttributeFlag)var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCColumn_fields__searchable_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_searchable, flags);
    else
      This->_searchable = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCColumn_fields__searchableFlag_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->_searchableFlag), flags);
    else
      This->_searchableFlag = (AttributeFlag)var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCColumn_fields__tableName_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_tableName, flags);
    else
      This->_tableName = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCColumn_fields__tableNameFlag_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->_tableNameFlag), flags);
    else
      This->_tableNameFlag = (AttributeFlag)var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCColumn_fields__unsigned_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_unsigned, flags);
    else
      This->_unsigned = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCColumn_fields__unsignedFlag_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->_unsignedFlag), flags);
    else
      This->_unsignedFlag = (AttributeFlag)var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCColumn_fields__wasNull_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_wasNull, flags);
    else
      This->_wasNull = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCColumn_fields__writable_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_writable, flags);
    else
      This->_writable = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCColumn_fields__writableFlag_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCColumn* This = dmi_cast<ODBCColumn>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->_writableFlag), flags);
    else
      This->_writableFlag = (AttributeFlag)var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ODBCColumn_fields___hndl = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "__hndl", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RODBCHandle::clazzInfo(),
  ODBCColumn_MetainfoWrapper::ODBCColumn_fields___hndl_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCColumn_fields__autoIncrement = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_autoIncrement", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  ODBCColumn_MetainfoWrapper::ODBCColumn_fields__autoIncrement_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCColumn_fields__autoIncrementFlag = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_autoIncrementFlag", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCColumn_MetainfoWrapper::ODBCColumn_fields__autoIncrementFlag_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCColumn_fields__caseSensitive = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_caseSensitive", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  ODBCColumn_MetainfoWrapper::ODBCColumn_fields__caseSensitive_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCColumn_fields__caseSensitiveFlag = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_caseSensitiveFlag", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCColumn_MetainfoWrapper::ODBCColumn_fields__caseSensitiveFlag_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCColumn_fields__catalogName = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_catalogName", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ODBCColumn_MetainfoWrapper::ODBCColumn_fields__catalogName_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCColumn_fields__catalogNameFlag = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_catalogNameFlag", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCColumn_MetainfoWrapper::ODBCColumn_fields__catalogNameFlag_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCColumn_fields__col = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_col", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCColumn_MetainfoWrapper::ODBCColumn_fields__col_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCColumn_fields__columnLabel = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_columnLabel", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ODBCColumn_MetainfoWrapper::ODBCColumn_fields__columnLabel_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCColumn_fields__columnLabelFlag = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_columnLabelFlag", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCColumn_MetainfoWrapper::ODBCColumn_fields__columnLabelFlag_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCColumn_fields__columnName = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_columnName", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ODBCColumn_MetainfoWrapper::ODBCColumn_fields__columnName_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCColumn_fields__columnNameFlag = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_columnNameFlag", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCColumn_MetainfoWrapper::ODBCColumn_fields__columnNameFlag_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCColumn_fields__columnTypeFlag = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_columnTypeFlag", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCColumn_MetainfoWrapper::ODBCColumn_fields__columnTypeFlag_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCColumn_fields__columnTypeName = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_columnTypeName", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ODBCColumn_MetainfoWrapper::ODBCColumn_fields__columnTypeName_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCColumn_fields__columnTypeNameFlag = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_columnTypeNameFlag", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCColumn_MetainfoWrapper::ODBCColumn_fields__columnTypeNameFlag_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCColumn_fields__displaySize = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_displaySize", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCColumn_MetainfoWrapper::ODBCColumn_fields__displaySize_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCColumn_fields__displaySizeFlag = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_displaySizeFlag", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCColumn_MetainfoWrapper::ODBCColumn_fields__displaySizeFlag_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCColumn_fields__fixedPrecScale = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_fixedPrecScale", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  ODBCColumn_MetainfoWrapper::ODBCColumn_fields__fixedPrecScale_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCColumn_fields__fixedPrecScaleFlag = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_fixedPrecScaleFlag", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCColumn_MetainfoWrapper::ODBCColumn_fields__fixedPrecScaleFlag_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCColumn_fields__nullableFlag = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_nullableFlag", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCColumn_MetainfoWrapper::ODBCColumn_fields__nullableFlag_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCColumn_fields__obj = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_obj", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(),
  ODBCColumn_MetainfoWrapper::ODBCColumn_fields__obj_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCColumn_fields__octetLength = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_octetLength", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCColumn_MetainfoWrapper::ODBCColumn_fields__octetLength_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCColumn_fields__octetLengthFlag = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_octetLengthFlag", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCColumn_MetainfoWrapper::ODBCColumn_fields__octetLengthFlag_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCColumn_fields__precision = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_precision", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCColumn_MetainfoWrapper::ODBCColumn_fields__precision_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCColumn_fields__precisionFlag = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_precisionFlag", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCColumn_MetainfoWrapper::ODBCColumn_fields__precisionFlag_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCColumn_fields__scale = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_scale", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCColumn_MetainfoWrapper::ODBCColumn_fields__scale_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCColumn_fields__scaleFlag = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_scaleFlag", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCColumn_MetainfoWrapper::ODBCColumn_fields__scaleFlag_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCColumn_fields__schemaName = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_schemaName", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ODBCColumn_MetainfoWrapper::ODBCColumn_fields__schemaName_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCColumn_fields__schemaNameFlag = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_schemaNameFlag", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCColumn_MetainfoWrapper::ODBCColumn_fields__schemaNameFlag_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCColumn_fields__searchable = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_searchable", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  ODBCColumn_MetainfoWrapper::ODBCColumn_fields__searchable_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCColumn_fields__searchableFlag = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_searchableFlag", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCColumn_MetainfoWrapper::ODBCColumn_fields__searchableFlag_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCColumn_fields__tableName = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_tableName", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ODBCColumn_MetainfoWrapper::ODBCColumn_fields__tableName_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCColumn_fields__tableNameFlag = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_tableNameFlag", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCColumn_MetainfoWrapper::ODBCColumn_fields__tableNameFlag_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCColumn_fields__unsigned = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_unsigned", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  ODBCColumn_MetainfoWrapper::ODBCColumn_fields__unsigned_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCColumn_fields__unsignedFlag = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_unsignedFlag", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCColumn_MetainfoWrapper::ODBCColumn_fields__unsignedFlag_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCColumn_fields__wasNull = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_wasNull", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  ODBCColumn_MetainfoWrapper::ODBCColumn_fields__wasNull_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCColumn_fields__writable = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_writable", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  ODBCColumn_MetainfoWrapper::ODBCColumn_fields__writable_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCColumn_fields__writableFlag = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_writableFlag", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCColumn_MetainfoWrapper::ODBCColumn_fields__writableFlag_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ODBCColumn_fields[] = 
{
  &ODBCColumn_fields___hndl,
  &ODBCColumn_fields__autoIncrement,
  &ODBCColumn_fields__autoIncrementFlag,
  &ODBCColumn_fields__caseSensitive,
  &ODBCColumn_fields__caseSensitiveFlag,
  &ODBCColumn_fields__catalogName,
  &ODBCColumn_fields__catalogNameFlag,
  &ODBCColumn_fields__col,
  &ODBCColumn_fields__columnLabel,
  &ODBCColumn_fields__columnLabelFlag,
  &ODBCColumn_fields__columnName,
  &ODBCColumn_fields__columnNameFlag,
  &ODBCColumn_fields__columnTypeFlag,
  &ODBCColumn_fields__columnTypeName,
  &ODBCColumn_fields__columnTypeNameFlag,
  &ODBCColumn_fields__displaySize,
  &ODBCColumn_fields__displaySizeFlag,
  &ODBCColumn_fields__fixedPrecScale,
  &ODBCColumn_fields__fixedPrecScaleFlag,
  &ODBCColumn_fields__nullableFlag,
  &ODBCColumn_fields__obj,
  &ODBCColumn_fields__octetLength,
  &ODBCColumn_fields__octetLengthFlag,
  &ODBCColumn_fields__precision,
  &ODBCColumn_fields__precisionFlag,
  &ODBCColumn_fields__scale,
  &ODBCColumn_fields__scaleFlag,
  &ODBCColumn_fields__schemaName,
  &ODBCColumn_fields__schemaNameFlag,
  &ODBCColumn_fields__searchable,
  &ODBCColumn_fields__searchableFlag,
  &ODBCColumn_fields__tableName,
  &ODBCColumn_fields__tableNameFlag,
  &ODBCColumn_fields__unsigned,
  &ODBCColumn_fields__unsignedFlag,
  &ODBCColumn_fields__wasNull,
  &ODBCColumn_fields__writable,
  &ODBCColumn_fields__writableFlag,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_19_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ODBCColumn_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_ODBCColumn__LRODBCColumn__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_ODBCColumn__LRODBCColumn__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_ODBCColumn__LRODBCColumn_ = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ODBCColumn", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ODBCColumn::clazzInfo(), // return type
  "_6_ODBCColumn", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_ODBCColumn__LRODBCColumn__args, // the arguments
  0, //arguments count
  ODBCColumn_methods_ODBCColumn__LRODBCColumn__exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_ODBCColumn__LRODBCColumn__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCColumn_methods_ODBCColumn_INLRODBCHandle_I_LRODBCColumn__arg_handle = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "handle", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RODBCHandle::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCColumn_methods_ODBCColumn_INLRODBCHandle_I_LRODBCColumn__arg_col = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "col", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_ODBCColumn_INLRODBCHandle_I_LRODBCColumn__args[] = 
{
  &ODBCColumn_methods_ODBCColumn_INLRODBCHandle_I_LRODBCColumn__arg_handle,
  &ODBCColumn_methods_ODBCColumn_INLRODBCHandle_I_LRODBCColumn__arg_col,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_ODBCColumn_INLRODBCHandle_I_LRODBCColumn__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_ODBCColumn_INLRODBCHandle_I_LRODBCColumn_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ODBCColumn", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ODBCColumn::clazzInfo(), // return type
  "_7_ODBCColumn", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_ODBCColumn_INLRODBCHandle_I_LRODBCColumn__args, // the arguments
  0, //arguments count
  ODBCColumn_methods_ODBCColumn_INLRODBCHandle_I_LRODBCColumn__exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_ODBCColumn_INLRODBCHandle_I_LRODBCColumn__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCColumn_methods__chkAttr_I_V_arg_attrID = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "attrID", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods__chkAttr_I_V_args[] = 
{
  &ODBCColumn_methods__chkAttr_I_V_arg_attrID,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods__chkAttr_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method__chkAttr_I_V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_chkAttr", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3__chkAttr", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods__chkAttr_I_V_args, // the arguments
  0, //arguments count
  ODBCColumn_methods__chkAttr_I_V_exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method__chkAttr_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods__chkNull__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods__chkNull__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method__chkNull__V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_chkNull", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4__chkNull", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods__chkNull__V_args, // the arguments
  0, //arguments count
  ODBCColumn_methods__chkNull__V_exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method__chkNull__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCColumn_methods__getAttribute_I_Z_arg_attrID = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "attrID", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods__getAttribute_I_Z_args[] = 
{
  &ODBCColumn_methods__getAttribute_I_Z_arg_attrID,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods__getAttribute_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method__getAttribute_I_Z = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_getAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_0__getAttribute", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods__getAttribute_I_Z_args, // the arguments
  0, //arguments count
  ODBCColumn_methods__getAttribute_I_Z_exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method__getAttribute_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods__getData__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods__getData__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method__getData__LRObject_ = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_getData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_1__getData", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods__getData__LRObject__args, // the arguments
  0, //arguments count
  ODBCColumn_methods__getData__LRObject__exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method__getData__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods__getNumber__LRNumber__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods__getNumber__LRNumber__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method__getNumber__LRNumber_ = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_getNumber", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNumber::clazzInfo(), // return type
  "_2__getNumber", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods__getNumber__LRNumber__args, // the arguments
  0, //arguments count
  ODBCColumn_methods__getNumber__LRNumber__exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method__getNumber__LRNumber__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods__getODBCHandle__LRODBCHandle__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods__getODBCHandle__LRODBCHandle__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCColumn__getODBCHandle__LRODBCHandle__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method__getODBCHandle__LRODBCHandle_ = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_getODBCHandle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RODBCHandle::clazzInfo(), // return type
  "_5__getODBCHandle", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods__getODBCHandle__LRODBCHandle__args, // the arguments
  0, //arguments count
  ODBCColumn_methods__getODBCHandle__LRODBCHandle__exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method__getODBCHandle__LRODBCHandle__dispatch, // invoke this method
  ODBCColumn__getODBCHandle__LRODBCHandle__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods__zeroData__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods__zeroData__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method__zeroData__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_zeroData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8__zeroData", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods__zeroData__V_args, // the arguments
  0, //arguments count
  ODBCColumn_methods__zeroData__V_exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method__zeroData__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_getArray__LRArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_getArray__LRArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_getArray__LRArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RArray::clazzInfo(), // return type
  "_a_getArray", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_getArray__LRArray__args, // the arguments
  0, //arguments count
  ODBCColumn_methods_getArray__LRArray__exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_getArray__LRArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_getAsciiStream__Lacdk_io_RReader__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_getAsciiStream__Lacdk_io_RReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_getAsciiStream__Lacdk_io_RReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAsciiStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo(), // return type
  "_b_getAsciiStream", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_getAsciiStream__Lacdk_io_RReader__args, // the arguments
  0, //arguments count
  ODBCColumn_methods_getAsciiStream__Lacdk_io_RReader__exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_getAsciiStream__Lacdk_io_RReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_getBinaryStream__Lacdk_io_RReader__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_getBinaryStream__Lacdk_io_RReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_getBinaryStream__Lacdk_io_RReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBinaryStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo(), // return type
  "_c_getBinaryStream", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_getBinaryStream__Lacdk_io_RReader__args, // the arguments
  0, //arguments count
  ODBCColumn_methods_getBinaryStream__Lacdk_io_RReader__exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_getBinaryStream__Lacdk_io_RReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_getBlob__LRBlob__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_getBlob__LRBlob__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_getBlob__LRBlob_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBlob", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBlob::clazzInfo(), // return type
  "_d_getBlob", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_getBlob__LRBlob__args, // the arguments
  0, //arguments count
  ODBCColumn_methods_getBlob__LRBlob__exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_getBlob__LRBlob__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_getBoolean__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_getBoolean__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_getBoolean__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBoolean", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_e_getBoolean", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_getBoolean__Z_args, // the arguments
  0, //arguments count
  ODBCColumn_methods_getBoolean__Z_exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_getBoolean__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_getByte__B_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_getByte__B_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_getByte__B = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getByte", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz(), // return type
  "_f_getByte", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_getByte__B_args, // the arguments
  0, //arguments count
  ODBCColumn_methods_getByte__B_exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_getByte__B_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_getBytes__LRbyteArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_getBytes__LRbyteArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_getBytes__LRbyteArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBytes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo(), // return type
  "_g_getBytes", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_getBytes__LRbyteArray__args, // the arguments
  0, //arguments count
  ODBCColumn_methods_getBytes__LRbyteArray__exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_getBytes__LRbyteArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_getCatalogName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_getCatalogName__LRString__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCColumn_getCatalogName__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_getCatalogName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCatalogName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_10_getCatalogName", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_getCatalogName__LRString__args, // the arguments
  0, //arguments count
  ODBCColumn_methods_getCatalogName__LRString__exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_getCatalogName__LRString__dispatch, // invoke this method
  ODBCColumn_getCatalogName__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_getCharacterStream__Lacdk_io_RReader__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_getCharacterStream__Lacdk_io_RReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_getCharacterStream__Lacdk_io_RReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCharacterStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo(), // return type
  "_h_getCharacterStream", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_getCharacterStream__Lacdk_io_RReader__args, // the arguments
  0, //arguments count
  ODBCColumn_methods_getCharacterStream__Lacdk_io_RReader__exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_getCharacterStream__Lacdk_io_RReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_getColumnClassName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_getColumnClassName__LRString__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCColumn_getColumnClassName__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_getColumnClassName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColumnClassName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_16_getColumnClassName", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_getColumnClassName__LRString__args, // the arguments
  0, //arguments count
  ODBCColumn_methods_getColumnClassName__LRString__exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_getColumnClassName__LRString__dispatch, // invoke this method
  ODBCColumn_getColumnClassName__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_getColumnCount__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_getColumnCount__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_getColumnCount__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColumnCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_17_getColumnCount", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_getColumnCount__I_args, // the arguments
  0, //arguments count
  ODBCColumn_methods_getColumnCount__I_exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_getColumnCount__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_getColumnDisplaySize__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_getColumnDisplaySize__I_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCColumn_getColumnDisplaySize__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_getColumnDisplaySize__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColumnDisplaySize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_T_getColumnDisplaySize", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_getColumnDisplaySize__I_args, // the arguments
  0, //arguments count
  ODBCColumn_methods_getColumnDisplaySize__I_exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_getColumnDisplaySize__I_dispatch, // invoke this method
  ODBCColumn_getColumnDisplaySize__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_getColumnLabel__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_getColumnLabel__LRString__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCColumn_getColumnLabel__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_getColumnLabel__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColumnLabel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_U_getColumnLabel", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_getColumnLabel__LRString__args, // the arguments
  0, //arguments count
  ODBCColumn_methods_getColumnLabel__LRString__exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_getColumnLabel__LRString__dispatch, // invoke this method
  ODBCColumn_getColumnLabel__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_getColumnName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_getColumnName__LRString__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCColumn_getColumnName__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_getColumnName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColumnName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_V_getColumnName", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_getColumnName__LRString__args, // the arguments
  0, //arguments count
  ODBCColumn_methods_getColumnName__LRString__exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_getColumnName__LRString__dispatch, // invoke this method
  ODBCColumn_getColumnName__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_getColumnTypeName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_getColumnTypeName__LRString__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCColumn_getColumnTypeName__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_getColumnTypeName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColumnTypeName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_12_getColumnTypeName", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_getColumnTypeName__LRString__args, // the arguments
  0, //arguments count
  ODBCColumn_methods_getColumnTypeName__LRString__exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_getColumnTypeName__LRString__dispatch, // invoke this method
  ODBCColumn_getColumnTypeName__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_getConcurrency__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_getConcurrency__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_getConcurrency__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getConcurrency", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_i_getConcurrency", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_getConcurrency__I_args, // the arguments
  0, //arguments count
  ODBCColumn_methods_getConcurrency__I_exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_getConcurrency__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_getCursorName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_getCursorName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_getCursorName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCursorName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_j_getCursorName", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_getCursorName__LRString__args, // the arguments
  0, //arguments count
  ODBCColumn_methods_getCursorName__LRString__exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_getCursorName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_getDate__Lacdk_util_RDate__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_getDate__Lacdk_util_RDate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_getDate__Lacdk_util_RDate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RDate::clazzInfo(), // return type
  "_k_getDate", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_getDate__Lacdk_util_RDate__args, // the arguments
  0, //arguments count
  ODBCColumn_methods_getDate__Lacdk_util_RDate__exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_getDate__Lacdk_util_RDate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_getDouble__D_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_getDouble__D_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_getDouble__D = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDouble", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(), // return type
  "_l_getDouble", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_getDouble__D_args, // the arguments
  0, //arguments count
  ODBCColumn_methods_getDouble__D_exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_getDouble__D_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_getFloat__F_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_getFloat__F_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_getFloat__F = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFloat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz(), // return type
  "_m_getFloat", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_getFloat__F_args, // the arguments
  0, //arguments count
  ODBCColumn_methods_getFloat__F_exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_getFloat__F_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_getInt__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_getInt__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_getInt__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_n_getInt", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_getInt__I_args, // the arguments
  0, //arguments count
  ODBCColumn_methods_getInt__I_exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_getInt__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_getLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_getLength__I_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCColumn_getLength__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_getLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_18_getLength", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_getLength__I_args, // the arguments
  0, //arguments count
  ODBCColumn_methods_getLength__I_exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_getLength__I_dispatch, // invoke this method
  ODBCColumn_getLength__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_getLong__J_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_getLong__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_getLong__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLong", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_o_getLong", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_getLong__J_args, // the arguments
  0, //arguments count
  ODBCColumn_methods_getLong__J_exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_getLong__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_getNumber__LRNumber__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_getNumber__LRNumber__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_getNumber__LRNumber_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNumber", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNumber::clazzInfo(), // return type
  "_9_getNumber", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_getNumber__LRNumber__args, // the arguments
  0, //arguments count
  ODBCColumn_methods_getNumber__LRNumber__exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_getNumber__LRNumber__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_getObject__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_getObject__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_getObject__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_p_getObject", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_getObject__LRObject__args, // the arguments
  0, //arguments count
  ODBCColumn_methods_getObject__LRObject__exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_getObject__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCColumn_methods_getObject_INLacdk_util_RMap__LRObject__arg_map = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "map", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_getObject_INLacdk_util_RMap__LRObject__args[] = 
{
  &ODBCColumn_methods_getObject_INLacdk_util_RMap__LRObject__arg_map,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_getObject_INLacdk_util_RMap__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_getObject_INLacdk_util_RMap__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_q_getObject", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_getObject_INLacdk_util_RMap__LRObject__args, // the arguments
  0, //arguments count
  ODBCColumn_methods_getObject_INLacdk_util_RMap__LRObject__exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_getObject_INLacdk_util_RMap__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_getPrecision__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_getPrecision__I_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCColumn_getPrecision__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_getPrecision__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPrecision", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_X_getPrecision", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_getPrecision__I_args, // the arguments
  0, //arguments count
  ODBCColumn_methods_getPrecision__I_exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_getPrecision__I_dispatch, // invoke this method
  ODBCColumn_getPrecision__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_getScale__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_getScale__I_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCColumn_getScale__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_getScale__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getScale", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_Y_getScale", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_getScale__I_args, // the arguments
  0, //arguments count
  ODBCColumn_methods_getScale__I_exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_getScale__I_dispatch, // invoke this method
  ODBCColumn_getScale__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_getSchemaName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_getSchemaName__LRString__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCColumn_getSchemaName__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_getSchemaName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSchemaName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_W_getSchemaName", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_getSchemaName__LRString__args, // the arguments
  0, //arguments count
  ODBCColumn_methods_getSchemaName__LRString__exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_getSchemaName__LRString__dispatch, // invoke this method
  ODBCColumn_getSchemaName__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_getShort__S_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_getShort__S_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_getShort__S = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getShort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(), // return type
  "_r_getShort", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_getShort__S_args, // the arguments
  0, //arguments count
  ODBCColumn_methods_getShort__S_exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_getShort__S_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_getString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_getString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_getString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_s_getString", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_getString__LRString__args, // the arguments
  0, //arguments count
  ODBCColumn_methods_getString__LRString__exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_getString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_getTableName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_getTableName__LRString__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCColumn_getTableName__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_getTableName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTableName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_Z_getTableName", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_getTableName__LRString__args, // the arguments
  0, //arguments count
  ODBCColumn_methods_getTableName__LRString__exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_getTableName__LRString__dispatch, // invoke this method
  ODBCColumn_getTableName__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_getTime__LRTime__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_getTime__LRTime__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_getTime__LRTime_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTime", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTime::clazzInfo(), // return type
  "_t_getTime", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_getTime__LRTime__args, // the arguments
  0, //arguments count
  ODBCColumn_methods_getTime__LRTime__exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_getTime__LRTime__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_getTimestamp__LRTimestamp__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_getTimestamp__LRTimestamp__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_getTimestamp__LRTimestamp_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTimestamp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTimestamp::clazzInfo(), // return type
  "_u_getTimestamp", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_getTimestamp__LRTimestamp__args, // the arguments
  0, //arguments count
  ODBCColumn_methods_getTimestamp__LRTimestamp__exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_getTimestamp__LRTimestamp__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_isAutoIncrement__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_isAutoIncrement__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCColumn_isAutoIncrement__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_isAutoIncrement__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isAutoIncrement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_N_isAutoIncrement", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_isAutoIncrement__Z_args, // the arguments
  0, //arguments count
  ODBCColumn_methods_isAutoIncrement__Z_exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_isAutoIncrement__Z_dispatch, // invoke this method
  ODBCColumn_isAutoIncrement__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_isCaseSensitive__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_isCaseSensitive__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCColumn_isCaseSensitive__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_isCaseSensitive__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isCaseSensitive", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_O_isCaseSensitive", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_isCaseSensitive__Z_args, // the arguments
  0, //arguments count
  ODBCColumn_methods_isCaseSensitive__Z_exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_isCaseSensitive__Z_dispatch, // invoke this method
  ODBCColumn_isCaseSensitive__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_isCurrency__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_isCurrency__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCColumn_isCurrency__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_isCurrency__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isCurrency", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_Q_isCurrency", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_isCurrency__Z_args, // the arguments
  0, //arguments count
  ODBCColumn_methods_isCurrency__Z_exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_isCurrency__Z_dispatch, // invoke this method
  ODBCColumn_isCurrency__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_isDefinitelyWritable__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_isDefinitelyWritable__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCColumn_isDefinitelyWritable__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_isDefinitelyWritable__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isDefinitelyWritable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_15_isDefinitelyWritable", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_isDefinitelyWritable__Z_args, // the arguments
  0, //arguments count
  ODBCColumn_methods_isDefinitelyWritable__Z_exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_isDefinitelyWritable__Z_dispatch, // invoke this method
  ODBCColumn_isDefinitelyWritable__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_isNullable__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_isNullable__I_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCColumn_isNullable__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_isNullable__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isNullable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_R_isNullable", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_isNullable__I_args, // the arguments
  0, //arguments count
  ODBCColumn_methods_isNullable__I_exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_isNullable__I_dispatch, // invoke this method
  ODBCColumn_isNullable__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_isReadOnly__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_isReadOnly__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCColumn_isReadOnly__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_isReadOnly__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isReadOnly", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_13_isReadOnly", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_isReadOnly__Z_args, // the arguments
  0, //arguments count
  ODBCColumn_methods_isReadOnly__Z_exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_isReadOnly__Z_dispatch, // invoke this method
  ODBCColumn_isReadOnly__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_isSearchable__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_isSearchable__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCColumn_isSearchable__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_isSearchable__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isSearchable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_P_isSearchable", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_isSearchable__Z_args, // the arguments
  0, //arguments count
  ODBCColumn_methods_isSearchable__Z_exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_isSearchable__Z_dispatch, // invoke this method
  ODBCColumn_isSearchable__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_isSigned__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_isSigned__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCColumn_isSigned__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_isSigned__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isSigned", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_S_isSigned", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_isSigned__Z_args, // the arguments
  0, //arguments count
  ODBCColumn_methods_isSigned__Z_exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_isSigned__Z_dispatch, // invoke this method
  ODBCColumn_isSigned__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_isWritable__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_isWritable__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCColumn_isWritable__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_isWritable__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isWritable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_14_isWritable", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_isWritable__Z_args, // the arguments
  0, //arguments count
  ODBCColumn_methods_isWritable__Z_exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_isWritable__Z_dispatch, // invoke this method
  ODBCColumn_isWritable__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCColumn_methods_updateAsciiStream_INLacdk_io_RReader_I_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCColumn_methods_updateAsciiStream_INLacdk_io_RReader_I_V_arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_updateAsciiStream_INLacdk_io_RReader_I_V_args[] = 
{
  &ODBCColumn_methods_updateAsciiStream_INLacdk_io_RReader_I_V_arg_x,
  &ODBCColumn_methods_updateAsciiStream_INLacdk_io_RReader_I_V_arg_length,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_updateAsciiStream_INLacdk_io_RReader_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_updateAsciiStream_INLacdk_io_RReader_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateAsciiStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_v_updateAsciiStream", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_updateAsciiStream_INLacdk_io_RReader_I_V_args, // the arguments
  0, //arguments count
  ODBCColumn_methods_updateAsciiStream_INLacdk_io_RReader_I_V_exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_updateAsciiStream_INLacdk_io_RReader_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCColumn_methods_updateBinaryStream_INLacdk_io_RReader_I_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCColumn_methods_updateBinaryStream_INLacdk_io_RReader_I_V_arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_updateBinaryStream_INLacdk_io_RReader_I_V_args[] = 
{
  &ODBCColumn_methods_updateBinaryStream_INLacdk_io_RReader_I_V_arg_x,
  &ODBCColumn_methods_updateBinaryStream_INLacdk_io_RReader_I_V_arg_length,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_updateBinaryStream_INLacdk_io_RReader_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_updateBinaryStream_INLacdk_io_RReader_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateBinaryStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_w_updateBinaryStream", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_updateBinaryStream_INLacdk_io_RReader_I_V_args, // the arguments
  0, //arguments count
  ODBCColumn_methods_updateBinaryStream_INLacdk_io_RReader_I_V_exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_updateBinaryStream_INLacdk_io_RReader_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCColumn_methods_updateBoolean_Z_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_updateBoolean_Z_V_args[] = 
{
  &ODBCColumn_methods_updateBoolean_Z_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_updateBoolean_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_updateBoolean_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateBoolean", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_x_updateBoolean", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_updateBoolean_Z_V_args, // the arguments
  0, //arguments count
  ODBCColumn_methods_updateBoolean_Z_V_exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_updateBoolean_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCColumn_methods_updateByte_B_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_updateByte_B_V_args[] = 
{
  &ODBCColumn_methods_updateByte_B_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_updateByte_B_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_updateByte_B_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateByte", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_y_updateByte", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_updateByte_B_V_args, // the arguments
  0, //arguments count
  ODBCColumn_methods_updateByte_B_V_exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_updateByte_B_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCColumn_methods_updateBytes_INLRbyteArray__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_updateBytes_INLRbyteArray__V_args[] = 
{
  &ODBCColumn_methods_updateBytes_INLRbyteArray__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_updateBytes_INLRbyteArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_updateBytes_INLRbyteArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateBytes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_z_updateBytes", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_updateBytes_INLRbyteArray__V_args, // the arguments
  0, //arguments count
  ODBCColumn_methods_updateBytes_INLRbyteArray__V_exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_updateBytes_INLRbyteArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCColumn_methods_updateCharacterStream_INLacdk_io_RReader_I_V_arg_reader = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "reader", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCColumn_methods_updateCharacterStream_INLacdk_io_RReader_I_V_arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_updateCharacterStream_INLacdk_io_RReader_I_V_args[] = 
{
  &ODBCColumn_methods_updateCharacterStream_INLacdk_io_RReader_I_V_arg_reader,
  &ODBCColumn_methods_updateCharacterStream_INLacdk_io_RReader_I_V_arg_length,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_updateCharacterStream_INLacdk_io_RReader_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_updateCharacterStream_INLacdk_io_RReader_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateCharacterStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_A_updateCharacterStream", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_updateCharacterStream_INLacdk_io_RReader_I_V_args, // the arguments
  0, //arguments count
  ODBCColumn_methods_updateCharacterStream_INLacdk_io_RReader_I_V_exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_updateCharacterStream_INLacdk_io_RReader_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCColumn_methods_updateDate_INLacdk_util_RDate__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RDate::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_updateDate_INLacdk_util_RDate__V_args[] = 
{
  &ODBCColumn_methods_updateDate_INLacdk_util_RDate__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_updateDate_INLacdk_util_RDate__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_updateDate_INLacdk_util_RDate__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateDate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_B_updateDate", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_updateDate_INLacdk_util_RDate__V_args, // the arguments
  0, //arguments count
  ODBCColumn_methods_updateDate_INLacdk_util_RDate__V_exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_updateDate_INLacdk_util_RDate__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCColumn_methods_updateDouble_D_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_updateDouble_D_V_args[] = 
{
  &ODBCColumn_methods_updateDouble_D_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_updateDouble_D_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_updateDouble_D_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateDouble", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_C_updateDouble", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_updateDouble_D_V_args, // the arguments
  0, //arguments count
  ODBCColumn_methods_updateDouble_D_V_exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_updateDouble_D_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCColumn_methods_updateFloat_F_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_updateFloat_F_V_args[] = 
{
  &ODBCColumn_methods_updateFloat_F_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_updateFloat_F_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_updateFloat_F_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateFloat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_D_updateFloat", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_updateFloat_F_V_args, // the arguments
  0, //arguments count
  ODBCColumn_methods_updateFloat_F_V_exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_updateFloat_F_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCColumn_methods_updateInt_I_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_updateInt_I_V_args[] = 
{
  &ODBCColumn_methods_updateInt_I_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_updateInt_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_updateInt_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateInt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_E_updateInt", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_updateInt_I_V_args, // the arguments
  0, //arguments count
  ODBCColumn_methods_updateInt_I_V_exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_updateInt_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCColumn_methods_updateLong_J_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_updateLong_J_V_args[] = 
{
  &ODBCColumn_methods_updateLong_J_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_updateLong_J_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_updateLong_J_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateLong", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_F_updateLong", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_updateLong_J_V_args, // the arguments
  0, //arguments count
  ODBCColumn_methods_updateLong_J_V_exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_updateLong_J_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_updateNull__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_updateNull__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_updateNull__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateNull", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_G_updateNull", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_updateNull__V_args, // the arguments
  0, //arguments count
  ODBCColumn_methods_updateNull__V_exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_updateNull__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCColumn_methods_updateObject_INLRObject_I_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCColumn_methods_updateObject_INLRObject_I_V_arg_scale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "scale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_updateObject_INLRObject_I_V_args[] = 
{
  &ODBCColumn_methods_updateObject_INLRObject_I_V_arg_x,
  &ODBCColumn_methods_updateObject_INLRObject_I_V_arg_scale,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_updateObject_INLRObject_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_updateObject_INLRObject_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_H_updateObject", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_updateObject_INLRObject_I_V_args, // the arguments
  0, //arguments count
  ODBCColumn_methods_updateObject_INLRObject_I_V_exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_updateObject_INLRObject_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCColumn_methods_updateShort_S_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_updateShort_S_V_args[] = 
{
  &ODBCColumn_methods_updateShort_S_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_updateShort_S_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_updateShort_S_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateShort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_I_updateShort", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_updateShort_S_V_args, // the arguments
  0, //arguments count
  ODBCColumn_methods_updateShort_S_V_exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_updateShort_S_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCColumn_methods_updateString_INLRString__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_updateString_INLRString__V_args[] = 
{
  &ODBCColumn_methods_updateString_INLRString__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_updateString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_updateString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_J_updateString", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_updateString_INLRString__V_args, // the arguments
  0, //arguments count
  ODBCColumn_methods_updateString_INLRString__V_exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_updateString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCColumn_methods_updateTime_INLRTime__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTime::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_updateTime_INLRTime__V_args[] = 
{
  &ODBCColumn_methods_updateTime_INLRTime__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_updateTime_INLRTime__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_updateTime_INLRTime__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateTime", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_K_updateTime", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_updateTime_INLRTime__V_args, // the arguments
  0, //arguments count
  ODBCColumn_methods_updateTime_INLRTime__V_exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_updateTime_INLRTime__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCColumn_methods_updateTimestamp_INLRTimestamp__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTimestamp::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_updateTimestamp_INLRTimestamp__V_args[] = 
{
  &ODBCColumn_methods_updateTimestamp_INLRTimestamp__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_updateTimestamp_INLRTimestamp__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_updateTimestamp_INLRTimestamp__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateTimestamp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_L_updateTimestamp", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_updateTimestamp_INLRTimestamp__V_args, // the arguments
  0, //arguments count
  ODBCColumn_methods_updateTimestamp_INLRTimestamp__V_exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_updateTimestamp_INLRTimestamp__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCColumn_methods_wasNull__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCColumn_methods_wasNull__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCColumn_method_wasNull__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "wasNull", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_M_wasNull", // alternative name of method
  -1, // altlabelHashCode
  ODBCColumn_methods_wasNull__Z_args, // the arguments
  0, //arguments count
  ODBCColumn_methods_wasNull__Z_exceptions, // the declared exceptions
  ODBCColumn_MetainfoWrapper::ODBCColumn_method_wasNull__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ODBCColumn_methods[] = 
{
  &ODBCColumn_method_GetClass__L_acdk_lang_RClass_,
  &ODBCColumn_method_ODBCColumn__LRODBCColumn_,
  &ODBCColumn_method_ODBCColumn_INLRODBCHandle_I_LRODBCColumn_,
  &ODBCColumn_method__chkAttr_I_V,
  &ODBCColumn_method__chkNull__V,
  &ODBCColumn_method__getAttribute_I_Z,
  &ODBCColumn_method__getData__LRObject_,
  &ODBCColumn_method__getNumber__LRNumber_,
  &ODBCColumn_method__getODBCHandle__LRODBCHandle_,
  &ODBCColumn_method__zeroData__V,
  &ODBCColumn_method_getArray__LRArray_,
  &ODBCColumn_method_getAsciiStream__Lacdk_io_RReader_,
  &ODBCColumn_method_getBinaryStream__Lacdk_io_RReader_,
  &ODBCColumn_method_getBlob__LRBlob_,
  &ODBCColumn_method_getBoolean__Z,
  &ODBCColumn_method_getByte__B,
  &ODBCColumn_method_getBytes__LRbyteArray_,
  &ODBCColumn_method_getCatalogName__LRString_,
  &ODBCColumn_method_getCharacterStream__Lacdk_io_RReader_,
  &ODBCColumn_method_getColumnClassName__LRString_,
  &ODBCColumn_method_getColumnCount__I,
  &ODBCColumn_method_getColumnDisplaySize__I,
  &ODBCColumn_method_getColumnLabel__LRString_,
  &ODBCColumn_method_getColumnName__LRString_,
  &ODBCColumn_method_getColumnTypeName__LRString_,
  &ODBCColumn_method_getConcurrency__I,
  &ODBCColumn_method_getCursorName__LRString_,
  &ODBCColumn_method_getDate__Lacdk_util_RDate_,
  &ODBCColumn_method_getDouble__D,
  &ODBCColumn_method_getFloat__F,
  &ODBCColumn_method_getInt__I,
  &ODBCColumn_method_getLength__I,
  &ODBCColumn_method_getLong__J,
  &ODBCColumn_method_getNumber__LRNumber_,
  &ODBCColumn_method_getObject__LRObject_,
  &ODBCColumn_method_getObject_INLacdk_util_RMap__LRObject_,
  &ODBCColumn_method_getPrecision__I,
  &ODBCColumn_method_getScale__I,
  &ODBCColumn_method_getSchemaName__LRString_,
  &ODBCColumn_method_getShort__S,
  &ODBCColumn_method_getString__LRString_,
  &ODBCColumn_method_getTableName__LRString_,
  &ODBCColumn_method_getTime__LRTime_,
  &ODBCColumn_method_getTimestamp__LRTimestamp_,
  &ODBCColumn_method_isAutoIncrement__Z,
  &ODBCColumn_method_isCaseSensitive__Z,
  &ODBCColumn_method_isCurrency__Z,
  &ODBCColumn_method_isDefinitelyWritable__Z,
  &ODBCColumn_method_isNullable__I,
  &ODBCColumn_method_isReadOnly__Z,
  &ODBCColumn_method_isSearchable__Z,
  &ODBCColumn_method_isSigned__Z,
  &ODBCColumn_method_isWritable__Z,
  &ODBCColumn_method_updateAsciiStream_INLacdk_io_RReader_I_V,
  &ODBCColumn_method_updateBinaryStream_INLacdk_io_RReader_I_V,
  &ODBCColumn_method_updateBoolean_Z_V,
  &ODBCColumn_method_updateByte_B_V,
  &ODBCColumn_method_updateBytes_INLRbyteArray__V,
  &ODBCColumn_method_updateCharacterStream_INLacdk_io_RReader_I_V,
  &ODBCColumn_method_updateDate_INLacdk_util_RDate__V,
  &ODBCColumn_method_updateDouble_D_V,
  &ODBCColumn_method_updateFloat_F_V,
  &ODBCColumn_method_updateInt_I_V,
  &ODBCColumn_method_updateLong_J_V,
  &ODBCColumn_method_updateNull__V,
  &ODBCColumn_method_updateObject_INLRObject_I_V,
  &ODBCColumn_method_updateShort_S_V,
  &ODBCColumn_method_updateString_INLRString__V,
  &ODBCColumn_method_updateTime_INLRTime__V,
  &ODBCColumn_method_updateTimestamp_INLRTimestamp__V,
  &ODBCColumn_method_wasNull__Z,
  0
};


struct ODBCColumn_MetaInfoInitializer
{  ODBCColumn_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ODBCColumn::clazzInfo();
    ci->fields =  _ODBCColumn_fields;
    ci->methods =  _ODBCColumn_methods;
    ci->_scopeParent = acdk_sql_odbc_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ODBCColumn_MetaInfoInitializer ODBCColumn_MetaInfoInitializer_staticinstance__;


struct ODBCColumn_clazzInfo_ClazzAttributesResInitializer1
{
  ODBCColumn_clazzInfo_ClazzAttributesResInitializer1()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&ODBCColumn_methods__getAttribute_I_Z_arg_attrID, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)AttributeIDMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&ODBCColumn_methods__chkAttr_I_V_arg_attrID, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)AttributeIDMetaInf::GetEnumInfo()));
  }
};

ODBCColumn_clazzInfo_ClazzAttributesResInitializer1 ODBCColumn_clazzInfo_ClazzAttributesResInitializer1_instance;



} // namespace acdk
} // namespace sql
} // namespace odbc


namespace acdk { 
namespace sql { 
namespace odbc { 

using namespace acdk::lang;
using namespace acdk::sql;

//static
::acdk::lang::RObject
ODBCConnection_create_array(int length)
{
  return new ObjectArrayImpl<RODBCConnection>(length);
}

//static
::acdk::lang::RObject
ODBCConnection_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ODBCConnection_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCConnection_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ODBCConnection::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCConnection_method_ODBCConnection_INLRODBCDriver__LRODBCConnection__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ODBCConnection((RODBCDriver)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCConnection_method__getODBCDriver__LRODBCDriver__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCConnection* This = dmi_cast<ODBCConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCConnection::_getODBCDriver();
    else
        ret = (::acdk::lang::RObject)This->_getODBCDriver();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCConnection_method__getODBCHandle__LRODBCHandle__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCConnection* This = dmi_cast<ODBCConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCConnection::_getODBCHandle();
    else
        ret = (::acdk::lang::RObject)This->_getODBCHandle();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCConnection_method__parseProperties_INLacdk_util_RProperties__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCConnection* This = dmi_cast<ODBCConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCConnection::_parseProperties((acdk::util::RProperties)args[0].getObjectVar());
    else
        This->_parseProperties((acdk::util::RProperties)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCConnection_method__setSQLFlags__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCConnection* This = dmi_cast<ODBCConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCConnection::_setSQLFlags();
    else
        This->_setSQLFlags();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCConnection_method_clearWarnings__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCConnection* This = dmi_cast<ODBCConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCConnection::clearWarnings();
    else
        This->clearWarnings();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCConnection_method_close__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCConnection* This = dmi_cast<ODBCConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCConnection::close();
    else
        This->close();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCConnection_method_commit__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCConnection* This = dmi_cast<ODBCConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCConnection::commit();
    else
        This->commit();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCConnection_method_createStatement__LRStatement__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCConnection* This = dmi_cast<ODBCConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCConnection::createStatement();
    else
        ret = (::acdk::lang::RObject)This->createStatement();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCConnection_method_createStatement_II_LRStatement__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCConnection* This = dmi_cast<ODBCConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCConnection::createStatement(args[0].getIntVar(), args[1].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->createStatement(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCConnection_method_getAutoCommit__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCConnection* This = dmi_cast<ODBCConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCConnection::getAutoCommit();
    else
      ret = This->getAutoCommit();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCConnection_method_getCatalog__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCConnection* This = dmi_cast<ODBCConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCConnection::getCatalog();
    else
        ret = (::acdk::lang::RObject)This->getCatalog();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCConnection_method_getMetaData__LRDatabaseMetaData__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCConnection* This = dmi_cast<ODBCConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCConnection::getMetaData();
    else
        ret = (::acdk::lang::RObject)This->getMetaData();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCConnection_method_getTransactionIsolation__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCConnection* This = dmi_cast<ODBCConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCConnection::getTransactionIsolation();
    else
      ret = This->getTransactionIsolation();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCConnection_method_getTypeMap__Lacdk_util_RMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCConnection* This = dmi_cast<ODBCConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCConnection::getTypeMap();
    else
        ret = (::acdk::lang::RObject)This->getTypeMap();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCConnection_method_getWarnings__L_acdk_sql_RSQLWarning__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCConnection* This = dmi_cast<ODBCConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCConnection::getWarnings();
    else
        ret = (::acdk::lang::RObject)This->getWarnings();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCConnection_method_init_INLRString_INLacdk_util_RProperties__LRODBCConnection__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCConnection* This = dmi_cast<ODBCConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCConnection::init((RString)args[0].getObjectVar(), (acdk::util::RProperties)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->init((RString)args[0].getObjectVar(), (acdk::util::RProperties)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCConnection_method_isClosed__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCConnection* This = dmi_cast<ODBCConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCConnection::isClosed();
    else
      ret = This->isClosed();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCConnection_method_isReadOnly__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCConnection* This = dmi_cast<ODBCConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCConnection::isReadOnly();
    else
      ret = This->isReadOnly();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCConnection_method_nativeSQL_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCConnection* This = dmi_cast<ODBCConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCConnection::nativeSQL((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->nativeSQL((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCConnection_method_prepareCall_INLRString__LRCallableStatement__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCConnection* This = dmi_cast<ODBCConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCConnection::prepareCall((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->prepareCall((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCConnection_method_prepareStatement_INLRString__LRPreparedStatement__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCConnection* This = dmi_cast<ODBCConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCConnection::prepareStatement((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->prepareStatement((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCConnection_method_rollback__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCConnection* This = dmi_cast<ODBCConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCConnection::rollback();
    else
        This->rollback();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCConnection_method_setAutoCommit_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCConnection* This = dmi_cast<ODBCConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCConnection::setAutoCommit(args[0].getBoolVar());
    else
        This->setAutoCommit(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCConnection_method_setCatalog_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCConnection* This = dmi_cast<ODBCConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCConnection::setCatalog((RString)args[0].getObjectVar());
    else
        This->setCatalog((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCConnection_method_setReadOnly_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCConnection* This = dmi_cast<ODBCConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCConnection::setReadOnly(args[0].getBoolVar());
    else
        This->setReadOnly(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCConnection_method_setTransactionIsolation_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCConnection* This = dmi_cast<ODBCConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCConnection::setTransactionIsolation(args[0].getIntVar());
    else
        This->setTransactionIsolation(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCConnection_method_setTypeMap_INLacdk_util_RMap__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCConnection* This = dmi_cast<ODBCConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCConnection::setTypeMap((acdk::util::RMap)args[0].getObjectVar());
    else
        This->setTypeMap((acdk::util::RMap)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCConnection_fields__asyncCalls_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCConnection* This = dmi_cast<ODBCConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_asyncCalls, flags);
    else
      This->_asyncCalls = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCConnection_fields__autoCommit_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCConnection* This = dmi_cast<ODBCConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_autoCommit, flags);
    else
      This->_autoCommit = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCConnection_fields__connectionTimeout_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCConnection* This = dmi_cast<ODBCConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_connectionTimeout, flags);
    else
      This->_connectionTimeout = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCConnection_fields__dbch_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCConnection* This = dmi_cast<ODBCConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_dbch, flags);
    else
      This->_dbch = (RODBCHandle)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCConnection_fields__driver_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCConnection* This = dmi_cast<ODBCConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_driver, flags);
    else
      This->_driver = (RODBCDriver)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCConnection_fields__loginTimeout_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCConnection* This = dmi_cast<ODBCConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_loginTimeout, flags);
    else
      This->_loginTimeout = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCConnection_fields__maxLength_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCConnection* This = dmi_cast<ODBCConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_maxLength, flags);
    else
      This->_maxLength = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCConnection_fields__maxRows_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCConnection* This = dmi_cast<ODBCConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_maxRows, flags);
    else
      This->_maxRows = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCConnection_fields__opened_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCConnection* This = dmi_cast<ODBCConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_opened, flags);
    else
      This->_opened = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCConnection_fields__prop_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCConnection* This = dmi_cast<ODBCConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_prop, flags);
    else
      This->_prop = (acdk::util::RProperties)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCConnection_fields__queryTimeout_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCConnection* This = dmi_cast<ODBCConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_queryTimeout, flags);
    else
      This->_queryTimeout = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCConnection_fields__readOnly_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCConnection* This = dmi_cast<ODBCConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_readOnly, flags);
    else
      This->_readOnly = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCConnection_fields__scanEscapes_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCConnection* This = dmi_cast<ODBCConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_scanEscapes, flags);
    else
      This->_scanEscapes = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCConnection_fields__scrollableCursors_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCConnection* This = dmi_cast<ODBCConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_scrollableCursors, flags);
    else
      This->_scrollableCursors = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCConnection_fields__traceCalls_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCConnection* This = dmi_cast<ODBCConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_traceCalls, flags);
    else
      This->_traceCalls = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCConnection_fields__url_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCConnection* This = dmi_cast<ODBCConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_url, flags);
    else
      This->_url = (RString)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ODBCConnection_fields__asyncCalls = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_asyncCalls", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  ODBCConnection_MetainfoWrapper::ODBCConnection_fields__asyncCalls_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCConnection_fields__autoCommit = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_autoCommit", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  ODBCConnection_MetainfoWrapper::ODBCConnection_fields__autoCommit_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCConnection_fields__connectionTimeout = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_connectionTimeout", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCConnection_MetainfoWrapper::ODBCConnection_fields__connectionTimeout_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCConnection_fields__dbch = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_dbch", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RODBCHandle::clazzInfo(),
  ODBCConnection_MetainfoWrapper::ODBCConnection_fields__dbch_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCConnection_fields__driver = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_driver", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RODBCDriver::clazzInfo(),
  ODBCConnection_MetainfoWrapper::ODBCConnection_fields__driver_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCConnection_fields__loginTimeout = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_loginTimeout", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCConnection_MetainfoWrapper::ODBCConnection_fields__loginTimeout_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCConnection_fields__maxLength = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_maxLength", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCConnection_MetainfoWrapper::ODBCConnection_fields__maxLength_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCConnection_fields__maxRows = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_maxRows", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCConnection_MetainfoWrapper::ODBCConnection_fields__maxRows_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCConnection_fields__opened = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_opened", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  ODBCConnection_MetainfoWrapper::ODBCConnection_fields__opened_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCConnection_fields__prop = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_prop", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RProperties::clazzInfo(),
  ODBCConnection_MetainfoWrapper::ODBCConnection_fields__prop_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCConnection_fields__queryTimeout = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_queryTimeout", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCConnection_MetainfoWrapper::ODBCConnection_fields__queryTimeout_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCConnection_fields__readOnly = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_readOnly", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  ODBCConnection_MetainfoWrapper::ODBCConnection_fields__readOnly_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCConnection_fields__scanEscapes = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_scanEscapes", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  ODBCConnection_MetainfoWrapper::ODBCConnection_fields__scanEscapes_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCConnection_fields__scrollableCursors = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_scrollableCursors", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  ODBCConnection_MetainfoWrapper::ODBCConnection_fields__scrollableCursors_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCConnection_fields__traceCalls = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_traceCalls", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  ODBCConnection_MetainfoWrapper::ODBCConnection_fields__traceCalls_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCConnection_fields__url = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_url", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ODBCConnection_MetainfoWrapper::ODBCConnection_fields__url_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ODBCConnection_fields[] = 
{
  &ODBCConnection_fields__asyncCalls,
  &ODBCConnection_fields__autoCommit,
  &ODBCConnection_fields__connectionTimeout,
  &ODBCConnection_fields__dbch,
  &ODBCConnection_fields__driver,
  &ODBCConnection_fields__loginTimeout,
  &ODBCConnection_fields__maxLength,
  &ODBCConnection_fields__maxRows,
  &ODBCConnection_fields__opened,
  &ODBCConnection_fields__prop,
  &ODBCConnection_fields__queryTimeout,
  &ODBCConnection_fields__readOnly,
  &ODBCConnection_fields__scanEscapes,
  &ODBCConnection_fields__scrollableCursors,
  &ODBCConnection_fields__traceCalls,
  &ODBCConnection_fields__url,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCConnection_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCConnection_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCConnection_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_t_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ODBCConnection_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ODBCConnection_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ODBCConnection_MetainfoWrapper::ODBCConnection_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCConnection_methods_ODBCConnection_INLRODBCDriver__LRODBCConnection__arg_driver = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "driver", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RODBCDriver::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCConnection_methods_ODBCConnection_INLRODBCDriver__LRODBCConnection__args[] = 
{
  &ODBCConnection_methods_ODBCConnection_INLRODBCDriver__LRODBCConnection__arg_driver,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCConnection_methods_ODBCConnection_INLRODBCDriver__LRODBCConnection__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCConnection_method_ODBCConnection_INLRODBCDriver__LRODBCConnection_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ODBCConnection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ODBCConnection::clazzInfo(), // return type
  "_o_ODBCConnection", // alternative name of method
  -1, // altlabelHashCode
  ODBCConnection_methods_ODBCConnection_INLRODBCDriver__LRODBCConnection__args, // the arguments
  0, //arguments count
  ODBCConnection_methods_ODBCConnection_INLRODBCDriver__LRODBCConnection__exceptions, // the declared exceptions
  ODBCConnection_MetainfoWrapper::ODBCConnection_method_ODBCConnection_INLRODBCDriver__LRODBCConnection__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCConnection_methods__getODBCDriver__LRODBCDriver__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCConnection_methods__getODBCDriver__LRODBCDriver__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCConnection_method__getODBCDriver__LRODBCDriver_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_getODBCDriver", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RODBCDriver::clazzInfo(), // return type
  "_n__getODBCDriver", // alternative name of method
  -1, // altlabelHashCode
  ODBCConnection_methods__getODBCDriver__LRODBCDriver__args, // the arguments
  0, //arguments count
  ODBCConnection_methods__getODBCDriver__LRODBCDriver__exceptions, // the declared exceptions
  ODBCConnection_MetainfoWrapper::ODBCConnection_method__getODBCDriver__LRODBCDriver__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCConnection_methods__getODBCHandle__LRODBCHandle__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCConnection_methods__getODBCHandle__LRODBCHandle__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCConnection_method__getODBCHandle__LRODBCHandle_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_getODBCHandle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RODBCHandle::clazzInfo(), // return type
  "_m__getODBCHandle", // alternative name of method
  -1, // altlabelHashCode
  ODBCConnection_methods__getODBCHandle__LRODBCHandle__args, // the arguments
  0, //arguments count
  ODBCConnection_methods__getODBCHandle__LRODBCHandle__exceptions, // the declared exceptions
  ODBCConnection_MetainfoWrapper::ODBCConnection_method__getODBCHandle__LRODBCHandle__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCConnection_methods__parseProperties_INLacdk_util_RProperties__V_arg_prop = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "prop", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RProperties::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCConnection_methods__parseProperties_INLacdk_util_RProperties__V_args[] = 
{
  &ODBCConnection_methods__parseProperties_INLacdk_util_RProperties__V_arg_prop,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCConnection_methods__parseProperties_INLacdk_util_RProperties__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCConnection_method__parseProperties_INLacdk_util_RProperties__V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_parseProperties", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_s__parseProperties", // alternative name of method
  -1, // altlabelHashCode
  ODBCConnection_methods__parseProperties_INLacdk_util_RProperties__V_args, // the arguments
  0, //arguments count
  ODBCConnection_methods__parseProperties_INLacdk_util_RProperties__V_exceptions, // the declared exceptions
  ODBCConnection_MetainfoWrapper::ODBCConnection_method__parseProperties_INLacdk_util_RProperties__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCConnection_methods__setSQLFlags__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCConnection_methods__setSQLFlags__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCConnection_method__setSQLFlags__V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_setSQLFlags", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_r__setSQLFlags", // alternative name of method
  -1, // altlabelHashCode
  ODBCConnection_methods__setSQLFlags__V_args, // the arguments
  0, //arguments count
  ODBCConnection_methods__setSQLFlags__V_exceptions, // the declared exceptions
  ODBCConnection_MetainfoWrapper::ODBCConnection_method__setSQLFlags__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCConnection_methods_clearWarnings__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCConnection_methods_clearWarnings__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCConnection_method_clearWarnings__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clearWarnings", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0_clearWarnings", // alternative name of method
  -1, // altlabelHashCode
  ODBCConnection_methods_clearWarnings__V_args, // the arguments
  0, //arguments count
  ODBCConnection_methods_clearWarnings__V_exceptions, // the declared exceptions
  ODBCConnection_MetainfoWrapper::ODBCConnection_method_clearWarnings__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCConnection_methods_close__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCConnection_methods_close__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCConnection_method_close__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "close", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_close", // alternative name of method
  -1, // altlabelHashCode
  ODBCConnection_methods_close__V_args, // the arguments
  0, //arguments count
  ODBCConnection_methods_close__V_exceptions, // the declared exceptions
  ODBCConnection_MetainfoWrapper::ODBCConnection_method_close__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCConnection_methods_commit__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCConnection_methods_commit__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCConnection_method_commit__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "commit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_commit", // alternative name of method
  -1, // altlabelHashCode
  ODBCConnection_methods_commit__V_args, // the arguments
  0, //arguments count
  ODBCConnection_methods_commit__V_exceptions, // the declared exceptions
  ODBCConnection_MetainfoWrapper::ODBCConnection_method_commit__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCConnection_methods_createStatement__LRStatement__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCConnection_methods_createStatement__LRStatement__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCConnection_method_createStatement__LRStatement_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createStatement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStatement::clazzInfo(), // return type
  "_3_createStatement", // alternative name of method
  -1, // altlabelHashCode
  ODBCConnection_methods_createStatement__LRStatement__args, // the arguments
  0, //arguments count
  ODBCConnection_methods_createStatement__LRStatement__exceptions, // the declared exceptions
  ODBCConnection_MetainfoWrapper::ODBCConnection_method_createStatement__LRStatement__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCConnection_methods_createStatement_II_LRStatement__arg_resultSetType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "resultSetType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCConnection_methods_createStatement_II_LRStatement__arg_resultSetConcurrency = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "resultSetConcurrency", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCConnection_methods_createStatement_II_LRStatement__args[] = 
{
  &ODBCConnection_methods_createStatement_II_LRStatement__arg_resultSetType,
  &ODBCConnection_methods_createStatement_II_LRStatement__arg_resultSetConcurrency,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCConnection_methods_createStatement_II_LRStatement__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCConnection_method_createStatement_II_LRStatement_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createStatement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStatement::clazzInfo(), // return type
  "_4_createStatement", // alternative name of method
  -1, // altlabelHashCode
  ODBCConnection_methods_createStatement_II_LRStatement__args, // the arguments
  0, //arguments count
  ODBCConnection_methods_createStatement_II_LRStatement__exceptions, // the declared exceptions
  ODBCConnection_MetainfoWrapper::ODBCConnection_method_createStatement_II_LRStatement__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCConnection_methods_getAutoCommit__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCConnection_methods_getAutoCommit__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCConnection_method_getAutoCommit__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAutoCommit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_getAutoCommit", // alternative name of method
  -1, // altlabelHashCode
  ODBCConnection_methods_getAutoCommit__Z_args, // the arguments
  0, //arguments count
  ODBCConnection_methods_getAutoCommit__Z_exceptions, // the declared exceptions
  ODBCConnection_MetainfoWrapper::ODBCConnection_method_getAutoCommit__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCConnection_methods_getCatalog__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCConnection_methods_getCatalog__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCConnection_method_getCatalog__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCatalog", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_6_getCatalog", // alternative name of method
  -1, // altlabelHashCode
  ODBCConnection_methods_getCatalog__LRString__args, // the arguments
  0, //arguments count
  ODBCConnection_methods_getCatalog__LRString__exceptions, // the declared exceptions
  ODBCConnection_MetainfoWrapper::ODBCConnection_method_getCatalog__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCConnection_methods_getMetaData__LRDatabaseMetaData__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCConnection_methods_getMetaData__LRDatabaseMetaData__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCConnection_method_getMetaData__LRDatabaseMetaData_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMetaData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDatabaseMetaData::clazzInfo(), // return type
  "_7_getMetaData", // alternative name of method
  -1, // altlabelHashCode
  ODBCConnection_methods_getMetaData__LRDatabaseMetaData__args, // the arguments
  0, //arguments count
  ODBCConnection_methods_getMetaData__LRDatabaseMetaData__exceptions, // the declared exceptions
  ODBCConnection_MetainfoWrapper::ODBCConnection_method_getMetaData__LRDatabaseMetaData__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCConnection_methods_getTransactionIsolation__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCConnection_methods_getTransactionIsolation__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCConnection_method_getTransactionIsolation__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTransactionIsolation", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_8_getTransactionIsolation", // alternative name of method
  -1, // altlabelHashCode
  ODBCConnection_methods_getTransactionIsolation__I_args, // the arguments
  0, //arguments count
  ODBCConnection_methods_getTransactionIsolation__I_exceptions, // the declared exceptions
  ODBCConnection_MetainfoWrapper::ODBCConnection_method_getTransactionIsolation__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCConnection_methods_getTypeMap__Lacdk_util_RMap__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCConnection_methods_getTypeMap__Lacdk_util_RMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCConnection_method_getTypeMap__Lacdk_util_RMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTypeMap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RMap::clazzInfo(), // return type
  "_9_getTypeMap", // alternative name of method
  -1, // altlabelHashCode
  ODBCConnection_methods_getTypeMap__Lacdk_util_RMap__args, // the arguments
  0, //arguments count
  ODBCConnection_methods_getTypeMap__Lacdk_util_RMap__exceptions, // the declared exceptions
  ODBCConnection_MetainfoWrapper::ODBCConnection_method_getTypeMap__Lacdk_util_RMap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCConnection_methods_getWarnings__L_acdk_sql_RSQLWarning__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCConnection_methods_getWarnings__L_acdk_sql_RSQLWarning__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCConnection_method_getWarnings__L_acdk_sql_RSQLWarning_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWarnings", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::sql::RSQLWarning::clazzInfo(), // return type
  "_a_getWarnings", // alternative name of method
  -1, // altlabelHashCode
  ODBCConnection_methods_getWarnings__L_acdk_sql_RSQLWarning__args, // the arguments
  0, //arguments count
  ODBCConnection_methods_getWarnings__L_acdk_sql_RSQLWarning__exceptions, // the declared exceptions
  ODBCConnection_MetainfoWrapper::ODBCConnection_method_getWarnings__L_acdk_sql_RSQLWarning__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCConnection_methods_init_INLRString_INLacdk_util_RProperties__LRODBCConnection__arg_url = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "url", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCConnection_methods_init_INLRString_INLacdk_util_RProperties__LRODBCConnection__arg_prop = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "prop", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RProperties::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCConnection_methods_init_INLRString_INLacdk_util_RProperties__LRODBCConnection__args[] = 
{
  &ODBCConnection_methods_init_INLRString_INLacdk_util_RProperties__LRODBCConnection__arg_url,
  &ODBCConnection_methods_init_INLRString_INLacdk_util_RProperties__LRODBCConnection__arg_prop,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCConnection_methods_init_INLRString_INLacdk_util_RProperties__LRODBCConnection__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCConnection_method_init_INLRString_INLacdk_util_RProperties__LRODBCConnection_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "init", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RODBCConnection::clazzInfo(), // return type
  "_p_init", // alternative name of method
  -1, // altlabelHashCode
  ODBCConnection_methods_init_INLRString_INLacdk_util_RProperties__LRODBCConnection__args, // the arguments
  0, //arguments count
  ODBCConnection_methods_init_INLRString_INLacdk_util_RProperties__LRODBCConnection__exceptions, // the declared exceptions
  ODBCConnection_MetainfoWrapper::ODBCConnection_method_init_INLRString_INLacdk_util_RProperties__LRODBCConnection__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCConnection_methods_isClosed__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCConnection_methods_isClosed__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCConnection_method_isClosed__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isClosed", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_b_isClosed", // alternative name of method
  -1, // altlabelHashCode
  ODBCConnection_methods_isClosed__Z_args, // the arguments
  0, //arguments count
  ODBCConnection_methods_isClosed__Z_exceptions, // the declared exceptions
  ODBCConnection_MetainfoWrapper::ODBCConnection_method_isClosed__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCConnection_methods_isReadOnly__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCConnection_methods_isReadOnly__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCConnection_method_isReadOnly__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isReadOnly", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_c_isReadOnly", // alternative name of method
  -1, // altlabelHashCode
  ODBCConnection_methods_isReadOnly__Z_args, // the arguments
  0, //arguments count
  ODBCConnection_methods_isReadOnly__Z_exceptions, // the declared exceptions
  ODBCConnection_MetainfoWrapper::ODBCConnection_method_isReadOnly__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCConnection_methods_nativeSQL_INLRString__LRString__arg_sql = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sql", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCConnection_methods_nativeSQL_INLRString__LRString__args[] = 
{
  &ODBCConnection_methods_nativeSQL_INLRString__LRString__arg_sql,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCConnection_methods_nativeSQL_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCConnection_method_nativeSQL_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nativeSQL", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_d_nativeSQL", // alternative name of method
  -1, // altlabelHashCode
  ODBCConnection_methods_nativeSQL_INLRString__LRString__args, // the arguments
  0, //arguments count
  ODBCConnection_methods_nativeSQL_INLRString__LRString__exceptions, // the declared exceptions
  ODBCConnection_MetainfoWrapper::ODBCConnection_method_nativeSQL_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCConnection_methods_prepareCall_INLRString__LRCallableStatement__arg_sql = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sql", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCConnection_methods_prepareCall_INLRString__LRCallableStatement__args[] = 
{
  &ODBCConnection_methods_prepareCall_INLRString__LRCallableStatement__arg_sql,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCConnection_methods_prepareCall_INLRString__LRCallableStatement__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCConnection_method_prepareCall_INLRString__LRCallableStatement_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "prepareCall", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCallableStatement::clazzInfo(), // return type
  "_e_prepareCall", // alternative name of method
  -1, // altlabelHashCode
  ODBCConnection_methods_prepareCall_INLRString__LRCallableStatement__args, // the arguments
  0, //arguments count
  ODBCConnection_methods_prepareCall_INLRString__LRCallableStatement__exceptions, // the declared exceptions
  ODBCConnection_MetainfoWrapper::ODBCConnection_method_prepareCall_INLRString__LRCallableStatement__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCConnection_methods_prepareStatement_INLRString__LRPreparedStatement__arg_sql = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sql", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCConnection_methods_prepareStatement_INLRString__LRPreparedStatement__args[] = 
{
  &ODBCConnection_methods_prepareStatement_INLRString__LRPreparedStatement__arg_sql,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCConnection_methods_prepareStatement_INLRString__LRPreparedStatement__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCConnection_method_prepareStatement_INLRString__LRPreparedStatement_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "prepareStatement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPreparedStatement::clazzInfo(), // return type
  "_f_prepareStatement", // alternative name of method
  -1, // altlabelHashCode
  ODBCConnection_methods_prepareStatement_INLRString__LRPreparedStatement__args, // the arguments
  0, //arguments count
  ODBCConnection_methods_prepareStatement_INLRString__LRPreparedStatement__exceptions, // the declared exceptions
  ODBCConnection_MetainfoWrapper::ODBCConnection_method_prepareStatement_INLRString__LRPreparedStatement__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCConnection_methods_rollback__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCConnection_methods_rollback__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCConnection_method_rollback__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "rollback", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_rollback", // alternative name of method
  -1, // altlabelHashCode
  ODBCConnection_methods_rollback__V_args, // the arguments
  0, //arguments count
  ODBCConnection_methods_rollback__V_exceptions, // the declared exceptions
  ODBCConnection_MetainfoWrapper::ODBCConnection_method_rollback__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCConnection_methods_setAutoCommit_Z_V_arg_autoCommit = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "autoCommit", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCConnection_methods_setAutoCommit_Z_V_args[] = 
{
  &ODBCConnection_methods_setAutoCommit_Z_V_arg_autoCommit,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCConnection_methods_setAutoCommit_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCConnection_method_setAutoCommit_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setAutoCommit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_h_setAutoCommit", // alternative name of method
  -1, // altlabelHashCode
  ODBCConnection_methods_setAutoCommit_Z_V_args, // the arguments
  0, //arguments count
  ODBCConnection_methods_setAutoCommit_Z_V_exceptions, // the declared exceptions
  ODBCConnection_MetainfoWrapper::ODBCConnection_method_setAutoCommit_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCConnection_methods_setCatalog_INLRString__V_arg_catalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "catalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCConnection_methods_setCatalog_INLRString__V_args[] = 
{
  &ODBCConnection_methods_setCatalog_INLRString__V_arg_catalog,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCConnection_methods_setCatalog_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCConnection_method_setCatalog_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setCatalog", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_i_setCatalog", // alternative name of method
  -1, // altlabelHashCode
  ODBCConnection_methods_setCatalog_INLRString__V_args, // the arguments
  0, //arguments count
  ODBCConnection_methods_setCatalog_INLRString__V_exceptions, // the declared exceptions
  ODBCConnection_MetainfoWrapper::ODBCConnection_method_setCatalog_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCConnection_methods_setReadOnly_Z_V_arg_readOnly = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "readOnly", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCConnection_methods_setReadOnly_Z_V_args[] = 
{
  &ODBCConnection_methods_setReadOnly_Z_V_arg_readOnly,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCConnection_methods_setReadOnly_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCConnection_method_setReadOnly_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setReadOnly", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_j_setReadOnly", // alternative name of method
  -1, // altlabelHashCode
  ODBCConnection_methods_setReadOnly_Z_V_args, // the arguments
  0, //arguments count
  ODBCConnection_methods_setReadOnly_Z_V_exceptions, // the declared exceptions
  ODBCConnection_MetainfoWrapper::ODBCConnection_method_setReadOnly_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCConnection_methods_setTransactionIsolation_I_V_arg_level = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "level", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCConnection_methods_setTransactionIsolation_I_V_args[] = 
{
  &ODBCConnection_methods_setTransactionIsolation_I_V_arg_level,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCConnection_methods_setTransactionIsolation_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCConnection_method_setTransactionIsolation_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTransactionIsolation", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_k_setTransactionIsolation", // alternative name of method
  -1, // altlabelHashCode
  ODBCConnection_methods_setTransactionIsolation_I_V_args, // the arguments
  0, //arguments count
  ODBCConnection_methods_setTransactionIsolation_I_V_exceptions, // the declared exceptions
  ODBCConnection_MetainfoWrapper::ODBCConnection_method_setTransactionIsolation_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCConnection_methods_setTypeMap_INLacdk_util_RMap__V_arg_map = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "map", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCConnection_methods_setTypeMap_INLacdk_util_RMap__V_args[] = 
{
  &ODBCConnection_methods_setTypeMap_INLacdk_util_RMap__V_arg_map,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCConnection_methods_setTypeMap_INLacdk_util_RMap__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCConnection_method_setTypeMap_INLacdk_util_RMap__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTypeMap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_l_setTypeMap", // alternative name of method
  -1, // altlabelHashCode
  ODBCConnection_methods_setTypeMap_INLacdk_util_RMap__V_args, // the arguments
  0, //arguments count
  ODBCConnection_methods_setTypeMap_INLacdk_util_RMap__V_exceptions, // the declared exceptions
  ODBCConnection_MetainfoWrapper::ODBCConnection_method_setTypeMap_INLacdk_util_RMap__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ODBCConnection_methods[] = 
{
  &ODBCConnection_method_GetClass__L_acdk_lang_RClass_,
  &ODBCConnection_method_ODBCConnection_INLRODBCDriver__LRODBCConnection_,
  &ODBCConnection_method__getODBCDriver__LRODBCDriver_,
  &ODBCConnection_method__getODBCHandle__LRODBCHandle_,
  &ODBCConnection_method__parseProperties_INLacdk_util_RProperties__V,
  &ODBCConnection_method__setSQLFlags__V,
  &ODBCConnection_method_clearWarnings__V,
  &ODBCConnection_method_close__V,
  &ODBCConnection_method_commit__V,
  &ODBCConnection_method_createStatement__LRStatement_,
  &ODBCConnection_method_createStatement_II_LRStatement_,
  &ODBCConnection_method_getAutoCommit__Z,
  &ODBCConnection_method_getCatalog__LRString_,
  &ODBCConnection_method_getMetaData__LRDatabaseMetaData_,
  &ODBCConnection_method_getTransactionIsolation__I,
  &ODBCConnection_method_getTypeMap__Lacdk_util_RMap_,
  &ODBCConnection_method_getWarnings__L_acdk_sql_RSQLWarning_,
  &ODBCConnection_method_init_INLRString_INLacdk_util_RProperties__LRODBCConnection_,
  &ODBCConnection_method_isClosed__Z,
  &ODBCConnection_method_isReadOnly__Z,
  &ODBCConnection_method_nativeSQL_INLRString__LRString_,
  &ODBCConnection_method_prepareCall_INLRString__LRCallableStatement_,
  &ODBCConnection_method_prepareStatement_INLRString__LRPreparedStatement_,
  &ODBCConnection_method_rollback__V,
  &ODBCConnection_method_setAutoCommit_Z_V,
  &ODBCConnection_method_setCatalog_INLRString__V,
  &ODBCConnection_method_setReadOnly_Z_V,
  &ODBCConnection_method_setTransactionIsolation_I_V,
  &ODBCConnection_method_setTypeMap_INLacdk_util_RMap__V,
  0
};


struct ODBCConnection_MetaInfoInitializer
{  ODBCConnection_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ODBCConnection::clazzInfo();
    ci->fields =  _ODBCConnection_fields;
    ci->methods =  _ODBCConnection_methods;
    ci->_scopeParent = acdk_sql_odbc_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ODBCConnection_MetaInfoInitializer ODBCConnection_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace sql
} // namespace odbc


namespace acdk { 
namespace sql { 
namespace odbc { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
ODBCDatabaseMetaData_create_array(int length)
{
  return new ObjectArrayImpl<RODBCDatabaseMetaData>(length);
}

//static
::acdk::lang::RObject
ODBCDatabaseMetaData_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ODBCDatabaseMetaData_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ODBCDatabaseMetaData::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_ODBCDatabaseMetaData_LRODBCConnection__LRODBCDatabaseMetaData__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ODBCDatabaseMetaData((RODBCConnection)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_allProceduresAreCallable__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::allProceduresAreCallable();
    else
      ret = This->allProceduresAreCallable();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_allTablesAreSelectable__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::allTablesAreSelectable();
    else
      ret = This->allTablesAreSelectable();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_dataDefinitionCausesTransactionCommit__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::dataDefinitionCausesTransactionCommit();
    else
      ret = This->dataDefinitionCausesTransactionCommit();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_dataDefinitionIgnoredInTransactions__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::dataDefinitionIgnoredInTransactions();
    else
      ret = This->dataDefinitionIgnoredInTransactions();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_deletesAreDetected_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::deletesAreDetected(args[0].getIntVar());
    else
      ret = This->deletesAreDetected(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_doesMaxRowSizeIncludeBlobs__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::doesMaxRowSizeIncludeBlobs();
    else
      ret = This->doesMaxRowSizeIncludeBlobs();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_L_acdk_sql_RResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCDatabaseMetaData::getBestRowIdentifier((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), args[3].getIntVar(), args[4].getBoolVar());
    else
        ret = (::acdk::lang::RObject)This->getBestRowIdentifier((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), args[3].getIntVar(), args[4].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getCatalogSeparator__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCDatabaseMetaData::getCatalogSeparator();
    else
        ret = (::acdk::lang::RObject)This->getCatalogSeparator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getCatalogTerm__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCDatabaseMetaData::getCatalogTerm();
    else
        ret = (::acdk::lang::RObject)This->getCatalogTerm();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getCatalogs__L_acdk_sql_RResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCDatabaseMetaData::getCatalogs();
    else
        ret = (::acdk::lang::RObject)This->getCatalogs();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCDatabaseMetaData::getColumnPrivileges((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getColumnPrivileges((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getColumns_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCDatabaseMetaData::getColumns((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getColumns((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getConnection__L_acdk_sql_RConnection__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCDatabaseMetaData::getConnection();
    else
        ret = (::acdk::lang::RObject)This->getConnection();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCDatabaseMetaData::getCrossReference((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar(), (RString)args[4].getObjectVar(), (RString)args[5].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getCrossReference((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar(), (RString)args[4].getObjectVar(), (RString)args[5].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getDatabaseProductName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCDatabaseMetaData::getDatabaseProductName();
    else
        ret = (::acdk::lang::RObject)This->getDatabaseProductName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getDatabaseProductVersion__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCDatabaseMetaData::getDatabaseProductVersion();
    else
        ret = (::acdk::lang::RObject)This->getDatabaseProductVersion();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getDateTimeFunctions__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCDatabaseMetaData::getDateTimeFunctions();
    else
        ret = (::acdk::lang::RObject)This->getDateTimeFunctions();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getDefaultTransactionIsolation__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::getDefaultTransactionIsolation();
    else
      ret = This->getDefaultTransactionIsolation();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getDriverMajorVersion__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::getDriverMajorVersion();
    else
      ret = This->getDriverMajorVersion();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getDriverMinorVersion__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::getDriverMinorVersion();
    else
      ret = This->getDriverMinorVersion();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getDriverName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCDatabaseMetaData::getDriverName();
    else
        ret = (::acdk::lang::RObject)This->getDriverName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getDriverVersion__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCDatabaseMetaData::getDriverVersion();
    else
        ret = (::acdk::lang::RObject)This->getDriverVersion();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getExportedKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCDatabaseMetaData::getExportedKeys((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getExportedKeys((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getExtraNameCharacters__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCDatabaseMetaData::getExtraNameCharacters();
    else
        ret = (::acdk::lang::RObject)This->getExtraNameCharacters();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getIdentiferQuoteString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCDatabaseMetaData::getIdentiferQuoteString();
    else
        ret = (::acdk::lang::RObject)This->getIdentiferQuoteString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getImportedKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCDatabaseMetaData::getImportedKeys((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getImportedKeys((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getIndexInfo_INLRString_INLRString_INLRString_ZZ_L_acdk_sql_RResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCDatabaseMetaData::getIndexInfo((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), args[3].getBoolVar(), args[4].getBoolVar());
    else
        ret = (::acdk::lang::RObject)This->getIndexInfo((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), args[3].getBoolVar(), args[4].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getIntInfo_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::getIntInfo(args[0].getIntVar());
    else
      ret = This->getIntInfo(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getMaxBinaryLiteralLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::getMaxBinaryLiteralLength();
    else
      ret = This->getMaxBinaryLiteralLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getMaxCatalogNameLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::getMaxCatalogNameLength();
    else
      ret = This->getMaxCatalogNameLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getMaxCharLiteralLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::getMaxCharLiteralLength();
    else
      ret = This->getMaxCharLiteralLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getMaxColumnNameLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::getMaxColumnNameLength();
    else
      ret = This->getMaxColumnNameLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getMaxColumnsInGroupBy__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::getMaxColumnsInGroupBy();
    else
      ret = This->getMaxColumnsInGroupBy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getMaxColumnsInIndex__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::getMaxColumnsInIndex();
    else
      ret = This->getMaxColumnsInIndex();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getMaxColumnsInOrderBy__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::getMaxColumnsInOrderBy();
    else
      ret = This->getMaxColumnsInOrderBy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getMaxColumnsInSelect__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::getMaxColumnsInSelect();
    else
      ret = This->getMaxColumnsInSelect();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getMaxColumnsInTable__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::getMaxColumnsInTable();
    else
      ret = This->getMaxColumnsInTable();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getMaxConnections__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::getMaxConnections();
    else
      ret = This->getMaxConnections();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getMaxCursorNameLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::getMaxCursorNameLength();
    else
      ret = This->getMaxCursorNameLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getMaxIndexLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::getMaxIndexLength();
    else
      ret = This->getMaxIndexLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getMaxProcedureNameLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::getMaxProcedureNameLength();
    else
      ret = This->getMaxProcedureNameLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getMaxRowSize__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::getMaxRowSize();
    else
      ret = This->getMaxRowSize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getMaxSchemaNameLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::getMaxSchemaNameLength();
    else
      ret = This->getMaxSchemaNameLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getMaxStatementLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::getMaxStatementLength();
    else
      ret = This->getMaxStatementLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getMaxStatements__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::getMaxStatements();
    else
      ret = This->getMaxStatements();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getMaxTableNameLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::getMaxTableNameLength();
    else
      ret = This->getMaxTableNameLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getMaxTableUserLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::getMaxTableUserLength();
    else
      ret = This->getMaxTableUserLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getMaxTablesInSelect__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::getMaxTablesInSelect();
    else
      ret = This->getMaxTablesInSelect();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getNumericFunctions__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCDatabaseMetaData::getNumericFunctions();
    else
        ret = (::acdk::lang::RObject)This->getNumericFunctions();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getPrimaryKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCDatabaseMetaData::getPrimaryKeys((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getPrimaryKeys((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCDatabaseMetaData::getProcedureColumns((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getProcedureColumns((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getProcedureTerm__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCDatabaseMetaData::getProcedureTerm();
    else
        ret = (::acdk::lang::RObject)This->getProcedureTerm();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getProcedures_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCDatabaseMetaData::getProcedures((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getProcedures((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getSQLKeywords__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCDatabaseMetaData::getSQLKeywords();
    else
        ret = (::acdk::lang::RObject)This->getSQLKeywords();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getSchemaTerm__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCDatabaseMetaData::getSchemaTerm();
    else
        ret = (::acdk::lang::RObject)This->getSchemaTerm();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getSchemas__L_acdk_sql_RResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCDatabaseMetaData::getSchemas();
    else
        ret = (::acdk::lang::RObject)This->getSchemas();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getSearchStringEscape__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCDatabaseMetaData::getSearchStringEscape();
    else
        ret = (::acdk::lang::RObject)This->getSearchStringEscape();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getShortInfo_I_S_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::getShortInfo(args[0].getIntVar());
    else
      ret = This->getShortInfo(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getStringFunctions__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCDatabaseMetaData::getStringFunctions();
    else
        ret = (::acdk::lang::RObject)This->getStringFunctions();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getStringInfo_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCDatabaseMetaData::getStringInfo(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getStringInfo(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getSystemFunctions__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCDatabaseMetaData::getSystemFunctions();
    else
        ret = (::acdk::lang::RObject)This->getSystemFunctions();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getTablePrivileges_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCDatabaseMetaData::getTablePrivileges((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getTablePrivileges((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getTableTypes__L_acdk_sql_RResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCDatabaseMetaData::getTableTypes();
    else
        ret = (::acdk::lang::RObject)This->getTableTypes();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getTables_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCDatabaseMetaData::getTables((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getTables((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getTypeInfo__L_acdk_sql_RResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCDatabaseMetaData::getTypeInfo();
    else
        ret = (::acdk::lang::RObject)This->getTypeInfo();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getUDTs_INLRString_INLRString_INLRString_INLRintArray__L_acdk_sql_RResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCDatabaseMetaData::getUDTs((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RintArray)args[3].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getUDTs((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RintArray)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getURL__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCDatabaseMetaData::getURL();
    else
        ret = (::acdk::lang::RObject)This->getURL();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getUserName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCDatabaseMetaData::getUserName();
    else
        ret = (::acdk::lang::RObject)This->getUserName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_getVersionColumns_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCDatabaseMetaData::getVersionColumns((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getVersionColumns((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_insertsAreDetected_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::insertsAreDetected(args[0].getIntVar());
    else
      ret = This->insertsAreDetected(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_isCatalogAtStart__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::isCatalogAtStart();
    else
      ret = This->isCatalogAtStart();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_isReadOnly__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::isReadOnly();
    else
      ret = This->isReadOnly();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_nullPlusNonNullIsNull__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::nullPlusNonNullIsNull();
    else
      ret = This->nullPlusNonNullIsNull();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_nullsAreSortedAtEnd__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::nullsAreSortedAtEnd();
    else
      ret = This->nullsAreSortedAtEnd();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_nullsAreSortedAtStart__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::nullsAreSortedAtStart();
    else
      ret = This->nullsAreSortedAtStart();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_nullsAreSortedHigh__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::nullsAreSortedHigh();
    else
      ret = This->nullsAreSortedHigh();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_nullsAreSortedLow__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::nullsAreSortedLow();
    else
      ret = This->nullsAreSortedLow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_othersDeletesAreVisible_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::othersDeletesAreVisible(args[0].getIntVar());
    else
      ret = This->othersDeletesAreVisible(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_othersInsertsAreVisible_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::othersInsertsAreVisible(args[0].getIntVar());
    else
      ret = This->othersInsertsAreVisible(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_othersUpdatesAreVisible_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::othersUpdatesAreVisible(args[0].getIntVar());
    else
      ret = This->othersUpdatesAreVisible(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_ownDeletesAreVisible_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::ownDeletesAreVisible(args[0].getIntVar());
    else
      ret = This->ownDeletesAreVisible(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_ownInsertsAreVisible_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::ownInsertsAreVisible(args[0].getIntVar());
    else
      ret = This->ownInsertsAreVisible(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_ownUpdatesAreVisible_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::ownUpdatesAreVisible(args[0].getIntVar());
    else
      ret = This->ownUpdatesAreVisible(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_storesLowerCaseIdentifiers__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::storesLowerCaseIdentifiers();
    else
      ret = This->storesLowerCaseIdentifiers();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_storesLowerCaseQuotedIdentifiers__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::storesLowerCaseQuotedIdentifiers();
    else
      ret = This->storesLowerCaseQuotedIdentifiers();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_storesMixedCaseIdentifiers__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::storesMixedCaseIdentifiers();
    else
      ret = This->storesMixedCaseIdentifiers();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_storesMixedCaseQuotedIdentifiers__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::storesMixedCaseQuotedIdentifiers();
    else
      ret = This->storesMixedCaseQuotedIdentifiers();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_storesUpperCaseIdentifiers__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::storesUpperCaseIdentifiers();
    else
      ret = This->storesUpperCaseIdentifiers();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_storesUpperCaseQuotedIdentifiers__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::storesUpperCaseQuotedIdentifiers();
    else
      ret = This->storesUpperCaseQuotedIdentifiers();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsANSI92EntryLevelSQL__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsANSI92EntryLevelSQL();
    else
      ret = This->supportsANSI92EntryLevelSQL();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsANSI92FullSQL__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsANSI92FullSQL();
    else
      ret = This->supportsANSI92FullSQL();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsANSI92IntermediateSQL__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsANSI92IntermediateSQL();
    else
      ret = This->supportsANSI92IntermediateSQL();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsAlterTableWithAddColumn__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsAlterTableWithAddColumn();
    else
      ret = This->supportsAlterTableWithAddColumn();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsAlterTableWithDropColumn__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsAlterTableWithDropColumn();
    else
      ret = This->supportsAlterTableWithDropColumn();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsBatchUpdates__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsBatchUpdates();
    else
      ret = This->supportsBatchUpdates();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsCatalogInPrivilegeDefinitions__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsCatalogInPrivilegeDefinitions();
    else
      ret = This->supportsCatalogInPrivilegeDefinitions();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsCatalogsInDataManipulation__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsCatalogsInDataManipulation();
    else
      ret = This->supportsCatalogsInDataManipulation();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsCatalogsInIndexDefinitions__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsCatalogsInIndexDefinitions();
    else
      ret = This->supportsCatalogsInIndexDefinitions();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsCatalogsInProcedureCalls__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsCatalogsInProcedureCalls();
    else
      ret = This->supportsCatalogsInProcedureCalls();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsCatalogsInTableDefinitions__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsCatalogsInTableDefinitions();
    else
      ret = This->supportsCatalogsInTableDefinitions();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsColumnAliasing__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsColumnAliasing();
    else
      ret = This->supportsColumnAliasing();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsConvert__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsConvert();
    else
      ret = This->supportsConvert();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsConvert_II_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsConvert(args[0].getIntVar(), args[1].getIntVar());
    else
      ret = This->supportsConvert(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsCoreSQLGrammar__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsCoreSQLGrammar();
    else
      ret = This->supportsCoreSQLGrammar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsCorrelatedSubqueries__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsCorrelatedSubqueries();
    else
      ret = This->supportsCorrelatedSubqueries();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsDataDefinitionAndDataManipulationTransactions__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsDataDefinitionAndDataManipulationTransactions();
    else
      ret = This->supportsDataDefinitionAndDataManipulationTransactions();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsDataManipulationTransactionsOnly__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsDataManipulationTransactionsOnly();
    else
      ret = This->supportsDataManipulationTransactionsOnly();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsDifferentTableCorrelationNames__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsDifferentTableCorrelationNames();
    else
      ret = This->supportsDifferentTableCorrelationNames();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsExpressionsInOrderBy__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsExpressionsInOrderBy();
    else
      ret = This->supportsExpressionsInOrderBy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsExtendedSQLGrammar__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsExtendedSQLGrammar();
    else
      ret = This->supportsExtendedSQLGrammar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsFullOuterJoins__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsFullOuterJoins();
    else
      ret = This->supportsFullOuterJoins();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsGroupBy__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsGroupBy();
    else
      ret = This->supportsGroupBy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsGroupByBeyondSelect__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsGroupByBeyondSelect();
    else
      ret = This->supportsGroupByBeyondSelect();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsGroupByUnrelated__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsGroupByUnrelated();
    else
      ret = This->supportsGroupByUnrelated();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsIntegrityEnhancementFacility__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsIntegrityEnhancementFacility();
    else
      ret = This->supportsIntegrityEnhancementFacility();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsLikeEscapeClause__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsLikeEscapeClause();
    else
      ret = This->supportsLikeEscapeClause();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsLimitedOuterJoins__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsLimitedOuterJoins();
    else
      ret = This->supportsLimitedOuterJoins();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsMinimumSQLGrammar__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsMinimumSQLGrammar();
    else
      ret = This->supportsMinimumSQLGrammar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsMixedCaseIdentifiers__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsMixedCaseIdentifiers();
    else
      ret = This->supportsMixedCaseIdentifiers();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsMixedCaseQuotedIdentifiers__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsMixedCaseQuotedIdentifiers();
    else
      ret = This->supportsMixedCaseQuotedIdentifiers();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsMultipleResultSets__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsMultipleResultSets();
    else
      ret = This->supportsMultipleResultSets();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsMultipleTransactions__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsMultipleTransactions();
    else
      ret = This->supportsMultipleTransactions();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsNonNullableColumns__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsNonNullableColumns();
    else
      ret = This->supportsNonNullableColumns();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsOpenCursorsAcrossCommit__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsOpenCursorsAcrossCommit();
    else
      ret = This->supportsOpenCursorsAcrossCommit();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsOpenCursorsAcrossRollback__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsOpenCursorsAcrossRollback();
    else
      ret = This->supportsOpenCursorsAcrossRollback();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsOpenStatementsAcrossCommit__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsOpenStatementsAcrossCommit();
    else
      ret = This->supportsOpenStatementsAcrossCommit();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsOpenStatementsAcrossRollback__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsOpenStatementsAcrossRollback();
    else
      ret = This->supportsOpenStatementsAcrossRollback();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsOrderByUnrelated__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsOrderByUnrelated();
    else
      ret = This->supportsOrderByUnrelated();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsOuterJoins__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsOuterJoins();
    else
      ret = This->supportsOuterJoins();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsPositionedDelete__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsPositionedDelete();
    else
      ret = This->supportsPositionedDelete();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsPositionedUpdate__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsPositionedUpdate();
    else
      ret = This->supportsPositionedUpdate();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsResultSetConcurrency_II_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsResultSetConcurrency(args[0].getIntVar(), args[1].getIntVar());
    else
      ret = This->supportsResultSetConcurrency(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsResultType_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsResultType(args[0].getIntVar());
    else
      ret = This->supportsResultType(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsSchemasInDataManipulation__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsSchemasInDataManipulation();
    else
      ret = This->supportsSchemasInDataManipulation();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsSchemasInIndexDefinitions__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsSchemasInIndexDefinitions();
    else
      ret = This->supportsSchemasInIndexDefinitions();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsSchemasInPrivilegeDefinitions__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsSchemasInPrivilegeDefinitions();
    else
      ret = This->supportsSchemasInPrivilegeDefinitions();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsSchemasInProcedureCalls__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsSchemasInProcedureCalls();
    else
      ret = This->supportsSchemasInProcedureCalls();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsSchemasInTableDefinitions__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsSchemasInTableDefinitions();
    else
      ret = This->supportsSchemasInTableDefinitions();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsSelectForUpdate__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsSelectForUpdate();
    else
      ret = This->supportsSelectForUpdate();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsStoredProcedures__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsStoredProcedures();
    else
      ret = This->supportsStoredProcedures();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsSubqueriesInComparisons__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsSubqueriesInComparisons();
    else
      ret = This->supportsSubqueriesInComparisons();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsSubqueriesInExists__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsSubqueriesInExists();
    else
      ret = This->supportsSubqueriesInExists();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsSubqueriesInIns__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsSubqueriesInIns();
    else
      ret = This->supportsSubqueriesInIns();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsSubqueriesInQuantifieds__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsSubqueriesInQuantifieds();
    else
      ret = This->supportsSubqueriesInQuantifieds();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsTableCorrelationNames__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsTableCorrelationNames();
    else
      ret = This->supportsTableCorrelationNames();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsTransactionIsolationLevel_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsTransactionIsolationLevel(args[0].getIntVar());
    else
      ret = This->supportsTransactionIsolationLevel(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsTransactions__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsTransactions();
    else
      ret = This->supportsTransactions();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsUnion__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsUnion();
    else
      ret = This->supportsUnion();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_supportsUnionAll__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::supportsUnionAll();
    else
      ret = This->supportsUnionAll();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_updatesAreDetected_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::updatesAreDetected(args[0].getIntVar());
    else
      ret = This->updatesAreDetected(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_usesLocalFilePerTable__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::usesLocalFilePerTable();
    else
      ret = This->usesLocalFilePerTable();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDatabaseMetaData_method_usesLocalFiles__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDatabaseMetaData::usesLocalFiles();
    else
      ret = This->usesLocalFiles();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCDatabaseMetaData_fields__conn_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCDatabaseMetaData* This = dmi_cast<ODBCDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_conn, flags);
    else
      This->_conn = (RODBCConnection)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ODBCDatabaseMetaData_fields__conn = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_conn", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RODBCConnection::clazzInfo(),
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_fields__conn_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ODBCDatabaseMetaData_fields[] = 
{
  &ODBCDatabaseMetaData_fields__conn,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2t_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_ODBCDatabaseMetaData_LRODBCConnection__LRODBCDatabaseMetaData__arg_conn = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "conn", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RODBCConnection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_ODBCDatabaseMetaData_LRODBCConnection__LRODBCDatabaseMetaData__args[] = 
{
  &ODBCDatabaseMetaData_methods_ODBCDatabaseMetaData_LRODBCConnection__LRODBCDatabaseMetaData__arg_conn,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_ODBCDatabaseMetaData_LRODBCConnection__LRODBCDatabaseMetaData__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_ODBCDatabaseMetaData_LRODBCConnection__LRODBCDatabaseMetaData_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ODBCDatabaseMetaData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ODBCDatabaseMetaData::clazzInfo(), // return type
  "_2p_ODBCDatabaseMetaData", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_ODBCDatabaseMetaData_LRODBCConnection__LRODBCDatabaseMetaData__args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_ODBCDatabaseMetaData_LRODBCConnection__LRODBCDatabaseMetaData__exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_ODBCDatabaseMetaData_LRODBCConnection__LRODBCDatabaseMetaData__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_allProceduresAreCallable__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_allProceduresAreCallable__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_allProceduresAreCallable__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_allProceduresAreCallable__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "allProceduresAreCallable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_0_allProceduresAreCallable", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_allProceduresAreCallable__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_allProceduresAreCallable__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_allProceduresAreCallable__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_allProceduresAreCallable__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_allTablesAreSelectable__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_allTablesAreSelectable__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_allTablesAreSelectable__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_allTablesAreSelectable__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "allTablesAreSelectable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_allTablesAreSelectable", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_allTablesAreSelectable__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_allTablesAreSelectable__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_allTablesAreSelectable__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_allTablesAreSelectable__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_dataDefinitionCausesTransactionCommit__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_dataDefinitionCausesTransactionCommit__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_dataDefinitionCausesTransactionCommit__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_dataDefinitionCausesTransactionCommit__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "dataDefinitionCausesTransactionCommit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1S_dataDefinitionCausesTransactionCommit", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_dataDefinitionCausesTransactionCommit__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_dataDefinitionCausesTransactionCommit__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_dataDefinitionCausesTransactionCommit__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_dataDefinitionCausesTransactionCommit__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_dataDefinitionIgnoredInTransactions__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_dataDefinitionIgnoredInTransactions__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_dataDefinitionIgnoredInTransactions__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_dataDefinitionIgnoredInTransactions__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "dataDefinitionIgnoredInTransactions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1T_dataDefinitionIgnoredInTransactions", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_dataDefinitionIgnoredInTransactions__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_dataDefinitionIgnoredInTransactions__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_dataDefinitionIgnoredInTransactions__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_dataDefinitionIgnoredInTransactions__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_deletesAreDetected_I_Z_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_deletesAreDetected_I_Z_args[] = 
{
  &ODBCDatabaseMetaData_methods_deletesAreDetected_I_Z_arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_deletesAreDetected_I_Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_deletesAreDetected_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_deletesAreDetected_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deletesAreDetected", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2k_deletesAreDetected", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_deletesAreDetected_I_Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_deletesAreDetected_I_Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_deletesAreDetected_I_Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_deletesAreDetected_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_doesMaxRowSizeIncludeBlobs__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_doesMaxRowSizeIncludeBlobs__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_doesMaxRowSizeIncludeBlobs__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_doesMaxRowSizeIncludeBlobs__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "doesMaxRowSizeIncludeBlobs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1H_doesMaxRowSizeIncludeBlobs", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_doesMaxRowSizeIncludeBlobs__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_doesMaxRowSizeIncludeBlobs__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_doesMaxRowSizeIncludeBlobs__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_doesMaxRowSizeIncludeBlobs__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_L_acdk_sql_RResultSet__arg_catalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "catalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_L_acdk_sql_RResultSet__arg_schema = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "schema", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_L_acdk_sql_RResultSet__arg_table = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "table", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_L_acdk_sql_RResultSet__arg_scope = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "scope", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_L_acdk_sql_RResultSet__arg_nullable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "nullable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_L_acdk_sql_RResultSet__args[] = 
{
  &ODBCDatabaseMetaData_methods_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_L_acdk_sql_RResultSet__arg_catalog,
  &ODBCDatabaseMetaData_methods_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_L_acdk_sql_RResultSet__arg_schema,
  &ODBCDatabaseMetaData_methods_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_L_acdk_sql_RResultSet__arg_table,
  &ODBCDatabaseMetaData_methods_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_L_acdk_sql_RResultSet__arg_scope,
  &ODBCDatabaseMetaData_methods_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_L_acdk_sql_RResultSet__arg_nullable,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_L_acdk_sql_RResultSet__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_L_acdk_sql_RResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_L_acdk_sql_RResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBestRowIdentifier", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::sql::RResultSet::clazzInfo(), // return type
  "_23_getBestRowIdentifier", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_L_acdk_sql_RResultSet__args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_L_acdk_sql_RResultSet__exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_L_acdk_sql_RResultSet__dispatch, // invoke this method
  ODBCDatabaseMetaData_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_L_acdk_sql_RResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getCatalogSeparator__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getCatalogSeparator__LRString__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getCatalogSeparator__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getCatalogSeparator__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCatalogSeparator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_12_getCatalogSeparator", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getCatalogSeparator__LRString__args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getCatalogSeparator__LRString__exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getCatalogSeparator__LRString__dispatch, // invoke this method
  ODBCDatabaseMetaData_getCatalogSeparator__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getCatalogTerm__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getCatalogTerm__LRString__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getCatalogTerm__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getCatalogTerm__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCatalogTerm", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_10_getCatalogTerm", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getCatalogTerm__LRString__args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getCatalogTerm__LRString__exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getCatalogTerm__LRString__dispatch, // invoke this method
  ODBCDatabaseMetaData_getCatalogTerm__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getCatalogs__L_acdk_sql_RResultSet__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getCatalogs__L_acdk_sql_RResultSet__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getCatalogs__L_acdk_sql_RResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getCatalogs__L_acdk_sql_RResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCatalogs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::sql::RResultSet::clazzInfo(), // return type
  "_1Y_getCatalogs", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getCatalogs__L_acdk_sql_RResultSet__args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getCatalogs__L_acdk_sql_RResultSet__exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getCatalogs__L_acdk_sql_RResultSet__dispatch, // invoke this method
  ODBCDatabaseMetaData_getCatalogs__L_acdk_sql_RResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_catalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "catalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_schema = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "schema", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_table = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "table", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_columnPattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnPattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__args[] = 
{
  &ODBCDatabaseMetaData_methods_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_catalog,
  &ODBCDatabaseMetaData_methods_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_schema,
  &ODBCDatabaseMetaData_methods_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_table,
  &ODBCDatabaseMetaData_methods_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_columnPattern,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColumnPrivileges", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::sql::RResultSet::clazzInfo(), // return type
  "_21_getColumnPrivileges", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__dispatch, // invoke this method
  ODBCDatabaseMetaData_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getColumns_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_catalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "catalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getColumns_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_schemaPattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "schemaPattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getColumns_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_namePattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "namePattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getColumns_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_columnPattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnPattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getColumns_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__args[] = 
{
  &ODBCDatabaseMetaData_methods_getColumns_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_catalog,
  &ODBCDatabaseMetaData_methods_getColumns_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_schemaPattern,
  &ODBCDatabaseMetaData_methods_getColumns_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_namePattern,
  &ODBCDatabaseMetaData_methods_getColumns_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_columnPattern,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getColumns_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getColumns_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getColumns_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColumns", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::sql::RResultSet::clazzInfo(), // return type
  "_20_getColumns", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getColumns_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getColumns_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getColumns_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__dispatch, // invoke this method
  ODBCDatabaseMetaData_getColumns_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getConnection__L_acdk_sql_RConnection__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getConnection__L_acdk_sql_RConnection__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getConnection__L_acdk_sql_RConnection__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getConnection__L_acdk_sql_RConnection_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getConnection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::sql::RConnection::clazzInfo(), // return type
  "_2o_getConnection", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getConnection__L_acdk_sql_RConnection__args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getConnection__L_acdk_sql_RConnection__exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getConnection__L_acdk_sql_RConnection__dispatch, // invoke this method
  ODBCDatabaseMetaData_getConnection__L_acdk_sql_RConnection__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_primCatalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "primCatalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_primSchema = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "primSchema", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_primTable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "primTable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_forCatalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "forCatalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_forSchema = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "forSchema", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_forTable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "forTable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__args[] = 
{
  &ODBCDatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_primCatalog,
  &ODBCDatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_primSchema,
  &ODBCDatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_primTable,
  &ODBCDatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_forCatalog,
  &ODBCDatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_forSchema,
  &ODBCDatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_forTable,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCrossReference", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::sql::RResultSet::clazzInfo(), // return type
  "_28_getCrossReference", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__dispatch, // invoke this method
  ODBCDatabaseMetaData_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getDatabaseProductName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getDatabaseProductName__LRString__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getDatabaseProductName__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getDatabaseProductName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDatabaseProductName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_9_getDatabaseProductName", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getDatabaseProductName__LRString__args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getDatabaseProductName__LRString__exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getDatabaseProductName__LRString__dispatch, // invoke this method
  ODBCDatabaseMetaData_getDatabaseProductName__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getDatabaseProductVersion__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getDatabaseProductVersion__LRString__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getDatabaseProductVersion__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getDatabaseProductVersion__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDatabaseProductVersion", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_a_getDatabaseProductVersion", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getDatabaseProductVersion__LRString__args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getDatabaseProductVersion__LRString__exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getDatabaseProductVersion__LRString__dispatch, // invoke this method
  ODBCDatabaseMetaData_getDatabaseProductVersion__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getDateTimeFunctions__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getDateTimeFunctions__LRString__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getDateTimeFunctions__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getDateTimeFunctions__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDateTimeFunctions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_u_getDateTimeFunctions", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getDateTimeFunctions__LRString__args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getDateTimeFunctions__LRString__exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getDateTimeFunctions__LRString__dispatch, // invoke this method
  ODBCDatabaseMetaData_getDateTimeFunctions__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getDefaultTransactionIsolation__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getDefaultTransactionIsolation__I_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getDefaultTransactionIsolation__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getDefaultTransactionIsolation__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDefaultTransactionIsolation", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1N_getDefaultTransactionIsolation", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getDefaultTransactionIsolation__I_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getDefaultTransactionIsolation__I_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getDefaultTransactionIsolation__I_dispatch, // invoke this method
  ODBCDatabaseMetaData_getDefaultTransactionIsolation__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getDriverMajorVersion__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getDriverMajorVersion__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getDriverMajorVersion__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDriverMajorVersion", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_d_getDriverMajorVersion", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getDriverMajorVersion__I_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getDriverMajorVersion__I_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getDriverMajorVersion__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getDriverMinorVersion__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getDriverMinorVersion__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getDriverMinorVersion__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDriverMinorVersion", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_e_getDriverMinorVersion", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getDriverMinorVersion__I_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getDriverMinorVersion__I_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getDriverMinorVersion__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getDriverName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getDriverName__LRString__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getDriverName__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getDriverName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDriverName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_b_getDriverName", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getDriverName__LRString__args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getDriverName__LRString__exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getDriverName__LRString__dispatch, // invoke this method
  ODBCDatabaseMetaData_getDriverName__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getDriverVersion__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getDriverVersion__LRString__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getDriverVersion__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getDriverVersion__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDriverVersion", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_c_getDriverVersion", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getDriverVersion__LRString__args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getDriverVersion__LRString__exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getDriverVersion__LRString__dispatch, // invoke this method
  ODBCDatabaseMetaData_getDriverVersion__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getExportedKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_catalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "catalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getExportedKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_schema = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "schema", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getExportedKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_table = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "table", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getExportedKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__args[] = 
{
  &ODBCDatabaseMetaData_methods_getExportedKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_catalog,
  &ODBCDatabaseMetaData_methods_getExportedKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_schema,
  &ODBCDatabaseMetaData_methods_getExportedKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_table,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getExportedKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getExportedKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getExportedKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getExportedKeys", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::sql::RResultSet::clazzInfo(), // return type
  "_27_getExportedKeys", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getExportedKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getExportedKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getExportedKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__dispatch, // invoke this method
  ODBCDatabaseMetaData_getExportedKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getExtraNameCharacters__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getExtraNameCharacters__LRString__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getExtraNameCharacters__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getExtraNameCharacters__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getExtraNameCharacters", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_w_getExtraNameCharacters", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getExtraNameCharacters__LRString__args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getExtraNameCharacters__LRString__exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getExtraNameCharacters__LRString__dispatch, // invoke this method
  ODBCDatabaseMetaData_getExtraNameCharacters__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getIdentiferQuoteString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getIdentiferQuoteString__LRString__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getIdentiferQuoteString__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getIdentiferQuoteString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getIdentiferQuoteString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_p_getIdentiferQuoteString", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getIdentiferQuoteString__LRString__args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getIdentiferQuoteString__LRString__exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getIdentiferQuoteString__LRString__dispatch, // invoke this method
  ODBCDatabaseMetaData_getIdentiferQuoteString__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getImportedKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_catalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "catalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getImportedKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_schema = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "schema", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getImportedKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_table = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "table", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getImportedKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__args[] = 
{
  &ODBCDatabaseMetaData_methods_getImportedKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_catalog,
  &ODBCDatabaseMetaData_methods_getImportedKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_schema,
  &ODBCDatabaseMetaData_methods_getImportedKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_table,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getImportedKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getImportedKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getImportedKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getImportedKeys", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::sql::RResultSet::clazzInfo(), // return type
  "_26_getImportedKeys", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getImportedKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getImportedKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getImportedKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__dispatch, // invoke this method
  ODBCDatabaseMetaData_getImportedKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getIndexInfo_INLRString_INLRString_INLRString_ZZ_L_acdk_sql_RResultSet__arg_catalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "catalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getIndexInfo_INLRString_INLRString_INLRString_ZZ_L_acdk_sql_RResultSet__arg_schema = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "schema", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getIndexInfo_INLRString_INLRString_INLRString_ZZ_L_acdk_sql_RResultSet__arg_table = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "table", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getIndexInfo_INLRString_INLRString_INLRString_ZZ_L_acdk_sql_RResultSet__arg_unique = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "unique", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getIndexInfo_INLRString_INLRString_INLRString_ZZ_L_acdk_sql_RResultSet__arg_approx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "approx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getIndexInfo_INLRString_INLRString_INLRString_ZZ_L_acdk_sql_RResultSet__args[] = 
{
  &ODBCDatabaseMetaData_methods_getIndexInfo_INLRString_INLRString_INLRString_ZZ_L_acdk_sql_RResultSet__arg_catalog,
  &ODBCDatabaseMetaData_methods_getIndexInfo_INLRString_INLRString_INLRString_ZZ_L_acdk_sql_RResultSet__arg_schema,
  &ODBCDatabaseMetaData_methods_getIndexInfo_INLRString_INLRString_INLRString_ZZ_L_acdk_sql_RResultSet__arg_table,
  &ODBCDatabaseMetaData_methods_getIndexInfo_INLRString_INLRString_INLRString_ZZ_L_acdk_sql_RResultSet__arg_unique,
  &ODBCDatabaseMetaData_methods_getIndexInfo_INLRString_INLRString_INLRString_ZZ_L_acdk_sql_RResultSet__arg_approx,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getIndexInfo_INLRString_INLRString_INLRString_ZZ_L_acdk_sql_RResultSet__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getIndexInfo_INLRString_INLRString_INLRString_ZZ_L_acdk_sql_RResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getIndexInfo_INLRString_INLRString_INLRString_ZZ_L_acdk_sql_RResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getIndexInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::sql::RResultSet::clazzInfo(), // return type
  "_2a_getIndexInfo", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getIndexInfo_INLRString_INLRString_INLRString_ZZ_L_acdk_sql_RResultSet__args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getIndexInfo_INLRString_INLRString_INLRString_ZZ_L_acdk_sql_RResultSet__exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getIndexInfo_INLRString_INLRString_INLRString_ZZ_L_acdk_sql_RResultSet__dispatch, // invoke this method
  ODBCDatabaseMetaData_getIndexInfo_INLRString_INLRString_INLRString_ZZ_L_acdk_sql_RResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getIntInfo_I_I_arg_code = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "code", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getIntInfo_I_I_args[] = 
{
  &ODBCDatabaseMetaData_methods_getIntInfo_I_I_arg_code,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getIntInfo_I_I_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getIntInfo_I_I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getIntInfo_I_I = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getIntInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2s_getIntInfo", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getIntInfo_I_I_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getIntInfo_I_I_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getIntInfo_I_I_dispatch, // invoke this method
  ODBCDatabaseMetaData_getIntInfo_I_I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getMaxBinaryLiteralLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getMaxBinaryLiteralLength__I_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getMaxBinaryLiteralLength__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getMaxBinaryLiteralLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxBinaryLiteralLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1s_getMaxBinaryLiteralLength", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getMaxBinaryLiteralLength__I_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getMaxBinaryLiteralLength__I_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getMaxBinaryLiteralLength__I_dispatch, // invoke this method
  ODBCDatabaseMetaData_getMaxBinaryLiteralLength__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getMaxCatalogNameLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getMaxCatalogNameLength__I_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getMaxCatalogNameLength__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getMaxCatalogNameLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxCatalogNameLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1F_getMaxCatalogNameLength", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getMaxCatalogNameLength__I_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getMaxCatalogNameLength__I_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getMaxCatalogNameLength__I_dispatch, // invoke this method
  ODBCDatabaseMetaData_getMaxCatalogNameLength__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getMaxCharLiteralLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getMaxCharLiteralLength__I_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getMaxCharLiteralLength__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getMaxCharLiteralLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxCharLiteralLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1t_getMaxCharLiteralLength", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getMaxCharLiteralLength__I_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getMaxCharLiteralLength__I_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getMaxCharLiteralLength__I_dispatch, // invoke this method
  ODBCDatabaseMetaData_getMaxCharLiteralLength__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getMaxColumnNameLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getMaxColumnNameLength__I_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getMaxColumnNameLength__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getMaxColumnNameLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxColumnNameLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1u_getMaxColumnNameLength", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getMaxColumnNameLength__I_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getMaxColumnNameLength__I_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getMaxColumnNameLength__I_dispatch, // invoke this method
  ODBCDatabaseMetaData_getMaxColumnNameLength__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getMaxColumnsInGroupBy__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getMaxColumnsInGroupBy__I_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getMaxColumnsInGroupBy__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getMaxColumnsInGroupBy__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxColumnsInGroupBy", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1v_getMaxColumnsInGroupBy", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getMaxColumnsInGroupBy__I_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getMaxColumnsInGroupBy__I_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getMaxColumnsInGroupBy__I_dispatch, // invoke this method
  ODBCDatabaseMetaData_getMaxColumnsInGroupBy__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getMaxColumnsInIndex__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getMaxColumnsInIndex__I_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getMaxColumnsInIndex__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getMaxColumnsInIndex__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxColumnsInIndex", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1w_getMaxColumnsInIndex", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getMaxColumnsInIndex__I_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getMaxColumnsInIndex__I_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getMaxColumnsInIndex__I_dispatch, // invoke this method
  ODBCDatabaseMetaData_getMaxColumnsInIndex__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getMaxColumnsInOrderBy__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getMaxColumnsInOrderBy__I_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getMaxColumnsInOrderBy__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getMaxColumnsInOrderBy__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxColumnsInOrderBy", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1x_getMaxColumnsInOrderBy", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getMaxColumnsInOrderBy__I_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getMaxColumnsInOrderBy__I_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getMaxColumnsInOrderBy__I_dispatch, // invoke this method
  ODBCDatabaseMetaData_getMaxColumnsInOrderBy__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getMaxColumnsInSelect__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getMaxColumnsInSelect__I_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getMaxColumnsInSelect__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getMaxColumnsInSelect__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxColumnsInSelect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1y_getMaxColumnsInSelect", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getMaxColumnsInSelect__I_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getMaxColumnsInSelect__I_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getMaxColumnsInSelect__I_dispatch, // invoke this method
  ODBCDatabaseMetaData_getMaxColumnsInSelect__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getMaxColumnsInTable__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getMaxColumnsInTable__I_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getMaxColumnsInTable__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getMaxColumnsInTable__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxColumnsInTable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1z_getMaxColumnsInTable", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getMaxColumnsInTable__I_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getMaxColumnsInTable__I_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getMaxColumnsInTable__I_dispatch, // invoke this method
  ODBCDatabaseMetaData_getMaxColumnsInTable__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getMaxConnections__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getMaxConnections__I_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getMaxConnections__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getMaxConnections__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxConnections", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1A_getMaxConnections", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getMaxConnections__I_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getMaxConnections__I_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getMaxConnections__I_dispatch, // invoke this method
  ODBCDatabaseMetaData_getMaxConnections__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getMaxCursorNameLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getMaxCursorNameLength__I_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getMaxCursorNameLength__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getMaxCursorNameLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxCursorNameLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1B_getMaxCursorNameLength", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getMaxCursorNameLength__I_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getMaxCursorNameLength__I_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getMaxCursorNameLength__I_dispatch, // invoke this method
  ODBCDatabaseMetaData_getMaxCursorNameLength__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getMaxIndexLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getMaxIndexLength__I_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getMaxIndexLength__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getMaxIndexLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxIndexLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1C_getMaxIndexLength", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getMaxIndexLength__I_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getMaxIndexLength__I_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getMaxIndexLength__I_dispatch, // invoke this method
  ODBCDatabaseMetaData_getMaxIndexLength__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getMaxProcedureNameLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getMaxProcedureNameLength__I_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getMaxProcedureNameLength__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getMaxProcedureNameLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxProcedureNameLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1E_getMaxProcedureNameLength", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getMaxProcedureNameLength__I_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getMaxProcedureNameLength__I_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getMaxProcedureNameLength__I_dispatch, // invoke this method
  ODBCDatabaseMetaData_getMaxProcedureNameLength__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getMaxRowSize__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getMaxRowSize__I_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getMaxRowSize__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getMaxRowSize__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxRowSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1G_getMaxRowSize", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getMaxRowSize__I_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getMaxRowSize__I_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getMaxRowSize__I_dispatch, // invoke this method
  ODBCDatabaseMetaData_getMaxRowSize__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getMaxSchemaNameLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getMaxSchemaNameLength__I_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getMaxSchemaNameLength__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getMaxSchemaNameLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxSchemaNameLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1D_getMaxSchemaNameLength", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getMaxSchemaNameLength__I_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getMaxSchemaNameLength__I_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getMaxSchemaNameLength__I_dispatch, // invoke this method
  ODBCDatabaseMetaData_getMaxSchemaNameLength__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getMaxStatementLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getMaxStatementLength__I_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getMaxStatementLength__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getMaxStatementLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxStatementLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1I_getMaxStatementLength", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getMaxStatementLength__I_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getMaxStatementLength__I_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getMaxStatementLength__I_dispatch, // invoke this method
  ODBCDatabaseMetaData_getMaxStatementLength__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getMaxStatements__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getMaxStatements__I_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getMaxStatements__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getMaxStatements__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxStatements", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1J_getMaxStatements", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getMaxStatements__I_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getMaxStatements__I_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getMaxStatements__I_dispatch, // invoke this method
  ODBCDatabaseMetaData_getMaxStatements__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getMaxTableNameLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getMaxTableNameLength__I_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getMaxTableNameLength__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getMaxTableNameLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxTableNameLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1K_getMaxTableNameLength", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getMaxTableNameLength__I_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getMaxTableNameLength__I_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getMaxTableNameLength__I_dispatch, // invoke this method
  ODBCDatabaseMetaData_getMaxTableNameLength__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getMaxTableUserLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getMaxTableUserLength__I_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getMaxTableUserLength__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getMaxTableUserLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxTableUserLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1M_getMaxTableUserLength", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getMaxTableUserLength__I_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getMaxTableUserLength__I_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getMaxTableUserLength__I_dispatch, // invoke this method
  ODBCDatabaseMetaData_getMaxTableUserLength__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getMaxTablesInSelect__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getMaxTablesInSelect__I_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getMaxTablesInSelect__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getMaxTablesInSelect__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxTablesInSelect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1L_getMaxTablesInSelect", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getMaxTablesInSelect__I_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getMaxTablesInSelect__I_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getMaxTablesInSelect__I_dispatch, // invoke this method
  ODBCDatabaseMetaData_getMaxTablesInSelect__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getNumericFunctions__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getNumericFunctions__LRString__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getNumericFunctions__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getNumericFunctions__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNumericFunctions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_r_getNumericFunctions", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getNumericFunctions__LRString__args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getNumericFunctions__LRString__exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getNumericFunctions__LRString__dispatch, // invoke this method
  ODBCDatabaseMetaData_getNumericFunctions__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getPrimaryKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_catalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "catalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getPrimaryKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_schema = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "schema", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getPrimaryKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_table = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "table", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getPrimaryKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__args[] = 
{
  &ODBCDatabaseMetaData_methods_getPrimaryKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_catalog,
  &ODBCDatabaseMetaData_methods_getPrimaryKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_schema,
  &ODBCDatabaseMetaData_methods_getPrimaryKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_table,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getPrimaryKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getPrimaryKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getPrimaryKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPrimaryKeys", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::sql::RResultSet::clazzInfo(), // return type
  "_25_getPrimaryKeys", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getPrimaryKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getPrimaryKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getPrimaryKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__dispatch, // invoke this method
  ODBCDatabaseMetaData_getPrimaryKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_catalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "catalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_schemaPattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "schemaPattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_namePattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "namePattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_columnPattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnPattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__args[] = 
{
  &ODBCDatabaseMetaData_methods_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_catalog,
  &ODBCDatabaseMetaData_methods_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_schemaPattern,
  &ODBCDatabaseMetaData_methods_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_namePattern,
  &ODBCDatabaseMetaData_methods_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_columnPattern,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getProcedureColumns", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::sql::RResultSet::clazzInfo(), // return type
  "_1V_getProcedureColumns", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__dispatch, // invoke this method
  ODBCDatabaseMetaData_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getProcedureTerm__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getProcedureTerm__LRString__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getProcedureTerm__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getProcedureTerm__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getProcedureTerm", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_Z_getProcedureTerm", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getProcedureTerm__LRString__args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getProcedureTerm__LRString__exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getProcedureTerm__LRString__dispatch, // invoke this method
  ODBCDatabaseMetaData_getProcedureTerm__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getProcedures_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_catalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "catalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getProcedures_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_schemaPattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "schemaPattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getProcedures_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_namePattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "namePattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getProcedures_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__args[] = 
{
  &ODBCDatabaseMetaData_methods_getProcedures_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_catalog,
  &ODBCDatabaseMetaData_methods_getProcedures_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_schemaPattern,
  &ODBCDatabaseMetaData_methods_getProcedures_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_namePattern,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getProcedures_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getProcedures_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getProcedures_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getProcedures", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::sql::RResultSet::clazzInfo(), // return type
  "_1U_getProcedures", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getProcedures_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getProcedures_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getProcedures_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__dispatch, // invoke this method
  ODBCDatabaseMetaData_getProcedures_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getSQLKeywords__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getSQLKeywords__LRString__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getSQLKeywords__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getSQLKeywords__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSQLKeywords", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_q_getSQLKeywords", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getSQLKeywords__LRString__args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getSQLKeywords__LRString__exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getSQLKeywords__LRString__dispatch, // invoke this method
  ODBCDatabaseMetaData_getSQLKeywords__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getSchemaTerm__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getSchemaTerm__LRString__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getSchemaTerm__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getSchemaTerm__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSchemaTerm", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_Y_getSchemaTerm", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getSchemaTerm__LRString__args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getSchemaTerm__LRString__exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getSchemaTerm__LRString__dispatch, // invoke this method
  ODBCDatabaseMetaData_getSchemaTerm__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getSchemas__L_acdk_sql_RResultSet__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getSchemas__L_acdk_sql_RResultSet__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getSchemas__L_acdk_sql_RResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getSchemas__L_acdk_sql_RResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSchemas", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::sql::RResultSet::clazzInfo(), // return type
  "_1X_getSchemas", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getSchemas__L_acdk_sql_RResultSet__args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getSchemas__L_acdk_sql_RResultSet__exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getSchemas__L_acdk_sql_RResultSet__dispatch, // invoke this method
  ODBCDatabaseMetaData_getSchemas__L_acdk_sql_RResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getSearchStringEscape__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getSearchStringEscape__LRString__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getSearchStringEscape__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getSearchStringEscape__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSearchStringEscape", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_v_getSearchStringEscape", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getSearchStringEscape__LRString__args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getSearchStringEscape__LRString__exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getSearchStringEscape__LRString__dispatch, // invoke this method
  ODBCDatabaseMetaData_getSearchStringEscape__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getShortInfo_I_S_arg_code = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "code", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getShortInfo_I_S_args[] = 
{
  &ODBCDatabaseMetaData_methods_getShortInfo_I_S_arg_code,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getShortInfo_I_S_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getShortInfo_I_S_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getShortInfo_I_S = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getShortInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(), // return type
  "_2r_getShortInfo", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getShortInfo_I_S_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getShortInfo_I_S_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getShortInfo_I_S_dispatch, // invoke this method
  ODBCDatabaseMetaData_getShortInfo_I_S_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getStringFunctions__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getStringFunctions__LRString__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getStringFunctions__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getStringFunctions__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getStringFunctions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_s_getStringFunctions", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getStringFunctions__LRString__args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getStringFunctions__LRString__exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getStringFunctions__LRString__dispatch, // invoke this method
  ODBCDatabaseMetaData_getStringFunctions__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getStringInfo_I_LRString__arg_code = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "code", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getStringInfo_I_LRString__args[] = 
{
  &ODBCDatabaseMetaData_methods_getStringInfo_I_LRString__arg_code,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getStringInfo_I_LRString__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getStringInfo_I_LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getStringInfo_I_LRString_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getStringInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2q_getStringInfo", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getStringInfo_I_LRString__args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getStringInfo_I_LRString__exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getStringInfo_I_LRString__dispatch, // invoke this method
  ODBCDatabaseMetaData_getStringInfo_I_LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getSystemFunctions__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getSystemFunctions__LRString__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getSystemFunctions__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getSystemFunctions__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSystemFunctions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_t_getSystemFunctions", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getSystemFunctions__LRString__args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getSystemFunctions__LRString__exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getSystemFunctions__LRString__dispatch, // invoke this method
  ODBCDatabaseMetaData_getSystemFunctions__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getTablePrivileges_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_catalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "catalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getTablePrivileges_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_schema = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "schema", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getTablePrivileges_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_table = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "table", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getTablePrivileges_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__args[] = 
{
  &ODBCDatabaseMetaData_methods_getTablePrivileges_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_catalog,
  &ODBCDatabaseMetaData_methods_getTablePrivileges_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_schema,
  &ODBCDatabaseMetaData_methods_getTablePrivileges_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_table,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getTablePrivileges_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getTablePrivileges_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getTablePrivileges_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTablePrivileges", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::sql::RResultSet::clazzInfo(), // return type
  "_22_getTablePrivileges", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getTablePrivileges_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getTablePrivileges_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getTablePrivileges_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__dispatch, // invoke this method
  ODBCDatabaseMetaData_getTablePrivileges_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getTableTypes__L_acdk_sql_RResultSet__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getTableTypes__L_acdk_sql_RResultSet__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getTableTypes__L_acdk_sql_RResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getTableTypes__L_acdk_sql_RResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTableTypes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::sql::RResultSet::clazzInfo(), // return type
  "_1Z_getTableTypes", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getTableTypes__L_acdk_sql_RResultSet__args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getTableTypes__L_acdk_sql_RResultSet__exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getTableTypes__L_acdk_sql_RResultSet__dispatch, // invoke this method
  ODBCDatabaseMetaData_getTableTypes__L_acdk_sql_RResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getTables_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_catalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "catalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getTables_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_schemaPattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "schemaPattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getTables_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_namePattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "namePattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getTables_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__args[] = 
{
  &ODBCDatabaseMetaData_methods_getTables_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_catalog,
  &ODBCDatabaseMetaData_methods_getTables_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_schemaPattern,
  &ODBCDatabaseMetaData_methods_getTables_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_namePattern,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getTables_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getTables_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getTables_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTables", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::sql::RResultSet::clazzInfo(), // return type
  "_1W_getTables", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getTables_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getTables_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getTables_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__dispatch, // invoke this method
  ODBCDatabaseMetaData_getTables_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getTypeInfo__L_acdk_sql_RResultSet__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getTypeInfo__L_acdk_sql_RResultSet__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getTypeInfo__L_acdk_sql_RResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getTypeInfo__L_acdk_sql_RResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTypeInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::sql::RResultSet::clazzInfo(), // return type
  "_29_getTypeInfo", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getTypeInfo__L_acdk_sql_RResultSet__args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getTypeInfo__L_acdk_sql_RResultSet__exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getTypeInfo__L_acdk_sql_RResultSet__dispatch, // invoke this method
  ODBCDatabaseMetaData_getTypeInfo__L_acdk_sql_RResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getUDTs_INLRString_INLRString_INLRString_INLRintArray__L_acdk_sql_RResultSet__arg_catalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "catalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getUDTs_INLRString_INLRString_INLRString_INLRintArray__L_acdk_sql_RResultSet__arg_schema = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "schema", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getUDTs_INLRString_INLRString_INLRString_INLRintArray__L_acdk_sql_RResultSet__arg_typePattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "typePattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getUDTs_INLRString_INLRString_INLRString_INLRintArray__L_acdk_sql_RResultSet__arg_types = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "types", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RintArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getUDTs_INLRString_INLRString_INLRString_INLRintArray__L_acdk_sql_RResultSet__args[] = 
{
  &ODBCDatabaseMetaData_methods_getUDTs_INLRString_INLRString_INLRString_INLRintArray__L_acdk_sql_RResultSet__arg_catalog,
  &ODBCDatabaseMetaData_methods_getUDTs_INLRString_INLRString_INLRString_INLRintArray__L_acdk_sql_RResultSet__arg_schema,
  &ODBCDatabaseMetaData_methods_getUDTs_INLRString_INLRString_INLRString_INLRintArray__L_acdk_sql_RResultSet__arg_typePattern,
  &ODBCDatabaseMetaData_methods_getUDTs_INLRString_INLRString_INLRString_INLRintArray__L_acdk_sql_RResultSet__arg_types,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getUDTs_INLRString_INLRString_INLRString_INLRintArray__L_acdk_sql_RResultSet__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getUDTs_INLRString_INLRString_INLRString_INLRintArray__L_acdk_sql_RResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getUDTs_INLRString_INLRString_INLRString_INLRintArray__L_acdk_sql_RResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getUDTs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::sql::RResultSet::clazzInfo(), // return type
  "_2n_getUDTs", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getUDTs_INLRString_INLRString_INLRString_INLRintArray__L_acdk_sql_RResultSet__args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getUDTs_INLRString_INLRString_INLRString_INLRintArray__L_acdk_sql_RResultSet__exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getUDTs_INLRString_INLRString_INLRString_INLRintArray__L_acdk_sql_RResultSet__dispatch, // invoke this method
  ODBCDatabaseMetaData_getUDTs_INLRString_INLRString_INLRString_INLRintArray__L_acdk_sql_RResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getURL__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getURL__LRString__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getURL__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getURL__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getURL", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_getURL", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getURL__LRString__args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getURL__LRString__exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getURL__LRString__dispatch, // invoke this method
  ODBCDatabaseMetaData_getURL__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getUserName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getUserName__LRString__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getUserName__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getUserName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getUserName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_getUserName", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getUserName__LRString__args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getUserName__LRString__exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getUserName__LRString__dispatch, // invoke this method
  ODBCDatabaseMetaData_getUserName__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getVersionColumns_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_catalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "catalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getVersionColumns_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_schema = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "schema", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_getVersionColumns_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_table = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "table", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_getVersionColumns_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__args[] = 
{
  &ODBCDatabaseMetaData_methods_getVersionColumns_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_catalog,
  &ODBCDatabaseMetaData_methods_getVersionColumns_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_schema,
  &ODBCDatabaseMetaData_methods_getVersionColumns_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__arg_table,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_getVersionColumns_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_getVersionColumns_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_getVersionColumns_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getVersionColumns", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::sql::RResultSet::clazzInfo(), // return type
  "_24_getVersionColumns", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_getVersionColumns_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_getVersionColumns_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_getVersionColumns_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__dispatch, // invoke this method
  ODBCDatabaseMetaData_getVersionColumns_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_insertsAreDetected_I_Z_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_insertsAreDetected_I_Z_args[] = 
{
  &ODBCDatabaseMetaData_methods_insertsAreDetected_I_Z_arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_insertsAreDetected_I_Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_insertsAreDetected_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_insertsAreDetected_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insertsAreDetected", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2l_insertsAreDetected", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_insertsAreDetected_I_Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_insertsAreDetected_I_Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_insertsAreDetected_I_Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_insertsAreDetected_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_isCatalogAtStart__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_isCatalogAtStart__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_isCatalogAtStart__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_isCatalogAtStart__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isCatalogAtStart", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_11_isCatalogAtStart", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_isCatalogAtStart__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_isCatalogAtStart__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_isCatalogAtStart__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_isCatalogAtStart__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_isReadOnly__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_isReadOnly__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_isReadOnly__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_isReadOnly__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isReadOnly", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_isReadOnly", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_isReadOnly__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_isReadOnly__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_isReadOnly__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_isReadOnly__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_nullPlusNonNullIsNull__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_nullPlusNonNullIsNull__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_nullPlusNonNullIsNull__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_nullPlusNonNullIsNull__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nullPlusNonNullIsNull", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_A_nullPlusNonNullIsNull", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_nullPlusNonNullIsNull__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_nullPlusNonNullIsNull__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_nullPlusNonNullIsNull__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_nullPlusNonNullIsNull__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_nullsAreSortedAtEnd__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_nullsAreSortedAtEnd__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_nullsAreSortedAtEnd__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_nullsAreSortedAtEnd__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nullsAreSortedAtEnd", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_8_nullsAreSortedAtEnd", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_nullsAreSortedAtEnd__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_nullsAreSortedAtEnd__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_nullsAreSortedAtEnd__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_nullsAreSortedAtEnd__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_nullsAreSortedAtStart__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_nullsAreSortedAtStart__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_nullsAreSortedAtStart__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_nullsAreSortedAtStart__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nullsAreSortedAtStart", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_nullsAreSortedAtStart", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_nullsAreSortedAtStart__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_nullsAreSortedAtStart__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_nullsAreSortedAtStart__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_nullsAreSortedAtStart__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_nullsAreSortedHigh__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_nullsAreSortedHigh__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_nullsAreSortedHigh__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_nullsAreSortedHigh__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nullsAreSortedHigh", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_nullsAreSortedHigh", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_nullsAreSortedHigh__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_nullsAreSortedHigh__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_nullsAreSortedHigh__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_nullsAreSortedHigh__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_nullsAreSortedLow__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_nullsAreSortedLow__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_nullsAreSortedLow__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_nullsAreSortedLow__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nullsAreSortedLow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_nullsAreSortedLow", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_nullsAreSortedLow__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_nullsAreSortedLow__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_nullsAreSortedLow__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_nullsAreSortedLow__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_othersDeletesAreVisible_I_Z_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_othersDeletesAreVisible_I_Z_args[] = 
{
  &ODBCDatabaseMetaData_methods_othersDeletesAreVisible_I_Z_arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_othersDeletesAreVisible_I_Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_othersDeletesAreVisible_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_othersDeletesAreVisible_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "othersDeletesAreVisible", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2h_othersDeletesAreVisible", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_othersDeletesAreVisible_I_Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_othersDeletesAreVisible_I_Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_othersDeletesAreVisible_I_Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_othersDeletesAreVisible_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_othersInsertsAreVisible_I_Z_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_othersInsertsAreVisible_I_Z_args[] = 
{
  &ODBCDatabaseMetaData_methods_othersInsertsAreVisible_I_Z_arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_othersInsertsAreVisible_I_Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_othersInsertsAreVisible_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_othersInsertsAreVisible_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "othersInsertsAreVisible", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2i_othersInsertsAreVisible", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_othersInsertsAreVisible_I_Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_othersInsertsAreVisible_I_Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_othersInsertsAreVisible_I_Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_othersInsertsAreVisible_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_othersUpdatesAreVisible_I_Z_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_othersUpdatesAreVisible_I_Z_args[] = 
{
  &ODBCDatabaseMetaData_methods_othersUpdatesAreVisible_I_Z_arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_othersUpdatesAreVisible_I_Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_othersUpdatesAreVisible_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_othersUpdatesAreVisible_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "othersUpdatesAreVisible", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2g_othersUpdatesAreVisible", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_othersUpdatesAreVisible_I_Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_othersUpdatesAreVisible_I_Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_othersUpdatesAreVisible_I_Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_othersUpdatesAreVisible_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_ownDeletesAreVisible_I_Z_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_ownDeletesAreVisible_I_Z_args[] = 
{
  &ODBCDatabaseMetaData_methods_ownDeletesAreVisible_I_Z_arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_ownDeletesAreVisible_I_Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_ownDeletesAreVisible_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_ownDeletesAreVisible_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ownDeletesAreVisible", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2e_ownDeletesAreVisible", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_ownDeletesAreVisible_I_Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_ownDeletesAreVisible_I_Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_ownDeletesAreVisible_I_Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_ownDeletesAreVisible_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_ownInsertsAreVisible_I_Z_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_ownInsertsAreVisible_I_Z_args[] = 
{
  &ODBCDatabaseMetaData_methods_ownInsertsAreVisible_I_Z_arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_ownInsertsAreVisible_I_Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_ownInsertsAreVisible_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_ownInsertsAreVisible_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ownInsertsAreVisible", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2f_ownInsertsAreVisible", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_ownInsertsAreVisible_I_Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_ownInsertsAreVisible_I_Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_ownInsertsAreVisible_I_Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_ownInsertsAreVisible_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_ownUpdatesAreVisible_I_Z_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_ownUpdatesAreVisible_I_Z_args[] = 
{
  &ODBCDatabaseMetaData_methods_ownUpdatesAreVisible_I_Z_arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_ownUpdatesAreVisible_I_Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_ownUpdatesAreVisible_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_ownUpdatesAreVisible_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ownUpdatesAreVisible", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2d_ownUpdatesAreVisible", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_ownUpdatesAreVisible_I_Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_ownUpdatesAreVisible_I_Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_ownUpdatesAreVisible_I_Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_ownUpdatesAreVisible_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_storesLowerCaseIdentifiers__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_storesLowerCaseIdentifiers__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_storesLowerCaseIdentifiers__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_storesLowerCaseIdentifiers__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "storesLowerCaseIdentifiers", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_j_storesLowerCaseIdentifiers", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_storesLowerCaseIdentifiers__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_storesLowerCaseIdentifiers__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_storesLowerCaseIdentifiers__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_storesLowerCaseIdentifiers__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_storesLowerCaseQuotedIdentifiers__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_storesLowerCaseQuotedIdentifiers__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_storesLowerCaseQuotedIdentifiers__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_storesLowerCaseQuotedIdentifiers__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "storesLowerCaseQuotedIdentifiers", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_n_storesLowerCaseQuotedIdentifiers", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_storesLowerCaseQuotedIdentifiers__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_storesLowerCaseQuotedIdentifiers__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_storesLowerCaseQuotedIdentifiers__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_storesLowerCaseQuotedIdentifiers__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_storesMixedCaseIdentifiers__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_storesMixedCaseIdentifiers__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_storesMixedCaseIdentifiers__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_storesMixedCaseIdentifiers__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "storesMixedCaseIdentifiers", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_k_storesMixedCaseIdentifiers", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_storesMixedCaseIdentifiers__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_storesMixedCaseIdentifiers__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_storesMixedCaseIdentifiers__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_storesMixedCaseIdentifiers__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_storesMixedCaseQuotedIdentifiers__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_storesMixedCaseQuotedIdentifiers__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_storesMixedCaseQuotedIdentifiers__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_storesMixedCaseQuotedIdentifiers__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "storesMixedCaseQuotedIdentifiers", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_o_storesMixedCaseQuotedIdentifiers", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_storesMixedCaseQuotedIdentifiers__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_storesMixedCaseQuotedIdentifiers__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_storesMixedCaseQuotedIdentifiers__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_storesMixedCaseQuotedIdentifiers__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_storesUpperCaseIdentifiers__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_storesUpperCaseIdentifiers__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_storesUpperCaseIdentifiers__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_storesUpperCaseIdentifiers__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "storesUpperCaseIdentifiers", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_i_storesUpperCaseIdentifiers", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_storesUpperCaseIdentifiers__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_storesUpperCaseIdentifiers__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_storesUpperCaseIdentifiers__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_storesUpperCaseIdentifiers__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_storesUpperCaseQuotedIdentifiers__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_storesUpperCaseQuotedIdentifiers__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_storesUpperCaseQuotedIdentifiers__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_storesUpperCaseQuotedIdentifiers__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "storesUpperCaseQuotedIdentifiers", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_m_storesUpperCaseQuotedIdentifiers", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_storesUpperCaseQuotedIdentifiers__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_storesUpperCaseQuotedIdentifiers__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_storesUpperCaseQuotedIdentifiers__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_storesUpperCaseQuotedIdentifiers__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsANSI92EntryLevelSQL__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsANSI92EntryLevelSQL__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsANSI92EntryLevelSQL__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsANSI92EntryLevelSQL__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsANSI92EntryLevelSQL", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_R_supportsANSI92EntryLevelSQL", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsANSI92EntryLevelSQL__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsANSI92EntryLevelSQL__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsANSI92EntryLevelSQL__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsANSI92EntryLevelSQL__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsANSI92FullSQL__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsANSI92FullSQL__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsANSI92FullSQL__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsANSI92FullSQL__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsANSI92FullSQL", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_T_supportsANSI92FullSQL", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsANSI92FullSQL__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsANSI92FullSQL__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsANSI92FullSQL__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsANSI92FullSQL__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsANSI92IntermediateSQL__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsANSI92IntermediateSQL__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsANSI92IntermediateSQL__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsANSI92IntermediateSQL__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsANSI92IntermediateSQL", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_S_supportsANSI92IntermediateSQL", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsANSI92IntermediateSQL__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsANSI92IntermediateSQL__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsANSI92IntermediateSQL__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsANSI92IntermediateSQL__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsAlterTableWithAddColumn__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsAlterTableWithAddColumn__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsAlterTableWithAddColumn__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsAlterTableWithAddColumn__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsAlterTableWithAddColumn", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_x_supportsAlterTableWithAddColumn", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsAlterTableWithAddColumn__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsAlterTableWithAddColumn__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsAlterTableWithAddColumn__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsAlterTableWithAddColumn__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsAlterTableWithDropColumn__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsAlterTableWithDropColumn__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsAlterTableWithDropColumn__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsAlterTableWithDropColumn__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsAlterTableWithDropColumn", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_y_supportsAlterTableWithDropColumn", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsAlterTableWithDropColumn__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsAlterTableWithDropColumn__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsAlterTableWithDropColumn__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsAlterTableWithDropColumn__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsBatchUpdates__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsBatchUpdates__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsBatchUpdates__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsBatchUpdates__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsBatchUpdates", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2m_supportsBatchUpdates", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsBatchUpdates__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsBatchUpdates__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsBatchUpdates__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsBatchUpdates__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsCatalogInPrivilegeDefinitions__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsCatalogInPrivilegeDefinitions__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsCatalogInPrivilegeDefinitions__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsCatalogInPrivilegeDefinitions__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsCatalogInPrivilegeDefinitions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1c_supportsCatalogInPrivilegeDefinitions", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsCatalogInPrivilegeDefinitions__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsCatalogInPrivilegeDefinitions__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsCatalogInPrivilegeDefinitions__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsCatalogInPrivilegeDefinitions__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsCatalogsInDataManipulation__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsCatalogsInDataManipulation__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsCatalogsInDataManipulation__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsCatalogsInDataManipulation__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsCatalogsInDataManipulation", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_18_supportsCatalogsInDataManipulation", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsCatalogsInDataManipulation__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsCatalogsInDataManipulation__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsCatalogsInDataManipulation__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsCatalogsInDataManipulation__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsCatalogsInIndexDefinitions__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsCatalogsInIndexDefinitions__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsCatalogsInIndexDefinitions__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsCatalogsInIndexDefinitions__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsCatalogsInIndexDefinitions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1b_supportsCatalogsInIndexDefinitions", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsCatalogsInIndexDefinitions__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsCatalogsInIndexDefinitions__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsCatalogsInIndexDefinitions__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsCatalogsInIndexDefinitions__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsCatalogsInProcedureCalls__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsCatalogsInProcedureCalls__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsCatalogsInProcedureCalls__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsCatalogsInProcedureCalls__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsCatalogsInProcedureCalls", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_19_supportsCatalogsInProcedureCalls", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsCatalogsInProcedureCalls__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsCatalogsInProcedureCalls__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsCatalogsInProcedureCalls__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsCatalogsInProcedureCalls__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsCatalogsInTableDefinitions__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsCatalogsInTableDefinitions__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsCatalogsInTableDefinitions__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsCatalogsInTableDefinitions__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsCatalogsInTableDefinitions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1a_supportsCatalogsInTableDefinitions", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsCatalogsInTableDefinitions__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsCatalogsInTableDefinitions__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsCatalogsInTableDefinitions__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsCatalogsInTableDefinitions__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsColumnAliasing__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsColumnAliasing__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsColumnAliasing__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsColumnAliasing__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsColumnAliasing", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_z_supportsColumnAliasing", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsColumnAliasing__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsColumnAliasing__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsColumnAliasing__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsColumnAliasing__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsConvert__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsConvert__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsConvert__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsConvert__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsConvert", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_B_supportsConvert", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsConvert__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsConvert__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsConvert__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsConvert__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_supportsConvert_II_Z_arg_fromType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "fromType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_supportsConvert_II_Z_arg_toType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "toType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsConvert_II_Z_args[] = 
{
  &ODBCDatabaseMetaData_methods_supportsConvert_II_Z_arg_fromType,
  &ODBCDatabaseMetaData_methods_supportsConvert_II_Z_arg_toType,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsConvert_II_Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsConvert_II_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsConvert_II_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsConvert", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_C_supportsConvert", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsConvert_II_Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsConvert_II_Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsConvert_II_Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsConvert_II_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsCoreSQLGrammar__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsCoreSQLGrammar__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsCoreSQLGrammar__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsCoreSQLGrammar__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsCoreSQLGrammar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_P_supportsCoreSQLGrammar", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsCoreSQLGrammar__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsCoreSQLGrammar__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsCoreSQLGrammar__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsCoreSQLGrammar__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsCorrelatedSubqueries__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsCorrelatedSubqueries__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsCorrelatedSubqueries__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsCorrelatedSubqueries__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsCorrelatedSubqueries", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1l_supportsCorrelatedSubqueries", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsCorrelatedSubqueries__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsCorrelatedSubqueries__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsCorrelatedSubqueries__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsCorrelatedSubqueries__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsDataDefinitionAndDataManipulationTransactions__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsDataDefinitionAndDataManipulationTransactions__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsDataDefinitionAndDataManipulationTransactions__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsDataDefinitionAndDataManipulationTransactions__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsDataDefinitionAndDataManipulationTransactions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1Q_supportsDataDefinitionAndDataManipulationTransactions", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsDataDefinitionAndDataManipulationTransactions__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsDataDefinitionAndDataManipulationTransactions__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsDataDefinitionAndDataManipulationTransactions__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsDataDefinitionAndDataManipulationTransactions__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsDataManipulationTransactionsOnly__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsDataManipulationTransactionsOnly__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsDataManipulationTransactionsOnly__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsDataManipulationTransactionsOnly__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsDataManipulationTransactionsOnly", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1R_supportsDataManipulationTransactionsOnly", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsDataManipulationTransactionsOnly__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsDataManipulationTransactionsOnly__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsDataManipulationTransactionsOnly__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsDataManipulationTransactionsOnly__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsDifferentTableCorrelationNames__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsDifferentTableCorrelationNames__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsDifferentTableCorrelationNames__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsDifferentTableCorrelationNames__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsDifferentTableCorrelationNames", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_E_supportsDifferentTableCorrelationNames", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsDifferentTableCorrelationNames__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsDifferentTableCorrelationNames__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsDifferentTableCorrelationNames__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsDifferentTableCorrelationNames__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsExpressionsInOrderBy__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsExpressionsInOrderBy__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsExpressionsInOrderBy__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsExpressionsInOrderBy__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsExpressionsInOrderBy", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_F_supportsExpressionsInOrderBy", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsExpressionsInOrderBy__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsExpressionsInOrderBy__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsExpressionsInOrderBy__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsExpressionsInOrderBy__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsExtendedSQLGrammar__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsExtendedSQLGrammar__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsExtendedSQLGrammar__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsExtendedSQLGrammar__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsExtendedSQLGrammar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_Q_supportsExtendedSQLGrammar", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsExtendedSQLGrammar__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsExtendedSQLGrammar__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsExtendedSQLGrammar__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsExtendedSQLGrammar__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsFullOuterJoins__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsFullOuterJoins__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsFullOuterJoins__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsFullOuterJoins__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsFullOuterJoins", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_W_supportsFullOuterJoins", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsFullOuterJoins__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsFullOuterJoins__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsFullOuterJoins__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsFullOuterJoins__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsGroupBy__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsGroupBy__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsGroupBy__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsGroupBy__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsGroupBy", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_H_supportsGroupBy", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsGroupBy__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsGroupBy__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsGroupBy__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsGroupBy__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsGroupByBeyondSelect__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsGroupByBeyondSelect__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsGroupByBeyondSelect__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsGroupByBeyondSelect__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsGroupByBeyondSelect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_J_supportsGroupByBeyondSelect", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsGroupByBeyondSelect__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsGroupByBeyondSelect__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsGroupByBeyondSelect__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsGroupByBeyondSelect__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsGroupByUnrelated__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsGroupByUnrelated__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsGroupByUnrelated__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsGroupByUnrelated__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsGroupByUnrelated", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_I_supportsGroupByUnrelated", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsGroupByUnrelated__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsGroupByUnrelated__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsGroupByUnrelated__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsGroupByUnrelated__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsIntegrityEnhancementFacility__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsIntegrityEnhancementFacility__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsIntegrityEnhancementFacility__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsIntegrityEnhancementFacility__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsIntegrityEnhancementFacility", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_U_supportsIntegrityEnhancementFacility", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsIntegrityEnhancementFacility__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsIntegrityEnhancementFacility__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsIntegrityEnhancementFacility__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsIntegrityEnhancementFacility__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsLikeEscapeClause__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsLikeEscapeClause__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsLikeEscapeClause__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsLikeEscapeClause__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsLikeEscapeClause", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_K_supportsLikeEscapeClause", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsLikeEscapeClause__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsLikeEscapeClause__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsLikeEscapeClause__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsLikeEscapeClause__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsLimitedOuterJoins__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsLimitedOuterJoins__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsLimitedOuterJoins__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsLimitedOuterJoins__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsLimitedOuterJoins", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_X_supportsLimitedOuterJoins", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsLimitedOuterJoins__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsLimitedOuterJoins__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsLimitedOuterJoins__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsLimitedOuterJoins__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsMinimumSQLGrammar__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsMinimumSQLGrammar__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsMinimumSQLGrammar__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsMinimumSQLGrammar__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsMinimumSQLGrammar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_O_supportsMinimumSQLGrammar", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsMinimumSQLGrammar__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsMinimumSQLGrammar__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsMinimumSQLGrammar__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsMinimumSQLGrammar__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsMixedCaseIdentifiers__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsMixedCaseIdentifiers__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsMixedCaseIdentifiers__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsMixedCaseIdentifiers__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsMixedCaseIdentifiers", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_h_supportsMixedCaseIdentifiers", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsMixedCaseIdentifiers__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsMixedCaseIdentifiers__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsMixedCaseIdentifiers__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsMixedCaseIdentifiers__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsMixedCaseQuotedIdentifiers__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsMixedCaseQuotedIdentifiers__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsMixedCaseQuotedIdentifiers__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsMixedCaseQuotedIdentifiers__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsMixedCaseQuotedIdentifiers", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_l_supportsMixedCaseQuotedIdentifiers", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsMixedCaseQuotedIdentifiers__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsMixedCaseQuotedIdentifiers__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsMixedCaseQuotedIdentifiers__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsMixedCaseQuotedIdentifiers__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsMultipleResultSets__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsMultipleResultSets__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsMultipleResultSets__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsMultipleResultSets__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsMultipleResultSets", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_L_supportsMultipleResultSets", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsMultipleResultSets__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsMultipleResultSets__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsMultipleResultSets__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsMultipleResultSets__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsMultipleTransactions__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsMultipleTransactions__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsMultipleTransactions__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsMultipleTransactions__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsMultipleTransactions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_M_supportsMultipleTransactions", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsMultipleTransactions__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsMultipleTransactions__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsMultipleTransactions__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsMultipleTransactions__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsNonNullableColumns__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsNonNullableColumns__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsNonNullableColumns__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsNonNullableColumns__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsNonNullableColumns", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_N_supportsNonNullableColumns", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsNonNullableColumns__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsNonNullableColumns__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsNonNullableColumns__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsNonNullableColumns__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsOpenCursorsAcrossCommit__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsOpenCursorsAcrossCommit__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsOpenCursorsAcrossCommit__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsOpenCursorsAcrossCommit__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsOpenCursorsAcrossCommit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1o_supportsOpenCursorsAcrossCommit", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsOpenCursorsAcrossCommit__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsOpenCursorsAcrossCommit__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsOpenCursorsAcrossCommit__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsOpenCursorsAcrossCommit__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsOpenCursorsAcrossRollback__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsOpenCursorsAcrossRollback__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsOpenCursorsAcrossRollback__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsOpenCursorsAcrossRollback__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsOpenCursorsAcrossRollback", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1p_supportsOpenCursorsAcrossRollback", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsOpenCursorsAcrossRollback__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsOpenCursorsAcrossRollback__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsOpenCursorsAcrossRollback__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsOpenCursorsAcrossRollback__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsOpenStatementsAcrossCommit__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsOpenStatementsAcrossCommit__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsOpenStatementsAcrossCommit__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsOpenStatementsAcrossCommit__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsOpenStatementsAcrossCommit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1q_supportsOpenStatementsAcrossCommit", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsOpenStatementsAcrossCommit__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsOpenStatementsAcrossCommit__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsOpenStatementsAcrossCommit__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsOpenStatementsAcrossCommit__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsOpenStatementsAcrossRollback__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsOpenStatementsAcrossRollback__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsOpenStatementsAcrossRollback__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsOpenStatementsAcrossRollback__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsOpenStatementsAcrossRollback", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1r_supportsOpenStatementsAcrossRollback", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsOpenStatementsAcrossRollback__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsOpenStatementsAcrossRollback__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsOpenStatementsAcrossRollback__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsOpenStatementsAcrossRollback__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsOrderByUnrelated__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsOrderByUnrelated__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsOrderByUnrelated__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsOrderByUnrelated__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsOrderByUnrelated", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_G_supportsOrderByUnrelated", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsOrderByUnrelated__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsOrderByUnrelated__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsOrderByUnrelated__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsOrderByUnrelated__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsOuterJoins__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsOuterJoins__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsOuterJoins__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsOuterJoins__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsOuterJoins", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_V_supportsOuterJoins", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsOuterJoins__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsOuterJoins__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsOuterJoins__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsOuterJoins__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsPositionedDelete__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsPositionedDelete__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsPositionedDelete__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsPositionedDelete__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsPositionedDelete", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1d_supportsPositionedDelete", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsPositionedDelete__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsPositionedDelete__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsPositionedDelete__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsPositionedDelete__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsPositionedUpdate__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsPositionedUpdate__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsPositionedUpdate__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsPositionedUpdate__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsPositionedUpdate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1e_supportsPositionedUpdate", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsPositionedUpdate__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsPositionedUpdate__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsPositionedUpdate__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsPositionedUpdate__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_supportsResultSetConcurrency_II_Z_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_supportsResultSetConcurrency_II_Z_arg_concur = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "concur", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsResultSetConcurrency_II_Z_args[] = 
{
  &ODBCDatabaseMetaData_methods_supportsResultSetConcurrency_II_Z_arg_type,
  &ODBCDatabaseMetaData_methods_supportsResultSetConcurrency_II_Z_arg_concur,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsResultSetConcurrency_II_Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsResultSetConcurrency_II_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsResultSetConcurrency_II_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsResultSetConcurrency", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2c_supportsResultSetConcurrency", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsResultSetConcurrency_II_Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsResultSetConcurrency_II_Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsResultSetConcurrency_II_Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsResultSetConcurrency_II_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_supportsResultType_I_Z_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsResultType_I_Z_args[] = 
{
  &ODBCDatabaseMetaData_methods_supportsResultType_I_Z_arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsResultType_I_Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsResultType_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsResultType_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsResultType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2b_supportsResultType", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsResultType_I_Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsResultType_I_Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsResultType_I_Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsResultType_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsSchemasInDataManipulation__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsSchemasInDataManipulation__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsSchemasInDataManipulation__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsSchemasInDataManipulation__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsSchemasInDataManipulation", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_13_supportsSchemasInDataManipulation", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsSchemasInDataManipulation__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsSchemasInDataManipulation__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsSchemasInDataManipulation__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsSchemasInDataManipulation__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsSchemasInIndexDefinitions__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsSchemasInIndexDefinitions__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsSchemasInIndexDefinitions__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsSchemasInIndexDefinitions__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsSchemasInIndexDefinitions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_16_supportsSchemasInIndexDefinitions", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsSchemasInIndexDefinitions__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsSchemasInIndexDefinitions__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsSchemasInIndexDefinitions__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsSchemasInIndexDefinitions__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsSchemasInPrivilegeDefinitions__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsSchemasInPrivilegeDefinitions__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsSchemasInPrivilegeDefinitions__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsSchemasInPrivilegeDefinitions__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsSchemasInPrivilegeDefinitions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_17_supportsSchemasInPrivilegeDefinitions", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsSchemasInPrivilegeDefinitions__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsSchemasInPrivilegeDefinitions__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsSchemasInPrivilegeDefinitions__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsSchemasInPrivilegeDefinitions__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsSchemasInProcedureCalls__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsSchemasInProcedureCalls__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsSchemasInProcedureCalls__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsSchemasInProcedureCalls__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsSchemasInProcedureCalls", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_14_supportsSchemasInProcedureCalls", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsSchemasInProcedureCalls__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsSchemasInProcedureCalls__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsSchemasInProcedureCalls__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsSchemasInProcedureCalls__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsSchemasInTableDefinitions__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsSchemasInTableDefinitions__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsSchemasInTableDefinitions__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsSchemasInTableDefinitions__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsSchemasInTableDefinitions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_15_supportsSchemasInTableDefinitions", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsSchemasInTableDefinitions__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsSchemasInTableDefinitions__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsSchemasInTableDefinitions__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsSchemasInTableDefinitions__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsSelectForUpdate__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsSelectForUpdate__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsSelectForUpdate__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsSelectForUpdate__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsSelectForUpdate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1f_supportsSelectForUpdate", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsSelectForUpdate__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsSelectForUpdate__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsSelectForUpdate__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsSelectForUpdate__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsStoredProcedures__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsStoredProcedures__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsStoredProcedures__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsStoredProcedures__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsStoredProcedures", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1g_supportsStoredProcedures", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsStoredProcedures__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsStoredProcedures__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsStoredProcedures__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsStoredProcedures__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsSubqueriesInComparisons__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsSubqueriesInComparisons__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsSubqueriesInComparisons__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsSubqueriesInComparisons__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsSubqueriesInComparisons", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1h_supportsSubqueriesInComparisons", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsSubqueriesInComparisons__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsSubqueriesInComparisons__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsSubqueriesInComparisons__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsSubqueriesInComparisons__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsSubqueriesInExists__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsSubqueriesInExists__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsSubqueriesInExists__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsSubqueriesInExists__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsSubqueriesInExists", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1i_supportsSubqueriesInExists", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsSubqueriesInExists__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsSubqueriesInExists__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsSubqueriesInExists__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsSubqueriesInExists__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsSubqueriesInIns__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsSubqueriesInIns__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsSubqueriesInIns__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsSubqueriesInIns__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsSubqueriesInIns", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1j_supportsSubqueriesInIns", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsSubqueriesInIns__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsSubqueriesInIns__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsSubqueriesInIns__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsSubqueriesInIns__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsSubqueriesInQuantifieds__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsSubqueriesInQuantifieds__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsSubqueriesInQuantifieds__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsSubqueriesInQuantifieds__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsSubqueriesInQuantifieds", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1k_supportsSubqueriesInQuantifieds", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsSubqueriesInQuantifieds__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsSubqueriesInQuantifieds__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsSubqueriesInQuantifieds__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsSubqueriesInQuantifieds__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsTableCorrelationNames__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsTableCorrelationNames__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsTableCorrelationNames__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsTableCorrelationNames__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsTableCorrelationNames", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_D_supportsTableCorrelationNames", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsTableCorrelationNames__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsTableCorrelationNames__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsTableCorrelationNames__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsTableCorrelationNames__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_supportsTransactionIsolationLevel_I_Z_arg_level = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "level", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsTransactionIsolationLevel_I_Z_args[] = 
{
  &ODBCDatabaseMetaData_methods_supportsTransactionIsolationLevel_I_Z_arg_level,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsTransactionIsolationLevel_I_Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsTransactionIsolationLevel_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsTransactionIsolationLevel_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsTransactionIsolationLevel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1P_supportsTransactionIsolationLevel", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsTransactionIsolationLevel_I_Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsTransactionIsolationLevel_I_Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsTransactionIsolationLevel_I_Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsTransactionIsolationLevel_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsTransactions__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsTransactions__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsTransactions__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsTransactions__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsTransactions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1O_supportsTransactions", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsTransactions__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsTransactions__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsTransactions__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsTransactions__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsUnion__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsUnion__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsUnion__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsUnion__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsUnion", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1m_supportsUnion", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsUnion__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsUnion__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsUnion__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsUnion__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_supportsUnionAll__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_supportsUnionAll__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_supportsUnionAll__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_supportsUnionAll__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsUnionAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1n_supportsUnionAll", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_supportsUnionAll__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_supportsUnionAll__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_supportsUnionAll__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_supportsUnionAll__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDatabaseMetaData_methods_updatesAreDetected_I_Z_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_updatesAreDetected_I_Z_args[] = 
{
  &ODBCDatabaseMetaData_methods_updatesAreDetected_I_Z_arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_updatesAreDetected_I_Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_updatesAreDetected_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_updatesAreDetected_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updatesAreDetected", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2j_updatesAreDetected", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_updatesAreDetected_I_Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_updatesAreDetected_I_Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_updatesAreDetected_I_Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_updatesAreDetected_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_usesLocalFilePerTable__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_usesLocalFilePerTable__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_usesLocalFilePerTable__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_usesLocalFilePerTable__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "usesLocalFilePerTable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_g_usesLocalFilePerTable", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_usesLocalFilePerTable__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_usesLocalFilePerTable__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_usesLocalFilePerTable__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_usesLocalFilePerTable__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDatabaseMetaData_methods_usesLocalFiles__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDatabaseMetaData_methods_usesLocalFiles__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCDatabaseMetaData_usesLocalFiles__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDatabaseMetaData_method_usesLocalFiles__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "usesLocalFiles", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_f_usesLocalFiles", // alternative name of method
  -1, // altlabelHashCode
  ODBCDatabaseMetaData_methods_usesLocalFiles__Z_args, // the arguments
  0, //arguments count
  ODBCDatabaseMetaData_methods_usesLocalFiles__Z_exceptions, // the declared exceptions
  ODBCDatabaseMetaData_MetainfoWrapper::ODBCDatabaseMetaData_method_usesLocalFiles__Z_dispatch, // invoke this method
  ODBCDatabaseMetaData_usesLocalFiles__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ODBCDatabaseMetaData_methods[] = 
{
  &ODBCDatabaseMetaData_method_GetClass__L_acdk_lang_RClass_,
  &ODBCDatabaseMetaData_method_ODBCDatabaseMetaData_LRODBCConnection__LRODBCDatabaseMetaData_,
  &ODBCDatabaseMetaData_method_allProceduresAreCallable__Z,
  &ODBCDatabaseMetaData_method_allTablesAreSelectable__Z,
  &ODBCDatabaseMetaData_method_dataDefinitionCausesTransactionCommit__Z,
  &ODBCDatabaseMetaData_method_dataDefinitionIgnoredInTransactions__Z,
  &ODBCDatabaseMetaData_method_deletesAreDetected_I_Z,
  &ODBCDatabaseMetaData_method_doesMaxRowSizeIncludeBlobs__Z,
  &ODBCDatabaseMetaData_method_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_L_acdk_sql_RResultSet_,
  &ODBCDatabaseMetaData_method_getCatalogSeparator__LRString_,
  &ODBCDatabaseMetaData_method_getCatalogTerm__LRString_,
  &ODBCDatabaseMetaData_method_getCatalogs__L_acdk_sql_RResultSet_,
  &ODBCDatabaseMetaData_method_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet_,
  &ODBCDatabaseMetaData_method_getColumns_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet_,
  &ODBCDatabaseMetaData_method_getConnection__L_acdk_sql_RConnection_,
  &ODBCDatabaseMetaData_method_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet_,
  &ODBCDatabaseMetaData_method_getDatabaseProductName__LRString_,
  &ODBCDatabaseMetaData_method_getDatabaseProductVersion__LRString_,
  &ODBCDatabaseMetaData_method_getDateTimeFunctions__LRString_,
  &ODBCDatabaseMetaData_method_getDefaultTransactionIsolation__I,
  &ODBCDatabaseMetaData_method_getDriverMajorVersion__I,
  &ODBCDatabaseMetaData_method_getDriverMinorVersion__I,
  &ODBCDatabaseMetaData_method_getDriverName__LRString_,
  &ODBCDatabaseMetaData_method_getDriverVersion__LRString_,
  &ODBCDatabaseMetaData_method_getExportedKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet_,
  &ODBCDatabaseMetaData_method_getExtraNameCharacters__LRString_,
  &ODBCDatabaseMetaData_method_getIdentiferQuoteString__LRString_,
  &ODBCDatabaseMetaData_method_getImportedKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet_,
  &ODBCDatabaseMetaData_method_getIndexInfo_INLRString_INLRString_INLRString_ZZ_L_acdk_sql_RResultSet_,
  &ODBCDatabaseMetaData_method_getIntInfo_I_I,
  &ODBCDatabaseMetaData_method_getMaxBinaryLiteralLength__I,
  &ODBCDatabaseMetaData_method_getMaxCatalogNameLength__I,
  &ODBCDatabaseMetaData_method_getMaxCharLiteralLength__I,
  &ODBCDatabaseMetaData_method_getMaxColumnNameLength__I,
  &ODBCDatabaseMetaData_method_getMaxColumnsInGroupBy__I,
  &ODBCDatabaseMetaData_method_getMaxColumnsInIndex__I,
  &ODBCDatabaseMetaData_method_getMaxColumnsInOrderBy__I,
  &ODBCDatabaseMetaData_method_getMaxColumnsInSelect__I,
  &ODBCDatabaseMetaData_method_getMaxColumnsInTable__I,
  &ODBCDatabaseMetaData_method_getMaxConnections__I,
  &ODBCDatabaseMetaData_method_getMaxCursorNameLength__I,
  &ODBCDatabaseMetaData_method_getMaxIndexLength__I,
  &ODBCDatabaseMetaData_method_getMaxProcedureNameLength__I,
  &ODBCDatabaseMetaData_method_getMaxRowSize__I,
  &ODBCDatabaseMetaData_method_getMaxSchemaNameLength__I,
  &ODBCDatabaseMetaData_method_getMaxStatementLength__I,
  &ODBCDatabaseMetaData_method_getMaxStatements__I,
  &ODBCDatabaseMetaData_method_getMaxTableNameLength__I,
  &ODBCDatabaseMetaData_method_getMaxTableUserLength__I,
  &ODBCDatabaseMetaData_method_getMaxTablesInSelect__I,
  &ODBCDatabaseMetaData_method_getNumericFunctions__LRString_,
  &ODBCDatabaseMetaData_method_getPrimaryKeys_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet_,
  &ODBCDatabaseMetaData_method_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet_,
  &ODBCDatabaseMetaData_method_getProcedureTerm__LRString_,
  &ODBCDatabaseMetaData_method_getProcedures_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet_,
  &ODBCDatabaseMetaData_method_getSQLKeywords__LRString_,
  &ODBCDatabaseMetaData_method_getSchemaTerm__LRString_,
  &ODBCDatabaseMetaData_method_getSchemas__L_acdk_sql_RResultSet_,
  &ODBCDatabaseMetaData_method_getSearchStringEscape__LRString_,
  &ODBCDatabaseMetaData_method_getShortInfo_I_S,
  &ODBCDatabaseMetaData_method_getStringFunctions__LRString_,
  &ODBCDatabaseMetaData_method_getStringInfo_I_LRString_,
  &ODBCDatabaseMetaData_method_getSystemFunctions__LRString_,
  &ODBCDatabaseMetaData_method_getTablePrivileges_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet_,
  &ODBCDatabaseMetaData_method_getTableTypes__L_acdk_sql_RResultSet_,
  &ODBCDatabaseMetaData_method_getTables_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet_,
  &ODBCDatabaseMetaData_method_getTypeInfo__L_acdk_sql_RResultSet_,
  &ODBCDatabaseMetaData_method_getUDTs_INLRString_INLRString_INLRString_INLRintArray__L_acdk_sql_RResultSet_,
  &ODBCDatabaseMetaData_method_getURL__LRString_,
  &ODBCDatabaseMetaData_method_getUserName__LRString_,
  &ODBCDatabaseMetaData_method_getVersionColumns_INLRString_INLRString_INLRString__L_acdk_sql_RResultSet_,
  &ODBCDatabaseMetaData_method_insertsAreDetected_I_Z,
  &ODBCDatabaseMetaData_method_isCatalogAtStart__Z,
  &ODBCDatabaseMetaData_method_isReadOnly__Z,
  &ODBCDatabaseMetaData_method_nullPlusNonNullIsNull__Z,
  &ODBCDatabaseMetaData_method_nullsAreSortedAtEnd__Z,
  &ODBCDatabaseMetaData_method_nullsAreSortedAtStart__Z,
  &ODBCDatabaseMetaData_method_nullsAreSortedHigh__Z,
  &ODBCDatabaseMetaData_method_nullsAreSortedLow__Z,
  &ODBCDatabaseMetaData_method_othersDeletesAreVisible_I_Z,
  &ODBCDatabaseMetaData_method_othersInsertsAreVisible_I_Z,
  &ODBCDatabaseMetaData_method_othersUpdatesAreVisible_I_Z,
  &ODBCDatabaseMetaData_method_ownDeletesAreVisible_I_Z,
  &ODBCDatabaseMetaData_method_ownInsertsAreVisible_I_Z,
  &ODBCDatabaseMetaData_method_ownUpdatesAreVisible_I_Z,
  &ODBCDatabaseMetaData_method_storesLowerCaseIdentifiers__Z,
  &ODBCDatabaseMetaData_method_storesLowerCaseQuotedIdentifiers__Z,
  &ODBCDatabaseMetaData_method_storesMixedCaseIdentifiers__Z,
  &ODBCDatabaseMetaData_method_storesMixedCaseQuotedIdentifiers__Z,
  &ODBCDatabaseMetaData_method_storesUpperCaseIdentifiers__Z,
  &ODBCDatabaseMetaData_method_storesUpperCaseQuotedIdentifiers__Z,
  &ODBCDatabaseMetaData_method_supportsANSI92EntryLevelSQL__Z,
  &ODBCDatabaseMetaData_method_supportsANSI92FullSQL__Z,
  &ODBCDatabaseMetaData_method_supportsANSI92IntermediateSQL__Z,
  &ODBCDatabaseMetaData_method_supportsAlterTableWithAddColumn__Z,
  &ODBCDatabaseMetaData_method_supportsAlterTableWithDropColumn__Z,
  &ODBCDatabaseMetaData_method_supportsBatchUpdates__Z,
  &ODBCDatabaseMetaData_method_supportsCatalogInPrivilegeDefinitions__Z,
  &ODBCDatabaseMetaData_method_supportsCatalogsInDataManipulation__Z,
  &ODBCDatabaseMetaData_method_supportsCatalogsInIndexDefinitions__Z,
  &ODBCDatabaseMetaData_method_supportsCatalogsInProcedureCalls__Z,
  &ODBCDatabaseMetaData_method_supportsCatalogsInTableDefinitions__Z,
  &ODBCDatabaseMetaData_method_supportsColumnAliasing__Z,
  &ODBCDatabaseMetaData_method_supportsConvert__Z,
  &ODBCDatabaseMetaData_method_supportsConvert_II_Z,
  &ODBCDatabaseMetaData_method_supportsCoreSQLGrammar__Z,
  &ODBCDatabaseMetaData_method_supportsCorrelatedSubqueries__Z,
  &ODBCDatabaseMetaData_method_supportsDataDefinitionAndDataManipulationTransactions__Z,
  &ODBCDatabaseMetaData_method_supportsDataManipulationTransactionsOnly__Z,
  &ODBCDatabaseMetaData_method_supportsDifferentTableCorrelationNames__Z,
  &ODBCDatabaseMetaData_method_supportsExpressionsInOrderBy__Z,
  &ODBCDatabaseMetaData_method_supportsExtendedSQLGrammar__Z,
  &ODBCDatabaseMetaData_method_supportsFullOuterJoins__Z,
  &ODBCDatabaseMetaData_method_supportsGroupBy__Z,
  &ODBCDatabaseMetaData_method_supportsGroupByBeyondSelect__Z,
  &ODBCDatabaseMetaData_method_supportsGroupByUnrelated__Z,
  &ODBCDatabaseMetaData_method_supportsIntegrityEnhancementFacility__Z,
  &ODBCDatabaseMetaData_method_supportsLikeEscapeClause__Z,
  &ODBCDatabaseMetaData_method_supportsLimitedOuterJoins__Z,
  &ODBCDatabaseMetaData_method_supportsMinimumSQLGrammar__Z,
  &ODBCDatabaseMetaData_method_supportsMixedCaseIdentifiers__Z,
  &ODBCDatabaseMetaData_method_supportsMixedCaseQuotedIdentifiers__Z,
  &ODBCDatabaseMetaData_method_supportsMultipleResultSets__Z,
  &ODBCDatabaseMetaData_method_supportsMultipleTransactions__Z,
  &ODBCDatabaseMetaData_method_supportsNonNullableColumns__Z,
  &ODBCDatabaseMetaData_method_supportsOpenCursorsAcrossCommit__Z,
  &ODBCDatabaseMetaData_method_supportsOpenCursorsAcrossRollback__Z,
  &ODBCDatabaseMetaData_method_supportsOpenStatementsAcrossCommit__Z,
  &ODBCDatabaseMetaData_method_supportsOpenStatementsAcrossRollback__Z,
  &ODBCDatabaseMetaData_method_supportsOrderByUnrelated__Z,
  &ODBCDatabaseMetaData_method_supportsOuterJoins__Z,
  &ODBCDatabaseMetaData_method_supportsPositionedDelete__Z,
  &ODBCDatabaseMetaData_method_supportsPositionedUpdate__Z,
  &ODBCDatabaseMetaData_method_supportsResultSetConcurrency_II_Z,
  &ODBCDatabaseMetaData_method_supportsResultType_I_Z,
  &ODBCDatabaseMetaData_method_supportsSchemasInDataManipulation__Z,
  &ODBCDatabaseMetaData_method_supportsSchemasInIndexDefinitions__Z,
  &ODBCDatabaseMetaData_method_supportsSchemasInPrivilegeDefinitions__Z,
  &ODBCDatabaseMetaData_method_supportsSchemasInProcedureCalls__Z,
  &ODBCDatabaseMetaData_method_supportsSchemasInTableDefinitions__Z,
  &ODBCDatabaseMetaData_method_supportsSelectForUpdate__Z,
  &ODBCDatabaseMetaData_method_supportsStoredProcedures__Z,
  &ODBCDatabaseMetaData_method_supportsSubqueriesInComparisons__Z,
  &ODBCDatabaseMetaData_method_supportsSubqueriesInExists__Z,
  &ODBCDatabaseMetaData_method_supportsSubqueriesInIns__Z,
  &ODBCDatabaseMetaData_method_supportsSubqueriesInQuantifieds__Z,
  &ODBCDatabaseMetaData_method_supportsTableCorrelationNames__Z,
  &ODBCDatabaseMetaData_method_supportsTransactionIsolationLevel_I_Z,
  &ODBCDatabaseMetaData_method_supportsTransactions__Z,
  &ODBCDatabaseMetaData_method_supportsUnion__Z,
  &ODBCDatabaseMetaData_method_supportsUnionAll__Z,
  &ODBCDatabaseMetaData_method_updatesAreDetected_I_Z,
  &ODBCDatabaseMetaData_method_usesLocalFilePerTable__Z,
  &ODBCDatabaseMetaData_method_usesLocalFiles__Z,
  0
};


struct ODBCDatabaseMetaData_MetaInfoInitializer
{  ODBCDatabaseMetaData_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ODBCDatabaseMetaData::clazzInfo();
    ci->fields =  _ODBCDatabaseMetaData_fields;
    ci->methods =  _ODBCDatabaseMetaData_methods;
    ci->_scopeParent = acdk_sql_odbc_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ODBCDatabaseMetaData_MetaInfoInitializer ODBCDatabaseMetaData_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace sql
} // namespace odbc


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) odbc_dummyExportFunc() {}
#endif

