// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../odbc.h"
#include "../Config.h"
#include "../odbc.h"
#include "../ODBCArray.h"
#include "../ODBCCallableStatement.h"
#include "../ODBCColumn.h"
#include "../ODBCConnection.h"
#include "../ODBCDatabaseMetaData.h"
#include "../ODBCDriver.h"
#include "../ODBCHandle.h"
#include "../ODBCPreparedStatement.h"
#include "../ODBCResultSet.h"
#include "../ODBCResultSetMetaData.h"
#include "../ODBCStatement.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace sql { 
namespace odbc { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
ODBCStatement_create_array(int length)
{
  return new ObjectArrayImpl<RODBCStatement>(length);
}

//static
::acdk::lang::RObject
ODBCStatement_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ODBCStatement_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCStatement_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ODBCStatement::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCStatement_method_ODBCStatement_INLRODBCConnection__LRODBCStatement__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ODBCStatement((RODBCConnection)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCStatement_method__getODBCHandle__LRODBCHandle__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCStatement* This = dmi_cast<ODBCStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCStatement::_getODBCHandle();
    else
        ret = (::acdk::lang::RObject)This->_getODBCHandle();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCStatement_method_addBatch_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCStatement* This = dmi_cast<ODBCStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCStatement::addBatch((RString)args[0].getObjectVar());
    else
        This->addBatch((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCStatement_method_cancel__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCStatement* This = dmi_cast<ODBCStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCStatement::cancel();
    else
        This->cancel();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCStatement_method_clearBatch__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCStatement* This = dmi_cast<ODBCStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCStatement::clearBatch();
    else
        This->clearBatch();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCStatement_method_clearWarnings__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCStatement* This = dmi_cast<ODBCStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCStatement::clearWarnings();
    else
        This->clearWarnings();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCStatement_method_close__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCStatement* This = dmi_cast<ODBCStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCStatement::close();
    else
        This->close();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCStatement_method_deinit__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCStatement* This = dmi_cast<ODBCStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCStatement::deinit();
    else
        This->deinit();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCStatement_method_execute_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCStatement* This = dmi_cast<ODBCStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCStatement::execute((RString)args[0].getObjectVar());
    else
      ret = This->execute((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCStatement_method_executeBatch__LRintArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCStatement* This = dmi_cast<ODBCStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCStatement::executeBatch();
    else
        ret = (::acdk::lang::RObject)This->executeBatch();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCStatement_method_executeQuery_INLRString__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCStatement* This = dmi_cast<ODBCStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCStatement::executeQuery((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->executeQuery((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCStatement_method_executeUpdate_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCStatement* This = dmi_cast<ODBCStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCStatement::executeUpdate((RString)args[0].getObjectVar());
    else
      ret = This->executeUpdate((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCStatement_method_getConnection__LRConnection__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCStatement* This = dmi_cast<ODBCStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCStatement::getConnection();
    else
        ret = (::acdk::lang::RObject)This->getConnection();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCStatement_method_getFetchDirection__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCStatement* This = dmi_cast<ODBCStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCStatement::getFetchDirection();
    else
      ret = This->getFetchDirection();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCStatement_method_getFetchSize__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCStatement* This = dmi_cast<ODBCStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCStatement::getFetchSize();
    else
      ret = This->getFetchSize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCStatement_method_getMaxFieldSize__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCStatement* This = dmi_cast<ODBCStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCStatement::getMaxFieldSize();
    else
      ret = This->getMaxFieldSize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCStatement_method_getMaxRows__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCStatement* This = dmi_cast<ODBCStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCStatement::getMaxRows();
    else
      ret = This->getMaxRows();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCStatement_method_getMoreResults__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCStatement* This = dmi_cast<ODBCStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCStatement::getMoreResults();
    else
      ret = This->getMoreResults();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCStatement_method_getQueryTimeout__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCStatement* This = dmi_cast<ODBCStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCStatement::getQueryTimeout();
    else
      ret = This->getQueryTimeout();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCStatement_method_getResultSet__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCStatement* This = dmi_cast<ODBCStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCStatement::getResultSet();
    else
        ret = (::acdk::lang::RObject)This->getResultSet();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCStatement_method_getResultSetConcurrency__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCStatement* This = dmi_cast<ODBCStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCStatement::getResultSetConcurrency();
    else
      ret = This->getResultSetConcurrency();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCStatement_method_getResultSetType__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCStatement* This = dmi_cast<ODBCStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCStatement::getResultSetType();
    else
      ret = This->getResultSetType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCStatement_method_getScrollableCursor__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCStatement* This = dmi_cast<ODBCStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCStatement::getScrollableCursor();
    else
      ret = This->getScrollableCursor();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCStatement_method_getUpdateCount__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCStatement* This = dmi_cast<ODBCStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCStatement::getUpdateCount();
    else
      ret = This->getUpdateCount();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCStatement_method_getWarnings__L_acdk_sql_RSQLWarning__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCStatement* This = dmi_cast<ODBCStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCStatement::getWarnings();
    else
        ret = (::acdk::lang::RObject)This->getWarnings();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCStatement_method_init_INLacdk_util_RProperties__LRODBCStatement__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCStatement* This = dmi_cast<ODBCStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCStatement::init((acdk::util::RProperties)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->init((acdk::util::RProperties)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCStatement_method_setCursorName_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCStatement* This = dmi_cast<ODBCStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCStatement::setCursorName((RString)args[0].getObjectVar());
    else
        This->setCursorName((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCStatement_method_setEscapeProcessing_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCStatement* This = dmi_cast<ODBCStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCStatement::setEscapeProcessing(args[0].getBoolVar());
    else
        This->setEscapeProcessing(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCStatement_method_setFetchDirection_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCStatement* This = dmi_cast<ODBCStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCStatement::setFetchDirection(args[0].getIntVar());
    else
        This->setFetchDirection(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCStatement_method_setFetchSize_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCStatement* This = dmi_cast<ODBCStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCStatement::setFetchSize(args[0].getIntVar());
    else
        This->setFetchSize(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCStatement_method_setMaxFieldSize_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCStatement* This = dmi_cast<ODBCStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCStatement::setMaxFieldSize(args[0].getIntVar());
    else
        This->setMaxFieldSize(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCStatement_method_setMaxRows_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCStatement* This = dmi_cast<ODBCStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCStatement::setMaxRows(args[0].getIntVar());
    else
        This->setMaxRows(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCStatement_method_setQueryTimeout_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCStatement* This = dmi_cast<ODBCStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCStatement::setQueryTimeout(args[0].getIntVar());
    else
        This->setQueryTimeout(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCStatement_method_setScrollableCursor_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCStatement* This = dmi_cast<ODBCStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCStatement::setScrollableCursor(args[0].getBoolVar());
    else
        This->setScrollableCursor(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCStatement_fields__conn_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCStatement* This = dmi_cast<ODBCStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_conn, flags);
    else
      This->_conn = (RODBCConnection)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCStatement_fields__direction_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCStatement* This = dmi_cast<ODBCStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->_direction), flags);
    else
      This->_direction = (FetchDirection)var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCStatement_fields__maxLength_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCStatement* This = dmi_cast<ODBCStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_maxLength, flags);
    else
      This->_maxLength = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCStatement_fields__maxRows_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCStatement* This = dmi_cast<ODBCStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_maxRows, flags);
    else
      This->_maxRows = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCStatement_fields__queryTimeout_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCStatement* This = dmi_cast<ODBCStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_queryTimeout, flags);
    else
      This->_queryTimeout = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCStatement_fields__scanEscapes_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCStatement* This = dmi_cast<ODBCStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_scanEscapes, flags);
    else
      This->_scanEscapes = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCStatement_fields__scrollableCursors_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCStatement* This = dmi_cast<ODBCStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_scrollableCursors, flags);
    else
      This->_scrollableCursors = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCStatement_fields__sql_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCStatement* This = dmi_cast<ODBCStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_sql, flags);
    else
      This->_sql = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCStatement_fields__stmth_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCStatement* This = dmi_cast<ODBCStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_stmth, flags);
    else
      This->_stmth = (RODBCHandle)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ODBCStatement_fields__conn = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_conn", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RODBCConnection::clazzInfo(),
  ODBCStatement_MetainfoWrapper::ODBCStatement_fields__conn_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCStatement_fields__direction = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_direction", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCStatement_MetainfoWrapper::ODBCStatement_fields__direction_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCStatement_fields__maxLength = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_maxLength", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCStatement_MetainfoWrapper::ODBCStatement_fields__maxLength_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCStatement_fields__maxRows = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_maxRows", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCStatement_MetainfoWrapper::ODBCStatement_fields__maxRows_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCStatement_fields__queryTimeout = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_queryTimeout", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCStatement_MetainfoWrapper::ODBCStatement_fields__queryTimeout_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCStatement_fields__scanEscapes = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_scanEscapes", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  ODBCStatement_MetainfoWrapper::ODBCStatement_fields__scanEscapes_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCStatement_fields__scrollableCursors = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_scrollableCursors", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  ODBCStatement_MetainfoWrapper::ODBCStatement_fields__scrollableCursors_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCStatement_fields__sql = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_sql", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ODBCStatement_MetainfoWrapper::ODBCStatement_fields__sql_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCStatement_fields__stmth = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_stmth", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RODBCHandle::clazzInfo(),
  ODBCStatement_MetainfoWrapper::ODBCStatement_fields__stmth_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ODBCStatement_fields[] = 
{
  &ODBCStatement_fields__conn,
  &ODBCStatement_fields__direction,
  &ODBCStatement_fields__maxLength,
  &ODBCStatement_fields__maxRows,
  &ODBCStatement_fields__queryTimeout,
  &ODBCStatement_fields__scanEscapes,
  &ODBCStatement_fields__scrollableCursors,
  &ODBCStatement_fields__sql,
  &ODBCStatement_fields__stmth,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCStatement_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCStatement_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCStatement_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_y_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ODBCStatement_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ODBCStatement_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ODBCStatement_MetainfoWrapper::ODBCStatement_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCStatement_methods_ODBCStatement_INLRODBCConnection__LRODBCStatement__arg_conn = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "conn", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RODBCConnection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCStatement_methods_ODBCStatement_INLRODBCConnection__LRODBCStatement__args[] = 
{
  &ODBCStatement_methods_ODBCStatement_INLRODBCConnection__LRODBCStatement__arg_conn,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCStatement_methods_ODBCStatement_INLRODBCConnection__LRODBCStatement__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCStatement_method_ODBCStatement_INLRODBCConnection__LRODBCStatement_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ODBCStatement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ODBCStatement::clazzInfo(), // return type
  "_3_ODBCStatement", // alternative name of method
  -1, // altlabelHashCode
  ODBCStatement_methods_ODBCStatement_INLRODBCConnection__LRODBCStatement__args, // the arguments
  0, //arguments count
  ODBCStatement_methods_ODBCStatement_INLRODBCConnection__LRODBCStatement__exceptions, // the declared exceptions
  ODBCStatement_MetainfoWrapper::ODBCStatement_method_ODBCStatement_INLRODBCConnection__LRODBCStatement__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCStatement_methods__getODBCHandle__LRODBCHandle__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCStatement_methods__getODBCHandle__LRODBCHandle__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCStatement_method__getODBCHandle__LRODBCHandle_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_getODBCHandle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RODBCHandle::clazzInfo(), // return type
  "_2__getODBCHandle", // alternative name of method
  -1, // altlabelHashCode
  ODBCStatement_methods__getODBCHandle__LRODBCHandle__args, // the arguments
  0, //arguments count
  ODBCStatement_methods__getODBCHandle__LRODBCHandle__exceptions, // the declared exceptions
  ODBCStatement_MetainfoWrapper::ODBCStatement_method__getODBCHandle__LRODBCHandle__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCStatement_methods_addBatch_INLRString__V_arg_sql = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sql", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCStatement_methods_addBatch_INLRString__V_args[] = 
{
  &ODBCStatement_methods_addBatch_INLRString__V_arg_sql,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCStatement_methods_addBatch_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCStatement_method_addBatch_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addBatch", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_addBatch", // alternative name of method
  -1, // altlabelHashCode
  ODBCStatement_methods_addBatch_INLRString__V_args, // the arguments
  0, //arguments count
  ODBCStatement_methods_addBatch_INLRString__V_exceptions, // the declared exceptions
  ODBCStatement_MetainfoWrapper::ODBCStatement_method_addBatch_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCStatement_methods_cancel__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCStatement_methods_cancel__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCStatement_method_cancel__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "cancel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_cancel", // alternative name of method
  -1, // altlabelHashCode
  ODBCStatement_methods_cancel__V_args, // the arguments
  0, //arguments count
  ODBCStatement_methods_cancel__V_exceptions, // the declared exceptions
  ODBCStatement_MetainfoWrapper::ODBCStatement_method_cancel__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCStatement_methods_clearBatch__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCStatement_methods_clearBatch__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCStatement_method_clearBatch__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clearBatch", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_clearBatch", // alternative name of method
  -1, // altlabelHashCode
  ODBCStatement_methods_clearBatch__V_args, // the arguments
  0, //arguments count
  ODBCStatement_methods_clearBatch__V_exceptions, // the declared exceptions
  ODBCStatement_MetainfoWrapper::ODBCStatement_method_clearBatch__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCStatement_methods_clearWarnings__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCStatement_methods_clearWarnings__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCStatement_method_clearWarnings__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clearWarnings", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_clearWarnings", // alternative name of method
  -1, // altlabelHashCode
  ODBCStatement_methods_clearWarnings__V_args, // the arguments
  0, //arguments count
  ODBCStatement_methods_clearWarnings__V_exceptions, // the declared exceptions
  ODBCStatement_MetainfoWrapper::ODBCStatement_method_clearWarnings__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCStatement_methods_close__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCStatement_methods_close__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCStatement_method_close__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "close", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_close", // alternative name of method
  -1, // altlabelHashCode
  ODBCStatement_methods_close__V_args, // the arguments
  0, //arguments count
  ODBCStatement_methods_close__V_exceptions, // the declared exceptions
  ODBCStatement_MetainfoWrapper::ODBCStatement_method_close__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCStatement_methods_deinit__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCStatement_methods_deinit__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCStatement_method_deinit__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deinit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_deinit", // alternative name of method
  -1, // altlabelHashCode
  ODBCStatement_methods_deinit__V_args, // the arguments
  0, //arguments count
  ODBCStatement_methods_deinit__V_exceptions, // the declared exceptions
  ODBCStatement_MetainfoWrapper::ODBCStatement_method_deinit__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCStatement_methods_execute_INLRString__Z_arg_sql = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sql", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCStatement_methods_execute_INLRString__Z_args[] = 
{
  &ODBCStatement_methods_execute_INLRString__Z_arg_sql,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCStatement_methods_execute_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCStatement_method_execute_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_b_execute", // alternative name of method
  -1, // altlabelHashCode
  ODBCStatement_methods_execute_INLRString__Z_args, // the arguments
  0, //arguments count
  ODBCStatement_methods_execute_INLRString__Z_exceptions, // the declared exceptions
  ODBCStatement_MetainfoWrapper::ODBCStatement_method_execute_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCStatement_methods_executeBatch__LRintArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCStatement_methods_executeBatch__LRintArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCStatement_method_executeBatch__LRintArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "executeBatch", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RintArray::clazzInfo(), // return type
  "_c_executeBatch", // alternative name of method
  -1, // altlabelHashCode
  ODBCStatement_methods_executeBatch__LRintArray__args, // the arguments
  0, //arguments count
  ODBCStatement_methods_executeBatch__LRintArray__exceptions, // the declared exceptions
  ODBCStatement_MetainfoWrapper::ODBCStatement_method_executeBatch__LRintArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCStatement_methods_executeQuery_INLRString__LRResultSet__arg_sql = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sql", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCStatement_methods_executeQuery_INLRString__LRResultSet__args[] = 
{
  &ODBCStatement_methods_executeQuery_INLRString__LRResultSet__arg_sql,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCStatement_methods_executeQuery_INLRString__LRResultSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCStatement_method_executeQuery_INLRString__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "executeQuery", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_d_executeQuery", // alternative name of method
  -1, // altlabelHashCode
  ODBCStatement_methods_executeQuery_INLRString__LRResultSet__args, // the arguments
  0, //arguments count
  ODBCStatement_methods_executeQuery_INLRString__LRResultSet__exceptions, // the declared exceptions
  ODBCStatement_MetainfoWrapper::ODBCStatement_method_executeQuery_INLRString__LRResultSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCStatement_methods_executeUpdate_INLRString__I_arg_sql = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sql", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCStatement_methods_executeUpdate_INLRString__I_args[] = 
{
  &ODBCStatement_methods_executeUpdate_INLRString__I_arg_sql,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCStatement_methods_executeUpdate_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCStatement_method_executeUpdate_INLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "executeUpdate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_e_executeUpdate", // alternative name of method
  -1, // altlabelHashCode
  ODBCStatement_methods_executeUpdate_INLRString__I_args, // the arguments
  0, //arguments count
  ODBCStatement_methods_executeUpdate_INLRString__I_exceptions, // the declared exceptions
  ODBCStatement_MetainfoWrapper::ODBCStatement_method_executeUpdate_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCStatement_methods_getConnection__LRConnection__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCStatement_methods_getConnection__LRConnection__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCStatement_method_getConnection__LRConnection_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getConnection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RConnection::clazzInfo(), // return type
  "_f_getConnection", // alternative name of method
  -1, // altlabelHashCode
  ODBCStatement_methods_getConnection__LRConnection__args, // the arguments
  0, //arguments count
  ODBCStatement_methods_getConnection__LRConnection__exceptions, // the declared exceptions
  ODBCStatement_MetainfoWrapper::ODBCStatement_method_getConnection__LRConnection__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCStatement_methods_getFetchDirection__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCStatement_methods_getFetchDirection__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCStatement_method_getFetchDirection__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFetchDirection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_g_getFetchDirection", // alternative name of method
  -1, // altlabelHashCode
  ODBCStatement_methods_getFetchDirection__I_args, // the arguments
  0, //arguments count
  ODBCStatement_methods_getFetchDirection__I_exceptions, // the declared exceptions
  ODBCStatement_MetainfoWrapper::ODBCStatement_method_getFetchDirection__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCStatement_methods_getFetchSize__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCStatement_methods_getFetchSize__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCStatement_method_getFetchSize__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFetchSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_h_getFetchSize", // alternative name of method
  -1, // altlabelHashCode
  ODBCStatement_methods_getFetchSize__I_args, // the arguments
  0, //arguments count
  ODBCStatement_methods_getFetchSize__I_exceptions, // the declared exceptions
  ODBCStatement_MetainfoWrapper::ODBCStatement_method_getFetchSize__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCStatement_methods_getMaxFieldSize__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCStatement_methods_getMaxFieldSize__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCStatement_method_getMaxFieldSize__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxFieldSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_i_getMaxFieldSize", // alternative name of method
  -1, // altlabelHashCode
  ODBCStatement_methods_getMaxFieldSize__I_args, // the arguments
  0, //arguments count
  ODBCStatement_methods_getMaxFieldSize__I_exceptions, // the declared exceptions
  ODBCStatement_MetainfoWrapper::ODBCStatement_method_getMaxFieldSize__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCStatement_methods_getMaxRows__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCStatement_methods_getMaxRows__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCStatement_method_getMaxRows__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxRows", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_j_getMaxRows", // alternative name of method
  -1, // altlabelHashCode
  ODBCStatement_methods_getMaxRows__I_args, // the arguments
  0, //arguments count
  ODBCStatement_methods_getMaxRows__I_exceptions, // the declared exceptions
  ODBCStatement_MetainfoWrapper::ODBCStatement_method_getMaxRows__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCStatement_methods_getMoreResults__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCStatement_methods_getMoreResults__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCStatement_method_getMoreResults__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMoreResults", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_k_getMoreResults", // alternative name of method
  -1, // altlabelHashCode
  ODBCStatement_methods_getMoreResults__Z_args, // the arguments
  0, //arguments count
  ODBCStatement_methods_getMoreResults__Z_exceptions, // the declared exceptions
  ODBCStatement_MetainfoWrapper::ODBCStatement_method_getMoreResults__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCStatement_methods_getQueryTimeout__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCStatement_methods_getQueryTimeout__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCStatement_method_getQueryTimeout__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getQueryTimeout", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_l_getQueryTimeout", // alternative name of method
  -1, // altlabelHashCode
  ODBCStatement_methods_getQueryTimeout__I_args, // the arguments
  0, //arguments count
  ODBCStatement_methods_getQueryTimeout__I_exceptions, // the declared exceptions
  ODBCStatement_MetainfoWrapper::ODBCStatement_method_getQueryTimeout__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCStatement_methods_getResultSet__LRResultSet__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCStatement_methods_getResultSet__LRResultSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCStatement_method_getResultSet__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getResultSet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_m_getResultSet", // alternative name of method
  -1, // altlabelHashCode
  ODBCStatement_methods_getResultSet__LRResultSet__args, // the arguments
  0, //arguments count
  ODBCStatement_methods_getResultSet__LRResultSet__exceptions, // the declared exceptions
  ODBCStatement_MetainfoWrapper::ODBCStatement_method_getResultSet__LRResultSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCStatement_methods_getResultSetConcurrency__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCStatement_methods_getResultSetConcurrency__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCStatement_method_getResultSetConcurrency__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getResultSetConcurrency", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_n_getResultSetConcurrency", // alternative name of method
  -1, // altlabelHashCode
  ODBCStatement_methods_getResultSetConcurrency__I_args, // the arguments
  0, //arguments count
  ODBCStatement_methods_getResultSetConcurrency__I_exceptions, // the declared exceptions
  ODBCStatement_MetainfoWrapper::ODBCStatement_method_getResultSetConcurrency__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCStatement_methods_getResultSetType__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCStatement_methods_getResultSetType__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCStatement_method_getResultSetType__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getResultSetType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_o_getResultSetType", // alternative name of method
  -1, // altlabelHashCode
  ODBCStatement_methods_getResultSetType__I_args, // the arguments
  0, //arguments count
  ODBCStatement_methods_getResultSetType__I_exceptions, // the declared exceptions
  ODBCStatement_MetainfoWrapper::ODBCStatement_method_getResultSetType__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCStatement_methods_getScrollableCursor__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCStatement_methods_getScrollableCursor__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCStatement_method_getScrollableCursor__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getScrollableCursor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_getScrollableCursor", // alternative name of method
  -1, // altlabelHashCode
  ODBCStatement_methods_getScrollableCursor__Z_args, // the arguments
  0, //arguments count
  ODBCStatement_methods_getScrollableCursor__Z_exceptions, // the declared exceptions
  ODBCStatement_MetainfoWrapper::ODBCStatement_method_getScrollableCursor__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCStatement_methods_getUpdateCount__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCStatement_methods_getUpdateCount__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCStatement_method_getUpdateCount__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getUpdateCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_p_getUpdateCount", // alternative name of method
  -1, // altlabelHashCode
  ODBCStatement_methods_getUpdateCount__I_args, // the arguments
  0, //arguments count
  ODBCStatement_methods_getUpdateCount__I_exceptions, // the declared exceptions
  ODBCStatement_MetainfoWrapper::ODBCStatement_method_getUpdateCount__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCStatement_methods_getWarnings__L_acdk_sql_RSQLWarning__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCStatement_methods_getWarnings__L_acdk_sql_RSQLWarning__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCStatement_method_getWarnings__L_acdk_sql_RSQLWarning_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWarnings", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::sql::RSQLWarning::clazzInfo(), // return type
  "_q_getWarnings", // alternative name of method
  -1, // altlabelHashCode
  ODBCStatement_methods_getWarnings__L_acdk_sql_RSQLWarning__args, // the arguments
  0, //arguments count
  ODBCStatement_methods_getWarnings__L_acdk_sql_RSQLWarning__exceptions, // the declared exceptions
  ODBCStatement_MetainfoWrapper::ODBCStatement_method_getWarnings__L_acdk_sql_RSQLWarning__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCStatement_methods_init_INLacdk_util_RProperties__LRODBCStatement__arg_prop = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "prop", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RProperties::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCStatement_methods_init_INLacdk_util_RProperties__LRODBCStatement__args[] = 
{
  &ODBCStatement_methods_init_INLacdk_util_RProperties__LRODBCStatement__arg_prop,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCStatement_methods_init_INLacdk_util_RProperties__LRODBCStatement__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCStatement_method_init_INLacdk_util_RProperties__LRODBCStatement_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "init", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RODBCStatement::clazzInfo(), // return type
  "_4_init", // alternative name of method
  -1, // altlabelHashCode
  ODBCStatement_methods_init_INLacdk_util_RProperties__LRODBCStatement__args, // the arguments
  0, //arguments count
  ODBCStatement_methods_init_INLacdk_util_RProperties__LRODBCStatement__exceptions, // the declared exceptions
  ODBCStatement_MetainfoWrapper::ODBCStatement_method_init_INLacdk_util_RProperties__LRODBCStatement__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCStatement_methods_setCursorName_INLRString__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCStatement_methods_setCursorName_INLRString__V_args[] = 
{
  &ODBCStatement_methods_setCursorName_INLRString__V_arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCStatement_methods_setCursorName_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCStatement_method_setCursorName_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setCursorName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_r_setCursorName", // alternative name of method
  -1, // altlabelHashCode
  ODBCStatement_methods_setCursorName_INLRString__V_args, // the arguments
  0, //arguments count
  ODBCStatement_methods_setCursorName_INLRString__V_exceptions, // the declared exceptions
  ODBCStatement_MetainfoWrapper::ODBCStatement_method_setCursorName_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCStatement_methods_setEscapeProcessing_Z_V_arg_enable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "enable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCStatement_methods_setEscapeProcessing_Z_V_args[] = 
{
  &ODBCStatement_methods_setEscapeProcessing_Z_V_arg_enable,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCStatement_methods_setEscapeProcessing_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCStatement_method_setEscapeProcessing_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setEscapeProcessing", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_s_setEscapeProcessing", // alternative name of method
  -1, // altlabelHashCode
  ODBCStatement_methods_setEscapeProcessing_Z_V_args, // the arguments
  0, //arguments count
  ODBCStatement_methods_setEscapeProcessing_Z_V_exceptions, // the declared exceptions
  ODBCStatement_MetainfoWrapper::ODBCStatement_method_setEscapeProcessing_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCStatement_methods_setFetchDirection_I_V_arg_direction = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "direction", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCStatement_methods_setFetchDirection_I_V_args[] = 
{
  &ODBCStatement_methods_setFetchDirection_I_V_arg_direction,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCStatement_methods_setFetchDirection_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCStatement_method_setFetchDirection_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFetchDirection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_t_setFetchDirection", // alternative name of method
  -1, // altlabelHashCode
  ODBCStatement_methods_setFetchDirection_I_V_args, // the arguments
  0, //arguments count
  ODBCStatement_methods_setFetchDirection_I_V_exceptions, // the declared exceptions
  ODBCStatement_MetainfoWrapper::ODBCStatement_method_setFetchDirection_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCStatement_methods_setFetchSize_I_V_arg_rows = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "rows", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCStatement_methods_setFetchSize_I_V_args[] = 
{
  &ODBCStatement_methods_setFetchSize_I_V_arg_rows,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCStatement_methods_setFetchSize_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCStatement_method_setFetchSize_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFetchSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_u_setFetchSize", // alternative name of method
  -1, // altlabelHashCode
  ODBCStatement_methods_setFetchSize_I_V_args, // the arguments
  0, //arguments count
  ODBCStatement_methods_setFetchSize_I_V_exceptions, // the declared exceptions
  ODBCStatement_MetainfoWrapper::ODBCStatement_method_setFetchSize_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCStatement_methods_setMaxFieldSize_I_V_arg_max = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "max", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCStatement_methods_setMaxFieldSize_I_V_args[] = 
{
  &ODBCStatement_methods_setMaxFieldSize_I_V_arg_max,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCStatement_methods_setMaxFieldSize_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCStatement_method_setMaxFieldSize_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMaxFieldSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_v_setMaxFieldSize", // alternative name of method
  -1, // altlabelHashCode
  ODBCStatement_methods_setMaxFieldSize_I_V_args, // the arguments
  0, //arguments count
  ODBCStatement_methods_setMaxFieldSize_I_V_exceptions, // the declared exceptions
  ODBCStatement_MetainfoWrapper::ODBCStatement_method_setMaxFieldSize_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCStatement_methods_setMaxRows_I_V_arg_max = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "max", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCStatement_methods_setMaxRows_I_V_args[] = 
{
  &ODBCStatement_methods_setMaxRows_I_V_arg_max,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCStatement_methods_setMaxRows_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCStatement_method_setMaxRows_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMaxRows", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_w_setMaxRows", // alternative name of method
  -1, // altlabelHashCode
  ODBCStatement_methods_setMaxRows_I_V_args, // the arguments
  0, //arguments count
  ODBCStatement_methods_setMaxRows_I_V_exceptions, // the declared exceptions
  ODBCStatement_MetainfoWrapper::ODBCStatement_method_setMaxRows_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCStatement_methods_setQueryTimeout_I_V_arg_seconds = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "seconds", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCStatement_methods_setQueryTimeout_I_V_args[] = 
{
  &ODBCStatement_methods_setQueryTimeout_I_V_arg_seconds,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCStatement_methods_setQueryTimeout_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCStatement_method_setQueryTimeout_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setQueryTimeout", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_x_setQueryTimeout", // alternative name of method
  -1, // altlabelHashCode
  ODBCStatement_methods_setQueryTimeout_I_V_args, // the arguments
  0, //arguments count
  ODBCStatement_methods_setQueryTimeout_I_V_exceptions, // the declared exceptions
  ODBCStatement_MetainfoWrapper::ODBCStatement_method_setQueryTimeout_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCStatement_methods_setScrollableCursor_Z_V_arg_enable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "enable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCStatement_methods_setScrollableCursor_Z_V_args[] = 
{
  &ODBCStatement_methods_setScrollableCursor_Z_V_arg_enable,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCStatement_methods_setScrollableCursor_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCStatement_method_setScrollableCursor_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setScrollableCursor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0_setScrollableCursor", // alternative name of method
  -1, // altlabelHashCode
  ODBCStatement_methods_setScrollableCursor_Z_V_args, // the arguments
  0, //arguments count
  ODBCStatement_methods_setScrollableCursor_Z_V_exceptions, // the declared exceptions
  ODBCStatement_MetainfoWrapper::ODBCStatement_method_setScrollableCursor_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ODBCStatement_methods[] = 
{
  &ODBCStatement_method_GetClass__L_acdk_lang_RClass_,
  &ODBCStatement_method_ODBCStatement_INLRODBCConnection__LRODBCStatement_,
  &ODBCStatement_method__getODBCHandle__LRODBCHandle_,
  &ODBCStatement_method_addBatch_INLRString__V,
  &ODBCStatement_method_cancel__V,
  &ODBCStatement_method_clearBatch__V,
  &ODBCStatement_method_clearWarnings__V,
  &ODBCStatement_method_close__V,
  &ODBCStatement_method_deinit__V,
  &ODBCStatement_method_execute_INLRString__Z,
  &ODBCStatement_method_executeBatch__LRintArray_,
  &ODBCStatement_method_executeQuery_INLRString__LRResultSet_,
  &ODBCStatement_method_executeUpdate_INLRString__I,
  &ODBCStatement_method_getConnection__LRConnection_,
  &ODBCStatement_method_getFetchDirection__I,
  &ODBCStatement_method_getFetchSize__I,
  &ODBCStatement_method_getMaxFieldSize__I,
  &ODBCStatement_method_getMaxRows__I,
  &ODBCStatement_method_getMoreResults__Z,
  &ODBCStatement_method_getQueryTimeout__I,
  &ODBCStatement_method_getResultSet__LRResultSet_,
  &ODBCStatement_method_getResultSetConcurrency__I,
  &ODBCStatement_method_getResultSetType__I,
  &ODBCStatement_method_getScrollableCursor__Z,
  &ODBCStatement_method_getUpdateCount__I,
  &ODBCStatement_method_getWarnings__L_acdk_sql_RSQLWarning_,
  &ODBCStatement_method_init_INLacdk_util_RProperties__LRODBCStatement_,
  &ODBCStatement_method_setCursorName_INLRString__V,
  &ODBCStatement_method_setEscapeProcessing_Z_V,
  &ODBCStatement_method_setFetchDirection_I_V,
  &ODBCStatement_method_setFetchSize_I_V,
  &ODBCStatement_method_setMaxFieldSize_I_V,
  &ODBCStatement_method_setMaxRows_I_V,
  &ODBCStatement_method_setQueryTimeout_I_V,
  &ODBCStatement_method_setScrollableCursor_Z_V,
  0
};


struct ODBCStatement_MetaInfoInitializer
{  ODBCStatement_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ODBCStatement::clazzInfo();
    ci->fields =  _ODBCStatement_fields;
    ci->methods =  _ODBCStatement_methods;
    ci->_scopeParent = acdk_sql_odbc_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ODBCStatement_MetaInfoInitializer ODBCStatement_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace sql
} // namespace odbc

